// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-index-autoderef.rs:13:1: 13:26>::index(_1: &Foo, _2: isize) -> &isize {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:16:14: 16:19
    debug z => _2;                       // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:16:21: 16:22
    let mut _0: &isize;                  // return place in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:16:34: 16:40
    let mut _3: isize;                   // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:17:12: 17:13
    let _4: &isize;                      // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:18:13: 18:20
    let _5: &isize;                      // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:20:13: 20:20

    bb0: {
        _3 = _2;                         // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:17:12: 17:13
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:17:12: 17:18
    }

    bb1: {
        _4 = &((*_1).0: isize);          // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:18:13: 18:20
        _0 = _4;                         // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:18:13: 18:20
        goto -> bb3;                     // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:17:9: 21:10
    }

    bb2: {
        _5 = &((*_1).1: isize);          // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:20:13: 20:20
        _0 = _5;                         // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:20:13: 20:20
        goto -> bb3;                     // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:17:9: 21:10
    }

    bb3: {
        return;                          // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:22:6: 22:6
    }
}

fn <impl at ui/overloaded/overloaded-index-autoderef.rs:25:1: 25:29>::index_mut(_1: &mut Foo, _2: isize) -> &mut isize {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:26:18: 26:27
    debug z => _2;                       // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:26:29: 26:30
    let mut _0: &mut isize;              // return place in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:26:42: 26:52
    let mut _3: &mut isize;              // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:27:9: 31:10
    let mut _4: &mut isize;              // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:27:9: 31:10
    let mut _5: isize;                   // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:27:12: 27:13
    let mut _6: &mut isize;              // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:28:13: 28:24
    let mut _7: &mut isize;              // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:28:13: 28:24
    let mut _8: &mut isize;              // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:30:13: 30:24

    bb0: {
        _5 = _2;                         // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:27:12: 27:13
        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:27:12: 27:18
    }

    bb1: {
        _7 = &mut ((*_1).0: isize);      // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:28:13: 28:24
        _6 = &mut (*_7);                 // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:28:13: 28:24
        _4 = &mut (*_6);                 // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:28:13: 28:24
        goto -> bb3;                     // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:27:9: 31:10
    }

    bb2: {
        _8 = &mut ((*_1).1: isize);      // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:30:13: 30:24
        _4 = &mut (*_8);                 // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:30:13: 30:24
        goto -> bb3;                     // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:27:9: 31:10
    }

    bb3: {
        _3 = &mut (*_4);                 // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:27:9: 31:10
        _0 = &mut (*_3);                 // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:27:9: 31:10
        return;                          // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:32:6: 32:6
    }
}

fn <impl at ui/overloaded/overloaded-index-autoderef.rs:41:1: 41:19>::get(_1: isize) -> isize {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:42:12: 42:16
    let mut _0: isize;                   // return place in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:42:21: 42:26

    bb0: {
        _0 = _1;                         // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:42:29: 42:33
        return;                          // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:42:35: 42:35
    }
}

fn <impl at ui/overloaded/overloaded-index-autoderef.rs:41:1: 41:19>::get_from_ref(_1: &isize) -> isize {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:43:21: 43:26
    let mut _0: isize;                   // return place in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:43:31: 43:36

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:43:39: 43:44
        return;                          // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:43:46: 43:46
    }
}

fn <impl at ui/overloaded/overloaded-index-autoderef.rs:41:1: 41:19>::inc(_1: &mut isize) -> () {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:44:12: 44:21
    let mut _0: ();                      // return place in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:44:23: 44:23
    let mut _2: (isize, bool);           // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:44:25: 44:35

    bb0: {
        _2 = CheckedAdd((*_1), const 1_isize); // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:44:25: 44:35
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_1), const 1_isize) -> bb1; // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:44:25: 44:35
    }

    bb1: {
        (*_1) = move (_2.0: isize);      // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:44:25: 44:35
        return;                          // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:44:38: 44:38
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:47:11: 47:11
    let mut _1: std::boxed::Box<Foo>;    // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:48:9: 48:14
    let mut _2: Foo;                     // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:48:34: 51:6
    let mut _3: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: &isize;                      // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:53:16: 53:20
    let mut _6: &Foo;                    // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:53:16: 53:17
    let mut _7: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: &mut isize;             // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:55:5: 55:9
    let mut _23: &mut Foo;               // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:55:5: 55:6
    let mut _24: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _25: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _26: &isize;                     // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:57:16: 57:20
    let mut _27: &Foo;                   // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:57:16: 57:17
    let mut _28: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _33: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _34: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _36: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _37: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _38: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _39: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _40: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _41: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _44: &mut isize;             // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:61:22: 61:26
    let mut _45: &mut Foo;               // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:61:22: 61:23
    let _47: &isize;                     // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:67:18: 67:22
    let mut _48: &Foo;                   // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:67:18: 67:19
    let mut _49: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _50: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _51: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _54: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _55: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _56: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _57: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _59: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _60: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _61: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _62: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _63: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _64: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _66: ();                         // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:72:5: 72:15
    let mut _67: &mut isize;             // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:72:5: 72:15
    let mut _68: &mut isize;             // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:72:5: 72:9
    let mut _69: &mut Foo;               // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:72:5: 72:6
    let mut _70: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _71: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _72: isize;                      // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:73:16: 73:26
    let mut _73: isize;                  // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:73:16: 73:20
    let mut _74: &isize;                 // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:73:16: 73:20
    let mut _75: &Foo;                   // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:73:16: 73:17
    let mut _76: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _79: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _80: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _81: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _82: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _84: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _85: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _86: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _87: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _88: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _89: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _91: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _92: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _93: isize;                      // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:74:16: 74:35
    let mut _94: &isize;                 // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:74:16: 74:35
    let _95: &isize;                     // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:74:16: 74:20
    let mut _96: &Foo;                   // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:74:16: 74:17
    let mut _97: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _100: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _101: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _102: isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _103: isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _105: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _106: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _107: &isize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _108: &isize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _109: &isize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _110: &isize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _111: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _117: *const Foo;            // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:48:9: 48:14
    let mut _118: *const Foo;            // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:48:9: 48:14
    let mut _119: *const Foo;            // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:48:9: 48:14
    let mut _120: *const Foo;            // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:48:9: 48:14
    let mut _121: *const Foo;            // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:48:9: 48:14
    let mut _122: *const Foo;            // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:48:9: 48:14
    let mut _123: *const Foo;            // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:48:9: 48:14
    let mut _124: *const Foo;            // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:48:9: 48:14
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/overloaded/overloaded-index-autoderef.rs:48:9: 48:14
        let _8: &isize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _9: &isize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _29: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _30: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _43: &mut isize;             // in scope 1 at ui/overloaded/overloaded-index-autoderef.rs:61:13: 61:14
        let _46: &isize;                 // in scope 1 at ui/overloaded/overloaded-index-autoderef.rs:67:13: 67:14
        let _77: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _78: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _98: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _99: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _112: &isize;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _113: &isize;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _115: &isize;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _116: &isize;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _8;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _9;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _14: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _14;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _29;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _30;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _35: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _35;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug p => _43;              // in scope 6 at ui/overloaded/overloaded-index-autoderef.rs:61:13: 61:14
        }
        scope 7 {
            debug p => _46;              // in scope 7 at ui/overloaded/overloaded-index-autoderef.rs:67:13: 67:14
            let _52: &isize;             // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _53: &isize;             // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _114: &isize;        // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 8 {
                debug left_val => _52;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _53;  // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _58: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 9 {
                    debug kind => _58;   // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
        scope 10 {
            debug left_val => _77;       // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _78;      // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _83: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 11 {
                debug kind => _83;       // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 12 {
            debug left_val => _98;       // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _99;      // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _104: core::panicking::AssertKind; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 13 {
                debug kind => _104;      // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _2 = Foo { x: const 1_isize, y: const 2_isize }; // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:48:34: 51:6
        _1 = Box::<Foo>::new(move _2) -> bb1; // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:48:25: 51:7
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-autoderef.rs:48:25: 48:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Foo) -> Box<Foo> {Box::<Foo>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _117 = (((_1.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo); // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:53:16: 53:17
        _6 = &(*_117);                   // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:53:16: 53:17
        _5 = <Foo as Index<isize>>::index(move _6, const 1_isize) -> [return: bb2, unwind: bb24]; // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:53:16: 53:20
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-autoderef.rs:53:16: 53:20
                                         // + literal: Const { ty: for<'a> fn(&'a Foo, isize) -> &'a <Foo as Index<isize>>::Output {<Foo as Index<isize>>::index}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = _5;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _116 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[4])) }
        _7 = _116;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _7);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_3.0: &isize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_3.1: &isize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = const 2_isize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<isize, isize>(move _16, move _17, move _19, move _21) -> bb24; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb4: {
        _118 = (((_1.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo); // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:55:5: 55:6
        _23 = &mut (*_118);              // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:55:5: 55:6
        _22 = <Foo as IndexMut<isize>>::index_mut(move _23, const 0_isize) -> [return: bb5, unwind: bb24]; // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:55:5: 55:9
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-autoderef.rs:55:5: 55:9
                                         // + literal: Const { ty: for<'a> fn(&'a mut Foo, isize) -> &'a mut <Foo as Index<isize>>::Output {<Foo as IndexMut<isize>>::index_mut}, val: Value(<ZST>) }
    }

    bb5: {
        (*_22) = const 3_isize;          // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:55:5: 55:13
        _119 = (((_1.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo); // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:57:16: 57:17
        _27 = &(*_119);                  // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:57:16: 57:17
        _26 = <Foo as Index<isize>>::index(move _27, const 0_isize) -> [return: bb6, unwind: bb24]; // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:57:16: 57:20
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-autoderef.rs:57:16: 57:20
                                         // + literal: Const { ty: for<'a> fn(&'a Foo, isize) -> &'a <Foo as Index<isize>>::Output {<Foo as Index<isize>>::index}, val: Value(<ZST>) }
    }

    bb6: {
        _25 = _26;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _115 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[3])) }
        _28 = _115;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _24 = (move _25, move _28);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_24.0: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_24.1: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _33 = (*_29);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _34 = const 3_isize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _32 = Eq(move _33, move _34);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _31 = Not(move _32);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _31) -> [0: bb8, otherwise: bb7]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _35 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = _29;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _39;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _30;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = _41;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _36 = core::panicking::assert_failed::<isize, isize>(move _37, move _38, move _40, move _42) -> bb24; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb8: {
        _120 = (((_1.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo); // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:61:22: 61:23
        _45 = &mut (*_120);              // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:61:22: 61:23
        _44 = <Foo as IndexMut<isize>>::index_mut(move _45, const 1_isize) -> [return: bb9, unwind: bb24]; // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:61:22: 61:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-autoderef.rs:61:22: 61:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut Foo, isize) -> &'a mut <Foo as Index<isize>>::Output {<Foo as IndexMut<isize>>::index_mut}, val: Value(<ZST>) }
    }

    bb9: {
        _43 = &mut (*_44);               // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:61:17: 61:26
        (*_43) = const 4_isize;          // scope 6 at ui/overloaded/overloaded-index-autoderef.rs:62:9: 62:15
        _121 = (((_1.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo); // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:67:18: 67:19
        _48 = &(*_121);                  // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:67:18: 67:19
        _47 = <Foo as Index<isize>>::index(move _48, const 1_isize) -> [return: bb10, unwind: bb24]; // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:67:18: 67:22
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-autoderef.rs:67:18: 67:22
                                         // + literal: Const { ty: for<'a> fn(&'a Foo, isize) -> &'a <Foo as Index<isize>>::Output {<Foo as Index<isize>>::index}, val: Value(<ZST>) }
    }

    bb10: {
        _46 = _47;                       // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:67:17: 67:22
        _50 = _46;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _114 = const _;                  // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[2])) }
        _51 = _114;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _49 = (move _50, move _51);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _52 = (_49.0: &isize);           // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _53 = (_49.1: &isize);           // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _56 = (*_52);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _57 = const 4_isize;             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _55 = Eq(move _56, move _57);    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _54 = Not(move _55);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _54) -> [0: bb12, otherwise: bb11]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _58 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _60 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _62 = _52;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _61 = _62;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _64 = _53;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _63 = _64;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _65 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _59 = core::panicking::assert_failed::<isize, isize>(move _60, move _61, move _63, move _65) -> bb24; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb12: {
        _122 = (((_1.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo); // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:72:5: 72:6
        _69 = &mut (*_122);              // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:72:5: 72:6
        _68 = <Foo as IndexMut<isize>>::index_mut(move _69, const 1_isize) -> [return: bb13, unwind: bb24]; // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:72:5: 72:9
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-autoderef.rs:72:5: 72:9
                                         // + literal: Const { ty: for<'a> fn(&'a mut Foo, isize) -> &'a mut <Foo as Index<isize>>::Output {<Foo as IndexMut<isize>>::index_mut}, val: Value(<ZST>) }
    }

    bb13: {
        _67 = &mut (*_68);               // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:72:5: 72:15
        _66 = <isize as Int>::inc(move _67) -> [return: bb14, unwind: bb24]; // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:72:5: 72:15
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-autoderef.rs:72:10: 72:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut isize) {<isize as Int>::inc}, val: Value(<ZST>) }
    }

    bb14: {
        _123 = (((_1.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo); // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:73:16: 73:17
        _75 = &(*_123);                  // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:73:16: 73:17
        _74 = <Foo as Index<isize>>::index(move _75, const 1_isize) -> [return: bb15, unwind: bb24]; // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:73:16: 73:20
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-autoderef.rs:73:16: 73:20
                                         // + literal: Const { ty: for<'a> fn(&'a Foo, isize) -> &'a <Foo as Index<isize>>::Output {<Foo as Index<isize>>::index}, val: Value(<ZST>) }
    }

    bb15: {
        _73 = (*_74);                    // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:73:16: 73:20
        _72 = <isize as Int>::get(move _73) -> [return: bb16, unwind: bb24]; // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:73:16: 73:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-autoderef.rs:73:21: 73:24
                                         // + literal: Const { ty: fn(isize) -> isize {<isize as Int>::get}, val: Value(<ZST>) }
    }

    bb16: {
        _71 = &_72;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _113 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[1])) }
        _76 = _113;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _70 = (move _71, move _76);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _77 = (_70.0: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _78 = (_70.1: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _81 = (*_77);                    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _82 = const 5_isize;             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _80 = Eq(move _81, move _82);    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _79 = Not(move _80);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _79) -> [0: bb18, otherwise: bb17]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb17: {
        _83 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _85 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _87 = _77;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _86 = _87;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _89 = _78;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _88 = _89;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _90 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _84 = core::panicking::assert_failed::<isize, isize>(move _85, move _86, move _88, move _90) -> bb24; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb18: {
        _124 = (((_1.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo); // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:74:16: 74:17
        _96 = &(*_124);                  // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:74:16: 74:17
        _95 = <Foo as Index<isize>>::index(move _96, const 1_isize) -> [return: bb19, unwind: bb24]; // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:74:16: 74:20
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-autoderef.rs:74:16: 74:20
                                         // + literal: Const { ty: for<'a> fn(&'a Foo, isize) -> &'a <Foo as Index<isize>>::Output {<Foo as Index<isize>>::index}, val: Value(<ZST>) }
    }

    bb19: {
        _94 = _95;                       // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:74:16: 74:35
        _93 = <isize as Int>::get_from_ref(move _94) -> [return: bb20, unwind: bb24]; // scope 1 at ui/overloaded/overloaded-index-autoderef.rs:74:16: 74:35
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-autoderef.rs:74:21: 74:33
                                         // + literal: Const { ty: for<'a> fn(&'a isize) -> isize {<isize as Int>::get_from_ref}, val: Value(<ZST>) }
    }

    bb20: {
        _92 = &_93;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _112 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _97 = _112;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _91 = (move _92, move _97);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _98 = (_91.0: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _99 = (_91.1: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _102 = (*_98);                   // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _103 = const 5_isize;            // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _101 = Eq(move _102, move _103); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _100 = Not(move _101);           // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _100) -> [0: bb22, otherwise: bb21]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb21: {
        _104 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _106 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _108 = _98;                      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _107 = _108;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _110 = _99;                      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _109 = _110;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _111 = Option::<Arguments<'_>>::None; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _105 = core::panicking::assert_failed::<isize, isize>(move _106, move _107, move _109, move _111) -> bb24; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb22: {
        drop(_1) -> bb23;                // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:75:1: 75:2
    }

    bb23: {
        return;                          // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:75:2: 75:2
    }

    bb24 (cleanup): {
        drop(_1) -> bb25;                // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:75:1: 75:2
    }

    bb25 (cleanup): {
        resume;                          // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:47:1: 75:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:74:37: 74:38

    bb0: {
        _1 = const 5_isize;              // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:74:37: 74:38
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:73:28: 73:29

    bb0: {
        _1 = const 5_isize;              // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:73:28: 73:29
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:68:24: 68:25

    bb0: {
        _1 = const 4_isize;              // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:68:24: 68:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:57:22: 57:23

    bb0: {
        _1 = const 3_isize;              // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:57:22: 57:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/overloaded/overloaded-index-autoderef.rs:53:22: 53:23

    bb0: {
        _1 = const 2_isize;              // scope 0 at ui/overloaded/overloaded-index-autoderef.rs:53:22: 53:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
