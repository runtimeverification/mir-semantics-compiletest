// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-autoderef-vtable.rs:15:1: 15:32>::helper_borrow(_1: &Option<T>) -> &T {
    debug self => _1;
    let mut _0: &T;
    let _2: &T;
    let mut _3: std::option::Option<&T>;

    bb0: {
        _3 = Option::<T>::as_ref(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&T>::unwrap(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = _2;
        return;
    }
}

fn <impl at ui/overloaded/overloaded-autoderef-vtable.rs:21:1: 21:54>::deref(_1: &DerefWithHelper<H, T>) -> &T {
    debug self => _1;
    let mut _0: &T;
    let _2: &T;
    let mut _3: &H;

    bb0: {
        _3 = &((*_1).0: H);
        _2 = <H as Helper<T>>::helper_borrow(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = _2;
        return;
    }
}

fn <impl at ui/overloaded/overloaded-autoderef-vtable.rs:31:1: 31:9>::foo(_1: &Foo) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = ((*_1).0: isize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: DerefWithHelper<std::option::Option<Foo>, Foo>;
    let mut _2: std::option::Option<Foo>;
    let mut _3: Foo;
    let mut _4: Foo;
    let mut _5: (&isize, &isize);
    let mut _6: &isize;
    let _7: isize;
    let mut _8: &Foo;
    let _9: &Foo;
    let mut _10: &DerefWithHelper<std::option::Option<Foo>, Foo>;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: isize;
    let mut _16: isize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _11: &isize;
        let _12: &isize;
        let mut _20: &isize;
        scope 2 {
            debug left_val => _11;
            debug right_val => _12;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
    }

    bb0: {
        _3 = Foo { x: const 5_isize };
        _2 = Option::<Foo>::Some(move _3);
        _4 = Foo { x: const 2_isize };
        _1 = DerefWithHelper::<Option<Foo>, Foo> { helper: move _2, value: move _4 };
        _10 = &_1;
        _9 = <DerefWithHelper<Option<Foo>, Foo> as Deref>::deref(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = _9;
        _7 = Foo::foo(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_7;
        _20 = const _;
        _5 = (move _6, _20);
        _11 = (_5.0: &isize);
        _12 = (_5.1: &isize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<isize, isize>(move _17, _11, _12, move _19) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 5_isize;
        _0 = &_1;
        return;
    }
}
