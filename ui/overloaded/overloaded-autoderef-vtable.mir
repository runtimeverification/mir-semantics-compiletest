// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-autoderef-vtable.rs:15:1: 15:32>::helper_borrow(_1: &Option<T>) -> &T {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:16:22: 16:27
    let mut _0: &T;                      // return place in scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:17:9: 17:31
    let mut _2: std::option::Option<&T>; // in scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:17:9: 17:22
    let mut _3: &std::option::Option<T>; // in scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:17:9: 17:22

    bb0: {
        _3 = _1;                         // scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:17:9: 17:22
        _2 = Option::<T>::as_ref(move _3) -> bb1; // scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:17:9: 17:22
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-vtable.rs:17:14: 17:20
                                         // + literal: Const { ty: for<'a> fn(&'a Option<T>) -> Option<&'a T> {Option::<T>::as_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Option::<&T>::unwrap(move _2) -> bb2; // scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:17:9: 17:31
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-vtable.rs:17:23: 17:29
                                         // + literal: Const { ty: fn(Option<&T>) -> &T {Option::<&T>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:18:6: 18:6
    }
}

fn <impl at ui/overloaded/overloaded-autoderef-vtable.rs:21:1: 21:54>::deref(_1: &DerefWithHelper<H, T>) -> &T {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:24:14: 24:19
    let mut _0: &T;                      // return place in scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:25:9: 25:36
    let mut _2: &H;                      // in scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:25:9: 25:36

    bb0: {
        _2 = &((*_1).0: H);              // scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:25:9: 25:36
        _0 = <H as Helper<T>>::helper_borrow(move _2) -> bb1; // scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:25:9: 25:36
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-vtable.rs:25:21: 25:34
                                         // + literal: Const { ty: for<'a> fn(&'a H) -> &'a T {<H as Helper<T>>::helper_borrow}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:26:6: 26:6
    }
}

fn <impl at ui/overloaded/overloaded-autoderef-vtable.rs:31:1: 31:9>::foo(_1: &Foo) -> isize {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:32:12: 32:17
    let mut _0: isize;                   // return place in scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:32:22: 32:27

    bb0: {
        _0 = ((*_1).0: isize);           // scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:32:29: 32:35
        return;                          // scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:32:36: 32:36
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:35:15: 35:15
    let _1: DerefWithHelper<std::option::Option<Foo>, Foo>; // in scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:36:9: 36:10
    let mut _2: std::option::Option<Foo>; // in scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:37:35: 37:51
    let mut _3: Foo;                     // in scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:37:40: 37:50
    let mut _4: Foo;                     // in scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:37:60: 37:72
    let mut _5: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _7: isize;                       // in scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:38:16: 38:23
    let mut _8: &Foo;                    // in scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:38:16: 38:23
    let _9: &Foo;                        // in scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:38:16: 38:23
    let mut _10: &DerefWithHelper<std::option::Option<Foo>, Foo>; // in scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:38:16: 38:23
    let mut _11: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/overloaded/overloaded-autoderef-vtable.rs:36:9: 36:10
        let _12: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _13: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _26: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _12;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _13;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _18: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _18;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _3 = const Foo {{ x: 5_isize }}; // scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:37:40: 37:50
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-vtable.rs:37:40: 37:50
                                         // + literal: Const { ty: Foo, val: Value(Scalar(0x0000000000000005)) }
        _2 = Option::<Foo>::Some(move _3); // scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:37:35: 37:51
        _4 = const Foo {{ x: 2_isize }}; // scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:37:60: 37:72
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-vtable.rs:37:60: 37:72
                                         // + literal: Const { ty: Foo, val: Value(Scalar(0x0000000000000002)) }
        _1 = DerefWithHelper::<Option<Foo>, Foo> { helper: move _2, value: move _4 }; // scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:37:9: 37:74
        _10 = &_1;                       // scope 1 at ui/overloaded/overloaded-autoderef-vtable.rs:38:16: 38:23
        _9 = <DerefWithHelper<Option<Foo>, Foo> as Deref>::deref(move _10) -> bb1; // scope 1 at ui/overloaded/overloaded-autoderef-vtable.rs:38:16: 38:23
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-vtable.rs:38:16: 38:23
                                         // + literal: Const { ty: for<'a> fn(&'a DerefWithHelper<Option<Foo>, Foo>) -> &'a <DerefWithHelper<Option<Foo>, Foo> as Deref>::Target {<DerefWithHelper<Option<Foo>, Foo> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _9;                         // scope 1 at ui/overloaded/overloaded-autoderef-vtable.rs:38:16: 38:23
        _7 = Foo::foo(move _8) -> bb2;   // scope 1 at ui/overloaded/overloaded-autoderef-vtable.rs:38:16: 38:23
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-vtable.rs:38:18: 38:21
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) -> isize {Foo::foo}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &_7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _26 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _11 = _26;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _11);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_5.0: &isize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_5.1: &isize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = (*_12);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = const 5_isize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = Eq(move _16, move _17);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _14 = Not(move _15);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _18 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<isize, isize>(move _20, move _21, move _23, move _25); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:39:2: 39:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:38:25: 38:26

    bb0: {
        _1 = const 5_isize;              // scope 0 at ui/overloaded/overloaded-autoderef-vtable.rs:38:25: 38:26
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
