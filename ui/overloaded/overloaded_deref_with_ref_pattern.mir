// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded_deref_with_ref_pattern.rs:11:1: 11:29>::deref(_1: &DerefOk<T>) -> &T {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:13:14: 13:19
    let mut _0: &T;                      // return place in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:14:9: 14:16

    bb0: {
        _0 = &((*_1).0: T);              // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:14:9: 14:16
        return;                          // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:15:6: 15:6
    }
}

fn <impl at ui/overloaded/overloaded_deref_with_ref_pattern.rs:18:1: 18:32>::deref_mut(_1: &mut DerefOk<T>) -> &mut T {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:19:18: 19:27
    let mut _0: &mut T;                  // return place in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:19:32: 19:49
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _2 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn <impl at ui/overloaded/overloaded_deref_with_ref_pattern.rs:24:1: 24:32>::deref(_1: &DerefMutOk<T>) -> &T {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:26:14: 26:19
    let mut _0: &T;                      // return place in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:26:24: 26:37
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _2 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn <impl at ui/overloaded/overloaded_deref_with_ref_pattern.rs:31:1: 31:35>::deref_mut(_1: &mut DerefMutOk<T>) -> &mut T {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:32:18: 32:27
    let mut _0: &mut T;                  // return place in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:32:32: 32:49
    let mut _2: &mut T;                  // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:33:9: 33:20
    let mut _3: &mut T;                  // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:33:9: 33:20

    bb0: {
        _3 = &mut ((*_1).0: T);          // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:33:9: 33:20
        _2 = &mut (*_3);                 // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:33:9: 33:20
        _0 = &mut (*_2);                 // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:33:9: 33:20
        return;                          // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:34:6: 34:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:37:11: 37:11
    let mut _1: DerefMutOk<i32>;         // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:39:9: 39:14
    let mut _2: &mut i32;                // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:40:11: 40:13
    let mut _3: &mut DerefMutOk<i32>;    // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:40:12: 40:13
    let mut _7: &mut i32;                // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:46:21: 46:23
    let mut _8: &mut DerefMutOk<i32>;    // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:46:22: 46:23
    let mut _10: &i32;                   // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:50:11: 50:13
    let mut _11: &DerefOk<i32>;          // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:50:12: 50:13
    let mut _15: &i32;                   // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:56:17: 56:19
    let mut _16: &DerefOk<i32>;          // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:56:18: 56:19
    let mut _18: (i32, i32);             // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:59:28: 59:34
    let mut _19: &mut (i32, i32);        // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:60:11: 60:13
    let mut _20: &mut DerefMutOk<(i32, i32)>; // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:60:12: 60:13
    let mut _24: (i32, i32);             // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:64:28: 64:34
    let mut _25: &mut (i32, i32);        // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:65:11: 65:13
    let mut _26: &mut DerefMutOk<(i32, i32)>; // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:65:12: 65:13
    let mut _30: (i32, i32);             // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:70:28: 70:34
    let mut _33: &mut (i32, i32);        // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:71:30: 71:32
    let mut _34: &mut DerefMutOk<(i32, i32)>; // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:71:31: 71:32
    let mut _36: (i32, i32);             // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:73:28: 73:34
    let mut _39: &mut (i32, i32);        // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:74:30: 74:32
    let mut _40: &mut DerefMutOk<(i32, i32)>; // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:74:31: 74:32
    let mut _42: (i32, i32);             // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:77:25: 77:31
    let mut _43: &(i32, i32);            // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:78:11: 78:13
    let mut _44: &DerefOk<(i32, i32)>;   // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:78:12: 78:13
    let mut _48: (i32, i32);             // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:83:25: 83:31
    let mut _51: &(i32, i32);            // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:84:26: 84:28
    let mut _52: &DerefOk<(i32, i32)>;   // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:84:27: 84:28
    let mut _54: (i32, i32);             // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:87:28: 87:34
    let mut _55: &mut (i32, i32);        // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:88:11: 88:13
    let mut _56: &mut DerefMutOk<(i32, i32)>; // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:88:12: 88:13
    let mut _60: (i32, i32);             // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:93:28: 93:34
    let mut _63: &mut (i32, i32);        // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:94:34: 94:36
    let mut _64: &mut DerefMutOk<(i32, i32)>; // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:94:35: 94:36
    scope 1 {
        debug b => _1;                   // in scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:39:9: 39:14
        let _4: &mut i32;                // in scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:41:9: 41:18
        let mut _5: DerefMutOk<i32>;     // in scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:45:9: 45:14
        scope 2 {
            debug n => _4;               // in scope 2 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:41:9: 41:18
        }
        scope 3 {
            debug y => _5;               // in scope 3 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:45:9: 45:14
            let _6: &mut i32;            // in scope 3 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:46:9: 46:18
            scope 4 {
                debug z => _6;           // in scope 4 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:46:9: 46:18
                let mut _9: DerefOk<i32>; // in scope 4 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:49:9: 49:14
                scope 5 {
                    debug b => _9;       // in scope 5 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:49:9: 49:14
                    let _12: &i32;       // in scope 5 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:51:9: 51:14
                    let mut _13: DerefOk<i32>; // in scope 5 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:55:9: 55:14
                    scope 6 {
                        debug n => _12;  // in scope 6 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:51:9: 51:14
                    }
                    scope 7 {
                        debug y => _13;  // in scope 7 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:55:9: 55:14
                        let _14: &i32;   // in scope 7 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:56:9: 56:14
                        scope 8 {
                            debug z => _14; // in scope 8 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:56:9: 56:14
                            let mut _17: DerefMutOk<(i32, i32)>; // in scope 8 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:59:9: 59:14
                            scope 9 {
                                debug b => _17; // in scope 9 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:59:9: 59:14
                                let _21: &mut i32; // in scope 9 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:61:10: 61:19
                                let _22: &i32; // in scope 9 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:61:21: 61:26
                                let mut _23: DerefMutOk<(i32, i32)>; // in scope 9 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:64:9: 64:14
                                scope 10 {
                                    debug n => _21; // in scope 10 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:61:10: 61:19
                                    debug m => _22; // in scope 10 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:61:21: 61:26
                                }
                                scope 11 {
                                    debug b => _23; // in scope 11 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:64:9: 64:14
                                    let _27: &i32; // in scope 11 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:66:10: 66:15
                                    let _28: &mut i32; // in scope 11 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:66:17: 66:26
                                    let mut _29: DerefMutOk<(i32, i32)>; // in scope 11 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:70:9: 70:14
                                    scope 12 {
                                        debug n => _27; // in scope 12 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:66:10: 66:15
                                        debug m => _28; // in scope 12 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:66:17: 66:26
                                    }
                                    scope 13 {
                                        debug y => _29; // in scope 13 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:70:9: 70:14
                                        let _31: &mut i32; // in scope 13 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:71:10: 71:19
                                        let _32: &i32; // in scope 13 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:71:21: 71:26
                                        scope 14 {
                                            debug z => _31; // in scope 14 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:71:10: 71:19
                                            debug a => _32; // in scope 14 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:71:21: 71:26
                                            let mut _35: DerefMutOk<(i32, i32)>; // in scope 14 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:73:9: 73:14
                                            scope 15 {
                                                debug y => _35; // in scope 15 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:73:9: 73:14
                                                let _37: &i32; // in scope 15 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:74:10: 74:15
                                                let _38: &mut i32; // in scope 15 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:74:17: 74:26
                                                scope 16 {
                                                    debug z => _37; // in scope 16 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:74:10: 74:15
                                                    debug a => _38; // in scope 16 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:74:17: 74:26
                                                    let mut _41: DerefOk<(i32, i32)>; // in scope 16 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:77:9: 77:14
                                                    scope 17 {
                                                        debug b => _41; // in scope 17 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:77:9: 77:14
                                                        let _45: &i32; // in scope 17 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:79:10: 79:15
                                                        let _46: &i32; // in scope 17 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:79:17: 79:22
                                                        let mut _47: DerefOk<(i32, i32)>; // in scope 17 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:83:9: 83:14
                                                        scope 18 {
                                                            debug n => _45; // in scope 18 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:79:10: 79:15
                                                            debug m => _46; // in scope 18 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:79:17: 79:22
                                                        }
                                                        scope 19 {
                                                            debug y => _47; // in scope 19 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:83:9: 83:14
                                                            let _49: &i32; // in scope 19 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:84:10: 84:15
                                                            let _50: &i32; // in scope 19 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:84:17: 84:22
                                                            scope 20 {
                                                                debug z => _49; // in scope 20 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:84:10: 84:15
                                                                debug a => _50; // in scope 20 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:84:17: 84:22
                                                                let mut _53: DerefMutOk<(i32, i32)>; // in scope 20 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:87:9: 87:14
                                                                scope 21 {
                                                                    debug b => _53; // in scope 21 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:87:9: 87:14
                                                                    let _57: &mut i32; // in scope 21 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:89:10: 89:19
                                                                    let _58: &mut i32; // in scope 21 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:89:21: 89:30
                                                                    let mut _59: DerefMutOk<(i32, i32)>; // in scope 21 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:93:9: 93:14
                                                                    scope 22 {
                                                                        debug n => _57; // in scope 22 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:89:10: 89:19
                                                                        debug m => _58; // in scope 22 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:89:21: 89:30
                                                                    }
                                                                    scope 23 {
                                                                        debug y => _59; // in scope 23 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:93:9: 93:14
                                                                        let _61: &mut i32; // in scope 23 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:94:10: 94:19
                                                                        let _62: &mut i32; // in scope 23 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:94:21: 94:30
                                                                        scope 24 {
                                                                            debug z => _61; // in scope 24 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:94:10: 94:19
                                                                            debug a => _62; // in scope 24 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:94:21: 94:30
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = DerefMutOk::<i32>(const 0_i32); // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:39:17: 39:30
        _3 = &mut _1;                    // scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:40:12: 40:13
        _2 = <DerefMutOk<i32> as DerefMut>::deref_mut(move _3) -> bb1; // scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:40:11: 40:13
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern.rs:40:11: 40:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut DerefMutOk<i32>) -> &'a mut <DerefMutOk<i32> as Deref>::Target {<DerefMutOk<i32> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut (*_2);                 // scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:41:9: 41:18
        _5 = DerefMutOk::<i32>(const 1_i32); // scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:45:17: 45:30
        _8 = &mut _5;                    // scope 3 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:46:22: 46:23
        _7 = <DerefMutOk<i32> as DerefMut>::deref_mut(move _8) -> bb2; // scope 3 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:46:21: 46:23
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern.rs:46:21: 46:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut DerefMutOk<i32>) -> &'a mut <DerefMutOk<i32> as Deref>::Target {<DerefMutOk<i32> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &mut (*_7);                 // scope 3 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:46:9: 46:18
        _9 = DerefOk::<i32>(const 2_i32); // scope 4 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:49:17: 49:27
        _11 = &_9;                       // scope 5 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:50:12: 50:13
        _10 = <DerefOk<i32> as Deref>::deref(move _11) -> bb3; // scope 5 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:50:11: 50:13
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern.rs:50:11: 50:13
                                         // + literal: Const { ty: for<'a> fn(&'a DerefOk<i32>) -> &'a <DerefOk<i32> as Deref>::Target {<DerefOk<i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = _10;                       // scope 5 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:51:9: 51:14
        _13 = DerefOk::<i32>(const 3_i32); // scope 5 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:55:17: 55:27
        _16 = &_13;                      // scope 7 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:56:18: 56:19
        _15 = <DerefOk<i32> as Deref>::deref(move _16) -> bb4; // scope 7 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:56:17: 56:19
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern.rs:56:17: 56:19
                                         // + literal: Const { ty: for<'a> fn(&'a DerefOk<i32>) -> &'a <DerefOk<i32> as Deref>::Target {<DerefOk<i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = _15;                       // scope 7 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:56:9: 56:14
        _18 = const (0_i32, 9_i32);      // scope 8 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:59:28: 59:34
        _17 = DerefMutOk::<(i32, i32)>(move _18); // scope 8 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:59:17: 59:35
        _20 = &mut _17;                  // scope 9 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:60:12: 60:13
        _19 = <DerefMutOk<(i32, i32)> as DerefMut>::deref_mut(move _20) -> bb5; // scope 9 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:60:11: 60:13
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern.rs:60:11: 60:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut DerefMutOk<(i32, i32)>) -> &'a mut <DerefMutOk<(i32, i32)> as Deref>::Target {<DerefMutOk<(i32, i32)> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb5: {
        _21 = &mut ((*_19).0: i32);      // scope 9 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:61:10: 61:19
        _22 = &((*_19).1: i32);          // scope 9 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:61:21: 61:26
        _24 = const (0_i32, 9_i32);      // scope 9 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:64:28: 64:34
        _23 = DerefMutOk::<(i32, i32)>(move _24); // scope 9 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:64:17: 64:35
        _26 = &mut _23;                  // scope 11 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:65:12: 65:13
        _25 = <DerefMutOk<(i32, i32)> as DerefMut>::deref_mut(move _26) -> bb6; // scope 11 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:65:11: 65:13
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern.rs:65:11: 65:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut DerefMutOk<(i32, i32)>) -> &'a mut <DerefMutOk<(i32, i32)> as Deref>::Target {<DerefMutOk<(i32, i32)> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb6: {
        _27 = &((*_25).0: i32);          // scope 11 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:66:10: 66:15
        _28 = &mut ((*_25).1: i32);      // scope 11 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:66:17: 66:26
        _30 = const (1_i32, 8_i32);      // scope 11 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:70:28: 70:34
        _29 = DerefMutOk::<(i32, i32)>(move _30); // scope 11 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:70:17: 70:35
        _34 = &mut _29;                  // scope 13 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:71:31: 71:32
        _33 = <DerefMutOk<(i32, i32)> as DerefMut>::deref_mut(move _34) -> bb7; // scope 13 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:71:30: 71:32
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern.rs:71:30: 71:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut DerefMutOk<(i32, i32)>) -> &'a mut <DerefMutOk<(i32, i32)> as Deref>::Target {<DerefMutOk<(i32, i32)> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb7: {
        _31 = &mut ((*_33).0: i32);      // scope 13 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:71:10: 71:19
        _32 = &((*_33).1: i32);          // scope 13 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:71:21: 71:26
        _36 = const (1_i32, 8_i32);      // scope 14 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:73:28: 73:34
        _35 = DerefMutOk::<(i32, i32)>(move _36); // scope 14 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:73:17: 73:35
        _40 = &mut _35;                  // scope 15 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:74:31: 74:32
        _39 = <DerefMutOk<(i32, i32)> as DerefMut>::deref_mut(move _40) -> bb8; // scope 15 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:74:30: 74:32
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern.rs:74:30: 74:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut DerefMutOk<(i32, i32)>) -> &'a mut <DerefMutOk<(i32, i32)> as Deref>::Target {<DerefMutOk<(i32, i32)> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb8: {
        _37 = &((*_39).0: i32);          // scope 15 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:74:10: 74:15
        _38 = &mut ((*_39).1: i32);      // scope 15 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:74:17: 74:26
        _42 = const (2_i32, 7_i32);      // scope 16 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:77:25: 77:31
        _41 = DerefOk::<(i32, i32)>(move _42); // scope 16 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:77:17: 77:32
        _44 = &_41;                      // scope 17 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:78:12: 78:13
        _43 = <DerefOk<(i32, i32)> as Deref>::deref(move _44) -> bb9; // scope 17 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:78:11: 78:13
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern.rs:78:11: 78:13
                                         // + literal: Const { ty: for<'a> fn(&'a DerefOk<(i32, i32)>) -> &'a <DerefOk<(i32, i32)> as Deref>::Target {<DerefOk<(i32, i32)> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _45 = &((*_43).0: i32);          // scope 17 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:79:10: 79:15
        _46 = &((*_43).1: i32);          // scope 17 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:79:17: 79:22
        _48 = const (3_i32, 6_i32);      // scope 17 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:83:25: 83:31
        _47 = DerefOk::<(i32, i32)>(move _48); // scope 17 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:83:17: 83:32
        _52 = &_47;                      // scope 19 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:84:27: 84:28
        _51 = <DerefOk<(i32, i32)> as Deref>::deref(move _52) -> bb10; // scope 19 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:84:26: 84:28
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern.rs:84:26: 84:28
                                         // + literal: Const { ty: for<'a> fn(&'a DerefOk<(i32, i32)>) -> &'a <DerefOk<(i32, i32)> as Deref>::Target {<DerefOk<(i32, i32)> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb10: {
        _49 = &((*_51).0: i32);          // scope 19 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:84:10: 84:15
        _50 = &((*_51).1: i32);          // scope 19 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:84:17: 84:22
        _54 = const (4_i32, 5_i32);      // scope 20 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:87:28: 87:34
        _53 = DerefMutOk::<(i32, i32)>(move _54); // scope 20 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:87:17: 87:35
        _56 = &mut _53;                  // scope 21 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:88:12: 88:13
        _55 = <DerefMutOk<(i32, i32)> as DerefMut>::deref_mut(move _56) -> bb11; // scope 21 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:88:11: 88:13
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern.rs:88:11: 88:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut DerefMutOk<(i32, i32)>) -> &'a mut <DerefMutOk<(i32, i32)> as Deref>::Target {<DerefMutOk<(i32, i32)> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb11: {
        _57 = &mut ((*_55).0: i32);      // scope 21 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:89:10: 89:19
        _58 = &mut ((*_55).1: i32);      // scope 21 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:89:21: 89:30
        _60 = const (5_i32, 4_i32);      // scope 21 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:93:28: 93:34
        _59 = DerefMutOk::<(i32, i32)>(move _60); // scope 21 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:93:17: 93:35
        _64 = &mut _59;                  // scope 23 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:94:35: 94:36
        _63 = <DerefMutOk<(i32, i32)> as DerefMut>::deref_mut(move _64) -> bb12; // scope 23 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:94:34: 94:36
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern.rs:94:34: 94:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut DerefMutOk<(i32, i32)>) -> &'a mut <DerefMutOk<(i32, i32)> as Deref>::Target {<DerefMutOk<(i32, i32)> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb12: {
        _61 = &mut ((*_63).0: i32);      // scope 23 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:94:10: 94:19
        _62 = &mut ((*_63).1: i32);      // scope 23 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:94:21: 94:30
        return;                          // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:95:2: 95:2
    }
}

fn DerefOk(_1: T) -> DerefOk<T> {
    let mut _0: DerefOk<T>;              // return place in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:8:1: 8:18

    bb0: {
        _0 = DerefOk::<T>(move _1);      // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:8:1: 8:18
        return;                          // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:8:1: 8:18
    }
}

// MIR FOR CTFE
fn DerefOk(_1: T) -> DerefOk<T> {
    let mut _0: DerefOk<T>;              // return place in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:8:1: 8:18

    bb0: {
        _0 = DerefOk::<T>(move _1);      // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:8:1: 8:18
        return;                          // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:8:1: 8:18
    }
}

fn DerefMutOk(_1: T) -> DerefMutOk<T> {
    let mut _0: DerefMutOk<T>;           // return place in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:9:1: 9:21

    bb0: {
        _0 = DerefMutOk::<T>(move _1);   // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:9:1: 9:21
        return;                          // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:9:1: 9:21
    }
}

// MIR FOR CTFE
fn DerefMutOk(_1: T) -> DerefMutOk<T> {
    let mut _0: DerefMutOk<T>;           // return place in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:9:1: 9:21

    bb0: {
        _0 = DerefMutOk::<T>(move _1);   // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:9:1: 9:21
        return;                          // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern.rs:9:1: 9:21
    }
}
