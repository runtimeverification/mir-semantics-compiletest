// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-calls-zero-args.rs:12:1: 12:21>::call_mut(_1: &mut S, _2: ()) -> i32 {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:13:36: 13:45
    let mut _0: i32;                     // return place in scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:13:58: 13:61
    let mut _3: i32;                     // in scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:14:9: 14:15
    let mut _4: i32;                     // in scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:14:18: 14:24
    let mut _5: (i32, bool);             // in scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:14:9: 14:24

    bb0: {
        _3 = ((*_1).0: i32);             // scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:14:9: 14:15
        _4 = ((*_1).1: i32);             // scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:14:18: 14:24
        _5 = CheckedMul(_3, _4);         // scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:14:9: 14:24
        assert(!move (_5.1: bool), "attempt to compute `{} * {}`, which would overflow", move _3, move _4) -> bb1; // scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:14:9: 14:24
    }

    bb1: {
        _0 = move (_5.0: i32);           // scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:14:9: 14:24
        return;                          // scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:15:6: 15:6
    }
}

fn <impl at ui/overloaded/overloaded-calls-zero-args.rs:18:1: 18:22>::call_once(_1: S, _2: ()) -> i32 {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:20:37: 20:45
    debug args => _2;                    // in scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:20:47: 20:51
    let mut _0: i32;                     // return place in scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:20:60: 20:63
    let mut _3: &mut S;                  // in scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:20:66: 20:85
    let mut _4: ();                      // in scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:20:80: 20:84

    bb0: {
        _3 = &mut _1;                    // scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:20:66: 20:85
        _0 = <S as FnMut<()>>::call_mut(move _3, move _4) -> bb1; // scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:20:66: 20:85
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-calls-zero-args.rs:20:71: 20:79
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut S, ()) -> <S as FnOnce<()>>::Output {<S as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:20:87: 20:87
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:23:11: 23:11
    let mut _1: S;                       // in scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:24:9: 24:14
    let mut _3: &mut S;                  // in scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:28:15: 28:16
    let mut _4: ();                      // in scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:28:15: 28:18
    let mut _5: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _7: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/overloaded/overloaded-calls-zero-args.rs:24:9: 24:14
        let _2: i32;                     // in scope 1 at ui/overloaded/overloaded-calls-zero-args.rs:28:9: 28:12
        scope 2 {
            debug ans => _2;             // in scope 2 at ui/overloaded/overloaded-calls-zero-args.rs:28:9: 28:12
            let _8: &i32;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _9: &i32;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _22: &i32;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _8;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _9;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _14: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _14;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = S { x: const 3_i32, y: const 3_i32 }; // scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:24:17: 27:6
        _3 = &mut _1;                    // scope 1 at ui/overloaded/overloaded-calls-zero-args.rs:28:15: 28:16
        _2 = <S as FnMut<()>>::call_mut(move _3, move _4) -> bb1; // scope 1 at ui/overloaded/overloaded-calls-zero-args.rs:28:15: 28:18
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-calls-zero-args.rs:28:15: 28:16
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut S, ()) -> <S as FnOnce<()>>::Output {<S as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_2;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _22 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _7 = _22;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _7);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_5.0: &i32);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_5.1: &i32);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = const 9_i32;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _14 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<i32, i32>(move _16, move _17, move _19, move _21); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:30:2: 30:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:29:21: 29:22

    bb0: {
        _1 = const 9_i32;                // scope 0 at ui/overloaded/overloaded-calls-zero-args.rs:29:21: 29:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
