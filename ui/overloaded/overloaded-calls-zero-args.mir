// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-calls-zero-args.rs:12:1: 12:21>::call_mut(_1: &mut S, _2: ()) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _3: i32;
    let mut _4: i32;

    bb0: {
        _3 = ((*_1).0: i32);
        _4 = ((*_1).1: i32);
        _0 = Mul(move _3, move _4);
        return;
    }
}

fn <impl at ui/overloaded/overloaded-calls-zero-args.rs:18:1: 18:22>::call_once(_1: S, _2: ()) -> i32 {
    debug self => _1;
    debug args => const ();
    let mut _0: i32;
    let mut _3: &mut S;

    bb0: {
        _3 = &mut _1;
        _0 = <S as FnMut<()>>::call_mut(move _3, const ()) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: S;
    let mut _3: &mut S;
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug s => _1;
        let _2: i32;
        scope 2 {
            debug ans => _2;
            let _6: &i32;
            let _7: &i32;
            let mut _15: &i32;
            scope 3 {
                debug left_val => _6;
                debug right_val => _7;
                let _12: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _12;
                }
            }
        }
    }

    bb0: {
        _1 = S { x: const 3_i32, y: const 3_i32 };
        _3 = &mut _1;
        _2 = <S as FnMut<()>>::call_mut(move _3, const ()) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_2;
        _15 = const _;
        _4 = (move _5, _15);
        _6 = (_4.0: &i32);
        _7 = (_4.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 9_i32;
        _0 = &_1;
        return;
    }
}
