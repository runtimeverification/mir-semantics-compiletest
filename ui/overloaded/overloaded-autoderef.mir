// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-autoderef.rs:8:10: 8:19>::eq(_1: &Point, _2: &Point) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: bool;
    let mut _7: isize;
    let mut _8: isize;

    bb0: {
        _4 = ((*_1).0: isize);
        _5 = ((*_2).0: isize);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = ((*_1).1: isize);
        _8 = ((*_2).1: isize);
        _6 = Eq(move _7, move _8);
        _0 = move _6;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/overloaded/overloaded-autoderef.rs:8:21: 8:26>::fmt(_1: &Point, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &isize;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&isize;
    let _10: &isize;

    bb0: {
        _3 = const "Point";
        _4 = const "x";
        _6 = &((*_1).0: isize);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "y";
        _10 = &((*_1).1: isize);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<usize>;
    let mut _3: Point;
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let _6: &Point;
    let mut _7: &std::rc::Rc<Point>;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: isize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&isize, &isize);
    let mut _18: &isize;
    let _19: &Point;
    let mut _20: &std::rc::Rc<Point>;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: isize;
    let mut _26: isize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: std::cell::RefCell<i32>;
    let mut _33: &i32;
    let mut _34: &std::cell::Ref<'_, i32>;
    let _35: std::cell::Ref<'_, i32>;
    let mut _36: &std::cell::RefCell<i32>;
    let _37: &std::cell::RefCell<i32>;
    let mut _38: &std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _39: &mut i32;
    let mut _40: &mut std::cell::RefMut<'_, i32>;
    let mut _41: std::cell::RefMut<'_, i32>;
    let mut _42: &std::cell::RefCell<i32>;
    let _43: &std::cell::RefCell<i32>;
    let mut _44: &std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _45: (&(i32, i32), &(i32, i32));
    let mut _46: &(i32, i32);
    let _47: (i32, i32);
    let mut _48: i32;
    let mut _49: &i32;
    let mut _50: &std::cell::Ref<'_, i32>;
    let _51: std::cell::Ref<'_, i32>;
    let mut _52: &std::cell::RefCell<i32>;
    let _53: &std::cell::RefCell<i32>;
    let mut _54: &std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _57: bool;
    let mut _58: bool;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: std::string::String;
    let _64: &str;
    let mut _65: (&&str, &&str);
    let mut _66: &&str;
    let _67: &str;
    let _68: &str;
    let mut _69: &std::string::String;
    let _70: &std::string::String;
    let mut _71: &std::rc::Rc<std::string::String>;
    let mut _74: bool;
    let mut _75: bool;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _80: std::cell::RefCell<std::string::String>;
    let mut _81: std::string::String;
    let _82: ();
    let mut _83: &mut std::string::String;
    let mut _84: &mut std::string::String;
    let mut _85: &mut std::cell::RefMut<'_, std::string::String>;
    let mut _86: std::cell::RefMut<'_, std::string::String>;
    let mut _87: &std::cell::RefCell<std::string::String>;
    let _88: &std::cell::RefCell<std::string::String>;
    let mut _89: &std::rc::Rc<std::cell::RefCell<std::string::String>>;
    let _90: &str;
    let mut _91: (&&str, &&str);
    let mut _92: &&str;
    let _93: &str;
    let _94: &str;
    let mut _95: &std::string::String;
    let _96: &std::string::String;
    let mut _97: &std::cell::Ref<'_, std::string::String>;
    let _98: std::cell::Ref<'_, std::string::String>;
    let mut _99: &std::cell::RefCell<std::string::String>;
    let _100: &std::cell::RefCell<std::string::String>;
    let mut _101: &std::rc::Rc<std::cell::RefCell<std::string::String>>;
    let mut _104: bool;
    let mut _105: bool;
    let _107: !;
    let mut _108: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _109: (&&str, &&str);
    let mut _110: &&str;
    let _111: &str;
    let _112: &str;
    let mut _113: &std::string::String;
    let _114: &std::string::String;
    let mut _115: &std::cell::RefMut<'_, std::string::String>;
    let _116: std::cell::RefMut<'_, std::string::String>;
    let mut _117: &std::cell::RefCell<std::string::String>;
    let _118: &std::cell::RefCell<std::string::String>;
    let mut _119: &std::rc::Rc<std::cell::RefCell<std::string::String>>;
    let mut _122: bool;
    let mut _123: bool;
    let _125: !;
    let mut _126: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _128: std::cell::RefCell<Point>;
    let mut _129: Point;
    let mut _130: &mut Point;
    let mut _131: &mut std::cell::RefMut<'_, Point>;
    let mut _132: std::cell::RefMut<'_, Point>;
    let mut _133: &std::cell::RefCell<Point>;
    let _134: &std::cell::RefCell<Point>;
    let mut _135: &std::rc::Rc<std::cell::RefCell<Point>>;
    let mut _136: &mut Point;
    let mut _137: &mut std::cell::RefMut<'_, Point>;
    let mut _138: std::cell::RefMut<'_, Point>;
    let mut _139: &std::cell::RefCell<Point>;
    let _140: &std::cell::RefCell<Point>;
    let mut _141: &std::rc::Rc<std::cell::RefCell<Point>>;
    let mut _142: (&Point, &Point);
    let mut _143: &Point;
    let _144: &Point;
    let mut _145: &std::cell::Ref<'_, Point>;
    let _146: std::cell::Ref<'_, Point>;
    let mut _147: &std::cell::RefCell<Point>;
    let _148: &std::cell::RefCell<Point>;
    let mut _149: &std::rc::Rc<std::cell::RefCell<Point>>;
    let mut _152: bool;
    let mut _153: bool;
    let _155: !;
    let mut _156: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _158: std::cell::RefCell<[i32; 3]>;
    let mut _159: [i32; 3];
    let mut _160: &mut [i32; 3];
    let mut _161: &mut std::cell::RefMut<'_, [i32; 3]>;
    let mut _162: std::cell::RefMut<'_, [i32; 3]>;
    let mut _163: &std::cell::RefCell<[i32; 3]>;
    let _164: &std::cell::RefCell<[i32; 3]>;
    let mut _165: &std::rc::Rc<std::cell::RefCell<[i32; 3]>>;
    let _166: usize;
    let mut _167: usize;
    let mut _168: bool;
    let mut _169: &mut [i32; 3];
    let mut _170: &mut std::cell::RefMut<'_, [i32; 3]>;
    let mut _171: std::cell::RefMut<'_, [i32; 3]>;
    let mut _172: &std::cell::RefCell<[i32; 3]>;
    let _173: &std::cell::RefCell<[i32; 3]>;
    let mut _174: &std::rc::Rc<std::cell::RefCell<[i32; 3]>>;
    let _175: usize;
    let mut _176: usize;
    let mut _177: bool;
    let mut _178: (&(i32, i32, i32), &(i32, i32, i32));
    let mut _179: &(i32, i32, i32);
    let _180: (i32, i32, i32);
    let mut _181: i32;
    let mut _182: &[i32; 3];
    let mut _183: &std::cell::Ref<'_, [i32; 3]>;
    let _184: std::cell::Ref<'_, [i32; 3]>;
    let mut _185: &std::cell::RefCell<[i32; 3]>;
    let _186: &std::cell::RefCell<[i32; 3]>;
    let mut _187: &std::rc::Rc<std::cell::RefCell<[i32; 3]>>;
    let _188: usize;
    let mut _189: usize;
    let mut _190: bool;
    let mut _191: i32;
    let mut _192: &[i32; 3];
    let mut _193: &std::cell::Ref<'_, [i32; 3]>;
    let _194: std::cell::Ref<'_, [i32; 3]>;
    let mut _195: &std::cell::RefCell<[i32; 3]>;
    let _196: &std::cell::RefCell<[i32; 3]>;
    let mut _197: &std::rc::Rc<std::cell::RefCell<[i32; 3]>>;
    let _198: usize;
    let mut _199: usize;
    let mut _200: bool;
    let mut _201: i32;
    let mut _202: &[i32; 3];
    let mut _203: &std::cell::Ref<'_, [i32; 3]>;
    let _204: std::cell::Ref<'_, [i32; 3]>;
    let mut _205: &std::cell::RefCell<[i32; 3]>;
    let _206: &std::cell::RefCell<[i32; 3]>;
    let mut _207: &std::rc::Rc<std::cell::RefCell<[i32; 3]>>;
    let _208: usize;
    let mut _209: usize;
    let mut _210: bool;
    let mut _213: bool;
    let mut _214: bool;
    let _216: !;
    let mut _217: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug box_5 => _1;
        let _2: std::rc::Rc<Point>;
        scope 2 {
            debug point => _2;
            let _8: &isize;
            let _9: &isize;
            let _21: &isize;
            let _22: &isize;
            let _30: std::rc::Rc<std::cell::RefCell<i32>>;
            let mut _224: &isize;
            let mut _225: &isize;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
            scope 5 {
                debug left_val => _21;
                debug right_val => _22;
                let _27: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _27;
                }
            }
            scope 7 {
                debug i => _30;
                let _32: i32;
                scope 8 {
                    debug i_value => _32;
                    let _55: &(i32, i32);
                    let _56: &(i32, i32);
                    let _62: std::rc::Rc<std::string::String>;
                    let mut _223: &(i32, i32);
                    scope 9 {
                        debug left_val => _55;
                        debug right_val => _56;
                        let _59: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _59;
                        }
                    }
                    scope 11 {
                        debug s => _62;
                        let _72: &&str;
                        let _73: &&str;
                        let _79: std::rc::Rc<std::cell::RefCell<std::string::String>>;
                        let mut _222: &&str;
                        scope 12 {
                            debug left_val => _72;
                            debug right_val => _73;
                            let _76: core::panicking::AssertKind;
                            scope 13 {
                                debug kind => _76;
                            }
                        }
                        scope 14 {
                            debug mut_s => _79;
                            let _102: &&str;
                            let _103: &&str;
                            let _120: &&str;
                            let _121: &&str;
                            let _127: std::rc::Rc<std::cell::RefCell<Point>>;
                            let mut _220: &&str;
                            let mut _221: &&str;
                            scope 15 {
                                debug left_val => _102;
                                debug right_val => _103;
                                let _106: core::panicking::AssertKind;
                                scope 16 {
                                    debug kind => _106;
                                }
                            }
                            scope 17 {
                                debug left_val => _120;
                                debug right_val => _121;
                                let _124: core::panicking::AssertKind;
                                scope 18 {
                                    debug kind => _124;
                                }
                            }
                            scope 19 {
                                debug p => _127;
                                let _150: &Point;
                                let _151: &Point;
                                let _157: std::rc::Rc<std::cell::RefCell<[i32; 3]>>;
                                let mut _219: &Point;
                                scope 20 {
                                    debug left_val => _150;
                                    debug right_val => _151;
                                    let _154: core::panicking::AssertKind;
                                    scope 21 {
                                        debug kind => _154;
                                    }
                                }
                                scope 22 {
                                    debug v => _157;
                                    let _211: &(i32, i32, i32);
                                    let _212: &(i32, i32, i32);
                                    let mut _218: &(i32, i32, i32);
                                    scope 23 {
                                        debug left_val => _211;
                                        debug right_val => _212;
                                        let _215: core::panicking::AssertKind;
                                        scope 24 {
                                            debug kind => _215;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Box::<usize>::new(const 5_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = Point { x: const 2_isize, y: const 4_isize };
        _2 = Rc::<Point>::new(move _3) -> [return: bb2, unwind: bb131];
    }

    bb2: {
        _7 = &_2;
        _6 = <Rc<Point> as Deref>::deref(move _7) -> [return: bb3, unwind: bb130];
    }

    bb3: {
        _5 = &((*_6).0: isize);
        _225 = const _;
        _4 = (move _5, _225);
        _8 = (_4.0: &isize);
        _9 = (_4.1: &isize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<isize, isize>(move _14, _8, _9, move _16) -> bb130;
    }

    bb5: {
        _20 = &_2;
        _19 = <Rc<Point> as Deref>::deref(move _20) -> [return: bb6, unwind: bb130];
    }

    bb6: {
        _18 = &((*_19).1: isize);
        _224 = const _;
        _17 = (move _18, _224);
        _21 = (_17.0: &isize);
        _22 = (_17.1: &isize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<isize, isize>(move _27, _21, _22, move _29) -> bb130;
    }

    bb8: {
        _31 = RefCell::<i32>::new(const 2_i32) -> [return: bb9, unwind: bb130];
    }

    bb9: {
        _30 = Rc::<RefCell<i32>>::new(move _31) -> [return: bb10, unwind: bb130];
    }

    bb10: {
        _38 = &_30;
        _37 = <Rc<RefCell<i32>> as Deref>::deref(move _38) -> [return: bb11, unwind: bb129];
    }

    bb11: {
        _36 = _37;
        _35 = RefCell::<i32>::borrow(move _36) -> [return: bb12, unwind: bb129];
    }

    bb12: {
        _34 = &_35;
        _33 = <Ref<'_, i32> as Deref>::deref(move _34) -> [return: bb13, unwind: bb128];
    }

    bb13: {
        _32 = (*_33);
        drop(_35) -> [return: bb14, unwind: bb129];
    }

    bb14: {
        _44 = &_30;
        _43 = <Rc<RefCell<i32>> as Deref>::deref(move _44) -> [return: bb15, unwind: bb129];
    }

    bb15: {
        _42 = _43;
        _41 = RefCell::<i32>::borrow_mut(move _42) -> [return: bb16, unwind: bb129];
    }

    bb16: {
        _40 = &mut _41;
        _39 = <RefMut<'_, i32> as DerefMut>::deref_mut(move _40) -> [return: bb17, unwind: bb127];
    }

    bb17: {
        (*_39) = const 5_i32;
        drop(_41) -> [return: bb18, unwind: bb129];
    }

    bb18: {
        _54 = &_30;
        _53 = <Rc<RefCell<i32>> as Deref>::deref(move _54) -> [return: bb19, unwind: bb129];
    }

    bb19: {
        _52 = _53;
        _51 = RefCell::<i32>::borrow(move _52) -> [return: bb20, unwind: bb129];
    }

    bb20: {
        _50 = &_51;
        _49 = <Ref<'_, i32> as Deref>::deref(move _50) -> [return: bb21, unwind: bb126];
    }

    bb21: {
        _48 = (*_49);
        _47 = (_32, move _48);
        _46 = &_47;
        _223 = const _;
        _45 = (move _46, _223);
        _55 = (_45.0: &(i32, i32));
        _56 = (_45.1: &(i32, i32));
        _58 = <(i32, i32) as PartialEq>::eq(_55, _56) -> [return: bb22, unwind: bb126];
    }

    bb22: {
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _59 = core::panicking::AssertKind::Eq;
        _61 = Option::<Arguments<'_>>::None;
        _60 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _59, _55, _56, move _61) -> bb126;
    }

    bb24: {
        drop(_51) -> [return: bb25, unwind: bb129];
    }

    bb25: {
        _64 = const "foo";
        _63 = <str as ToString>::to_string(_64) -> [return: bb26, unwind: bb129];
    }

    bb26: {
        _62 = Rc::<String>::new(move _63) -> [return: bb27, unwind: bb129];
    }

    bb27: {
        _71 = &_62;
        _70 = <Rc<String> as Deref>::deref(move _71) -> [return: bb28, unwind: bb125];
    }

    bb28: {
        _69 = _70;
        _68 = <String as Deref>::deref(move _69) -> [return: bb29, unwind: bb125];
    }

    bb29: {
        _67 = _68;
        _66 = &_67;
        _222 = const _;
        _65 = (move _66, _222);
        _72 = (_65.0: &&str);
        _73 = (_65.1: &&str);
        _75 = <&str as PartialEq>::eq(_72, _73) -> [return: bb30, unwind: bb125];
    }

    bb30: {
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<&str, &str>(move _76, _72, _73, move _78) -> bb125;
    }

    bb32: {
        _81 = <String as From<&str>>::from(const "foo") -> [return: bb33, unwind: bb125];
    }

    bb33: {
        _80 = RefCell::<String>::new(move _81) -> [return: bb34, unwind: bb125];
    }

    bb34: {
        _79 = Rc::<RefCell<String>>::new(move _80) -> [return: bb35, unwind: bb125];
    }

    bb35: {
        _89 = &_79;
        _88 = <Rc<RefCell<String>> as Deref>::deref(move _89) -> [return: bb36, unwind: bb124];
    }

    bb36: {
        _87 = _88;
        _86 = RefCell::<String>::borrow_mut(move _87) -> [return: bb37, unwind: bb124];
    }

    bb37: {
        _85 = &mut _86;
        _84 = <RefMut<'_, String> as DerefMut>::deref_mut(move _85) -> [return: bb38, unwind: bb123];
    }

    bb38: {
        _83 = _84;
        _90 = const "bar";
        _82 = String::push_str(move _83, _90) -> [return: bb39, unwind: bb123];
    }

    bb39: {
        drop(_86) -> [return: bb40, unwind: bb124];
    }

    bb40: {
        _101 = &_79;
        _100 = <Rc<RefCell<String>> as Deref>::deref(move _101) -> [return: bb41, unwind: bb124];
    }

    bb41: {
        _99 = _100;
        _98 = RefCell::<String>::borrow(move _99) -> [return: bb42, unwind: bb124];
    }

    bb42: {
        _97 = &_98;
        _96 = <Ref<'_, String> as Deref>::deref(move _97) -> [return: bb43, unwind: bb122];
    }

    bb43: {
        _95 = _96;
        _94 = <String as Deref>::deref(move _95) -> [return: bb44, unwind: bb122];
    }

    bb44: {
        _93 = _94;
        _92 = &_93;
        _221 = const _;
        _91 = (move _92, _221);
        _102 = (_91.0: &&str);
        _103 = (_91.1: &&str);
        _105 = <&str as PartialEq>::eq(_102, _103) -> [return: bb45, unwind: bb122];
    }

    bb45: {
        _104 = Not(move _105);
        switchInt(move _104) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _106 = core::panicking::AssertKind::Eq;
        _108 = Option::<Arguments<'_>>::None;
        _107 = core::panicking::assert_failed::<&str, &str>(move _106, _102, _103, move _108) -> bb122;
    }

    bb47: {
        drop(_98) -> [return: bb48, unwind: bb124];
    }

    bb48: {
        _119 = &_79;
        _118 = <Rc<RefCell<String>> as Deref>::deref(move _119) -> [return: bb49, unwind: bb124];
    }

    bb49: {
        _117 = _118;
        _116 = RefCell::<String>::borrow_mut(move _117) -> [return: bb50, unwind: bb124];
    }

    bb50: {
        _115 = &_116;
        _114 = <RefMut<'_, String> as Deref>::deref(move _115) -> [return: bb51, unwind: bb121];
    }

    bb51: {
        _113 = _114;
        _112 = <String as Deref>::deref(move _113) -> [return: bb52, unwind: bb121];
    }

    bb52: {
        _111 = _112;
        _110 = &_111;
        _220 = const _;
        _109 = (move _110, _220);
        _120 = (_109.0: &&str);
        _121 = (_109.1: &&str);
        _123 = <&str as PartialEq>::eq(_120, _121) -> [return: bb53, unwind: bb121];
    }

    bb53: {
        _122 = Not(move _123);
        switchInt(move _122) -> [0: bb55, otherwise: bb54];
    }

    bb54: {
        _124 = core::panicking::AssertKind::Eq;
        _126 = Option::<Arguments<'_>>::None;
        _125 = core::panicking::assert_failed::<&str, &str>(move _124, _120, _121, move _126) -> bb121;
    }

    bb55: {
        drop(_116) -> [return: bb56, unwind: bb124];
    }

    bb56: {
        _129 = Point { x: const 1_isize, y: const 2_isize };
        _128 = RefCell::<Point>::new(move _129) -> [return: bb57, unwind: bb124];
    }

    bb57: {
        _127 = Rc::<RefCell<Point>>::new(move _128) -> [return: bb58, unwind: bb124];
    }

    bb58: {
        _135 = &_127;
        _134 = <Rc<RefCell<Point>> as Deref>::deref(move _135) -> [return: bb59, unwind: bb120];
    }

    bb59: {
        _133 = _134;
        _132 = RefCell::<Point>::borrow_mut(move _133) -> [return: bb60, unwind: bb120];
    }

    bb60: {
        _131 = &mut _132;
        _130 = <RefMut<'_, Point> as DerefMut>::deref_mut(move _131) -> [return: bb61, unwind: bb119];
    }

    bb61: {
        ((*_130).0: isize) = const 3_isize;
        drop(_132) -> [return: bb62, unwind: bb120];
    }

    bb62: {
        _141 = &_127;
        _140 = <Rc<RefCell<Point>> as Deref>::deref(move _141) -> [return: bb63, unwind: bb120];
    }

    bb63: {
        _139 = _140;
        _138 = RefCell::<Point>::borrow_mut(move _139) -> [return: bb64, unwind: bb120];
    }

    bb64: {
        _137 = &mut _138;
        _136 = <RefMut<'_, Point> as DerefMut>::deref_mut(move _137) -> [return: bb65, unwind: bb118];
    }

    bb65: {
        ((*_136).1: isize) = Add(((*_136).1: isize), const 3_isize);
        drop(_138) -> [return: bb66, unwind: bb120];
    }

    bb66: {
        _149 = &_127;
        _148 = <Rc<RefCell<Point>> as Deref>::deref(move _149) -> [return: bb67, unwind: bb120];
    }

    bb67: {
        _147 = _148;
        _146 = RefCell::<Point>::borrow(move _147) -> [return: bb68, unwind: bb120];
    }

    bb68: {
        _145 = &_146;
        _144 = <Ref<'_, Point> as Deref>::deref(move _145) -> [return: bb69, unwind: bb117];
    }

    bb69: {
        _143 = _144;
        _219 = const _;
        _142 = (move _143, _219);
        _150 = (_142.0: &Point);
        _151 = (_142.1: &Point);
        _153 = <Point as PartialEq>::eq(_150, _151) -> [return: bb70, unwind: bb117];
    }

    bb70: {
        _152 = Not(move _153);
        switchInt(move _152) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _154 = core::panicking::AssertKind::Eq;
        _156 = Option::<Arguments<'_>>::None;
        _155 = core::panicking::assert_failed::<Point, Point>(move _154, _150, _151, move _156) -> bb117;
    }

    bb72: {
        drop(_146) -> [return: bb73, unwind: bb120];
    }

    bb73: {
        _159 = [const 1_i32, const 2_i32, const 3_i32];
        _158 = RefCell::<[i32; 3]>::new(move _159) -> [return: bb74, unwind: bb120];
    }

    bb74: {
        _157 = Rc::<RefCell<[i32; 3]>>::new(move _158) -> [return: bb75, unwind: bb120];
    }

    bb75: {
        _165 = &_157;
        _164 = <Rc<RefCell<[i32; 3]>> as Deref>::deref(move _165) -> [return: bb76, unwind: bb116];
    }

    bb76: {
        _163 = _164;
        _162 = RefCell::<[i32; 3]>::borrow_mut(move _163) -> [return: bb77, unwind: bb116];
    }

    bb77: {
        _161 = &mut _162;
        _160 = <RefMut<'_, [i32; 3]> as DerefMut>::deref_mut(move _161) -> [return: bb78, unwind: bb115];
    }

    bb78: {
        _166 = const 0_usize;
        _167 = const 3_usize;
        _168 = Lt(_166, _167);
        assert(move _168, "index out of bounds: the length is {} but the index is {}", move _167, _166) -> [success: bb79, unwind: bb115];
    }

    bb79: {
        (*_160)[_166] = const 3_i32;
        drop(_162) -> [return: bb80, unwind: bb116];
    }

    bb80: {
        _174 = &_157;
        _173 = <Rc<RefCell<[i32; 3]>> as Deref>::deref(move _174) -> [return: bb81, unwind: bb116];
    }

    bb81: {
        _172 = _173;
        _171 = RefCell::<[i32; 3]>::borrow_mut(move _172) -> [return: bb82, unwind: bb116];
    }

    bb82: {
        _170 = &mut _171;
        _169 = <RefMut<'_, [i32; 3]> as DerefMut>::deref_mut(move _170) -> [return: bb83, unwind: bb114];
    }

    bb83: {
        _175 = const 1_usize;
        _176 = const 3_usize;
        _177 = Lt(_175, _176);
        assert(move _177, "index out of bounds: the length is {} but the index is {}", move _176, _175) -> [success: bb84, unwind: bb114];
    }

    bb84: {
        (*_169)[_175] = Add((*_169)[_175], const 3_i32);
        drop(_171) -> [return: bb85, unwind: bb116];
    }

    bb85: {
        _187 = &_157;
        _186 = <Rc<RefCell<[i32; 3]>> as Deref>::deref(move _187) -> [return: bb86, unwind: bb116];
    }

    bb86: {
        _185 = _186;
        _184 = RefCell::<[i32; 3]>::borrow(move _185) -> [return: bb87, unwind: bb116];
    }

    bb87: {
        _183 = &_184;
        _182 = <Ref<'_, [i32; 3]> as Deref>::deref(move _183) -> [return: bb88, unwind: bb113];
    }

    bb88: {
        _188 = const 0_usize;
        _189 = const 3_usize;
        _190 = Lt(_188, _189);
        assert(move _190, "index out of bounds: the length is {} but the index is {}", move _189, _188) -> [success: bb89, unwind: bb113];
    }

    bb89: {
        _181 = (*_182)[_188];
        _197 = &_157;
        _196 = <Rc<RefCell<[i32; 3]>> as Deref>::deref(move _197) -> [return: bb90, unwind: bb113];
    }

    bb90: {
        _195 = _196;
        _194 = RefCell::<[i32; 3]>::borrow(move _195) -> [return: bb91, unwind: bb113];
    }

    bb91: {
        _193 = &_194;
        _192 = <Ref<'_, [i32; 3]> as Deref>::deref(move _193) -> [return: bb92, unwind: bb112];
    }

    bb92: {
        _198 = const 1_usize;
        _199 = const 3_usize;
        _200 = Lt(_198, _199);
        assert(move _200, "index out of bounds: the length is {} but the index is {}", move _199, _198) -> [success: bb93, unwind: bb112];
    }

    bb93: {
        _191 = (*_192)[_198];
        _207 = &_157;
        _206 = <Rc<RefCell<[i32; 3]>> as Deref>::deref(move _207) -> [return: bb94, unwind: bb112];
    }

    bb94: {
        _205 = _206;
        _204 = RefCell::<[i32; 3]>::borrow(move _205) -> [return: bb95, unwind: bb112];
    }

    bb95: {
        _203 = &_204;
        _202 = <Ref<'_, [i32; 3]> as Deref>::deref(move _203) -> [return: bb96, unwind: bb111];
    }

    bb96: {
        _208 = const 2_usize;
        _209 = const 3_usize;
        _210 = Lt(_208, _209);
        assert(move _210, "index out of bounds: the length is {} but the index is {}", move _209, _208) -> [success: bb97, unwind: bb111];
    }

    bb97: {
        _201 = (*_202)[_208];
        _180 = (move _181, move _191, move _201);
        _179 = &_180;
        _218 = const _;
        _178 = (move _179, _218);
        _211 = (_178.0: &(i32, i32, i32));
        _212 = (_178.1: &(i32, i32, i32));
        _214 = <(i32, i32, i32) as PartialEq>::eq(_211, _212) -> [return: bb98, unwind: bb111];
    }

    bb98: {
        _213 = Not(move _214);
        switchInt(move _213) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        _215 = core::panicking::AssertKind::Eq;
        _217 = Option::<Arguments<'_>>::None;
        _216 = core::panicking::assert_failed::<(i32, i32, i32), (i32, i32, i32)>(move _215, _211, _212, move _217) -> bb111;
    }

    bb100: {
        drop(_204) -> [return: bb101, unwind: bb112];
    }

    bb101: {
        drop(_194) -> [return: bb102, unwind: bb113];
    }

    bb102: {
        drop(_184) -> [return: bb103, unwind: bb116];
    }

    bb103: {
        drop(_157) -> [return: bb104, unwind: bb120];
    }

    bb104: {
        drop(_127) -> [return: bb105, unwind: bb124];
    }

    bb105: {
        drop(_79) -> [return: bb106, unwind: bb125];
    }

    bb106: {
        drop(_62) -> [return: bb107, unwind: bb129];
    }

    bb107: {
        drop(_30) -> [return: bb108, unwind: bb130];
    }

    bb108: {
        drop(_2) -> [return: bb109, unwind: bb131];
    }

    bb109: {
        drop(_1) -> [return: bb110, unwind continue];
    }

    bb110: {
        return;
    }

    bb111 (cleanup): {
        drop(_204) -> [return: bb112, unwind terminate];
    }

    bb112 (cleanup): {
        drop(_194) -> [return: bb113, unwind terminate];
    }

    bb113 (cleanup): {
        drop(_184) -> [return: bb116, unwind terminate];
    }

    bb114 (cleanup): {
        drop(_171) -> [return: bb116, unwind terminate];
    }

    bb115 (cleanup): {
        drop(_162) -> [return: bb116, unwind terminate];
    }

    bb116 (cleanup): {
        drop(_157) -> [return: bb120, unwind terminate];
    }

    bb117 (cleanup): {
        drop(_146) -> [return: bb120, unwind terminate];
    }

    bb118 (cleanup): {
        drop(_138) -> [return: bb120, unwind terminate];
    }

    bb119 (cleanup): {
        drop(_132) -> [return: bb120, unwind terminate];
    }

    bb120 (cleanup): {
        drop(_127) -> [return: bb124, unwind terminate];
    }

    bb121 (cleanup): {
        drop(_116) -> [return: bb124, unwind terminate];
    }

    bb122 (cleanup): {
        drop(_98) -> [return: bb124, unwind terminate];
    }

    bb123 (cleanup): {
        drop(_86) -> [return: bb124, unwind terminate];
    }

    bb124 (cleanup): {
        drop(_79) -> [return: bb125, unwind terminate];
    }

    bb125 (cleanup): {
        drop(_62) -> [return: bb129, unwind terminate];
    }

    bb126 (cleanup): {
        drop(_51) -> [return: bb129, unwind terminate];
    }

    bb127 (cleanup): {
        drop(_41) -> [return: bb129, unwind terminate];
    }

    bb128 (cleanup): {
        drop(_35) -> [return: bb129, unwind terminate];
    }

    bb129 (cleanup): {
        drop(_30) -> [return: bb130, unwind terminate];
    }

    bb130 (cleanup): {
        drop(_2) -> [return: bb131, unwind terminate];
    }

    bb131 (cleanup): {
        drop(_1) -> [return: bb132, unwind terminate];
    }

    bb132 (cleanup): {
        resume;
    }
}

promoted[0] in main: &(i32, i32, i32) = {
    let mut _0: &(i32, i32, i32);
    let mut _1: (i32, i32, i32);

    bb0: {
        _1 = (const 3_i32, const 5_i32, const 3_i32);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Point = {
    let mut _0: &Point;
    let mut _1: Point;

    bb0: {
        _1 = Point { x: const 3_isize, y: const 5_isize };
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "foobar";
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "foobar";
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "foo";
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 2_i32, const 5_i32);
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 4_isize;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}
