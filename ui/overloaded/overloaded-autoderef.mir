// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-autoderef.rs:8:10: 8:19>::eq(_1: &Point, _2: &Point) -> bool {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-autoderef.rs:8:10: 8:19
    debug other => _2;                   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:8:10: 8:19
    let mut _0: bool;                    // return place in scope 0 at ui/overloaded/overloaded-autoderef.rs:8:10: 8:19
    let mut _3: bool;                    // in scope 0 at ui/overloaded/overloaded-autoderef.rs:10:5: 10:13
    let mut _4: isize;                   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:10:5: 10:13
    let mut _5: isize;                   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:10:5: 10:13
    let mut _6: bool;                    // in scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
    let mut _7: isize;                   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
    let mut _8: isize;                   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13

    bb0: {
        _4 = ((*_1).0: isize);           // scope 0 at ui/overloaded/overloaded-autoderef.rs:10:5: 10:13
        _5 = ((*_2).0: isize);           // scope 0 at ui/overloaded/overloaded-autoderef.rs:10:5: 10:13
        _3 = Eq(move _4, move _5);       // scope 0 at ui/overloaded/overloaded-autoderef.rs:10:5: 10:13
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
        goto -> bb3;                     // scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
    }

    bb2: {
        _7 = ((*_1).1: isize);           // scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
        _8 = ((*_2).1: isize);           // scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
        _6 = Eq(move _7, move _8);       // scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
        _0 = move _6;                    // scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
        goto -> bb3;                     // scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
    }

    bb3: {
        return;                          // scope 0 at ui/overloaded/overloaded-autoderef.rs:8:19: 8:19
    }
}

fn <impl at ui/overloaded/overloaded-autoderef.rs:8:21: 8:26>::fmt(_1: &Point, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-autoderef.rs:8:21: 8:26
    debug f => _2;                       // in scope 0 at ui/overloaded/overloaded-autoderef.rs:8:21: 8:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/overloaded/overloaded-autoderef.rs:8:21: 8:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:8:21: 8:26
    let mut _4: &str;                    // in scope 0 at ui/overloaded/overloaded-autoderef.rs:8:21: 8:26
    let _5: &str;                        // in scope 0 at ui/overloaded/overloaded-autoderef.rs:8:21: 8:26
    let mut _6: &str;                    // in scope 0 at ui/overloaded/overloaded-autoderef.rs:10:5: 10:13
    let _7: &str;                        // in scope 0 at ui/overloaded/overloaded-autoderef.rs:10:5: 10:13
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/overloaded/overloaded-autoderef.rs:10:5: 10:13
    let mut _9: &isize;                  // in scope 0 at ui/overloaded/overloaded-autoderef.rs:10:5: 10:13
    let _10: &isize;                     // in scope 0 at ui/overloaded/overloaded-autoderef.rs:10:5: 10:13
    let mut _11: &str;                   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
    let _12: &str;                       // in scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
    let mut _14: &&isize;                // in scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
    let _15: &&isize;                    // in scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
    let _16: &isize;                     // in scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/overloaded/overloaded-autoderef.rs:8:21: 8:26
        _5 = const "Point";              // scope 0 at ui/overloaded/overloaded-autoderef.rs:8:21: 8:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:8:21: 8:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/overloaded/overloaded-autoderef.rs:8:21: 8:26
        _7 = const "x";                  // scope 0 at ui/overloaded/overloaded-autoderef.rs:10:5: 10:13
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:10:5: 10:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/overloaded/overloaded-autoderef.rs:10:5: 10:13
        _10 = &((*_1).0: isize);         // scope 0 at ui/overloaded/overloaded-autoderef.rs:10:5: 10:13
        _9 = _10;                        // scope 0 at ui/overloaded/overloaded-autoderef.rs:10:5: 10:13
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/overloaded/overloaded-autoderef.rs:10:5: 10:13
        _12 = const "y";                 // scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
        _16 = &((*_1).1: isize);         // scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
        _15 = &_16;                      // scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
        _14 = _15;                       // scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/overloaded/overloaded-autoderef.rs:11:5: 11:13
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _3, move _4, move _6, move _8, move _11, move _13) -> bb1; // scope 0 at ui/overloaded/overloaded-autoderef.rs:8:21: 8:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:8:21: 8:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/overloaded/overloaded-autoderef.rs:8:26: 8:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/overloaded/overloaded-autoderef.rs:14:15: 14:15
    let _1: std::boxed::Box<usize>;      // in scope 0 at ui/overloaded/overloaded-autoderef.rs:15:9: 15:14
    let mut _3: Point;                   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:16:25: 16:43
    let mut _4: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _6: &Point;                      // in scope 0 at ui/overloaded/overloaded-autoderef.rs:17:16: 17:23
    let mut _7: &std::rc::Rc<Point>;     // in scope 0 at ui/overloaded/overloaded-autoderef.rs:17:16: 17:21
    let mut _8: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _23: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _24: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _25: &Point;                     // in scope 0 at ui/overloaded/overloaded-autoderef.rs:18:16: 18:23
    let mut _26: &std::rc::Rc<Point>;    // in scope 0 at ui/overloaded/overloaded-autoderef.rs:18:16: 18:21
    let mut _27: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _32: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _33: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _35: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _36: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _37: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _38: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _39: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _40: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _43: std::cell::RefCell<i32>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:20:21: 20:36
    let mut _45: &i32;                   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:21:19: 21:30
    let mut _46: &std::cell::Ref<'_, i32>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:21:20: 21:30
    let _47: std::cell::Ref<'_, i32>;    // in scope 0 at ui/overloaded/overloaded-autoderef.rs:21:20: 21:30
    let mut _48: &std::cell::RefCell<i32>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:21:20: 21:30
    let _49: &std::cell::RefCell<i32>;   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:21:20: 21:30
    let mut _50: &std::rc::Rc<std::cell::RefCell<i32>>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:21:20: 21:30
    let mut _51: &mut i32;               // in scope 0 at ui/overloaded/overloaded-autoderef.rs:22:5: 22:20
    let mut _52: &mut std::cell::RefMut<'_, i32>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:22:6: 22:20
    let mut _53: std::cell::RefMut<'_, i32>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:22:6: 22:20
    let mut _54: &std::cell::RefCell<i32>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:22:6: 22:20
    let _55: &std::cell::RefCell<i32>;   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:22:6: 22:20
    let mut _56: &std::rc::Rc<std::cell::RefCell<i32>>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:22:6: 22:20
    let mut _57: (&(i32, i32), &(i32, i32)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _58: &(i32, i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _59: (i32, i32);                 // in scope 0 at ui/overloaded/overloaded-autoderef.rs:23:16: 23:38
    let mut _60: i32;                    // in scope 0 at ui/overloaded/overloaded-autoderef.rs:23:17: 23:24
    let mut _61: i32;                    // in scope 0 at ui/overloaded/overloaded-autoderef.rs:23:26: 23:37
    let mut _62: &i32;                   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:23:26: 23:37
    let mut _63: &std::cell::Ref<'_, i32>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:23:27: 23:37
    let _64: std::cell::Ref<'_, i32>;    // in scope 0 at ui/overloaded/overloaded-autoderef.rs:23:27: 23:37
    let mut _65: &std::cell::RefCell<i32>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:23:27: 23:37
    let _66: &std::cell::RefCell<i32>;   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:23:27: 23:37
    let mut _67: &std::rc::Rc<std::cell::RefCell<i32>>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:23:27: 23:37
    let mut _68: &(i32, i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _71: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _72: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _73: &(i32, i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _74: &(i32, i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _76: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _77: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _78: &(i32, i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _79: &(i32, i32);                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _80: &(i32, i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _81: &(i32, i32);                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _84: std::string::String;    // in scope 0 at ui/overloaded/overloaded-autoderef.rs:25:21: 25:38
    let mut _85: &str;                   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:25:21: 25:38
    let _86: &str;                       // in scope 0 at ui/overloaded/overloaded-autoderef.rs:25:21: 25:26
    let mut _87: (&&str, &&str);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _88: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _89: &str;                       // in scope 0 at ui/overloaded/overloaded-autoderef.rs:26:16: 26:20
    let _90: &str;                       // in scope 0 at ui/overloaded/overloaded-autoderef.rs:26:17: 26:20
    let mut _91: &std::string::String;   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:26:18: 26:20
    let _92: &std::string::String;       // in scope 0 at ui/overloaded/overloaded-autoderef.rs:26:18: 26:20
    let mut _93: &std::rc::Rc<std::string::String>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:26:19: 26:20
    let mut _94: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _97: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _98: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _99: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _100: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _102: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _103: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _104: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _105: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _106: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _107: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _108: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _110: std::cell::RefCell<std::string::String>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:28:25: 28:58
    let mut _111: std::string::String;   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:28:38: 28:57
    let _112: ();                        // in scope 0 at ui/overloaded/overloaded-autoderef.rs:29:5: 29:39
    let mut _113: &mut std::string::String; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:29:5: 29:39
    let mut _114: &mut std::string::String; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:29:5: 29:39
    let mut _115: &mut std::cell::RefMut<'_, std::string::String>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:29:5: 29:39
    let mut _116: std::cell::RefMut<'_, std::string::String>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:29:5: 29:23
    let mut _117: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:29:5: 29:23
    let _118: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:29:5: 29:23
    let mut _119: &std::rc::Rc<std::cell::RefCell<std::string::String>>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:29:5: 29:23
    let mut _120: &str;                  // in scope 0 at ui/overloaded/overloaded-autoderef.rs:29:33: 29:38
    let _121: &str;                      // in scope 0 at ui/overloaded/overloaded-autoderef.rs:29:33: 29:38
    let mut _122: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _123: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _124: &str;                      // in scope 0 at ui/overloaded/overloaded-autoderef.rs:31:16: 31:33
    let _125: &str;                      // in scope 0 at ui/overloaded/overloaded-autoderef.rs:31:17: 31:33
    let mut _126: &std::string::String;  // in scope 0 at ui/overloaded/overloaded-autoderef.rs:31:18: 31:33
    let _127: &std::string::String;      // in scope 0 at ui/overloaded/overloaded-autoderef.rs:31:18: 31:33
    let mut _128: &std::cell::Ref<'_, std::string::String>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:31:19: 31:33
    let _129: std::cell::Ref<'_, std::string::String>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:31:19: 31:33
    let mut _130: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:31:19: 31:33
    let _131: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:31:19: 31:33
    let mut _132: &std::rc::Rc<std::cell::RefCell<std::string::String>>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:31:19: 31:33
    let mut _133: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _136: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _137: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _138: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _139: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _141: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _142: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _143: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _144: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _145: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _146: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _147: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _148: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _149: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _150: &str;                      // in scope 0 at ui/overloaded/overloaded-autoderef.rs:32:16: 32:37
    let _151: &str;                      // in scope 0 at ui/overloaded/overloaded-autoderef.rs:32:17: 32:37
    let mut _152: &std::string::String;  // in scope 0 at ui/overloaded/overloaded-autoderef.rs:32:18: 32:37
    let _153: &std::string::String;      // in scope 0 at ui/overloaded/overloaded-autoderef.rs:32:18: 32:37
    let mut _154: &std::cell::RefMut<'_, std::string::String>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:32:19: 32:37
    let _155: std::cell::RefMut<'_, std::string::String>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:32:19: 32:37
    let mut _156: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:32:19: 32:37
    let _157: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:32:19: 32:37
    let mut _158: &std::rc::Rc<std::cell::RefCell<std::string::String>>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:32:19: 32:37
    let mut _159: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _162: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _163: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _164: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _165: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _167: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _168: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _169: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _170: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _171: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _172: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _173: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _175: std::cell::RefCell<Point>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:34:21: 34:53
    let mut _176: Point;                 // in scope 0 at ui/overloaded/overloaded-autoderef.rs:34:34: 34:52
    let mut _177: &mut Point;            // in scope 0 at ui/overloaded/overloaded-autoderef.rs:35:5: 35:21
    let mut _178: &mut std::cell::RefMut<'_, Point>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:35:5: 35:19
    let mut _179: std::cell::RefMut<'_, Point>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:35:5: 35:19
    let mut _180: &std::cell::RefCell<Point>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:35:5: 35:19
    let _181: &std::cell::RefCell<Point>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:35:5: 35:19
    let mut _182: &std::rc::Rc<std::cell::RefCell<Point>>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:35:5: 35:19
    let mut _183: &mut Point;            // in scope 0 at ui/overloaded/overloaded-autoderef.rs:36:5: 36:21
    let mut _184: &mut std::cell::RefMut<'_, Point>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:36:5: 36:19
    let mut _185: std::cell::RefMut<'_, Point>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:36:5: 36:19
    let mut _186: &std::cell::RefCell<Point>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:36:5: 36:19
    let _187: &std::cell::RefCell<Point>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:36:5: 36:19
    let mut _188: &std::rc::Rc<std::cell::RefCell<Point>>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:36:5: 36:19
    let mut _189: (isize, bool);         // in scope 0 at ui/overloaded/overloaded-autoderef.rs:36:5: 36:26
    let mut _190: (&Point, &Point);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _191: &Point;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _192: &Point;                    // in scope 0 at ui/overloaded/overloaded-autoderef.rs:37:16: 37:27
    let mut _193: &std::cell::Ref<'_, Point>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:37:17: 37:27
    let _194: std::cell::Ref<'_, Point>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:37:17: 37:27
    let mut _195: &std::cell::RefCell<Point>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:37:17: 37:27
    let _196: &std::cell::RefCell<Point>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:37:17: 37:27
    let mut _197: &std::rc::Rc<std::cell::RefCell<Point>>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:37:17: 37:27
    let mut _198: &Point;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _201: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _202: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _203: &Point;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _204: &Point;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _206: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _207: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _208: &Point;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _209: &Point;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _210: &Point;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _211: &Point;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _212: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _214: std::cell::RefCell<[i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:39:21: 39:44
    let mut _215: [i32; 3];              // in scope 0 at ui/overloaded/overloaded-autoderef.rs:39:34: 39:43
    let mut _216: &mut [i32; 3];         // in scope 0 at ui/overloaded/overloaded-autoderef.rs:40:5: 40:19
    let mut _217: &mut std::cell::RefMut<'_, [i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:40:5: 40:19
    let mut _218: std::cell::RefMut<'_, [i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:40:5: 40:19
    let mut _219: &std::cell::RefCell<[i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:40:5: 40:19
    let _220: &std::cell::RefCell<[i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:40:5: 40:19
    let mut _221: &std::rc::Rc<std::cell::RefCell<[i32; 3]>>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:40:5: 40:19
    let _222: usize;                     // in scope 0 at ui/overloaded/overloaded-autoderef.rs:40:20: 40:21
    let mut _223: &mut [i32; 3];         // in scope 0 at ui/overloaded/overloaded-autoderef.rs:41:5: 41:19
    let mut _224: &mut std::cell::RefMut<'_, [i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:41:5: 41:19
    let mut _225: std::cell::RefMut<'_, [i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:41:5: 41:19
    let mut _226: &std::cell::RefCell<[i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:41:5: 41:19
    let _227: &std::cell::RefCell<[i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:41:5: 41:19
    let mut _228: &std::rc::Rc<std::cell::RefCell<[i32; 3]>>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:41:5: 41:19
    let _229: usize;                     // in scope 0 at ui/overloaded/overloaded-autoderef.rs:41:20: 41:21
    let mut _230: (i32, bool);           // in scope 0 at ui/overloaded/overloaded-autoderef.rs:41:5: 41:27
    let mut _231: (&(i32, i32, i32), &(i32, i32, i32)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _232: &(i32, i32, i32);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _233: (i32, i32, i32);           // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:16: 42:61
    let mut _234: i32;                   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:17: 42:30
    let mut _235: &[i32; 3];             // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:17: 42:27
    let mut _236: &std::cell::Ref<'_, [i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:17: 42:27
    let _237: std::cell::Ref<'_, [i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:17: 42:27
    let mut _238: &std::cell::RefCell<[i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:17: 42:27
    let _239: &std::cell::RefCell<[i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:17: 42:27
    let mut _240: &std::rc::Rc<std::cell::RefCell<[i32; 3]>>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:17: 42:27
    let _241: usize;                     // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:28: 42:29
    let mut _242: i32;                   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:32: 42:45
    let mut _243: &[i32; 3];             // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:32: 42:42
    let mut _244: &std::cell::Ref<'_, [i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:32: 42:42
    let _245: std::cell::Ref<'_, [i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:32: 42:42
    let mut _246: &std::cell::RefCell<[i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:32: 42:42
    let _247: &std::cell::RefCell<[i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:32: 42:42
    let mut _248: &std::rc::Rc<std::cell::RefCell<[i32; 3]>>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:32: 42:42
    let _249: usize;                     // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:43: 42:44
    let mut _250: i32;                   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:47: 42:60
    let mut _251: &[i32; 3];             // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:47: 42:57
    let mut _252: &std::cell::Ref<'_, [i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:47: 42:57
    let _253: std::cell::Ref<'_, [i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:47: 42:57
    let mut _254: &std::cell::RefCell<[i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:47: 42:57
    let _255: &std::cell::RefCell<[i32; 3]>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:47: 42:57
    let mut _256: &std::rc::Rc<std::cell::RefCell<[i32; 3]>>; // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:47: 42:57
    let _257: usize;                     // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:58: 42:59
    let mut _258: &(i32, i32, i32);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _261: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _262: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _263: &(i32, i32, i32);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _264: &(i32, i32, i32);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _266: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _267: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _268: &(i32, i32, i32);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _269: &(i32, i32, i32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _270: &(i32, i32, i32);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _271: &(i32, i32, i32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _272: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug box_5 => _1;               // in scope 1 at ui/overloaded/overloaded-autoderef.rs:15:9: 15:14
        let _2: std::rc::Rc<Point>;      // in scope 1 at ui/overloaded/overloaded-autoderef.rs:16:9: 16:14
        scope 2 {
            debug point => _2;           // in scope 2 at ui/overloaded/overloaded-autoderef.rs:16:9: 16:14
            let _9: &isize;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _10: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _28: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _29: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _42: std::rc::Rc<std::cell::RefCell<i32>>; // in scope 2 at ui/overloaded/overloaded-autoderef.rs:20:9: 20:10
            let mut _279: &isize;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _280: &isize;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _9;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _10;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _15: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _15;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug left_val => _28;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _29;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _34: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 6 {
                    debug kind => _34;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 7 {
                debug i => _42;          // in scope 7 at ui/overloaded/overloaded-autoderef.rs:20:9: 20:10
                let _44: i32;            // in scope 7 at ui/overloaded/overloaded-autoderef.rs:21:9: 21:16
                scope 8 {
                    debug i_value => _44; // in scope 8 at ui/overloaded/overloaded-autoderef.rs:21:9: 21:16
                    let _69: &(i32, i32); // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _70: &(i32, i32); // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _83: std::rc::Rc<std::string::String>; // in scope 8 at ui/overloaded/overloaded-autoderef.rs:25:9: 25:10
                    let mut _278: &(i32, i32); // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 9 {
                        debug left_val => _69; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _70; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _75: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 10 {
                            debug kind => _75; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 11 {
                        debug s => _83;  // in scope 11 at ui/overloaded/overloaded-autoderef.rs:25:9: 25:10
                        let _95: &&str;  // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _96: &&str;  // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _109: std::rc::Rc<std::cell::RefCell<std::string::String>>; // in scope 11 at ui/overloaded/overloaded-autoderef.rs:28:9: 28:14
                        let mut _277: &&str; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        scope 12 {
                            debug left_val => _95; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _96; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _101: core::panicking::AssertKind; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 13 {
                                debug kind => _101; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                        scope 14 {
                            debug mut_s => _109; // in scope 14 at ui/overloaded/overloaded-autoderef.rs:28:9: 28:14
                            let _134: &&str; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            let _135: &&str; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _160: &&str; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            let _161: &&str; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _174: std::rc::Rc<std::cell::RefCell<Point>>; // in scope 14 at ui/overloaded/overloaded-autoderef.rs:34:9: 34:10
                            let mut _275: &&str; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                            let mut _276: &&str; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                            scope 15 {
                                debug left_val => _134; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                debug right_val => _135; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _140: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                scope 16 {
                                    debug kind => _140; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                }
                            }
                            scope 17 {
                                debug left_val => _160; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                debug right_val => _161; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _166: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                scope 18 {
                                    debug kind => _166; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                }
                            }
                            scope 19 {
                                debug p => _174; // in scope 19 at ui/overloaded/overloaded-autoderef.rs:34:9: 34:10
                                let _199: &Point; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                let _200: &Point; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _213: std::rc::Rc<std::cell::RefCell<[i32; 3]>>; // in scope 19 at ui/overloaded/overloaded-autoderef.rs:39:9: 39:10
                                let mut _274: &Point; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                scope 20 {
                                    debug left_val => _199; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    debug right_val => _200; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let _205: core::panicking::AssertKind; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    scope 21 {
                                        debug kind => _205; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    }
                                }
                                scope 22 {
                                    debug v => _213; // in scope 22 at ui/overloaded/overloaded-autoderef.rs:39:9: 39:10
                                    let _259: &(i32, i32, i32); // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    let _260: &(i32, i32, i32); // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let mut _273: &(i32, i32, i32); // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                    scope 23 {
                                        debug left_val => _259; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                        debug right_val => _260; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                        let _265: core::panicking::AssertKind; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                        scope 24 {
                                            debug kind => _265; // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Box::<usize>::new(const 5_usize) -> bb1; // scope 0 at ui/overloaded/overloaded-autoderef.rs:15:25: 15:42
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:15:25: 15:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(usize) -> Box<usize> {Box::<usize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Point { x: const 2_isize, y: const 4_isize }; // scope 1 at ui/overloaded/overloaded-autoderef.rs:16:25: 16:43
        _2 = Rc::<Point>::new(move _3) -> [return: bb2, unwind: bb128]; // scope 1 at ui/overloaded/overloaded-autoderef.rs:16:17: 16:44
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:16:17: 16:24
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(Point) -> Rc<Point> {Rc::<Point>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &_2;                        // scope 2 at ui/overloaded/overloaded-autoderef.rs:17:16: 17:21
        _6 = <Rc<Point> as Deref>::deref(move _7) -> [return: bb3, unwind: bb127]; // scope 2 at ui/overloaded/overloaded-autoderef.rs:17:16: 17:23
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:17:16: 17:23
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<Point>) -> &'a <Rc<Point> as Deref>::Target {<Rc<Point> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = &((*_6).0: isize);          // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _280 = const _;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[7])) }
        _8 = _280;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _8);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_4.0: &isize);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_4.1: &isize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = (*_9);                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = const 2_isize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = Eq(move _13, move _14);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _11 = Not(move _12);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb5, otherwise: bb4]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _15 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<isize, isize>(move _17, move _18, move _20, move _22) -> bb127; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb5: {
        _26 = &_2;                       // scope 2 at ui/overloaded/overloaded-autoderef.rs:18:16: 18:21
        _25 = <Rc<Point> as Deref>::deref(move _26) -> [return: bb6, unwind: bb127]; // scope 2 at ui/overloaded/overloaded-autoderef.rs:18:16: 18:23
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:18:16: 18:23
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<Point>) -> &'a <Rc<Point> as Deref>::Target {<Rc<Point> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _24 = &((*_25).1: isize);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _279 = const _;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[6])) }
        _27 = _279;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _23 = (move _24, move _27);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _28 = (_23.0: &isize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _29 = (_23.1: &isize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _32 = (*_28);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _33 = const 4_isize;             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _31 = Eq(move _32, move _33);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _30 = Not(move _31);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _30) -> [0: bb8, otherwise: bb7]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _34 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = _28;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _38;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _29;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = _40;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _35 = core::panicking::assert_failed::<isize, isize>(move _36, move _37, move _39, move _41) -> bb127; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb8: {
        _43 = RefCell::<i32>::new(const 2_i32) -> [return: bb9, unwind: bb127]; // scope 2 at ui/overloaded/overloaded-autoderef.rs:20:21: 20:36
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:20:21: 20:33
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(i32) -> RefCell<i32> {RefCell::<i32>::new}, val: Value(<ZST>) }
    }

    bb9: {
        _42 = Rc::<RefCell<i32>>::new(move _43) -> [return: bb10, unwind: bb127]; // scope 2 at ui/overloaded/overloaded-autoderef.rs:20:13: 20:37
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:20:13: 20:20
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(RefCell<i32>) -> Rc<RefCell<i32>> {Rc::<RefCell<i32>>::new}, val: Value(<ZST>) }
    }

    bb10: {
        _50 = &_42;                      // scope 7 at ui/overloaded/overloaded-autoderef.rs:21:20: 21:30
        _49 = <Rc<RefCell<i32>> as Deref>::deref(move _50) -> [return: bb11, unwind: bb126]; // scope 7 at ui/overloaded/overloaded-autoderef.rs:21:20: 21:30
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:21:20: 21:30
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<i32>>) -> &'a <Rc<RefCell<i32>> as Deref>::Target {<Rc<RefCell<i32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb11: {
        _48 = _49;                       // scope 7 at ui/overloaded/overloaded-autoderef.rs:21:20: 21:30
        _47 = RefCell::<i32>::borrow(move _48) -> [return: bb12, unwind: bb126]; // scope 7 at ui/overloaded/overloaded-autoderef.rs:21:20: 21:30
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:21:22: 21:28
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<i32>) -> Ref<'a, i32> {RefCell::<i32>::borrow}, val: Value(<ZST>) }
    }

    bb12: {
        _46 = &_47;                      // scope 7 at ui/overloaded/overloaded-autoderef.rs:21:20: 21:30
        _45 = <Ref<'_, i32> as Deref>::deref(move _46) -> [return: bb13, unwind: bb125]; // scope 7 at ui/overloaded/overloaded-autoderef.rs:21:19: 21:30
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:21:19: 21:30
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, i32>) -> &'a <Ref<'_, i32> as Deref>::Target {<Ref<'_, i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb13: {
        _44 = (*_45);                    // scope 7 at ui/overloaded/overloaded-autoderef.rs:21:19: 21:30
        drop(_47) -> [return: bb14, unwind: bb126]; // scope 7 at ui/overloaded/overloaded-autoderef.rs:21:30: 21:31
    }

    bb14: {
        _56 = &_42;                      // scope 8 at ui/overloaded/overloaded-autoderef.rs:22:6: 22:20
        _55 = <Rc<RefCell<i32>> as Deref>::deref(move _56) -> [return: bb15, unwind: bb126]; // scope 8 at ui/overloaded/overloaded-autoderef.rs:22:6: 22:20
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:22:6: 22:20
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<i32>>) -> &'a <Rc<RefCell<i32>> as Deref>::Target {<Rc<RefCell<i32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb15: {
        _54 = _55;                       // scope 8 at ui/overloaded/overloaded-autoderef.rs:22:6: 22:20
        _53 = RefCell::<i32>::borrow_mut(move _54) -> [return: bb16, unwind: bb126]; // scope 8 at ui/overloaded/overloaded-autoderef.rs:22:6: 22:20
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:22:8: 22:18
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<i32>) -> RefMut<'a, i32> {RefCell::<i32>::borrow_mut}, val: Value(<ZST>) }
    }

    bb16: {
        _52 = &mut _53;                  // scope 8 at ui/overloaded/overloaded-autoderef.rs:22:6: 22:20
        _51 = <RefMut<'_, i32> as DerefMut>::deref_mut(move _52) -> [return: bb17, unwind: bb124]; // scope 8 at ui/overloaded/overloaded-autoderef.rs:22:5: 22:20
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:22:5: 22:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, i32>) -> &'a mut <RefMut<'_, i32> as Deref>::Target {<RefMut<'_, i32> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb17: {
        (*_51) = const 5_i32;            // scope 8 at ui/overloaded/overloaded-autoderef.rs:22:5: 22:24
        drop(_53) -> [return: bb18, unwind: bb126]; // scope 8 at ui/overloaded/overloaded-autoderef.rs:22:24: 22:25
    }

    bb18: {
        _60 = _44;                       // scope 8 at ui/overloaded/overloaded-autoderef.rs:23:17: 23:24
        _67 = &_42;                      // scope 8 at ui/overloaded/overloaded-autoderef.rs:23:27: 23:37
        _66 = <Rc<RefCell<i32>> as Deref>::deref(move _67) -> [return: bb19, unwind: bb126]; // scope 8 at ui/overloaded/overloaded-autoderef.rs:23:27: 23:37
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:23:27: 23:37
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<i32>>) -> &'a <Rc<RefCell<i32>> as Deref>::Target {<Rc<RefCell<i32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb19: {
        _65 = _66;                       // scope 8 at ui/overloaded/overloaded-autoderef.rs:23:27: 23:37
        _64 = RefCell::<i32>::borrow(move _65) -> [return: bb20, unwind: bb126]; // scope 8 at ui/overloaded/overloaded-autoderef.rs:23:27: 23:37
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:23:29: 23:35
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<i32>) -> Ref<'a, i32> {RefCell::<i32>::borrow}, val: Value(<ZST>) }
    }

    bb20: {
        _63 = &_64;                      // scope 8 at ui/overloaded/overloaded-autoderef.rs:23:27: 23:37
        _62 = <Ref<'_, i32> as Deref>::deref(move _63) -> [return: bb21, unwind: bb123]; // scope 8 at ui/overloaded/overloaded-autoderef.rs:23:26: 23:37
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:23:26: 23:37
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, i32>) -> &'a <Ref<'_, i32> as Deref>::Target {<Ref<'_, i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb21: {
        _61 = (*_62);                    // scope 8 at ui/overloaded/overloaded-autoderef.rs:23:26: 23:37
        _59 = (move _60, move _61);      // scope 8 at ui/overloaded/overloaded-autoderef.rs:23:16: 23:38
        _58 = &_59;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _278 = const _;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(i32, i32), val: Unevaluated(main, [], Some(promoted[5])) }
        _68 = _278;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _57 = (move _58, move _68);      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _69 = (_57.0: &(i32, i32));      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _70 = (_57.1: &(i32, i32));      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _73 = _69;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _74 = _70;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _72 = <(i32, i32) as PartialEq>::eq(move _73, move _74) -> [return: bb22, unwind: bb123]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (i32, i32), &'b (i32, i32)) -> bool {<(i32, i32) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb22: {
        _71 = Not(move _72);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _71) -> [0: bb24, otherwise: bb23]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb23: {
        _75 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _77 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _79 = _69;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _78 = _79;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _81 = _70;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _80 = _81;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _82 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _76 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _77, move _78, move _80, move _82) -> bb123; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (i32, i32), &'b (i32, i32), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(i32, i32), (i32, i32)>}, val: Value(<ZST>) }
    }

    bb24: {
        drop(_64) -> [return: bb25, unwind: bb126]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb25: {
        _86 = const "foo";               // scope 8 at ui/overloaded/overloaded-autoderef.rs:25:21: 25:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:25:21: 25:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _85 = _86;                       // scope 8 at ui/overloaded/overloaded-autoderef.rs:25:21: 25:38
        _84 = <str as ToString>::to_string(move _85) -> [return: bb26, unwind: bb126]; // scope 8 at ui/overloaded/overloaded-autoderef.rs:25:21: 25:38
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:25:27: 25:36
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb26: {
        _83 = Rc::<String>::new(move _84) -> [return: bb27, unwind: bb126]; // scope 8 at ui/overloaded/overloaded-autoderef.rs:25:13: 25:39
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:25:13: 25:20
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(String) -> Rc<String> {Rc::<String>::new}, val: Value(<ZST>) }
    }

    bb27: {
        _93 = &_83;                      // scope 11 at ui/overloaded/overloaded-autoderef.rs:26:19: 26:20
        _92 = <Rc<String> as Deref>::deref(move _93) -> [return: bb28, unwind: bb122]; // scope 11 at ui/overloaded/overloaded-autoderef.rs:26:18: 26:20
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:26:18: 26:20
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<String>) -> &'a <Rc<String> as Deref>::Target {<Rc<String> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb28: {
        _91 = _92;                       // scope 11 at ui/overloaded/overloaded-autoderef.rs:26:18: 26:20
        _90 = <String as Deref>::deref(move _91) -> [return: bb29, unwind: bb122]; // scope 11 at ui/overloaded/overloaded-autoderef.rs:26:17: 26:20
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:26:17: 26:20
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb29: {
        _89 = _90;                       // scope 11 at ui/overloaded/overloaded-autoderef.rs:26:16: 26:20
        _88 = &_89;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _277 = const _;                  // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[4])) }
        _94 = _277;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _87 = (move _88, move _94);      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _95 = (_87.0: &&str);            // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _96 = (_87.1: &&str);            // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _99 = _95;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _100 = _96;                      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _98 = <&str as PartialEq>::eq(move _99, move _100) -> [return: bb30, unwind: bb122]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb30: {
        _97 = Not(move _98);             // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _97) -> [0: bb32, otherwise: bb31]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb31: {
        _101 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _103 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _105 = _95;                      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _104 = _105;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _107 = _96;                      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _106 = _107;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _108 = Option::<Arguments<'_>>::None; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _102 = core::panicking::assert_failed::<&str, &str>(move _103, move _104, move _106, move _108) -> bb122; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb32: {
        _111 = <String as From<&str>>::from(const "foo") -> [return: bb33, unwind: bb122]; // scope 11 at ui/overloaded/overloaded-autoderef.rs:28:38: 28:57
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:28:38: 28:50
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:28:51: 28:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb33: {
        _110 = RefCell::<String>::new(move _111) -> [return: bb34, unwind: bb122]; // scope 11 at ui/overloaded/overloaded-autoderef.rs:28:25: 28:58
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:28:25: 28:37
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(String) -> RefCell<String> {RefCell::<String>::new}, val: Value(<ZST>) }
    }

    bb34: {
        _109 = Rc::<RefCell<String>>::new(move _110) -> [return: bb35, unwind: bb122]; // scope 11 at ui/overloaded/overloaded-autoderef.rs:28:17: 28:59
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:28:17: 28:24
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(RefCell<String>) -> Rc<RefCell<String>> {Rc::<RefCell<String>>::new}, val: Value(<ZST>) }
    }

    bb35: {
        _119 = &_109;                    // scope 14 at ui/overloaded/overloaded-autoderef.rs:29:5: 29:23
        _118 = <Rc<RefCell<String>> as Deref>::deref(move _119) -> [return: bb36, unwind: bb121]; // scope 14 at ui/overloaded/overloaded-autoderef.rs:29:5: 29:23
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:29:5: 29:23
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<String>>) -> &'a <Rc<RefCell<String>> as Deref>::Target {<Rc<RefCell<String>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb36: {
        _117 = _118;                     // scope 14 at ui/overloaded/overloaded-autoderef.rs:29:5: 29:23
        _116 = RefCell::<String>::borrow_mut(move _117) -> [return: bb37, unwind: bb121]; // scope 14 at ui/overloaded/overloaded-autoderef.rs:29:5: 29:23
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:29:11: 29:21
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<String>) -> RefMut<'a, String> {RefCell::<String>::borrow_mut}, val: Value(<ZST>) }
    }

    bb37: {
        _115 = &mut _116;                // scope 14 at ui/overloaded/overloaded-autoderef.rs:29:5: 29:39
        _114 = <RefMut<'_, String> as DerefMut>::deref_mut(move _115) -> [return: bb38, unwind: bb120]; // scope 14 at ui/overloaded/overloaded-autoderef.rs:29:5: 29:39
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:29:5: 29:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, String>) -> &'a mut <RefMut<'_, String> as Deref>::Target {<RefMut<'_, String> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb38: {
        _113 = &mut (*_114);             // scope 14 at ui/overloaded/overloaded-autoderef.rs:29:5: 29:39
        _121 = const "bar";              // scope 14 at ui/overloaded/overloaded-autoderef.rs:29:33: 29:38
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:29:33: 29:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _120 = _121;                     // scope 14 at ui/overloaded/overloaded-autoderef.rs:29:33: 29:38
        _112 = String::push_str(move _113, move _120) -> [return: bb39, unwind: bb120]; // scope 14 at ui/overloaded/overloaded-autoderef.rs:29:5: 29:39
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:29:24: 29:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut String, &'b str) {String::push_str}, val: Value(<ZST>) }
    }

    bb39: {
        drop(_116) -> [return: bb40, unwind: bb121]; // scope 14 at ui/overloaded/overloaded-autoderef.rs:29:39: 29:40
    }

    bb40: {
        _132 = &_109;                    // scope 14 at ui/overloaded/overloaded-autoderef.rs:31:19: 31:33
        _131 = <Rc<RefCell<String>> as Deref>::deref(move _132) -> [return: bb41, unwind: bb121]; // scope 14 at ui/overloaded/overloaded-autoderef.rs:31:19: 31:33
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:31:19: 31:33
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<String>>) -> &'a <Rc<RefCell<String>> as Deref>::Target {<Rc<RefCell<String>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb41: {
        _130 = _131;                     // scope 14 at ui/overloaded/overloaded-autoderef.rs:31:19: 31:33
        _129 = RefCell::<String>::borrow(move _130) -> [return: bb42, unwind: bb121]; // scope 14 at ui/overloaded/overloaded-autoderef.rs:31:19: 31:33
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:31:25: 31:31
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<String>) -> Ref<'a, String> {RefCell::<String>::borrow}, val: Value(<ZST>) }
    }

    bb42: {
        _128 = &_129;                    // scope 14 at ui/overloaded/overloaded-autoderef.rs:31:19: 31:33
        _127 = <Ref<'_, String> as Deref>::deref(move _128) -> [return: bb43, unwind: bb119]; // scope 14 at ui/overloaded/overloaded-autoderef.rs:31:18: 31:33
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:31:18: 31:33
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, String>) -> &'a <Ref<'_, String> as Deref>::Target {<Ref<'_, String> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb43: {
        _126 = _127;                     // scope 14 at ui/overloaded/overloaded-autoderef.rs:31:18: 31:33
        _125 = <String as Deref>::deref(move _126) -> [return: bb44, unwind: bb119]; // scope 14 at ui/overloaded/overloaded-autoderef.rs:31:17: 31:33
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:31:17: 31:33
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb44: {
        _124 = _125;                     // scope 14 at ui/overloaded/overloaded-autoderef.rs:31:16: 31:33
        _123 = &_124;                    // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _276 = const _;                  // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[3])) }
        _133 = _276;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _122 = (move _123, move _133);   // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _134 = (_122.0: &&str);          // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _135 = (_122.1: &&str);          // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _138 = _134;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _139 = _135;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _137 = <&str as PartialEq>::eq(move _138, move _139) -> [return: bb45, unwind: bb119]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb45: {
        _136 = Not(move _137);           // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _136) -> [0: bb47, otherwise: bb46]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb46: {
        _140 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _142 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _144 = _134;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _143 = _144;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _146 = _135;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _145 = _146;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _147 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _141 = core::panicking::assert_failed::<&str, &str>(move _142, move _143, move _145, move _147) -> bb119; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb47: {
        drop(_129) -> [return: bb48, unwind: bb121]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb48: {
        _158 = &_109;                    // scope 14 at ui/overloaded/overloaded-autoderef.rs:32:19: 32:37
        _157 = <Rc<RefCell<String>> as Deref>::deref(move _158) -> [return: bb49, unwind: bb121]; // scope 14 at ui/overloaded/overloaded-autoderef.rs:32:19: 32:37
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:32:19: 32:37
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<String>>) -> &'a <Rc<RefCell<String>> as Deref>::Target {<Rc<RefCell<String>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb49: {
        _156 = _157;                     // scope 14 at ui/overloaded/overloaded-autoderef.rs:32:19: 32:37
        _155 = RefCell::<String>::borrow_mut(move _156) -> [return: bb50, unwind: bb121]; // scope 14 at ui/overloaded/overloaded-autoderef.rs:32:19: 32:37
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:32:25: 32:35
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<String>) -> RefMut<'a, String> {RefCell::<String>::borrow_mut}, val: Value(<ZST>) }
    }

    bb50: {
        _154 = &_155;                    // scope 14 at ui/overloaded/overloaded-autoderef.rs:32:19: 32:37
        _153 = <RefMut<'_, String> as Deref>::deref(move _154) -> [return: bb51, unwind: bb118]; // scope 14 at ui/overloaded/overloaded-autoderef.rs:32:18: 32:37
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:32:18: 32:37
                                         // + literal: Const { ty: for<'a> fn(&'a RefMut<'_, String>) -> &'a <RefMut<'_, String> as Deref>::Target {<RefMut<'_, String> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb51: {
        _152 = _153;                     // scope 14 at ui/overloaded/overloaded-autoderef.rs:32:18: 32:37
        _151 = <String as Deref>::deref(move _152) -> [return: bb52, unwind: bb118]; // scope 14 at ui/overloaded/overloaded-autoderef.rs:32:17: 32:37
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:32:17: 32:37
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb52: {
        _150 = _151;                     // scope 14 at ui/overloaded/overloaded-autoderef.rs:32:16: 32:37
        _149 = &_150;                    // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _275 = const _;                  // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[2])) }
        _159 = _275;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _148 = (move _149, move _159);   // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _160 = (_148.0: &&str);          // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _161 = (_148.1: &&str);          // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _164 = _160;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _165 = _161;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _163 = <&str as PartialEq>::eq(move _164, move _165) -> [return: bb53, unwind: bb118]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb53: {
        _162 = Not(move _163);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _162) -> [0: bb55, otherwise: bb54]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb54: {
        _166 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _168 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _170 = _160;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _169 = _170;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _172 = _161;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _171 = _172;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _173 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _167 = core::panicking::assert_failed::<&str, &str>(move _168, move _169, move _171, move _173) -> bb118; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb55: {
        drop(_155) -> [return: bb56, unwind: bb121]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb56: {
        _176 = Point { x: const 1_isize, y: const 2_isize }; // scope 14 at ui/overloaded/overloaded-autoderef.rs:34:34: 34:52
        _175 = RefCell::<Point>::new(move _176) -> [return: bb57, unwind: bb121]; // scope 14 at ui/overloaded/overloaded-autoderef.rs:34:21: 34:53
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:34:21: 34:33
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn(Point) -> RefCell<Point> {RefCell::<Point>::new}, val: Value(<ZST>) }
    }

    bb57: {
        _174 = Rc::<RefCell<Point>>::new(move _175) -> [return: bb58, unwind: bb121]; // scope 14 at ui/overloaded/overloaded-autoderef.rs:34:13: 34:54
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:34:13: 34:20
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn(RefCell<Point>) -> Rc<RefCell<Point>> {Rc::<RefCell<Point>>::new}, val: Value(<ZST>) }
    }

    bb58: {
        _182 = &_174;                    // scope 19 at ui/overloaded/overloaded-autoderef.rs:35:5: 35:19
        _181 = <Rc<RefCell<Point>> as Deref>::deref(move _182) -> [return: bb59, unwind: bb117]; // scope 19 at ui/overloaded/overloaded-autoderef.rs:35:5: 35:19
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:35:5: 35:19
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Point>>) -> &'a <Rc<RefCell<Point>> as Deref>::Target {<Rc<RefCell<Point>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb59: {
        _180 = _181;                     // scope 19 at ui/overloaded/overloaded-autoderef.rs:35:5: 35:19
        _179 = RefCell::<Point>::borrow_mut(move _180) -> [return: bb60, unwind: bb117]; // scope 19 at ui/overloaded/overloaded-autoderef.rs:35:5: 35:19
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:35:7: 35:17
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Point>) -> RefMut<'a, Point> {RefCell::<Point>::borrow_mut}, val: Value(<ZST>) }
    }

    bb60: {
        _178 = &mut _179;                // scope 19 at ui/overloaded/overloaded-autoderef.rs:35:5: 35:19
        _177 = <RefMut<'_, Point> as DerefMut>::deref_mut(move _178) -> [return: bb61, unwind: bb116]; // scope 19 at ui/overloaded/overloaded-autoderef.rs:35:5: 35:21
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:35:5: 35:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, Point>) -> &'a mut <RefMut<'_, Point> as Deref>::Target {<RefMut<'_, Point> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb61: {
        ((*_177).0: isize) = const 3_isize; // scope 19 at ui/overloaded/overloaded-autoderef.rs:35:5: 35:25
        drop(_179) -> [return: bb62, unwind: bb117]; // scope 19 at ui/overloaded/overloaded-autoderef.rs:35:25: 35:26
    }

    bb62: {
        _188 = &_174;                    // scope 19 at ui/overloaded/overloaded-autoderef.rs:36:5: 36:19
        _187 = <Rc<RefCell<Point>> as Deref>::deref(move _188) -> [return: bb63, unwind: bb117]; // scope 19 at ui/overloaded/overloaded-autoderef.rs:36:5: 36:19
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:36:5: 36:19
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Point>>) -> &'a <Rc<RefCell<Point>> as Deref>::Target {<Rc<RefCell<Point>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb63: {
        _186 = _187;                     // scope 19 at ui/overloaded/overloaded-autoderef.rs:36:5: 36:19
        _185 = RefCell::<Point>::borrow_mut(move _186) -> [return: bb64, unwind: bb117]; // scope 19 at ui/overloaded/overloaded-autoderef.rs:36:5: 36:19
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:36:7: 36:17
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Point>) -> RefMut<'a, Point> {RefCell::<Point>::borrow_mut}, val: Value(<ZST>) }
    }

    bb64: {
        _184 = &mut _185;                // scope 19 at ui/overloaded/overloaded-autoderef.rs:36:5: 36:19
        _183 = <RefMut<'_, Point> as DerefMut>::deref_mut(move _184) -> [return: bb65, unwind: bb115]; // scope 19 at ui/overloaded/overloaded-autoderef.rs:36:5: 36:21
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:36:5: 36:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, Point>) -> &'a mut <RefMut<'_, Point> as Deref>::Target {<RefMut<'_, Point> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb65: {
        _189 = CheckedAdd(((*_183).1: isize), const 3_isize); // scope 19 at ui/overloaded/overloaded-autoderef.rs:36:5: 36:26
        assert(!move (_189.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_183).1: isize), const 3_isize) -> [success: bb66, unwind: bb115]; // scope 19 at ui/overloaded/overloaded-autoderef.rs:36:5: 36:26
    }

    bb66: {
        ((*_183).1: isize) = move (_189.0: isize); // scope 19 at ui/overloaded/overloaded-autoderef.rs:36:5: 36:26
        drop(_185) -> [return: bb67, unwind: bb117]; // scope 19 at ui/overloaded/overloaded-autoderef.rs:36:26: 36:27
    }

    bb67: {
        _197 = &_174;                    // scope 19 at ui/overloaded/overloaded-autoderef.rs:37:17: 37:27
        _196 = <Rc<RefCell<Point>> as Deref>::deref(move _197) -> [return: bb68, unwind: bb117]; // scope 19 at ui/overloaded/overloaded-autoderef.rs:37:17: 37:27
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:37:17: 37:27
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Point>>) -> &'a <Rc<RefCell<Point>> as Deref>::Target {<Rc<RefCell<Point>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb68: {
        _195 = _196;                     // scope 19 at ui/overloaded/overloaded-autoderef.rs:37:17: 37:27
        _194 = RefCell::<Point>::borrow(move _195) -> [return: bb69, unwind: bb117]; // scope 19 at ui/overloaded/overloaded-autoderef.rs:37:17: 37:27
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:37:19: 37:25
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Point>) -> Ref<'a, Point> {RefCell::<Point>::borrow}, val: Value(<ZST>) }
    }

    bb69: {
        _193 = &_194;                    // scope 19 at ui/overloaded/overloaded-autoderef.rs:37:17: 37:27
        _192 = <Ref<'_, Point> as Deref>::deref(move _193) -> [return: bb70, unwind: bb114]; // scope 19 at ui/overloaded/overloaded-autoderef.rs:37:16: 37:27
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:37:16: 37:27
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Point>) -> &'a <Ref<'_, Point> as Deref>::Target {<Ref<'_, Point> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb70: {
        _191 = _192;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _274 = const _;                  // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Point, val: Unevaluated(main, [], Some(promoted[1])) }
        _198 = _274;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _190 = (move _191, move _198);   // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _199 = (_190.0: &Point);         // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _200 = (_190.1: &Point);         // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _203 = _199;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _204 = _200;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _202 = <Point as PartialEq>::eq(move _203, move _204) -> [return: bb71, unwind: bb114]; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Point, &'b Point) -> bool {<Point as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb71: {
        _201 = Not(move _202);           // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _201) -> [0: bb73, otherwise: bb72]; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb72: {
        _205 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _207 = const core::panicking::AssertKind::Eq; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _209 = _199;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _208 = _209;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _211 = _200;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _210 = _211;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _212 = Option::<Arguments<'_>>::None; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _206 = core::panicking::assert_failed::<Point, Point>(move _207, move _208, move _210, move _212) -> bb114; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Point, &'b Point, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Point, Point>}, val: Value(<ZST>) }
    }

    bb73: {
        drop(_194) -> [return: bb74, unwind: bb117]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb74: {
        _215 = [const 1_i32, const 2_i32, const 3_i32]; // scope 19 at ui/overloaded/overloaded-autoderef.rs:39:34: 39:43
        _214 = RefCell::<[i32; 3]>::new(move _215) -> [return: bb75, unwind: bb117]; // scope 19 at ui/overloaded/overloaded-autoderef.rs:39:21: 39:44
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:39:21: 39:33
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: fn([i32; 3]) -> RefCell<[i32; 3]> {RefCell::<[i32; 3]>::new}, val: Value(<ZST>) }
    }

    bb75: {
        _213 = Rc::<RefCell<[i32; 3]>>::new(move _214) -> [return: bb76, unwind: bb117]; // scope 19 at ui/overloaded/overloaded-autoderef.rs:39:13: 39:45
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:39:13: 39:20
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn(RefCell<[i32; 3]>) -> Rc<RefCell<[i32; 3]>> {Rc::<RefCell<[i32; 3]>>::new}, val: Value(<ZST>) }
    }

    bb76: {
        _221 = &_213;                    // scope 22 at ui/overloaded/overloaded-autoderef.rs:40:5: 40:19
        _220 = <Rc<RefCell<[i32; 3]>> as Deref>::deref(move _221) -> [return: bb77, unwind: bb113]; // scope 22 at ui/overloaded/overloaded-autoderef.rs:40:5: 40:19
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:40:5: 40:19
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<[i32; 3]>>) -> &'a <Rc<RefCell<[i32; 3]>> as Deref>::Target {<Rc<RefCell<[i32; 3]>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb77: {
        _219 = _220;                     // scope 22 at ui/overloaded/overloaded-autoderef.rs:40:5: 40:19
        _218 = RefCell::<[i32; 3]>::borrow_mut(move _219) -> [return: bb78, unwind: bb113]; // scope 22 at ui/overloaded/overloaded-autoderef.rs:40:5: 40:19
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:40:7: 40:17
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<[i32; 3]>) -> RefMut<'a, [i32; 3]> {RefCell::<[i32; 3]>::borrow_mut}, val: Value(<ZST>) }
    }

    bb78: {
        _217 = &mut _218;                // scope 22 at ui/overloaded/overloaded-autoderef.rs:40:5: 40:19
        _216 = <RefMut<'_, [i32; 3]> as DerefMut>::deref_mut(move _217) -> [return: bb79, unwind: bb112]; // scope 22 at ui/overloaded/overloaded-autoderef.rs:40:5: 40:19
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:40:5: 40:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, [i32; 3]>) -> &'a mut <RefMut<'_, [i32; 3]> as Deref>::Target {<RefMut<'_, [i32; 3]> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb79: {
        _222 = const 0_usize;            // scope 22 at ui/overloaded/overloaded-autoderef.rs:40:20: 40:21
        (*_216)[_222] = const 3_i32;     // scope 22 at ui/overloaded/overloaded-autoderef.rs:40:5: 40:26
        drop(_218) -> [return: bb80, unwind: bb113]; // scope 22 at ui/overloaded/overloaded-autoderef.rs:40:26: 40:27
    }

    bb80: {
        _228 = &_213;                    // scope 22 at ui/overloaded/overloaded-autoderef.rs:41:5: 41:19
        _227 = <Rc<RefCell<[i32; 3]>> as Deref>::deref(move _228) -> [return: bb81, unwind: bb113]; // scope 22 at ui/overloaded/overloaded-autoderef.rs:41:5: 41:19
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:41:5: 41:19
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<[i32; 3]>>) -> &'a <Rc<RefCell<[i32; 3]>> as Deref>::Target {<Rc<RefCell<[i32; 3]>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb81: {
        _226 = _227;                     // scope 22 at ui/overloaded/overloaded-autoderef.rs:41:5: 41:19
        _225 = RefCell::<[i32; 3]>::borrow_mut(move _226) -> [return: bb82, unwind: bb113]; // scope 22 at ui/overloaded/overloaded-autoderef.rs:41:5: 41:19
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:41:7: 41:17
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<[i32; 3]>) -> RefMut<'a, [i32; 3]> {RefCell::<[i32; 3]>::borrow_mut}, val: Value(<ZST>) }
    }

    bb82: {
        _224 = &mut _225;                // scope 22 at ui/overloaded/overloaded-autoderef.rs:41:5: 41:19
        _223 = <RefMut<'_, [i32; 3]> as DerefMut>::deref_mut(move _224) -> [return: bb83, unwind: bb111]; // scope 22 at ui/overloaded/overloaded-autoderef.rs:41:5: 41:19
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:41:5: 41:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, [i32; 3]>) -> &'a mut <RefMut<'_, [i32; 3]> as Deref>::Target {<RefMut<'_, [i32; 3]> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb83: {
        _229 = const 1_usize;            // scope 22 at ui/overloaded/overloaded-autoderef.rs:41:20: 41:21
        _230 = CheckedAdd((*_223)[_229], const 3_i32); // scope 22 at ui/overloaded/overloaded-autoderef.rs:41:5: 41:27
        assert(!move (_230.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_223)[_229], const 3_i32) -> [success: bb84, unwind: bb111]; // scope 22 at ui/overloaded/overloaded-autoderef.rs:41:5: 41:27
    }

    bb84: {
        (*_223)[_229] = move (_230.0: i32); // scope 22 at ui/overloaded/overloaded-autoderef.rs:41:5: 41:27
        drop(_225) -> [return: bb85, unwind: bb113]; // scope 22 at ui/overloaded/overloaded-autoderef.rs:41:27: 41:28
    }

    bb85: {
        _240 = &_213;                    // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:17: 42:27
        _239 = <Rc<RefCell<[i32; 3]>> as Deref>::deref(move _240) -> [return: bb86, unwind: bb113]; // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:17: 42:27
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:42:17: 42:27
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<[i32; 3]>>) -> &'a <Rc<RefCell<[i32; 3]>> as Deref>::Target {<Rc<RefCell<[i32; 3]>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb86: {
        _238 = _239;                     // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:17: 42:27
        _237 = RefCell::<[i32; 3]>::borrow(move _238) -> [return: bb87, unwind: bb113]; // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:17: 42:27
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:42:19: 42:25
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<[i32; 3]>) -> Ref<'a, [i32; 3]> {RefCell::<[i32; 3]>::borrow}, val: Value(<ZST>) }
    }

    bb87: {
        _236 = &_237;                    // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:17: 42:27
        _235 = <Ref<'_, [i32; 3]> as Deref>::deref(move _236) -> [return: bb88, unwind: bb110]; // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:17: 42:27
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:42:17: 42:27
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, [i32; 3]>) -> &'a <Ref<'_, [i32; 3]> as Deref>::Target {<Ref<'_, [i32; 3]> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb88: {
        _241 = const 0_usize;            // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:28: 42:29
        _234 = (*_235)[_241];            // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:17: 42:30
        _248 = &_213;                    // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:32: 42:42
        _247 = <Rc<RefCell<[i32; 3]>> as Deref>::deref(move _248) -> [return: bb89, unwind: bb110]; // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:32: 42:42
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:42:32: 42:42
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<[i32; 3]>>) -> &'a <Rc<RefCell<[i32; 3]>> as Deref>::Target {<Rc<RefCell<[i32; 3]>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb89: {
        _246 = _247;                     // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:32: 42:42
        _245 = RefCell::<[i32; 3]>::borrow(move _246) -> [return: bb90, unwind: bb110]; // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:32: 42:42
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:42:34: 42:40
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<[i32; 3]>) -> Ref<'a, [i32; 3]> {RefCell::<[i32; 3]>::borrow}, val: Value(<ZST>) }
    }

    bb90: {
        _244 = &_245;                    // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:32: 42:42
        _243 = <Ref<'_, [i32; 3]> as Deref>::deref(move _244) -> [return: bb91, unwind: bb109]; // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:32: 42:42
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:42:32: 42:42
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, [i32; 3]>) -> &'a <Ref<'_, [i32; 3]> as Deref>::Target {<Ref<'_, [i32; 3]> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb91: {
        _249 = const 1_usize;            // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:43: 42:44
        _242 = (*_243)[_249];            // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:32: 42:45
        _256 = &_213;                    // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:47: 42:57
        _255 = <Rc<RefCell<[i32; 3]>> as Deref>::deref(move _256) -> [return: bb92, unwind: bb109]; // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:47: 42:57
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:42:47: 42:57
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<[i32; 3]>>) -> &'a <Rc<RefCell<[i32; 3]>> as Deref>::Target {<Rc<RefCell<[i32; 3]>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb92: {
        _254 = _255;                     // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:47: 42:57
        _253 = RefCell::<[i32; 3]>::borrow(move _254) -> [return: bb93, unwind: bb109]; // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:47: 42:57
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:42:49: 42:55
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<[i32; 3]>) -> Ref<'a, [i32; 3]> {RefCell::<[i32; 3]>::borrow}, val: Value(<ZST>) }
    }

    bb93: {
        _252 = &_253;                    // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:47: 42:57
        _251 = <Ref<'_, [i32; 3]> as Deref>::deref(move _252) -> [return: bb94, unwind: bb108]; // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:47: 42:57
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:42:47: 42:57
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, [i32; 3]>) -> &'a <Ref<'_, [i32; 3]> as Deref>::Target {<Ref<'_, [i32; 3]> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb94: {
        _257 = const 2_usize;            // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:58: 42:59
        _250 = (*_251)[_257];            // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:47: 42:60
        _233 = (move _234, move _242, move _250); // scope 22 at ui/overloaded/overloaded-autoderef.rs:42:16: 42:61
        _232 = &_233;                    // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _273 = const _;                  // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(i32, i32, i32), val: Unevaluated(main, [], Some(promoted[0])) }
        _258 = _273;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _231 = (move _232, move _258);   // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _259 = (_231.0: &(i32, i32, i32)); // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _260 = (_231.1: &(i32, i32, i32)); // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _263 = _259;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _264 = _260;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _262 = <(i32, i32, i32) as PartialEq>::eq(move _263, move _264) -> [return: bb95, unwind: bb108]; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (i32, i32, i32), &'b (i32, i32, i32)) -> bool {<(i32, i32, i32) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb95: {
        _261 = Not(move _262);           // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _261) -> [0: bb97, otherwise: bb96]; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb96: {
        _265 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _267 = const core::panicking::AssertKind::Eq; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _269 = _259;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _268 = _269;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _271 = _260;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _270 = _271;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _272 = Option::<Arguments<'_>>::None; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _266 = core::panicking::assert_failed::<(i32, i32, i32), (i32, i32, i32)>(move _267, move _268, move _270, move _272) -> bb108; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (i32, i32, i32), &'b (i32, i32, i32), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(i32, i32, i32), (i32, i32, i32)>}, val: Value(<ZST>) }
    }

    bb97: {
        drop(_253) -> [return: bb98, unwind: bb109]; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb98: {
        drop(_245) -> [return: bb99, unwind: bb110]; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb99: {
        drop(_237) -> [return: bb100, unwind: bb113]; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb100: {
        drop(_213) -> [return: bb101, unwind: bb117]; // scope 19 at ui/overloaded/overloaded-autoderef.rs:43:1: 43:2
    }

    bb101: {
        drop(_174) -> [return: bb102, unwind: bb121]; // scope 14 at ui/overloaded/overloaded-autoderef.rs:43:1: 43:2
    }

    bb102: {
        drop(_109) -> [return: bb103, unwind: bb122]; // scope 11 at ui/overloaded/overloaded-autoderef.rs:43:1: 43:2
    }

    bb103: {
        drop(_83) -> [return: bb104, unwind: bb126]; // scope 8 at ui/overloaded/overloaded-autoderef.rs:43:1: 43:2
    }

    bb104: {
        drop(_42) -> [return: bb105, unwind: bb127]; // scope 2 at ui/overloaded/overloaded-autoderef.rs:43:1: 43:2
    }

    bb105: {
        drop(_2) -> [return: bb106, unwind: bb128]; // scope 1 at ui/overloaded/overloaded-autoderef.rs:43:1: 43:2
    }

    bb106: {
        drop(_1) -> bb107;               // scope 0 at ui/overloaded/overloaded-autoderef.rs:43:1: 43:2
    }

    bb107: {
        return;                          // scope 0 at ui/overloaded/overloaded-autoderef.rs:43:2: 43:2
    }

    bb108 (cleanup): {
        drop(_253) -> bb109;             // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb109 (cleanup): {
        drop(_245) -> bb110;             // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb110 (cleanup): {
        drop(_237) -> bb113;             // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb111 (cleanup): {
        drop(_225) -> bb113;             // scope 22 at ui/overloaded/overloaded-autoderef.rs:41:27: 41:28
    }

    bb112 (cleanup): {
        drop(_218) -> bb113;             // scope 22 at ui/overloaded/overloaded-autoderef.rs:40:26: 40:27
    }

    bb113 (cleanup): {
        drop(_213) -> bb117;             // scope 19 at ui/overloaded/overloaded-autoderef.rs:43:1: 43:2
    }

    bb114 (cleanup): {
        drop(_194) -> bb117;             // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb115 (cleanup): {
        drop(_185) -> bb117;             // scope 19 at ui/overloaded/overloaded-autoderef.rs:36:26: 36:27
    }

    bb116 (cleanup): {
        drop(_179) -> bb117;             // scope 19 at ui/overloaded/overloaded-autoderef.rs:35:25: 35:26
    }

    bb117 (cleanup): {
        drop(_174) -> bb121;             // scope 14 at ui/overloaded/overloaded-autoderef.rs:43:1: 43:2
    }

    bb118 (cleanup): {
        drop(_155) -> bb121;             // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb119 (cleanup): {
        drop(_129) -> bb121;             // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb120 (cleanup): {
        drop(_116) -> bb121;             // scope 14 at ui/overloaded/overloaded-autoderef.rs:29:39: 29:40
    }

    bb121 (cleanup): {
        drop(_109) -> bb122;             // scope 11 at ui/overloaded/overloaded-autoderef.rs:43:1: 43:2
    }

    bb122 (cleanup): {
        drop(_83) -> bb126;              // scope 8 at ui/overloaded/overloaded-autoderef.rs:43:1: 43:2
    }

    bb123 (cleanup): {
        drop(_64) -> bb126;              // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb124 (cleanup): {
        drop(_53) -> bb126;              // scope 8 at ui/overloaded/overloaded-autoderef.rs:22:24: 22:25
    }

    bb125 (cleanup): {
        drop(_47) -> bb126;              // scope 7 at ui/overloaded/overloaded-autoderef.rs:21:30: 21:31
    }

    bb126 (cleanup): {
        drop(_42) -> bb127;              // scope 2 at ui/overloaded/overloaded-autoderef.rs:43:1: 43:2
    }

    bb127 (cleanup): {
        drop(_2) -> bb128;               // scope 1 at ui/overloaded/overloaded-autoderef.rs:43:1: 43:2
    }

    bb128 (cleanup): {
        drop(_1) -> bb129;               // scope 0 at ui/overloaded/overloaded-autoderef.rs:43:1: 43:2
    }

    bb129 (cleanup): {
        resume;                          // scope 0 at ui/overloaded/overloaded-autoderef.rs:14:1: 43:2
    }
}

promoted[0] in main: &(i32, i32, i32) = {
    let mut _0: &(i32, i32, i32);        // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: (i32, i32, i32);         // in scope 0 at ui/overloaded/overloaded-autoderef.rs:42:63: 42:72

    bb0: {
        _1 = (const 3_i32, const 5_i32, const 3_i32); // scope 0 at ui/overloaded/overloaded-autoderef.rs:42:63: 42:72
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &Point = {
    let mut _0: &Point;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Point;                   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:37:29: 37:47

    bb0: {
        _1 = Point { x: const 3_isize, y: const 5_isize }; // scope 0 at ui/overloaded/overloaded-autoderef.rs:37:29: 37:47
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/overloaded/overloaded-autoderef.rs:32:39: 32:47

    bb0: {
        _1 = const "foobar";             // scope 0 at ui/overloaded/overloaded-autoderef.rs:32:39: 32:47
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:32:39: 32:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/overloaded/overloaded-autoderef.rs:31:35: 31:43

    bb0: {
        _1 = const "foobar";             // scope 0 at ui/overloaded/overloaded-autoderef.rs:31:35: 31:43
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:31:35: 31:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/overloaded/overloaded-autoderef.rs:26:22: 26:27

    bb0: {
        _1 = const "foo";                // scope 0 at ui/overloaded/overloaded-autoderef.rs:26:22: 26:27
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef.rs:26:22: 26:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);             // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: (i32, i32);              // in scope 0 at ui/overloaded/overloaded-autoderef.rs:23:40: 23:46

    bb0: {
        _1 = (const 2_i32, const 5_i32); // scope 0 at ui/overloaded/overloaded-autoderef.rs:23:40: 23:46
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[6] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:18:25: 18:26

    bb0: {
        _1 = const 4_isize;              // scope 0 at ui/overloaded/overloaded-autoderef.rs:18:25: 18:26
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[7] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/overloaded/overloaded-autoderef.rs:17:25: 17:26

    bb0: {
        _1 = const 2_isize;              // scope 0 at ui/overloaded/overloaded-autoderef.rs:17:25: 17:26
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
