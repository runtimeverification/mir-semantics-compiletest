// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Foo::dummy(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/overloaded/issue-14958.rs:10:1: 10:51>::call(_1: &Bar, _2: (&dyn Foo,)) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/overloaded/issue-14958.rs:14:1: 14:54>::call_mut(_1: &mut Bar, _2: (&dyn Foo,)) -> () {
    debug self => _1;
    debug a => _2;
    let mut _0: ();
    let mut _3: &Bar;

    bb0: {
        _3 = &(*_1);
        _0 = <Bar as Fn<(&dyn Foo,)>>::call(move _3, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/overloaded/issue-14958.rs:18:1: 18:55>::call_once(_1: Bar, _2: (&dyn Foo,)) -> () {
    debug self => const Bar;
    debug a => _2;
    let mut _0: ();
    let mut _3: &Bar;

    bb0: {
        _3 = &_1;
        _0 = <Bar as Fn<(&dyn Foo,)>>::call(move _3, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Bar;
    let _2: ();
    let mut _3: &Bar;
    let mut _4: (&dyn Foo,);
    let mut _5: &dyn Foo;
    scope 1 {
        debug bar => const Bar;
        let mut _6: &Baz;
        scope 2 {
            debug baz => const _;
        }
    }

    bb0: {
        _6 = const _;
        _3 = &_1;
        _5 = _6 as &dyn Foo (Pointer(Unsize));
        _4 = (move _5,);
        _2 = <Bar as Fn<(&dyn Foo,)>>::call(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in main: &Baz = {
    let mut _0: &Baz;
    let mut _1: Baz;

    bb0: {
        _1 = Baz;
        _0 = &_1;
        return;
    }
}
