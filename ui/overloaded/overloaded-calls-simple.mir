// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-calls-simple.rs:12:1: 12:26>::call_mut(_1: &mut S1, _2: (i32,)) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let _3: i32;
    let mut _4: i32;
    let mut _5: i32;
    let mut _6: i32;
    scope 1 {
        debug z => _3;
    }

    bb0: {
        _3 = (_2.0: i32);
        _5 = ((*_1).0: i32);
        _6 = ((*_1).1: i32);
        _4 = Mul(move _5, move _6);
        _0 = Mul(move _4, _3);
        return;
    }
}

fn <impl at ui/overloaded/overloaded-calls-simple.rs:18:1: 18:27>::call_once(_1: S1, _2: (i32,)) -> i32 {
    debug self => _1;
    debug args => _2;
    let mut _0: i32;
    let mut _3: &mut S1;

    bb0: {
        _3 = &mut _1;
        _0 = <S1 as FnMut<(i32,)>>::call_mut(move _3, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/overloaded/overloaded-calls-simple.rs:30:1: 30:23>::call(_1: &S2, _2: (i32,)) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let _3: i32;
    let mut _4: i32;
    let mut _5: i32;
    let mut _6: i32;
    scope 1 {
        debug z => _3;
    }

    bb0: {
        _3 = (_2.0: i32);
        _5 = ((*_1).0: i32);
        _6 = ((*_1).1: i32);
        _4 = Mul(move _5, move _6);
        _0 = Mul(move _4, _3);
        return;
    }
}

fn <impl at ui/overloaded/overloaded-calls-simple.rs:36:1: 36:26>::call_mut(_1: &mut S2, _2: (i32,)) -> i32 {
    debug self => _1;
    debug args => _2;
    let mut _0: i32;
    let mut _3: &S2;

    bb0: {
        _3 = &(*_1);
        _0 = <S2 as Fn<(i32,)>>::call(move _3, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/overloaded/overloaded-calls-simple.rs:40:1: 40:27>::call_once(_1: S2, _2: (i32,)) -> i32 {
    debug self => _1;
    debug args => _2;
    let mut _0: i32;
    let mut _3: &S2;

    bb0: {
        _3 = &_1;
        _0 = <S2 as Fn<(i32,)>>::call(move _3, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/overloaded/overloaded-calls-simple.rs:50:1: 50:30>::call_once(_1: S3, _2: (i32, i32)) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let _3: i32;
    let _4: i32;
    let mut _5: i32;
    let mut _6: i32;
    let mut _7: i32;
    let mut _8: i32;
    scope 1 {
        debug z => _3;
        debug zz => _4;
    }

    bb0: {
        _3 = (_2.0: i32);
        _4 = (_2.1: i32);
        _7 = (_1.0: i32);
        _8 = (_1.1: i32);
        _6 = Mul(move _7, move _8);
        _5 = Mul(move _6, _3);
        _0 = Mul(move _5, _4);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: S1;
    let mut _3: &mut S1;
    let mut _4: (i32,);
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: &S2;
    let mut _19: (i32,);
    let mut _20: (&i32, &i32);
    let mut _21: &i32;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: i32;
    let mut _27: i32;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (i32, i32);
    let mut _34: (&i32, &i32);
    let mut _35: &i32;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: i32;
    let mut _41: i32;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug s => _1;
        let _2: i32;
        scope 2 {
            debug ans => _2;
            let _7: &i32;
            let _8: &i32;
            let _16: S2;
            let mut _47: &i32;
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
            scope 5 {
                debug s => _16;
                let _17: i32;
                scope 6 {
                    debug ans => _17;
                    let _22: &i32;
                    let _23: &i32;
                    let _31: S3;
                    let mut _46: &i32;
                    scope 7 {
                        debug left_val => _22;
                        debug right_val => _23;
                        let _28: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _28;
                        }
                    }
                    scope 9 {
                        debug s => _31;
                        let _32: i32;
                        scope 10 {
                            debug ans => _32;
                            let _36: &i32;
                            let _37: &i32;
                            let mut _45: &i32;
                            scope 11 {
                                debug left_val => _36;
                                debug right_val => _37;
                                let _42: core::panicking::AssertKind;
                                scope 12 {
                                    debug kind => _42;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = S1 { x: const 3_i32, y: const 3_i32 };
        _3 = &mut _1;
        _4 = (const 3_i32,);
        _2 = <S1 as FnMut<(i32,)>>::call_mut(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_2;
        _47 = const _;
        _5 = (move _6, _47);
        _7 = (_5.0: &i32);
        _8 = (_5.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i32, i32>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb3: {
        _16 = S2 { x: const 3_i32, y: const 3_i32 };
        _18 = &_16;
        _19 = (const 3_i32,);
        _17 = <S2 as Fn<(i32,)>>::call(move _18, move _19) -> [return: bb4, unwind continue];
    }

    bb4: {
        _21 = &_17;
        _46 = const _;
        _20 = (move _21, _46);
        _22 = (_20.0: &i32);
        _23 = (_20.1: &i32);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<i32, i32>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb6: {
        _31 = S3 { x: const 3_i32, y: const 3_i32 };
        _33 = (const 3_i32, const 1_i32);
        _32 = <S3 as FnOnce<(i32, i32)>>::call_once(move _31, move _33) -> [return: bb7, unwind continue];
    }

    bb7: {
        _35 = &_32;
        _45 = const _;
        _34 = (move _35, _45);
        _36 = (_34.0: &i32);
        _37 = (_34.1: &i32);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<i32, i32>(move _42, _36, _37, move _44) -> unwind continue;
    }

    bb9: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 27_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 27_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 27_i32;
        _0 = &_1;
        return;
    }
}
