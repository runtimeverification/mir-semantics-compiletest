// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-calls-simple.rs:12:1: 12:26>::call_mut(_1: &mut S1, _2: (i32,)) -> i32 {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:13:36: 13:45
    let mut _0: i32;                     // return place in scope 0 at ui/overloaded/overloaded-calls-simple.rs:13:64: 13:67
    let _3: i32;                         // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:13:48: 13:49
    let mut _4: i32;                     // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:14:9: 14:24
    let mut _5: i32;                     // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:14:9: 14:15
    let mut _6: i32;                     // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:14:18: 14:24
    let mut _7: (i32, bool);             // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:14:9: 14:24
    let mut _8: i32;                     // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:14:27: 14:28
    let mut _9: (i32, bool);             // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:14:9: 14:28
    scope 1 {
        debug z => _3;                   // in scope 1 at ui/overloaded/overloaded-calls-simple.rs:13:48: 13:49
    }

    bb0: {
        _3 = (_2.0: i32);                // scope 0 at ui/overloaded/overloaded-calls-simple.rs:13:48: 13:49
        _5 = ((*_1).0: i32);             // scope 1 at ui/overloaded/overloaded-calls-simple.rs:14:9: 14:15
        _6 = ((*_1).1: i32);             // scope 1 at ui/overloaded/overloaded-calls-simple.rs:14:18: 14:24
        _7 = CheckedMul(_5, _6);         // scope 1 at ui/overloaded/overloaded-calls-simple.rs:14:9: 14:24
        assert(!move (_7.1: bool), "attempt to compute `{} * {}`, which would overflow", move _5, move _6) -> bb1; // scope 1 at ui/overloaded/overloaded-calls-simple.rs:14:9: 14:24
    }

    bb1: {
        _4 = move (_7.0: i32);           // scope 1 at ui/overloaded/overloaded-calls-simple.rs:14:9: 14:24
        _8 = _3;                         // scope 1 at ui/overloaded/overloaded-calls-simple.rs:14:27: 14:28
        _9 = CheckedMul(_4, _8);         // scope 1 at ui/overloaded/overloaded-calls-simple.rs:14:9: 14:28
        assert(!move (_9.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, move _8) -> bb2; // scope 1 at ui/overloaded/overloaded-calls-simple.rs:14:9: 14:28
    }

    bb2: {
        _0 = move (_9.0: i32);           // scope 1 at ui/overloaded/overloaded-calls-simple.rs:14:9: 14:28
        return;                          // scope 0 at ui/overloaded/overloaded-calls-simple.rs:15:6: 15:6
    }
}

fn <impl at ui/overloaded/overloaded-calls-simple.rs:18:1: 18:27>::call_once(_1: S1, _2: (i32,)) -> i32 {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:20:37: 20:45
    debug args => _2;                    // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:20:47: 20:51
    let mut _0: i32;                     // return place in scope 0 at ui/overloaded/overloaded-calls-simple.rs:20:64: 20:67
    let mut _3: &mut S1;                 // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:21:9: 21:28
    let mut _4: (i32,);                  // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:21:23: 21:27

    bb0: {
        _3 = &mut _1;                    // scope 0 at ui/overloaded/overloaded-calls-simple.rs:21:9: 21:28
        _4 = _2;                         // scope 0 at ui/overloaded/overloaded-calls-simple.rs:21:23: 21:27
        _0 = <S1 as FnMut<(i32,)>>::call_mut(move _3, move _4) -> bb1; // scope 0 at ui/overloaded/overloaded-calls-simple.rs:21:9: 21:28
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-calls-simple.rs:21:14: 21:22
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut S1, (i32,)) -> <S1 as FnOnce<(i32,)>>::Output {<S1 as FnMut<(i32,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/overloaded/overloaded-calls-simple.rs:22:6: 22:6
    }
}

fn <impl at ui/overloaded/overloaded-calls-simple.rs:30:1: 30:23>::call(_1: &S2, _2: (i32,)) -> i32 {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:31:32: 31:37
    let mut _0: i32;                     // return place in scope 0 at ui/overloaded/overloaded-calls-simple.rs:31:56: 31:59
    let _3: i32;                         // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:31:40: 31:41
    let mut _4: i32;                     // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:32:9: 32:24
    let mut _5: i32;                     // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:32:9: 32:15
    let mut _6: i32;                     // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:32:18: 32:24
    let mut _7: (i32, bool);             // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:32:9: 32:24
    let mut _8: i32;                     // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:32:27: 32:28
    let mut _9: (i32, bool);             // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:32:9: 32:28
    scope 1 {
        debug z => _3;                   // in scope 1 at ui/overloaded/overloaded-calls-simple.rs:31:40: 31:41
    }

    bb0: {
        _3 = (_2.0: i32);                // scope 0 at ui/overloaded/overloaded-calls-simple.rs:31:40: 31:41
        _5 = ((*_1).0: i32);             // scope 1 at ui/overloaded/overloaded-calls-simple.rs:32:9: 32:15
        _6 = ((*_1).1: i32);             // scope 1 at ui/overloaded/overloaded-calls-simple.rs:32:18: 32:24
        _7 = CheckedMul(_5, _6);         // scope 1 at ui/overloaded/overloaded-calls-simple.rs:32:9: 32:24
        assert(!move (_7.1: bool), "attempt to compute `{} * {}`, which would overflow", move _5, move _6) -> bb1; // scope 1 at ui/overloaded/overloaded-calls-simple.rs:32:9: 32:24
    }

    bb1: {
        _4 = move (_7.0: i32);           // scope 1 at ui/overloaded/overloaded-calls-simple.rs:32:9: 32:24
        _8 = _3;                         // scope 1 at ui/overloaded/overloaded-calls-simple.rs:32:27: 32:28
        _9 = CheckedMul(_4, _8);         // scope 1 at ui/overloaded/overloaded-calls-simple.rs:32:9: 32:28
        assert(!move (_9.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, move _8) -> bb2; // scope 1 at ui/overloaded/overloaded-calls-simple.rs:32:9: 32:28
    }

    bb2: {
        _0 = move (_9.0: i32);           // scope 1 at ui/overloaded/overloaded-calls-simple.rs:32:9: 32:28
        return;                          // scope 0 at ui/overloaded/overloaded-calls-simple.rs:33:6: 33:6
    }
}

fn <impl at ui/overloaded/overloaded-calls-simple.rs:36:1: 36:26>::call_mut(_1: &mut S2, _2: (i32,)) -> i32 {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:37:36: 37:45
    debug args => _2;                    // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:37:47: 37:51
    let mut _0: i32;                     // return place in scope 0 at ui/overloaded/overloaded-calls-simple.rs:37:64: 37:67
    let mut _3: &S2;                     // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:37:70: 37:85
    let mut _4: (i32,);                  // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:37:80: 37:84

    bb0: {
        _3 = &(*_1);                     // scope 0 at ui/overloaded/overloaded-calls-simple.rs:37:70: 37:85
        _4 = _2;                         // scope 0 at ui/overloaded/overloaded-calls-simple.rs:37:80: 37:84
        _0 = <S2 as Fn<(i32,)>>::call(move _3, move _4) -> bb1; // scope 0 at ui/overloaded/overloaded-calls-simple.rs:37:70: 37:85
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-calls-simple.rs:37:75: 37:79
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a S2, (i32,)) -> <S2 as FnOnce<(i32,)>>::Output {<S2 as Fn<(i32,)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/overloaded/overloaded-calls-simple.rs:37:87: 37:87
    }
}

fn <impl at ui/overloaded/overloaded-calls-simple.rs:40:1: 40:27>::call_once(_1: S2, _2: (i32,)) -> i32 {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:42:37: 42:41
    debug args => _2;                    // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:42:43: 42:47
    let mut _0: i32;                     // return place in scope 0 at ui/overloaded/overloaded-calls-simple.rs:42:60: 42:63
    let mut _3: &S2;                     // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:42:66: 42:81
    let mut _4: (i32,);                  // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:42:76: 42:80

    bb0: {
        _3 = &_1;                        // scope 0 at ui/overloaded/overloaded-calls-simple.rs:42:66: 42:81
        _4 = _2;                         // scope 0 at ui/overloaded/overloaded-calls-simple.rs:42:76: 42:80
        _0 = <S2 as Fn<(i32,)>>::call(move _3, move _4) -> bb1; // scope 0 at ui/overloaded/overloaded-calls-simple.rs:42:66: 42:81
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-calls-simple.rs:42:71: 42:75
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a S2, (i32,)) -> <S2 as FnOnce<(i32,)>>::Output {<S2 as Fn<(i32,)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/overloaded/overloaded-calls-simple.rs:42:83: 42:83
    }
}

fn <impl at ui/overloaded/overloaded-calls-simple.rs:50:1: 50:30>::call_once(_1: S3, _2: (i32, i32)) -> i32 {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:52:37: 52:41
    let mut _0: i32;                     // return place in scope 0 at ui/overloaded/overloaded-calls-simple.rs:52:65: 52:68
    let _3: i32;                         // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:52:44: 52:45
    let _4: i32;                         // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:52:46: 52:48
    let mut _5: i32;                     // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:53:9: 53:28
    let mut _6: i32;                     // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:53:9: 53:24
    let mut _7: i32;                     // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:53:9: 53:15
    let mut _8: i32;                     // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:53:18: 53:24
    let mut _9: (i32, bool);             // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:53:9: 53:24
    let mut _10: i32;                    // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:53:27: 53:28
    let mut _11: (i32, bool);            // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:53:9: 53:28
    let mut _12: i32;                    // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:53:31: 53:33
    let mut _13: (i32, bool);            // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:53:9: 53:33
    scope 1 {
        debug z => _3;                   // in scope 1 at ui/overloaded/overloaded-calls-simple.rs:52:44: 52:45
        debug zz => _4;                  // in scope 1 at ui/overloaded/overloaded-calls-simple.rs:52:46: 52:48
    }

    bb0: {
        _3 = (_2.0: i32);                // scope 0 at ui/overloaded/overloaded-calls-simple.rs:52:44: 52:45
        _4 = (_2.1: i32);                // scope 0 at ui/overloaded/overloaded-calls-simple.rs:52:46: 52:48
        _7 = (_1.0: i32);                // scope 1 at ui/overloaded/overloaded-calls-simple.rs:53:9: 53:15
        _8 = (_1.1: i32);                // scope 1 at ui/overloaded/overloaded-calls-simple.rs:53:18: 53:24
        _9 = CheckedMul(_7, _8);         // scope 1 at ui/overloaded/overloaded-calls-simple.rs:53:9: 53:24
        assert(!move (_9.1: bool), "attempt to compute `{} * {}`, which would overflow", move _7, move _8) -> bb1; // scope 1 at ui/overloaded/overloaded-calls-simple.rs:53:9: 53:24
    }

    bb1: {
        _6 = move (_9.0: i32);           // scope 1 at ui/overloaded/overloaded-calls-simple.rs:53:9: 53:24
        _10 = _3;                        // scope 1 at ui/overloaded/overloaded-calls-simple.rs:53:27: 53:28
        _11 = CheckedMul(_6, _10);       // scope 1 at ui/overloaded/overloaded-calls-simple.rs:53:9: 53:28
        assert(!move (_11.1: bool), "attempt to compute `{} * {}`, which would overflow", move _6, move _10) -> bb2; // scope 1 at ui/overloaded/overloaded-calls-simple.rs:53:9: 53:28
    }

    bb2: {
        _5 = move (_11.0: i32);          // scope 1 at ui/overloaded/overloaded-calls-simple.rs:53:9: 53:28
        _12 = _4;                        // scope 1 at ui/overloaded/overloaded-calls-simple.rs:53:31: 53:33
        _13 = CheckedMul(_5, _12);       // scope 1 at ui/overloaded/overloaded-calls-simple.rs:53:9: 53:33
        assert(!move (_13.1: bool), "attempt to compute `{} * {}`, which would overflow", move _5, move _12) -> bb3; // scope 1 at ui/overloaded/overloaded-calls-simple.rs:53:9: 53:33
    }

    bb3: {
        _0 = move (_13.0: i32);          // scope 1 at ui/overloaded/overloaded-calls-simple.rs:53:9: 53:33
        return;                          // scope 0 at ui/overloaded/overloaded-calls-simple.rs:54:6: 54:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/overloaded/overloaded-calls-simple.rs:57:11: 57:11
    let mut _1: S1;                      // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:58:9: 58:14
    let mut _3: &mut S1;                 // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:62:15: 62:16
    let mut _4: (i32,);                  // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:62:15: 62:19
    let mut _5: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _7: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: &S2;                    // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:69:15: 69:27
    let mut _25: (i32,);                 // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:69:22: 69:26
    let mut _26: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _27: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _28: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _33: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _34: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _36: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _37: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _38: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _39: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _40: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _41: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _45: S3;                     // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:76:15: 76:16
    let mut _46: (i32, i32);             // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:76:15: 76:22
    let mut _47: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _48: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _49: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _52: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _53: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _54: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _55: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _57: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _58: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _59: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _60: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _61: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _62: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/overloaded/overloaded-calls-simple.rs:58:9: 58:14
        let _2: i32;                     // in scope 1 at ui/overloaded/overloaded-calls-simple.rs:62:9: 62:12
        scope 2 {
            debug ans => _2;             // in scope 2 at ui/overloaded/overloaded-calls-simple.rs:62:9: 62:12
            let _8: &i32;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _9: &i32;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _22: S2;                 // in scope 2 at ui/overloaded/overloaded-calls-simple.rs:65:9: 65:10
            let mut _66: &i32;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _8;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _9;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _14: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _14;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug s => _22;          // in scope 5 at ui/overloaded/overloaded-calls-simple.rs:65:9: 65:10
                let _23: i32;            // in scope 5 at ui/overloaded/overloaded-calls-simple.rs:69:9: 69:12
                scope 6 {
                    debug ans => _23;    // in scope 6 at ui/overloaded/overloaded-calls-simple.rs:69:9: 69:12
                    let _29: &i32;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _30: &i32;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _43: S3;         // in scope 6 at ui/overloaded/overloaded-calls-simple.rs:72:9: 72:10
                    let mut _65: &i32;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 7 {
                        debug left_val => _29; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _30; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _35: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 8 {
                            debug kind => _35; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 9 {
                        debug s => _43;  // in scope 9 at ui/overloaded/overloaded-calls-simple.rs:72:9: 72:10
                        let _44: i32;    // in scope 9 at ui/overloaded/overloaded-calls-simple.rs:76:9: 76:12
                        scope 10 {
                            debug ans => _44; // in scope 10 at ui/overloaded/overloaded-calls-simple.rs:76:9: 76:12
                            let _50: &i32; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            let _51: &i32; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let mut _64: &i32; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                            scope 11 {
                                debug left_val => _50; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                debug right_val => _51; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _56: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                scope 12 {
                                    debug kind => _56; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = S1 { x: const 3_i32, y: const 3_i32 }; // scope 0 at ui/overloaded/overloaded-calls-simple.rs:58:17: 61:6
        _3 = &mut _1;                    // scope 1 at ui/overloaded/overloaded-calls-simple.rs:62:15: 62:16
        _4 = const (3_i32,);             // scope 1 at ui/overloaded/overloaded-calls-simple.rs:62:15: 62:19
        _2 = <S1 as FnMut<(i32,)>>::call_mut(move _3, move _4) -> bb1; // scope 1 at ui/overloaded/overloaded-calls-simple.rs:62:15: 62:19
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-calls-simple.rs:62:15: 62:16
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut S1, (i32,)) -> <S1 as FnOnce<(i32,)>>::Output {<S1 as FnMut<(i32,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_2;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _66 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[2])) }
        _7 = _66;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _7);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_5.0: &i32);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_5.1: &i32);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = const 27_i32;              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _14 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<i32, i32>(move _16, move _17, move _19, move _21); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb3: {
        _22 = S2 { x: const 3_i32, y: const 3_i32 }; // scope 2 at ui/overloaded/overloaded-calls-simple.rs:65:13: 68:6
        _24 = &_22;                      // scope 5 at ui/overloaded/overloaded-calls-simple.rs:69:15: 69:27
        _25 = const (3_i32,);            // scope 5 at ui/overloaded/overloaded-calls-simple.rs:69:22: 69:26
        _23 = <S2 as Fn<(i32,)>>::call(move _24, move _25) -> bb4; // scope 5 at ui/overloaded/overloaded-calls-simple.rs:69:15: 69:27
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-calls-simple.rs:69:17: 69:21
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a S2, (i32,)) -> <S2 as FnOnce<(i32,)>>::Output {<S2 as Fn<(i32,)>>::call}, val: Value(<ZST>) }
    }

    bb4: {
        _27 = &_23;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _65 = const _;                   // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _28 = _65;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _26 = (move _27, move _28);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_26.0: &i32);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_26.1: &i32);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _33 = (*_29);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _34 = const 27_i32;              // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _32 = Eq(move _33, move _34);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _31 = Not(move _32);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _31) -> [0: bb6, otherwise: bb5]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _35 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = _29;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _39;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _30;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = _41;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _36 = core::panicking::assert_failed::<i32, i32>(move _37, move _38, move _40, move _42); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb6: {
        _43 = S3 { x: const 3_i32, y: const 3_i32 }; // scope 6 at ui/overloaded/overloaded-calls-simple.rs:72:13: 75:6
        _45 = move _43;                  // scope 9 at ui/overloaded/overloaded-calls-simple.rs:76:15: 76:16
        _46 = const (3_i32, 1_i32);      // scope 9 at ui/overloaded/overloaded-calls-simple.rs:76:15: 76:22
        _44 = <S3 as FnOnce<(i32, i32)>>::call_once(move _45, move _46) -> bb7; // scope 9 at ui/overloaded/overloaded-calls-simple.rs:76:15: 76:22
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-calls-simple.rs:76:15: 76:16
                                         // + literal: Const { ty: extern "rust-call" fn(S3, (i32, i32)) -> <S3 as FnOnce<(i32, i32)>>::Output {<S3 as FnOnce<(i32, i32)>>::call_once}, val: Value(<ZST>) }
    }

    bb7: {
        _48 = &_44;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _64 = const _;                   // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _49 = _64;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _47 = (move _48, move _49);      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _50 = (_47.0: &i32);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _51 = (_47.1: &i32);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _54 = (*_50);                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _55 = const 27_i32;              // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _53 = Eq(move _54, move _55);    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _52 = Not(move _53);             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _52) -> [0: bb9, otherwise: bb8]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _56 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _60 = _50;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _59 = _60;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _62 = _51;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = _62;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _63 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _57 = core::panicking::assert_failed::<i32, i32>(move _58, move _59, move _61, move _63); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/overloaded/overloaded-calls-simple.rs:78:2: 78:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:77:21: 77:23

    bb0: {
        _1 = const 27_i32;               // scope 0 at ui/overloaded/overloaded-calls-simple.rs:77:21: 77:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:70:21: 70:23

    bb0: {
        _1 = const 27_i32;               // scope 0 at ui/overloaded/overloaded-calls-simple.rs:70:21: 70:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/overloaded/overloaded-calls-simple.rs:64:21: 64:23

    bb0: {
        _1 = const 27_i32;               // scope 0 at ui/overloaded/overloaded-calls-simple.rs:64:21: 64:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
