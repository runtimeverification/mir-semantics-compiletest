// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-deref.rs:6:10: 6:19>::eq(_1: &Point, _2: &Point) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: bool;
    let mut _7: isize;
    let mut _8: isize;

    bb0: {
        _4 = ((*_1).0: isize);
        _5 = ((*_2).0: isize);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = ((*_1).1: isize);
        _8 = ((*_2).1: isize);
        _6 = Eq(move _7, move _8);
        _0 = move _6;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/overloaded/overloaded-deref.rs:6:21: 6:26>::fmt(_1: &Point, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &isize;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&isize;
    let _10: &isize;

    bb0: {
        _3 = const "Point";
        _4 = const "x";
        _6 = &((*_1).0: isize);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "y";
        _10 = &((*_1).1: isize);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: &i32;
    let mut _4: &std::rc::Rc<i32>;
    let _5: std::rc::Rc<i32>;
    let _6: &i32;
    let _7: &i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&i32, &i32);
    let mut _16: &i32;
    let _17: &std::boxed::Box<std::boxed::Box<i32>>;
    let mut _18: &std::rc::Rc<std::boxed::Box<std::boxed::Box<i32>>>;
    let _19: std::rc::Rc<std::boxed::Box<std::boxed::Box<i32>>>;
    let mut _20: std::boxed::Box<std::boxed::Box<i32>>;
    let mut _21: std::boxed::Box<i32>;
    let _22: &i32;
    let _23: &i32;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: i32;
    let mut _27: i32;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&Point, &Point);
    let mut _32: &Point;
    let _33: &Point;
    let mut _34: &std::rc::Rc<Point>;
    let _35: std::rc::Rc<Point>;
    let mut _36: Point;
    let _37: &Point;
    let _38: &Point;
    let mut _39: bool;
    let mut _40: bool;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let _44: std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _45: std::cell::RefCell<i32>;
    let mut _47: &i32;
    let mut _48: &std::cell::Ref<'_, i32>;
    let _49: std::cell::Ref<'_, i32>;
    let mut _50: &std::cell::RefCell<i32>;
    let _51: &std::cell::RefCell<i32>;
    let mut _52: &std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _53: &mut i32;
    let mut _54: &mut std::cell::RefMut<'_, i32>;
    let mut _55: std::cell::RefMut<'_, i32>;
    let mut _56: &std::cell::RefCell<i32>;
    let _57: &std::cell::RefCell<i32>;
    let mut _58: &std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _59: (&(i32, i32), &(i32, i32));
    let mut _60: &(i32, i32);
    let _61: (i32, i32);
    let mut _62: i32;
    let mut _63: &i32;
    let mut _64: &std::cell::Ref<'_, i32>;
    let _65: std::cell::Ref<'_, i32>;
    let mut _66: &std::cell::RefCell<i32>;
    let _67: &std::cell::RefCell<i32>;
    let mut _68: &std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _71: bool;
    let mut _72: bool;
    let _74: !;
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: std::string::String;
    let _78: &str;
    let mut _79: (&std::string::String, &std::string::String);
    let mut _80: &std::string::String;
    let _81: &std::string::String;
    let mut _82: &std::rc::Rc<std::string::String>;
    let mut _83: &std::string::String;
    let _84: std::string::String;
    let _85: &str;
    let mut _88: bool;
    let mut _89: bool;
    let _91: !;
    let mut _92: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _93: (&std::string::String, &&str);
    let mut _94: &std::string::String;
    let _95: &std::string::String;
    let mut _96: &std::rc::Rc<std::string::String>;
    let mut _99: bool;
    let mut _100: bool;
    let _102: !;
    let mut _103: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _105: std::cell::RefCell<std::string::String>;
    let mut _106: std::string::String;
    let _107: ();
    let mut _108: &mut std::string::String;
    let mut _109: &mut std::string::String;
    let mut _110: &mut std::cell::RefMut<'_, std::string::String>;
    let mut _111: std::cell::RefMut<'_, std::string::String>;
    let mut _112: &std::cell::RefCell<std::string::String>;
    let _113: &std::cell::RefCell<std::string::String>;
    let mut _114: &std::rc::Rc<std::cell::RefCell<std::string::String>>;
    let _115: &str;
    let mut _116: (&std::string::String, &&str);
    let mut _117: &std::string::String;
    let _118: &std::string::String;
    let mut _119: &std::cell::Ref<'_, std::string::String>;
    let _120: std::cell::Ref<'_, std::string::String>;
    let mut _121: &std::cell::RefCell<std::string::String>;
    let _122: &std::cell::RefCell<std::string::String>;
    let mut _123: &std::rc::Rc<std::cell::RefCell<std::string::String>>;
    let mut _126: bool;
    let mut _127: bool;
    let _129: !;
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _131: (&std::string::String, &&str);
    let mut _132: &std::string::String;
    let _133: &std::string::String;
    let mut _134: &std::cell::RefMut<'_, std::string::String>;
    let _135: std::cell::RefMut<'_, std::string::String>;
    let mut _136: &std::cell::RefCell<std::string::String>;
    let _137: &std::cell::RefCell<std::string::String>;
    let mut _138: &std::rc::Rc<std::cell::RefCell<std::string::String>>;
    let mut _141: bool;
    let mut _142: bool;
    let _144: !;
    let mut _145: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _147: std::cell::RefCell<Point>;
    let mut _148: Point;
    let mut _149: &mut Point;
    let mut _150: &mut std::cell::RefMut<'_, Point>;
    let mut _151: std::cell::RefMut<'_, Point>;
    let mut _152: &std::cell::RefCell<Point>;
    let _153: &std::cell::RefCell<Point>;
    let mut _154: &std::rc::Rc<std::cell::RefCell<Point>>;
    let mut _155: &mut Point;
    let mut _156: &mut std::cell::RefMut<'_, Point>;
    let mut _157: std::cell::RefMut<'_, Point>;
    let mut _158: &std::cell::RefCell<Point>;
    let _159: &std::cell::RefCell<Point>;
    let mut _160: &std::rc::Rc<std::cell::RefCell<Point>>;
    let mut _161: (&Point, &Point);
    let mut _162: &Point;
    let _163: &Point;
    let mut _164: &std::cell::Ref<'_, Point>;
    let _165: std::cell::Ref<'_, Point>;
    let mut _166: &std::cell::RefCell<Point>;
    let _167: &std::cell::RefCell<Point>;
    let mut _168: &std::rc::Rc<std::cell::RefCell<Point>>;
    let mut _171: bool;
    let mut _172: bool;
    let _174: !;
    let mut _175: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _177: std::cell::RefCell<std::vec::Vec<i32>>;
    let mut _178: std::vec::Vec<i32>;
    let mut _179: std::boxed::Box<[i32]>;
    let mut _180: usize;
    let mut _181: usize;
    let mut _182: *mut u8;
    let mut _183: std::boxed::Box<[i32; 3]>;
    let mut _184: &mut i32;
    let mut _185: &mut std::vec::Vec<i32>;
    let mut _186: &mut std::vec::Vec<i32>;
    let mut _187: &mut std::cell::RefMut<'_, std::vec::Vec<i32>>;
    let mut _188: std::cell::RefMut<'_, std::vec::Vec<i32>>;
    let mut _189: &std::cell::RefCell<std::vec::Vec<i32>>;
    let _190: &std::cell::RefCell<std::vec::Vec<i32>>;
    let mut _191: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<i32>>>;
    let mut _192: &mut i32;
    let mut _193: &mut std::vec::Vec<i32>;
    let mut _194: &mut std::vec::Vec<i32>;
    let mut _195: &mut std::cell::RefMut<'_, std::vec::Vec<i32>>;
    let mut _196: std::cell::RefMut<'_, std::vec::Vec<i32>>;
    let mut _197: &std::cell::RefCell<std::vec::Vec<i32>>;
    let _198: &std::cell::RefCell<std::vec::Vec<i32>>;
    let mut _199: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<i32>>>;
    let mut _200: (&(i32, i32, i32), &(i32, i32, i32));
    let mut _201: &(i32, i32, i32);
    let _202: (i32, i32, i32);
    let mut _203: i32;
    let mut _204: &i32;
    let mut _205: &std::vec::Vec<i32>;
    let _206: &std::vec::Vec<i32>;
    let mut _207: &std::cell::Ref<'_, std::vec::Vec<i32>>;
    let _208: std::cell::Ref<'_, std::vec::Vec<i32>>;
    let mut _209: &std::cell::RefCell<std::vec::Vec<i32>>;
    let _210: &std::cell::RefCell<std::vec::Vec<i32>>;
    let mut _211: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<i32>>>;
    let mut _212: i32;
    let mut _213: &i32;
    let mut _214: &std::vec::Vec<i32>;
    let _215: &std::vec::Vec<i32>;
    let mut _216: &std::cell::Ref<'_, std::vec::Vec<i32>>;
    let _217: std::cell::Ref<'_, std::vec::Vec<i32>>;
    let mut _218: &std::cell::RefCell<std::vec::Vec<i32>>;
    let _219: &std::cell::RefCell<std::vec::Vec<i32>>;
    let mut _220: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<i32>>>;
    let mut _221: i32;
    let mut _222: &i32;
    let mut _223: &std::vec::Vec<i32>;
    let _224: &std::vec::Vec<i32>;
    let mut _225: &std::cell::Ref<'_, std::vec::Vec<i32>>;
    let _226: std::cell::Ref<'_, std::vec::Vec<i32>>;
    let mut _227: &std::cell::RefCell<std::vec::Vec<i32>>;
    let _228: &std::cell::RefCell<std::vec::Vec<i32>>;
    let mut _229: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<i32>>>;
    let mut _232: bool;
    let mut _233: bool;
    let _235: !;
    let mut _236: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _243: &Point;
    let mut _244: &i32;
    let mut _245: &i32;
    let mut _246: std::boxed::Box<std::boxed::Box<i32>>;
    let mut _247: std::boxed::Box<i32>;
    let mut _248: *const std::boxed::Box<i32>;
    let mut _249: *const i32;
    let mut _250: *const [i32; 3];
    let mut _257: *const ();
    let mut _258: usize;
    let mut _259: usize;
    let mut _260: usize;
    let mut _261: usize;
    let mut _262: bool;
    let mut _263: *const ();
    let mut _264: usize;
    let mut _265: usize;
    let mut _266: usize;
    let mut _267: usize;
    let mut _268: bool;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 4 {
            debug kind => _28;
        }
    }
    scope 5 {
        debug left_val => _37;
        debug right_val => _38;
        let _41: core::panicking::AssertKind;
        scope 6 {
            debug kind => _41;
        }
    }
    scope 7 {
        debug i => _44;
        let _46: i32;
        scope 8 {
            debug i_value => _46;
            let _69: &(i32, i32);
            let _70: &(i32, i32);
            let _76: std::rc::Rc<std::string::String>;
            let mut _242: &(i32, i32);
            scope 9 {
                debug left_val => _69;
                debug right_val => _70;
                let _73: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _73;
                }
            }
            scope 11 {
                debug s => _76;
                let _86: &std::string::String;
                let _87: &std::string::String;
                let _97: &std::string::String;
                let _98: &&str;
                let _104: std::rc::Rc<std::cell::RefCell<std::string::String>>;
                let mut _241: &&str;
                scope 12 {
                    debug left_val => _86;
                    debug right_val => _87;
                    let _90: core::panicking::AssertKind;
                    scope 13 {
                        debug kind => _90;
                    }
                }
                scope 14 {
                    debug left_val => _97;
                    debug right_val => _98;
                    let _101: core::panicking::AssertKind;
                    scope 15 {
                        debug kind => _101;
                    }
                }
                scope 16 {
                    debug mut_s => _104;
                    let _124: &std::string::String;
                    let _125: &&str;
                    let _139: &std::string::String;
                    let _140: &&str;
                    let _146: std::rc::Rc<std::cell::RefCell<Point>>;
                    let mut _239: &&str;
                    let mut _240: &&str;
                    scope 17 {
                        debug left_val => _124;
                        debug right_val => _125;
                        let _128: core::panicking::AssertKind;
                        scope 18 {
                            debug kind => _128;
                        }
                    }
                    scope 19 {
                        debug left_val => _139;
                        debug right_val => _140;
                        let _143: core::panicking::AssertKind;
                        scope 20 {
                            debug kind => _143;
                        }
                    }
                    scope 21 {
                        debug p => _146;
                        let _169: &Point;
                        let _170: &Point;
                        let _176: std::rc::Rc<std::cell::RefCell<std::vec::Vec<i32>>>;
                        let mut _238: &Point;
                        let mut _251: *const ();
                        let mut _252: usize;
                        let mut _253: usize;
                        let mut _254: usize;
                        let mut _255: usize;
                        let mut _256: bool;
                        scope 22 {
                            debug left_val => _169;
                            debug right_val => _170;
                            let _173: core::panicking::AssertKind;
                            scope 23 {
                                debug kind => _173;
                            }
                        }
                        scope 24 {
                            debug v => _176;
                            let _230: &(i32, i32, i32);
                            let _231: &(i32, i32, i32);
                            let mut _237: &(i32, i32, i32);
                            scope 26 {
                                debug left_val => _230;
                                debug right_val => _231;
                                let _234: core::panicking::AssertKind;
                                scope 27 {
                                    debug kind => _234;
                                }
                            }
                        }
                        scope 25 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _5 = Rc::<i32>::new(const 5_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_5;
        _3 = <Rc<i32> as Deref>::deref(move _4) -> [return: bb2, unwind: bb146];
    }

    bb2: {
        _2 = _3;
        _245 = const _;
        _1 = (move _2, _245);
        _6 = (_1.0: &i32);
        _7 = (_1.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14) -> bb146;
    }

    bb4: {
        drop(_5) -> [return: bb5, unwind continue];
    }

    bb5: {
        _21 = Box::<i32>::new(const 5_i32) -> [return: bb6, unwind continue];
    }

    bb6: {
        _20 = Box::<Box<i32>>::new(move _21) -> [return: bb7, unwind continue];
    }

    bb7: {
        _19 = Rc::<Box<Box<i32>>>::new(move _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        _18 = &_19;
        _17 = <Rc<Box<Box<i32>>> as Deref>::deref(move _18) -> [return: bb9, unwind: bb145];
    }

    bb9: {
        _246 = deref_copy (*_17);
        _248 = (((_246.0: std::ptr::Unique<std::boxed::Box<i32>>).0: std::ptr::NonNull<std::boxed::Box<i32>>).0: *const std::boxed::Box<i32>);
        _263 = _248 as *const () (PtrToPtr);
        _264 = _263 as usize (Transmute);
        _265 = AlignOf(std::boxed::Box<i32>);
        _266 = Sub(_265, const 1_usize);
        _267 = BitAnd(_264, _266);
        _268 = Eq(_267, const 0_usize);
        assert(_268, "misaligned pointer dereference: address must be a multiple of {} but is {}", _265, _264) -> [success: bb150, unwind unreachable];
    }

    bb10: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<i32, i32>(move _28, _22, _23, move _30) -> bb145;
    }

    bb11: {
        drop(_19) -> [return: bb12, unwind continue];
    }

    bb12: {
        _36 = Point { x: const 2_isize, y: const 4_isize };
        _35 = Rc::<Point>::new(move _36) -> [return: bb13, unwind continue];
    }

    bb13: {
        _34 = &_35;
        _33 = <Rc<Point> as Deref>::deref(move _34) -> [return: bb14, unwind: bb144];
    }

    bb14: {
        _32 = _33;
        _243 = const _;
        _31 = (move _32, _243);
        _37 = (_31.0: &Point);
        _38 = (_31.1: &Point);
        _40 = <Point as PartialEq>::eq(_37, _38) -> [return: bb15, unwind: bb144];
    }

    bb15: {
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<Point, Point>(move _41, _37, _38, move _43) -> bb144;
    }

    bb17: {
        drop(_35) -> [return: bb18, unwind continue];
    }

    bb18: {
        _45 = RefCell::<i32>::new(const 2_i32) -> [return: bb19, unwind continue];
    }

    bb19: {
        _44 = Rc::<RefCell<i32>>::new(move _45) -> [return: bb20, unwind continue];
    }

    bb20: {
        _52 = &_44;
        _51 = <Rc<RefCell<i32>> as Deref>::deref(move _52) -> [return: bb21, unwind: bb143];
    }

    bb21: {
        _50 = _51;
        _49 = RefCell::<i32>::borrow(move _50) -> [return: bb22, unwind: bb143];
    }

    bb22: {
        _48 = &_49;
        _47 = <Ref<'_, i32> as Deref>::deref(move _48) -> [return: bb23, unwind: bb142];
    }

    bb23: {
        _46 = (*_47);
        drop(_49) -> [return: bb24, unwind: bb143];
    }

    bb24: {
        _58 = &_44;
        _57 = <Rc<RefCell<i32>> as Deref>::deref(move _58) -> [return: bb25, unwind: bb143];
    }

    bb25: {
        _56 = _57;
        _55 = RefCell::<i32>::borrow_mut(move _56) -> [return: bb26, unwind: bb143];
    }

    bb26: {
        _54 = &mut _55;
        _53 = <RefMut<'_, i32> as DerefMut>::deref_mut(move _54) -> [return: bb27, unwind: bb141];
    }

    bb27: {
        (*_53) = const 5_i32;
        drop(_55) -> [return: bb28, unwind: bb143];
    }

    bb28: {
        _68 = &_44;
        _67 = <Rc<RefCell<i32>> as Deref>::deref(move _68) -> [return: bb29, unwind: bb143];
    }

    bb29: {
        _66 = _67;
        _65 = RefCell::<i32>::borrow(move _66) -> [return: bb30, unwind: bb143];
    }

    bb30: {
        _64 = &_65;
        _63 = <Ref<'_, i32> as Deref>::deref(move _64) -> [return: bb31, unwind: bb140];
    }

    bb31: {
        _62 = (*_63);
        _61 = (_46, move _62);
        _60 = &_61;
        _242 = const _;
        _59 = (move _60, _242);
        _69 = (_59.0: &(i32, i32));
        _70 = (_59.1: &(i32, i32));
        _72 = <(i32, i32) as PartialEq>::eq(_69, _70) -> [return: bb32, unwind: bb140];
    }

    bb32: {
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _73 = core::panicking::AssertKind::Eq;
        _75 = Option::<Arguments<'_>>::None;
        _74 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _73, _69, _70, move _75) -> bb140;
    }

    bb34: {
        drop(_65) -> [return: bb35, unwind: bb143];
    }

    bb35: {
        _78 = const "foo";
        _77 = <str as ToString>::to_string(_78) -> [return: bb36, unwind: bb143];
    }

    bb36: {
        _76 = Rc::<String>::new(move _77) -> [return: bb37, unwind: bb143];
    }

    bb37: {
        _82 = &_76;
        _81 = <Rc<String> as Deref>::deref(move _82) -> [return: bb38, unwind: bb139];
    }

    bb38: {
        _80 = _81;
        _85 = const "foo";
        _84 = <str as ToString>::to_string(_85) -> [return: bb39, unwind: bb139];
    }

    bb39: {
        _83 = &_84;
        _79 = (move _80, move _83);
        _86 = (_79.0: &std::string::String);
        _87 = (_79.1: &std::string::String);
        _89 = <String as PartialEq>::eq(_86, _87) -> [return: bb40, unwind: bb138];
    }

    bb40: {
        _88 = Not(move _89);
        switchInt(move _88) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _90 = core::panicking::AssertKind::Eq;
        _92 = Option::<Arguments<'_>>::None;
        _91 = core::panicking::assert_failed::<String, String>(move _90, _86, _87, move _92) -> bb138;
    }

    bb42: {
        drop(_84) -> [return: bb43, unwind: bb139];
    }

    bb43: {
        _96 = &_76;
        _95 = <Rc<String> as Deref>::deref(move _96) -> [return: bb44, unwind: bb139];
    }

    bb44: {
        _94 = _95;
        _241 = const _;
        _93 = (move _94, _241);
        _97 = (_93.0: &std::string::String);
        _98 = (_93.1: &&str);
        _100 = <String as PartialEq<&str>>::eq(_97, _98) -> [return: bb45, unwind: bb139];
    }

    bb45: {
        _99 = Not(move _100);
        switchInt(move _99) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _101 = core::panicking::AssertKind::Eq;
        _103 = Option::<Arguments<'_>>::None;
        _102 = core::panicking::assert_failed::<String, &str>(move _101, _97, _98, move _103) -> bb139;
    }

    bb47: {
        _106 = <String as From<&str>>::from(const "foo") -> [return: bb48, unwind: bb139];
    }

    bb48: {
        _105 = RefCell::<String>::new(move _106) -> [return: bb49, unwind: bb139];
    }

    bb49: {
        _104 = Rc::<RefCell<String>>::new(move _105) -> [return: bb50, unwind: bb139];
    }

    bb50: {
        _114 = &_104;
        _113 = <Rc<RefCell<String>> as Deref>::deref(move _114) -> [return: bb51, unwind: bb137];
    }

    bb51: {
        _112 = _113;
        _111 = RefCell::<String>::borrow_mut(move _112) -> [return: bb52, unwind: bb137];
    }

    bb52: {
        _110 = &mut _111;
        _109 = <RefMut<'_, String> as DerefMut>::deref_mut(move _110) -> [return: bb53, unwind: bb136];
    }

    bb53: {
        _108 = _109;
        _115 = const "bar";
        _107 = String::push_str(move _108, _115) -> [return: bb54, unwind: bb136];
    }

    bb54: {
        drop(_111) -> [return: bb55, unwind: bb137];
    }

    bb55: {
        _123 = &_104;
        _122 = <Rc<RefCell<String>> as Deref>::deref(move _123) -> [return: bb56, unwind: bb137];
    }

    bb56: {
        _121 = _122;
        _120 = RefCell::<String>::borrow(move _121) -> [return: bb57, unwind: bb137];
    }

    bb57: {
        _119 = &_120;
        _118 = <Ref<'_, String> as Deref>::deref(move _119) -> [return: bb58, unwind: bb135];
    }

    bb58: {
        _117 = _118;
        _240 = const _;
        _116 = (move _117, _240);
        _124 = (_116.0: &std::string::String);
        _125 = (_116.1: &&str);
        _127 = <String as PartialEq<&str>>::eq(_124, _125) -> [return: bb59, unwind: bb135];
    }

    bb59: {
        _126 = Not(move _127);
        switchInt(move _126) -> [0: bb61, otherwise: bb60];
    }

    bb60: {
        _128 = core::panicking::AssertKind::Eq;
        _130 = Option::<Arguments<'_>>::None;
        _129 = core::panicking::assert_failed::<String, &str>(move _128, _124, _125, move _130) -> bb135;
    }

    bb61: {
        drop(_120) -> [return: bb62, unwind: bb137];
    }

    bb62: {
        _138 = &_104;
        _137 = <Rc<RefCell<String>> as Deref>::deref(move _138) -> [return: bb63, unwind: bb137];
    }

    bb63: {
        _136 = _137;
        _135 = RefCell::<String>::borrow_mut(move _136) -> [return: bb64, unwind: bb137];
    }

    bb64: {
        _134 = &_135;
        _133 = <RefMut<'_, String> as Deref>::deref(move _134) -> [return: bb65, unwind: bb134];
    }

    bb65: {
        _132 = _133;
        _239 = const _;
        _131 = (move _132, _239);
        _139 = (_131.0: &std::string::String);
        _140 = (_131.1: &&str);
        _142 = <String as PartialEq<&str>>::eq(_139, _140) -> [return: bb66, unwind: bb134];
    }

    bb66: {
        _141 = Not(move _142);
        switchInt(move _141) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        _143 = core::panicking::AssertKind::Eq;
        _145 = Option::<Arguments<'_>>::None;
        _144 = core::panicking::assert_failed::<String, &str>(move _143, _139, _140, move _145) -> bb134;
    }

    bb68: {
        drop(_135) -> [return: bb69, unwind: bb137];
    }

    bb69: {
        _148 = Point { x: const 1_isize, y: const 2_isize };
        _147 = RefCell::<Point>::new(move _148) -> [return: bb70, unwind: bb137];
    }

    bb70: {
        _146 = Rc::<RefCell<Point>>::new(move _147) -> [return: bb71, unwind: bb137];
    }

    bb71: {
        _154 = &_146;
        _153 = <Rc<RefCell<Point>> as Deref>::deref(move _154) -> [return: bb72, unwind: bb133];
    }

    bb72: {
        _152 = _153;
        _151 = RefCell::<Point>::borrow_mut(move _152) -> [return: bb73, unwind: bb133];
    }

    bb73: {
        _150 = &mut _151;
        _149 = <RefMut<'_, Point> as DerefMut>::deref_mut(move _150) -> [return: bb74, unwind: bb132];
    }

    bb74: {
        ((*_149).0: isize) = const 3_isize;
        drop(_151) -> [return: bb75, unwind: bb133];
    }

    bb75: {
        _160 = &_146;
        _159 = <Rc<RefCell<Point>> as Deref>::deref(move _160) -> [return: bb76, unwind: bb133];
    }

    bb76: {
        _158 = _159;
        _157 = RefCell::<Point>::borrow_mut(move _158) -> [return: bb77, unwind: bb133];
    }

    bb77: {
        _156 = &mut _157;
        _155 = <RefMut<'_, Point> as DerefMut>::deref_mut(move _156) -> [return: bb78, unwind: bb131];
    }

    bb78: {
        ((*_155).1: isize) = Add(((*_155).1: isize), const 3_isize);
        drop(_157) -> [return: bb79, unwind: bb133];
    }

    bb79: {
        _168 = &_146;
        _167 = <Rc<RefCell<Point>> as Deref>::deref(move _168) -> [return: bb80, unwind: bb133];
    }

    bb80: {
        _166 = _167;
        _165 = RefCell::<Point>::borrow(move _166) -> [return: bb81, unwind: bb133];
    }

    bb81: {
        _164 = &_165;
        _163 = <Ref<'_, Point> as Deref>::deref(move _164) -> [return: bb82, unwind: bb130];
    }

    bb82: {
        _162 = _163;
        _238 = const _;
        _161 = (move _162, _238);
        _169 = (_161.0: &Point);
        _170 = (_161.1: &Point);
        _172 = <Point as PartialEq>::eq(_169, _170) -> [return: bb83, unwind: bb130];
    }

    bb83: {
        _171 = Not(move _172);
        switchInt(move _171) -> [0: bb85, otherwise: bb84];
    }

    bb84: {
        _173 = core::panicking::AssertKind::Eq;
        _175 = Option::<Arguments<'_>>::None;
        _174 = core::panicking::assert_failed::<Point, Point>(move _173, _169, _170, move _175) -> bb130;
    }

    bb85: {
        drop(_165) -> [return: bb86, unwind: bb133];
    }

    bb86: {
        _180 = SizeOf([i32; 3]);
        _181 = AlignOf([i32; 3]);
        _182 = alloc::alloc::exchange_malloc(move _180, move _181) -> [return: bb87, unwind: bb133];
    }

    bb87: {
        _183 = ShallowInitBox(move _182, [i32; 3]);
        _250 = (((_183.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _251 = _250 as *const () (PtrToPtr);
        _252 = _251 as usize (Transmute);
        _253 = AlignOf(i32);
        _254 = Sub(_253, const 1_usize);
        _255 = BitAnd(_252, _254);
        _256 = Eq(_255, const 0_usize);
        assert(_256, "misaligned pointer dereference: address must be a multiple of {} but is {}", _253, _252) -> [success: bb148, unwind unreachable];
    }

    bb88: {
        _177 = RefCell::<Vec<i32>>::new(move _178) -> [return: bb89, unwind: bb133];
    }

    bb89: {
        _176 = Rc::<RefCell<Vec<i32>>>::new(move _177) -> [return: bb90, unwind: bb133];
    }

    bb90: {
        _191 = &_176;
        _190 = <Rc<RefCell<Vec<i32>>> as Deref>::deref(move _191) -> [return: bb91, unwind: bb129];
    }

    bb91: {
        _189 = _190;
        _188 = RefCell::<Vec<i32>>::borrow_mut(move _189) -> [return: bb92, unwind: bb129];
    }

    bb92: {
        _187 = &mut _188;
        _186 = <RefMut<'_, Vec<i32>> as DerefMut>::deref_mut(move _187) -> [return: bb93, unwind: bb128];
    }

    bb93: {
        _185 = _186;
        _184 = <Vec<i32> as IndexMut<usize>>::index_mut(move _185, const 0_usize) -> [return: bb94, unwind: bb128];
    }

    bb94: {
        (*_184) = const 3_i32;
        drop(_188) -> [return: bb95, unwind: bb129];
    }

    bb95: {
        _199 = &_176;
        _198 = <Rc<RefCell<Vec<i32>>> as Deref>::deref(move _199) -> [return: bb96, unwind: bb129];
    }

    bb96: {
        _197 = _198;
        _196 = RefCell::<Vec<i32>>::borrow_mut(move _197) -> [return: bb97, unwind: bb129];
    }

    bb97: {
        _195 = &mut _196;
        _194 = <RefMut<'_, Vec<i32>> as DerefMut>::deref_mut(move _195) -> [return: bb98, unwind: bb127];
    }

    bb98: {
        _193 = _194;
        _192 = <Vec<i32> as IndexMut<usize>>::index_mut(move _193, const 1_usize) -> [return: bb99, unwind: bb127];
    }

    bb99: {
        (*_192) = Add((*_192), const 3_i32);
        drop(_196) -> [return: bb100, unwind: bb129];
    }

    bb100: {
        _211 = &_176;
        _210 = <Rc<RefCell<Vec<i32>>> as Deref>::deref(move _211) -> [return: bb101, unwind: bb129];
    }

    bb101: {
        _209 = _210;
        _208 = RefCell::<Vec<i32>>::borrow(move _209) -> [return: bb102, unwind: bb129];
    }

    bb102: {
        _207 = &_208;
        _206 = <Ref<'_, Vec<i32>> as Deref>::deref(move _207) -> [return: bb103, unwind: bb126];
    }

    bb103: {
        _205 = _206;
        _204 = <Vec<i32> as Index<usize>>::index(move _205, const 0_usize) -> [return: bb104, unwind: bb126];
    }

    bb104: {
        _203 = (*_204);
        _220 = &_176;
        _219 = <Rc<RefCell<Vec<i32>>> as Deref>::deref(move _220) -> [return: bb105, unwind: bb126];
    }

    bb105: {
        _218 = _219;
        _217 = RefCell::<Vec<i32>>::borrow(move _218) -> [return: bb106, unwind: bb126];
    }

    bb106: {
        _216 = &_217;
        _215 = <Ref<'_, Vec<i32>> as Deref>::deref(move _216) -> [return: bb107, unwind: bb125];
    }

    bb107: {
        _214 = _215;
        _213 = <Vec<i32> as Index<usize>>::index(move _214, const 1_usize) -> [return: bb108, unwind: bb125];
    }

    bb108: {
        _212 = (*_213);
        _229 = &_176;
        _228 = <Rc<RefCell<Vec<i32>>> as Deref>::deref(move _229) -> [return: bb109, unwind: bb125];
    }

    bb109: {
        _227 = _228;
        _226 = RefCell::<Vec<i32>>::borrow(move _227) -> [return: bb110, unwind: bb125];
    }

    bb110: {
        _225 = &_226;
        _224 = <Ref<'_, Vec<i32>> as Deref>::deref(move _225) -> [return: bb111, unwind: bb124];
    }

    bb111: {
        _223 = _224;
        _222 = <Vec<i32> as Index<usize>>::index(move _223, const 2_usize) -> [return: bb112, unwind: bb124];
    }

    bb112: {
        _221 = (*_222);
        _202 = (move _203, move _212, move _221);
        _201 = &_202;
        _237 = const _;
        _200 = (move _201, _237);
        _230 = (_200.0: &(i32, i32, i32));
        _231 = (_200.1: &(i32, i32, i32));
        _233 = <(i32, i32, i32) as PartialEq>::eq(_230, _231) -> [return: bb113, unwind: bb124];
    }

    bb113: {
        _232 = Not(move _233);
        switchInt(move _232) -> [0: bb115, otherwise: bb114];
    }

    bb114: {
        _234 = core::panicking::AssertKind::Eq;
        _236 = Option::<Arguments<'_>>::None;
        _235 = core::panicking::assert_failed::<(i32, i32, i32), (i32, i32, i32)>(move _234, _230, _231, move _236) -> bb124;
    }

    bb115: {
        drop(_226) -> [return: bb116, unwind: bb125];
    }

    bb116: {
        drop(_217) -> [return: bb117, unwind: bb126];
    }

    bb117: {
        drop(_208) -> [return: bb118, unwind: bb129];
    }

    bb118: {
        drop(_176) -> [return: bb119, unwind: bb133];
    }

    bb119: {
        drop(_146) -> [return: bb120, unwind: bb137];
    }

    bb120: {
        drop(_104) -> [return: bb121, unwind: bb139];
    }

    bb121: {
        drop(_76) -> [return: bb122, unwind: bb143];
    }

    bb122: {
        drop(_44) -> [return: bb123, unwind continue];
    }

    bb123: {
        return;
    }

    bb124 (cleanup): {
        drop(_226) -> [return: bb125, unwind terminate];
    }

    bb125 (cleanup): {
        drop(_217) -> [return: bb126, unwind terminate];
    }

    bb126 (cleanup): {
        drop(_208) -> [return: bb129, unwind terminate];
    }

    bb127 (cleanup): {
        drop(_196) -> [return: bb129, unwind terminate];
    }

    bb128 (cleanup): {
        drop(_188) -> [return: bb129, unwind terminate];
    }

    bb129 (cleanup): {
        drop(_176) -> [return: bb133, unwind terminate];
    }

    bb130 (cleanup): {
        drop(_165) -> [return: bb133, unwind terminate];
    }

    bb131 (cleanup): {
        drop(_157) -> [return: bb133, unwind terminate];
    }

    bb132 (cleanup): {
        drop(_151) -> [return: bb133, unwind terminate];
    }

    bb133 (cleanup): {
        drop(_146) -> [return: bb137, unwind terminate];
    }

    bb134 (cleanup): {
        drop(_135) -> [return: bb137, unwind terminate];
    }

    bb135 (cleanup): {
        drop(_120) -> [return: bb137, unwind terminate];
    }

    bb136 (cleanup): {
        drop(_111) -> [return: bb137, unwind terminate];
    }

    bb137 (cleanup): {
        drop(_104) -> [return: bb139, unwind terminate];
    }

    bb138 (cleanup): {
        drop(_84) -> [return: bb139, unwind terminate];
    }

    bb139 (cleanup): {
        drop(_76) -> [return: bb143, unwind terminate];
    }

    bb140 (cleanup): {
        drop(_65) -> [return: bb143, unwind terminate];
    }

    bb141 (cleanup): {
        drop(_55) -> [return: bb143, unwind terminate];
    }

    bb142 (cleanup): {
        drop(_49) -> [return: bb143, unwind terminate];
    }

    bb143 (cleanup): {
        drop(_44) -> [return: bb147, unwind terminate];
    }

    bb144 (cleanup): {
        drop(_35) -> [return: bb147, unwind terminate];
    }

    bb145 (cleanup): {
        drop(_19) -> [return: bb147, unwind terminate];
    }

    bb146 (cleanup): {
        drop(_5) -> [return: bb147, unwind terminate];
    }

    bb147 (cleanup): {
        resume;
    }

    bb148: {
        (*_250) = [const 1_i32, const 2_i32, const 3_i32];
        _179 = move _183 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _178 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _179) -> [return: bb88, unwind: bb133];
    }

    bb149: {
        _16 = &(*_249);
        _244 = const _;
        _15 = (move _16, _244);
        _22 = (_15.0: &i32);
        _23 = (_15.1: &i32);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb11, otherwise: bb10];
    }

    bb150: {
        _247 = deref_copy (*_248);
        _249 = (((_247.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _257 = _249 as *const () (PtrToPtr);
        _258 = _257 as usize (Transmute);
        _259 = AlignOf(i32);
        _260 = Sub(_259, const 1_usize);
        _261 = BitAnd(_258, _260);
        _262 = Eq(_261, const 0_usize);
        assert(_262, "misaligned pointer dereference: address must be a multiple of {} but is {}", _259, _258) -> [success: bb149, unwind unreachable];
    }
}

promoted[0] in main: &(i32, i32, i32) = {
    let mut _0: &(i32, i32, i32);
    let mut _1: (i32, i32, i32);

    bb0: {
        _1 = (const 3_i32, const 5_i32, const 3_i32);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Point = {
    let mut _0: &Point;
    let mut _1: Point;

    bb0: {
        _1 = Point { x: const 3_isize, y: const 5_isize };
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "foobar";
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "foobar";
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "foo";
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 2_i32, const 5_i32);
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &Point = {
    let mut _0: &Point;
    let mut _1: Point;

    bb0: {
        _1 = Point { x: const 2_isize, y: const 4_isize };
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 5_i32;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 5_i32;
        _0 = &_1;
        return;
    }
}
