// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-deref.rs:6:10: 6:19>::eq(_1: &Point, _2: &Point) -> bool {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-deref.rs:6:10: 6:19
    debug other => _2;                   // in scope 0 at ui/overloaded/overloaded-deref.rs:6:10: 6:19
    let mut _0: bool;                    // return place in scope 0 at ui/overloaded/overloaded-deref.rs:6:10: 6:19
    let mut _3: bool;                    // in scope 0 at ui/overloaded/overloaded-deref.rs:8:5: 8:13
    let mut _4: isize;                   // in scope 0 at ui/overloaded/overloaded-deref.rs:8:5: 8:13
    let mut _5: isize;                   // in scope 0 at ui/overloaded/overloaded-deref.rs:8:5: 8:13
    let mut _6: bool;                    // in scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
    let mut _7: isize;                   // in scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
    let mut _8: isize;                   // in scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13

    bb0: {
        _4 = ((*_1).0: isize);           // scope 0 at ui/overloaded/overloaded-deref.rs:8:5: 8:13
        _5 = ((*_2).0: isize);           // scope 0 at ui/overloaded/overloaded-deref.rs:8:5: 8:13
        _3 = Eq(move _4, move _5);       // scope 0 at ui/overloaded/overloaded-deref.rs:8:5: 8:13
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
        goto -> bb3;                     // scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
    }

    bb2: {
        _7 = ((*_1).1: isize);           // scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
        _8 = ((*_2).1: isize);           // scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
        _6 = Eq(move _7, move _8);       // scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
        _0 = move _6;                    // scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
        goto -> bb3;                     // scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
    }

    bb3: {
        return;                          // scope 0 at ui/overloaded/overloaded-deref.rs:6:19: 6:19
    }
}

fn <impl at ui/overloaded/overloaded-deref.rs:6:21: 6:26>::fmt(_1: &Point, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-deref.rs:6:21: 6:26
    debug f => _2;                       // in scope 0 at ui/overloaded/overloaded-deref.rs:6:21: 6:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/overloaded/overloaded-deref.rs:6:21: 6:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/overloaded/overloaded-deref.rs:6:21: 6:26
    let mut _4: &str;                    // in scope 0 at ui/overloaded/overloaded-deref.rs:6:21: 6:26
    let _5: &str;                        // in scope 0 at ui/overloaded/overloaded-deref.rs:6:21: 6:26
    let mut _6: &str;                    // in scope 0 at ui/overloaded/overloaded-deref.rs:8:5: 8:13
    let _7: &str;                        // in scope 0 at ui/overloaded/overloaded-deref.rs:8:5: 8:13
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/overloaded/overloaded-deref.rs:8:5: 8:13
    let mut _9: &isize;                  // in scope 0 at ui/overloaded/overloaded-deref.rs:8:5: 8:13
    let _10: &isize;                     // in scope 0 at ui/overloaded/overloaded-deref.rs:8:5: 8:13
    let mut _11: &str;                   // in scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
    let _12: &str;                       // in scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
    let mut _14: &&isize;                // in scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
    let _15: &&isize;                    // in scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
    let _16: &isize;                     // in scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/overloaded/overloaded-deref.rs:6:21: 6:26
        _5 = const "Point";              // scope 0 at ui/overloaded/overloaded-deref.rs:6:21: 6:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:6:21: 6:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/overloaded/overloaded-deref.rs:6:21: 6:26
        _7 = const "x";                  // scope 0 at ui/overloaded/overloaded-deref.rs:8:5: 8:13
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:8:5: 8:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/overloaded/overloaded-deref.rs:8:5: 8:13
        _10 = &((*_1).0: isize);         // scope 0 at ui/overloaded/overloaded-deref.rs:8:5: 8:13
        _9 = _10;                        // scope 0 at ui/overloaded/overloaded-deref.rs:8:5: 8:13
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/overloaded/overloaded-deref.rs:8:5: 8:13
        _12 = const "y";                 // scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:9:5: 9:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
        _16 = &((*_1).1: isize);         // scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
        _15 = &_16;                      // scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
        _14 = _15;                       // scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/overloaded/overloaded-deref.rs:9:5: 9:13
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _3, move _4, move _6, move _8, move _11, move _13) -> bb1; // scope 0 at ui/overloaded/overloaded-deref.rs:6:21: 6:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:6:21: 6:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/overloaded/overloaded-deref.rs:6:26: 6:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/overloaded/overloaded-deref.rs:12:15: 12:15
    let mut _1: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: &i32;                        // in scope 0 at ui/overloaded/overloaded-deref.rs:13:16: 13:27
    let mut _4: &std::rc::Rc<i32>;       // in scope 0 at ui/overloaded/overloaded-deref.rs:13:17: 13:27
    let _5: std::rc::Rc<i32>;            // in scope 0 at ui/overloaded/overloaded-deref.rs:13:17: 13:27
    let mut _6: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _8: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _21: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _22: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _23: &std::boxed::Box<std::boxed::Box<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:14:18: 14:49
    let mut _24: &std::rc::Rc<std::boxed::Box<std::boxed::Box<i32>>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:14:19: 14:49
    let _25: std::rc::Rc<std::boxed::Box<std::boxed::Box<i32>>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:14:19: 14:49
    let mut _26: std::boxed::Box<std::boxed::Box<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:14:27: 14:48
    let mut _27: std::boxed::Box<i32>;   // in scope 0 at ui/overloaded/overloaded-deref.rs:14:36: 14:47
    let mut _28: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _29: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _30: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _33: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _34: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _36: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _37: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _38: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _39: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _40: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _41: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _43: (&Point, &Point);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _44: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _45: &Point;                     // in scope 0 at ui/overloaded/overloaded-deref.rs:15:16: 15:44
    let mut _46: &std::rc::Rc<Point>;    // in scope 0 at ui/overloaded/overloaded-deref.rs:15:17: 15:44
    let _47: std::rc::Rc<Point>;         // in scope 0 at ui/overloaded/overloaded-deref.rs:15:17: 15:44
    let mut _48: Point;                  // in scope 0 at ui/overloaded/overloaded-deref.rs:15:25: 15:43
    let mut _49: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _50: &Point;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _51: &Point;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _52: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _53: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _54: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _55: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _57: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _58: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _59: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _60: &Point;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _61: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _62: &Point;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _64: std::rc::Rc<std::cell::RefCell<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:17:9: 17:10
    let mut _65: std::cell::RefCell<i32>; // in scope 0 at ui/overloaded/overloaded-deref.rs:17:21: 17:36
    let mut _67: &i32;                   // in scope 0 at ui/overloaded/overloaded-deref.rs:18:19: 18:33
    let mut _68: &std::cell::Ref<'_, i32>; // in scope 0 at ui/overloaded/overloaded-deref.rs:18:20: 18:33
    let _69: std::cell::Ref<'_, i32>;    // in scope 0 at ui/overloaded/overloaded-deref.rs:18:20: 18:33
    let mut _70: &std::cell::RefCell<i32>; // in scope 0 at ui/overloaded/overloaded-deref.rs:18:20: 18:33
    let _71: &std::cell::RefCell<i32>;   // in scope 0 at ui/overloaded/overloaded-deref.rs:18:20: 18:24
    let mut _72: &std::rc::Rc<std::cell::RefCell<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:18:22: 18:23
    let mut _73: &mut i32;               // in scope 0 at ui/overloaded/overloaded-deref.rs:19:5: 19:23
    let mut _74: &mut std::cell::RefMut<'_, i32>; // in scope 0 at ui/overloaded/overloaded-deref.rs:19:6: 19:23
    let mut _75: std::cell::RefMut<'_, i32>; // in scope 0 at ui/overloaded/overloaded-deref.rs:19:6: 19:23
    let mut _76: &std::cell::RefCell<i32>; // in scope 0 at ui/overloaded/overloaded-deref.rs:19:6: 19:23
    let _77: &std::cell::RefCell<i32>;   // in scope 0 at ui/overloaded/overloaded-deref.rs:19:6: 19:10
    let mut _78: &std::rc::Rc<std::cell::RefCell<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:19:8: 19:9
    let mut _79: (&(i32, i32), &(i32, i32)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _80: &(i32, i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _81: (i32, i32);                 // in scope 0 at ui/overloaded/overloaded-deref.rs:20:16: 20:41
    let mut _82: i32;                    // in scope 0 at ui/overloaded/overloaded-deref.rs:20:17: 20:24
    let mut _83: i32;                    // in scope 0 at ui/overloaded/overloaded-deref.rs:20:26: 20:40
    let mut _84: &i32;                   // in scope 0 at ui/overloaded/overloaded-deref.rs:20:26: 20:40
    let mut _85: &std::cell::Ref<'_, i32>; // in scope 0 at ui/overloaded/overloaded-deref.rs:20:27: 20:40
    let _86: std::cell::Ref<'_, i32>;    // in scope 0 at ui/overloaded/overloaded-deref.rs:20:27: 20:40
    let mut _87: &std::cell::RefCell<i32>; // in scope 0 at ui/overloaded/overloaded-deref.rs:20:27: 20:40
    let _88: &std::cell::RefCell<i32>;   // in scope 0 at ui/overloaded/overloaded-deref.rs:20:27: 20:31
    let mut _89: &std::rc::Rc<std::cell::RefCell<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:20:29: 20:30
    let mut _90: &(i32, i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _93: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _94: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _95: &(i32, i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _96: &(i32, i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _98: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _99: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _100: &(i32, i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _101: &(i32, i32);               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _102: &(i32, i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _103: &(i32, i32);               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _104: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _106: std::string::String;   // in scope 0 at ui/overloaded/overloaded-deref.rs:22:21: 22:38
    let mut _107: &str;                  // in scope 0 at ui/overloaded/overloaded-deref.rs:22:21: 22:38
    let _108: &str;                      // in scope 0 at ui/overloaded/overloaded-deref.rs:22:21: 22:26
    let mut _109: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _110: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _111: &std::string::String;      // in scope 0 at ui/overloaded/overloaded-deref.rs:23:16: 23:18
    let mut _112: &std::rc::Rc<std::string::String>; // in scope 0 at ui/overloaded/overloaded-deref.rs:23:17: 23:18
    let mut _113: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _114: std::string::String;       // in scope 0 at ui/overloaded/overloaded-deref.rs:23:20: 23:37
    let mut _115: &str;                  // in scope 0 at ui/overloaded/overloaded-deref.rs:23:20: 23:37
    let _116: &str;                      // in scope 0 at ui/overloaded/overloaded-deref.rs:23:20: 23:25
    let mut _119: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _120: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _121: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _122: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _124: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _125: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _126: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _127: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _128: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _129: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _131: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _132: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _133: &std::string::String;      // in scope 0 at ui/overloaded/overloaded-deref.rs:24:16: 24:20
    let mut _134: &std::rc::Rc<std::string::String>; // in scope 0 at ui/overloaded/overloaded-deref.rs:24:18: 24:19
    let mut _135: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _138: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _139: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _140: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _141: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _143: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _144: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _145: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _146: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _147: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _148: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _149: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _151: std::cell::RefCell<std::string::String>; // in scope 0 at ui/overloaded/overloaded-deref.rs:26:25: 26:58
    let mut _152: std::string::String;   // in scope 0 at ui/overloaded/overloaded-deref.rs:26:38: 26:57
    let _153: ();                        // in scope 0 at ui/overloaded/overloaded-deref.rs:27:5: 27:45
    let mut _154: &mut std::string::String; // in scope 0 at ui/overloaded/overloaded-deref.rs:27:5: 27:45
    let mut _155: &mut std::string::String; // in scope 0 at ui/overloaded/overloaded-deref.rs:27:5: 27:29
    let mut _156: &mut std::cell::RefMut<'_, std::string::String>; // in scope 0 at ui/overloaded/overloaded-deref.rs:27:7: 27:28
    let mut _157: std::cell::RefMut<'_, std::string::String>; // in scope 0 at ui/overloaded/overloaded-deref.rs:27:7: 27:28
    let mut _158: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/overloaded/overloaded-deref.rs:27:7: 27:28
    let _159: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/overloaded/overloaded-deref.rs:27:7: 27:15
    let mut _160: &std::rc::Rc<std::cell::RefCell<std::string::String>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:27:9: 27:14
    let mut _161: &str;                  // in scope 0 at ui/overloaded/overloaded-deref.rs:27:39: 27:44
    let _162: &str;                      // in scope 0 at ui/overloaded/overloaded-deref.rs:27:39: 27:44
    let mut _163: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _164: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _165: &std::string::String;      // in scope 0 at ui/overloaded/overloaded-deref.rs:29:16: 29:36
    let mut _166: &std::cell::Ref<'_, std::string::String>; // in scope 0 at ui/overloaded/overloaded-deref.rs:29:18: 29:35
    let _167: std::cell::Ref<'_, std::string::String>; // in scope 0 at ui/overloaded/overloaded-deref.rs:29:18: 29:35
    let mut _168: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/overloaded/overloaded-deref.rs:29:18: 29:35
    let _169: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/overloaded/overloaded-deref.rs:29:18: 29:26
    let mut _170: &std::rc::Rc<std::cell::RefCell<std::string::String>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:29:20: 29:25
    let mut _171: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _174: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _175: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _176: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _177: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _179: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _180: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _181: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _182: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _183: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _184: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _185: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _186: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _187: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _188: &std::string::String;      // in scope 0 at ui/overloaded/overloaded-deref.rs:30:16: 30:40
    let mut _189: &std::cell::RefMut<'_, std::string::String>; // in scope 0 at ui/overloaded/overloaded-deref.rs:30:18: 30:39
    let _190: std::cell::RefMut<'_, std::string::String>; // in scope 0 at ui/overloaded/overloaded-deref.rs:30:18: 30:39
    let mut _191: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/overloaded/overloaded-deref.rs:30:18: 30:39
    let _192: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/overloaded/overloaded-deref.rs:30:18: 30:26
    let mut _193: &std::rc::Rc<std::cell::RefCell<std::string::String>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:30:20: 30:25
    let mut _194: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _197: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _198: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _199: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _200: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _202: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _203: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _204: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _205: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _206: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _207: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _208: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _210: std::cell::RefCell<Point>; // in scope 0 at ui/overloaded/overloaded-deref.rs:32:21: 32:53
    let mut _211: Point;                 // in scope 0 at ui/overloaded/overloaded-deref.rs:32:34: 32:52
    let mut _212: &mut Point;            // in scope 0 at ui/overloaded/overloaded-deref.rs:33:5: 33:25
    let mut _213: &mut std::cell::RefMut<'_, Point>; // in scope 0 at ui/overloaded/overloaded-deref.rs:33:7: 33:24
    let mut _214: std::cell::RefMut<'_, Point>; // in scope 0 at ui/overloaded/overloaded-deref.rs:33:7: 33:24
    let mut _215: &std::cell::RefCell<Point>; // in scope 0 at ui/overloaded/overloaded-deref.rs:33:7: 33:24
    let _216: &std::cell::RefCell<Point>; // in scope 0 at ui/overloaded/overloaded-deref.rs:33:7: 33:11
    let mut _217: &std::rc::Rc<std::cell::RefCell<Point>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:33:9: 33:10
    let mut _218: &mut Point;            // in scope 0 at ui/overloaded/overloaded-deref.rs:34:5: 34:25
    let mut _219: &mut std::cell::RefMut<'_, Point>; // in scope 0 at ui/overloaded/overloaded-deref.rs:34:7: 34:24
    let mut _220: std::cell::RefMut<'_, Point>; // in scope 0 at ui/overloaded/overloaded-deref.rs:34:7: 34:24
    let mut _221: &std::cell::RefCell<Point>; // in scope 0 at ui/overloaded/overloaded-deref.rs:34:7: 34:24
    let _222: &std::cell::RefCell<Point>; // in scope 0 at ui/overloaded/overloaded-deref.rs:34:7: 34:11
    let mut _223: &std::rc::Rc<std::cell::RefCell<Point>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:34:9: 34:10
    let mut _224: (isize, bool);         // in scope 0 at ui/overloaded/overloaded-deref.rs:34:5: 34:32
    let mut _225: (&Point, &Point);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _226: &Point;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _227: &Point;                    // in scope 0 at ui/overloaded/overloaded-deref.rs:35:16: 35:30
    let mut _228: &std::cell::Ref<'_, Point>; // in scope 0 at ui/overloaded/overloaded-deref.rs:35:17: 35:30
    let _229: std::cell::Ref<'_, Point>; // in scope 0 at ui/overloaded/overloaded-deref.rs:35:17: 35:30
    let mut _230: &std::cell::RefCell<Point>; // in scope 0 at ui/overloaded/overloaded-deref.rs:35:17: 35:30
    let _231: &std::cell::RefCell<Point>; // in scope 0 at ui/overloaded/overloaded-deref.rs:35:17: 35:21
    let mut _232: &std::rc::Rc<std::cell::RefCell<Point>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:35:19: 35:20
    let mut _233: &Point;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _236: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _237: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _238: &Point;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _239: &Point;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _241: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _242: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _243: &Point;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _244: &Point;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _245: &Point;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _246: &Point;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _247: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _249: std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:37:21: 37:48
    let mut _250: std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _251: std::boxed::Box<[i32]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _252: std::boxed::Box<[i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _253: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _254: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _255: *mut u8;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _256: std::boxed::Box<[i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _257: &mut i32;              // in scope 0 at ui/overloaded/overloaded-deref.rs:38:5: 38:28
    let mut _258: &mut std::vec::Vec<i32>; // in scope 0 at ui/overloaded/overloaded-deref.rs:38:5: 38:25
    let mut _259: &mut std::vec::Vec<i32>; // in scope 0 at ui/overloaded/overloaded-deref.rs:38:5: 38:25
    let mut _260: &mut std::cell::RefMut<'_, std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:38:7: 38:24
    let mut _261: std::cell::RefMut<'_, std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:38:7: 38:24
    let mut _262: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:38:7: 38:24
    let _263: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:38:7: 38:11
    let mut _264: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<i32>>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:38:9: 38:10
    let mut _265: &mut i32;              // in scope 0 at ui/overloaded/overloaded-deref.rs:39:5: 39:28
    let mut _266: &mut std::vec::Vec<i32>; // in scope 0 at ui/overloaded/overloaded-deref.rs:39:5: 39:25
    let mut _267: &mut std::vec::Vec<i32>; // in scope 0 at ui/overloaded/overloaded-deref.rs:39:5: 39:25
    let mut _268: &mut std::cell::RefMut<'_, std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:39:7: 39:24
    let mut _269: std::cell::RefMut<'_, std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:39:7: 39:24
    let mut _270: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:39:7: 39:24
    let _271: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:39:7: 39:11
    let mut _272: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<i32>>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:39:9: 39:10
    let mut _273: (i32, bool);           // in scope 0 at ui/overloaded/overloaded-deref.rs:39:5: 39:33
    let mut _274: (&(i32, i32, i32), &(i32, i32, i32)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _275: &(i32, i32, i32);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _276: (i32, i32, i32);           // in scope 0 at ui/overloaded/overloaded-deref.rs:40:16: 42:37
    let mut _277: i32;                   // in scope 0 at ui/overloaded/overloaded-deref.rs:40:17: 40:36
    let mut _278: &i32;                  // in scope 0 at ui/overloaded/overloaded-deref.rs:40:17: 40:36
    let mut _279: &std::vec::Vec<i32>;   // in scope 0 at ui/overloaded/overloaded-deref.rs:40:17: 40:33
    let _280: &std::vec::Vec<i32>;       // in scope 0 at ui/overloaded/overloaded-deref.rs:40:17: 40:33
    let mut _281: &std::cell::Ref<'_, std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:40:19: 40:32
    let _282: std::cell::Ref<'_, std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:40:19: 40:32
    let mut _283: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:40:19: 40:32
    let _284: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:40:19: 40:23
    let mut _285: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<i32>>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:40:21: 40:22
    let mut _286: i32;                   // in scope 0 at ui/overloaded/overloaded-deref.rs:41:17: 41:36
    let mut _287: &i32;                  // in scope 0 at ui/overloaded/overloaded-deref.rs:41:17: 41:36
    let mut _288: &std::vec::Vec<i32>;   // in scope 0 at ui/overloaded/overloaded-deref.rs:41:17: 41:33
    let _289: &std::vec::Vec<i32>;       // in scope 0 at ui/overloaded/overloaded-deref.rs:41:17: 41:33
    let mut _290: &std::cell::Ref<'_, std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:41:19: 41:32
    let _291: std::cell::Ref<'_, std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:41:19: 41:32
    let mut _292: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:41:19: 41:32
    let _293: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:41:19: 41:23
    let mut _294: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<i32>>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:41:21: 41:22
    let mut _295: i32;                   // in scope 0 at ui/overloaded/overloaded-deref.rs:42:17: 42:36
    let mut _296: &i32;                  // in scope 0 at ui/overloaded/overloaded-deref.rs:42:17: 42:36
    let mut _297: &std::vec::Vec<i32>;   // in scope 0 at ui/overloaded/overloaded-deref.rs:42:17: 42:33
    let _298: &std::vec::Vec<i32>;       // in scope 0 at ui/overloaded/overloaded-deref.rs:42:17: 42:33
    let mut _299: &std::cell::Ref<'_, std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:42:19: 42:32
    let _300: std::cell::Ref<'_, std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:42:19: 42:32
    let mut _301: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:42:19: 42:32
    let _302: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:42:19: 42:23
    let mut _303: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<i32>>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:42:21: 42:22
    let mut _304: &(i32, i32, i32);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _307: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _308: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _309: &(i32, i32, i32);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _310: &(i32, i32, i32);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _312: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _313: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _314: &(i32, i32, i32);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _315: &(i32, i32, i32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _316: &(i32, i32, i32);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _317: &(i32, i32, i32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _318: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _325: &Point;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _326: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _327: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _328: std::boxed::Box<std::boxed::Box<i32>>; // in scope 0 at ui/overloaded/overloaded-deref.rs:14:18: 14:49
    let mut _329: std::boxed::Box<i32>;  // in scope 0 at ui/overloaded/overloaded-deref.rs:14:18: 14:49
    let mut _330: *const std::boxed::Box<i32>; // in scope 0 at ui/overloaded/overloaded-deref.rs:14:18: 14:49
    let mut _331: *const i32;            // in scope 0 at ui/overloaded/overloaded-deref.rs:14:18: 14:49
    let mut _332: *const [i32; 3];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug left_val => _7;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _13;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _29;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _30;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _35: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _35;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _50;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _51;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _56: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _56;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug i => _64;                  // in scope 7 at ui/overloaded/overloaded-deref.rs:17:9: 17:10
        let _66: i32;                    // in scope 7 at ui/overloaded/overloaded-deref.rs:18:9: 18:16
        scope 8 {
            debug i_value => _66;        // in scope 8 at ui/overloaded/overloaded-deref.rs:18:9: 18:16
            let _91: &(i32, i32);        // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _92: &(i32, i32);        // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _105: std::rc::Rc<std::string::String>; // in scope 8 at ui/overloaded/overloaded-deref.rs:22:9: 22:10
            let mut _324: &(i32, i32);   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 9 {
                debug left_val => _91;   // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _92;  // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _97: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 10 {
                    debug kind => _97;   // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 11 {
                debug s => _105;         // in scope 11 at ui/overloaded/overloaded-deref.rs:22:9: 22:10
                let _117: &std::string::String; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _118: &std::string::String; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _136: &std::string::String; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _137: &&str;         // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _150: std::rc::Rc<std::cell::RefCell<std::string::String>>; // in scope 11 at ui/overloaded/overloaded-deref.rs:26:9: 26:14
                let mut _323: &&str;     // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 12 {
                    debug left_val => _117; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _118; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _123: core::panicking::AssertKind; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 13 {
                        debug kind => _123; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 14 {
                    debug left_val => _136; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _137; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _142: core::panicking::AssertKind; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 15 {
                        debug kind => _142; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 16 {
                    debug mut_s => _150; // in scope 16 at ui/overloaded/overloaded-deref.rs:26:9: 26:14
                    let _172: &std::string::String; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _173: &&str;     // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _195: &std::string::String; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _196: &&str;     // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _209: std::rc::Rc<std::cell::RefCell<Point>>; // in scope 16 at ui/overloaded/overloaded-deref.rs:32:9: 32:10
                    let mut _321: &&str; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    let mut _322: &&str; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 17 {
                        debug left_val => _172; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _173; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _178: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 18 {
                            debug kind => _178; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 19 {
                        debug left_val => _195; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _196; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _201: core::panicking::AssertKind; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 20 {
                            debug kind => _201; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 21 {
                        debug p => _209; // in scope 21 at ui/overloaded/overloaded-deref.rs:32:9: 32:10
                        let _234: &Point; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _235: &Point; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _248: std::rc::Rc<std::cell::RefCell<std::vec::Vec<i32>>>; // in scope 21 at ui/overloaded/overloaded-deref.rs:37:9: 37:10
                        let mut _320: &Point; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        scope 22 {
                            debug left_val => _234; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _235; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _240: core::panicking::AssertKind; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 23 {
                                debug kind => _240; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                        scope 24 {
                            debug v => _248; // in scope 24 at ui/overloaded/overloaded-deref.rs:37:9: 37:10
                            let _305: &(i32, i32, i32); // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            let _306: &(i32, i32, i32); // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let mut _319: &(i32, i32, i32); // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                            scope 26 {
                                debug left_val => _305; // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                debug right_val => _306; // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _311: core::panicking::AssertKind; // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                scope 27 {
                                    debug kind => _311; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                }
                            }
                        }
                        scope 25 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _5 = Rc::<i32>::new(const 5_i32) -> bb1; // scope 0 at ui/overloaded/overloaded-deref.rs:13:17: 13:27
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:13:17: 13:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(i32) -> Rc<i32> {Rc::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at ui/overloaded/overloaded-deref.rs:13:17: 13:27
        _3 = <Rc<i32> as Deref>::deref(move _4) -> [return: bb2, unwind: bb148]; // scope 0 at ui/overloaded/overloaded-deref.rs:13:16: 13:27
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:13:16: 13:27
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<i32>) -> &'a <Rc<i32> as Deref>::Target {<Rc<i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _3;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _327 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[8])) }
        _6 = _327;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _6);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_1.0: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_1.1: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = const 5_i32;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _13 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<i32, i32>(move _15, move _16, move _18, move _20) -> bb148; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_5) -> bb5;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb5: {
        _27 = Box::<i32>::new(const 5_i32) -> bb6; // scope 0 at ui/overloaded/overloaded-deref.rs:14:36: 14:47
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:14:36: 14:44
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb6: {
        _26 = Box::<Box<i32>>::new(move _27) -> bb7; // scope 0 at ui/overloaded/overloaded-deref.rs:14:27: 14:48
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:14:27: 14:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Box<i32>) -> Box<Box<i32>> {Box::<Box<i32>>::new}, val: Value(<ZST>) }
    }

    bb7: {
        _25 = Rc::<Box<Box<i32>>>::new(move _26) -> bb8; // scope 0 at ui/overloaded/overloaded-deref.rs:14:19: 14:49
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:14:19: 14:26
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<Box<i32>>) -> Rc<Box<Box<i32>>> {Rc::<Box<Box<i32>>>::new}, val: Value(<ZST>) }
    }

    bb8: {
        _24 = &_25;                      // scope 0 at ui/overloaded/overloaded-deref.rs:14:19: 14:49
        _23 = <Rc<Box<Box<i32>>> as Deref>::deref(move _24) -> [return: bb9, unwind: bb147]; // scope 0 at ui/overloaded/overloaded-deref.rs:14:18: 14:49
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:14:18: 14:49
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<Box<Box<i32>>>) -> &'a <Rc<Box<Box<i32>>> as Deref>::Target {<Rc<Box<Box<i32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _328 = deref_copy (*_23);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _330 = (((_328.0: std::ptr::Unique<std::boxed::Box<i32>>).0: std::ptr::NonNull<std::boxed::Box<i32>>).0: *const std::boxed::Box<i32>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _329 = deref_copy (*_330);       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _331 = (((_329.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _22 = &(*_331);                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _326 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[7])) }
        _28 = _326;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _21 = (move _22, move _28);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_21.0: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_21.1: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _33 = (*_29);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _34 = const 5_i32;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _32 = Eq(move _33, move _34);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _31 = Not(move _32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _31) -> [0: bb11, otherwise: bb10]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _35 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = _29;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _39;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = _41;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _36 = core::panicking::assert_failed::<i32, i32>(move _37, move _38, move _40, move _42) -> bb147; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb11: {
        drop(_25) -> bb12;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb12: {
        _48 = Point { x: const 2_isize, y: const 4_isize }; // scope 0 at ui/overloaded/overloaded-deref.rs:15:25: 15:43
        _47 = Rc::<Point>::new(move _48) -> bb13; // scope 0 at ui/overloaded/overloaded-deref.rs:15:17: 15:44
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:15:17: 15:24
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(Point) -> Rc<Point> {Rc::<Point>::new}, val: Value(<ZST>) }
    }

    bb13: {
        _46 = &_47;                      // scope 0 at ui/overloaded/overloaded-deref.rs:15:17: 15:44
        _45 = <Rc<Point> as Deref>::deref(move _46) -> [return: bb14, unwind: bb146]; // scope 0 at ui/overloaded/overloaded-deref.rs:15:16: 15:44
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:15:16: 15:44
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<Point>) -> &'a <Rc<Point> as Deref>::Target {<Rc<Point> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb14: {
        _44 = _45;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _325 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Point, val: Unevaluated(main, [], Some(promoted[6])) }
        _49 = _325;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _43 = (move _44, move _49);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _50 = (_43.0: &Point);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _51 = (_43.1: &Point);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _54 = _50;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _55 = _51;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _53 = <Point as PartialEq>::eq(move _54, move _55) -> [return: bb15, unwind: bb146]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Point, &'b Point) -> bool {<Point as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb15: {
        _52 = Not(move _53);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _52) -> [0: bb17, otherwise: bb16]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb16: {
        _56 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _60 = _50;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _59 = _60;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _62 = _51;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = _62;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _63 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _57 = core::panicking::assert_failed::<Point, Point>(move _58, move _59, move _61, move _63) -> bb146; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Point, &'b Point, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Point, Point>}, val: Value(<ZST>) }
    }

    bb17: {
        drop(_47) -> bb18;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb18: {
        _65 = RefCell::<i32>::new(const 2_i32) -> bb19; // scope 0 at ui/overloaded/overloaded-deref.rs:17:21: 17:36
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:17:21: 17:33
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(i32) -> RefCell<i32> {RefCell::<i32>::new}, val: Value(<ZST>) }
    }

    bb19: {
        _64 = Rc::<RefCell<i32>>::new(move _65) -> bb20; // scope 0 at ui/overloaded/overloaded-deref.rs:17:13: 17:37
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:17:13: 17:20
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(RefCell<i32>) -> Rc<RefCell<i32>> {Rc::<RefCell<i32>>::new}, val: Value(<ZST>) }
    }

    bb20: {
        _72 = &_64;                      // scope 7 at ui/overloaded/overloaded-deref.rs:18:22: 18:23
        _71 = <Rc<RefCell<i32>> as Deref>::deref(move _72) -> [return: bb21, unwind: bb145]; // scope 7 at ui/overloaded/overloaded-deref.rs:18:20: 18:24
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:18:20: 18:24
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<i32>>) -> &'a <Rc<RefCell<i32>> as Deref>::Target {<Rc<RefCell<i32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb21: {
        _70 = _71;                       // scope 7 at ui/overloaded/overloaded-deref.rs:18:20: 18:33
        _69 = RefCell::<i32>::borrow(move _70) -> [return: bb22, unwind: bb145]; // scope 7 at ui/overloaded/overloaded-deref.rs:18:20: 18:33
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:18:25: 18:31
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<i32>) -> Ref<'a, i32> {RefCell::<i32>::borrow}, val: Value(<ZST>) }
    }

    bb22: {
        _68 = &_69;                      // scope 7 at ui/overloaded/overloaded-deref.rs:18:20: 18:33
        _67 = <Ref<'_, i32> as Deref>::deref(move _68) -> [return: bb23, unwind: bb144]; // scope 7 at ui/overloaded/overloaded-deref.rs:18:19: 18:33
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:18:19: 18:33
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, i32>) -> &'a <Ref<'_, i32> as Deref>::Target {<Ref<'_, i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb23: {
        _66 = (*_67);                    // scope 7 at ui/overloaded/overloaded-deref.rs:18:19: 18:33
        drop(_69) -> [return: bb24, unwind: bb145]; // scope 7 at ui/overloaded/overloaded-deref.rs:18:33: 18:34
    }

    bb24: {
        _78 = &_64;                      // scope 8 at ui/overloaded/overloaded-deref.rs:19:8: 19:9
        _77 = <Rc<RefCell<i32>> as Deref>::deref(move _78) -> [return: bb25, unwind: bb145]; // scope 8 at ui/overloaded/overloaded-deref.rs:19:6: 19:10
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:19:6: 19:10
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<i32>>) -> &'a <Rc<RefCell<i32>> as Deref>::Target {<Rc<RefCell<i32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb25: {
        _76 = _77;                       // scope 8 at ui/overloaded/overloaded-deref.rs:19:6: 19:23
        _75 = RefCell::<i32>::borrow_mut(move _76) -> [return: bb26, unwind: bb145]; // scope 8 at ui/overloaded/overloaded-deref.rs:19:6: 19:23
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:19:11: 19:21
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<i32>) -> RefMut<'a, i32> {RefCell::<i32>::borrow_mut}, val: Value(<ZST>) }
    }

    bb26: {
        _74 = &mut _75;                  // scope 8 at ui/overloaded/overloaded-deref.rs:19:6: 19:23
        _73 = <RefMut<'_, i32> as DerefMut>::deref_mut(move _74) -> [return: bb27, unwind: bb143]; // scope 8 at ui/overloaded/overloaded-deref.rs:19:5: 19:23
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:19:5: 19:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, i32>) -> &'a mut <RefMut<'_, i32> as Deref>::Target {<RefMut<'_, i32> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb27: {
        (*_73) = const 5_i32;            // scope 8 at ui/overloaded/overloaded-deref.rs:19:5: 19:27
        drop(_75) -> [return: bb28, unwind: bb145]; // scope 8 at ui/overloaded/overloaded-deref.rs:19:27: 19:28
    }

    bb28: {
        _82 = _66;                       // scope 8 at ui/overloaded/overloaded-deref.rs:20:17: 20:24
        _89 = &_64;                      // scope 8 at ui/overloaded/overloaded-deref.rs:20:29: 20:30
        _88 = <Rc<RefCell<i32>> as Deref>::deref(move _89) -> [return: bb29, unwind: bb145]; // scope 8 at ui/overloaded/overloaded-deref.rs:20:27: 20:31
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:20:27: 20:31
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<i32>>) -> &'a <Rc<RefCell<i32>> as Deref>::Target {<Rc<RefCell<i32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb29: {
        _87 = _88;                       // scope 8 at ui/overloaded/overloaded-deref.rs:20:27: 20:40
        _86 = RefCell::<i32>::borrow(move _87) -> [return: bb30, unwind: bb145]; // scope 8 at ui/overloaded/overloaded-deref.rs:20:27: 20:40
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:20:32: 20:38
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<i32>) -> Ref<'a, i32> {RefCell::<i32>::borrow}, val: Value(<ZST>) }
    }

    bb30: {
        _85 = &_86;                      // scope 8 at ui/overloaded/overloaded-deref.rs:20:27: 20:40
        _84 = <Ref<'_, i32> as Deref>::deref(move _85) -> [return: bb31, unwind: bb142]; // scope 8 at ui/overloaded/overloaded-deref.rs:20:26: 20:40
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:20:26: 20:40
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, i32>) -> &'a <Ref<'_, i32> as Deref>::Target {<Ref<'_, i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb31: {
        _83 = (*_84);                    // scope 8 at ui/overloaded/overloaded-deref.rs:20:26: 20:40
        _81 = (move _82, move _83);      // scope 8 at ui/overloaded/overloaded-deref.rs:20:16: 20:41
        _80 = &_81;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _324 = const _;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(i32, i32), val: Unevaluated(main, [], Some(promoted[5])) }
        _90 = _324;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _79 = (move _80, move _90);      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _91 = (_79.0: &(i32, i32));      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _92 = (_79.1: &(i32, i32));      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _95 = _91;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _96 = _92;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _94 = <(i32, i32) as PartialEq>::eq(move _95, move _96) -> [return: bb32, unwind: bb142]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (i32, i32), &'b (i32, i32)) -> bool {<(i32, i32) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb32: {
        _93 = Not(move _94);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _93) -> [0: bb34, otherwise: bb33]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb33: {
        _97 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _99 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _101 = _91;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _100 = _101;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _103 = _92;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _102 = _103;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _104 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _98 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _99, move _100, move _102, move _104) -> bb142; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (i32, i32), &'b (i32, i32), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(i32, i32), (i32, i32)>}, val: Value(<ZST>) }
    }

    bb34: {
        drop(_86) -> [return: bb35, unwind: bb145]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb35: {
        _108 = const "foo";              // scope 8 at ui/overloaded/overloaded-deref.rs:22:21: 22:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:22:21: 22:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _107 = _108;                     // scope 8 at ui/overloaded/overloaded-deref.rs:22:21: 22:38
        _106 = <str as ToString>::to_string(move _107) -> [return: bb36, unwind: bb145]; // scope 8 at ui/overloaded/overloaded-deref.rs:22:21: 22:38
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:22:27: 22:36
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb36: {
        _105 = Rc::<String>::new(move _106) -> [return: bb37, unwind: bb145]; // scope 8 at ui/overloaded/overloaded-deref.rs:22:13: 22:39
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:22:13: 22:20
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(String) -> Rc<String> {Rc::<String>::new}, val: Value(<ZST>) }
    }

    bb37: {
        _112 = &_105;                    // scope 11 at ui/overloaded/overloaded-deref.rs:23:17: 23:18
        _111 = <Rc<String> as Deref>::deref(move _112) -> [return: bb38, unwind: bb141]; // scope 11 at ui/overloaded/overloaded-deref.rs:23:16: 23:18
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:23:16: 23:18
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<String>) -> &'a <Rc<String> as Deref>::Target {<Rc<String> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb38: {
        _110 = _111;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _116 = const "foo";              // scope 11 at ui/overloaded/overloaded-deref.rs:23:20: 23:25
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:23:20: 23:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _115 = _116;                     // scope 11 at ui/overloaded/overloaded-deref.rs:23:20: 23:37
        _114 = <str as ToString>::to_string(move _115) -> [return: bb39, unwind: bb141]; // scope 11 at ui/overloaded/overloaded-deref.rs:23:20: 23:37
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:23:26: 23:35
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb39: {
        _113 = &_114;                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _109 = (move _110, move _113);   // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _117 = (_109.0: &std::string::String); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _118 = (_109.1: &std::string::String); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _121 = _117;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _122 = _118;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _120 = <String as PartialEq>::eq(move _121, move _122) -> [return: bb40, unwind: bb140]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb40: {
        _119 = Not(move _120);           // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _119) -> [0: bb42, otherwise: bb41]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb41: {
        _123 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _125 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _127 = _117;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _126 = _127;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _129 = _118;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _128 = _129;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _130 = Option::<Arguments<'_>>::None; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _124 = core::panicking::assert_failed::<String, String>(move _125, move _126, move _128, move _130) -> bb140; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb42: {
        drop(_114) -> [return: bb43, unwind: bb141]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb43: {
        _134 = &_105;                    // scope 11 at ui/overloaded/overloaded-deref.rs:24:18: 24:19
        _133 = <Rc<String> as Deref>::deref(move _134) -> [return: bb44, unwind: bb141]; // scope 11 at ui/overloaded/overloaded-deref.rs:24:16: 24:20
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:24:16: 24:20
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<String>) -> &'a <Rc<String> as Deref>::Target {<Rc<String> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb44: {
        _132 = _133;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _323 = const _;                  // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[4])) }
        _135 = _323;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _131 = (move _132, move _135);   // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _136 = (_131.0: &std::string::String); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _137 = (_131.1: &&str);          // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _140 = _136;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _141 = _137;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _139 = <String as PartialEq<&str>>::eq(move _140, move _141) -> [return: bb45, unwind: bb141]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb45: {
        _138 = Not(move _139);           // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _138) -> [0: bb47, otherwise: bb46]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb46: {
        _142 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _144 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _146 = _136;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _145 = _146;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _148 = _137;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _147 = _148;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _149 = Option::<Arguments<'_>>::None; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _143 = core::panicking::assert_failed::<String, &str>(move _144, move _145, move _147, move _149) -> bb141; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb47: {
        _152 = <String as From<&str>>::from(const "foo") -> [return: bb48, unwind: bb141]; // scope 11 at ui/overloaded/overloaded-deref.rs:26:38: 26:57
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:26:38: 26:50
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:26:51: 26:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb48: {
        _151 = RefCell::<String>::new(move _152) -> [return: bb49, unwind: bb141]; // scope 11 at ui/overloaded/overloaded-deref.rs:26:25: 26:58
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:26:25: 26:37
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn(String) -> RefCell<String> {RefCell::<String>::new}, val: Value(<ZST>) }
    }

    bb49: {
        _150 = Rc::<RefCell<String>>::new(move _151) -> [return: bb50, unwind: bb141]; // scope 11 at ui/overloaded/overloaded-deref.rs:26:17: 26:59
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:26:17: 26:24
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(RefCell<String>) -> Rc<RefCell<String>> {Rc::<RefCell<String>>::new}, val: Value(<ZST>) }
    }

    bb50: {
        _160 = &_150;                    // scope 16 at ui/overloaded/overloaded-deref.rs:27:9: 27:14
        _159 = <Rc<RefCell<String>> as Deref>::deref(move _160) -> [return: bb51, unwind: bb139]; // scope 16 at ui/overloaded/overloaded-deref.rs:27:7: 27:15
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:27:7: 27:15
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<String>>) -> &'a <Rc<RefCell<String>> as Deref>::Target {<Rc<RefCell<String>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb51: {
        _158 = _159;                     // scope 16 at ui/overloaded/overloaded-deref.rs:27:7: 27:28
        _157 = RefCell::<String>::borrow_mut(move _158) -> [return: bb52, unwind: bb139]; // scope 16 at ui/overloaded/overloaded-deref.rs:27:7: 27:28
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:27:16: 27:26
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<String>) -> RefMut<'a, String> {RefCell::<String>::borrow_mut}, val: Value(<ZST>) }
    }

    bb52: {
        _156 = &mut _157;                // scope 16 at ui/overloaded/overloaded-deref.rs:27:7: 27:28
        _155 = <RefMut<'_, String> as DerefMut>::deref_mut(move _156) -> [return: bb53, unwind: bb138]; // scope 16 at ui/overloaded/overloaded-deref.rs:27:5: 27:29
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:27:5: 27:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, String>) -> &'a mut <RefMut<'_, String> as Deref>::Target {<RefMut<'_, String> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb53: {
        _154 = &mut (*_155);             // scope 16 at ui/overloaded/overloaded-deref.rs:27:5: 27:45
        _162 = const "bar";              // scope 16 at ui/overloaded/overloaded-deref.rs:27:39: 27:44
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:27:39: 27:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _161 = _162;                     // scope 16 at ui/overloaded/overloaded-deref.rs:27:39: 27:44
        _153 = String::push_str(move _154, move _161) -> [return: bb54, unwind: bb138]; // scope 16 at ui/overloaded/overloaded-deref.rs:27:5: 27:45
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:27:30: 27:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut String, &'b str) {String::push_str}, val: Value(<ZST>) }
    }

    bb54: {
        drop(_157) -> [return: bb55, unwind: bb139]; // scope 16 at ui/overloaded/overloaded-deref.rs:27:45: 27:46
    }

    bb55: {
        _170 = &_150;                    // scope 16 at ui/overloaded/overloaded-deref.rs:29:20: 29:25
        _169 = <Rc<RefCell<String>> as Deref>::deref(move _170) -> [return: bb56, unwind: bb139]; // scope 16 at ui/overloaded/overloaded-deref.rs:29:18: 29:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:29:18: 29:26
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<String>>) -> &'a <Rc<RefCell<String>> as Deref>::Target {<Rc<RefCell<String>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb56: {
        _168 = _169;                     // scope 16 at ui/overloaded/overloaded-deref.rs:29:18: 29:35
        _167 = RefCell::<String>::borrow(move _168) -> [return: bb57, unwind: bb139]; // scope 16 at ui/overloaded/overloaded-deref.rs:29:18: 29:35
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:29:27: 29:33
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<String>) -> Ref<'a, String> {RefCell::<String>::borrow}, val: Value(<ZST>) }
    }

    bb57: {
        _166 = &_167;                    // scope 16 at ui/overloaded/overloaded-deref.rs:29:18: 29:35
        _165 = <Ref<'_, String> as Deref>::deref(move _166) -> [return: bb58, unwind: bb137]; // scope 16 at ui/overloaded/overloaded-deref.rs:29:16: 29:36
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:29:16: 29:36
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, String>) -> &'a <Ref<'_, String> as Deref>::Target {<Ref<'_, String> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb58: {
        _164 = _165;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _322 = const _;                  // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[3])) }
        _171 = _322;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _163 = (move _164, move _171);   // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _172 = (_163.0: &std::string::String); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _173 = (_163.1: &&str);          // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _176 = _172;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _177 = _173;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _175 = <String as PartialEq<&str>>::eq(move _176, move _177) -> [return: bb59, unwind: bb137]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb59: {
        _174 = Not(move _175);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _174) -> [0: bb61, otherwise: bb60]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb60: {
        _178 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _180 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _182 = _172;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _181 = _182;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _184 = _173;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _183 = _184;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _185 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _179 = core::panicking::assert_failed::<String, &str>(move _180, move _181, move _183, move _185) -> bb137; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb61: {
        drop(_167) -> [return: bb62, unwind: bb139]; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb62: {
        _193 = &_150;                    // scope 16 at ui/overloaded/overloaded-deref.rs:30:20: 30:25
        _192 = <Rc<RefCell<String>> as Deref>::deref(move _193) -> [return: bb63, unwind: bb139]; // scope 16 at ui/overloaded/overloaded-deref.rs:30:18: 30:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:30:18: 30:26
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<String>>) -> &'a <Rc<RefCell<String>> as Deref>::Target {<Rc<RefCell<String>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb63: {
        _191 = _192;                     // scope 16 at ui/overloaded/overloaded-deref.rs:30:18: 30:39
        _190 = RefCell::<String>::borrow_mut(move _191) -> [return: bb64, unwind: bb139]; // scope 16 at ui/overloaded/overloaded-deref.rs:30:18: 30:39
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:30:27: 30:37
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<String>) -> RefMut<'a, String> {RefCell::<String>::borrow_mut}, val: Value(<ZST>) }
    }

    bb64: {
        _189 = &_190;                    // scope 16 at ui/overloaded/overloaded-deref.rs:30:18: 30:39
        _188 = <RefMut<'_, String> as Deref>::deref(move _189) -> [return: bb65, unwind: bb136]; // scope 16 at ui/overloaded/overloaded-deref.rs:30:16: 30:40
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:30:16: 30:40
                                         // + literal: Const { ty: for<'a> fn(&'a RefMut<'_, String>) -> &'a <RefMut<'_, String> as Deref>::Target {<RefMut<'_, String> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb65: {
        _187 = _188;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _321 = const _;                  // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[2])) }
        _194 = _321;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _186 = (move _187, move _194);   // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _195 = (_186.0: &std::string::String); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _196 = (_186.1: &&str);          // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _199 = _195;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _200 = _196;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _198 = <String as PartialEq<&str>>::eq(move _199, move _200) -> [return: bb66, unwind: bb136]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb66: {
        _197 = Not(move _198);           // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _197) -> [0: bb68, otherwise: bb67]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb67: {
        _201 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _203 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _205 = _195;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _204 = _205;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _207 = _196;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _206 = _207;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _208 = Option::<Arguments<'_>>::None; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _202 = core::panicking::assert_failed::<String, &str>(move _203, move _204, move _206, move _208) -> bb136; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb68: {
        drop(_190) -> [return: bb69, unwind: bb139]; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb69: {
        _211 = Point { x: const 1_isize, y: const 2_isize }; // scope 16 at ui/overloaded/overloaded-deref.rs:32:34: 32:52
        _210 = RefCell::<Point>::new(move _211) -> [return: bb70, unwind: bb139]; // scope 16 at ui/overloaded/overloaded-deref.rs:32:21: 32:53
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:32:21: 32:33
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn(Point) -> RefCell<Point> {RefCell::<Point>::new}, val: Value(<ZST>) }
    }

    bb70: {
        _209 = Rc::<RefCell<Point>>::new(move _210) -> [return: bb71, unwind: bb139]; // scope 16 at ui/overloaded/overloaded-deref.rs:32:13: 32:54
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:32:13: 32:20
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn(RefCell<Point>) -> Rc<RefCell<Point>> {Rc::<RefCell<Point>>::new}, val: Value(<ZST>) }
    }

    bb71: {
        _217 = &_209;                    // scope 21 at ui/overloaded/overloaded-deref.rs:33:9: 33:10
        _216 = <Rc<RefCell<Point>> as Deref>::deref(move _217) -> [return: bb72, unwind: bb135]; // scope 21 at ui/overloaded/overloaded-deref.rs:33:7: 33:11
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:33:7: 33:11
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Point>>) -> &'a <Rc<RefCell<Point>> as Deref>::Target {<Rc<RefCell<Point>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb72: {
        _215 = _216;                     // scope 21 at ui/overloaded/overloaded-deref.rs:33:7: 33:24
        _214 = RefCell::<Point>::borrow_mut(move _215) -> [return: bb73, unwind: bb135]; // scope 21 at ui/overloaded/overloaded-deref.rs:33:7: 33:24
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:33:12: 33:22
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Point>) -> RefMut<'a, Point> {RefCell::<Point>::borrow_mut}, val: Value(<ZST>) }
    }

    bb73: {
        _213 = &mut _214;                // scope 21 at ui/overloaded/overloaded-deref.rs:33:7: 33:24
        _212 = <RefMut<'_, Point> as DerefMut>::deref_mut(move _213) -> [return: bb74, unwind: bb134]; // scope 21 at ui/overloaded/overloaded-deref.rs:33:5: 33:25
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:33:5: 33:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, Point>) -> &'a mut <RefMut<'_, Point> as Deref>::Target {<RefMut<'_, Point> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb74: {
        ((*_212).0: isize) = const 3_isize; // scope 21 at ui/overloaded/overloaded-deref.rs:33:5: 33:31
        drop(_214) -> [return: bb75, unwind: bb135]; // scope 21 at ui/overloaded/overloaded-deref.rs:33:31: 33:32
    }

    bb75: {
        _223 = &_209;                    // scope 21 at ui/overloaded/overloaded-deref.rs:34:9: 34:10
        _222 = <Rc<RefCell<Point>> as Deref>::deref(move _223) -> [return: bb76, unwind: bb135]; // scope 21 at ui/overloaded/overloaded-deref.rs:34:7: 34:11
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:34:7: 34:11
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Point>>) -> &'a <Rc<RefCell<Point>> as Deref>::Target {<Rc<RefCell<Point>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb76: {
        _221 = _222;                     // scope 21 at ui/overloaded/overloaded-deref.rs:34:7: 34:24
        _220 = RefCell::<Point>::borrow_mut(move _221) -> [return: bb77, unwind: bb135]; // scope 21 at ui/overloaded/overloaded-deref.rs:34:7: 34:24
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:34:12: 34:22
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Point>) -> RefMut<'a, Point> {RefCell::<Point>::borrow_mut}, val: Value(<ZST>) }
    }

    bb77: {
        _219 = &mut _220;                // scope 21 at ui/overloaded/overloaded-deref.rs:34:7: 34:24
        _218 = <RefMut<'_, Point> as DerefMut>::deref_mut(move _219) -> [return: bb78, unwind: bb133]; // scope 21 at ui/overloaded/overloaded-deref.rs:34:5: 34:25
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:34:5: 34:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, Point>) -> &'a mut <RefMut<'_, Point> as Deref>::Target {<RefMut<'_, Point> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb78: {
        _224 = CheckedAdd(((*_218).1: isize), const 3_isize); // scope 21 at ui/overloaded/overloaded-deref.rs:34:5: 34:32
        assert(!move (_224.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_218).1: isize), const 3_isize) -> [success: bb79, unwind: bb133]; // scope 21 at ui/overloaded/overloaded-deref.rs:34:5: 34:32
    }

    bb79: {
        ((*_218).1: isize) = move (_224.0: isize); // scope 21 at ui/overloaded/overloaded-deref.rs:34:5: 34:32
        drop(_220) -> [return: bb80, unwind: bb135]; // scope 21 at ui/overloaded/overloaded-deref.rs:34:32: 34:33
    }

    bb80: {
        _232 = &_209;                    // scope 21 at ui/overloaded/overloaded-deref.rs:35:19: 35:20
        _231 = <Rc<RefCell<Point>> as Deref>::deref(move _232) -> [return: bb81, unwind: bb135]; // scope 21 at ui/overloaded/overloaded-deref.rs:35:17: 35:21
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:35:17: 35:21
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Point>>) -> &'a <Rc<RefCell<Point>> as Deref>::Target {<Rc<RefCell<Point>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb81: {
        _230 = _231;                     // scope 21 at ui/overloaded/overloaded-deref.rs:35:17: 35:30
        _229 = RefCell::<Point>::borrow(move _230) -> [return: bb82, unwind: bb135]; // scope 21 at ui/overloaded/overloaded-deref.rs:35:17: 35:30
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:35:22: 35:28
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Point>) -> Ref<'a, Point> {RefCell::<Point>::borrow}, val: Value(<ZST>) }
    }

    bb82: {
        _228 = &_229;                    // scope 21 at ui/overloaded/overloaded-deref.rs:35:17: 35:30
        _227 = <Ref<'_, Point> as Deref>::deref(move _228) -> [return: bb83, unwind: bb132]; // scope 21 at ui/overloaded/overloaded-deref.rs:35:16: 35:30
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:35:16: 35:30
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Point>) -> &'a <Ref<'_, Point> as Deref>::Target {<Ref<'_, Point> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb83: {
        _226 = _227;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _320 = const _;                  // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Point, val: Unevaluated(main, [], Some(promoted[1])) }
        _233 = _320;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _225 = (move _226, move _233);   // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _234 = (_225.0: &Point);         // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _235 = (_225.1: &Point);         // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _238 = _234;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _239 = _235;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _237 = <Point as PartialEq>::eq(move _238, move _239) -> [return: bb84, unwind: bb132]; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Point, &'b Point) -> bool {<Point as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb84: {
        _236 = Not(move _237);           // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _236) -> [0: bb86, otherwise: bb85]; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb85: {
        _240 = const core::panicking::AssertKind::Eq; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _242 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _244 = _234;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _243 = _244;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _246 = _235;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _245 = _246;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _247 = Option::<Arguments<'_>>::None; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _241 = core::panicking::assert_failed::<Point, Point>(move _242, move _243, move _245, move _247) -> bb132; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Point, &'b Point, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Point, Point>}, val: Value(<ZST>) }
    }

    bb86: {
        drop(_229) -> [return: bb87, unwind: bb135]; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb87: {
        _253 = const 12_usize;           // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _254 = const 4_usize;            // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _255 = alloc::alloc::exchange_malloc(move _253, move _254) -> [return: bb88, unwind: bb135]; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb88: {
        _256 = ShallowInitBox(move _255, [i32; 3]); // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _332 = (((_256.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]); // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_332) = [const 1_i32, const 2_i32, const 3_i32]; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _252 = move _256;                // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _251 = move _252 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _250 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _251) -> [return: bb89, unwind: bb135]; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb89: {
        _249 = RefCell::<Vec<i32>>::new(move _250) -> [return: bb90, unwind: bb135]; // scope 21 at ui/overloaded/overloaded-deref.rs:37:21: 37:48
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:37:21: 37:33
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: fn(Vec<i32>) -> RefCell<Vec<i32>> {RefCell::<Vec<i32>>::new}, val: Value(<ZST>) }
    }

    bb90: {
        _248 = Rc::<RefCell<Vec<i32>>>::new(move _249) -> [return: bb91, unwind: bb135]; // scope 21 at ui/overloaded/overloaded-deref.rs:37:13: 37:49
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:37:13: 37:20
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: fn(RefCell<Vec<i32>>) -> Rc<RefCell<Vec<i32>>> {Rc::<RefCell<Vec<i32>>>::new}, val: Value(<ZST>) }
    }

    bb91: {
        _264 = &_248;                    // scope 24 at ui/overloaded/overloaded-deref.rs:38:9: 38:10
        _263 = <Rc<RefCell<Vec<i32>>> as Deref>::deref(move _264) -> [return: bb92, unwind: bb131]; // scope 24 at ui/overloaded/overloaded-deref.rs:38:7: 38:11
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:38:7: 38:11
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<i32>>>) -> &'a <Rc<RefCell<Vec<i32>>> as Deref>::Target {<Rc<RefCell<Vec<i32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb92: {
        _262 = _263;                     // scope 24 at ui/overloaded/overloaded-deref.rs:38:7: 38:24
        _261 = RefCell::<Vec<i32>>::borrow_mut(move _262) -> [return: bb93, unwind: bb131]; // scope 24 at ui/overloaded/overloaded-deref.rs:38:7: 38:24
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:38:12: 38:22
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<i32>>) -> RefMut<'a, Vec<i32>> {RefCell::<Vec<i32>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb93: {
        _260 = &mut _261;                // scope 24 at ui/overloaded/overloaded-deref.rs:38:7: 38:24
        _259 = <RefMut<'_, Vec<i32>> as DerefMut>::deref_mut(move _260) -> [return: bb94, unwind: bb130]; // scope 24 at ui/overloaded/overloaded-deref.rs:38:5: 38:25
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:38:5: 38:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, Vec<i32>>) -> &'a mut <RefMut<'_, Vec<i32>> as Deref>::Target {<RefMut<'_, Vec<i32>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb94: {
        _258 = &mut (*_259);             // scope 24 at ui/overloaded/overloaded-deref.rs:38:5: 38:25
        _257 = <Vec<i32> as IndexMut<usize>>::index_mut(move _258, const 0_usize) -> [return: bb95, unwind: bb130]; // scope 24 at ui/overloaded/overloaded-deref.rs:38:5: 38:28
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:38:5: 38:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, usize) -> &'a mut <Vec<i32> as Index<usize>>::Output {<Vec<i32> as IndexMut<usize>>::index_mut}, val: Value(<ZST>) }
    }

    bb95: {
        (*_257) = const 3_i32;           // scope 24 at ui/overloaded/overloaded-deref.rs:38:5: 38:32
        drop(_261) -> [return: bb96, unwind: bb131]; // scope 24 at ui/overloaded/overloaded-deref.rs:38:32: 38:33
    }

    bb96: {
        _272 = &_248;                    // scope 24 at ui/overloaded/overloaded-deref.rs:39:9: 39:10
        _271 = <Rc<RefCell<Vec<i32>>> as Deref>::deref(move _272) -> [return: bb97, unwind: bb131]; // scope 24 at ui/overloaded/overloaded-deref.rs:39:7: 39:11
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:39:7: 39:11
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<i32>>>) -> &'a <Rc<RefCell<Vec<i32>>> as Deref>::Target {<Rc<RefCell<Vec<i32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb97: {
        _270 = _271;                     // scope 24 at ui/overloaded/overloaded-deref.rs:39:7: 39:24
        _269 = RefCell::<Vec<i32>>::borrow_mut(move _270) -> [return: bb98, unwind: bb131]; // scope 24 at ui/overloaded/overloaded-deref.rs:39:7: 39:24
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:39:12: 39:22
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<i32>>) -> RefMut<'a, Vec<i32>> {RefCell::<Vec<i32>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb98: {
        _268 = &mut _269;                // scope 24 at ui/overloaded/overloaded-deref.rs:39:7: 39:24
        _267 = <RefMut<'_, Vec<i32>> as DerefMut>::deref_mut(move _268) -> [return: bb99, unwind: bb129]; // scope 24 at ui/overloaded/overloaded-deref.rs:39:5: 39:25
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:39:5: 39:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, Vec<i32>>) -> &'a mut <RefMut<'_, Vec<i32>> as Deref>::Target {<RefMut<'_, Vec<i32>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb99: {
        _266 = &mut (*_267);             // scope 24 at ui/overloaded/overloaded-deref.rs:39:5: 39:25
        _265 = <Vec<i32> as IndexMut<usize>>::index_mut(move _266, const 1_usize) -> [return: bb100, unwind: bb129]; // scope 24 at ui/overloaded/overloaded-deref.rs:39:5: 39:28
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:39:5: 39:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, usize) -> &'a mut <Vec<i32> as Index<usize>>::Output {<Vec<i32> as IndexMut<usize>>::index_mut}, val: Value(<ZST>) }
    }

    bb100: {
        _273 = CheckedAdd((*_265), const 3_i32); // scope 24 at ui/overloaded/overloaded-deref.rs:39:5: 39:33
        assert(!move (_273.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_265), const 3_i32) -> [success: bb101, unwind: bb129]; // scope 24 at ui/overloaded/overloaded-deref.rs:39:5: 39:33
    }

    bb101: {
        (*_265) = move (_273.0: i32);    // scope 24 at ui/overloaded/overloaded-deref.rs:39:5: 39:33
        drop(_269) -> [return: bb102, unwind: bb131]; // scope 24 at ui/overloaded/overloaded-deref.rs:39:33: 39:34
    }

    bb102: {
        _285 = &_248;                    // scope 24 at ui/overloaded/overloaded-deref.rs:40:21: 40:22
        _284 = <Rc<RefCell<Vec<i32>>> as Deref>::deref(move _285) -> [return: bb103, unwind: bb131]; // scope 24 at ui/overloaded/overloaded-deref.rs:40:19: 40:23
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:40:19: 40:23
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<i32>>>) -> &'a <Rc<RefCell<Vec<i32>>> as Deref>::Target {<Rc<RefCell<Vec<i32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb103: {
        _283 = _284;                     // scope 24 at ui/overloaded/overloaded-deref.rs:40:19: 40:32
        _282 = RefCell::<Vec<i32>>::borrow(move _283) -> [return: bb104, unwind: bb131]; // scope 24 at ui/overloaded/overloaded-deref.rs:40:19: 40:32
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:40:24: 40:30
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<i32>>) -> Ref<'a, Vec<i32>> {RefCell::<Vec<i32>>::borrow}, val: Value(<ZST>) }
    }

    bb104: {
        _281 = &_282;                    // scope 24 at ui/overloaded/overloaded-deref.rs:40:19: 40:32
        _280 = <Ref<'_, Vec<i32>> as Deref>::deref(move _281) -> [return: bb105, unwind: bb128]; // scope 24 at ui/overloaded/overloaded-deref.rs:40:17: 40:33
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:40:17: 40:33
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<i32>>) -> &'a <Ref<'_, Vec<i32>> as Deref>::Target {<Ref<'_, Vec<i32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb105: {
        _279 = _280;                     // scope 24 at ui/overloaded/overloaded-deref.rs:40:17: 40:33
        _278 = <Vec<i32> as Index<usize>>::index(move _279, const 0_usize) -> [return: bb106, unwind: bb128]; // scope 24 at ui/overloaded/overloaded-deref.rs:40:17: 40:36
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:40:17: 40:36
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>, usize) -> &'a <Vec<i32> as Index<usize>>::Output {<Vec<i32> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb106: {
        _277 = (*_278);                  // scope 24 at ui/overloaded/overloaded-deref.rs:40:17: 40:36
        _294 = &_248;                    // scope 24 at ui/overloaded/overloaded-deref.rs:41:21: 41:22
        _293 = <Rc<RefCell<Vec<i32>>> as Deref>::deref(move _294) -> [return: bb107, unwind: bb128]; // scope 24 at ui/overloaded/overloaded-deref.rs:41:19: 41:23
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:41:19: 41:23
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<i32>>>) -> &'a <Rc<RefCell<Vec<i32>>> as Deref>::Target {<Rc<RefCell<Vec<i32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb107: {
        _292 = _293;                     // scope 24 at ui/overloaded/overloaded-deref.rs:41:19: 41:32
        _291 = RefCell::<Vec<i32>>::borrow(move _292) -> [return: bb108, unwind: bb128]; // scope 24 at ui/overloaded/overloaded-deref.rs:41:19: 41:32
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:41:24: 41:30
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<i32>>) -> Ref<'a, Vec<i32>> {RefCell::<Vec<i32>>::borrow}, val: Value(<ZST>) }
    }

    bb108: {
        _290 = &_291;                    // scope 24 at ui/overloaded/overloaded-deref.rs:41:19: 41:32
        _289 = <Ref<'_, Vec<i32>> as Deref>::deref(move _290) -> [return: bb109, unwind: bb127]; // scope 24 at ui/overloaded/overloaded-deref.rs:41:17: 41:33
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:41:17: 41:33
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<i32>>) -> &'a <Ref<'_, Vec<i32>> as Deref>::Target {<Ref<'_, Vec<i32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb109: {
        _288 = _289;                     // scope 24 at ui/overloaded/overloaded-deref.rs:41:17: 41:33
        _287 = <Vec<i32> as Index<usize>>::index(move _288, const 1_usize) -> [return: bb110, unwind: bb127]; // scope 24 at ui/overloaded/overloaded-deref.rs:41:17: 41:36
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:41:17: 41:36
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>, usize) -> &'a <Vec<i32> as Index<usize>>::Output {<Vec<i32> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb110: {
        _286 = (*_287);                  // scope 24 at ui/overloaded/overloaded-deref.rs:41:17: 41:36
        _303 = &_248;                    // scope 24 at ui/overloaded/overloaded-deref.rs:42:21: 42:22
        _302 = <Rc<RefCell<Vec<i32>>> as Deref>::deref(move _303) -> [return: bb111, unwind: bb127]; // scope 24 at ui/overloaded/overloaded-deref.rs:42:19: 42:23
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:42:19: 42:23
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<i32>>>) -> &'a <Rc<RefCell<Vec<i32>>> as Deref>::Target {<Rc<RefCell<Vec<i32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb111: {
        _301 = _302;                     // scope 24 at ui/overloaded/overloaded-deref.rs:42:19: 42:32
        _300 = RefCell::<Vec<i32>>::borrow(move _301) -> [return: bb112, unwind: bb127]; // scope 24 at ui/overloaded/overloaded-deref.rs:42:19: 42:32
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:42:24: 42:30
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<i32>>) -> Ref<'a, Vec<i32>> {RefCell::<Vec<i32>>::borrow}, val: Value(<ZST>) }
    }

    bb112: {
        _299 = &_300;                    // scope 24 at ui/overloaded/overloaded-deref.rs:42:19: 42:32
        _298 = <Ref<'_, Vec<i32>> as Deref>::deref(move _299) -> [return: bb113, unwind: bb126]; // scope 24 at ui/overloaded/overloaded-deref.rs:42:17: 42:33
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:42:17: 42:33
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<i32>>) -> &'a <Ref<'_, Vec<i32>> as Deref>::Target {<Ref<'_, Vec<i32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb113: {
        _297 = _298;                     // scope 24 at ui/overloaded/overloaded-deref.rs:42:17: 42:33
        _296 = <Vec<i32> as Index<usize>>::index(move _297, const 2_usize) -> [return: bb114, unwind: bb126]; // scope 24 at ui/overloaded/overloaded-deref.rs:42:17: 42:36
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:42:17: 42:36
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>, usize) -> &'a <Vec<i32> as Index<usize>>::Output {<Vec<i32> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb114: {
        _295 = (*_296);                  // scope 24 at ui/overloaded/overloaded-deref.rs:42:17: 42:36
        _276 = (move _277, move _286, move _295); // scope 24 at ui/overloaded/overloaded-deref.rs:40:16: 42:37
        _275 = &_276;                    // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _319 = const _;                  // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(i32, i32, i32), val: Unevaluated(main, [], Some(promoted[0])) }
        _304 = _319;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _274 = (move _275, move _304);   // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _305 = (_274.0: &(i32, i32, i32)); // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _306 = (_274.1: &(i32, i32, i32)); // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _309 = _305;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _310 = _306;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _308 = <(i32, i32, i32) as PartialEq>::eq(move _309, move _310) -> [return: bb115, unwind: bb126]; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (i32, i32, i32), &'b (i32, i32, i32)) -> bool {<(i32, i32, i32) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb115: {
        _307 = Not(move _308);           // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _307) -> [0: bb117, otherwise: bb116]; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb116: {
        _311 = const core::panicking::AssertKind::Eq; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _313 = const core::panicking::AssertKind::Eq; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _315 = _305;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _314 = _315;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _317 = _306;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _316 = _317;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _318 = Option::<Arguments<'_>>::None; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _312 = core::panicking::assert_failed::<(i32, i32, i32), (i32, i32, i32)>(move _313, move _314, move _316, move _318) -> bb126; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (i32, i32, i32), &'b (i32, i32, i32), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(i32, i32, i32), (i32, i32, i32)>}, val: Value(<ZST>) }
    }

    bb117: {
        drop(_300) -> [return: bb118, unwind: bb127]; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb118: {
        drop(_291) -> [return: bb119, unwind: bb128]; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb119: {
        drop(_282) -> [return: bb120, unwind: bb131]; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb120: {
        drop(_248) -> [return: bb121, unwind: bb135]; // scope 21 at ui/overloaded/overloaded-deref.rs:43:1: 43:2
    }

    bb121: {
        drop(_209) -> [return: bb122, unwind: bb139]; // scope 16 at ui/overloaded/overloaded-deref.rs:43:1: 43:2
    }

    bb122: {
        drop(_150) -> [return: bb123, unwind: bb141]; // scope 11 at ui/overloaded/overloaded-deref.rs:43:1: 43:2
    }

    bb123: {
        drop(_105) -> [return: bb124, unwind: bb145]; // scope 8 at ui/overloaded/overloaded-deref.rs:43:1: 43:2
    }

    bb124: {
        drop(_64) -> bb125;              // scope 0 at ui/overloaded/overloaded-deref.rs:43:1: 43:2
    }

    bb125: {
        return;                          // scope 0 at ui/overloaded/overloaded-deref.rs:43:2: 43:2
    }

    bb126 (cleanup): {
        drop(_300) -> bb127;             // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb127 (cleanup): {
        drop(_291) -> bb128;             // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb128 (cleanup): {
        drop(_282) -> bb131;             // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb129 (cleanup): {
        drop(_269) -> bb131;             // scope 24 at ui/overloaded/overloaded-deref.rs:39:33: 39:34
    }

    bb130 (cleanup): {
        drop(_261) -> bb131;             // scope 24 at ui/overloaded/overloaded-deref.rs:38:32: 38:33
    }

    bb131 (cleanup): {
        drop(_248) -> bb135;             // scope 21 at ui/overloaded/overloaded-deref.rs:43:1: 43:2
    }

    bb132 (cleanup): {
        drop(_229) -> bb135;             // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb133 (cleanup): {
        drop(_220) -> bb135;             // scope 21 at ui/overloaded/overloaded-deref.rs:34:32: 34:33
    }

    bb134 (cleanup): {
        drop(_214) -> bb135;             // scope 21 at ui/overloaded/overloaded-deref.rs:33:31: 33:32
    }

    bb135 (cleanup): {
        drop(_209) -> bb139;             // scope 16 at ui/overloaded/overloaded-deref.rs:43:1: 43:2
    }

    bb136 (cleanup): {
        drop(_190) -> bb139;             // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb137 (cleanup): {
        drop(_167) -> bb139;             // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb138 (cleanup): {
        drop(_157) -> bb139;             // scope 16 at ui/overloaded/overloaded-deref.rs:27:45: 27:46
    }

    bb139 (cleanup): {
        drop(_150) -> bb141;             // scope 11 at ui/overloaded/overloaded-deref.rs:43:1: 43:2
    }

    bb140 (cleanup): {
        drop(_114) -> bb141;             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb141 (cleanup): {
        drop(_105) -> bb145;             // scope 8 at ui/overloaded/overloaded-deref.rs:43:1: 43:2
    }

    bb142 (cleanup): {
        drop(_86) -> bb145;              // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb143 (cleanup): {
        drop(_75) -> bb145;              // scope 8 at ui/overloaded/overloaded-deref.rs:19:27: 19:28
    }

    bb144 (cleanup): {
        drop(_69) -> bb145;              // scope 7 at ui/overloaded/overloaded-deref.rs:18:33: 18:34
    }

    bb145 (cleanup): {
        drop(_64) -> bb149;              // scope 0 at ui/overloaded/overloaded-deref.rs:43:1: 43:2
    }

    bb146 (cleanup): {
        drop(_47) -> bb149;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb147 (cleanup): {
        drop(_25) -> bb149;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb148 (cleanup): {
        drop(_5) -> bb149;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb149 (cleanup): {
        resume;                          // scope 0 at ui/overloaded/overloaded-deref.rs:12:1: 43:2
    }
}

promoted[0] in main: &(i32, i32, i32) = {
    let mut _0: &(i32, i32, i32);        // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: (i32, i32, i32);         // in scope 0 at ui/overloaded/overloaded-deref.rs:42:39: 42:48

    bb0: {
        _1 = (const 3_i32, const 5_i32, const 3_i32); // scope 0 at ui/overloaded/overloaded-deref.rs:42:39: 42:48
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &Point = {
    let mut _0: &Point;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Point;                   // in scope 0 at ui/overloaded/overloaded-deref.rs:35:32: 35:50

    bb0: {
        _1 = Point { x: const 3_isize, y: const 5_isize }; // scope 0 at ui/overloaded/overloaded-deref.rs:35:32: 35:50
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/overloaded/overloaded-deref.rs:30:42: 30:50

    bb0: {
        _1 = const "foobar";             // scope 0 at ui/overloaded/overloaded-deref.rs:30:42: 30:50
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:30:42: 30:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/overloaded/overloaded-deref.rs:29:38: 29:46

    bb0: {
        _1 = const "foobar";             // scope 0 at ui/overloaded/overloaded-deref.rs:29:38: 29:46
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:29:38: 29:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/overloaded/overloaded-deref.rs:24:22: 24:27

    bb0: {
        _1 = const "foo";                // scope 0 at ui/overloaded/overloaded-deref.rs:24:22: 24:27
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-deref.rs:24:22: 24:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);             // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: (i32, i32);              // in scope 0 at ui/overloaded/overloaded-deref.rs:20:43: 20:49

    bb0: {
        _1 = (const 2_i32, const 5_i32); // scope 0 at ui/overloaded/overloaded-deref.rs:20:43: 20:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[6] in main: &Point = {
    let mut _0: &Point;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Point;                   // in scope 0 at ui/overloaded/overloaded-deref.rs:15:46: 15:64

    bb0: {
        _1 = Point { x: const 2_isize, y: const 4_isize }; // scope 0 at ui/overloaded/overloaded-deref.rs:15:46: 15:64
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[7] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/overloaded/overloaded-deref.rs:14:51: 14:52

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/overloaded/overloaded-deref.rs:14:51: 14:52
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/overloaded/overloaded-deref.rs:13:29: 13:30

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/overloaded/overloaded-deref.rs:13:29: 13:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
