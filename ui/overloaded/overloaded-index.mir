// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-index.rs:9:1: 9:26>::index(_1: &Foo, _2: isize) -> &isize {
    debug self => _1;
    debug z => _2;
    let mut _0: &isize;
    let _3: &isize;
    let _4: &isize;

    bb0: {
        switchInt(move _2) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = &((*_1).0: isize);
        _0 = _3;
        goto -> bb3;
    }

    bb2: {
        _4 = &((*_1).1: isize);
        _0 = _4;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/overloaded/overloaded-index.rs:21:1: 21:29>::index_mut(_1: &mut Foo, _2: isize) -> &mut isize {
    debug self => _1;
    debug z => _2;
    let mut _0: &mut isize;
    let mut _3: &mut isize;
    let mut _4: &mut isize;
    let mut _5: &mut isize;

    bb0: {
        switchInt(move _2) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _4 = &mut ((*_1).0: isize);
        _3 = _4;
        goto -> bb3;
    }

    bb2: {
        _5 = &mut ((*_1).1: isize);
        _3 = _5;
        goto -> bb3;
    }

    bb3: {
        _0 = _3;
        return;
    }
}

fn <impl at ui/overloaded/overloaded-index.rs:37:1: 37:19>::get(_1: isize) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = _1;
        return;
    }
}

fn <impl at ui/overloaded/overloaded-index.rs:37:1: 37:19>::get_from_ref(_1: &isize) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/overloaded/overloaded-index.rs:37:1: 37:19>::inc(_1: &mut isize) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        (*_1) = Add((*_1), const 1_isize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Foo;
    let mut _2: (&isize, &isize);
    let mut _3: &isize;
    let _4: &isize;
    let mut _5: &Foo;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: &mut isize;
    let mut _16: &mut Foo;
    let mut _17: (&isize, &isize);
    let mut _18: &isize;
    let _19: &isize;
    let mut _20: &Foo;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: isize;
    let mut _26: isize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: &mut isize;
    let mut _32: &mut Foo;
    let _34: &isize;
    let mut _35: &Foo;
    let mut _36: (&isize, &isize);
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: isize;
    let mut _42: isize;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let _46: ();
    let mut _47: &mut isize;
    let mut _48: &mut isize;
    let mut _49: &mut Foo;
    let mut _50: (&isize, &isize);
    let mut _51: &isize;
    let _52: isize;
    let mut _53: isize;
    let mut _54: &isize;
    let mut _55: &Foo;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: isize;
    let mut _61: isize;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: (&isize, &isize);
    let mut _66: &isize;
    let _67: isize;
    let mut _68: &isize;
    let _69: &isize;
    let mut _70: &Foo;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: isize;
    let mut _76: isize;
    let _78: !;
    let mut _79: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug f => _1;
        let _6: &isize;
        let _7: &isize;
        let _21: &isize;
        let _22: &isize;
        let _30: &mut isize;
        let _33: &isize;
        let _56: &isize;
        let _57: &isize;
        let _71: &isize;
        let _72: &isize;
        let mut _80: &isize;
        let mut _81: &isize;
        let mut _83: &isize;
        let mut _84: &isize;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug left_val => _21;
            debug right_val => _22;
            let _27: core::panicking::AssertKind;
            scope 5 {
                debug kind => _27;
            }
        }
        scope 6 {
            debug p => _30;
        }
        scope 7 {
            debug p => _33;
            let _37: &isize;
            let _38: &isize;
            let mut _82: &isize;
            scope 8 {
                debug left_val => _37;
                debug right_val => _38;
                let _43: core::panicking::AssertKind;
                scope 9 {
                    debug kind => _43;
                }
            }
        }
        scope 10 {
            debug left_val => _56;
            debug right_val => _57;
            let _62: core::panicking::AssertKind;
            scope 11 {
                debug kind => _62;
            }
        }
        scope 12 {
            debug left_val => _71;
            debug right_val => _72;
            let _77: core::panicking::AssertKind;
            scope 13 {
                debug kind => _77;
            }
        }
    }

    bb0: {
        _1 = Foo { x: const 1_isize, y: const 2_isize };
        _5 = &_1;
        _4 = <Foo as Index<isize>>::index(move _5, const 1_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = _4;
        _84 = const _;
        _2 = (move _3, _84);
        _6 = (_2.0: &isize);
        _7 = (_2.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _16 = &mut _1;
        _15 = <Foo as IndexMut<isize>>::index_mut(move _16, const 0_isize) -> [return: bb4, unwind continue];
    }

    bb4: {
        (*_15) = const 3_isize;
        _20 = &_1;
        _19 = <Foo as Index<isize>>::index(move _20, const 0_isize) -> [return: bb5, unwind continue];
    }

    bb5: {
        _18 = _19;
        _83 = const _;
        _17 = (move _18, _83);
        _21 = (_17.0: &isize);
        _22 = (_17.1: &isize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<isize, isize>(move _27, _21, _22, move _29) -> unwind continue;
    }

    bb7: {
        _32 = &mut _1;
        _31 = <Foo as IndexMut<isize>>::index_mut(move _32, const 1_isize) -> [return: bb8, unwind continue];
    }

    bb8: {
        _30 = _31;
        (*_30) = const 4_isize;
        _35 = &_1;
        _34 = <Foo as Index<isize>>::index(move _35, const 1_isize) -> [return: bb9, unwind continue];
    }

    bb9: {
        _33 = _34;
        _82 = const _;
        _36 = (_33, _82);
        _37 = (_36.0: &isize);
        _38 = (_36.1: &isize);
        _41 = (*_37);
        _42 = (*_38);
        _40 = Eq(move _41, move _42);
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<isize, isize>(move _43, _37, _38, move _45) -> unwind continue;
    }

    bb11: {
        _49 = &mut _1;
        _48 = <Foo as IndexMut<isize>>::index_mut(move _49, const 1_isize) -> [return: bb12, unwind continue];
    }

    bb12: {
        _47 = _48;
        _46 = <isize as Int>::inc(move _47) -> [return: bb13, unwind continue];
    }

    bb13: {
        _55 = &_1;
        _54 = <Foo as Index<isize>>::index(move _55, const 1_isize) -> [return: bb14, unwind continue];
    }

    bb14: {
        _53 = (*_54);
        _52 = <isize as Int>::get(move _53) -> [return: bb15, unwind continue];
    }

    bb15: {
        _51 = &_52;
        _81 = const _;
        _50 = (move _51, _81);
        _56 = (_50.0: &isize);
        _57 = (_50.1: &isize);
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<isize, isize>(move _62, _56, _57, move _64) -> unwind continue;
    }

    bb17: {
        _70 = &_1;
        _69 = <Foo as Index<isize>>::index(move _70, const 1_isize) -> [return: bb18, unwind continue];
    }

    bb18: {
        _68 = _69;
        _67 = <isize as Int>::get_from_ref(move _68) -> [return: bb19, unwind continue];
    }

    bb19: {
        _66 = &_67;
        _80 = const _;
        _65 = (move _66, _80);
        _71 = (_65.0: &isize);
        _72 = (_65.1: &isize);
        _75 = (*_71);
        _76 = (*_72);
        _74 = Eq(move _75, move _76);
        _73 = Not(move _74);
        switchInt(move _73) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _77 = core::panicking::AssertKind::Eq;
        _79 = Option::<Arguments<'_>>::None;
        _78 = core::panicking::assert_failed::<isize, isize>(move _77, _71, _72, move _79) -> unwind continue;
    }

    bb21: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 5_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 5_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 4_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}
