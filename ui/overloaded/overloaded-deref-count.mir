// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-deref-count.rs:13:1: 13:24>::new(_1: T) -> DerefCounter<T> {
    debug value => _1;
    let mut _0: DerefCounter<T>;
    let mut _2: std::cell::Cell<usize>;
    let mut _3: T;

    bb0: {
        _2 = Cell::<usize>::new(const 0_usize) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        _3 = move _1;
        _0 = DerefCounter::<T> { count_imm: move _2, count_mut: const 0_usize, value: move _3 };
        return;
    }

    bb2 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn <impl at ui/overloaded/overloaded-deref-count.rs:13:1: 13:24>::counts(_1: &DerefCounter<T>) -> (usize, usize) {
    debug self => _1;
    let mut _0: (usize, usize);
    let mut _2: usize;
    let mut _3: &std::cell::Cell<usize>;
    let mut _4: usize;

    bb0: {
        _3 = &((*_1).0: std::cell::Cell<usize>);
        _2 = Cell::<usize>::get(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = ((*_1).1: usize);
        _0 = (move _2, move _4);
        return;
    }
}

fn <impl at ui/overloaded/overloaded-deref-count.rs:27:1: 27:34>::deref(_1: &DerefCounter<T>) -> &T {
    debug self => _1;
    let mut _0: &T;
    let _2: ();
    let mut _3: &std::cell::Cell<usize>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: &std::cell::Cell<usize>;

    bb0: {
        _3 = &((*_1).0: std::cell::Cell<usize>);
        _6 = &((*_1).0: std::cell::Cell<usize>);
        _5 = Cell::<usize>::get(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Add(move _5, const 1_usize);
        _2 = Cell::<usize>::set(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = &((*_1).2: T);
        return;
    }
}

fn <impl at ui/overloaded/overloaded-deref-count.rs:36:1: 36:37>::deref_mut(_1: &mut DerefCounter<T>) -> &mut T {
    debug self => _1;
    let mut _0: &mut T;

    bb0: {
        ((*_1).1: usize) = Add(((*_1).1: usize), const 1_usize);
        _0 = &mut ((*_1).2: T);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: DerefCounter<i32>;
    let mut _3: std::vec::Vec<i32>;
    let mut _4: &i32;
    let mut _5: &DerefCounter<i32>;
    let mut _6: (&(usize, usize), &(usize, usize));
    let mut _7: &(usize, usize);
    let _8: (usize, usize);
    let mut _9: &DerefCounter<i32>;
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let _17: &i32;
    let mut _18: &DerefCounter<i32>;
    let _19: &std::vec::Vec<i32>;
    let mut _20: &DerefCounter<std::vec::Vec<i32>>;
    let mut _21: (&(usize, usize), &(usize, usize));
    let mut _22: &(usize, usize);
    let _23: (usize, usize);
    let mut _24: &DerefCounter<i32>;
    let mut _27: bool;
    let mut _28: bool;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: (&(usize, usize), &(usize, usize));
    let mut _33: &(usize, usize);
    let _34: (usize, usize);
    let mut _35: &DerefCounter<std::vec::Vec<i32>>;
    let mut _38: bool;
    let mut _39: bool;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: &mut i32;
    let mut _44: &mut DerefCounter<i32>;
    let mut _45: &mut std::vec::Vec<i32>;
    let mut _46: &mut DerefCounter<std::vec::Vec<i32>>;
    let mut _47: (&(usize, usize), &(usize, usize));
    let mut _48: &(usize, usize);
    let _49: (usize, usize);
    let mut _50: &DerefCounter<i32>;
    let mut _53: bool;
    let mut _54: bool;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _58: (&(usize, usize), &(usize, usize));
    let mut _59: &(usize, usize);
    let _60: (usize, usize);
    let mut _61: &DerefCounter<std::vec::Vec<i32>>;
    let mut _64: bool;
    let mut _65: bool;
    let _67: !;
    let mut _68: std::option::Option<std::fmt::Arguments<'_>>;
    let _70: ();
    let mut _71: &mut std::vec::Vec<i32>;
    let mut _72: &mut i32;
    let mut _73: &mut DerefCounter<i32>;
    let mut _74: std::vec::Vec<i32>;
    let mut _75: &mut std::vec::Vec<i32>;
    let mut _76: &mut DerefCounter<std::vec::Vec<i32>>;
    let mut _77: (&(usize, usize), &(usize, usize));
    let mut _78: &(usize, usize);
    let _79: (usize, usize);
    let mut _80: &DerefCounter<i32>;
    let mut _83: bool;
    let mut _84: bool;
    let _86: !;
    let mut _87: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _88: (&(usize, usize), &(usize, usize));
    let mut _89: &(usize, usize);
    let _90: (usize, usize);
    let mut _91: &DerefCounter<std::vec::Vec<i32>>;
    let mut _94: bool;
    let mut _95: bool;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: &mut i32;
    let mut _100: &mut DerefCounter<i32>;
    let mut _101: (&(usize, usize), &(usize, usize));
    let mut _102: &(usize, usize);
    let _103: (usize, usize);
    let mut _104: &DerefCounter<i32>;
    let mut _107: bool;
    let mut _108: bool;
    let _110: !;
    let mut _111: std::option::Option<std::fmt::Arguments<'_>>;
    let _112: std::string::String;
    let mut _113: &i32;
    let _114: &i32;
    let mut _115: &DerefCounter<i32>;
    let mut _116: (&(usize, usize), &(usize, usize));
    let mut _117: &(usize, usize);
    let _118: (usize, usize);
    let mut _119: &DerefCounter<i32>;
    let mut _122: bool;
    let mut _123: bool;
    let _125: !;
    let mut _126: std::option::Option<std::fmt::Arguments<'_>>;
    let _127: ();
    let mut _128: &mut std::vec::Vec<i32>;
    let mut _129: &mut std::vec::Vec<i32>;
    let mut _130: &mut DerefCounter<std::vec::Vec<i32>>;
    let mut _131: (&(usize, usize), &(usize, usize));
    let mut _132: &(usize, usize);
    let _133: (usize, usize);
    let mut _134: &DerefCounter<std::vec::Vec<i32>>;
    let mut _137: bool;
    let mut _138: bool;
    let _140: !;
    let mut _141: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _142: (&i32, &i32);
    let mut _143: &i32;
    let _144: &i32;
    let mut _145: &DerefCounter<i32>;
    let mut _148: bool;
    let mut _149: bool;
    let mut _150: i32;
    let mut _151: i32;
    let _153: !;
    let mut _154: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _156: (&std::vec::Vec<i32>, &&[i32]);
    let mut _157: &std::vec::Vec<i32>;
    let _158: &std::vec::Vec<i32>;
    let mut _159: &DerefCounter<std::vec::Vec<i32>>;
    let mut _160: &&[i32];
    let mut _163: bool;
    let mut _164: bool;
    let _166: !;
    let mut _167: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _180: bool;
    let mut _181: bool;
    scope 1 {
        debug n => _1;
        let mut _2: DerefCounter<std::vec::Vec<i32>>;
        scope 2 {
            debug v => _2;
            scope 3 {
                let _10: &(usize, usize);
                let _11: &(usize, usize);
                let mut _179: &(usize, usize);
                scope 4 {
                    debug left_val => _10;
                    debug right_val => _11;
                    let _14: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _14;
                    }
                }
                scope 6 {
                    let _25: &(usize, usize);
                    let _26: &(usize, usize);
                    let _36: &(usize, usize);
                    let _37: &(usize, usize);
                    let mut _177: &(usize, usize);
                    let mut _178: &(usize, usize);
                    scope 7 {
                        debug left_val => _25;
                        debug right_val => _26;
                        let _29: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _29;
                        }
                    }
                    scope 9 {
                        debug left_val => _36;
                        debug right_val => _37;
                        let _40: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _40;
                        }
                    }
                    scope 11 {
                        let _51: &(usize, usize);
                        let _52: &(usize, usize);
                        let _62: &(usize, usize);
                        let _63: &(usize, usize);
                        let mut _69: std::vec::Vec<i32>;
                        let mut _175: &(usize, usize);
                        let mut _176: &(usize, usize);
                        scope 12 {
                            debug left_val => _51;
                            debug right_val => _52;
                            let _55: core::panicking::AssertKind;
                            scope 13 {
                                debug kind => _55;
                            }
                        }
                        scope 14 {
                            debug left_val => _62;
                            debug right_val => _63;
                            let _66: core::panicking::AssertKind;
                            scope 15 {
                                debug kind => _66;
                            }
                        }
                        scope 16 {
                            debug v2 => _69;
                            let _81: &(usize, usize);
                            let _82: &(usize, usize);
                            let _92: &(usize, usize);
                            let _93: &(usize, usize);
                            let _105: &(usize, usize);
                            let _106: &(usize, usize);
                            let _120: &(usize, usize);
                            let _121: &(usize, usize);
                            let _135: &(usize, usize);
                            let _136: &(usize, usize);
                            let _146: &i32;
                            let _147: &i32;
                            let _155: &[i32];
                            let mut _168: &[i32; 2];
                            let mut _169: &i32;
                            let mut _170: &(usize, usize);
                            let mut _171: &(usize, usize);
                            let mut _172: &(usize, usize);
                            let mut _173: &(usize, usize);
                            let mut _174: &(usize, usize);
                            scope 17 {
                                debug left_val => _81;
                                debug right_val => _82;
                                let _85: core::panicking::AssertKind;
                                scope 18 {
                                    debug kind => _85;
                                }
                            }
                            scope 19 {
                                debug left_val => _92;
                                debug right_val => _93;
                                let _96: core::panicking::AssertKind;
                                scope 20 {
                                    debug kind => _96;
                                }
                            }
                            scope 21 {
                                debug left_val => _105;
                                debug right_val => _106;
                                let _109: core::panicking::AssertKind;
                                scope 22 {
                                    debug kind => _109;
                                }
                            }
                            scope 23 {
                                debug left_val => _120;
                                debug right_val => _121;
                                let _124: core::panicking::AssertKind;
                                scope 24 {
                                    debug kind => _124;
                                }
                            }
                            scope 25 {
                                debug left_val => _135;
                                debug right_val => _136;
                                let _139: core::panicking::AssertKind;
                                scope 26 {
                                    debug kind => _139;
                                }
                            }
                            scope 27 {
                                debug left_val => _146;
                                debug right_val => _147;
                                let _152: core::panicking::AssertKind;
                                scope 28 {
                                    debug kind => _152;
                                }
                            }
                            scope 29 {
                                debug expected => _155;
                                let _161: &std::vec::Vec<i32>;
                                let _162: &&[i32];
                                scope 30 {
                                    debug left_val => _161;
                                    debug right_val => _162;
                                    let _165: core::panicking::AssertKind;
                                    scope 31 {
                                        debug kind => _165;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _181 = const false;
        _180 = const false;
        _1 = DerefCounter::<i32>::new(const 0_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = Vec::<i32>::new() -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = DerefCounter::<Vec<i32>>::new(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = &_1;
        _4 = <DerefCounter<i32> as Deref>::deref(move _5) -> [return: bb4, unwind: bb69];
    }

    bb4: {
        _9 = &_1;
        _8 = DerefCounter::<i32>::counts(move _9) -> [return: bb5, unwind: bb69];
    }

    bb5: {
        _7 = &_8;
        _179 = const _;
        _6 = (move _7, _179);
        _10 = (_6.0: &(usize, usize));
        _11 = (_6.1: &(usize, usize));
        _13 = <(usize, usize) as PartialEq>::eq(_10, _11) -> [return: bb6, unwind: bb69];
    }

    bb6: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _14, _10, _11, move _16) -> bb69;
    }

    bb8: {
        _18 = &_1;
        _17 = <DerefCounter<i32> as Deref>::deref(move _18) -> [return: bb9, unwind: bb69];
    }

    bb9: {
        _20 = &_2;
        _19 = <DerefCounter<Vec<i32>> as Deref>::deref(move _20) -> [return: bb10, unwind: bb69];
    }

    bb10: {
        _24 = &_1;
        _23 = DerefCounter::<i32>::counts(move _24) -> [return: bb11, unwind: bb69];
    }

    bb11: {
        _22 = &_23;
        _178 = const _;
        _21 = (move _22, _178);
        _25 = (_21.0: &(usize, usize));
        _26 = (_21.1: &(usize, usize));
        _28 = <(usize, usize) as PartialEq>::eq(_25, _26) -> [return: bb12, unwind: bb69];
    }

    bb12: {
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _29, _25, _26, move _31) -> bb69;
    }

    bb14: {
        _35 = &_2;
        _34 = DerefCounter::<Vec<i32>>::counts(move _35) -> [return: bb15, unwind: bb69];
    }

    bb15: {
        _33 = &_34;
        _177 = const _;
        _32 = (move _33, _177);
        _36 = (_32.0: &(usize, usize));
        _37 = (_32.1: &(usize, usize));
        _39 = <(usize, usize) as PartialEq>::eq(_36, _37) -> [return: bb16, unwind: bb69];
    }

    bb16: {
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _40, _36, _37, move _42) -> bb69;
    }

    bb18: {
        _44 = &mut _1;
        _43 = <DerefCounter<i32> as DerefMut>::deref_mut(move _44) -> [return: bb19, unwind: bb69];
    }

    bb19: {
        _46 = &mut _2;
        _45 = <DerefCounter<Vec<i32>> as DerefMut>::deref_mut(move _46) -> [return: bb20, unwind: bb69];
    }

    bb20: {
        _50 = &_1;
        _49 = DerefCounter::<i32>::counts(move _50) -> [return: bb21, unwind: bb69];
    }

    bb21: {
        _48 = &_49;
        _176 = const _;
        _47 = (move _48, _176);
        _51 = (_47.0: &(usize, usize));
        _52 = (_47.1: &(usize, usize));
        _54 = <(usize, usize) as PartialEq>::eq(_51, _52) -> [return: bb22, unwind: bb69];
    }

    bb22: {
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _55, _51, _52, move _57) -> bb69;
    }

    bb24: {
        _61 = &_2;
        _60 = DerefCounter::<Vec<i32>>::counts(move _61) -> [return: bb25, unwind: bb69];
    }

    bb25: {
        _59 = &_60;
        _175 = const _;
        _58 = (move _59, _175);
        _62 = (_58.0: &(usize, usize));
        _63 = (_58.1: &(usize, usize));
        _65 = <(usize, usize) as PartialEq>::eq(_62, _63) -> [return: bb26, unwind: bb69];
    }

    bb26: {
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _66 = core::panicking::AssertKind::Eq;
        _68 = Option::<Arguments<'_>>::None;
        _67 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _66, _62, _63, move _68) -> bb69;
    }

    bb28: {
        _69 = Vec::<i32>::new() -> [return: bb29, unwind: bb69];
    }

    bb29: {
        _181 = const true;
        _71 = &mut _69;
        _70 = Vec::<i32>::push(move _71, const 1_i32) -> [return: bb30, unwind: bb74];
    }

    bb30: {
        _73 = &mut _1;
        _72 = <DerefCounter<i32> as DerefMut>::deref_mut(move _73) -> [return: bb31, unwind: bb74];
    }

    bb31: {
        (*_72) = const 5_i32;
        _181 = const false;
        _180 = const true;
        _74 = move _69;
        _76 = &mut _2;
        _75 = <DerefCounter<Vec<i32>> as DerefMut>::deref_mut(move _76) -> [return: bb32, unwind: bb72];
    }

    bb32: {
        drop((*_75)) -> [return: bb33, unwind: bb34];
    }

    bb33: {
        _180 = const false;
        (*_75) = move _74;
        _180 = const false;
        _80 = &_1;
        _79 = DerefCounter::<i32>::counts(move _80) -> [return: bb35, unwind: bb74];
    }

    bb34 (cleanup): {
        _180 = const false;
        (*_75) = move _74;
        goto -> bb72;
    }

    bb35: {
        _78 = &_79;
        _174 = const _;
        _77 = (move _78, _174);
        _81 = (_77.0: &(usize, usize));
        _82 = (_77.1: &(usize, usize));
        _84 = <(usize, usize) as PartialEq>::eq(_81, _82) -> [return: bb36, unwind: bb74];
    }

    bb36: {
        _83 = Not(move _84);
        switchInt(move _83) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _85 = core::panicking::AssertKind::Eq;
        _87 = Option::<Arguments<'_>>::None;
        _86 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _85, _81, _82, move _87) -> bb74;
    }

    bb38: {
        _91 = &_2;
        _90 = DerefCounter::<Vec<i32>>::counts(move _91) -> [return: bb39, unwind: bb74];
    }

    bb39: {
        _89 = &_90;
        _173 = const _;
        _88 = (move _89, _173);
        _92 = (_88.0: &(usize, usize));
        _93 = (_88.1: &(usize, usize));
        _95 = <(usize, usize) as PartialEq>::eq(_92, _93) -> [return: bb40, unwind: bb74];
    }

    bb40: {
        _94 = Not(move _95);
        switchInt(move _94) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _96, _92, _93, move _98) -> bb74;
    }

    bb42: {
        _100 = &mut _1;
        _99 = <DerefCounter<i32> as DerefMut>::deref_mut(move _100) -> [return: bb43, unwind: bb74];
    }

    bb43: {
        (*_99) = Sub((*_99), const 3_i32);
        _104 = &_1;
        _103 = DerefCounter::<i32>::counts(move _104) -> [return: bb44, unwind: bb74];
    }

    bb44: {
        _102 = &_103;
        _172 = const _;
        _101 = (move _102, _172);
        _105 = (_101.0: &(usize, usize));
        _106 = (_101.1: &(usize, usize));
        _108 = <(usize, usize) as PartialEq>::eq(_105, _106) -> [return: bb45, unwind: bb74];
    }

    bb45: {
        _107 = Not(move _108);
        switchInt(move _107) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _109 = core::panicking::AssertKind::Eq;
        _111 = Option::<Arguments<'_>>::None;
        _110 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _109, _105, _106, move _111) -> bb74;
    }

    bb47: {
        _115 = &_1;
        _114 = <DerefCounter<i32> as Deref>::deref(move _115) -> [return: bb48, unwind: bb74];
    }

    bb48: {
        _113 = _114;
        _112 = <i32 as ToString>::to_string(move _113) -> [return: bb49, unwind: bb74];
    }

    bb49: {
        drop(_112) -> [return: bb50, unwind: bb74];
    }

    bb50: {
        _119 = &_1;
        _118 = DerefCounter::<i32>::counts(move _119) -> [return: bb51, unwind: bb74];
    }

    bb51: {
        _117 = &_118;
        _171 = const _;
        _116 = (move _117, _171);
        _120 = (_116.0: &(usize, usize));
        _121 = (_116.1: &(usize, usize));
        _123 = <(usize, usize) as PartialEq>::eq(_120, _121) -> [return: bb52, unwind: bb74];
    }

    bb52: {
        _122 = Not(move _123);
        switchInt(move _122) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _124 = core::panicking::AssertKind::Eq;
        _126 = Option::<Arguments<'_>>::None;
        _125 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _124, _120, _121, move _126) -> bb74;
    }

    bb54: {
        _130 = &mut _2;
        _129 = <DerefCounter<Vec<i32>> as DerefMut>::deref_mut(move _130) -> [return: bb55, unwind: bb74];
    }

    bb55: {
        _128 = _129;
        _127 = Vec::<i32>::push(move _128, const 2_i32) -> [return: bb56, unwind: bb74];
    }

    bb56: {
        _134 = &_2;
        _133 = DerefCounter::<Vec<i32>>::counts(move _134) -> [return: bb57, unwind: bb74];
    }

    bb57: {
        _132 = &_133;
        _170 = const _;
        _131 = (move _132, _170);
        _135 = (_131.0: &(usize, usize));
        _136 = (_131.1: &(usize, usize));
        _138 = <(usize, usize) as PartialEq>::eq(_135, _136) -> [return: bb58, unwind: bb74];
    }

    bb58: {
        _137 = Not(move _138);
        switchInt(move _137) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _139 = core::panicking::AssertKind::Eq;
        _141 = Option::<Arguments<'_>>::None;
        _140 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _139, _135, _136, move _141) -> bb74;
    }

    bb60: {
        _145 = &_1;
        _144 = <DerefCounter<i32> as Deref>::deref(move _145) -> [return: bb61, unwind: bb74];
    }

    bb61: {
        _143 = _144;
        _169 = const _;
        _142 = (move _143, _169);
        _146 = (_142.0: &i32);
        _147 = (_142.1: &i32);
        _150 = (*_146);
        _151 = (*_147);
        _149 = Eq(move _150, move _151);
        _148 = Not(move _149);
        switchInt(move _148) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _152 = core::panicking::AssertKind::Eq;
        _154 = Option::<Arguments<'_>>::None;
        _153 = core::panicking::assert_failed::<i32, i32>(move _152, _146, _147, move _154) -> bb74;
    }

    bb63: {
        _168 = const _;
        _155 = _168 as &[i32] (Pointer(Unsize));
        _159 = &_2;
        _158 = <DerefCounter<Vec<i32>> as Deref>::deref(move _159) -> [return: bb64, unwind: bb74];
    }

    bb64: {
        _157 = _158;
        _160 = &_155;
        _156 = (move _157, move _160);
        _161 = (_156.0: &std::vec::Vec<i32>);
        _162 = (_156.1: &&[i32]);
        _164 = <Vec<i32> as PartialEq<&[i32]>>::eq(_161, _162) -> [return: bb65, unwind: bb74];
    }

    bb65: {
        _163 = Not(move _164);
        switchInt(move _163) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        _165 = core::panicking::AssertKind::Eq;
        _167 = Option::<Arguments<'_>>::None;
        _166 = core::panicking::assert_failed::<Vec<i32>, &[i32]>(move _165, _161, _162, move _167) -> bb74;
    }

    bb67: {
        _181 = const false;
        drop(_2) -> [return: bb68, unwind continue];
    }

    bb68: {
        return;
    }

    bb69 (cleanup): {
        drop(_2) -> [return: bb70, unwind terminate];
    }

    bb70 (cleanup): {
        resume;
    }

    bb71 (cleanup): {
        drop(_74) -> [return: bb74, unwind terminate];
    }

    bb72 (cleanup): {
        switchInt(_180) -> [0: bb74, otherwise: bb71];
    }

    bb73 (cleanup): {
        drop(_69) -> [return: bb69, unwind terminate];
    }

    bb74 (cleanup): {
        switchInt(_181) -> [0: bb69, otherwise: bb73];
    }
}

promoted[0] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 1_i32, const 2_i32];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);
    let mut _1: (usize, usize);

    bb0: {
        _1 = (const 1_usize, const 3_usize);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);
    let mut _1: (usize, usize);

    bb0: {
        _1 = (const 3_usize, const 3_usize);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);
    let mut _1: (usize, usize);

    bb0: {
        _1 = (const 2_usize, const 3_usize);
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);
    let mut _1: (usize, usize);

    bb0: {
        _1 = (const 1_usize, const 2_usize);
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);
    let mut _1: (usize, usize);

    bb0: {
        _1 = (const 2_usize, const 2_usize);
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);
    let mut _1: (usize, usize);

    bb0: {
        _1 = (const 1_usize, const 1_usize);
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);
    let mut _1: (usize, usize);

    bb0: {
        _1 = (const 2_usize, const 1_usize);
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);
    let mut _1: (usize, usize);

    bb0: {
        _1 = (const 1_usize, const 0_usize);
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);
    let mut _1: (usize, usize);

    bb0: {
        _1 = (const 2_usize, const 0_usize);
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);
    let mut _1: (usize, usize);

    bb0: {
        _1 = (const 1_usize, const 0_usize);
        _0 = &_1;
        return;
    }
}
