// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-index-assoc-list.rs:10:10: 10:15>::clone(_1: &AssociationPair<K, V>) -> AssociationPair<K, V> {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:10:10: 10:15
    let mut _0: AssociationPair<K, V>;   // return place in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:10:10: 10:15
    let mut _2: K;                       // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:12:5: 12:11
    let mut _3: &K;                      // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:12:5: 12:11
    let _4: &K;                          // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:12:5: 12:11
    let mut _5: V;                       // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:13:5: 13:13
    let mut _6: &V;                      // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:13:5: 13:13
    let _7: &V;                          // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:13:5: 13:13

    bb0: {
        _4 = &((*_1).0: K);              // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:12:5: 12:11
        _3 = _4;                         // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:12:5: 12:11
        _2 = <K as Clone>::clone(move _3) -> bb1; // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:12:5: 12:11
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:12:5: 12:11
                                         // + literal: Const { ty: for<'a> fn(&'a K) -> K {<K as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &((*_1).1: V);              // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:13:5: 13:13
        _6 = _7;                         // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:13:5: 13:13
        _5 = <V as Clone>::clone(move _6) -> [return: bb2, unwind: bb3]; // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:13:5: 13:13
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:13:5: 13:13
                                         // + literal: Const { ty: for<'a> fn(&'a V) -> V {<V as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = AssociationPair::<K, V> { key: move _2, value: move _5 }; // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:10:10: 10:15
        return;                          // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:10:15: 10:15
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:10:14: 10:15
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:10:10: 10:15
    }
}

fn <impl at ui/overloaded/overloaded-index-assoc-list.rs:16:1: 16:31>::push(_1: &mut AssociationList<K, V>, _2: K, _3: V) -> () {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:17:13: 17:22
    debug key => _2;                     // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:17:24: 17:27
    debug value => _3;                   // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:17:32: 17:37
    let mut _0: ();                      // return place in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:17:42: 17:42
    let _4: ();                          // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:18:9: 18:66
    let mut _5: &mut std::vec::Vec<AssociationPair<K, V>>; // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:18:9: 18:66
    let mut _6: AssociationPair<K, V>;   // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:18:25: 18:65
    let mut _7: K;                       // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:18:47: 18:50
    let mut _8: V;                       // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:18:59: 18:64

    bb0: {
        _5 = &mut ((*_1).0: std::vec::Vec<AssociationPair<K, V>>); // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:18:9: 18:66
        _7 = move _2;                    // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:18:47: 18:50
        _8 = move _3;                    // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:18:59: 18:64
        _6 = AssociationPair::<K, V> { key: move _7, value: move _8 }; // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:18:25: 18:65
        _4 = Vec::<AssociationPair<K, V>>::push(move _5, move _6) -> bb1; // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:18:9: 18:66
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:18:20: 18:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<AssociationPair<K, V>>, AssociationPair<K, V>) {Vec::<AssociationPair<K, V>>::push}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:19:6: 19:6
    }
}

fn <impl at ui/overloaded/overloaded-index-assoc-list.rs:22:1: 22:88>::index(_1: &AssociationList<K, V>, _2: &K) -> &V {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:25:14: 25:19
    debug index => _2;                   // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:25:21: 25:26
    let mut _0: &V;                      // return place in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:28:24: 28:35
    let mut _3: std::slice::Iter<'_, AssociationPair<K, V>>; // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:26:21: 26:32
    let mut _4: &std::vec::Vec<AssociationPair<K, V>>; // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:26:21: 26:32
    let mut _5: std::slice::Iter<'_, AssociationPair<K, V>>; // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:26:21: 26:32
    let mut _6: std::option::Option<&AssociationPair<K, V>>; // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:26:21: 26:32
    let mut _7: &mut std::slice::Iter<'_, AssociationPair<K, V>>; // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:26:21: 26:32
    let mut _8: &mut std::slice::Iter<'_, AssociationPair<K, V>>; // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:26:21: 26:32
    let mut _9: isize;                   // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:26:9: 30:10
    let mut _11: bool;                   // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:27:16: 27:34
    let mut _12: &K;                     // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:27:16: 27:24
    let mut _13: &K;                     // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:27:28: 27:34
    let mut _14: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _15: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _16: &[&str];                // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:31:16: 31:46
    let mut _17: &[&str; 1];             // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:31:16: 31:46
    let _18: &[&str; 1];                 // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:31:16: 31:46
    let mut _19: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _20: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _21: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _22: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _23: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:31:48: 31:53
    let mut _24: &&K;                    // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:31:48: 31:53
    let _25: &&K;                        // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:31:48: 31:53
    let mut _26: &[&str; 1];             // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:31:16: 31:46
    scope 1 {
        debug iter => _5;                // in scope 1 at ui/overloaded/overloaded-index-assoc-list.rs:26:21: 26:32
        let _10: &AssociationPair<K, V>; // in scope 1 at ui/overloaded/overloaded-index-assoc-list.rs:26:13: 26:17
        scope 2 {
            debug pair => _10;           // in scope 2 at ui/overloaded/overloaded-index-assoc-list.rs:26:13: 26:17
        }
    }

    bb0: {
        _4 = &((*_1).0: std::vec::Vec<AssociationPair<K, V>>); // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:26:21: 26:32
        _3 = <&Vec<AssociationPair<K, V>> as IntoIterator>::into_iter(move _4) -> bb1; // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:26:21: 26:32
                                         // + literal: Const { ty: fn(&Vec<AssociationPair<K, V>>) -> <&Vec<AssociationPair<K, V>> as IntoIterator>::IntoIter {<&Vec<AssociationPair<K, V>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _3;                    // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:26:21: 26:32
        goto -> bb2;                     // scope 1 at ui/overloaded/overloaded-index-assoc-list.rs:26:9: 30:10
    }

    bb2: {
        _8 = &mut _5;                    // scope 1 at ui/overloaded/overloaded-index-assoc-list.rs:26:21: 26:32
        _7 = &mut (*_8);                 // scope 1 at ui/overloaded/overloaded-index-assoc-list.rs:26:21: 26:32
        _6 = <std::slice::Iter<'_, AssociationPair<K, V>> as Iterator>::next(move _7) -> bb3; // scope 1 at ui/overloaded/overloaded-index-assoc-list.rs:26:21: 26:32
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:26:21: 26:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, AssociationPair<K, V>>) -> Option<<std::slice::Iter<'_, AssociationPair<K, V>> as Iterator>::Item> {<std::slice::Iter<'_, AssociationPair<K, V>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = discriminant(_6);           // scope 1 at ui/overloaded/overloaded-index-assoc-list.rs:26:21: 26:32
        switchInt(move _9) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/overloaded/overloaded-index-assoc-list.rs:26:21: 26:32
    }

    bb4: {
        _10 = ((_6 as Some).0: &AssociationPair<K, V>); // scope 1 at ui/overloaded/overloaded-index-assoc-list.rs:26:13: 26:17
        _12 = &((*_10).0: K);            // scope 2 at ui/overloaded/overloaded-index-assoc-list.rs:27:16: 27:24
        _13 = _2;                        // scope 2 at ui/overloaded/overloaded-index-assoc-list.rs:27:28: 27:34
        _11 = <K as PartialEq>::eq(move _12, move _13) -> bb7; // scope 2 at ui/overloaded/overloaded-index-assoc-list.rs:27:16: 27:34
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:27:16: 27:34
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a K, &'b K) -> bool {<K as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 1 at ui/overloaded/overloaded-index-assoc-list.rs:26:21: 26:32
    }

    bb6: {
        _26 = const _;                   // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:31:16: 31:46
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:31:16: 31:46
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<AssociationList<K, V> as Index<&'a K>>::index, [ReErased, K, V], Some(promoted[0])) }
        _18 = _26;                       // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:31:16: 31:46
        _17 = _18;                       // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:31:16: 31:46
        _16 = move _17 as &[&str] (Pointer(Unsize)); // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:31:16: 31:46
        _25 = &_2;                       // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:31:48: 31:53
        _24 = _25;                       // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:31:48: 31:53
        _23 = core::fmt::ArgumentV1::<'_>::new_debug::<&K>(move _24) -> bb9; // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:31:48: 31:53
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:31:48: 31:53
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &K) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&K>}, val: Value(<ZST>) }
    }

    bb7: {
        switchInt(move _11) -> [0: bb2, otherwise: bb8]; // scope 2 at ui/overloaded/overloaded-index-assoc-list.rs:27:16: 27:34
    }

    bb8: {
        _0 = &((*_10).1: V);             // scope 2 at ui/overloaded/overloaded-index-assoc-list.rs:28:24: 28:35
        return;                          // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:32:6: 32:6
    }

    bb9: {
        _22 = [move _23];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _21 = &_22;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _20 = _21;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _19 = move _20 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _15 = Arguments::<'_>::new_v1(move _16, move _19) -> bb10; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb10: {
        _14 = panic_fmt(move _15);       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }
}

promoted[0] in <impl at ui/overloaded/overloaded-index-assoc-list.rs:22:1: 22:88>::index: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:31:16: 31:46
    let mut _1: [&str; 1];               // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:31:16: 31:46

    bb0: {
        _1 = [const "No value found for key: "]; // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:31:16: 31:46
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:31:16: 31:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:31:16: 31:46
        return;                          // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:31:16: 31:46
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:35:15: 35:15
    let _1: std::string::String;         // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:36:9: 36:12
    let mut _2: &str;                    // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:36:15: 36:32
    let _3: &str;                        // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:36:15: 36:20
    let mut _5: &str;                    // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:37:15: 37:32
    let _6: &str;                        // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:37:15: 37:20
    let mut _8: std::vec::Vec<AssociationPair<std::string::String, i32>>; // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:39:44: 39:54
    let _9: ();                          // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:40:5: 40:31
    let mut _10: &mut AssociationList<std::string::String, i32>; // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:40:5: 40:31
    let mut _11: std::string::String;    // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:40:15: 40:26
    let mut _12: &std::string::String;   // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:40:15: 40:26
    let _13: ();                         // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:41:5: 41:31
    let mut _14: &mut AssociationList<std::string::String, i32>; // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:41:5: 41:31
    let mut _15: std::string::String;    // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:41:15: 41:26
    let mut _16: &std::string::String;   // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:41:15: 41:26
    let mut _17: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _18: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _19: &i32;                       // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:43:16: 43:26
    let mut _20: &AssociationList<std::string::String, i32>; // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:43:16: 43:20
    let mut _21: &std::string::String;   // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:43:21: 43:25
    let _22: &std::string::String;       // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:43:21: 43:25
    let mut _23: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _28: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _29: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _31: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _32: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _33: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _34: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _35: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _36: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _38: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _39: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _40: &i32;                       // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:44:16: 44:26
    let mut _41: &AssociationList<std::string::String, i32>; // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:44:16: 44:20
    let mut _42: &std::string::String;   // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:44:21: 44:25
    let _43: &std::string::String;       // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:44:21: 44:25
    let mut _44: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _47: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _48: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _49: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _50: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _52: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _53: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _54: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _55: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _56: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _57: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _59: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _60: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _61: &i32;                       // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:46:16: 46:26
    let mut _62: &AssociationList<std::string::String, i32>; // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:46:16: 46:20
    let mut _63: &std::string::String;   // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:46:21: 46:25
    let _64: &std::string::String;       // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:46:21: 46:25
    let mut _65: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _68: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _69: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _70: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _71: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _73: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _74: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _75: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _76: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _77: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _78: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _79: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _80: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _81: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _82: &i32;                       // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:47:16: 47:26
    let mut _83: &AssociationList<std::string::String, i32>; // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:47:16: 47:20
    let mut _84: &std::string::String;   // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:47:21: 47:25
    let _85: &std::string::String;       // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:47:21: 47:25
    let mut _86: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _89: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _90: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _91: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _92: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _94: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _95: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _96: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _97: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _98: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _99: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _100: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/overloaded/overloaded-index-assoc-list.rs:36:9: 36:12
        let _4: std::string::String;     // in scope 1 at ui/overloaded/overloaded-index-assoc-list.rs:37:9: 37:12
        scope 2 {
            debug bar => _4;             // in scope 2 at ui/overloaded/overloaded-index-assoc-list.rs:37:9: 37:12
            let mut _7: AssociationList<std::string::String, i32>; // in scope 2 at ui/overloaded/overloaded-index-assoc-list.rs:39:9: 39:17
            scope 3 {
                debug list => _7;        // in scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:39:9: 39:17
                let _24: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _25: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _45: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _46: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _66: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _67: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _87: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _88: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _101: &i32;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _102: &i32;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _103: &i32;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _104: &i32;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 4 {
                    debug left_val => _24; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _25; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _30: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _30; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 6 {
                    debug left_val => _45; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _46; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _51: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 7 {
                        debug kind => _51; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 8 {
                    debug left_val => _66; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _67; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _72: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 9 {
                        debug kind => _72; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 10 {
                    debug left_val => _87; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _88; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _93: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 11 {
                        debug kind => _93; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const "foo";                // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:36:15: 36:20
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:36:15: 36:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:36:15: 36:32
        _1 = <str as ToString>::to_string(move _2) -> bb1; // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:36:15: 36:32
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:36:21: 36:30
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = const "bar";                // scope 1 at ui/overloaded/overloaded-index-assoc-list.rs:37:15: 37:20
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:37:15: 37:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 1 at ui/overloaded/overloaded-index-assoc-list.rs:37:15: 37:32
        _4 = <str as ToString>::to_string(move _5) -> [return: bb2, unwind: bb25]; // scope 1 at ui/overloaded/overloaded-index-assoc-list.rs:37:15: 37:32
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:37:21: 37:30
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = Vec::<AssociationPair<String, i32>>::new() -> [return: bb3, unwind: bb24]; // scope 2 at ui/overloaded/overloaded-index-assoc-list.rs:39:44: 39:54
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:39:44: 39:52
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<AssociationPair<String, i32>> {Vec::<AssociationPair<String, i32>>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = AssociationList::<String, i32> { pairs: move _8 }; // scope 2 at ui/overloaded/overloaded-index-assoc-list.rs:39:20: 39:55
        _10 = &mut _7;                   // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:40:5: 40:31
        _12 = &_1;                       // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:40:15: 40:26
        _11 = <String as Clone>::clone(move _12) -> [return: bb4, unwind: bb23]; // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:40:15: 40:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:40:19: 40:24
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> String {<String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = AssociationList::<String, i32>::push(move _10, move _11, const 22_i32) -> [return: bb5, unwind: bb23]; // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:40:5: 40:31
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:40:10: 40:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut AssociationList<String, i32>, String, i32) {AssociationList::<String, i32>::push}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = &mut _7;                   // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:41:5: 41:31
        _16 = &_4;                       // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:41:15: 41:26
        _15 = <String as Clone>::clone(move _16) -> [return: bb6, unwind: bb23]; // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:41:15: 41:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:41:19: 41:24
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> String {<String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = AssociationList::<String, i32>::push(move _14, move _15, const 44_i32) -> [return: bb7, unwind: bb23]; // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:41:5: 41:31
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:41:10: 41:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut AssociationList<String, i32>, String, i32) {AssociationList::<String, i32>::push}, val: Value(<ZST>) }
    }

    bb7: {
        _20 = &_7;                       // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:43:16: 43:20
        _22 = &_1;                       // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:43:21: 43:25
        _21 = _22;                       // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:43:21: 43:25
        _19 = <AssociationList<String, i32> as Index<&String>>::index(move _20, move _21) -> [return: bb8, unwind: bb23]; // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:43:16: 43:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:43:16: 43:26
                                         // + literal: Const { ty: for<'a> fn(&'a AssociationList<String, i32>, &String) -> &'a <AssociationList<String, i32> as Index<&String>>::Output {<AssociationList<String, i32> as Index<&String>>::index}, val: Value(<ZST>) }
    }

    bb8: {
        _18 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _104 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[3])) }
        _23 = _104;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _17 = (move _18, move _23);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _24 = (_17.0: &i32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _25 = (_17.1: &i32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _28 = (*_24);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _29 = const 22_i32;              // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _27 = Eq(move _28, move _29);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _26 = Not(move _27);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _26) -> [0: bb10, otherwise: bb9]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _30 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _32 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _34 = _24;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _33 = _34;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _25;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _35 = _36;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _37 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _31 = core::panicking::assert_failed::<i32, i32>(move _32, move _33, move _35, move _37) -> bb23; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb10: {
        _41 = &_7;                       // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:44:16: 44:20
        _43 = &_4;                       // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:44:21: 44:25
        _42 = _43;                       // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:44:21: 44:25
        _40 = <AssociationList<String, i32> as Index<&String>>::index(move _41, move _42) -> [return: bb11, unwind: bb23]; // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:44:16: 44:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:44:16: 44:26
                                         // + literal: Const { ty: for<'a> fn(&'a AssociationList<String, i32>, &String) -> &'a <AssociationList<String, i32> as Index<&String>>::Output {<AssociationList<String, i32> as Index<&String>>::index}, val: Value(<ZST>) }
    }

    bb11: {
        _39 = _40;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _103 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[2])) }
        _44 = _103;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _38 = (move _39, move _44);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _45 = (_38.0: &i32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _46 = (_38.1: &i32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _49 = (*_45);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _50 = const 44_i32;              // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _48 = Eq(move _49, move _50);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _47 = Not(move _48);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _47) -> [0: bb13, otherwise: bb12]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb12: {
        _51 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _53 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _55 = _45;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _54 = _55;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _46;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _56 = _57;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _58 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _52 = core::panicking::assert_failed::<i32, i32>(move _53, move _54, move _56, move _58) -> bb23; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb13: {
        _62 = &_7;                       // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:46:16: 46:20
        _64 = &_1;                       // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:46:21: 46:25
        _63 = _64;                       // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:46:21: 46:25
        _61 = <AssociationList<String, i32> as Index<&String>>::index(move _62, move _63) -> [return: bb14, unwind: bb23]; // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:46:16: 46:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:46:16: 46:26
                                         // + literal: Const { ty: for<'a> fn(&'a AssociationList<String, i32>, &String) -> &'a <AssociationList<String, i32> as Index<&String>>::Output {<AssociationList<String, i32> as Index<&String>>::index}, val: Value(<ZST>) }
    }

    bb14: {
        _60 = _61;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _102 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _65 = _102;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _59 = (move _60, move _65);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _66 = (_59.0: &i32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _67 = (_59.1: &i32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _70 = (*_66);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _71 = const 22_i32;              // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _69 = Eq(move _70, move _71);    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _68 = Not(move _69);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _68) -> [0: bb16, otherwise: bb15]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _72 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _74 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _76 = _66;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _75 = _76;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _78 = _67;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _77 = _78;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _79 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _73 = core::panicking::assert_failed::<i32, i32>(move _74, move _75, move _77, move _79) -> bb23; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb16: {
        _83 = &_7;                       // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:47:16: 47:20
        _85 = &_4;                       // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:47:21: 47:25
        _84 = _85;                       // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:47:21: 47:25
        _82 = <AssociationList<String, i32> as Index<&String>>::index(move _83, move _84) -> [return: bb17, unwind: bb23]; // scope 3 at ui/overloaded/overloaded-index-assoc-list.rs:47:16: 47:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-assoc-list.rs:47:16: 47:26
                                         // + literal: Const { ty: for<'a> fn(&'a AssociationList<String, i32>, &String) -> &'a <AssociationList<String, i32> as Index<&String>>::Output {<AssociationList<String, i32> as Index<&String>>::index}, val: Value(<ZST>) }
    }

    bb17: {
        _81 = _82;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _101 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _86 = _101;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _80 = (move _81, move _86);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _87 = (_80.0: &i32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _88 = (_80.1: &i32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _91 = (*_87);                    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _92 = const 44_i32;              // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _90 = Eq(move _91, move _92);    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _89 = Not(move _90);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _89) -> [0: bb19, otherwise: bb18]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb18: {
        _93 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _95 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _97 = _87;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _96 = _97;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _99 = _88;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _98 = _99;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _100 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _94 = core::panicking::assert_failed::<i32, i32>(move _95, move _96, move _98, move _100) -> bb23; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb19: {
        drop(_7) -> [return: bb20, unwind: bb24]; // scope 2 at ui/overloaded/overloaded-index-assoc-list.rs:48:1: 48:2
    }

    bb20: {
        drop(_4) -> [return: bb21, unwind: bb25]; // scope 1 at ui/overloaded/overloaded-index-assoc-list.rs:48:1: 48:2
    }

    bb21: {
        drop(_1) -> bb22;                // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:48:1: 48:2
    }

    bb22: {
        return;                          // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:48:2: 48:2
    }

    bb23 (cleanup): {
        drop(_7) -> bb24;                // scope 2 at ui/overloaded/overloaded-index-assoc-list.rs:48:1: 48:2
    }

    bb24 (cleanup): {
        drop(_4) -> bb25;                // scope 1 at ui/overloaded/overloaded-index-assoc-list.rs:48:1: 48:2
    }

    bb25 (cleanup): {
        drop(_1) -> bb26;                // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:48:1: 48:2
    }

    bb26 (cleanup): {
        resume;                          // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:35:1: 48:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:47:28: 47:30

    bb0: {
        _1 = const 44_i32;               // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:47:28: 47:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:46:28: 46:30

    bb0: {
        _1 = const 22_i32;               // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:46:28: 46:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:44:28: 44:30

    bb0: {
        _1 = const 44_i32;               // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:44:28: 44:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:43:28: 43:30

    bb0: {
        _1 = const 22_i32;               // scope 0 at ui/overloaded/overloaded-index-assoc-list.rs:43:28: 43:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
