// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:6:11: 6:11
    let _1: std::cell::RefCell<main::S>; // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:19:9: 19:10
    let mut _2: main::S;                 // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:19:26: 19:47
    let mut _3: main::E;                 // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:19:36: 19:45
    let mut _5: &std::cell::RefCell<main::S>; // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:21:17: 21:31
    let mut _6: &mut main::S;            // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:22:11: 22:17
    let mut _7: &mut std::cell::RefMut<'_, main::S>; // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:22:11: 22:12
    let mut _8: isize;                   // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:23:9: 23:26
    let mut _10: (u32, bool);            // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:23:30: 23:37
    let mut _13: &std::cell::RefCell<i32>; // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:29:17: 29:31
    let mut _15: &mut i32;               // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:30:21: 30:23
    let mut _16: &mut std::cell::RefMut<'_, i32>; // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:30:22: 30:23
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:19:9: 19:10
        let mut _4: std::cell::RefMut<'_, main::S>; // in scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:21:9: 21:14
        scope 2 {
            debug b => _4;               // in scope 2 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:21:9: 21:14
            let _9: &mut u32;            // in scope 2 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:23:16: 23:25
            let _11: std::cell::RefCell<i32>; // in scope 2 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:28:9: 28:10
            scope 3 {
                debug n => _9;           // in scope 3 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:23:16: 23:25
            }
            scope 4 {
                debug x => _11;          // in scope 4 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:28:9: 28:10
                let mut _12: std::cell::RefMut<'_, i32>; // in scope 4 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:29:9: 29:14
                scope 5 {
                    debug y => _12;      // in scope 5 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:29:9: 29:14
                    let _14: &mut i32;   // in scope 5 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:30:9: 30:18
                    scope 6 {
                        debug z => _14;  // in scope 6 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:30:9: 30:18
                    }
                }
            }
        }
    }

    bb0: {
        _3 = E::Foo(const 0_u32);        // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:19:36: 19:45
        _2 = S { node: move _3 };        // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:19:26: 19:47
        _1 = RefCell::<S>::new(move _2) -> bb1; // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:19:13: 19:48
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:19:13: 19:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(S) -> RefCell<S> {RefCell::<S>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_1;                        // scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:21:17: 21:31
        _4 = RefCell::<S>::borrow_mut(move _5) -> bb2; // scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:21:17: 21:31
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:21:19: 21:29
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<S>) -> RefMut<'a, S> {RefCell::<S>::borrow_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &mut _4;                    // scope 2 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:22:11: 22:12
        _6 = <RefMut<'_, S> as DerefMut>::deref_mut(move _7) -> [return: bb3, unwind: bb13]; // scope 2 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:22:11: 22:17
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:22:11: 22:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, S>) -> &'a mut <RefMut<'_, S> as Deref>::Target {<RefMut<'_, S> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = discriminant(((*_6).0: main::E)); // scope 2 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:22:11: 22:17
        switchInt(move _8) -> [0: bb4, otherwise: bb6]; // scope 2 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:22:5: 22:17
    }

    bb4: {
        _9 = &mut ((((*_6).0: main::E) as Foo).0: u32); // scope 2 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:23:16: 23:25
        _10 = CheckedAdd((*_9), const 1_u32); // scope 3 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:23:30: 23:37
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_9), const 1_u32) -> [success: bb5, unwind: bb13]; // scope 3 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:23:30: 23:37
    }

    bb5: {
        (*_9) = move (_10.0: u32);       // scope 3 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:23:30: 23:37
        goto -> bb6;                     // scope 2 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:23:36: 23:37
    }

    bb6: {
        _11 = RefCell::<i32>::new(const 0_i32) -> [return: bb7, unwind: bb13]; // scope 2 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:28:13: 28:25
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(i32) -> RefCell<i32> {RefCell::<i32>::new}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = &_11;                      // scope 4 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:29:17: 29:31
        _12 = RefCell::<i32>::borrow_mut(move _13) -> [return: bb8, unwind: bb13]; // scope 4 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:29:17: 29:31
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:29:19: 29:29
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<i32>) -> RefMut<'a, i32> {RefCell::<i32>::borrow_mut}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = &mut _12;                  // scope 5 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:30:22: 30:23
        _15 = <RefMut<'_, i32> as DerefMut>::deref_mut(move _16) -> [return: bb9, unwind: bb12]; // scope 5 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:30:21: 30:23
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:30:21: 30:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, i32>) -> &'a mut <RefMut<'_, i32> as Deref>::Target {<RefMut<'_, i32> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb9: {
        _14 = &mut (*_15);               // scope 5 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:30:9: 30:18
        drop(_12) -> [return: bb10, unwind: bb13]; // scope 4 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:37:1: 37:2
    }

    bb10: {
        drop(_4) -> bb11;                // scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:37:1: 37:2
    }

    bb11: {
        return;                          // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:37:2: 37:2
    }

    bb12 (cleanup): {
        drop(_12) -> bb13;               // scope 4 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:37:1: 37:2
    }

    bb13 (cleanup): {
        drop(_4) -> bb14;                // scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:37:1: 37:2
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:6:1: 37:2
    }
}

fn foo(_1: &mut RefCell<Option<String>>) -> () {
    debug a => _1;                       // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:32:12: 32:13
    let mut _0: ();                      // return place in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:32:45: 32:45
    let mut _2: &mut std::option::Option<std::string::String>; // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:33:34: 33:49
    let mut _3: &mut std::cell::RefMut<'_, std::option::Option<std::string::String>>; // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:33:35: 33:49
    let mut _4: std::cell::RefMut<'_, std::option::Option<std::string::String>>; // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:33:35: 33:49
    let mut _5: &std::cell::RefCell<std::option::Option<std::string::String>>; // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:33:35: 33:49
    let mut _6: isize;                   // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:33:16: 33:31
    let mut _8: &mut std::string::String; // in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:34:13: 34:24
    scope 1 {
        debug s => _7;                   // in scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:33:21: 33:30
        let _7: &mut std::string::String; // in scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:33:21: 33:30
    }

    bb0: {
        _5 = &(*_1);                     // scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:33:35: 33:49
        _4 = RefCell::<Option<String>>::borrow_mut(move _5) -> bb1; // scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:33:35: 33:49
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:33:37: 33:47
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Option<String>>) -> RefMut<'a, Option<String>> {RefCell::<Option<String>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &mut _4;                    // scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:33:35: 33:49
        _2 = <RefMut<'_, Option<String>> as DerefMut>::deref_mut(move _3) -> [return: bb2, unwind: bb6]; // scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:33:34: 33:49
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:33:34: 33:49
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, Option<String>>) -> &'a mut <RefMut<'_, Option<String>> as Deref>::Target {<RefMut<'_, Option<String>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = discriminant((*_2));        // scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:33:16: 33:31
        switchInt(move _6) -> [1: bb3, otherwise: bb4]; // scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:33:16: 33:31
    }

    bb3: {
        _7 = &mut (((*_2) as Some).0: std::string::String); // scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:33:21: 33:30
        _8 = &mut (*_7);                 // scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:34:13: 34:24
        _0 = String::push(move _8, const 'a') -> [return: bb8, unwind: bb6]; // scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:34:13: 34:24
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:34:15: 34:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut String, char) {String::push}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_4) -> bb5;                 // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:36:5: 36:6
    }

    bb5: {
        return;                          // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:36:6: 36:6
    }

    bb6 (cleanup): {
        drop(_4) -> bb7;                 // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:36:5: 36:6
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:32:5: 36:6
    }

    bb8: {
        goto -> bb4;                     // scope 1 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:34:13: 34:24
    }
}

fn E::Foo(_1: u32) -> E {
    let mut _0: main::E;                 // return place in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:14:9: 14:12

    bb0: {
        _0 = E::Foo(move _1);            // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:14:9: 14:12
        return;                          // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:14:9: 14:12
    }
}

// MIR FOR CTFE
fn E::Foo(_1: u32) -> E {
    let mut _0: main::E;                 // return place in scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:14:9: 14:12

    bb0: {
        _0 = E::Foo(move _1);            // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:14:9: 14:12
        return;                          // scope 0 at ui/overloaded/overloaded_deref_with_ref_pattern_issue15609.rs:14:9: 14:12
    }
}
