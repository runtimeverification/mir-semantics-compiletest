// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-autoderef-indexing.rs:9:1: 9:40>::deref(_1: &DerefArray<'_, T>) -> &&[T] {
    debug self => _1;
    let mut _0: &&[T];

    bb0: {
        _0 = &((*_1).0: &[T]);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: &&[i32];
    let mut _4: &DerefArray<'_, i32>;
    let _5: DerefArray<'_, i32>;
    let mut _6: &[i32];
    let _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: i32;
    let mut _15: i32;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: &[i32; 3];
    let mut _21: &[i32];
    let mut _22: &[i32];
    scope 1 {
        debug a => const _;
        let _10: &i32;
        let _11: &i32;
        let mut _19: &i32;
        scope 2 {
            debug left_val => _10;
            debug right_val => _11;
            let _16: core::panicking::AssertKind;
            scope 3 {
                debug kind => _16;
            }
        }
    }

    bb0: {
        _20 = const _;
        _6 = _20 as &[i32] (Pointer(Unsize));
        _5 = DerefArray::<'_, i32> { inner: move _6 };
        _4 = &_5;
        _3 = <DerefArray<'_, i32> as Deref>::deref(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = const 1_usize;
        _21 = deref_copy (*_3);
        _8 = Len((*_21));
        _9 = Lt(_7, _8);
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _7) -> [success: bb2, unwind continue];
    }

    bb2: {
        _22 = deref_copy (*_3);
        _2 = &(*_22)[_7];
        _19 = const _;
        _1 = (move _2, _19);
        _10 = (_1.0: &i32);
        _11 = (_1.1: &i32);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<i32, i32>(move _16, _10, _11, move _18) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];
    let mut _1: [i32; 3];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        _0 = &_1;
        return;
    }
}
