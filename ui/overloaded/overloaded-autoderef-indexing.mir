// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-autoderef-indexing.rs:9:1: 9:40>::deref(_1: &DerefArray<'_, T>) -> &&[T] {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:12:18: 12:26
    let mut _0: &&[T];                   // return place in scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:13:9: 13:20

    bb0: {
        _0 = &((*_1).0: &[T]);           // scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:13:9: 13:20
        return;                          // scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:14:6: 14:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:17:15: 17:15
    let _1: &[i32; 3];                   // in scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:18:9: 18:10
    let mut _2: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: &&[i32];                     // in scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:19:16: 19:37
    let mut _5: &DerefArray<'_, i32>;    // in scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:19:16: 19:37
    let _6: DerefArray<'_, i32>;         // in scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:19:16: 19:37
    let mut _7: &[i32];                  // in scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:19:35: 19:36
    let mut _8: &[i32; 3];               // in scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:19:35: 19:36
    let _9: usize;                       // in scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:19:38: 19:39
    let mut _10: usize;                  // in scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:19:16: 19:40
    let mut _11: bool;                   // in scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:19:16: 19:40
    let mut _12: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _17: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _18: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _20: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _21: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _22: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _23: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _24: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _25: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _28: &[i32; 3];              // in scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:18:13: 18:23
    let mut _29: &[i32];                 // in scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:19:16: 19:37
    let mut _30: &[i32];                 // in scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:19:16: 19:37
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/overloaded/overloaded-autoderef-indexing.rs:18:9: 18:10
        let _13: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _14: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _27: &i32;               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _13;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _14;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _19: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _19;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _28 = const _;                   // scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:18:13: 18:23
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-indexing.rs:18:13: 18:23
                                         // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[1])) }
        _1 = _28;                        // scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:18:13: 18:23
        _8 = _1;                         // scope 1 at ui/overloaded/overloaded-autoderef-indexing.rs:19:35: 19:36
        _7 = move _8 as &[i32] (Pointer(Unsize)); // scope 1 at ui/overloaded/overloaded-autoderef-indexing.rs:19:35: 19:36
        _6 = DerefArray::<'_, i32> { inner: move _7 }; // scope 1 at ui/overloaded/overloaded-autoderef-indexing.rs:19:16: 19:37
        _5 = &_6;                        // scope 1 at ui/overloaded/overloaded-autoderef-indexing.rs:19:16: 19:37
        _4 = <DerefArray<'_, i32> as Deref>::deref(move _5) -> bb1; // scope 1 at ui/overloaded/overloaded-autoderef-indexing.rs:19:16: 19:37
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-indexing.rs:19:16: 19:37
                                         // + literal: Const { ty: for<'a> fn(&'a DerefArray<'_, i32>) -> &'a <DerefArray<'_, i32> as Deref>::Target {<DerefArray<'_, i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = const 1_usize;              // scope 1 at ui/overloaded/overloaded-autoderef-indexing.rs:19:38: 19:39
        _29 = deref_copy (*_4);          // scope 1 at ui/overloaded/overloaded-autoderef-indexing.rs:19:16: 19:40
        _10 = Len((*_29));               // scope 1 at ui/overloaded/overloaded-autoderef-indexing.rs:19:16: 19:40
        _11 = Lt(_9, _10);               // scope 1 at ui/overloaded/overloaded-autoderef-indexing.rs:19:16: 19:40
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> bb2; // scope 1 at ui/overloaded/overloaded-autoderef-indexing.rs:19:16: 19:40
    }

    bb2: {
        _30 = deref_copy (*_4);          // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _3 = &(*_30)[_9];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _27 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _12 = _27;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _12);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _13 = (_2.0: &i32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _14 = (_2.1: &i32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _17 = (*_13);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _18 = const 2_i32;               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _16 = Eq(move _17, move _18);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _15 = Not(move _16);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _15) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _19 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = _13;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _23;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _14;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _20 = core::panicking::assert_failed::<i32, i32>(move _21, move _22, move _24, move _26); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:20:2: 20:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:19:42: 19:43

    bb0: {
        _1 = const 2_i32;                // scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:19:42: 19:43
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];               // return place in scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:18:13: 18:23
    let mut _1: [i32; 3];                // in scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:18:14: 18:23

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:18:14: 18:23
        _0 = &_1;                        // scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:18:13: 18:23
        return;                          // scope 0 at ui/overloaded/overloaded-autoderef-indexing.rs:18:13: 18:23
    }
}
