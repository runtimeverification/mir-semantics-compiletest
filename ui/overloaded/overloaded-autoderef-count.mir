// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-autoderef-count.rs:5:10: 5:19>::eq(_1: &DerefCounter<T>, _2: &DerefCounter<T>) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: &std::cell::Cell<usize>;
    let mut _6: &std::cell::Cell<usize>;
    let mut _7: bool;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: bool;
    let mut _11: &T;
    let mut _12: &T;

    bb0: {
        _5 = &((*_1).0: std::cell::Cell<usize>);
        _6 = &((*_2).0: std::cell::Cell<usize>);
        _4 = <Cell<usize> as PartialEq>::eq(move _5, move _6) -> [return: bb7, unwind continue];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _11 = &((*_1).2: T);
        _12 = &((*_2).2: T);
        _10 = <T as PartialEq>::eq(move _11, move _12) -> [return: bb8, unwind continue];
    }

    bb3: {
        return;
    }

    bb4: {
        _3 = const false;
        goto -> bb6;
    }

    bb5: {
        _8 = ((*_1).1: usize);
        _9 = ((*_2).1: usize);
        _7 = Eq(move _8, move _9);
        _3 = move _7;
        goto -> bb6;
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb7: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5];
    }

    bb8: {
        _0 = move _10;
        goto -> bb3;
    }
}

fn <impl at ui/overloaded/overloaded-autoderef-count.rs:12:1: 12:24>::new(_1: T) -> DerefCounter<T> {
    debug value => _1;
    let mut _0: DerefCounter<T>;
    let mut _2: std::cell::Cell<usize>;
    let mut _3: T;

    bb0: {
        _2 = Cell::<usize>::new(const 0_usize) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        _3 = move _1;
        _0 = DerefCounter::<T> { count_imm: move _2, count_mut: const 0_usize, value: move _3 };
        return;
    }

    bb2 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn <impl at ui/overloaded/overloaded-autoderef-count.rs:12:1: 12:24>::counts(_1: &DerefCounter<T>) -> (usize, usize) {
    debug self => _1;
    let mut _0: (usize, usize);
    let mut _2: usize;
    let mut _3: &std::cell::Cell<usize>;
    let mut _4: usize;

    bb0: {
        _3 = &((*_1).0: std::cell::Cell<usize>);
        _2 = Cell::<usize>::get(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = ((*_1).1: usize);
        _0 = (move _2, move _4);
        return;
    }
}

fn <impl at ui/overloaded/overloaded-autoderef-count.rs:26:1: 26:34>::deref(_1: &DerefCounter<T>) -> &T {
    debug self => _1;
    let mut _0: &T;
    let _2: ();
    let mut _3: &std::cell::Cell<usize>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: &std::cell::Cell<usize>;

    bb0: {
        _3 = &((*_1).0: std::cell::Cell<usize>);
        _6 = &((*_1).0: std::cell::Cell<usize>);
        _5 = Cell::<usize>::get(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Add(move _5, const 1_usize);
        _2 = Cell::<usize>::set(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = &((*_1).2: T);
        return;
    }
}

fn <impl at ui/overloaded/overloaded-autoderef-count.rs:35:1: 35:37>::deref_mut(_1: &mut DerefCounter<T>) -> &mut T {
    debug self => _1;
    let mut _0: &mut T;

    bb0: {
        ((*_1).1: usize) = Add(((*_1).1: usize), const 1_usize);
        _0 = &mut ((*_1).2: T);
        return;
    }
}

fn <impl at ui/overloaded/overloaded-autoderef-count.rs:42:10: 42:19>::eq(_1: &Point, _2: &Point) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: bool;
    let mut _7: isize;
    let mut _8: isize;

    bb0: {
        _4 = ((*_1).0: isize);
        _5 = ((*_2).0: isize);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = ((*_1).1: isize);
        _8 = ((*_2).1: isize);
        _6 = Eq(move _7, move _8);
        _0 = move _6;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/overloaded/overloaded-autoderef-count.rs:42:21: 42:26>::fmt(_1: &Point, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &isize;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&isize;
    let _10: &isize;

    bb0: {
        _3 = const "Point";
        _4 = const "x";
        _6 = &((*_1).0: isize);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "y";
        _10 = &((*_1).1: isize);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/overloaded/overloaded-autoderef-count.rs:48:1: 48:11>::get(_1: &Point) -> (isize, isize) {
    debug self => _1;
    let mut _0: (isize, isize);
    let mut _2: isize;
    let mut _3: isize;

    bb0: {
        _2 = ((*_1).0: isize);
        _3 = ((*_1).1: isize);
        _0 = (move _2, move _3);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: DerefCounter<Point>;
    let mut _2: Point;
    let mut _3: &Point;
    let mut _4: &DerefCounter<Point>;
    let mut _5: (&(usize, usize), &(usize, usize));
    let mut _6: &(usize, usize);
    let _7: (usize, usize);
    let mut _8: &DerefCounter<Point>;
    let mut _11: bool;
    let mut _12: bool;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let _16: &Point;
    let mut _17: &DerefCounter<Point>;
    let mut _18: (&(usize, usize), &(usize, usize));
    let mut _19: &(usize, usize);
    let _20: (usize, usize);
    let mut _21: &DerefCounter<Point>;
    let mut _24: bool;
    let mut _25: bool;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: &mut Point;
    let mut _30: &mut DerefCounter<Point>;
    let mut _31: (&(usize, usize), &(usize, usize));
    let mut _32: &(usize, usize);
    let _33: (usize, usize);
    let mut _34: &DerefCounter<Point>;
    let mut _37: bool;
    let mut _38: bool;
    let _40: !;
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _42: &mut Point;
    let mut _43: &mut DerefCounter<Point>;
    let mut _44: (&(usize, usize), &(usize, usize));
    let mut _45: &(usize, usize);
    let _46: (usize, usize);
    let mut _47: &DerefCounter<Point>;
    let mut _50: bool;
    let mut _51: bool;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let _55: (isize, isize);
    let mut _56: &Point;
    let _57: &Point;
    let mut _58: &DerefCounter<Point>;
    let mut _59: (&(usize, usize), &(usize, usize));
    let mut _60: &(usize, usize);
    let _61: (usize, usize);
    let mut _62: &DerefCounter<Point>;
    let mut _65: bool;
    let mut _66: bool;
    let _68: !;
    let mut _69: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _70: (&Point, &Point);
    let mut _71: &Point;
    let _72: &Point;
    let mut _73: &DerefCounter<Point>;
    let mut _76: bool;
    let mut _77: bool;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug p => _1;
        scope 2 {
            let _9: &(usize, usize);
            let _10: &(usize, usize);
            let mut _86: &(usize, usize);
            scope 3 {
                debug left_val => _9;
                debug right_val => _10;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
            scope 5 {
                let _22: &(usize, usize);
                let _23: &(usize, usize);
                let mut _85: &(usize, usize);
                scope 6 {
                    debug left_val => _22;
                    debug right_val => _23;
                    let _26: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _26;
                    }
                }
                scope 8 {
                    let _35: &(usize, usize);
                    let _36: &(usize, usize);
                    let _48: &(usize, usize);
                    let _49: &(usize, usize);
                    let _63: &(usize, usize);
                    let _64: &(usize, usize);
                    let _74: &Point;
                    let _75: &Point;
                    let mut _81: &Point;
                    let mut _82: &(usize, usize);
                    let mut _83: &(usize, usize);
                    let mut _84: &(usize, usize);
                    scope 9 {
                        debug left_val => _35;
                        debug right_val => _36;
                        let _39: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _39;
                        }
                    }
                    scope 11 {
                        debug left_val => _48;
                        debug right_val => _49;
                        let _52: core::panicking::AssertKind;
                        scope 12 {
                            debug kind => _52;
                        }
                    }
                    scope 13 {
                        debug left_val => _63;
                        debug right_val => _64;
                        let _67: core::panicking::AssertKind;
                        scope 14 {
                            debug kind => _67;
                        }
                    }
                    scope 15 {
                        debug left_val => _74;
                        debug right_val => _75;
                        let _78: core::panicking::AssertKind;
                        scope 16 {
                            debug kind => _78;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = Point { x: const 0_isize, y: const 0_isize };
        _1 = DerefCounter::<Point>::new(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_1;
        _3 = <DerefCounter<Point> as Deref>::deref(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = &_1;
        _7 = DerefCounter::<Point>::counts(move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = &_7;
        _86 = const _;
        _5 = (move _6, _86);
        _9 = (_5.0: &(usize, usize));
        _10 = (_5.1: &(usize, usize));
        _12 = <(usize, usize) as PartialEq>::eq(_9, _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _13, _9, _10, move _15) -> unwind continue;
    }

    bb6: {
        _17 = &_1;
        _16 = <DerefCounter<Point> as Deref>::deref(move _17) -> [return: bb7, unwind continue];
    }

    bb7: {
        _21 = &_1;
        _20 = DerefCounter::<Point>::counts(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        _19 = &_20;
        _85 = const _;
        _18 = (move _19, _85);
        _22 = (_18.0: &(usize, usize));
        _23 = (_18.1: &(usize, usize));
        _25 = <(usize, usize) as PartialEq>::eq(_22, _23) -> [return: bb9, unwind continue];
    }

    bb9: {
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _26, _22, _23, move _28) -> unwind continue;
    }

    bb11: {
        _30 = &mut _1;
        _29 = <DerefCounter<Point> as DerefMut>::deref_mut(move _30) -> [return: bb12, unwind continue];
    }

    bb12: {
        _34 = &_1;
        _33 = DerefCounter::<Point>::counts(move _34) -> [return: bb13, unwind continue];
    }

    bb13: {
        _32 = &_33;
        _84 = const _;
        _31 = (move _32, _84);
        _35 = (_31.0: &(usize, usize));
        _36 = (_31.1: &(usize, usize));
        _38 = <(usize, usize) as PartialEq>::eq(_35, _36) -> [return: bb14, unwind continue];
    }

    bb14: {
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _39 = core::panicking::AssertKind::Eq;
        _41 = Option::<Arguments<'_>>::None;
        _40 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _39, _35, _36, move _41) -> unwind continue;
    }

    bb16: {
        _43 = &mut _1;
        _42 = <DerefCounter<Point> as DerefMut>::deref_mut(move _43) -> [return: bb17, unwind continue];
    }

    bb17: {
        ((*_42).0: isize) = Add(((*_42).0: isize), const 3_isize);
        _47 = &_1;
        _46 = DerefCounter::<Point>::counts(move _47) -> [return: bb18, unwind continue];
    }

    bb18: {
        _45 = &_46;
        _83 = const _;
        _44 = (move _45, _83);
        _48 = (_44.0: &(usize, usize));
        _49 = (_44.1: &(usize, usize));
        _51 = <(usize, usize) as PartialEq>::eq(_48, _49) -> [return: bb19, unwind continue];
    }

    bb19: {
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _52, _48, _49, move _54) -> unwind continue;
    }

    bb21: {
        _58 = &_1;
        _57 = <DerefCounter<Point> as Deref>::deref(move _58) -> [return: bb22, unwind continue];
    }

    bb22: {
        _56 = _57;
        _55 = Point::get(move _56) -> [return: bb23, unwind continue];
    }

    bb23: {
        _62 = &_1;
        _61 = DerefCounter::<Point>::counts(move _62) -> [return: bb24, unwind continue];
    }

    bb24: {
        _60 = &_61;
        _82 = const _;
        _59 = (move _60, _82);
        _63 = (_59.0: &(usize, usize));
        _64 = (_59.1: &(usize, usize));
        _66 = <(usize, usize) as PartialEq>::eq(_63, _64) -> [return: bb25, unwind continue];
    }

    bb25: {
        _65 = Not(move _66);
        switchInt(move _65) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _67 = core::panicking::AssertKind::Eq;
        _69 = Option::<Arguments<'_>>::None;
        _68 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _67, _63, _64, move _69) -> unwind continue;
    }

    bb27: {
        _73 = &_1;
        _72 = <DerefCounter<Point> as Deref>::deref(move _73) -> [return: bb28, unwind continue];
    }

    bb28: {
        _71 = _72;
        _81 = const _;
        _70 = (move _71, _81);
        _74 = (_70.0: &Point);
        _75 = (_70.1: &Point);
        _77 = <Point as PartialEq>::eq(_74, _75) -> [return: bb29, unwind continue];
    }

    bb29: {
        _76 = Not(move _77);
        switchInt(move _76) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<Point, Point>(move _78, _74, _75, move _80) -> unwind continue;
    }

    bb31: {
        return;
    }
}

promoted[0] in main: &Point = {
    let mut _0: &Point;
    let mut _1: Point;

    bb0: {
        _1 = Point { x: const 3_isize, y: const 0_isize };
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);
    let mut _1: (usize, usize);

    bb0: {
        _1 = (const 3_usize, const 2_usize);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);
    let mut _1: (usize, usize);

    bb0: {
        _1 = (const 2_usize, const 2_usize);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);
    let mut _1: (usize, usize);

    bb0: {
        _1 = (const 2_usize, const 1_usize);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);
    let mut _1: (usize, usize);

    bb0: {
        _1 = (const 2_usize, const 0_usize);
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);
    let mut _1: (usize, usize);

    bb0: {
        _1 = (const 1_usize, const 0_usize);
        _0 = &_1;
        return;
    }
}
