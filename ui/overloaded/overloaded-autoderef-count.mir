// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-autoderef-count.rs:5:10: 5:19>::eq(_1: &DerefCounter<T>, _2: &DerefCounter<T>) -> bool {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:5:10: 5:19
    debug other => _2;                   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:5:10: 5:19
    let mut _0: bool;                    // return place in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:5:10: 5:19
    let mut _3: bool;                    // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:8:5: 8:21
    let mut _4: bool;                    // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:7:5: 7:27
    let mut _5: &std::cell::Cell<usize>; // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:7:5: 7:27
    let mut _6: &std::cell::Cell<usize>; // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:7:5: 7:27
    let mut _7: bool;                    // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:8:5: 8:21
    let mut _8: usize;                   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:8:5: 8:21
    let mut _9: usize;                   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:8:5: 8:21
    let mut _10: bool;                   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:9:5: 9:13
    let mut _11: &T;                     // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:9:5: 9:13
    let mut _12: &T;                     // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:9:5: 9:13

    bb0: {
        _5 = &((*_1).0: std::cell::Cell<usize>); // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:7:5: 7:27
        _6 = &((*_2).0: std::cell::Cell<usize>); // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:7:5: 7:27
        _4 = <Cell<usize> as PartialEq>::eq(move _5, move _6) -> bb7; // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:7:5: 7:27
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:7:5: 7:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Cell<usize>, &'b Cell<usize>) -> bool {<Cell<usize> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:9:5: 9:13
        goto -> bb3;                     // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:9:5: 9:13
    }

    bb2: {
        _11 = &((*_1).2: T);             // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:9:5: 9:13
        _12 = &((*_2).2: T);             // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:9:5: 9:13
        _10 = <T as PartialEq>::eq(move _11, move _12) -> bb8; // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:9:5: 9:13
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:9:5: 9:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:5:19: 5:19
    }

    bb4: {
        _3 = const false;                // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:8:5: 8:21
        goto -> bb6;                     // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:8:5: 8:21
    }

    bb5: {
        _8 = ((*_1).1: usize);           // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:8:5: 8:21
        _9 = ((*_2).1: usize);           // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:8:5: 8:21
        _7 = Eq(move _8, move _9);       // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:8:5: 8:21
        _3 = move _7;                    // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:8:5: 8:21
        goto -> bb6;                     // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:8:5: 8:21
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:9:5: 9:13
    }

    bb7: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:8:5: 8:21
    }

    bb8: {
        _0 = move _10;                   // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:9:5: 9:13
        goto -> bb3;                     // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:9:5: 9:13
    }
}

fn <impl at ui/overloaded/overloaded-autoderef-count.rs:12:1: 12:24>::new(_1: T) -> DerefCounter<T> {
    debug value => _1;                   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:13:12: 13:17
    let mut _0: DerefCounter<T>;         // return place in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:13:25: 13:40
    let mut _2: std::cell::Cell<usize>;  // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:15:24: 15:36
    let mut _3: T;                       // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:17:20: 17:25

    bb0: {
        _2 = Cell::<usize>::new(const 0_usize) -> [return: bb1, unwind: bb2]; // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:15:24: 15:36
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:15:24: 15:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(usize) -> Cell<usize> {Cell::<usize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = move _1;                    // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:17:20: 17:25
        _0 = DerefCounter::<T> { count_imm: move _2, count_mut: const 0_usize, value: move _3 }; // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:14:9: 18:10
        return;                          // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:19:6: 19:6
    }

    bb2 (cleanup): {
        drop(_1) -> bb3;                 // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:19:5: 19:6
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:13:5: 19:6
    }
}

fn <impl at ui/overloaded/overloaded-autoderef-count.rs:12:1: 12:24>::counts(_1: &DerefCounter<T>) -> (usize, usize) {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:21:15: 21:20
    let mut _0: (usize, usize);          // return place in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:21:25: 21:39
    let mut _2: usize;                   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:22:10: 22:30
    let mut _3: &std::cell::Cell<usize>; // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:22:10: 22:30
    let mut _4: usize;                   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:22:32: 22:46

    bb0: {
        _3 = &((*_1).0: std::cell::Cell<usize>); // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:22:10: 22:30
        _2 = Cell::<usize>::get(move _3) -> bb1; // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:22:10: 22:30
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:22:25: 22:28
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>) -> usize {Cell::<usize>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = ((*_1).1: usize);           // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:22:32: 22:46
        _0 = (move _2, move _4);         // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:22:9: 22:47
        return;                          // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:23:6: 23:6
    }
}

fn <impl at ui/overloaded/overloaded-autoderef-count.rs:26:1: 26:34>::deref(_1: &DerefCounter<T>) -> &T {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:29:14: 29:19
    let mut _0: &T;                      // return place in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:31:9: 31:20
    let _2: ();                          // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:30:9: 30:53
    let mut _3: &std::cell::Cell<usize>; // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:30:9: 30:53
    let mut _4: usize;                   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:30:28: 30:52
    let mut _5: usize;                   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:30:28: 30:48
    let mut _6: &std::cell::Cell<usize>; // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:30:28: 30:48
    let mut _7: (usize, bool);           // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:30:28: 30:52

    bb0: {
        _3 = &((*_1).0: std::cell::Cell<usize>); // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:30:9: 30:53
        _6 = &((*_1).0: std::cell::Cell<usize>); // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:30:28: 30:48
        _5 = Cell::<usize>::get(move _6) -> bb1; // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:30:28: 30:48
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:30:43: 30:46
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>) -> usize {Cell::<usize>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = CheckedAdd(_5, const 1_usize); // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:30:28: 30:52
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, const 1_usize) -> bb2; // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:30:28: 30:52
    }

    bb2: {
        _4 = move (_7.0: usize);         // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:30:28: 30:52
        _2 = Cell::<usize>::set(move _3, move _4) -> bb3; // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:30:9: 30:53
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:30:24: 30:27
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>, usize) {Cell::<usize>::set}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = &((*_1).2: T);              // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:31:9: 31:20
        return;                          // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:32:6: 32:6
    }
}

fn <impl at ui/overloaded/overloaded-autoderef-count.rs:35:1: 35:37>::deref_mut(_1: &mut DerefCounter<T>) -> &mut T {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:36:18: 36:27
    let mut _0: &mut T;                  // return place in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:36:32: 36:38
    let mut _2: &mut T;                  // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:38:9: 38:24
    let mut _3: (usize, bool);           // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:37:9: 37:28
    let mut _4: &mut T;                  // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:38:9: 38:24

    bb0: {
        _3 = CheckedAdd(((*_1).1: usize), const 1_usize); // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:37:9: 37:28
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> bb1; // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:37:9: 37:28
    }

    bb1: {
        ((*_1).1: usize) = move (_3.0: usize); // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:37:9: 37:28
        _4 = &mut ((*_1).2: T);          // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:38:9: 38:24
        _2 = &mut (*_4);                 // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:38:9: 38:24
        _0 = &mut (*_2);                 // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:38:9: 38:24
        return;                          // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:39:6: 39:6
    }
}

fn <impl at ui/overloaded/overloaded-autoderef-count.rs:42:10: 42:19>::eq(_1: &Point, _2: &Point) -> bool {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:42:10: 42:19
    debug other => _2;                   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:42:10: 42:19
    let mut _0: bool;                    // return place in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:42:10: 42:19
    let mut _3: bool;                    // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:44:5: 44:13
    let mut _4: isize;                   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:44:5: 44:13
    let mut _5: isize;                   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:44:5: 44:13
    let mut _6: bool;                    // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
    let mut _7: isize;                   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
    let mut _8: isize;                   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13

    bb0: {
        _4 = ((*_1).0: isize);           // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:44:5: 44:13
        _5 = ((*_2).0: isize);           // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:44:5: 44:13
        _3 = Eq(move _4, move _5);       // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:44:5: 44:13
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
        goto -> bb3;                     // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
    }

    bb2: {
        _7 = ((*_1).1: isize);           // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
        _8 = ((*_2).1: isize);           // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
        _6 = Eq(move _7, move _8);       // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
        _0 = move _6;                    // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
        goto -> bb3;                     // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
    }

    bb3: {
        return;                          // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:42:19: 42:19
    }
}

fn <impl at ui/overloaded/overloaded-autoderef-count.rs:42:21: 42:26>::fmt(_1: &Point, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:42:21: 42:26
    debug f => _2;                       // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:42:21: 42:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:42:21: 42:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:42:21: 42:26
    let mut _4: &str;                    // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:42:21: 42:26
    let _5: &str;                        // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:42:21: 42:26
    let mut _6: &str;                    // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:44:5: 44:13
    let _7: &str;                        // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:44:5: 44:13
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:44:5: 44:13
    let mut _9: &isize;                  // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:44:5: 44:13
    let _10: &isize;                     // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:44:5: 44:13
    let mut _11: &str;                   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
    let _12: &str;                       // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
    let mut _14: &&isize;                // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
    let _15: &&isize;                    // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
    let _16: &isize;                     // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:42:21: 42:26
        _5 = const "Point";              // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:42:21: 42:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:42:21: 42:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:42:21: 42:26
        _7 = const "x";                  // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:44:5: 44:13
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:44:5: 44:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:44:5: 44:13
        _10 = &((*_1).0: isize);         // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:44:5: 44:13
        _9 = _10;                        // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:44:5: 44:13
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:44:5: 44:13
        _12 = const "y";                 // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
        _16 = &((*_1).1: isize);         // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
        _15 = &_16;                      // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
        _14 = _15;                       // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:45:5: 45:13
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _3, move _4, move _6, move _8, move _11, move _13) -> bb1; // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:42:21: 42:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:42:21: 42:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:42:26: 42:26
    }
}

fn <impl at ui/overloaded/overloaded-autoderef-count.rs:48:1: 48:11>::get(_1: &Point) -> (isize, isize) {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:49:12: 49:17
    let mut _0: (isize, isize);          // return place in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:49:22: 49:36
    let mut _2: isize;                   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:50:10: 50:16
    let mut _3: isize;                   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:50:18: 50:24

    bb0: {
        _2 = ((*_1).0: isize);           // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:50:10: 50:16
        _3 = ((*_1).1: isize);           // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:50:18: 50:24
        _0 = (move _2, move _3);         // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:50:9: 50:25
        return;                          // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:51:6: 51:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:54:15: 54:15
    let mut _1: DerefCounter<Point>;     // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:55:9: 55:14
    let mut _2: Point;                   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:55:35: 55:53
    let mut _3: &Point;                  // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:57:13: 57:16
    let mut _4: &DerefCounter<Point>;    // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:57:13: 57:14
    let mut _5: (&(usize, usize), &(usize, usize)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &(usize, usize);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _7: (usize, usize);              // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:58:16: 58:26
    let mut _8: &DerefCounter<Point>;    // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:58:16: 58:26
    let mut _9: &(usize, usize);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &(usize, usize);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &(usize, usize);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _24: &Point;                     // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:60:14: 60:17
    let mut _25: &DerefCounter<Point>;   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:60:14: 60:15
    let mut _26: (&(usize, usize), &(usize, usize)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _27: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _28: (usize, usize);             // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:61:16: 61:26
    let mut _29: &DerefCounter<Point>;   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:61:16: 61:26
    let mut _30: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _33: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _34: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _35: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _36: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _38: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _39: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _40: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _41: &(usize, usize);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _42: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _43: &(usize, usize);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _45: &mut Point;             // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:63:18: 63:21
    let mut _46: &mut DerefCounter<Point>; // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:63:18: 63:19
    let mut _47: (&(usize, usize), &(usize, usize)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _48: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _49: (usize, usize);             // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:64:16: 64:26
    let mut _50: &DerefCounter<Point>;   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:64:16: 64:26
    let mut _51: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _54: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _55: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _56: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _57: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _59: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _60: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _61: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _62: &(usize, usize);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _63: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _64: &(usize, usize);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _66: &mut Point;             // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:66:5: 66:8
    let mut _67: &mut DerefCounter<Point>; // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:66:5: 66:6
    let mut _68: (isize, bool);          // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:66:5: 66:13
    let mut _69: (&(usize, usize), &(usize, usize)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _70: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _71: (usize, usize);             // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:67:16: 67:26
    let mut _72: &DerefCounter<Point>;   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:67:16: 67:26
    let mut _73: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _76: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _77: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _78: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _79: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _81: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _82: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _83: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _84: &(usize, usize);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _85: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _86: &(usize, usize);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _87: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _88: (isize, isize);             // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:69:5: 69:12
    let mut _89: &Point;                 // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:69:5: 69:12
    let _90: &Point;                     // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:69:5: 69:12
    let mut _91: &DerefCounter<Point>;   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:69:5: 69:12
    let mut _92: (&(usize, usize), &(usize, usize)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _93: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _94: (usize, usize);             // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:70:16: 70:26
    let mut _95: &DerefCounter<Point>;   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:70:16: 70:26
    let mut _96: &(usize, usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _99: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _100: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _101: &(usize, usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _102: &(usize, usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _104: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _105: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _106: &(usize, usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _107: &(usize, usize);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _108: &(usize, usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _109: &(usize, usize);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _110: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _111: (&Point, &Point);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _112: &Point;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _113: &Point;                    // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:73:16: 73:18
    let mut _114: &DerefCounter<Point>;  // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:73:17: 73:18
    let mut _115: &Point;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _118: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _119: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _120: &Point;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _121: &Point;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _123: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _124: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _125: &Point;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _126: &Point;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _127: &Point;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _128: &Point;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _129: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug p => _1;                   // in scope 1 at ui/overloaded/overloaded-autoderef-count.rs:55:9: 55:14
        scope 2 {
            let _10: &(usize, usize);    // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _11: &(usize, usize);    // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _135: &(usize, usize); // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _10;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _11;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _16: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _16;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                let _31: &(usize, usize); // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _32: &(usize, usize); // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _134: &(usize, usize); // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 6 {
                    debug left_val => _31; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _32; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _37: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 7 {
                        debug kind => _37; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 8 {
                    let _52: &(usize, usize); // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _53: &(usize, usize); // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _74: &(usize, usize); // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _75: &(usize, usize); // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _97: &(usize, usize); // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _98: &(usize, usize); // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _116: &Point;    // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _117: &Point;    // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let mut _130: &Point; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    let mut _131: &(usize, usize); // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    let mut _132: &(usize, usize); // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    let mut _133: &(usize, usize); // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 9 {
                        debug left_val => _52; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _53; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _58: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 10 {
                            debug kind => _58; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 11 {
                        debug left_val => _74; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _75; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _80: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 12 {
                            debug kind => _80; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 13 {
                        debug left_val => _97; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _98; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _103: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 14 {
                            debug kind => _103; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 15 {
                        debug left_val => _116; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _117; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _122: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 16 {
                            debug kind => _122; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = Point { x: const 0_isize, y: const 0_isize }; // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:55:35: 55:53
        _1 = DerefCounter::<Point>::new(move _2) -> bb1; // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:55:17: 55:54
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:55:17: 55:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Point) -> DerefCounter<Point> {DerefCounter::<Point>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_1;                        // scope 1 at ui/overloaded/overloaded-autoderef-count.rs:57:13: 57:14
        _3 = <DerefCounter<Point> as Deref>::deref(move _4) -> bb2; // scope 1 at ui/overloaded/overloaded-autoderef-count.rs:57:13: 57:16
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:57:13: 57:16
                                         // + literal: Const { ty: for<'a> fn(&'a DerefCounter<Point>) -> &'a <DerefCounter<Point> as Deref>::Target {<DerefCounter<Point> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &_1;                        // scope 2 at ui/overloaded/overloaded-autoderef-count.rs:58:16: 58:26
        _7 = DerefCounter::<Point>::counts(move _8) -> bb3; // scope 2 at ui/overloaded/overloaded-autoderef-count.rs:58:16: 58:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:58:18: 58:24
                                         // + literal: Const { ty: for<'a> fn(&'a DerefCounter<Point>) -> (usize, usize) {DerefCounter::<Point>::counts}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = &_7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _135 = const _;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(usize, usize), val: Unevaluated(main, [], Some(promoted[5])) }
        _9 = _135;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _9);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_5.0: &(usize, usize));   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_5.1: &(usize, usize));   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = _11;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = <(usize, usize) as PartialEq>::eq(move _14, move _15) -> bb4; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (usize, usize), &'b (usize, usize)) -> bool {<(usize, usize) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = Not(move _13);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _18, move _19, move _21, move _23); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (usize, usize), &'b (usize, usize), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(usize, usize), (usize, usize)>}, val: Value(<ZST>) }
    }

    bb6: {
        _25 = &_1;                       // scope 2 at ui/overloaded/overloaded-autoderef-count.rs:60:14: 60:15
        _24 = <DerefCounter<Point> as Deref>::deref(move _25) -> bb7; // scope 2 at ui/overloaded/overloaded-autoderef-count.rs:60:14: 60:17
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:60:14: 60:17
                                         // + literal: Const { ty: for<'a> fn(&'a DerefCounter<Point>) -> &'a <DerefCounter<Point> as Deref>::Target {<DerefCounter<Point> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb7: {
        _29 = &_1;                       // scope 5 at ui/overloaded/overloaded-autoderef-count.rs:61:16: 61:26
        _28 = DerefCounter::<Point>::counts(move _29) -> bb8; // scope 5 at ui/overloaded/overloaded-autoderef-count.rs:61:16: 61:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:61:18: 61:24
                                         // + literal: Const { ty: for<'a> fn(&'a DerefCounter<Point>) -> (usize, usize) {DerefCounter::<Point>::counts}, val: Value(<ZST>) }
    }

    bb8: {
        _27 = &_28;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _134 = const _;                  // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(usize, usize), val: Unevaluated(main, [], Some(promoted[4])) }
        _30 = _134;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _26 = (move _27, move _30);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _31 = (_26.0: &(usize, usize));  // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _32 = (_26.1: &(usize, usize));  // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _35 = _31;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _36 = _32;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _34 = <(usize, usize) as PartialEq>::eq(move _35, move _36) -> bb9; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (usize, usize), &'b (usize, usize)) -> bool {<(usize, usize) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _33 = Not(move _34);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _33) -> [0: bb11, otherwise: bb10]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _37 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _41 = _31;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _41;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _43 = _32;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = _43;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _44 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _38 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _39, move _40, move _42, move _44); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (usize, usize), &'b (usize, usize), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(usize, usize), (usize, usize)>}, val: Value(<ZST>) }
    }

    bb11: {
        _46 = &mut _1;                   // scope 5 at ui/overloaded/overloaded-autoderef-count.rs:63:18: 63:19
        _45 = <DerefCounter<Point> as DerefMut>::deref_mut(move _46) -> bb12; // scope 5 at ui/overloaded/overloaded-autoderef-count.rs:63:18: 63:21
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:63:18: 63:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut DerefCounter<Point>) -> &'a mut <DerefCounter<Point> as Deref>::Target {<DerefCounter<Point> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb12: {
        _50 = &_1;                       // scope 8 at ui/overloaded/overloaded-autoderef-count.rs:64:16: 64:26
        _49 = DerefCounter::<Point>::counts(move _50) -> bb13; // scope 8 at ui/overloaded/overloaded-autoderef-count.rs:64:16: 64:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:64:18: 64:24
                                         // + literal: Const { ty: for<'a> fn(&'a DerefCounter<Point>) -> (usize, usize) {DerefCounter::<Point>::counts}, val: Value(<ZST>) }
    }

    bb13: {
        _48 = &_49;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _133 = const _;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(usize, usize), val: Unevaluated(main, [], Some(promoted[3])) }
        _51 = _133;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _47 = (move _48, move _51);      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _52 = (_47.0: &(usize, usize));  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _53 = (_47.1: &(usize, usize));  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _56 = _52;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _57 = _53;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _55 = <(usize, usize) as PartialEq>::eq(move _56, move _57) -> bb14; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (usize, usize), &'b (usize, usize)) -> bool {<(usize, usize) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        _54 = Not(move _55);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _54) -> [0: bb16, otherwise: bb15]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _58 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _60 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _62 = _52;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _61 = _62;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _64 = _53;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _63 = _64;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _65 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _59 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _60, move _61, move _63, move _65); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (usize, usize), &'b (usize, usize), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(usize, usize), (usize, usize)>}, val: Value(<ZST>) }
    }

    bb16: {
        _67 = &mut _1;                   // scope 8 at ui/overloaded/overloaded-autoderef-count.rs:66:5: 66:6
        _66 = <DerefCounter<Point> as DerefMut>::deref_mut(move _67) -> bb17; // scope 8 at ui/overloaded/overloaded-autoderef-count.rs:66:5: 66:8
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:66:5: 66:8
                                         // + literal: Const { ty: for<'a> fn(&'a mut DerefCounter<Point>) -> &'a mut <DerefCounter<Point> as Deref>::Target {<DerefCounter<Point> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb17: {
        _68 = CheckedAdd(((*_66).0: isize), const 3_isize); // scope 8 at ui/overloaded/overloaded-autoderef-count.rs:66:5: 66:13
        assert(!move (_68.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_66).0: isize), const 3_isize) -> bb18; // scope 8 at ui/overloaded/overloaded-autoderef-count.rs:66:5: 66:13
    }

    bb18: {
        ((*_66).0: isize) = move (_68.0: isize); // scope 8 at ui/overloaded/overloaded-autoderef-count.rs:66:5: 66:13
        _72 = &_1;                       // scope 8 at ui/overloaded/overloaded-autoderef-count.rs:67:16: 67:26
        _71 = DerefCounter::<Point>::counts(move _72) -> bb19; // scope 8 at ui/overloaded/overloaded-autoderef-count.rs:67:16: 67:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:67:18: 67:24
                                         // + literal: Const { ty: for<'a> fn(&'a DerefCounter<Point>) -> (usize, usize) {DerefCounter::<Point>::counts}, val: Value(<ZST>) }
    }

    bb19: {
        _70 = &_71;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _132 = const _;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(usize, usize), val: Unevaluated(main, [], Some(promoted[2])) }
        _73 = _132;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _69 = (move _70, move _73);      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _74 = (_69.0: &(usize, usize));  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _75 = (_69.1: &(usize, usize));  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _78 = _74;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _79 = _75;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _77 = <(usize, usize) as PartialEq>::eq(move _78, move _79) -> bb20; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (usize, usize), &'b (usize, usize)) -> bool {<(usize, usize) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb20: {
        _76 = Not(move _77);             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _76) -> [0: bb22, otherwise: bb21]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb21: {
        _80 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _82 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _84 = _74;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _83 = _84;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _86 = _75;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _85 = _86;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _87 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _81 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _82, move _83, move _85, move _87); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (usize, usize), &'b (usize, usize), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(usize, usize), (usize, usize)>}, val: Value(<ZST>) }
    }

    bb22: {
        _91 = &_1;                       // scope 8 at ui/overloaded/overloaded-autoderef-count.rs:69:5: 69:12
        _90 = <DerefCounter<Point> as Deref>::deref(move _91) -> bb23; // scope 8 at ui/overloaded/overloaded-autoderef-count.rs:69:5: 69:12
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:69:5: 69:12
                                         // + literal: Const { ty: for<'a> fn(&'a DerefCounter<Point>) -> &'a <DerefCounter<Point> as Deref>::Target {<DerefCounter<Point> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb23: {
        _89 = _90;                       // scope 8 at ui/overloaded/overloaded-autoderef-count.rs:69:5: 69:12
        _88 = Point::get(move _89) -> bb24; // scope 8 at ui/overloaded/overloaded-autoderef-count.rs:69:5: 69:12
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:69:7: 69:10
                                         // + literal: Const { ty: for<'a> fn(&'a Point) -> (isize, isize) {Point::get}, val: Value(<ZST>) }
    }

    bb24: {
        _95 = &_1;                       // scope 8 at ui/overloaded/overloaded-autoderef-count.rs:70:16: 70:26
        _94 = DerefCounter::<Point>::counts(move _95) -> bb25; // scope 8 at ui/overloaded/overloaded-autoderef-count.rs:70:16: 70:26
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:70:18: 70:24
                                         // + literal: Const { ty: for<'a> fn(&'a DerefCounter<Point>) -> (usize, usize) {DerefCounter::<Point>::counts}, val: Value(<ZST>) }
    }

    bb25: {
        _93 = &_94;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _131 = const _;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(usize, usize), val: Unevaluated(main, [], Some(promoted[1])) }
        _96 = _131;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _92 = (move _93, move _96);      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _97 = (_92.0: &(usize, usize));  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _98 = (_92.1: &(usize, usize));  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _101 = _97;                      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _102 = _98;                      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _100 = <(usize, usize) as PartialEq>::eq(move _101, move _102) -> bb26; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (usize, usize), &'b (usize, usize)) -> bool {<(usize, usize) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb26: {
        _99 = Not(move _100);            // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _99) -> [0: bb28, otherwise: bb27]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb27: {
        _103 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _105 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _107 = _97;                      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _106 = _107;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _109 = _98;                      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _108 = _109;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _110 = Option::<Arguments<'_>>::None; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _104 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _105, move _106, move _108, move _110); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (usize, usize), &'b (usize, usize), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(usize, usize), (usize, usize)>}, val: Value(<ZST>) }
    }

    bb28: {
        _114 = &_1;                      // scope 8 at ui/overloaded/overloaded-autoderef-count.rs:73:17: 73:18
        _113 = <DerefCounter<Point> as Deref>::deref(move _114) -> bb29; // scope 8 at ui/overloaded/overloaded-autoderef-count.rs:73:16: 73:18
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-autoderef-count.rs:73:16: 73:18
                                         // + literal: Const { ty: for<'a> fn(&'a DerefCounter<Point>) -> &'a <DerefCounter<Point> as Deref>::Target {<DerefCounter<Point> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb29: {
        _112 = _113;                     // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _130 = const _;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Point, val: Unevaluated(main, [], Some(promoted[0])) }
        _115 = _130;                     // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _111 = (move _112, move _115);   // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _116 = (_111.0: &Point);         // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _117 = (_111.1: &Point);         // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _120 = _116;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _121 = _117;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _119 = <Point as PartialEq>::eq(move _120, move _121) -> bb30; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Point, &'b Point) -> bool {<Point as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb30: {
        _118 = Not(move _119);           // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _118) -> [0: bb32, otherwise: bb31]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb31: {
        _122 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _124 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _126 = _116;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _125 = _126;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _128 = _117;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _127 = _128;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _129 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _123 = core::panicking::assert_failed::<Point, Point>(move _124, move _125, move _127, move _129); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Point, &'b Point, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Point, Point>}, val: Value(<ZST>) }
    }

    bb32: {
        return;                          // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:74:2: 74:2
    }
}

promoted[0] in main: &Point = {
    let mut _0: &Point;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Point;                   // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:73:20: 73:38

    bb0: {
        _1 = Point { x: const 3_isize, y: const 0_isize }; // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:73:20: 73:38
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);         // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: (usize, usize);          // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:70:28: 70:34

    bb0: {
        _1 = (const 3_usize, const 2_usize); // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:70:28: 70:34
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);         // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: (usize, usize);          // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:67:28: 67:34

    bb0: {
        _1 = (const 2_usize, const 2_usize); // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:67:28: 67:34
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);         // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: (usize, usize);          // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:64:28: 64:34

    bb0: {
        _1 = (const 2_usize, const 1_usize); // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:64:28: 64:34
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);         // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: (usize, usize);          // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:61:28: 61:34

    bb0: {
        _1 = (const 2_usize, const 0_usize); // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:61:28: 61:34
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);         // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: (usize, usize);          // in scope 0 at ui/overloaded/overloaded-autoderef-count.rs:58:28: 58:34

    bb0: {
        _1 = (const 1_usize, const 0_usize); // scope 0 at ui/overloaded/overloaded-autoderef-count.rs:58:28: 58:34
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
