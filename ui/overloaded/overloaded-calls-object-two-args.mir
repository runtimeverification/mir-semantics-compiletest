// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &mut dyn FnMut(isize, isize) -> isize) -> isize {
    debug f => _1;
    let mut _0: isize;
    let mut _2: (isize, isize);

    bb0: {
        _2 = (const 1_isize, const 2_isize);
        _0 = <dyn FnMut(isize, isize) -> isize as FnMut<(isize, isize)>>::call_mut(_1, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: isize;
    let mut _2: &mut dyn std::ops::FnMut(isize, isize) -> isize;
    let mut _3: &mut [closure@ui/overloaded/overloaded-calls-object-two-args.rs:11:22: 11:28];
    let mut _4: [closure@ui/overloaded/overloaded-calls-object-two-args.rs:11:22: 11:28];
    let mut _5: (&isize, &isize);
    let mut _6: &isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug z => _1;
        let _7: &isize;
        let _8: &isize;
        let mut _16: &isize;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
    }

    bb0: {
        _3 = &mut _4;
        _2 = _3 as &mut dyn std::ops::FnMut(isize, isize) -> isize (Pointer(Unsize));
        _1 = foo(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_1;
        _16 = const _;
        _5 = (move _6, _16);
        _7 = (_5.0: &isize);
        _8 = (_5.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 12_isize;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/overloaded/overloaded-calls-object-two-args.rs:11:22: 11:28], _2: isize, _3: isize) -> isize {
    debug x => _2;
    debug y => _3;
    let mut _0: isize;
    let mut _4: isize;

    bb0: {
        _4 = Mul(_2, const 10_isize);
        _0 = Add(move _4, _3);
        return;
    }
}
