// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-index-in-field.rs:16:1: 16:26>::index(_1: &Foo, _2: isize) -> &isize {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-index-in-field.rs:19:14: 19:19
    debug z => _2;                       // in scope 0 at ui/overloaded/overloaded-index-in-field.rs:19:21: 19:22
    let mut _0: &isize;                  // return place in scope 0 at ui/overloaded/overloaded-index-in-field.rs:19:34: 19:40
    let mut _3: isize;                   // in scope 0 at ui/overloaded/overloaded-index-in-field.rs:20:12: 20:13
    let _4: &isize;                      // in scope 0 at ui/overloaded/overloaded-index-in-field.rs:21:13: 21:20
    let _5: &isize;                      // in scope 0 at ui/overloaded/overloaded-index-in-field.rs:23:13: 23:20

    bb0: {
        _3 = _2;                         // scope 0 at ui/overloaded/overloaded-index-in-field.rs:20:12: 20:13
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/overloaded/overloaded-index-in-field.rs:20:12: 20:18
    }

    bb1: {
        _4 = &((*_1).0: isize);          // scope 0 at ui/overloaded/overloaded-index-in-field.rs:21:13: 21:20
        _0 = _4;                         // scope 0 at ui/overloaded/overloaded-index-in-field.rs:21:13: 21:20
        goto -> bb3;                     // scope 0 at ui/overloaded/overloaded-index-in-field.rs:20:9: 24:10
    }

    bb2: {
        _5 = &((*_1).1: isize);          // scope 0 at ui/overloaded/overloaded-index-in-field.rs:23:13: 23:20
        _0 = _5;                         // scope 0 at ui/overloaded/overloaded-index-in-field.rs:23:13: 23:20
        goto -> bb3;                     // scope 0 at ui/overloaded/overloaded-index-in-field.rs:20:9: 24:10
    }

    bb3: {
        return;                          // scope 0 at ui/overloaded/overloaded-index-in-field.rs:25:6: 25:6
    }
}

fn <impl at ui/overloaded/overloaded-index-in-field.rs:34:1: 34:19>::get(_1: isize) -> isize {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-index-in-field.rs:35:12: 35:16
    let mut _0: isize;                   // return place in scope 0 at ui/overloaded/overloaded-index-in-field.rs:35:21: 35:26

    bb0: {
        _0 = _1;                         // scope 0 at ui/overloaded/overloaded-index-in-field.rs:35:29: 35:33
        return;                          // scope 0 at ui/overloaded/overloaded-index-in-field.rs:35:35: 35:35
    }
}

fn <impl at ui/overloaded/overloaded-index-in-field.rs:34:1: 34:19>::get_from_ref(_1: &isize) -> isize {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-index-in-field.rs:36:21: 36:26
    let mut _0: isize;                   // return place in scope 0 at ui/overloaded/overloaded-index-in-field.rs:36:31: 36:36

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/overloaded/overloaded-index-in-field.rs:36:39: 36:44
        return;                          // scope 0 at ui/overloaded/overloaded-index-in-field.rs:36:46: 36:46
    }
}

fn <impl at ui/overloaded/overloaded-index-in-field.rs:34:1: 34:19>::inc(_1: &mut isize) -> () {
    debug self => _1;                    // in scope 0 at ui/overloaded/overloaded-index-in-field.rs:37:12: 37:21
    let mut _0: ();                      // return place in scope 0 at ui/overloaded/overloaded-index-in-field.rs:37:23: 37:23
    let mut _2: (isize, bool);           // in scope 0 at ui/overloaded/overloaded-index-in-field.rs:37:25: 37:35

    bb0: {
        _2 = CheckedAdd((*_1), const 1_isize); // scope 0 at ui/overloaded/overloaded-index-in-field.rs:37:25: 37:35
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_1), const 1_isize) -> bb1; // scope 0 at ui/overloaded/overloaded-index-in-field.rs:37:25: 37:35
    }

    bb1: {
        (*_1) = move (_2.0: isize);      // scope 0 at ui/overloaded/overloaded-index-in-field.rs:37:25: 37:35
        return;                          // scope 0 at ui/overloaded/overloaded-index-in-field.rs:37:38: 37:38
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/overloaded/overloaded-index-in-field.rs:40:11: 40:11
    let _1: Bar;                         // in scope 0 at ui/overloaded/overloaded-index-in-field.rs:41:9: 41:10
    let mut _2: Foo;                     // in scope 0 at ui/overloaded/overloaded-index-in-field.rs:41:24: 44:6
    let mut _3: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: isize;                       // in scope 0 at ui/overloaded/overloaded-index-in-field.rs:45:16: 45:30
    let mut _6: isize;                   // in scope 0 at ui/overloaded/overloaded-index-in-field.rs:45:16: 45:24
    let mut _7: &isize;                  // in scope 0 at ui/overloaded/overloaded-index-in-field.rs:45:16: 45:24
    let mut _8: &Foo;                    // in scope 0 at ui/overloaded/overloaded-index-in-field.rs:45:16: 45:21
    let mut _9: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/overloaded/overloaded-index-in-field.rs:41:9: 41:10
        let _10: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _11: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _24: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _10;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _11;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _16: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _16;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _2 = Foo { x: const 1_isize, y: const 2_isize }; // scope 0 at ui/overloaded/overloaded-index-in-field.rs:41:24: 44:6
        _1 = Bar { foo: move _2 };       // scope 0 at ui/overloaded/overloaded-index-in-field.rs:41:13: 44:8
        _8 = &(_1.0: Foo);               // scope 1 at ui/overloaded/overloaded-index-in-field.rs:45:16: 45:21
        _7 = <Foo as Index<isize>>::index(move _8, const 1_isize) -> bb1; // scope 1 at ui/overloaded/overloaded-index-in-field.rs:45:16: 45:24
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-in-field.rs:45:16: 45:24
                                         // + literal: Const { ty: for<'a> fn(&'a Foo, isize) -> &'a <Foo as Index<isize>>::Output {<Foo as Index<isize>>::index}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = (*_7);                      // scope 1 at ui/overloaded/overloaded-index-in-field.rs:45:16: 45:24
        _5 = <isize as Int>::get(move _6) -> bb2; // scope 1 at ui/overloaded/overloaded-index-in-field.rs:45:16: 45:30
                                         // mir::Constant
                                         // + span: ui/overloaded/overloaded-index-in-field.rs:45:25: 45:28
                                         // + literal: Const { ty: fn(isize) -> isize {<isize as Int>::get}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &_5;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _9 = _24;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _9);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_3.0: &isize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_3.1: &isize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const 2_isize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<isize, isize>(move _18, move _19, move _21, move _23); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/overloaded/overloaded-index-in-field.rs:46:2: 46:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/overloaded/overloaded-index-in-field.rs:45:32: 45:33

    bb0: {
        _1 = const 2_isize;              // scope 0 at ui/overloaded/overloaded-index-in-field.rs:45:32: 45:33
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
