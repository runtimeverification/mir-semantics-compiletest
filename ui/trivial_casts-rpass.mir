// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Foo::foo(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/trivial_casts-rpass.rs:7:12: 7:17
    let mut _0: ();                      // return place in scope 0 at ui/trivial_casts-rpass.rs:7:19: 7:19

    bb0: {
        return;                          // scope 0 at ui/trivial_casts-rpass.rs:7:21: 7:21
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/trivial_casts-rpass.rs:14:15: 14:15
    let _2: &u32;                        // in scope 0 at ui/trivial_casts-rpass.rs:20:19: 20:22
    let mut _4: &mut u32;                // in scope 0 at ui/trivial_casts-rpass.rs:23:23: 23:30
    let mut _5: u32;                     // in scope 0 at ui/trivial_casts-rpass.rs:23:28: 23:30
    let _7: &[u32; 3];                   // in scope 0 at ui/trivial_casts-rpass.rs:27:24: 27:37
    let mut _9: &mut [u32; 3];           // in scope 0 at ui/trivial_casts-rpass.rs:31:28: 31:45
    let mut _10: [u32; 3];               // in scope 0 at ui/trivial_casts-rpass.rs:31:33: 31:45
    let mut _12: [u32; 3];               // in scope 0 at ui/trivial_casts-rpass.rs:35:37: 35:49
    let mut _13: std::boxed::Box<[u32]>; // in scope 0 at ui/trivial_casts-rpass.rs:36:13: 36:28
    let mut _14: std::boxed::Box<[u32; 3]>; // in scope 0 at ui/trivial_casts-rpass.rs:36:13: 36:14
    let _16: &Bar;                       // in scope 0 at ui/trivial_casts-rpass.rs:39:19: 39:23
    let mut _18: &mut Bar;               // in scope 0 at ui/trivial_casts-rpass.rs:43:23: 43:31
    let mut _19: Bar;                    // in scope 0 at ui/trivial_casts-rpass.rs:43:28: 43:31
    let mut _21: Bar;                    // in scope 0 at ui/trivial_casts-rpass.rs:47:32: 47:35
    let mut _22: std::boxed::Box<dyn Foo>; // in scope 0 at ui/trivial_casts-rpass.rs:48:13: 48:30
    let mut _23: std::boxed::Box<Bar>;   // in scope 0 at ui/trivial_casts-rpass.rs:48:13: 48:14
    scope 1 {
        scope 2 {
            let _1: &u32;                // in scope 2 at ui/trivial_casts-rpass.rs:20:9: 20:10
            let mut _27: &u32;           // in scope 2 at ui/trivial_casts-rpass.rs:20:19: 20:22
            scope 3 {
                debug x => _1;           // in scope 3 at ui/trivial_casts-rpass.rs:20:9: 20:10
                scope 4 {
                    let _3: &mut u32;    // in scope 4 at ui/trivial_casts-rpass.rs:23:9: 23:10
                    scope 5 {
                        debug x => _3;   // in scope 5 at ui/trivial_casts-rpass.rs:23:9: 23:10
                        scope 6 {
                            let _6: &[u32; 3]; // in scope 6 at ui/trivial_casts-rpass.rs:27:9: 27:10
                            let mut _26: &[u32; 3]; // in scope 6 at ui/trivial_casts-rpass.rs:27:24: 27:37
                            scope 7 {
                                debug x => _6; // in scope 7 at ui/trivial_casts-rpass.rs:27:9: 27:10
                                scope 8 {
                                    scope 9 {
                                        let _8: &mut [u32; 3]; // in scope 9 at ui/trivial_casts-rpass.rs:31:9: 31:10
                                        scope 10 {
                                            debug x => _8; // in scope 10 at ui/trivial_casts-rpass.rs:31:9: 31:10
                                            scope 11 {
                                                scope 12 {
                                                    let _11: std::boxed::Box<[u32; 3]>; // in scope 12 at ui/trivial_casts-rpass.rs:35:9: 35:10
                                                    scope 13 {
                                                        debug x => _11; // in scope 13 at ui/trivial_casts-rpass.rs:35:9: 35:10
                                                        scope 14 {
                                                            let _15: &Bar; // in scope 14 at ui/trivial_casts-rpass.rs:39:9: 39:10
                                                            let mut _25: &Bar; // in scope 14 at ui/trivial_casts-rpass.rs:39:19: 39:23
                                                            scope 15 {
                                                                debug x => _15; // in scope 15 at ui/trivial_casts-rpass.rs:39:9: 39:10
                                                                scope 16 {
                                                                    scope 17 {
                                                                        let _17: &mut Bar; // in scope 17 at ui/trivial_casts-rpass.rs:43:9: 43:10
                                                                        scope 18 {
                                                                            debug x => _17; // in scope 18 at ui/trivial_casts-rpass.rs:43:9: 43:10
                                                                            scope 19 {
                                                                                scope 20 {
                                                                                    let _20: std::boxed::Box<Bar>; // in scope 20 at ui/trivial_casts-rpass.rs:47:9: 47:10
                                                                                    scope 21 {
                                                                                        debug x => _20; // in scope 21 at ui/trivial_casts-rpass.rs:47:9: 47:10
                                                                                        scope 22 {
                                                                                            scope 23 {
                                                                                                let _24: [closure@ui/trivial_casts-rpass.rs:53:13: 53:22]; // in scope 23 at ui/trivial_casts-rpass.rs:53:9: 53:10
                                                                                                scope 24 {
                                                                                                    debug x => _24; // in scope 24 at ui/trivial_casts-rpass.rs:53:9: 53:10
                                                                                                    scope 25 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _27 = const _;                   // scope 2 at ui/trivial_casts-rpass.rs:20:19: 20:22
                                         // mir::Constant
                                         // + span: ui/trivial_casts-rpass.rs:20:19: 20:22
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[3])) }
        _2 = _27;                        // scope 2 at ui/trivial_casts-rpass.rs:20:19: 20:22
        _1 = _2;                         // scope 2 at ui/trivial_casts-rpass.rs:20:19: 20:22
        _5 = const 42_u32;               // scope 4 at ui/trivial_casts-rpass.rs:23:28: 23:30
        _4 = &mut _5;                    // scope 4 at ui/trivial_casts-rpass.rs:23:23: 23:30
        _3 = &mut (*_4);                 // scope 4 at ui/trivial_casts-rpass.rs:23:23: 23:30
        _26 = const _;                   // scope 6 at ui/trivial_casts-rpass.rs:27:24: 27:37
                                         // mir::Constant
                                         // + span: ui/trivial_casts-rpass.rs:27:24: 27:37
                                         // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[2])) }
        _7 = _26;                        // scope 6 at ui/trivial_casts-rpass.rs:27:24: 27:37
        _6 = _7;                         // scope 6 at ui/trivial_casts-rpass.rs:27:24: 27:37
        _10 = [const 42_u32, const 43_u32, const 44_u32]; // scope 9 at ui/trivial_casts-rpass.rs:31:33: 31:45
        _9 = &mut _10;                   // scope 9 at ui/trivial_casts-rpass.rs:31:28: 31:45
        _8 = &mut (*_9);                 // scope 9 at ui/trivial_casts-rpass.rs:31:28: 31:45
        _12 = [const 42_u32, const 43_u32, const 44_u32]; // scope 12 at ui/trivial_casts-rpass.rs:35:37: 35:49
        _11 = Box::<[u32; 3]>::new(move _12) -> bb1; // scope 12 at ui/trivial_casts-rpass.rs:35:28: 35:50
                                         // mir::Constant
                                         // + span: ui/trivial_casts-rpass.rs:35:28: 35:36
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn([u32; 3]) -> Box<[u32; 3]> {Box::<[u32; 3]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _14 = move _11;                  // scope 13 at ui/trivial_casts-rpass.rs:36:13: 36:14
        _13 = move _14 as std::boxed::Box<[u32]> (Pointer(Unsize)); // scope 13 at ui/trivial_casts-rpass.rs:36:13: 36:14
        drop(_13) -> bb2;                // scope 13 at ui/trivial_casts-rpass.rs:36:28: 36:29
    }

    bb2: {
        _25 = const _;                   // scope 14 at ui/trivial_casts-rpass.rs:39:19: 39:23
                                         // mir::Constant
                                         // + span: ui/trivial_casts-rpass.rs:39:19: 39:23
                                         // + literal: Const { ty: &Bar, val: Unevaluated(main, [], Some(promoted[1])) }
        _16 = _25;                       // scope 14 at ui/trivial_casts-rpass.rs:39:19: 39:23
        _15 = _16;                       // scope 14 at ui/trivial_casts-rpass.rs:39:19: 39:23
        _18 = &mut _19;                  // scope 17 at ui/trivial_casts-rpass.rs:43:23: 43:31
        _17 = &mut (*_18);               // scope 17 at ui/trivial_casts-rpass.rs:43:23: 43:31
        _20 = Box::<Bar>::new(move _21) -> bb3; // scope 20 at ui/trivial_casts-rpass.rs:47:23: 47:36
                                         // mir::Constant
                                         // + span: ui/trivial_casts-rpass.rs:47:23: 47:31
                                         // + user_ty: UserType(22)
                                         // + literal: Const { ty: fn(Bar) -> Box<Bar> {Box::<Bar>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _23 = move _20;                  // scope 21 at ui/trivial_casts-rpass.rs:48:13: 48:14
        _22 = move _23 as std::boxed::Box<dyn Foo> (Pointer(Unsize)); // scope 21 at ui/trivial_casts-rpass.rs:48:13: 48:14
        drop(_22) -> bb4;                // scope 21 at ui/trivial_casts-rpass.rs:48:30: 48:31
    }

    bb4: {
        return;                          // scope 0 at ui/trivial_casts-rpass.rs:55:2: 55:2
    }
}

promoted[0] in main: &fn(i32) {baz} = {
    let mut _0: &fn(i32) {main::baz};    // return place in scope 0 at ui/trivial_casts-rpass.rs:52:13: 52:17
    let mut _1: fn(i32) {main::baz};     // in scope 0 at ui/trivial_casts-rpass.rs:52:14: 52:17

    bb0: {
        _1 = baz;                        // scope 0 at ui/trivial_casts-rpass.rs:52:14: 52:17
                                         // mir::Constant
                                         // + span: ui/trivial_casts-rpass.rs:52:14: 52:17
                                         // + literal: Const { ty: fn(i32) {baz}, val: Value(<ZST>) }
        _0 = &_1;                        // scope 0 at ui/trivial_casts-rpass.rs:52:13: 52:17
        return;                          // scope 0 at ui/trivial_casts-rpass.rs:52:13: 52:17
    }
}

promoted[1] in main: &Bar = {
    let mut _0: &Bar;                    // return place in scope 0 at ui/trivial_casts-rpass.rs:39:19: 39:23
    let mut _1: Bar;                     // in scope 0 at ui/trivial_casts-rpass.rs:39:20: 39:23

    bb0: {
        _1 = Bar;                        // scope 0 at ui/trivial_casts-rpass.rs:39:20: 39:23
        _0 = &_1;                        // scope 0 at ui/trivial_casts-rpass.rs:39:19: 39:23
        return;                          // scope 0 at ui/trivial_casts-rpass.rs:39:19: 39:23
    }
}

promoted[2] in main: &[u32; 3] = {
    let mut _0: &[u32; 3];               // return place in scope 0 at ui/trivial_casts-rpass.rs:27:24: 27:37
    let mut _1: [u32; 3];                // in scope 0 at ui/trivial_casts-rpass.rs:27:25: 27:37

    bb0: {
        _1 = [const 42_u32, const 43_u32, const 44_u32]; // scope 0 at ui/trivial_casts-rpass.rs:27:25: 27:37
        _0 = &_1;                        // scope 0 at ui/trivial_casts-rpass.rs:27:24: 27:37
        return;                          // scope 0 at ui/trivial_casts-rpass.rs:27:24: 27:37
    }
}

promoted[3] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/trivial_casts-rpass.rs:20:19: 20:22
    let mut _1: u32;                     // in scope 0 at ui/trivial_casts-rpass.rs:20:20: 20:22

    bb0: {
        _1 = const 42_u32;               // scope 0 at ui/trivial_casts-rpass.rs:20:20: 20:22
        _0 = &_1;                        // scope 0 at ui/trivial_casts-rpass.rs:20:19: 20:22
        return;                          // scope 0 at ui/trivial_casts-rpass.rs:20:19: 20:22
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/trivial_casts-rpass.rs:27:19: 27:20

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/trivial_casts-rpass.rs:27:19: 27:20
        return;                          // scope 0 at ui/trivial_casts-rpass.rs:27:19: 27:20
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/trivial_casts-rpass.rs:31:23: 31:24

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/trivial_casts-rpass.rs:31:23: 31:24
        return;                          // scope 0 at ui/trivial_casts-rpass.rs:31:23: 31:24
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/trivial_casts-rpass.rs:35:22: 35:23

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/trivial_casts-rpass.rs:35:22: 35:23
        return;                          // scope 0 at ui/trivial_casts-rpass.rs:35:22: 35:23
    }
}

fn baz(_1: i32) -> () {
    debug _x => _1;                      // in scope 0 at ui/trivial_casts-rpass.rs:51:12: 51:14
    let mut _0: ();                      // return place in scope 0 at ui/trivial_casts-rpass.rs:51:21: 51:21

    bb0: {
        return;                          // scope 0 at ui/trivial_casts-rpass.rs:51:23: 51:23
    }
}

fn main::{closure#0}(_1: &[closure@ui/trivial_casts-rpass.rs:53:13: 53:22], _2: i32) -> () {
    debug _x => _2;                      // in scope 0 at ui/trivial_casts-rpass.rs:53:14: 53:16
    let mut _0: ();                      // return place in scope 0 at ui/trivial_casts-rpass.rs:53:23: 53:23

    bb0: {
        return;                          // scope 0 at ui/trivial_casts-rpass.rs:53:25: 53:25
    }
}

fn test_subtyping(_1: &Bar, _2: &Bar) -> () {
    debug a => _1;                       // in scope 0 at ui/trivial_casts-rpass.rs:58:35: 58:36
    debug b => _2;                       // in scope 0 at ui/trivial_casts-rpass.rs:58:47: 58:48
    let mut _0: ();                      // return place in scope 0 at ui/trivial_casts-rpass.rs:58:59: 58:59
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        return;                          // scope 0 at ui/trivial_casts-rpass.rs:62:2: 62:2
    }
}
