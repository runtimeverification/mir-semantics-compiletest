// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn black_box(_1: T) -> () {
    debug dummy => _1;
    let mut _0: ();
    let _2: T;

    bb0: {
        _2 = std::intrinsics::black_box::<T>(move _1) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn silent_recurse() -> () {
    let mut _0: ();
    let _1: [u8; 1000];
    let _2: ();
    let _3: ();
    scope 1 {
        debug buf => _1;
    }

    bb0: {
        _1 = [const 0_u8; 1000];
        _2 = black_box::<[u8; 1000]>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = silent_recurse() -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

silent_recurse::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1000_usize;
        return;
    }
}

fn loud_recurse() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: ();
    let _5: ();
    let mut _6: &[&str; 1];

    bb0: {
        _6 = const _;
        _3 = _6 as &[&str] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_const(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = _print(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = loud_recurse() -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = black_box::<()>(const ()) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in loud_recurse: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "hello!\n"];
        _0 = &_1;
        return;
    }
}

fn check_status(_1: ExitStatus) -> () {
    debug status => _1;
    let mut _0: ();
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: &std::process::ExitStatus;
    let mut _6: !;
    let mut _7: (&std::option::Option<i32>, &std::option::Option<i32>);
    let mut _8: &std::option::Option<i32>;
    let _9: std::option::Option<i32>;
    let mut _10: &std::process::ExitStatus;
    let _11: &std::option::Option<i32>;
    let _12: &std::option::Option<i32>;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: &std::option::Option<i32>;
    scope 1 {
        debug left_val => _11;
        debug right_val => _12;
        let _15: core::panicking::AssertKind;
        scope 2 {
            debug kind => _15;
        }
    }

    bb0: {
        _5 = &_1;
        _4 = ExitStatus::success(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = Not(move _4);
        _2 = Not(move _3);
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::panic(const "assertion failed: !status.success()") -> unwind continue;
    }

    bb3: {
        _10 = &_1;
        _9 = <ExitStatus as ExitStatusExt>::signal(move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = &_9;
        _18 = const _;
        _7 = (move _8, _18);
        _11 = (_7.0: &std::option::Option<i32>);
        _12 = (_7.1: &std::option::Option<i32>);
        _14 = <Option<i32> as PartialEq>::eq(_11, _12) -> [return: bb5, unwind continue];
    }

    bb5: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _15, _11, _12, move _17) -> unwind continue;
    }

    bb7: {
        return;
    }
}

promoted[0] in check_status: &Option<i32> = {
    let mut _0: &std::option::Option<i32>;
    let mut _1: std::option::Option<i32>;

    bb0: {
        _1 = Option::<i32>::Some(const _);
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<std::string::String>;
    let mut _2: std::env::Args;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: usize;
    let mut _6: &std::vec::Vec<std::string::String>;
    let mut _7: bool;
    let mut _8: &std::string::String;
    let _9: &std::string::String;
    let mut _10: &std::vec::Vec<std::string::String>;
    let _11: ();
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: usize;
    let mut _15: &std::vec::Vec<std::string::String>;
    let mut _16: bool;
    let mut _17: &std::string::String;
    let _18: &std::string::String;
    let mut _19: &std::vec::Vec<std::string::String>;
    let _20: ();
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: usize;
    let mut _24: &std::vec::Vec<std::string::String>;
    let mut _25: bool;
    let mut _26: &std::string::String;
    let _27: &std::string::String;
    let mut _28: &std::vec::Vec<std::string::String>;
    let _29: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _30: std::thread::JoinHandle<()>;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: usize;
    let mut _34: &std::vec::Vec<std::string::String>;
    let mut _35: bool;
    let mut _36: &std::string::String;
    let _37: &std::string::String;
    let mut _38: &std::vec::Vec<std::string::String>;
    let _39: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _40: std::thread::JoinHandle<()>;
    let mut _42: std::boxed::Box<[&str]>;
    let mut _43: usize;
    let mut _44: usize;
    let mut _45: *mut u8;
    let mut _46: std::boxed::Box<[&str; 2]>;
    let _47: &str;
    let mut _48: bool;
    let _49: ();
    let mut _50: &mut std::vec::Vec<&str>;
    let _51: &str;
    let _52: ();
    let mut _53: &mut std::vec::Vec<&str>;
    let _54: &str;
    let mut _55: std::vec::IntoIter<&str>;
    let mut _56: std::vec::Vec<&str>;
    let mut _58: std::option::Option<&str>;
    let mut _59: &mut std::vec::IntoIter<&str>;
    let mut _60: isize;
    let _62: ();
    let mut _63: std::fmt::Arguments<'_>;
    let mut _64: &[&str];
    let mut _65: &[core::fmt::rt::Argument<'_>];
    let _66: &[core::fmt::rt::Argument<'_>; 1];
    let _67: [core::fmt::rt::Argument<'_>; 1];
    let mut _68: core::fmt::rt::Argument<'_>;
    let _69: &&str;
    let mut _71: std::result::Result<std::process::Output, std::io::Error>;
    let mut _72: &mut std::process::Command;
    let mut _73: &mut std::process::Command;
    let mut _74: &mut std::process::Command;
    let mut _75: std::process::Command;
    let mut _76: &std::string::String;
    let _77: &std::string::String;
    let mut _78: &std::vec::Vec<std::string::String>;
    let mut _79: &str;
    let _80: ();
    let mut _81: std::process::ExitStatus;
    let mut _83: &[u8];
    let _84: &[u8];
    let _85: &std::vec::Vec<u8>;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: &str;
    let _89: &str;
    let mut _90: &std::borrow::Cow<'_, str>;
    let _91: !;
    let mut _92: std::fmt::Arguments<'_>;
    let mut _93: &[&str];
    let mut _94: &[core::fmt::rt::Argument<'_>];
    let _95: &[core::fmt::rt::Argument<'_>; 1];
    let _96: [core::fmt::rt::Argument<'_>; 1];
    let mut _97: core::fmt::rt::Argument<'_>;
    let _98: &std::borrow::Cow<'_, str>;
    let mut _105: bool;
    let mut _106: *const [&str; 2];
    scope 1 {
        debug args => _1;
        let mut _41: std::vec::Vec<&str>;
        let mut _101: &&str;
        let mut _102: &&str;
        let mut _103: &&str;
        let mut _104: &&str;
        let mut _107: *const ();
        let mut _108: usize;
        let mut _109: usize;
        let mut _110: usize;
        let mut _111: usize;
        let mut _112: bool;
        scope 2 {
            debug modes => _41;
            let mut _57: std::vec::IntoIter<&str>;
            scope 4 {
                debug iter => _57;
                let _61: &str;
                scope 5 {
                    debug mode => _61;
                    let _70: std::process::Output;
                    let mut _100: &[&str; 2];
                    scope 6 {
                        debug silent => _70;
                        let _82: std::borrow::Cow<'_, str>;
                        scope 7 {
                            debug error => _82;
                            let mut _99: &[&str; 1];
                        }
                    }
                }
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _105 = const false;
        _2 = args() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = <Args as Iterator>::collect::<Vec<String>>(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_1;
        _5 = Vec::<String>::len(move _6) -> [return: bb6, unwind: bb76];
    }

    bb3: {
        _3 = const false;
        goto -> bb5;
    }

    bb4: {
        _10 = &_1;
        _9 = <Vec<String> as Index<usize>>::index(move _10, const 1_usize) -> [return: bb7, unwind: bb76];
    }

    bb5: {
        switchInt(move _3) -> [0: bb10, otherwise: bb9];
    }

    bb6: {
        _4 = Gt(move _5, const 1_usize);
        switchInt(move _4) -> [0: bb3, otherwise: bb4];
    }

    bb7: {
        _8 = _9;
        _104 = const _;
        _7 = <String as PartialEq<&str>>::eq(move _8, _104) -> [return: bb8, unwind: bb76];
    }

    bb8: {
        _3 = move _7;
        goto -> bb5;
    }

    bb9: {
        _11 = silent_recurse() -> [return: bb81, unwind: bb76];
    }

    bb10: {
        _15 = &_1;
        _14 = Vec::<String>::len(move _15) -> [return: bb14, unwind: bb76];
    }

    bb11: {
        _12 = const false;
        goto -> bb13;
    }

    bb12: {
        _19 = &_1;
        _18 = <Vec<String> as Index<usize>>::index(move _19, const 1_usize) -> [return: bb15, unwind: bb76];
    }

    bb13: {
        switchInt(move _12) -> [0: bb18, otherwise: bb17];
    }

    bb14: {
        _13 = Gt(move _14, const 1_usize);
        switchInt(move _13) -> [0: bb11, otherwise: bb12];
    }

    bb15: {
        _17 = _18;
        _103 = const _;
        _16 = <String as PartialEq<&str>>::eq(move _17, _103) -> [return: bb16, unwind: bb76];
    }

    bb16: {
        _12 = move _16;
        goto -> bb13;
    }

    bb17: {
        _20 = loud_recurse() -> [return: bb82, unwind: bb76];
    }

    bb18: {
        _24 = &_1;
        _23 = Vec::<String>::len(move _24) -> [return: bb22, unwind: bb76];
    }

    bb19: {
        _21 = const false;
        goto -> bb21;
    }

    bb20: {
        _28 = &_1;
        _27 = <Vec<String> as Index<usize>>::index(move _28, const 1_usize) -> [return: bb23, unwind: bb76];
    }

    bb21: {
        switchInt(move _21) -> [0: bb28, otherwise: bb25];
    }

    bb22: {
        _22 = Gt(move _23, const 1_usize);
        switchInt(move _22) -> [0: bb19, otherwise: bb20];
    }

    bb23: {
        _26 = _27;
        _102 = const _;
        _25 = <String as PartialEq<&str>>::eq(move _26, _102) -> [return: bb24, unwind: bb76];
    }

    bb24: {
        _21 = move _25;
        goto -> bb21;
    }

    bb25: {
        _30 = spawn::<fn() {silent_recurse}, ()>(silent_recurse) -> [return: bb26, unwind: bb76];
    }

    bb26: {
        _29 = JoinHandle::<()>::join(move _30) -> [return: bb27, unwind: bb76];
    }

    bb27: {
        drop(_29) -> [return: bb70, unwind: bb76];
    }

    bb28: {
        _34 = &_1;
        _33 = Vec::<String>::len(move _34) -> [return: bb32, unwind: bb76];
    }

    bb29: {
        _31 = const false;
        goto -> bb31;
    }

    bb30: {
        _38 = &_1;
        _37 = <Vec<String> as Index<usize>>::index(move _38, const 1_usize) -> [return: bb33, unwind: bb76];
    }

    bb31: {
        switchInt(move _31) -> [0: bb38, otherwise: bb35];
    }

    bb32: {
        _32 = Gt(move _33, const 1_usize);
        switchInt(move _32) -> [0: bb29, otherwise: bb30];
    }

    bb33: {
        _36 = _37;
        _101 = const _;
        _35 = <String as PartialEq<&str>>::eq(move _36, _101) -> [return: bb34, unwind: bb76];
    }

    bb34: {
        _31 = move _35;
        goto -> bb31;
    }

    bb35: {
        _40 = spawn::<fn() {loud_recurse}, ()>(loud_recurse) -> [return: bb36, unwind: bb76];
    }

    bb36: {
        _39 = JoinHandle::<()>::join(move _40) -> [return: bb37, unwind: bb76];
    }

    bb37: {
        drop(_39) -> [return: bb70, unwind: bb76];
    }

    bb38: {
        _43 = SizeOf([&str; 2]);
        _44 = AlignOf([&str; 2]);
        _45 = alloc::alloc::exchange_malloc(move _43, move _44) -> [return: bb39, unwind: bb76];
    }

    bb39: {
        _46 = ShallowInitBox(move _45, [&str; 2]);
        _47 = const "loud-thread";
        _106 = (((_46.0: std::ptr::Unique<[&str; 2]>).0: std::ptr::NonNull<[&str; 2]>).0: *const [&str; 2]);
        _107 = _106 as *const () (PtrToPtr);
        _108 = _107 as usize (Transmute);
        _109 = AlignOf(&str);
        _110 = Sub(_109, const 1_usize);
        _111 = BitAnd(_108, _110);
        _112 = Eq(_111, const 0_usize);
        assert(_112, "misaligned pointer dereference: address must be a multiple of {} but is {}", _109, _108) -> [success: bb80, unwind unreachable];
    }

    bb40: {
        _105 = const true;
        _48 = Not(const true);
        switchInt(move _48) -> [0: bb43, otherwise: bb41];
    }

    bb41: {
        _50 = &mut _41;
        _51 = const "silent";
        _49 = Vec::<&str>::push(move _50, _51) -> [return: bb42, unwind: bb79];
    }

    bb42: {
        _53 = &mut _41;
        _54 = const "loud";
        _52 = Vec::<&str>::push(move _53, _54) -> [return: bb83, unwind: bb79];
    }

    bb43: {
        _105 = const false;
        _56 = move _41;
        _55 = <Vec<&str> as IntoIterator>::into_iter(move _56) -> [return: bb44, unwind: bb79];
    }

    bb44: {
        _57 = move _55;
        goto -> bb45;
    }

    bb45: {
        _59 = &mut _57;
        _58 = <std::vec::IntoIter<&str> as Iterator>::next(_59) -> [return: bb46, unwind: bb75];
    }

    bb46: {
        _60 = discriminant(_58);
        switchInt(move _60) -> [0: bb49, 1: bb47, otherwise: bb48];
    }

    bb47: {
        _61 = ((_58 as Some).0: &str);
        _100 = const _;
        _64 = _100 as &[&str] (Pointer(Unsize));
        _69 = &_61;
        _68 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_69) -> [return: bb50, unwind: bb75];
    }

    bb48: {
        unreachable;
    }

    bb49: {
        drop(_57) -> [return: bb69, unwind: bb79];
    }

    bb50: {
        _67 = [move _68];
        _66 = &_67;
        _65 = _66 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _63 = Arguments::<'_>::new_v1(move _64, move _65) -> [return: bb51, unwind: bb75];
    }

    bb51: {
        _62 = _print(move _63) -> [return: bb52, unwind: bb75];
    }

    bb52: {
        _78 = &_1;
        _77 = <Vec<String> as Index<usize>>::index(move _78, const 0_usize) -> [return: bb53, unwind: bb75];
    }

    bb53: {
        _76 = _77;
        _75 = Command::new::<&String>(move _76) -> [return: bb54, unwind: bb75];
    }

    bb54: {
        _74 = &mut _75;
        _79 = _61;
        _73 = Command::arg::<&str>(move _74, move _79) -> [return: bb55, unwind: bb74];
    }

    bb55: {
        _72 = _73;
        _71 = Command::output(move _72) -> [return: bb56, unwind: bb74];
    }

    bb56: {
        _70 = Result::<Output, std::io::Error>::unwrap(move _71) -> [return: bb57, unwind: bb74];
    }

    bb57: {
        drop(_75) -> [return: bb58, unwind: bb73];
    }

    bb58: {
        _81 = (_70.0: std::process::ExitStatus);
        _80 = check_status(move _81) -> [return: bb59, unwind: bb73];
    }

    bb59: {
        _85 = &(_70.2: std::vec::Vec<u8>);
        _84 = <Vec<u8> as Deref>::deref(_85) -> [return: bb60, unwind: bb73];
    }

    bb60: {
        _83 = _84;
        _82 = String::from_utf8_lossy(move _83) -> [return: bb61, unwind: bb73];
    }

    bb61: {
        _90 = &_82;
        _89 = <Cow<'_, str> as Deref>::deref(move _90) -> [return: bb62, unwind: bb72];
    }

    bb62: {
        _88 = _89;
        _87 = core::str::<impl str>::contains::<'_, &str>(move _88, const "has overflowed its stack") -> [return: bb63, unwind: bb72];
    }

    bb63: {
        _86 = Not(move _87);
        switchInt(move _86) -> [0: bb67, otherwise: bb64];
    }

    bb64: {
        _99 = const _;
        _93 = _99 as &[&str] (Pointer(Unsize));
        _98 = &_82;
        _97 = core::fmt::rt::Argument::<'_>::new_display::<Cow<'_, str>>(_98) -> [return: bb65, unwind: bb72];
    }

    bb65: {
        _96 = [move _97];
        _95 = &_96;
        _94 = _95 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _92 = Arguments::<'_>::new_v1(move _93, move _94) -> [return: bb66, unwind: bb72];
    }

    bb66: {
        _91 = panic_fmt(move _92) -> bb72;
    }

    bb67: {
        drop(_82) -> [return: bb68, unwind: bb73];
    }

    bb68: {
        drop(_70) -> [return: bb45, unwind: bb75];
    }

    bb69: {
        _105 = const false;
        goto -> bb70;
    }

    bb70: {
        drop(_1) -> [return: bb71, unwind continue];
    }

    bb71: {
        return;
    }

    bb72 (cleanup): {
        drop(_82) -> [return: bb73, unwind terminate];
    }

    bb73 (cleanup): {
        drop(_70) -> [return: bb75, unwind terminate];
    }

    bb74 (cleanup): {
        drop(_75) -> [return: bb75, unwind terminate];
    }

    bb75 (cleanup): {
        drop(_57) -> [return: bb79, unwind terminate];
    }

    bb76 (cleanup): {
        drop(_1) -> [return: bb77, unwind terminate];
    }

    bb77 (cleanup): {
        resume;
    }

    bb78 (cleanup): {
        drop(_41) -> [return: bb76, unwind terminate];
    }

    bb79 (cleanup): {
        switchInt(_105) -> [0: bb76, otherwise: bb78];
    }

    bb80: {
        (*_106) = [const "silent-thread", _47];
        _42 = move _46 as std::boxed::Box<[&str]> (Pointer(Unsize));
        _41 = slice::<impl [&str]>::into_vec::<std::alloc::Global>(move _42) -> [return: bb40, unwind: bb76];
    }

    bb81: {
        goto -> bb70;
    }

    bb82: {
        goto -> bb70;
    }

    bb83: {
        goto -> bb43;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "missing overflow message: "];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "testing: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "loud-thread";
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "silent-thread";
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "loud";
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "silent";
        _0 = &_1;
        return;
    }
}
