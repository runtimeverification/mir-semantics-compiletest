// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn start(_1: isize, _2: *const *const u8) -> isize {
    debug argc => _1;
    debug argv => _2;
    let mut _0: isize;
    let mut _3: bool;
    let mut _4: char;
    let mut _5: u8;
    let mut _6: *const *const u8;
    let mut _7: *const *const u8;
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let _14: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _15: !;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let _19: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _20: !;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: &std::result::Result<std::process::Child, std::io::Error>;
    let _24: std::result::Result<std::process::Child, std::io::Error>;
    let mut _25: &mut std::process::Command;
    let mut _26: std::process::Command;
    let mut _27: !;
    let mut _28: !;
    let _29: std::vec::Vec<std::vec::Vec<u8>>;
    let mut _30: std::iter::Map<std::ops::Range<usize>, [closure@ui/runtime/running-with-no-runtime.rs:31:32: 31:35]>;
    let mut _31: std::ops::Range<usize>;
    let mut _32: usize;
    let mut _33: [closure@ui/runtime/running-with-no-runtime.rs:31:32: 31:35];
    let mut _34: &*const *const u8;
    let mut _36: std::result::Result<std::string::String, std::string::FromUtf8Error>;
    let mut _37: std::vec::Vec<u8>;
    let mut _38: &[u8];
    let _39: &[u8];
    let mut _40: &std::vec::Vec<u8>;
    let _41: &std::vec::Vec<u8>;
    let mut _42: &std::vec::Vec<std::vec::Vec<u8>>;
    let _43: ();
    let mut _44: std::process::Output;
    let mut _45: std::result::Result<std::process::Output, std::io::Error>;
    let mut _46: &mut std::process::Command;
    let mut _47: &mut std::process::Command;
    let mut _48: &mut std::process::Command;
    let mut _49: std::process::Command;
    let mut _50: &std::string::String;
    let _51: ();
    let mut _52: std::process::Output;
    let mut _53: std::result::Result<std::process::Output, std::io::Error>;
    let mut _54: &mut std::process::Command;
    let mut _55: &mut std::process::Command;
    let mut _56: &mut std::process::Command;
    let mut _57: std::process::Command;
    let mut _58: &std::string::String;
    let _59: ();
    let mut _60: std::process::Output;
    let mut _61: std::result::Result<std::process::Output, std::io::Error>;
    let mut _62: &mut std::process::Command;
    let mut _63: &mut std::process::Command;
    let mut _64: &mut std::process::Command;
    let mut _65: std::process::Command;
    let mut _66: &std::string::String;
    let _67: ();
    let mut _68: std::process::Output;
    let mut _69: std::result::Result<std::process::Output, std::io::Error>;
    let mut _70: &mut std::process::Command;
    let mut _71: &mut std::process::Command;
    let mut _72: &mut std::process::Command;
    let mut _73: std::process::Command;
    let mut _74: &std::string::String;
    let _75: ();
    let mut _76: std::process::Output;
    let mut _77: std::result::Result<std::process::Output, std::io::Error>;
    let mut _78: &mut std::process::Command;
    let mut _79: &mut std::process::Command;
    let mut _80: &mut std::process::Command;
    let mut _81: std::process::Command;
    let mut _82: &std::string::String;
    let mut _84: *const u8;
    scope 1 {
        let mut _83: &[&str; 1];
        let mut _85: *const ();
        let mut _86: usize;
        let mut _87: usize;
        let mut _88: usize;
        let mut _89: usize;
        let mut _90: bool;
    }
    scope 2 {
        debug args => _29;
        let _35: std::string::String;
        scope 4 {
            debug me => _35;
        }
    }
    scope 3 {
    }

    bb0: {
        _3 = Gt(_1, const 1_isize);
        switchInt(move _3) -> [0: bb24, otherwise: bb1];
    }

    bb1: {
        _7 = _2;
        _6 = ptr::const_ptr::<impl *const *const u8>::offset(move _7, const 1_isize) -> [return: bb2, unwind continue];
    }

    bb2: {
        _85 = _6 as *const () (PtrToPtr);
        _86 = _85 as usize (Transmute);
        _87 = AlignOf(*const u8);
        _88 = Sub(_87, const 1_usize);
        _89 = BitAnd(_86, _88);
        _90 = Eq(_89, const 0_usize);
        assert(_90, "misaligned pointer dereference: address must be a multiple of {} but is {}", _87, _86) -> [success: bb76, unwind unreachable];
    }

    bb3: {
        _28 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb4: {
        _83 = const _;
        _10 = _83 as &[&str] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_const(move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = _print(move _9) -> [return: bb23, unwind continue];
    }

    bb6: {
        _14 = catch_unwind::<[closure@ui/runtime/running-with-no-runtime.rs:21:52: 21:54], ()>(const ZeroSized: [closure@ui/runtime/running-with-no-runtime.rs:21:52: 21:54]) -> [return: bb7, unwind continue];
    }

    bb7: {
        _13 = &_14;
        _12 = Result::<(), Box<dyn Any + Send>>::is_ok(move _13) -> [return: bb8, unwind: bb74];
    }

    bb8: {
        _11 = Not(move _12);
        drop(_14) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _11) -> [0: bb23, otherwise: bb10];
    }

    bb10: {
        _15 = core::panicking::panic(const "assertion failed: panic::catch_unwind(|| {}).is_ok()") -> unwind continue;
    }

    bb11: {
        _19 = catch_unwind::<[closure@ui/runtime/running-with-no-runtime.rs:22:52: 22:54], ()>(const ZeroSized: [closure@ui/runtime/running-with-no-runtime.rs:22:52: 22:54]) -> [return: bb12, unwind continue];
    }

    bb12: {
        _18 = &_19;
        _17 = Result::<(), Box<dyn Any + Send>>::is_err(move _18) -> [return: bb13, unwind: bb73];
    }

    bb13: {
        _16 = Not(move _17);
        drop(_19) -> [return: bb14, unwind continue];
    }

    bb14: {
        switchInt(move _16) -> [0: bb23, otherwise: bb15];
    }

    bb15: {
        _20 = core::panicking::panic(const "assertion failed: panic::catch_unwind(|| panic!()).is_err()") -> unwind continue;
    }

    bb16: {
        _26 = Command::new::<&str>(const "test") -> [return: bb17, unwind continue];
    }

    bb17: {
        _25 = &mut _26;
        _24 = Command::spawn(move _25) -> [return: bb18, unwind: bb72];
    }

    bb18: {
        _23 = &_24;
        _22 = Result::<Child, std::io::Error>::is_err(move _23) -> [return: bb19, unwind: bb71];
    }

    bb19: {
        _21 = Not(move _22);
        drop(_24) -> [return: bb20, unwind: bb72];
    }

    bb20: {
        drop(_26) -> [return: bb21, unwind continue];
    }

    bb21: {
        switchInt(move _21) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _27 = core::panicking::panic(const "assertion failed: Command::new(\\\"test\\\").spawn().is_err()") -> unwind continue;
    }

    bb23: {
        _0 = const 0_isize;
        goto -> bb63;
    }

    bb24: {
        _32 = _1 as usize (IntToInt);
        _31 = std::ops::Range::<usize> { start: const 0_usize, end: move _32 };
        _34 = &_2;
        _33 = [closure@ui/runtime/running-with-no-runtime.rs:31:32: 31:35] { argv: move _34 };
        _30 = <std::ops::Range<usize> as Iterator>::map::<Vec<u8>, [closure@ui/runtime/running-with-no-runtime.rs:31:32: 31:35]>(move _31, move _33) -> [return: bb25, unwind continue];
    }

    bb25: {
        _29 = <Map<std::ops::Range<usize>, [closure@ui/runtime/running-with-no-runtime.rs:31:32: 31:35]> as Iterator>::collect::<Vec<Vec<u8>>>(move _30) -> [return: bb26, unwind continue];
    }

    bb26: {
        _42 = &_29;
        _41 = <Vec<Vec<u8>> as Index<usize>>::index(move _42, const 0_usize) -> [return: bb27, unwind: bb70];
    }

    bb27: {
        _40 = _41;
        _39 = <Vec<u8> as Deref>::deref(move _40) -> [return: bb28, unwind: bb70];
    }

    bb28: {
        _38 = _39;
        _37 = slice::<impl [u8]>::to_vec(move _38) -> [return: bb29, unwind: bb70];
    }

    bb29: {
        _36 = String::from_utf8(move _37) -> [return: bb30, unwind: bb70];
    }

    bb30: {
        _35 = Result::<String, FromUtf8Error>::unwrap(move _36) -> [return: bb31, unwind: bb70];
    }

    bb31: {
        _50 = &_35;
        _49 = Command::new::<&String>(move _50) -> [return: bb32, unwind: bb69];
    }

    bb32: {
        _48 = &mut _49;
        _47 = Command::arg::<&str>(move _48, const "1") -> [return: bb33, unwind: bb68];
    }

    bb33: {
        _46 = _47;
        _45 = Command::output(move _46) -> [return: bb34, unwind: bb68];
    }

    bb34: {
        _44 = Result::<Output, std::io::Error>::unwrap(move _45) -> [return: bb35, unwind: bb68];
    }

    bb35: {
        _43 = pass(move _44) -> [return: bb36, unwind: bb68];
    }

    bb36: {
        drop(_49) -> [return: bb37, unwind: bb69];
    }

    bb37: {
        _58 = &_35;
        _57 = Command::new::<&String>(move _58) -> [return: bb38, unwind: bb69];
    }

    bb38: {
        _56 = &mut _57;
        _55 = Command::arg::<&str>(move _56, const "2") -> [return: bb39, unwind: bb67];
    }

    bb39: {
        _54 = _55;
        _53 = Command::output(move _54) -> [return: bb40, unwind: bb67];
    }

    bb40: {
        _52 = Result::<Output, std::io::Error>::unwrap(move _53) -> [return: bb41, unwind: bb67];
    }

    bb41: {
        _51 = pass(move _52) -> [return: bb42, unwind: bb67];
    }

    bb42: {
        drop(_57) -> [return: bb43, unwind: bb69];
    }

    bb43: {
        _66 = &_35;
        _65 = Command::new::<&String>(move _66) -> [return: bb44, unwind: bb69];
    }

    bb44: {
        _64 = &mut _65;
        _63 = Command::arg::<&str>(move _64, const "3") -> [return: bb45, unwind: bb66];
    }

    bb45: {
        _62 = _63;
        _61 = Command::output(move _62) -> [return: bb46, unwind: bb66];
    }

    bb46: {
        _60 = Result::<Output, std::io::Error>::unwrap(move _61) -> [return: bb47, unwind: bb66];
    }

    bb47: {
        _59 = pass(move _60) -> [return: bb48, unwind: bb66];
    }

    bb48: {
        drop(_65) -> [return: bb49, unwind: bb69];
    }

    bb49: {
        _74 = &_35;
        _73 = Command::new::<&String>(move _74) -> [return: bb50, unwind: bb69];
    }

    bb50: {
        _72 = &mut _73;
        _71 = Command::arg::<&str>(move _72, const "4") -> [return: bb51, unwind: bb65];
    }

    bb51: {
        _70 = _71;
        _69 = Command::output(move _70) -> [return: bb52, unwind: bb65];
    }

    bb52: {
        _68 = Result::<Output, std::io::Error>::unwrap(move _69) -> [return: bb53, unwind: bb65];
    }

    bb53: {
        _67 = pass(move _68) -> [return: bb54, unwind: bb65];
    }

    bb54: {
        drop(_73) -> [return: bb55, unwind: bb69];
    }

    bb55: {
        _82 = &_35;
        _81 = Command::new::<&String>(move _82) -> [return: bb56, unwind: bb69];
    }

    bb56: {
        _80 = &mut _81;
        _79 = Command::arg::<&str>(move _80, const "5") -> [return: bb57, unwind: bb64];
    }

    bb57: {
        _78 = _79;
        _77 = Command::output(move _78) -> [return: bb58, unwind: bb64];
    }

    bb58: {
        _76 = Result::<Output, std::io::Error>::unwrap(move _77) -> [return: bb59, unwind: bb64];
    }

    bb59: {
        _75 = pass(move _76) -> [return: bb60, unwind: bb64];
    }

    bb60: {
        drop(_81) -> [return: bb61, unwind: bb69];
    }

    bb61: {
        _0 = const 0_isize;
        drop(_35) -> [return: bb62, unwind: bb70];
    }

    bb62: {
        drop(_29) -> [return: bb63, unwind continue];
    }

    bb63: {
        return;
    }

    bb64 (cleanup): {
        drop(_81) -> [return: bb69, unwind terminate];
    }

    bb65 (cleanup): {
        drop(_73) -> [return: bb69, unwind terminate];
    }

    bb66 (cleanup): {
        drop(_65) -> [return: bb69, unwind terminate];
    }

    bb67 (cleanup): {
        drop(_57) -> [return: bb69, unwind terminate];
    }

    bb68 (cleanup): {
        drop(_49) -> [return: bb69, unwind terminate];
    }

    bb69 (cleanup): {
        drop(_35) -> [return: bb70, unwind terminate];
    }

    bb70 (cleanup): {
        drop(_29) -> [return: bb75, unwind terminate];
    }

    bb71 (cleanup): {
        drop(_24) -> [return: bb72, unwind terminate];
    }

    bb72 (cleanup): {
        drop(_26) -> [return: bb75, unwind terminate];
    }

    bb73 (cleanup): {
        drop(_19) -> [return: bb75, unwind terminate];
    }

    bb74 (cleanup): {
        drop(_14) -> [return: bb75, unwind terminate];
    }

    bb75 (cleanup): {
        resume;
    }

    bb76: {
        _84 = deref_copy (*_6);
        _5 = (*_84);
        _4 = move _5 as char (IntToInt);
        switchInt(_4) -> [49: bb23, 50: bb4, 51: bb6, 52: bb11, 53: bb16, otherwise: bb3];
    }
}

promoted[0] in start: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "foo\n"];
        _0 = &_1;
        return;
    }
}

fn start::{closure#1}(_1: [closure@ui/runtime/running-with-no-runtime.rs:21:52: 21:54]) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn start::{closure#2}(_1: [closure@ui/runtime/running-with-no-runtime.rs:22:52: 22:54]) -> () {
    let mut _0: ();
    let mut _2: !;

    bb0: {
        _2 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }
}

fn start::{closure#0}(_1: &mut [closure@ui/runtime/running-with-no-runtime.rs:31:32: 31:35], _2: usize) -> Vec<u8> {
    debug i => _2;
    debug argv => (*((*_1).0: &*const *const u8));
    let mut _0: std::vec::Vec<u8>;
    let mut _3: *const i8;
    let mut _4: *const u8;
    let mut _5: *const *const u8;
    let mut _6: *const *const u8;
    let mut _7: &[u8];
    let _8: &[u8];
    let mut _9: &std::ffi::CStr;
    let _10: &std::ffi::CStr;
    let mut _11: &*const *const u8;
    let mut _12: *const ();
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    scope 1 {
        debug ptr => _3;
    }

    bb0: {
        _11 = deref_copy ((*_1).0: &*const *const u8);
        _6 = (*_11);
        _5 = ptr::const_ptr::<impl *const *const u8>::add(move _6, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _12 = _5 as *const () (PtrToPtr);
        _13 = _12 as usize (Transmute);
        _14 = AlignOf(*const u8);
        _15 = Sub(_14, const 1_usize);
        _16 = BitAnd(_13, _15);
        _17 = Eq(_16, const 0_usize);
        assert(_17, "misaligned pointer dereference: address must be a multiple of {} but is {}", _14, _13) -> [success: bb5, unwind unreachable];
    }

    bb2: {
        _9 = _10;
        _8 = CStr::to_bytes(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = _8;
        _0 = slice::<impl [u8]>::to_vec(move _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5: {
        _4 = (*_5);
        _3 = move _4 as *const i8 (PtrToPtr);
        _10 = CStr::from_ptr::<'_>(_3) -> [return: bb2, unwind continue];
    }
}

fn pass(_1: Output) -> () {
    debug output => _1;
    let mut _0: ();
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: &std::process::ExitStatus;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &std::result::Result<&str, std::str::Utf8Error>;
    let _13: std::result::Result<&str, std::str::Utf8Error>;
    let mut _14: &[u8];
    let _15: &[u8];
    let _16: &std::vec::Vec<u8>;
    let _17: ();
    let mut _18: std::fmt::Arguments<'_>;
    let mut _19: &[&str];
    let mut _20: &[core::fmt::rt::Argument<'_>];
    let _21: &[core::fmt::rt::Argument<'_>; 1];
    let _22: [core::fmt::rt::Argument<'_>; 1];
    let mut _23: core::fmt::rt::Argument<'_>;
    let _24: &std::result::Result<&str, std::str::Utf8Error>;
    let _25: std::result::Result<&str, std::str::Utf8Error>;
    let mut _26: &[u8];
    let _27: &[u8];
    let _28: &std::vec::Vec<u8>;
    let mut _29: &[&str; 2];
    let mut _30: &[&str; 2];

    bb0: {
        _4 = &(_1.0: std::process::ExitStatus);
        _3 = ExitStatus::success(move _4) -> [return: bb1, unwind: bb14];
    }

    bb1: {
        _2 = Not(move _3);
        switchInt(move _2) -> [0: bb12, otherwise: bb2];
    }

    bb2: {
        _30 = const _;
        _7 = _30 as &[&str] (Pointer(Unsize));
        _16 = &(_1.1: std::vec::Vec<u8>);
        _15 = <Vec<u8> as Deref>::deref(_16) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _14 = _15;
        _13 = from_utf8(move _14) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_debug::<Result<&str, Utf8Error>>(_12) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _5 = _print(move _6) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        _29 = const _;
        _19 = _29 as &[&str] (Pointer(Unsize));
        _28 = &(_1.2: std::vec::Vec<u8>);
        _27 = <Vec<u8> as Deref>::deref(_28) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        _26 = _27;
        _25 = from_utf8(move _26) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _24 = &_25;
        _23 = core::fmt::rt::Argument::<'_>::new_debug::<Result<&str, Utf8Error>>(_24) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        _22 = [move _23];
        _21 = &_22;
        _20 = _21 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _18 = Arguments::<'_>::new_v1(move _19, move _20) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        _17 = _print(move _18) -> [return: bb16, unwind: bb14];
    }

    bb12: {
        drop(_1) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_1) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }

    bb16: {
        goto -> bb12;
    }
}

promoted[0] in pass: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in pass: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
