// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/runtime/rt-explody-panic-payloads.rs:11:1: 11:19>::drop(_1: &mut Bomb) -> () {
    debug self => _1;                    // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:12:13: 12:22
    let mut _0: ();                      // return place in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:12:24: 12:24
    let _2: !;                           // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:13:9: 13:36
    let mut _3: Bomb;                    // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:13:31: 13:35

    bb0: {
        _2 = panic_any::<Bomb>(move _3); // scope 0 at ui/runtime/rt-explody-panic-payloads.rs:13:9: 13:36
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:13:9: 13:30
                                         // + literal: Const { ty: fn(Bomb) -> ! {panic_any::<Bomb>}, val: Value(<ZST>) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:17:11: 17:11
    let _1: std::vec::Vec<std::string::String>; // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:18:9: 18:13
    let mut _2: std::env::Args;          // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:18:16: 18:27
    let mut _4: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:19:18: 22:6
    let mut _5: &[std::string::String];  // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:19:24: 19:33
    let _6: &[std::string::String];      // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:19:25: 19:33
    let mut _7: &std::vec::Vec<std::string::String>; // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:19:25: 19:29
    let mut _8: std::ops::RangeFull;     // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:19:30: 19:32
    let mut _9: usize;                   // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:20:9: 20:13
    let mut _10: usize;                  // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:20:9: 20:13
    let mut _11: bool;                   // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:20:9: 20:13
    let mut _13: &mut std::process::Command; // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:20:17: 20:60
    let mut _14: &mut std::process::Command; // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:20:17: 20:51
    let mut _15: &mut std::process::Command; // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:20:17: 20:51
    let mut _16: std::process::Command;  // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:20:17: 20:34
    let mut _17: &&std::string::String;  // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:20:30: 20:33
    let mut _18: !;                      // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:21:17: 21:44
    let mut _19: Bomb;                   // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:21:39: 21:43
    let mut _20: &str;                   // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:22:14: 22:57
    let _21: &str;                       // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:22:14: 22:57
    let _22: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _23: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _24: &[&str];                // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:23:14: 23:21
    let mut _25: &[&str; 2];             // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:23:14: 23:21
    let _26: &[&str; 2];                 // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:23:14: 23:21
    let mut _27: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _28: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _29: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _30: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _31: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:23:23: 23:29
    let mut _32: &std::process::Output;  // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:23:23: 23:29
    let _33: &std::process::Output;      // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:23:23: 23:29
    let mut _34: &[std::fmt::rt::v1::Argument]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _35: &[std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _36: &[std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _37: [std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _38: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _39: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _40: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _41: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _42: core::fmt::UnsafeArg;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _44: &[u8];                  // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:24:38: 24:52
    let _45: &[u8];                      // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:24:38: 24:52
    let mut _46: &std::vec::Vec<u8>;     // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:24:38: 24:52
    let _47: &std::vec::Vec<u8>;         // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:24:38: 24:52
    let mut _48: bool;                   // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:25:5: 32:27
    let mut _49: bool;                   // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:25:13: 32:26
    let mut _50: std::result::Result<bool, std::str::Utf8Error>; // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:25:13: 31:95
    let mut _51: std::result::Result<&str, std::str::Utf8Error>; // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:25:13: 30:11
    let mut _52: std::result::Result<&str, std::str::Utf8Error>; // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:25:13: 25:19
    let mut _53: [closure@ui/runtime/rt-explody-panic-payloads.rs:26:14: 26:17]; // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:26:14: 30:10
    let mut _54: [closure@ui/runtime/rt-explody-panic-payloads.rs:31:14: 31:17]; // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:31:14: 31:94
    let mut _55: !;                      // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:25:5: 32:27
    scope 1 {
        debug args => _1;                // in scope 1 at ui/runtime/rt-explody-panic-payloads.rs:18:9: 18:13
        let _3: std::process::Output;    // in scope 1 at ui/runtime/rt-explody-panic-payloads.rs:19:9: 19:15
        let _12: &std::string::String;   // in scope 1 at ui/runtime/rt-explody-panic-payloads.rs:20:10: 20:12
        scope 2 {
            debug output => _3;          // in scope 2 at ui/runtime/rt-explody-panic-payloads.rs:19:9: 19:15
            let _43: std::result::Result<&str, std::str::Utf8Error>; // in scope 2 at ui/runtime/rt-explody-panic-payloads.rs:24:9: 24:15
            let mut _56: &[&str; 2];     // in scope 2 at ui/runtime/rt-explody-panic-payloads.rs:23:14: 23:21
            scope 4 {
            }
            scope 5 {
                debug stderr => _43;     // in scope 5 at ui/runtime/rt-explody-panic-payloads.rs:24:9: 24:15
            }
        }
        scope 3 {
            debug me => _12;             // in scope 3 at ui/runtime/rt-explody-panic-payloads.rs:20:10: 20:12
        }
    }

    bb0: {
        _2 = args() -> bb1;              // scope 0 at ui/runtime/rt-explody-panic-payloads.rs:18:16: 18:27
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:18:16: 18:25
                                         // + literal: Const { ty: fn() -> Args {args}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <Args as Iterator>::collect::<Vec<String>>(move _2) -> bb2; // scope 0 at ui/runtime/rt-explody-panic-payloads.rs:18:16: 18:47
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:18:28: 18:35
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Args) -> Vec<String> {<Args as Iterator>::collect::<Vec<String>>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &_1;                        // scope 1 at ui/runtime/rt-explody-panic-payloads.rs:19:25: 19:29
        _6 = <Vec<String> as Index<RangeFull>>::index(move _7, move _8) -> [return: bb3, unwind: bb27]; // scope 1 at ui/runtime/rt-explody-panic-payloads.rs:19:25: 19:33
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:19:25: 19:33
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, RangeFull) -> &'a <Vec<String> as Index<RangeFull>>::Output {<Vec<String> as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = _6;                         // scope 1 at ui/runtime/rt-explody-panic-payloads.rs:19:24: 19:33
        _9 = Len((*_5));                 // scope 1 at ui/runtime/rt-explody-panic-payloads.rs:20:9: 20:13
        _10 = const 1_usize;             // scope 1 at ui/runtime/rt-explody-panic-payloads.rs:20:9: 20:13
        _11 = Eq(move _9, move _10);     // scope 1 at ui/runtime/rt-explody-panic-payloads.rs:20:9: 20:13
        switchInt(move _11) -> [0: bb4, otherwise: bb5]; // scope 1 at ui/runtime/rt-explody-panic-payloads.rs:20:9: 20:13
    }

    bb4: {
        _18 = panic_any::<Bomb>(move _19) -> bb27; // scope 1 at ui/runtime/rt-explody-panic-payloads.rs:21:17: 21:44
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:21:17: 21:38
                                         // + literal: Const { ty: fn(Bomb) -> ! {panic_any::<Bomb>}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = &(*_5)[0 of 1];            // scope 1 at ui/runtime/rt-explody-panic-payloads.rs:20:10: 20:12
        _17 = &_12;                      // scope 3 at ui/runtime/rt-explody-panic-payloads.rs:20:30: 20:33
        _16 = Command::new::<&&String>(move _17) -> [return: bb6, unwind: bb27]; // scope 3 at ui/runtime/rt-explody-panic-payloads.rs:20:17: 20:34
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:20:17: 20:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&&String) -> Command {Command::new::<&&String>}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = &mut _16;                  // scope 3 at ui/runtime/rt-explody-panic-payloads.rs:20:17: 20:51
        _14 = Command::arg::<&str>(move _15, const "plant the") -> [return: bb7, unwind: bb26]; // scope 3 at ui/runtime/rt-explody-panic-payloads.rs:20:17: 20:51
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:20:35: 20:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:20:39: 20:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _13 = &mut (*_14);               // scope 3 at ui/runtime/rt-explody-panic-payloads.rs:20:17: 20:60
        _4 = Command::output(move _13) -> [return: bb8, unwind: bb26]; // scope 3 at ui/runtime/rt-explody-panic-payloads.rs:20:17: 20:60
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:20:52: 20:58
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_16) -> [return: bb9, unwind: bb27]; // scope 3 at ui/runtime/rt-explody-panic-payloads.rs:20:59: 20:60
    }

    bb9: {
        _21 = const "running the command should have succeeded"; // scope 1 at ui/runtime/rt-explody-panic-payloads.rs:22:14: 22:57
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:22:14: 22:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _20 = _21;                       // scope 1 at ui/runtime/rt-explody-panic-payloads.rs:22:14: 22:57
        _3 = Result::<Output, std::io::Error>::expect(move _4, move _20) -> [return: bb10, unwind: bb27]; // scope 1 at ui/runtime/rt-explody-panic-payloads.rs:19:18: 22:58
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:22:7: 22:13
                                         // + literal: Const { ty: for<'a> fn(Result<Output, std::io::Error>, &'a str) -> Output {Result::<Output, std::io::Error>::expect}, val: Value(<ZST>) }
    }

    bb10: {
        _56 = const _;                   // scope 2 at ui/runtime/rt-explody-panic-payloads.rs:23:14: 23:21
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:23:14: 23:21
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _26 = _56;                       // scope 2 at ui/runtime/rt-explody-panic-payloads.rs:23:14: 23:21
        _25 = _26;                       // scope 2 at ui/runtime/rt-explody-panic-payloads.rs:23:14: 23:21
        _24 = move _25 as &[&str] (Pointer(Unsize)); // scope 2 at ui/runtime/rt-explody-panic-payloads.rs:23:14: 23:21
        _33 = &_3;                       // scope 2 at ui/runtime/rt-explody-panic-payloads.rs:23:23: 23:29
        _32 = _33;                       // scope 2 at ui/runtime/rt-explody-panic-payloads.rs:23:23: 23:29
        _31 = core::fmt::ArgumentV1::<'_>::new_debug::<Output>(move _32) -> [return: bb11, unwind: bb25]; // scope 2 at ui/runtime/rt-explody-panic-payloads.rs:23:23: 23:29
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:23:23: 23:29
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b Output) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Output>}, val: Value(<ZST>) }
    }

    bb11: {
        _30 = [move _31];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _29 = &_30;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _28 = _29;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _27 = move _28 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _39 = const std::fmt::rt::v1::Alignment::Unknown; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x03)) }
        _40 = Implied;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _41 = Implied;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _38 = Argument::new(const 0_usize, const ' ', move _39, const 4_u32, move _40, move _41) -> [return: bb12, unwind: bb25]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb12: {
        _37 = [move _38];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _36 = &_37;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _35 = _36;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _34 = move _35 as &[std::fmt::rt::v1::Argument] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _42 = core::fmt::UnsafeArg::new() -> [return: bb13, unwind: bb25]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: unsafe fn() -> core::fmt::UnsafeArg {core::fmt::UnsafeArg::new}, val: Value(<ZST>) }
    }

    bb13: {
        _23 = Arguments::<'_>::new_v1_formatted(move _24, move _27, move _34, move _42) -> [return: bb14, unwind: bb25]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>], &[Argument], core::fmt::UnsafeArg) -> Arguments<'_> {Arguments::<'_>::new_v1_formatted}, val: Value(<ZST>) }
    }

    bb14: {
        _22 = _print(move _23) -> [return: bb15, unwind: bb25]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb15: {
        _47 = &(_3.2: std::vec::Vec<u8>); // scope 2 at ui/runtime/rt-explody-panic-payloads.rs:24:38: 24:52
        _46 = _47;                       // scope 2 at ui/runtime/rt-explody-panic-payloads.rs:24:38: 24:52
        _45 = <Vec<u8> as Deref>::deref(move _46) -> [return: bb16, unwind: bb25]; // scope 2 at ui/runtime/rt-explody-panic-payloads.rs:24:38: 24:52
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:24:38: 24:52
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb16: {
        _44 = _45;                       // scope 2 at ui/runtime/rt-explody-panic-payloads.rs:24:38: 24:52
        _43 = from_utf8(move _44) -> [return: bb17, unwind: bb25]; // scope 2 at ui/runtime/rt-explody-panic-payloads.rs:24:18: 24:53
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:24:18: 24:37
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Result<&'a str, Utf8Error> {from_utf8}, val: Value(<ZST>) }
    }

    bb17: {
        _52 = _43;                       // scope 5 at ui/runtime/rt-explody-panic-payloads.rs:25:13: 25:19
        _51 = Result::<&str, Utf8Error>::map::<&str, [closure@ui/runtime/rt-explody-panic-payloads.rs:26:14: 26:17]>(move _52, move _53) -> [return: bb18, unwind: bb25]; // scope 5 at ui/runtime/rt-explody-panic-payloads.rs:25:13: 30:11
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:26:10: 26:13
                                         // + literal: Const { ty: fn(Result<&str, Utf8Error>, [closure@ui/runtime/rt-explody-panic-payloads.rs:26:14: 26:17]) -> Result<&str, Utf8Error> {Result::<&str, Utf8Error>::map::<&str, [closure@ui/runtime/rt-explody-panic-payloads.rs:26:14: 26:17]>}, val: Value(<ZST>) }
    }

    bb18: {
        _50 = Result::<&str, Utf8Error>::map::<bool, [closure@ui/runtime/rt-explody-panic-payloads.rs:31:14: 31:17]>(move _51, move _54) -> [return: bb19, unwind: bb25]; // scope 5 at ui/runtime/rt-explody-panic-payloads.rs:25:13: 31:95
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:31:10: 31:13
                                         // + literal: Const { ty: fn(Result<&str, Utf8Error>, [closure@ui/runtime/rt-explody-panic-payloads.rs:31:14: 31:17]) -> Result<bool, Utf8Error> {Result::<&str, Utf8Error>::map::<bool, [closure@ui/runtime/rt-explody-panic-payloads.rs:31:14: 31:17]>}, val: Value(<ZST>) }
    }

    bb19: {
        _49 = Result::<bool, Utf8Error>::unwrap_or(move _50, const false) -> [return: bb20, unwind: bb25]; // scope 5 at ui/runtime/rt-explody-panic-payloads.rs:25:13: 32:26
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:32:10: 32:19
                                         // + literal: Const { ty: fn(Result<bool, Utf8Error>, bool) -> bool {Result::<bool, Utf8Error>::unwrap_or}, val: Value(<ZST>) }
    }

    bb20: {
        _48 = Not(move _49);             // scope 5 at ui/runtime/rt-explody-panic-payloads.rs:25:5: 32:27
        switchInt(move _48) -> [0: bb22, otherwise: bb21]; // scope 5 at ui/runtime/rt-explody-panic-payloads.rs:25:5: 32:27
    }

    bb21: {
        _55 = core::panicking::panic(const "assertion failed: stderr.map(|v|\\n                {\\n                    v.strip_suffix(\\\"qemu: uncaught target signal 6 (Aborted) - core dumped\\\\n\\\").unwrap_or(v)\\n                }).map(|v|\\n            {\\n                v.ends_with(\\\"fatal runtime error: drop of the panic payload panicked\\\\n\\\")\\n            }).unwrap_or(false)") -> bb25; // scope 5 at ui/runtime/rt-explody-panic-payloads.rs:25:5: 32:27
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:25:5: 32:27
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb22: {
        drop(_3) -> [return: bb23, unwind: bb27]; // scope 1 at ui/runtime/rt-explody-panic-payloads.rs:33:1: 33:2
    }

    bb23: {
        drop(_1) -> bb24;                // scope 0 at ui/runtime/rt-explody-panic-payloads.rs:33:1: 33:2
    }

    bb24: {
        return;                          // scope 0 at ui/runtime/rt-explody-panic-payloads.rs:33:2: 33:2
    }

    bb25 (cleanup): {
        drop(_3) -> bb27;                // scope 1 at ui/runtime/rt-explody-panic-payloads.rs:33:1: 33:2
    }

    bb26 (cleanup): {
        drop(_16) -> bb27;               // scope 3 at ui/runtime/rt-explody-panic-payloads.rs:20:59: 20:60
    }

    bb27 (cleanup): {
        drop(_1) -> bb28;                // scope 0 at ui/runtime/rt-explody-panic-payloads.rs:33:1: 33:2
    }

    bb28 (cleanup): {
        resume;                          // scope 0 at ui/runtime/rt-explody-panic-payloads.rs:17:1: 33:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:23:14: 23:21
    let mut _1: [&str; 2];               // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:23:14: 23:21

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/runtime/rt-explody-panic-payloads.rs:23:14: 23:21
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:23:14: 23:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:23:14: 23:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/runtime/rt-explody-panic-payloads.rs:23:14: 23:21
        return;                          // scope 0 at ui/runtime/rt-explody-panic-payloads.rs:23:14: 23:21
    }
}

fn main::{closure#0}(_1: [closure@ui/runtime/rt-explody-panic-payloads.rs:26:14: 26:17], _2: &str) -> &str {
    debug v => _2;                       // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:26:15: 26:16
    let mut _0: &str;                    // return place in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:26:18: 26:18
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:29:13: 29:87
    let mut _4: &str;                    // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:29:13: 29:87
    let mut _5: &str;                    // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:29:98: 29:99

    bb0: {
        _4 = _2;                         // scope 0 at ui/runtime/rt-explody-panic-payloads.rs:29:13: 29:87
        _3 = core::str::<impl str>::strip_suffix::<'_, &str>(move _4, const "qemu: uncaught target signal 6 (Aborted) - core dumped\n") -> bb1; // scope 0 at ui/runtime/rt-explody-panic-payloads.rs:29:13: 29:87
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:29:15: 29:27
                                         // + literal: Const { ty: fn(&str, &str) -> Option<&str> {core::str::<impl str>::strip_suffix::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:29:28: 29:86
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _5 = _2;                         // scope 0 at ui/runtime/rt-explody-panic-payloads.rs:29:98: 29:99
        _0 = Option::<&str>::unwrap_or(move _3, move _5) -> bb2; // scope 0 at ui/runtime/rt-explody-panic-payloads.rs:29:13: 29:100
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:29:88: 29:97
                                         // + literal: Const { ty: fn(Option<&str>, &str) -> &str {Option::<&str>::unwrap_or}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/runtime/rt-explody-panic-payloads.rs:30:10: 30:10
    }
}

fn main::{closure#1}(_1: [closure@ui/runtime/rt-explody-panic-payloads.rs:31:14: 31:17], _2: &str) -> bool {
    debug v => _2;                       // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:31:15: 31:16
    let mut _0: bool;                    // return place in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:31:18: 31:18
    let mut _3: &str;                    // in scope 0 at ui/runtime/rt-explody-panic-payloads.rs:31:20: 31:92

    bb0: {
        _3 = _2;                         // scope 0 at ui/runtime/rt-explody-panic-payloads.rs:31:20: 31:92
        _0 = core::str::<impl str>::ends_with::<'_, &str>(move _3, const "fatal runtime error: drop of the panic payload panicked\n") -> bb1; // scope 0 at ui/runtime/rt-explody-panic-payloads.rs:31:20: 31:92
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:31:22: 31:31
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::ends_with::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/runtime/rt-explody-panic-payloads.rs:31:32: 31:91
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        return;                          // scope 0 at ui/runtime/rt-explody-panic-payloads.rs:31:94: 31:94
    }
}
