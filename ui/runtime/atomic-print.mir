// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/runtime/atomic-print.rs:11:1: 11:28>::fmt(_1: &SlowFmt, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/runtime/atomic-print.rs:12:12: 12:17
    debug f => _2;                       // in scope 0 at ui/runtime/atomic-print.rs:12:19: 12:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/runtime/atomic-print.rs:12:46: 12:57
    let _3: ();                          // in scope 0 at ui/runtime/atomic-print.rs:13:9: 13:28
    let mut _4: &u32;                    // in scope 0 at ui/runtime/atomic-print.rs:14:9: 14:22
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/runtime/atomic-print.rs:14:20: 14:21

    bb0: {
        _3 = sleep_ms(const 3_u32) -> bb1; // scope 0 at ui/runtime/atomic-print.rs:13:9: 13:28
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:13:9: 13:25
                                         // + literal: Const { ty: fn(u32) {sleep_ms}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &((*_1).0: u32);            // scope 0 at ui/runtime/atomic-print.rs:14:9: 14:22
        _5 = &mut (*_2);                 // scope 0 at ui/runtime/atomic-print.rs:14:20: 14:21
        _0 = <u32 as Debug>::fmt(move _4, move _5) -> bb2; // scope 0 at ui/runtime/atomic-print.rs:14:9: 14:22
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:14:16: 14:19
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a u32, &'b mut Formatter<'c>) -> Result<(), std::fmt::Error> {<u32 as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/runtime/atomic-print.rs:15:6: 15:6
    }
}

fn do_print(_1: u32) -> () {
    debug x => _1;                       // in scope 0 at ui/runtime/atomic-print.rs:18:13: 18:14
    let mut _0: ();                      // return place in scope 0 at ui/runtime/atomic-print.rs:18:21: 18:21
    let _2: SlowFmt;                     // in scope 0 at ui/runtime/atomic-print.rs:19:9: 19:10
    let mut _3: u32;                     // in scope 0 at ui/runtime/atomic-print.rs:19:21: 19:22
    let _4: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _6: &[&str];                 // in scope 0 at ui/runtime/atomic-print.rs:20:14: 20:36
    let mut _7: &[&str; 6];              // in scope 0 at ui/runtime/atomic-print.rs:20:14: 20:36
    let _8: &[&str; 6];                  // in scope 0 at ui/runtime/atomic-print.rs:20:14: 20:36
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 5]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: &[core::fmt::ArgumentV1<'_>; 5]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: [core::fmt::ArgumentV1<'_>; 5]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/runtime/atomic-print.rs:20:38: 20:39
    let mut _14: &SlowFmt;               // in scope 0 at ui/runtime/atomic-print.rs:20:38: 20:39
    let _15: &SlowFmt;                   // in scope 0 at ui/runtime/atomic-print.rs:20:38: 20:39
    let mut _16: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/runtime/atomic-print.rs:20:41: 20:42
    let mut _17: &SlowFmt;               // in scope 0 at ui/runtime/atomic-print.rs:20:41: 20:42
    let _18: &SlowFmt;                   // in scope 0 at ui/runtime/atomic-print.rs:20:41: 20:42
    let mut _19: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/runtime/atomic-print.rs:20:44: 20:45
    let mut _20: &SlowFmt;               // in scope 0 at ui/runtime/atomic-print.rs:20:44: 20:45
    let _21: &SlowFmt;                   // in scope 0 at ui/runtime/atomic-print.rs:20:44: 20:45
    let mut _22: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/runtime/atomic-print.rs:20:47: 20:48
    let mut _23: &SlowFmt;               // in scope 0 at ui/runtime/atomic-print.rs:20:47: 20:48
    let _24: &SlowFmt;                   // in scope 0 at ui/runtime/atomic-print.rs:20:47: 20:48
    let mut _25: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/runtime/atomic-print.rs:20:50: 20:51
    let mut _26: &SlowFmt;               // in scope 0 at ui/runtime/atomic-print.rs:20:50: 20:51
    let _27: &SlowFmt;                   // in scope 0 at ui/runtime/atomic-print.rs:20:50: 20:51
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/runtime/atomic-print.rs:19:9: 19:10
        let mut _28: &[&str; 6];         // in scope 1 at ui/runtime/atomic-print.rs:20:14: 20:36
    }

    bb0: {
        _3 = _1;                         // scope 0 at ui/runtime/atomic-print.rs:19:21: 19:22
        _2 = SlowFmt(move _3);           // scope 0 at ui/runtime/atomic-print.rs:19:13: 19:23
        _28 = const _;                   // scope 1 at ui/runtime/atomic-print.rs:20:14: 20:36
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:20:14: 20:36
                                         // + literal: Const { ty: &[&str; 6], val: Unevaluated(do_print, [], Some(promoted[0])) }
        _8 = _28;                        // scope 1 at ui/runtime/atomic-print.rs:20:14: 20:36
        _7 = _8;                         // scope 1 at ui/runtime/atomic-print.rs:20:14: 20:36
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 1 at ui/runtime/atomic-print.rs:20:14: 20:36
        _15 = &_2;                       // scope 1 at ui/runtime/atomic-print.rs:20:38: 20:39
        _14 = _15;                       // scope 1 at ui/runtime/atomic-print.rs:20:38: 20:39
        _13 = core::fmt::ArgumentV1::<'_>::new_debug::<SlowFmt>(move _14) -> bb1; // scope 1 at ui/runtime/atomic-print.rs:20:38: 20:39
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:20:38: 20:39
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b SlowFmt) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<SlowFmt>}, val: Value(<ZST>) }
    }

    bb1: {
        _18 = &_2;                       // scope 1 at ui/runtime/atomic-print.rs:20:41: 20:42
        _17 = _18;                       // scope 1 at ui/runtime/atomic-print.rs:20:41: 20:42
        _16 = core::fmt::ArgumentV1::<'_>::new_debug::<SlowFmt>(move _17) -> bb2; // scope 1 at ui/runtime/atomic-print.rs:20:41: 20:42
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:20:41: 20:42
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b SlowFmt) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<SlowFmt>}, val: Value(<ZST>) }
    }

    bb2: {
        _21 = &_2;                       // scope 1 at ui/runtime/atomic-print.rs:20:44: 20:45
        _20 = _21;                       // scope 1 at ui/runtime/atomic-print.rs:20:44: 20:45
        _19 = core::fmt::ArgumentV1::<'_>::new_debug::<SlowFmt>(move _20) -> bb3; // scope 1 at ui/runtime/atomic-print.rs:20:44: 20:45
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:20:44: 20:45
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b SlowFmt) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<SlowFmt>}, val: Value(<ZST>) }
    }

    bb3: {
        _24 = &_2;                       // scope 1 at ui/runtime/atomic-print.rs:20:47: 20:48
        _23 = _24;                       // scope 1 at ui/runtime/atomic-print.rs:20:47: 20:48
        _22 = core::fmt::ArgumentV1::<'_>::new_debug::<SlowFmt>(move _23) -> bb4; // scope 1 at ui/runtime/atomic-print.rs:20:47: 20:48
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:20:47: 20:48
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b> fn(&'b SlowFmt) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<SlowFmt>}, val: Value(<ZST>) }
    }

    bb4: {
        _27 = &_2;                       // scope 1 at ui/runtime/atomic-print.rs:20:50: 20:51
        _26 = _27;                       // scope 1 at ui/runtime/atomic-print.rs:20:50: 20:51
        _25 = core::fmt::ArgumentV1::<'_>::new_debug::<SlowFmt>(move _26) -> bb5; // scope 1 at ui/runtime/atomic-print.rs:20:50: 20:51
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:20:50: 20:51
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b SlowFmt) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<SlowFmt>}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = [move _13, move _16, move _19, move _22, move _25]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = &_12;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = _11;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb6; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb6: {
        _4 = _print(move _5) -> bb7;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/runtime/atomic-print.rs:21:2: 21:2
    }
}

promoted[0] in do_print: &[&str; 6] = {
    let mut _0: &[&str; 6];              // return place in scope 0 at ui/runtime/atomic-print.rs:20:14: 20:36
    let mut _1: [&str; 6];               // in scope 0 at ui/runtime/atomic-print.rs:20:14: 20:36

    bb0: {
        _1 = [const "", const "", const "", const "", const "", const "\n"]; // scope 0 at ui/runtime/atomic-print.rs:20:14: 20:36
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:20:14: 20:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:20:14: 20:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:20:14: 20:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:20:14: 20:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:20:14: 20:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:20:14: 20:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/runtime/atomic-print.rs:20:14: 20:36
        return;                          // scope 0 at ui/runtime/atomic-print.rs:20:14: 20:36
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/runtime/atomic-print.rs:23:10: 23:10
    let mut _1: usize;                   // in scope 0 at ui/runtime/atomic-print.rs:24:8: 24:27
    let mut _2: std::env::Args;          // in scope 0 at ui/runtime/atomic-print.rs:24:8: 24:19
    let _3: std::sync::Arc<std::sync::Barrier>; // in scope 0 at ui/runtime/atomic-print.rs:25:13: 25:20
    let mut _4: std::sync::Barrier;      // in scope 0 at ui/runtime/atomic-print.rs:25:38: 25:59
    let mut _6: &std::sync::Arc<std::sync::Barrier>; // in scope 0 at ui/runtime/atomic-print.rs:26:24: 26:39
    let mut _8: [closure@ui/runtime/atomic-print.rs:27:31: 27:38]; // in scope 0 at ui/runtime/atomic-print.rs:27:31: 30:10
    let _9: std::sync::BarrierWaitResult; // in scope 0 at ui/runtime/atomic-print.rs:31:9: 31:23
    let mut _10: &std::sync::Barrier;    // in scope 0 at ui/runtime/atomic-print.rs:31:9: 31:23
    let _11: &std::sync::Barrier;        // in scope 0 at ui/runtime/atomic-print.rs:31:9: 31:23
    let mut _12: &std::sync::Arc<std::sync::Barrier>; // in scope 0 at ui/runtime/atomic-print.rs:31:9: 31:23
    let _13: ();                         // in scope 0 at ui/runtime/atomic-print.rs:32:9: 32:20
    let _14: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/runtime/atomic-print.rs:33:9: 33:17
    let mut _15: std::thread::JoinHandle<()>; // in scope 0 at ui/runtime/atomic-print.rs:33:9: 33:10
    let _16: std::string::String;        // in scope 0 at ui/runtime/atomic-print.rs:35:13: 35:17
    let mut _17: std::option::Option<std::string::String>; // in scope 0 at ui/runtime/atomic-print.rs:35:20: 35:38
    let mut _18: &mut std::env::Args;    // in scope 0 at ui/runtime/atomic-print.rs:35:20: 35:38
    let mut _19: std::env::Args;         // in scope 0 at ui/runtime/atomic-print.rs:35:20: 35:31
    let mut _21: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/runtime/atomic-print.rs:36:22: 36:67
    let mut _22: &mut std::process::Command; // in scope 0 at ui/runtime/atomic-print.rs:36:22: 36:67
    let mut _23: &mut std::process::Command; // in scope 0 at ui/runtime/atomic-print.rs:36:22: 36:58
    let mut _24: &mut std::process::Command; // in scope 0 at ui/runtime/atomic-print.rs:36:22: 36:58
    let mut _25: std::process::Command;  // in scope 0 at ui/runtime/atomic-print.rs:36:22: 36:49
    let mut _26: std::string::String;    // in scope 0 at ui/runtime/atomic-print.rs:36:44: 36:48
    let mut _27: std::str::Lines<'_>;    // in scope 0 at ui/runtime/atomic-print.rs:37:21: 37:70
    let mut _28: std::str::Lines<'_>;    // in scope 0 at ui/runtime/atomic-print.rs:37:21: 37:70
    let mut _29: &str;                   // in scope 0 at ui/runtime/atomic-print.rs:37:21: 37:70
    let _30: &str;                       // in scope 0 at ui/runtime/atomic-print.rs:37:21: 37:70
    let mut _31: &std::string::String;   // in scope 0 at ui/runtime/atomic-print.rs:37:21: 37:70
    let _32: std::string::String;        // in scope 0 at ui/runtime/atomic-print.rs:37:21: 37:62
    let mut _33: std::result::Result<std::string::String, std::string::FromUtf8Error>; // in scope 0 at ui/runtime/atomic-print.rs:37:21: 37:53
    let mut _34: std::vec::Vec<u8>;      // in scope 0 at ui/runtime/atomic-print.rs:37:39: 37:52
    let mut _36: std::option::Option<&str>; // in scope 0 at ui/runtime/atomic-print.rs:37:21: 37:70
    let mut _37: &mut std::str::Lines<'_>; // in scope 0 at ui/runtime/atomic-print.rs:37:21: 37:70
    let mut _38: &mut std::str::Lines<'_>; // in scope 0 at ui/runtime/atomic-print.rs:37:21: 37:70
    let mut _39: isize;                  // in scope 0 at ui/runtime/atomic-print.rs:37:9: 43:10
    let mut _41: char;                   // in scope 0 at ui/runtime/atomic-print.rs:38:19: 38:47
    let mut _42: std::option::Option<char>; // in scope 0 at ui/runtime/atomic-print.rs:38:19: 38:38
    let mut _43: &mut std::str::Chars<'_>; // in scope 0 at ui/runtime/atomic-print.rs:38:19: 38:38
    let mut _44: std::str::Chars<'_>;    // in scope 0 at ui/runtime/atomic-print.rs:38:19: 38:31
    let mut _45: &str;                   // in scope 0 at ui/runtime/atomic-print.rs:38:19: 38:31
    let mut _46: (&&str, &&str);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _47: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _48: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _51: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _52: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _53: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _54: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _56: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _57: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _58: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _59: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _60: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _61: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _63: (&&str, &&str);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _64: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _65: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _68: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _69: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _70: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _71: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _73: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _74: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _75: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _76: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _77: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _78: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _79: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _81: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _82: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _83: &[&str];                // in scope 0 at ui/runtime/atomic-print.rs:41:31: 41:58
    let mut _84: &[&str; 1];             // in scope 0 at ui/runtime/atomic-print.rs:41:31: 41:58
    let _85: &[&str; 1];                 // in scope 0 at ui/runtime/atomic-print.rs:41:31: 41:58
    let mut _86: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _87: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _88: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _89: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _90: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/runtime/atomic-print.rs:41:60: 41:63
    let mut _91: &char;                  // in scope 0 at ui/runtime/atomic-print.rs:41:60: 41:63
    let _92: &char;                      // in scope 0 at ui/runtime/atomic-print.rs:41:60: 41:63
    let mut _96: bool;                   // in scope 0 at ui/runtime/atomic-print.rs:44:5: 44:6
    let mut _97: bool;                   // in scope 0 at ui/runtime/atomic-print.rs:44:5: 44:6
    let mut _98: bool;                   // in scope 0 at ui/runtime/atomic-print.rs:34:5: 34:6
    scope 1 {
        debug barrier => _3;             // in scope 1 at ui/runtime/atomic-print.rs:25:13: 25:20
        let _5: std::sync::Arc<std::sync::Barrier>; // in scope 1 at ui/runtime/atomic-print.rs:26:13: 26:21
        scope 2 {
            debug tbarrier => _5;        // in scope 2 at ui/runtime/atomic-print.rs:26:13: 26:21
            let _7: std::thread::JoinHandle<()>; // in scope 2 at ui/runtime/atomic-print.rs:27:13: 27:14
            scope 3 {
                debug t => _7;           // in scope 3 at ui/runtime/atomic-print.rs:27:13: 27:14
            }
        }
    }
    scope 4 {
        debug this => _16;               // in scope 4 at ui/runtime/atomic-print.rs:35:13: 35:17
        let _20: std::process::Output;   // in scope 4 at ui/runtime/atomic-print.rs:36:13: 36:19
        scope 5 {
            debug output => _20;         // in scope 5 at ui/runtime/atomic-print.rs:36:13: 36:19
            let mut _35: std::str::Lines<'_>; // in scope 5 at ui/runtime/atomic-print.rs:37:21: 37:70
            scope 6 {
                debug iter => _35;       // in scope 6 at ui/runtime/atomic-print.rs:37:21: 37:70
                let _40: &str;           // in scope 6 at ui/runtime/atomic-print.rs:37:13: 37:17
                scope 7 {
                    debug line => _40;   // in scope 7 at ui/runtime/atomic-print.rs:37:13: 37:17
                    let _49: &&str;      // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _50: &&str;      // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _66: &&str;      // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _67: &&str;      // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _80: char;       // in scope 7 at ui/runtime/atomic-print.rs:41:17: 41:20
                    let mut _93: &&str;  // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    let mut _94: &&str;  // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 8 {
                        debug left_val => _49; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _50; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _55: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 9 {
                            debug kind => _55; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 10 {
                        debug left_val => _66; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _67; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _72: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 11 {
                            debug kind => _72; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 12 {
                        debug chr => _80; // in scope 12 at ui/runtime/atomic-print.rs:41:17: 41:20
                        let mut _95: &[&str; 1]; // in scope 12 at ui/runtime/atomic-print.rs:41:31: 41:58
                    }
                }
            }
        }
    }

    bb0: {
        _98 = const false;               // scope 0 at ui/runtime/atomic-print.rs:24:8: 24:32
        _96 = const false;               // scope 0 at ui/runtime/atomic-print.rs:24:8: 24:32
        _97 = const false;               // scope 0 at ui/runtime/atomic-print.rs:24:8: 24:32
        _2 = args() -> bb1;              // scope 0 at ui/runtime/atomic-print.rs:24:8: 24:19
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:24:8: 24:17
                                         // + literal: Const { ty: fn() -> Args {args}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <Args as Iterator>::count(move _2) -> bb2; // scope 0 at ui/runtime/atomic-print.rs:24:8: 24:27
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:24:20: 24:25
                                         // + literal: Const { ty: fn(Args) -> usize {<Args as Iterator>::count}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _1) -> [2: bb3, otherwise: bb13]; // scope 0 at ui/runtime/atomic-print.rs:24:8: 24:32
    }

    bb3: {
        _4 = Barrier::new(const 2_usize) -> bb4; // scope 0 at ui/runtime/atomic-print.rs:25:38: 25:59
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:25:38: 25:56
                                         // + literal: Const { ty: fn(usize) -> Barrier {Barrier::new}, val: Value(<ZST>) }
    }

    bb4: {
        _3 = Arc::<Barrier>::new(move _4) -> bb5; // scope 0 at ui/runtime/atomic-print.rs:25:23: 25:60
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:25:23: 25:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Barrier) -> Arc<Barrier> {Arc::<Barrier>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = &_3;                        // scope 1 at ui/runtime/atomic-print.rs:26:24: 26:39
        _5 = <Arc<Barrier> as Clone>::clone(move _6) -> [return: bb6, unwind: bb50]; // scope 1 at ui/runtime/atomic-print.rs:26:24: 26:39
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:26:32: 26:37
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<Barrier>) -> Arc<Barrier> {<Arc<Barrier> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = [closure@ui/runtime/atomic-print.rs:27:31: 27:38] { tbarrier: move _5 }; // scope 2 at ui/runtime/atomic-print.rs:27:31: 30:10
                                         // closure
                                         // + def_id: DefId(0:16 ~ atomic_print[48b4]::main::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (std::sync::Arc<std::sync::Barrier>,),
                                         // ]
        _7 = spawn::<[closure@ui/runtime/atomic-print.rs:27:31: 27:38], ()>(move _8) -> [return: bb7, unwind: bb50]; // scope 2 at ui/runtime/atomic-print.rs:27:17: 30:11
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:27:17: 27:30
                                         // + literal: Const { ty: fn([closure@ui/runtime/atomic-print.rs:27:31: 27:38]) -> JoinHandle<()> {spawn::<[closure@ui/runtime/atomic-print.rs:27:31: 27:38], ()>}, val: Value(<ZST>) }
    }

    bb7: {
        _98 = const true;                // scope 2 at ui/runtime/atomic-print.rs:30:10: 30:11
        _12 = &_3;                       // scope 3 at ui/runtime/atomic-print.rs:31:9: 31:23
        _11 = <Arc<Barrier> as Deref>::deref(move _12) -> [return: bb8, unwind: bb59]; // scope 3 at ui/runtime/atomic-print.rs:31:9: 31:23
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:31:9: 31:23
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<Barrier>) -> &'a <Arc<Barrier> as Deref>::Target {<Arc<Barrier> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _10 = _11;                       // scope 3 at ui/runtime/atomic-print.rs:31:9: 31:23
        _9 = Barrier::wait(move _10) -> [return: bb9, unwind: bb59]; // scope 3 at ui/runtime/atomic-print.rs:31:9: 31:23
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:31:17: 31:21
                                         // + literal: Const { ty: for<'a> fn(&'a Barrier) -> BarrierWaitResult {Barrier::wait}, val: Value(<ZST>) }
    }

    bb9: {
        _13 = do_print(const 2_u32) -> [return: bb10, unwind: bb59]; // scope 3 at ui/runtime/atomic-print.rs:32:9: 32:20
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:32:9: 32:17
                                         // + literal: Const { ty: fn(u32) {do_print}, val: Value(<ZST>) }
    }

    bb10: {
        _98 = const false;               // scope 3 at ui/runtime/atomic-print.rs:33:9: 33:10
        _15 = move _7;                   // scope 3 at ui/runtime/atomic-print.rs:33:9: 33:10
        _14 = JoinHandle::<()>::join(move _15) -> [return: bb11, unwind: bb59]; // scope 3 at ui/runtime/atomic-print.rs:33:9: 33:17
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:33:11: 33:15
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb11: {
        drop(_14) -> [return: bb12, unwind: bb59]; // scope 3 at ui/runtime/atomic-print.rs:33:17: 33:18
    }

    bb12: {
        _98 = const false;               // scope 2 at ui/runtime/atomic-print.rs:34:5: 34:6
        drop(_3) -> bb46;                // scope 0 at ui/runtime/atomic-print.rs:34:5: 34:6
    }

    bb13: {
        _19 = args() -> bb14;            // scope 0 at ui/runtime/atomic-print.rs:35:20: 35:31
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:35:20: 35:29
                                         // + literal: Const { ty: fn() -> Args {args}, val: Value(<ZST>) }
    }

    bb14: {
        _18 = &mut _19;                  // scope 0 at ui/runtime/atomic-print.rs:35:20: 35:38
        _17 = <Args as Iterator>::next(move _18) -> [return: bb15, unwind: bb49]; // scope 0 at ui/runtime/atomic-print.rs:35:20: 35:38
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:35:32: 35:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut Args) -> Option<<Args as Iterator>::Item> {<Args as Iterator>::next}, val: Value(<ZST>) }
    }

    bb15: {
        _16 = Option::<String>::unwrap(move _17) -> [return: bb16, unwind: bb49]; // scope 0 at ui/runtime/atomic-print.rs:35:20: 35:47
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:35:39: 35:45
                                         // + literal: Const { ty: fn(Option<String>) -> String {Option::<String>::unwrap}, val: Value(<ZST>) }
    }

    bb16: {
        _97 = const true;                // scope 0 at ui/runtime/atomic-print.rs:35:46: 35:47
        drop(_19) -> [return: bb17, unwind: bb57]; // scope 0 at ui/runtime/atomic-print.rs:35:47: 35:48
    }

    bb17: {
        _97 = const false;               // scope 4 at ui/runtime/atomic-print.rs:36:44: 36:48
        _26 = move _16;                  // scope 4 at ui/runtime/atomic-print.rs:36:44: 36:48
        _25 = Command::new::<String>(move _26) -> [return: bb18, unwind: bb57]; // scope 4 at ui/runtime/atomic-print.rs:36:22: 36:49
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:36:22: 36:43
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(String) -> Command {Command::new::<String>}, val: Value(<ZST>) }
    }

    bb18: {
        _24 = &mut _25;                  // scope 4 at ui/runtime/atomic-print.rs:36:22: 36:58
        _23 = Command::arg::<&str>(move _24, const "-") -> [return: bb19, unwind: bb48]; // scope 4 at ui/runtime/atomic-print.rs:36:22: 36:58
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:36:50: 36:53
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:36:54: 36:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb19: {
        _22 = &mut (*_23);               // scope 4 at ui/runtime/atomic-print.rs:36:22: 36:67
        _21 = Command::output(move _22) -> [return: bb20, unwind: bb48]; // scope 4 at ui/runtime/atomic-print.rs:36:22: 36:67
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:36:59: 36:65
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb20: {
        _20 = Result::<Output, std::io::Error>::unwrap(move _21) -> [return: bb21, unwind: bb48]; // scope 4 at ui/runtime/atomic-print.rs:36:22: 36:76
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:36:68: 36:74
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb21: {
        _96 = const true;                // scope 4 at ui/runtime/atomic-print.rs:36:75: 36:76
        drop(_25) -> [return: bb22, unwind: bb55]; // scope 4 at ui/runtime/atomic-print.rs:36:76: 36:77
    }

    bb22: {
        _96 = const false;               // scope 5 at ui/runtime/atomic-print.rs:37:39: 37:52
        _34 = move (_20.1: std::vec::Vec<u8>); // scope 5 at ui/runtime/atomic-print.rs:37:39: 37:52
        _33 = String::from_utf8(move _34) -> [return: bb23, unwind: bb55]; // scope 5 at ui/runtime/atomic-print.rs:37:21: 37:53
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:37:21: 37:38
                                         // + literal: Const { ty: fn(Vec<u8>) -> Result<String, FromUtf8Error> {String::from_utf8}, val: Value(<ZST>) }
    }

    bb23: {
        _32 = Result::<String, FromUtf8Error>::unwrap(move _33) -> [return: bb24, unwind: bb55]; // scope 5 at ui/runtime/atomic-print.rs:37:21: 37:62
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:37:54: 37:60
                                         // + literal: Const { ty: fn(Result<String, FromUtf8Error>) -> String {Result::<String, FromUtf8Error>::unwrap}, val: Value(<ZST>) }
    }

    bb24: {
        _31 = &_32;                      // scope 5 at ui/runtime/atomic-print.rs:37:21: 37:70
        _30 = <String as Deref>::deref(move _31) -> [return: bb25, unwind: bb47]; // scope 5 at ui/runtime/atomic-print.rs:37:21: 37:70
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:37:21: 37:70
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb25: {
        _29 = _30;                       // scope 5 at ui/runtime/atomic-print.rs:37:21: 37:70
        _28 = core::str::<impl str>::lines(move _29) -> [return: bb26, unwind: bb47]; // scope 5 at ui/runtime/atomic-print.rs:37:21: 37:70
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:37:63: 37:68
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> std::str::Lines<'a> {core::str::<impl str>::lines}, val: Value(<ZST>) }
    }

    bb26: {
        _27 = <std::str::Lines<'_> as IntoIterator>::into_iter(move _28) -> [return: bb27, unwind: bb47]; // scope 5 at ui/runtime/atomic-print.rs:37:21: 37:70
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:37:21: 37:70
                                         // + literal: Const { ty: fn(std::str::Lines<'_>) -> <std::str::Lines<'_> as IntoIterator>::IntoIter {<std::str::Lines<'_> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb27: {
        _35 = move _27;                  // scope 5 at ui/runtime/atomic-print.rs:37:21: 37:70
        goto -> bb28;                    // scope 6 at ui/runtime/atomic-print.rs:37:9: 43:10
    }

    bb28: {
        _38 = &mut _35;                  // scope 6 at ui/runtime/atomic-print.rs:37:21: 37:70
        _37 = &mut (*_38);               // scope 6 at ui/runtime/atomic-print.rs:37:21: 37:70
        _36 = <std::str::Lines<'_> as Iterator>::next(move _37) -> [return: bb29, unwind: bb47]; // scope 6 at ui/runtime/atomic-print.rs:37:21: 37:70
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:37:21: 37:70
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::str::Lines<'_>) -> Option<<std::str::Lines<'_> as Iterator>::Item> {<std::str::Lines<'_> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb29: {
        _39 = discriminant(_36);         // scope 6 at ui/runtime/atomic-print.rs:37:21: 37:70
        switchInt(move _39) -> [0: bb32, 1: bb30, otherwise: bb31]; // scope 6 at ui/runtime/atomic-print.rs:37:21: 37:70
    }

    bb30: {
        _40 = ((_36 as Some).0: &str);   // scope 6 at ui/runtime/atomic-print.rs:37:13: 37:17
        _45 = _40;                       // scope 7 at ui/runtime/atomic-print.rs:38:19: 38:31
        _44 = core::str::<impl str>::chars(move _45) -> [return: bb33, unwind: bb47]; // scope 7 at ui/runtime/atomic-print.rs:38:19: 38:31
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:38:24: 38:29
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Chars<'a> {core::str::<impl str>::chars}, val: Value(<ZST>) }
    }

    bb31: {
        unreachable;                     // scope 6 at ui/runtime/atomic-print.rs:37:21: 37:70
    }

    bb32: {
        drop(_32) -> [return: bb45, unwind: bb55]; // scope 5 at ui/runtime/atomic-print.rs:43:9: 43:10
    }

    bb33: {
        _43 = &mut _44;                  // scope 7 at ui/runtime/atomic-print.rs:38:19: 38:38
        _42 = <Chars<'_> as Iterator>::next(move _43) -> [return: bb34, unwind: bb47]; // scope 7 at ui/runtime/atomic-print.rs:38:19: 38:38
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:38:32: 38:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut Chars<'_>) -> Option<<Chars<'_> as Iterator>::Item> {<Chars<'_> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb34: {
        _41 = Option::<char>::unwrap(move _42) -> [return: bb35, unwind: bb47]; // scope 7 at ui/runtime/atomic-print.rs:38:19: 38:47
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:38:39: 38:45
                                         // + literal: Const { ty: fn(Option<char>) -> char {Option::<char>::unwrap}, val: Value(<ZST>) }
    }

    bb35: {
        switchInt(_41) -> [49: bb37, 50: bb40, otherwise: bb36]; // scope 7 at ui/runtime/atomic-print.rs:38:13: 38:47
    }

    bb36: {
        _80 = _41;                       // scope 7 at ui/runtime/atomic-print.rs:41:17: 41:20
        _95 = const _;                   // scope 12 at ui/runtime/atomic-print.rs:41:31: 41:58
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:41:31: 41:58
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[2])) }
        _85 = _95;                       // scope 12 at ui/runtime/atomic-print.rs:41:31: 41:58
        _84 = _85;                       // scope 12 at ui/runtime/atomic-print.rs:41:31: 41:58
        _83 = move _84 as &[&str] (Pointer(Unsize)); // scope 12 at ui/runtime/atomic-print.rs:41:31: 41:58
        _92 = &_80;                      // scope 12 at ui/runtime/atomic-print.rs:41:60: 41:63
        _91 = _92;                       // scope 12 at ui/runtime/atomic-print.rs:41:60: 41:63
        _90 = core::fmt::ArgumentV1::<'_>::new_debug::<char>(move _91) -> [return: bb43, unwind: bb47]; // scope 12 at ui/runtime/atomic-print.rs:41:60: 41:63
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:41:60: 41:63
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b char) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<char>}, val: Value(<ZST>) }
    }

    bb37: {
        _47 = &_40;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _93 = const _;                   // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[0])) }
        _48 = _93;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _46 = (move _47, move _48);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _49 = (_46.0: &&str);            // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _50 = (_46.1: &&str);            // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _53 = _49;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _54 = _50;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _52 = <&str as PartialEq>::eq(move _53, move _54) -> [return: bb38, unwind: bb47]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb38: {
        _51 = Not(move _52);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _51) -> [0: bb28, otherwise: bb39]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb39: {
        _55 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _57 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _59 = _49;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _58 = _59;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _61 = _50;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _60 = _61;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _62 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _56 = core::panicking::assert_failed::<&str, &str>(move _57, move _58, move _60, move _62) -> bb47; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb40: {
        _64 = &_40;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _94 = const _;                   // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[1])) }
        _65 = _94;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _63 = (move _64, move _65);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _66 = (_63.0: &&str);            // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _67 = (_63.1: &&str);            // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _70 = _66;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _71 = _67;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _69 = <&str as PartialEq>::eq(move _70, move _71) -> [return: bb41, unwind: bb47]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb41: {
        _68 = Not(move _69);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _68) -> [0: bb28, otherwise: bb42]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb42: {
        _72 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _74 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _76 = _66;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _75 = _76;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _78 = _67;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _77 = _78;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _79 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _73 = core::panicking::assert_failed::<&str, &str>(move _74, move _75, move _77, move _79) -> bb47; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb43: {
        _89 = [move _90];                // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _88 = &_89;                      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _87 = _88;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _86 = move _87 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _82 = Arguments::<'_>::new_v1(move _83, move _86) -> [return: bb44, unwind: bb47]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb44: {
        _81 = panic_fmt(move _82) -> bb47; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb45: {
        drop((_20.2: std::vec::Vec<u8>)) -> [return: bb52, unwind: bb57]; // scope 4 at ui/runtime/atomic-print.rs:44:5: 44:6
    }

    bb46: {
        return;                          // scope 0 at ui/runtime/atomic-print.rs:45:2: 45:2
    }

    bb47 (cleanup): {
        drop(_32) -> bb55;               // scope 5 at ui/runtime/atomic-print.rs:43:9: 43:10
    }

    bb48 (cleanup): {
        drop(_25) -> bb57;               // scope 4 at ui/runtime/atomic-print.rs:36:76: 36:77
    }

    bb49 (cleanup): {
        drop(_19) -> bb51;               // scope 0 at ui/runtime/atomic-print.rs:35:47: 35:48
    }

    bb50 (cleanup): {
        drop(_3) -> bb51;                // scope 0 at ui/runtime/atomic-print.rs:34:5: 34:6
    }

    bb51 (cleanup): {
        resume;                          // scope 0 at ui/runtime/atomic-print.rs:23:1: 45:2
    }

    bb52: {
        _96 = const false;               // scope 4 at ui/runtime/atomic-print.rs:44:5: 44:6
        _97 = const false;               // scope 0 at ui/runtime/atomic-print.rs:44:5: 44:6
        goto -> bb46;                    // scope 0 at ui/runtime/atomic-print.rs:24:5: 44:6
    }

    bb53 (cleanup): {
        drop((_20.2: std::vec::Vec<u8>)) -> bb57; // scope 4 at ui/runtime/atomic-print.rs:44:5: 44:6
    }

    bb54 (cleanup): {
        drop((_20.1: std::vec::Vec<u8>)) -> bb53; // scope 4 at ui/runtime/atomic-print.rs:44:5: 44:6
    }

    bb55 (cleanup): {
        switchInt(_96) -> [0: bb53, otherwise: bb54]; // scope 4 at ui/runtime/atomic-print.rs:44:5: 44:6
    }

    bb56 (cleanup): {
        drop(_16) -> bb51;               // scope 0 at ui/runtime/atomic-print.rs:44:5: 44:6
    }

    bb57 (cleanup): {
        switchInt(_97) -> [0: bb51, otherwise: bb56]; // scope 0 at ui/runtime/atomic-print.rs:44:5: 44:6
    }

    bb58 (cleanup): {
        drop(_7) -> bb50;                // scope 2 at ui/runtime/atomic-print.rs:34:5: 34:6
    }

    bb59 (cleanup): {
        switchInt(_98) -> [0: bb50, otherwise: bb58]; // scope 2 at ui/runtime/atomic-print.rs:34:5: 34:6
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/runtime/atomic-print.rs:39:41: 39:48

    bb0: {
        _1 = const "11111";              // scope 0 at ui/runtime/atomic-print.rs:39:41: 39:48
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:39:41: 39:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/runtime/atomic-print.rs:40:41: 40:48

    bb0: {
        _1 = const "22222";              // scope 0 at ui/runtime/atomic-print.rs:40:41: 40:48
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:40:41: 40:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/runtime/atomic-print.rs:41:31: 41:58
    let mut _1: [&str; 1];               // in scope 0 at ui/runtime/atomic-print.rs:41:31: 41:58

    bb0: {
        _1 = [const "unexpected character "]; // scope 0 at ui/runtime/atomic-print.rs:41:31: 41:58
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:41:31: 41:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/runtime/atomic-print.rs:41:31: 41:58
        return;                          // scope 0 at ui/runtime/atomic-print.rs:41:31: 41:58
    }
}

fn main::{closure#0}(_1: [closure@ui/runtime/atomic-print.rs:27:31: 27:38]) -> () {
    debug tbarrier => (_1.0: std::sync::Arc<std::sync::Barrier>); // in scope 0 at ui/runtime/atomic-print.rs:26:13: 26:21
    let mut _0: ();                      // return place in scope 0 at ui/runtime/atomic-print.rs:27:39: 27:39
    let _2: std::sync::BarrierWaitResult; // in scope 0 at ui/runtime/atomic-print.rs:28:13: 28:28
    let mut _3: &std::sync::Barrier;     // in scope 0 at ui/runtime/atomic-print.rs:28:13: 28:28
    let _4: &std::sync::Barrier;         // in scope 0 at ui/runtime/atomic-print.rs:28:13: 28:28
    let mut _5: &std::sync::Arc<std::sync::Barrier>; // in scope 0 at ui/runtime/atomic-print.rs:28:13: 28:28
    let _6: ();                          // in scope 0 at ui/runtime/atomic-print.rs:29:13: 29:24

    bb0: {
        _5 = &(_1.0: std::sync::Arc<std::sync::Barrier>); // scope 0 at ui/runtime/atomic-print.rs:28:13: 28:28
        _4 = <Arc<Barrier> as Deref>::deref(move _5) -> [return: bb1, unwind: bb5]; // scope 0 at ui/runtime/atomic-print.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:28:13: 28:28
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<Barrier>) -> &'a <Arc<Barrier> as Deref>::Target {<Arc<Barrier> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at ui/runtime/atomic-print.rs:28:13: 28:28
        _2 = Barrier::wait(move _3) -> [return: bb2, unwind: bb5]; // scope 0 at ui/runtime/atomic-print.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:28:22: 28:26
                                         // + literal: Const { ty: for<'a> fn(&'a Barrier) -> BarrierWaitResult {Barrier::wait}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = do_print(const 1_u32) -> [return: bb3, unwind: bb5]; // scope 0 at ui/runtime/atomic-print.rs:29:13: 29:24
                                         // mir::Constant
                                         // + span: ui/runtime/atomic-print.rs:29:13: 29:21
                                         // + literal: Const { ty: fn(u32) {do_print}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/runtime/atomic-print.rs:30:9: 30:10
    }

    bb4: {
        return;                          // scope 0 at ui/runtime/atomic-print.rs:30:10: 30:10
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/runtime/atomic-print.rs:30:9: 30:10
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/runtime/atomic-print.rs:27:31: 30:10
    }
}

fn SlowFmt(_1: u32) -> SlowFmt {
    let mut _0: SlowFmt;                 // return place in scope 0 at ui/runtime/atomic-print.rs:10:1: 10:15

    bb0: {
        _0 = SlowFmt(move _1);           // scope 0 at ui/runtime/atomic-print.rs:10:1: 10:15
        return;                          // scope 0 at ui/runtime/atomic-print.rs:10:1: 10:15
    }
}

// MIR FOR CTFE
fn SlowFmt(_1: u32) -> SlowFmt {
    let mut _0: SlowFmt;                 // return place in scope 0 at ui/runtime/atomic-print.rs:10:1: 10:15

    bb0: {
        _0 = SlowFmt(move _1);           // scope 0 at ui/runtime/atomic-print.rs:10:1: 10:15
        return;                          // scope 0 at ui/runtime/atomic-print.rs:10:1: 10:15
    }
}
