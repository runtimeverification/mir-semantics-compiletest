// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn signal_handler(_1: i32, _2: *mut libc::siginfo_t, _3: *mut libc::c_void) -> () {
    debug signum => _1;
    let mut _0: ();
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let _6: &i32;
    let _7: &i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: &i32;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }

    bb0: {
        _5 = &_1;
        _15 = const _;
        _4 = (move _5, _15);
        _6 = (_4.0: &i32);
        _7 = (_4.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb2: {
        return;
    }
}

promoted[0] in signal_handler: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

fn send_signal() -> () {
    let mut _0: ();
    let _1: i32;
    scope 1 {
    }

    bb0: {
        _1 = libc::raise(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _2: i32;
    let mut _3: unsafe extern "C" fn(i32, *mut libc::siginfo_t, *mut libc::c_void);
    let _4: i32;
    let mut _5: *const libc::sigaction;
    let _6: &libc::sigaction;
    let mut _7: *mut libc::sigaction;
    let _8: i32;
    let mut _9: extern "C" fn();
    scope 1 {
        let mut _1: libc::sigaction;
        scope 2 {
            debug action => _1;
        }
    }

    bb0: {
        _1 = zeroed::<libc::sigaction>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = BitOr(const _, const _);
        (_1.2: i32) = _2;
        _3 = signal_handler as unsafe extern "C" fn(i32, *mut libc::siginfo_t, *mut libc::c_void) (Pointer(ReifyFnPointer));
        (_1.0: usize) = move _3 as usize (PointerExposeAddress);
        _6 = &_1;
        _5 = &raw const (*_6);
        _7 = null_mut::<libc::sigaction>() -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = libc::sigaction(const _, move _5, move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = send_signal as extern "C" fn() (Pointer(ReifyFnPointer));
        _8 = libc::atexit(move _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}
