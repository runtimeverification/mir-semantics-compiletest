// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn signal_handler(_1: i32, _2: *mut libc::siginfo_t, _3: *mut libc::c_void) -> () {
    debug signum => _1;                  // in scope 0 at ui/runtime/signal-alternate-stack-cleanup.rs:16:37: 16:43
    let mut _0: ();                      // return place in scope 0 at ui/runtime/signal-alternate-stack-cleanup.rs:16:87: 16:87
    let mut _4: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _6: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _8: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _21: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _7;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _13;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(signal_handler, [], Some(promoted[0])) }
        _6 = _21;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _6);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_4.0: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_4.1: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = const 28_i32;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _13 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<i32, i32>(move _15, move _16, move _18, move _20); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/runtime/signal-alternate-stack-cleanup.rs:18:2: 18:2
    }
}

promoted[0] in signal_handler: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/runtime/signal-alternate-stack-cleanup.rs:17:24: 17:32

    bb0: {
        _1 = const _;                    // scope 0 at ui/runtime/signal-alternate-stack-cleanup.rs:17:24: 17:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn send_signal() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/runtime/signal-alternate-stack-cleanup.rs:20:29: 20:29
    let _1: i32;                         // in scope 0 at ui/runtime/signal-alternate-stack-cleanup.rs:22:9: 22:24
    scope 1 {
    }

    bb0: {
        _1 = libc::raise(const _) -> bb1; // scope 1 at ui/runtime/signal-alternate-stack-cleanup.rs:22:9: 22:24
                                         // mir::Constant
                                         // + span: ui/runtime/signal-alternate-stack-cleanup.rs:22:9: 22:14
                                         // + literal: Const { ty: unsafe extern "C" fn(i32) -> i32 {libc::raise}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/runtime/signal-alternate-stack-cleanup.rs:24:2: 24:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/runtime/signal-alternate-stack-cleanup.rs:26:11: 26:11
    let mut _2: i32;                     // in scope 0 at ui/runtime/signal-alternate-stack-cleanup.rs:30:27: 30:57
    let mut _3: unsafe extern "C" fn(i32, *mut libc::siginfo_t, *mut libc::c_void); // in scope 0 at ui/runtime/signal-alternate-stack-cleanup.rs:31:31: 31:45
    let _4: i32;                         // in scope 0 at ui/runtime/signal-alternate-stack-cleanup.rs:32:9: 32:59
    let mut _5: *const libc::sigaction;  // in scope 0 at ui/runtime/signal-alternate-stack-cleanup.rs:32:29: 32:36
    let _6: &libc::sigaction;            // in scope 0 at ui/runtime/signal-alternate-stack-cleanup.rs:32:29: 32:36
    let mut _7: *mut libc::sigaction;    // in scope 0 at ui/runtime/signal-alternate-stack-cleanup.rs:32:38: 32:58
    let _8: i32;                         // in scope 0 at ui/runtime/signal-alternate-stack-cleanup.rs:35:9: 35:28
    let mut _9: extern "C" fn();         // in scope 0 at ui/runtime/signal-alternate-stack-cleanup.rs:35:16: 35:27
    scope 1 {
        let mut _1: libc::sigaction;     // in scope 1 at ui/runtime/signal-alternate-stack-cleanup.rs:29:13: 29:23
        scope 2 {
            debug action => _1;          // in scope 2 at ui/runtime/signal-alternate-stack-cleanup.rs:29:13: 29:23
        }
    }

    bb0: {
        _1 = zeroed::<libc::sigaction>() -> bb1; // scope 1 at ui/runtime/signal-alternate-stack-cleanup.rs:29:37: 29:55
                                         // mir::Constant
                                         // + span: ui/runtime/signal-alternate-stack-cleanup.rs:29:37: 29:53
                                         // + literal: Const { ty: unsafe fn() -> libc::sigaction {zeroed::<libc::sigaction>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = const 134217732_i32;        // scope 2 at ui/runtime/signal-alternate-stack-cleanup.rs:30:27: 30:57
        (_1.2: i32) = move _2;           // scope 2 at ui/runtime/signal-alternate-stack-cleanup.rs:30:9: 30:57
        _3 = signal_handler as unsafe extern "C" fn(i32, *mut libc::siginfo_t, *mut libc::c_void) (Pointer(ReifyFnPointer)); // scope 2 at ui/runtime/signal-alternate-stack-cleanup.rs:31:31: 31:45
                                         // mir::Constant
                                         // + span: ui/runtime/signal-alternate-stack-cleanup.rs:31:31: 31:45
                                         // + literal: Const { ty: unsafe extern "C" fn(i32, *mut libc::siginfo_t, *mut libc::c_void) {signal_handler}, val: Value(<ZST>) }
        (_1.0: usize) = move _3 as usize (PointerExposeAddress); // scope 2 at ui/runtime/signal-alternate-stack-cleanup.rs:31:9: 31:61
        _6 = &_1;                        // scope 2 at ui/runtime/signal-alternate-stack-cleanup.rs:32:29: 32:36
        _5 = &raw const (*_6);           // scope 2 at ui/runtime/signal-alternate-stack-cleanup.rs:32:29: 32:36
        _7 = null_mut::<libc::sigaction>() -> bb2; // scope 2 at ui/runtime/signal-alternate-stack-cleanup.rs:32:38: 32:58
                                         // mir::Constant
                                         // + span: ui/runtime/signal-alternate-stack-cleanup.rs:32:38: 32:56
                                         // + literal: Const { ty: fn() -> *mut libc::sigaction {null_mut::<libc::sigaction>}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = libc::sigaction(const _, move _5, move _7) -> bb3; // scope 2 at ui/runtime/signal-alternate-stack-cleanup.rs:32:9: 32:59
                                         // mir::Constant
                                         // + span: ui/runtime/signal-alternate-stack-cleanup.rs:32:9: 32:18
                                         // + literal: Const { ty: unsafe extern "C" fn(i32, *const libc::sigaction, *mut libc::sigaction) -> i32 {libc::sigaction}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = send_signal as extern "C" fn() (Pointer(ReifyFnPointer)); // scope 2 at ui/runtime/signal-alternate-stack-cleanup.rs:35:16: 35:27
                                         // mir::Constant
                                         // + span: ui/runtime/signal-alternate-stack-cleanup.rs:35:16: 35:27
                                         // + literal: Const { ty: extern "C" fn() {send_signal}, val: Value(<ZST>) }
        _8 = libc::atexit(move _9) -> bb4; // scope 2 at ui/runtime/signal-alternate-stack-cleanup.rs:35:9: 35:28
                                         // mir::Constant
                                         // + span: ui/runtime/signal-alternate-stack-cleanup.rs:35:9: 35:15
                                         // + literal: Const { ty: unsafe extern "C" fn(extern "C" fn()) -> i32 {libc::atexit}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/runtime/signal-alternate-stack-cleanup.rs:37:2: 37:2
    }
}
