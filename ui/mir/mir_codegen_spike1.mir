// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn sum(_1: i32, _2: i32) -> i32 {
    debug x => _1;
    debug y => _2;
    let mut _0: i32;

    bb0: {
        _0 = Add(_1, _2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: i32;
    let mut _9: i32;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: [core::fmt::rt::Argument<'_>; 1];
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &i32;
    scope 1 {
        debug x => _1;
        let _4: &i32;
        let _5: &i32;
        let mut _21: &[&str; 2];
        let mut _22: &i32;
        scope 2 {
            debug left_val => _4;
            debug right_val => _5;
            let _10: core::panicking::AssertKind;
            scope 3 {
                debug kind => _10;
            }
        }
    }

    bb0: {
        _1 = sum(const 22_i32, const 44_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_1;
        _22 = const _;
        _2 = (move _3, _22);
        _4 = (_2.0: &i32);
        _5 = (_2.1: &i32);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<i32, i32>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        _21 = const _;
        _15 = _21 as &[&str] (Pointer(Unsize));
        _20 = &_1;
        _19 = core::fmt::rt::Argument::<'_>::new_debug::<i32>(_20) -> [return: bb4, unwind continue];
    }

    bb4: {
        _18 = [move _19];
        _17 = &_18;
        _16 = _17 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _14 = Arguments::<'_>::new_v1(move _15, move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        _13 = _print(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "sum()=", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 66_i32;
        _0 = &_1;
        return;
    }
}
