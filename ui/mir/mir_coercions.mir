// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn identity_coercion(_1: &dyn Fn(u32) -> u32 + Send) -> &dyn Fn(u32) -> u32 {
    debug x => _1;
    let mut _0: &dyn std::ops::Fn(u32) -> u32;

    bb0: {
        _0 = _1 as &dyn std::ops::Fn(u32) -> u32 (Pointer(Unsize));
        return;
    }
}

fn fn_coercions(_1: &fn(u32) -> u32) -> (unsafe fn(u32) -> u32, &dyn Fn(u32) -> u32 + Send) {
    debug f => _1;
    let mut _0: (unsafe fn(u32) -> u32, &dyn std::ops::Fn(u32) -> u32 + std::marker::Send);
    let mut _2: unsafe fn(u32) -> u32;
    let mut _3: fn(u32) -> u32;
    let mut _4: &dyn std::ops::Fn(u32) -> u32 + std::marker::Send;

    bb0: {
        _3 = (*_1);
        _2 = move _3 as unsafe fn(u32) -> u32 (Pointer(UnsafeFnPointer));
        _4 = _1 as &dyn std::ops::Fn(u32) -> u32 + std::marker::Send (Pointer(Unsize));
        _0 = (move _2, move _4);
        return;
    }
}

fn simple_array_coercion(_1: &[u8; 3]) -> &[u8] {
    debug x => _1;
    let mut _0: &[u8];

    bb0: {
        _0 = _1 as &[u8] (Pointer(Unsize));
        return;
    }
}

simple_array_coercion::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn square(_1: u32) -> u32 {
    debug a => _1;
    let mut _0: u32;

    bb0: {
        _0 = Mul(_1, _1);
        return;
    }
}

fn <impl at ui/mir/mir_coercions.rs:21:10: 21:19>::eq(_1: &PtrWrapper<'_, T>, _2: &PtrWrapper<'_, T>) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: u32;
    let mut _7: u32;
    let mut _8: bool;
    let mut _9: u32;
    let mut _10: u32;
    let mut _11: bool;
    let mut _12: &();
    let mut _13: &();
    let mut _14: bool;
    let mut _15: &&T;
    let mut _16: &&T;

    bb0: {
        _6 = ((*_1).0: u32);
        _7 = ((*_2).0: u32);
        _5 = Eq(move _6, move _7);
        switchInt(move _5) -> [0: bb7, otherwise: bb8];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _15 = &((*_1).3: &T);
        _16 = &((*_2).3: &T);
        _14 = <&T as PartialEq>::eq(move _15, move _16) -> [return: bb11, unwind continue];
    }

    bb3: {
        return;
    }

    bb4: {
        _3 = const false;
        goto -> bb6;
    }

    bb5: {
        _12 = &((*_1).2: ());
        _13 = &((*_2).2: ());
        _11 = <() as PartialEq>::eq(move _12, move _13) -> [return: bb10, unwind continue];
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb7: {
        _4 = const false;
        goto -> bb9;
    }

    bb8: {
        _9 = ((*_1).1: u32);
        _10 = ((*_2).1: u32);
        _8 = Eq(move _9, move _10);
        _4 = move _8;
        goto -> bb9;
    }

    bb9: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5];
    }

    bb10: {
        _3 = move _11;
        goto -> bb6;
    }

    bb11: {
        _0 = move _14;
        goto -> bb3;
    }
}

fn <impl at ui/mir/mir_coercions.rs:21:20: 21:22>::assert_receiver_is_total_eq(_1: &PtrWrapper<'_, T>) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        return;
    }
}

fn coerce_ptr_wrapper(_1: PtrWrapper<'_, [u8; 3]>) -> PtrWrapper<'_, [u8]> {
    debug p => _1;
    let mut _0: PtrWrapper<'_, [u8]>;

    bb0: {
        _0 = move _1 as PtrWrapper<'_, [u8]> (Pointer(Unsize));
        return;
    }
}

coerce_ptr_wrapper::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn coerce_triv_ptr_wrapper(_1: TrivPtrWrapper<'_, [u8; 3]>) -> TrivPtrWrapper<'_, [u8]> {
    debug p => _1;
    let mut _0: TrivPtrWrapper<'_, [u8]>;

    bb0: {
        _0 = move _1 as TrivPtrWrapper<'_, [u8]> (Pointer(Unsize));
        return;
    }
}

coerce_triv_ptr_wrapper::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn coerce_fat_ptr_wrapper(_1: PtrWrapper<'_, dyn Fn(u32) -> u32 + Send>) -> PtrWrapper<'_, dyn Fn(u32) -> u32> {
    debug p => _1;
    let mut _0: PtrWrapper<'_, dyn std::ops::Fn(u32) -> u32>;

    bb0: {
        _0 = move _1 as PtrWrapper<'_, dyn std::ops::Fn(u32) -> u32> (Pointer(Unsize));
        return;
    }
}

fn coerce_ptr_wrapper_poly(_1: PtrWrapper<'_, T>) -> PtrWrapper<'_, Trait> {
    debug p => _1;
    let mut _0: PtrWrapper<'_, Trait>;

    bb0: {
        _0 = move _1 as PtrWrapper<'_, Trait> (Pointer(Unsize));
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: [u8; 3];
    let mut _5: (unsafe fn(u32) -> u32, &dyn std::ops::Fn(u32) -> u32 + std::marker::Send);
    let _6: &fn(u32) -> u32;
    let mut _7: (&usize, &usize);
    let mut _8: &usize;
    let _9: usize;
    let mut _10: &usize;
    let _11: usize;
    let mut _12: fn(u32) -> u32;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: usize;
    let mut _18: usize;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: (&u32, &u32);
    let mut _23: &u32;
    let _24: u32;
    let mut _25: (u32,);
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: u32;
    let mut _31: u32;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&u32, &u32);
    let mut _36: &u32;
    let _37: u32;
    let mut _38: &dyn std::ops::Fn(u32) -> u32;
    let _39: &dyn std::ops::Fn(u32) -> u32;
    let mut _40: (u32,);
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: u32;
    let mut _46: u32;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: (&&[u8], &&[u8; 3]);
    let mut _51: &&[u8];
    let _52: &[u8];
    let _53: &[u8; 3];
    let mut _54: &&[u8; 3];
    let _55: &[u8; 3];
    let mut _58: bool;
    let mut _59: bool;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _64: PtrWrapper<'_, [u8; 3]>;
    let _65: &[u8; 3];
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: &PtrWrapper<'_, [u8]>;
    let mut _69: &PtrWrapper<'_, [u8]>;
    let _70: PtrWrapper<'_, [u8]>;
    let mut _71: PtrWrapper<'_, [u8; 3]>;
    let _72: &[u8; 3];
    let mut _73: !;
    let mut _75: TrivPtrWrapper<'_, [u8; 3]>;
    let _76: &[u8; 3];
    let mut _77: (&&&[u8], &&[u8; 3]);
    let mut _78: &&&[u8];
    let _79: &&[u8];
    let mut _80: &&[u8; 3];
    let _81: &[u8; 3];
    let mut _84: bool;
    let mut _85: bool;
    let _87: !;
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _90: PtrWrapper<'_, dyn std::ops::Fn(u32) -> u32 + std::marker::Send>;
    let mut _91: &dyn std::ops::Fn(u32) -> u32 + std::marker::Send;
    let _92: &fn(u32) -> u32;
    let mut _93: (&u32, &u32);
    let mut _94: &u32;
    let _95: u32;
    let mut _96: (u32,);
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: u32;
    let mut _102: u32;
    let _104: !;
    let mut _105: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _107: PtrWrapper<'_, fn(u32) -> u32>;
    let _108: &fn(u32) -> u32;
    let mut _109: (&u32, &u32);
    let mut _110: &u32;
    let _111: u32;
    let mut _112: (u32,);
    let mut _115: bool;
    let mut _116: bool;
    let mut _117: u32;
    let mut _118: u32;
    let _120: !;
    let mut _121: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _126: &dyn std::ops::Fn(u32) -> u32;
    let mut _127: &dyn std::ops::Fn(u32) -> u32;
    scope 1 {
        debug a => _1;
        let _2: fn(u32) -> u32;
        scope 2 {
            debug square_local => _2;
            let _3: unsafe fn(u32) -> u32;
            let _4: &dyn std::ops::Fn(u32) -> u32 + std::marker::Send;
            scope 3 {
                debug f => _3;
                debug g => _4;
                let _13: &usize;
                let _14: &usize;
                let _26: &u32;
                let _27: &u32;
                let _41: &u32;
                let _42: &u32;
                let _56: &&[u8];
                let _57: &&[u8; 3];
                let _63: PtrWrapper<'_, [u8]>;
                let mut _124: &u32;
                let mut _125: &u32;
                scope 4 {
                    debug left_val => _13;
                    debug right_val => _14;
                    let _19: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _19;
                    }
                }
                scope 6 {
                    debug left_val => _26;
                    debug right_val => _27;
                    let _32: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _32;
                    }
                }
                scope 8 {
                    debug left_val => _41;
                    debug right_val => _42;
                    let _47: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _47;
                    }
                }
                scope 10 {
                    debug left_val => _56;
                    debug right_val => _57;
                    let _60: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _60;
                    }
                }
                scope 12 {
                    debug w => _63;
                    let _74: TrivPtrWrapper<'_, [u8]>;
                    scope 13 {
                        debug w => _74;
                        let _82: &&&[u8];
                        let _83: &&[u8; 3];
                        let _89: PtrWrapper<'_, dyn std::ops::Fn(u32) -> u32>;
                        scope 14 {
                            debug left_val => _82;
                            debug right_val => _83;
                            let _86: core::panicking::AssertKind;
                            scope 15 {
                                debug kind => _86;
                            }
                        }
                        scope 16 {
                            debug z => _89;
                            let _97: &u32;
                            let _98: &u32;
                            let _106: PtrWrapper<'_, dyn std::ops::Fn(u32) -> u32>;
                            let mut _123: &u32;
                            scope 17 {
                                debug left_val => _97;
                                debug right_val => _98;
                                let _103: core::panicking::AssertKind;
                                scope 18 {
                                    debug kind => _103;
                                }
                            }
                            scope 19 {
                                debug z => _106;
                                let _113: &u32;
                                let _114: &u32;
                                let mut _122: &u32;
                                scope 20 {
                                    debug left_val => _113;
                                    debug right_val => _114;
                                    let _119: core::panicking::AssertKind;
                                    scope 21 {
                                        debug kind => _119;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [const 0_u8, const 1_u8, const 2_u8];
        _2 = square as fn(u32) -> u32 (Pointer(ReifyFnPointer));
        _6 = &_2;
        _5 = fn_coercions(_6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = (_5.0: unsafe fn(u32) -> u32);
        _4 = (_5.1: &dyn std::ops::Fn(u32) -> u32 + std::marker::Send);
        _9 = _3 as usize (PointerExposeAddress);
        _8 = &_9;
        _12 = square as fn(u32) -> u32 (Pointer(ReifyFnPointer));
        _11 = move _12 as usize (PointerExposeAddress);
        _10 = &_11;
        _7 = (move _8, move _10);
        _13 = (_7.0: &usize);
        _14 = (_7.1: &usize);
        _17 = (*_13);
        _18 = (*_14);
        _16 = Eq(move _17, move _18);
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<usize, usize>(move _19, _13, _14, move _21) -> unwind continue;
    }

    bb3: {
        _25 = (const 4_u32,);
        _24 = <dyn Fn(u32) -> u32 + Send as Fn<(u32,)>>::call(_4, move _25) -> [return: bb4, unwind continue];
    }

    bb4: {
        _23 = &_24;
        _125 = const _;
        _22 = (move _23, _125);
        _26 = (_22.0: &u32);
        _27 = (_22.1: &u32);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<u32, u32>(move _32, _26, _27, move _34) -> unwind continue;
    }

    bb6: {
        _39 = identity_coercion(_4) -> [return: bb7, unwind continue];
    }

    bb7: {
        _38 = _39;
        _40 = (const 5_u32,);
        _37 = <dyn Fn(u32) -> u32 as Fn<(u32,)>>::call(move _38, move _40) -> [return: bb8, unwind continue];
    }

    bb8: {
        _36 = &_37;
        _124 = const _;
        _35 = (move _36, _124);
        _41 = (_35.0: &u32);
        _42 = (_35.1: &u32);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<u32, u32>(move _47, _41, _42, move _49) -> unwind continue;
    }

    bb10: {
        _53 = &_1;
        _52 = simple_array_coercion(_53) -> [return: bb11, unwind continue];
    }

    bb11: {
        _51 = &_52;
        _55 = &_1;
        _54 = &_55;
        _50 = (move _51, move _54);
        _56 = (_50.0: &&[u8]);
        _57 = (_50.1: &&[u8; 3]);
        _59 = <&[u8] as PartialEq<&[u8; 3]>>::eq(_56, _57) -> [return: bb12, unwind continue];
    }

    bb12: {
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<&[u8], &[u8; 3]>(move _60, _56, _57, move _62) -> unwind continue;
    }

    bb14: {
        _65 = &_1;
        _64 = PtrWrapper::<'_, [u8; 3]>(const 2_u32, const 3_u32, const (), _65);
        _63 = coerce_ptr_wrapper(move _64) -> [return: bb15, unwind continue];
    }

    bb15: {
        _68 = &_63;
        _72 = &_1;
        _71 = PtrWrapper::<'_, [u8; 3]>(const 2_u32, const 3_u32, const (), _72);
        _70 = move _71 as PtrWrapper<'_, [u8]> (Pointer(Unsize));
        _69 = &_70;
        _67 = <PtrWrapper<'_, [u8]> as PartialEq>::eq(move _68, move _69) -> [return: bb16, unwind continue];
    }

    bb16: {
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _73 = core::panicking::panic(const "assertion failed: w == PtrWrapper(2, 3, (), &a) as PtrWrapper<[u8]>") -> unwind continue;
    }

    bb18: {
        _76 = &_1;
        _75 = TrivPtrWrapper::<'_, [u8; 3]>(_76);
        _74 = coerce_triv_ptr_wrapper(move _75) -> [return: bb19, unwind continue];
    }

    bb19: {
        _79 = &(_74.0: &[u8]);
        _78 = &_79;
        _81 = &_1;
        _80 = &_81;
        _77 = (move _78, move _80);
        _82 = (_77.0: &&&[u8]);
        _83 = (_77.1: &&[u8; 3]);
        _85 = <&&[u8] as PartialEq<&[u8; 3]>>::eq(_82, _83) -> [return: bb20, unwind continue];
    }

    bb20: {
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _86 = core::panicking::AssertKind::Eq;
        _88 = Option::<Arguments<'_>>::None;
        _87 = core::panicking::assert_failed::<&&[u8], &[u8; 3]>(move _86, _82, _83, move _88) -> unwind continue;
    }

    bb22: {
        _92 = &_2;
        _91 = _92 as &dyn std::ops::Fn(u32) -> u32 + std::marker::Send (Pointer(Unsize));
        _90 = PtrWrapper::<'_, dyn Fn(u32) -> u32 + Send>(const 2_u32, const 3_u32, const (), move _91);
        _89 = coerce_fat_ptr_wrapper(move _90) -> [return: bb23, unwind continue];
    }

    bb23: {
        _126 = deref_copy (_89.3: &dyn std::ops::Fn(u32) -> u32);
        _96 = (const 6_u32,);
        _95 = <dyn Fn(u32) -> u32 as Fn<(u32,)>>::call(_126, move _96) -> [return: bb24, unwind continue];
    }

    bb24: {
        _94 = &_95;
        _123 = const _;
        _93 = (move _94, _123);
        _97 = (_93.0: &u32);
        _98 = (_93.1: &u32);
        _101 = (*_97);
        _102 = (*_98);
        _100 = Eq(move _101, move _102);
        _99 = Not(move _100);
        switchInt(move _99) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _103 = core::panicking::AssertKind::Eq;
        _105 = Option::<Arguments<'_>>::None;
        _104 = core::panicking::assert_failed::<u32, u32>(move _103, _97, _98, move _105) -> unwind continue;
    }

    bb26: {
        _108 = &_2;
        _107 = PtrWrapper::<'_, fn(u32) -> u32>(const 2_u32, const 3_u32, const (), _108);
        _106 = coerce_ptr_wrapper_poly::<'_, fn(u32) -> u32, dyn Fn(u32) -> u32>(move _107) -> [return: bb27, unwind continue];
    }

    bb27: {
        _127 = deref_copy (_106.3: &dyn std::ops::Fn(u32) -> u32);
        _112 = (const 6_u32,);
        _111 = <dyn Fn(u32) -> u32 as Fn<(u32,)>>::call(_127, move _112) -> [return: bb28, unwind continue];
    }

    bb28: {
        _110 = &_111;
        _122 = const _;
        _109 = (move _110, _122);
        _113 = (_109.0: &u32);
        _114 = (_109.1: &u32);
        _117 = (*_113);
        _118 = (*_114);
        _116 = Eq(move _117, move _118);
        _115 = Not(move _116);
        switchInt(move _115) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _119 = core::panicking::AssertKind::Eq;
        _121 = Option::<Arguments<'_>>::None;
        _120 = core::panicking::assert_failed::<u32, u32>(move _119, _113, _114, move _121) -> unwind continue;
    }

    bb30: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 36_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 36_u32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 25_u32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 16_u32;
        _0 = &_1;
        return;
    }
}

fn PtrWrapper(_1: u32, _2: u32, _3: (), _4: &T) -> PtrWrapper<'_, T> {
    let mut _0: PtrWrapper<'_, T>;

    bb0: {
        _0 = PtrWrapper::<'_, T>(move _1, move _2, move _3, move _4);
        return;
    }
}

// MIR FOR CTFE
fn PtrWrapper(_1: u32, _2: u32, _3: (), _4: &T) -> PtrWrapper<'_, T> {
    let mut _0: PtrWrapper<'_, T>;

    bb0: {
        _0 = PtrWrapper::<'_, T>(move _1, move _2, move _3, move _4);
        return;
    }
}

fn TrivPtrWrapper(_1: &T) -> TrivPtrWrapper<'_, T> {
    let mut _0: TrivPtrWrapper<'_, T>;

    bb0: {
        _0 = TrivPtrWrapper::<'_, T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn TrivPtrWrapper(_1: &T) -> TrivPtrWrapper<'_, T> {
    let mut _0: TrivPtrWrapper<'_, T>;

    bb0: {
        _0 = TrivPtrWrapper::<'_, T>(move _1);
        return;
    }
}
