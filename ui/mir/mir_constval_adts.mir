// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/mir/mir_constval_adts.rs:2:10: 2:19>::eq(_1: &Point, _2: &Point) -> bool {
    debug self => _1;                    // in scope 0 at ui/mir/mir_constval_adts.rs:2:10: 2:19
    debug other => _2;                   // in scope 0 at ui/mir/mir_constval_adts.rs:2:10: 2:19
    let mut _0: bool;                    // return place in scope 0 at ui/mir/mir_constval_adts.rs:2:10: 2:19
    let mut _3: bool;                    // in scope 0 at ui/mir/mir_constval_adts.rs:4:5: 4:12
    let mut _4: i32;                     // in scope 0 at ui/mir/mir_constval_adts.rs:4:5: 4:12
    let mut _5: i32;                     // in scope 0 at ui/mir/mir_constval_adts.rs:4:5: 4:12
    let mut _6: bool;                    // in scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
    let mut _7: i32;                     // in scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
    let mut _8: i32;                     // in scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12

    bb0: {
        _4 = ((*_1).0: i32);             // scope 0 at ui/mir/mir_constval_adts.rs:4:5: 4:12
        _5 = ((*_2).0: i32);             // scope 0 at ui/mir/mir_constval_adts.rs:4:5: 4:12
        _3 = Eq(move _4, move _5);       // scope 0 at ui/mir/mir_constval_adts.rs:4:5: 4:12
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
        goto -> bb3;                     // scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
    }

    bb2: {
        _7 = ((*_1).1: i32);             // scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
        _8 = ((*_2).1: i32);             // scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
        _6 = Eq(move _7, move _8);       // scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
        _0 = move _6;                    // scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
        goto -> bb3;                     // scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
    }

    bb3: {
        return;                          // scope 0 at ui/mir/mir_constval_adts.rs:2:19: 2:19
    }
}

fn <impl at ui/mir/mir_constval_adts.rs:2:21: 2:26>::fmt(_1: &Point, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/mir/mir_constval_adts.rs:2:21: 2:26
    debug f => _2;                       // in scope 0 at ui/mir/mir_constval_adts.rs:2:21: 2:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/mir/mir_constval_adts.rs:2:21: 2:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/mir/mir_constval_adts.rs:2:21: 2:26
    let mut _4: &str;                    // in scope 0 at ui/mir/mir_constval_adts.rs:2:21: 2:26
    let _5: &str;                        // in scope 0 at ui/mir/mir_constval_adts.rs:2:21: 2:26
    let mut _6: &str;                    // in scope 0 at ui/mir/mir_constval_adts.rs:4:5: 4:12
    let _7: &str;                        // in scope 0 at ui/mir/mir_constval_adts.rs:4:5: 4:12
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/mir/mir_constval_adts.rs:4:5: 4:12
    let mut _9: &i32;                    // in scope 0 at ui/mir/mir_constval_adts.rs:4:5: 4:12
    let _10: &i32;                       // in scope 0 at ui/mir/mir_constval_adts.rs:4:5: 4:12
    let mut _11: &str;                   // in scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
    let _12: &str;                       // in scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
    let mut _14: &&i32;                  // in scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
    let _15: &&i32;                      // in scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
    let _16: &i32;                       // in scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/mir/mir_constval_adts.rs:2:21: 2:26
        _5 = const "Point";              // scope 0 at ui/mir/mir_constval_adts.rs:2:21: 2:26
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:2:21: 2:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/mir/mir_constval_adts.rs:2:21: 2:26
        _7 = const "_x";                 // scope 0 at ui/mir/mir_constval_adts.rs:4:5: 4:12
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:4:5: 4:12
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/mir/mir_constval_adts.rs:4:5: 4:12
        _10 = &((*_1).0: i32);           // scope 0 at ui/mir/mir_constval_adts.rs:4:5: 4:12
        _9 = _10;                        // scope 0 at ui/mir/mir_constval_adts.rs:4:5: 4:12
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/mir/mir_constval_adts.rs:4:5: 4:12
        _12 = const "_y";                // scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:5:5: 5:12
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
        _16 = &((*_1).1: i32);           // scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
        _15 = &_16;                      // scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
        _14 = _15;                       // scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/mir/mir_constval_adts.rs:5:5: 5:12
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _3, move _4, move _6, move _8, move _11, move _13) -> bb1; // scope 0 at ui/mir/mir_constval_adts.rs:2:21: 2:26
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:2:21: 2:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/mir_constval_adts.rs:2:26: 2:26
    }
}

fn <impl at ui/mir/mir_constval_adts.rs:8:10: 8:19>::eq(_1: &Newtype<T>, _2: &Newtype<T>) -> bool {
    debug self => _1;                    // in scope 0 at ui/mir/mir_constval_adts.rs:8:10: 8:19
    debug other => _2;                   // in scope 0 at ui/mir/mir_constval_adts.rs:8:10: 8:19
    let mut _0: bool;                    // return place in scope 0 at ui/mir/mir_constval_adts.rs:8:10: 8:19
    let mut _3: &T;                      // in scope 0 at ui/mir/mir_constval_adts.rs:9:19: 9:20
    let mut _4: &T;                      // in scope 0 at ui/mir/mir_constval_adts.rs:9:19: 9:20

    bb0: {
        _3 = &((*_1).0: T);              // scope 0 at ui/mir/mir_constval_adts.rs:9:19: 9:20
        _4 = &((*_2).0: T);              // scope 0 at ui/mir/mir_constval_adts.rs:9:19: 9:20
        _0 = <T as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/mir/mir_constval_adts.rs:9:19: 9:20
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:9:19: 9:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/mir_constval_adts.rs:8:19: 8:19
    }
}

fn <impl at ui/mir/mir_constval_adts.rs:8:21: 8:23>::assert_receiver_is_total_eq(_1: &Newtype<T>) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/mir_constval_adts.rs:8:21: 8:23
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_constval_adts.rs:8:21: 8:23
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/mir/mir_constval_adts.rs:8:23: 8:23
    }
}

fn <impl at ui/mir/mir_constval_adts.rs:8:25: 8:30>::fmt(_1: &Newtype<T>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/mir/mir_constval_adts.rs:8:25: 8:30
    debug f => _2;                       // in scope 0 at ui/mir/mir_constval_adts.rs:8:25: 8:30
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/mir/mir_constval_adts.rs:8:25: 8:30
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/mir/mir_constval_adts.rs:8:25: 8:30
    let mut _4: &str;                    // in scope 0 at ui/mir/mir_constval_adts.rs:8:25: 8:30
    let _5: &str;                        // in scope 0 at ui/mir/mir_constval_adts.rs:8:25: 8:30
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/mir/mir_constval_adts.rs:9:19: 9:20
    let mut _7: &&T;                     // in scope 0 at ui/mir/mir_constval_adts.rs:9:19: 9:20
    let _8: &&T;                         // in scope 0 at ui/mir/mir_constval_adts.rs:9:19: 9:20
    let _9: &T;                          // in scope 0 at ui/mir/mir_constval_adts.rs:9:19: 9:20

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/mir/mir_constval_adts.rs:8:25: 8:30
        _5 = const "Newtype";            // scope 0 at ui/mir/mir_constval_adts.rs:8:25: 8:30
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:8:25: 8:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/mir/mir_constval_adts.rs:8:25: 8:30
        _9 = &((*_1).0: T);              // scope 0 at ui/mir/mir_constval_adts.rs:9:19: 9:20
        _8 = &_9;                        // scope 0 at ui/mir/mir_constval_adts.rs:9:19: 9:20
        _7 = _8;                         // scope 0 at ui/mir/mir_constval_adts.rs:9:19: 9:20
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/mir/mir_constval_adts.rs:9:19: 9:20
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/mir/mir_constval_adts.rs:8:25: 8:30
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:8:25: 8:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/mir_constval_adts.rs:8:30: 8:30
    }
}

const STRUCT: Point = {
    let mut _0: Point;                   // return place in scope 0 at ui/mir/mir_constval_adts.rs:11:15: 11:20

    bb0: {
        _0 = Point { _x: const 42_i32, _y: const 42_i32 }; // scope 0 at ui/mir/mir_constval_adts.rs:11:23: 11:47
        return;                          // scope 0 at ui/mir/mir_constval_adts.rs:11:1: 11:48
    }
}

const TUPLE1: (i32, i32) = {
    let mut _0: (i32, i32);              // return place in scope 0 at ui/mir/mir_constval_adts.rs:12:15: 12:25

    bb0: {
        _0 = (const 42_i32, const 42_i32); // scope 0 at ui/mir/mir_constval_adts.rs:12:28: 12:36
        return;                          // scope 0 at ui/mir/mir_constval_adts.rs:12:1: 12:37
    }
}

const TUPLE2: (&str, &str) = {
    let mut _0: (&str, &str);            // return place in scope 0 at ui/mir/mir_constval_adts.rs:13:15: 13:43

    bb0: {
        _0 = (const "hello", const "world"); // scope 0 at ui/mir/mir_constval_adts.rs:13:46: 13:63
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:13:47: 13:54
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:13:55: 13:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at ui/mir/mir_constval_adts.rs:13:1: 13:64
    }
}

const PAIR_NEWTYPE: (Newtype<i32>, Newtype<i32>) = {
    let mut _0: (Newtype<i32>, Newtype<i32>); // return place in scope 0 at ui/mir/mir_constval_adts.rs:14:21: 14:49
    let mut _1: Newtype<i32>;            // in scope 0 at ui/mir/mir_constval_adts.rs:14:53: 14:64
    let mut _2: Newtype<i32>;            // in scope 0 at ui/mir/mir_constval_adts.rs:14:66: 14:77

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/mir/mir_constval_adts.rs:14:53: 14:64
        _1 = Newtype::<i32>(const 42_i32); // scope 0 at ui/mir/mir_constval_adts.rs:14:53: 14:64
        StorageLive(_2);                 // scope 0 at ui/mir/mir_constval_adts.rs:14:66: 14:77
        _2 = Newtype::<i32>(const 42_i32); // scope 0 at ui/mir/mir_constval_adts.rs:14:66: 14:77
        _0 = (move _1, move _2);         // scope 0 at ui/mir/mir_constval_adts.rs:14:52: 14:78
        StorageDead(_2);                 // scope 0 at ui/mir/mir_constval_adts.rs:14:77: 14:78
        StorageDead(_1);                 // scope 0 at ui/mir/mir_constval_adts.rs:14:77: 14:78
        return;                          // scope 0 at ui/mir/mir_constval_adts.rs:14:1: 14:79
    }
}

fn mir() -> (Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)) {
    let mut _0: (Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)); // return place in scope 0 at ui/mir/mir_constval_adts.rs:16:13: 16:92
    let _1: Point;                       // in scope 0 at ui/mir/mir_constval_adts.rs:17:9: 17:16
    let mut _5: Point;                   // in scope 0 at ui/mir/mir_constval_adts.rs:21:6: 21:13
    let mut _6: (i32, i32);              // in scope 0 at ui/mir/mir_constval_adts.rs:21:15: 21:21
    let mut _7: (&str, &str);            // in scope 0 at ui/mir/mir_constval_adts.rs:21:23: 21:29
    let mut _8: (Newtype<i32>, Newtype<i32>); // in scope 0 at ui/mir/mir_constval_adts.rs:21:31: 21:43
    scope 1 {
        debug struct1 => _1;             // in scope 1 at ui/mir/mir_constval_adts.rs:17:9: 17:16
        let _2: (i32, i32);              // in scope 1 at ui/mir/mir_constval_adts.rs:18:9: 18:15
        scope 2 {
            debug tuple1 => _2;          // in scope 2 at ui/mir/mir_constval_adts.rs:18:9: 18:15
            let _3: (&str, &str);        // in scope 2 at ui/mir/mir_constval_adts.rs:19:9: 19:15
            scope 3 {
                debug tuple2 => _3;      // in scope 3 at ui/mir/mir_constval_adts.rs:19:9: 19:15
                let _4: (Newtype<i32>, Newtype<i32>); // in scope 3 at ui/mir/mir_constval_adts.rs:20:9: 20:21
                scope 4 {
                    debug pair_newtype => _4; // in scope 4 at ui/mir/mir_constval_adts.rs:20:9: 20:21
                }
            }
        }
    }

    bb0: {
        _1 = const _;                    // scope 0 at ui/mir/mir_constval_adts.rs:17:19: 17:25
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:17:19: 17:25
                                         // + literal: Const { ty: Point, val: Unevaluated(STRUCT, [], None) }
        _2 = const _;                    // scope 1 at ui/mir/mir_constval_adts.rs:18:18: 18:24
        _3 = const _;                    // scope 2 at ui/mir/mir_constval_adts.rs:19:18: 19:24
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:19:18: 19:24
                                         // + literal: Const { ty: (&str, &str), val: Unevaluated(TUPLE2, [], None) }
        _4 = const _;                    // scope 3 at ui/mir/mir_constval_adts.rs:20:24: 20:36
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:20:24: 20:36
                                         // + literal: Const { ty: (Newtype<i32>, Newtype<i32>), val: Unevaluated(PAIR_NEWTYPE, [], None) }
        _5 = move _1;                    // scope 4 at ui/mir/mir_constval_adts.rs:21:6: 21:13
        _6 = const (42_i32, 42_i32);     // scope 4 at ui/mir/mir_constval_adts.rs:21:15: 21:21
        _7 = _3;                         // scope 4 at ui/mir/mir_constval_adts.rs:21:23: 21:29
        _8 = const (Newtype::<i32>(42_i32), Newtype::<i32>(42_i32)); // scope 4 at ui/mir/mir_constval_adts.rs:21:31: 21:43
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:21:31: 21:43
                                         // + literal: Const { ty: (Newtype<i32>, Newtype<i32>), val: Value(ByRef(..)) }
        _0 = (move _5, move _6, move _7, move _8); // scope 4 at ui/mir/mir_constval_adts.rs:21:5: 21:44
        return;                          // scope 0 at ui/mir/mir_constval_adts.rs:22:2: 22:2
    }
}

const NEWTYPE: Newtype<&str> = {
    let mut _0: Newtype<&str>;           // return place in scope 0 at ui/mir/mir_constval_adts.rs:24:16: 24:37
    let mut _1: &str;                    // in scope 0 at ui/mir/mir_constval_adts.rs:24:48: 24:56
    let _2: &str;                        // in scope 0 at ui/mir/mir_constval_adts.rs:24:48: 24:56

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/mir/mir_constval_adts.rs:24:48: 24:56
        StorageLive(_2);                 // scope 0 at ui/mir/mir_constval_adts.rs:24:48: 24:56
        _2 = const "foobar";             // scope 0 at ui/mir/mir_constval_adts.rs:24:48: 24:56
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:24:48: 24:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1 = &(*_2);                     // scope 0 at ui/mir/mir_constval_adts.rs:24:48: 24:56
        _0 = Newtype::<&str>(move _1);   // scope 0 at ui/mir/mir_constval_adts.rs:24:40: 24:57
        StorageDead(_2);                 // scope 0 at ui/mir/mir_constval_adts.rs:24:56: 24:57
        StorageDead(_1);                 // scope 0 at ui/mir/mir_constval_adts.rs:24:56: 24:57
        return;                          // scope 0 at ui/mir/mir_constval_adts.rs:24:1: 24:58
    }
}

fn test_promoted_newtype_str_ref() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_constval_adts.rs:26:36: 26:36
    let _1: &Newtype<&str>;              // in scope 0 at ui/mir/mir_constval_adts.rs:27:9: 27:10
    let mut _2: (&&Newtype<&str>, &&Newtype<&str>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &&Newtype<&str>;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _4: &&Newtype<&str>;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: &&Newtype<&str>;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: &&Newtype<&str>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &&Newtype<&str>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &&Newtype<&str>;            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &&Newtype<&str>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &&Newtype<&str>;            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: &Newtype<&str>;         // in scope 0 at ui/mir/mir_constval_adts.rs:27:13: 27:21
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/mir/mir_constval_adts.rs:27:9: 27:10
        let _5: &&Newtype<&str>;         // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _6: &&Newtype<&str>;         // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _19: &&Newtype<&str>;    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _5;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _6;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _11: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _11;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _20 = const _;                   // scope 0 at ui/mir/mir_constval_adts.rs:27:13: 27:21
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:27:13: 27:21
                                         // + literal: Const { ty: &Newtype<&str>, val: Unevaluated(test_promoted_newtype_str_ref, [], Some(promoted[1])) }
        _1 = _20;                        // scope 0 at ui/mir/mir_constval_adts.rs:27:13: 27:21
        _3 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _19 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&Newtype<&str>, val: Unevaluated(test_promoted_newtype_str_ref, [], Some(promoted[0])) }
        _4 = _19;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _4);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_2.0: &&Newtype<&str>);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_2.1: &&Newtype<&str>);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = _5;                         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = <&Newtype<&str> as PartialEq>::eq(move _9, move _10) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &Newtype<&str>, &'b &Newtype<&str>) -> bool {<&Newtype<&str> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = Not(move _8);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _11 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<&Newtype<&str>, &Newtype<&str>>(move _13, move _14, move _16, move _18); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &Newtype<&str>, &'b &Newtype<&str>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&Newtype<&str>, &Newtype<&str>>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/mir/mir_constval_adts.rs:29:2: 29:2
    }
}

promoted[0] in test_promoted_newtype_str_ref: &&Newtype<&str> = {
    let mut _0: &&Newtype<&str>;         // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &Newtype<&str>;          // in scope 0 at ui/mir/mir_constval_adts.rs:28:19: 28:37
    let mut _2: Newtype<&str>;           // in scope 0 at ui/mir/mir_constval_adts.rs:28:20: 28:37

    bb0: {
        _2 = Newtype::<&str>(const "foobar"); // scope 0 at ui/mir/mir_constval_adts.rs:28:20: 28:37
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:28:28: 28:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1 = &_2;                        // scope 0 at ui/mir/mir_constval_adts.rs:28:19: 28:37
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in test_promoted_newtype_str_ref: &Newtype<&str> = {
    let mut _0: &Newtype<&str>;          // return place in scope 0 at ui/mir/mir_constval_adts.rs:27:13: 27:21
    let mut _1: Newtype<&str>;           // in scope 0 at ui/mir/mir_constval_adts.rs:27:14: 27:21

    bb0: {
        _1 = const _;                    // scope 0 at ui/mir/mir_constval_adts.rs:27:14: 27:21
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:27:14: 27:21
                                         // + literal: Const { ty: Newtype<&str>, val: Unevaluated(NEWTYPE, [], None) }
        _0 = &_1;                        // scope 0 at ui/mir/mir_constval_adts.rs:27:13: 27:21
        return;                          // scope 0 at ui/mir/mir_constval_adts.rs:27:13: 27:21
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_constval_adts.rs:31:10: 31:10
    let mut _1: (&(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)), &(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>))); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: (Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)); // in scope 0 at ui/mir/mir_constval_adts.rs:32:16: 32:21
    let mut _4: &(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: &(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: &(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _19: ();                         // in scope 0 at ui/mir/mir_constval_adts.rs:33:5: 33:36
    let mut _20: &(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = mir() -> bb1;               // scope 0 at ui/mir/mir_constval_adts.rs:32:16: 32:21
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:32:16: 32:19
                                         // + literal: Const { ty: fn() -> (Point, (i32, i32), (&'static str, &'static str), (Newtype<i32>, Newtype<i32>)) {mir}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _20 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)), val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _20;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>))); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>))); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = _5;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = <(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)) as PartialEq>::eq(move _9, move _10) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)), &'b (Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>))) -> bool {<(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)), (Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>))>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)), &'b (Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)), (Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>))>}, val: Value(<ZST>) }
    }

    bb4: {
        _19 = test_promoted_newtype_str_ref() -> bb5; // scope 0 at ui/mir/mir_constval_adts.rs:33:5: 33:36
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:33:5: 33:34
                                         // + literal: Const { ty: fn() {test_promoted_newtype_str_ref}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/mir/mir_constval_adts.rs:34:2: 34:2
    }
}

promoted[0] in main: &(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)) = {
    let mut _0: &(Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)); // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: (Point, (i32, i32), (&str, &str), (Newtype<i32>, Newtype<i32>)); // in scope 0 at ui/mir/mir_constval_adts.rs:32:23: 32:61

    bb0: {
        _1 = (const _, const _, const _, const _); // scope 0 at ui/mir/mir_constval_adts.rs:32:23: 32:61
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:32:24: 32:30
                                         // + literal: Const { ty: Point, val: Unevaluated(STRUCT, [], None) }
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:32:40: 32:46
                                         // + literal: Const { ty: (&str, &str), val: Unevaluated(TUPLE2, [], None) }
                                         // mir::Constant
                                         // + span: ui/mir/mir_constval_adts.rs:32:48: 32:60
                                         // + literal: Const { ty: (Newtype<i32>, Newtype<i32>), val: Unevaluated(PAIR_NEWTYPE, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn Newtype(_1: T) -> Newtype<T> {
    let mut _0: Newtype<T>;              // return place in scope 0 at ui/mir/mir_constval_adts.rs:9:1: 9:18

    bb0: {
        _0 = Newtype::<T>(move _1);      // scope 0 at ui/mir/mir_constval_adts.rs:9:1: 9:18
        return;                          // scope 0 at ui/mir/mir_constval_adts.rs:9:1: 9:18
    }
}

// MIR FOR CTFE
fn Newtype(_1: T) -> Newtype<T> {
    let mut _0: Newtype<T>;              // return place in scope 0 at ui/mir/mir_constval_adts.rs:9:1: 9:18

    bb0: {
        _0 = Newtype::<T>(move _1);      // scope 0 at ui/mir/mir_constval_adts.rs:9:1: 9:18
        return;                          // scope 0 at ui/mir/mir_constval_adts.rs:9:1: 9:18
    }
}
