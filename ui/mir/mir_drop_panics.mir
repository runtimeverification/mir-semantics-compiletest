// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/mir/mir_drop_panics.rs:7:1: 7:24>::drop(_1: &mut Droppable) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/mir_drop_panics.rs:8:13: 8:22
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_drop_panics.rs:8:24: 8:24
    let mut _2: u32;                     // in scope 0 at ui/mir/mir_drop_panics.rs:9:12: 9:18
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let _4: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:9: 209:63
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let mut _6: &[&str];                 // in scope 0 at ui/mir/mir_drop_panics.rs:12:23: 12:32
    let mut _7: &[&str; 2];              // in scope 0 at ui/mir/mir_drop_panics.rs:12:23: 12:32
    let _8: &[&str; 2];                  // in scope 0 at ui/mir/mir_drop_panics.rs:12:23: 12:32
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let mut _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/mir/mir_drop_panics.rs:12:34: 12:40
    let mut _14: &u32;                   // in scope 0 at ui/mir/mir_drop_panics.rs:12:34: 12:40
    let _15: &u32;                       // in scope 0 at ui/mir/mir_drop_panics.rs:12:34: 12:40
    let mut _16: &[&str; 2];             // in scope 0 at ui/mir/mir_drop_panics.rs:12:23: 12:32

    bb0: {
        _2 = ((*_1).0: u32);             // scope 0 at ui/mir/mir_drop_panics.rs:9:12: 9:18
        switchInt(move _2) -> [1: bb1, otherwise: bb2]; // scope 0 at ui/mir/mir_drop_panics.rs:9:12: 9:23
    }

    bb1: {
        _3 = begin_panic::<&str>(const "panic 1"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/mir/mir_drop_panics.rs:10:20: 10:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _16 = const _;                   // scope 0 at ui/mir/mir_drop_panics.rs:12:23: 12:32
                                         // mir::Constant
                                         // + span: ui/mir/mir_drop_panics.rs:12:23: 12:32
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(<Droppable as Drop>::drop, [], Some(promoted[0])) }
        _8 = _16;                        // scope 0 at ui/mir/mir_drop_panics.rs:12:23: 12:32
        _7 = _8;                         // scope 0 at ui/mir/mir_drop_panics.rs:12:23: 12:32
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 0 at ui/mir/mir_drop_panics.rs:12:23: 12:32
        _15 = &((*_1).0: u32);           // scope 0 at ui/mir/mir_drop_panics.rs:12:34: 12:40
        _14 = _15;                       // scope 0 at ui/mir/mir_drop_panics.rs:12:34: 12:40
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<u32>(move _14) -> bb3; // scope 0 at ui/mir/mir_drop_panics.rs:12:34: 12:40
                                         // mir::Constant
                                         // + span: ui/mir/mir_drop_panics.rs:12:34: 12:40
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u32>}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = [move _13];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _11 = &_12;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _10 = _11;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb4; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = _eprint(move _5) -> bb5;    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:9: 209:63
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:9: 209:28
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_eprint}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/mir/mir_drop_panics.rs:14:6: 14:6
    }
}

promoted[0] in <impl at ui/mir/mir_drop_panics.rs:7:1: 7:24>::drop: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/mir/mir_drop_panics.rs:12:23: 12:32
    let mut _1: [&str; 2];               // in scope 0 at ui/mir/mir_drop_panics.rs:12:23: 12:32

    bb0: {
        _1 = [const "drop ", const "\n"]; // scope 0 at ui/mir/mir_drop_panics.rs:12:23: 12:32
                                         // mir::Constant
                                         // + span: ui/mir/mir_drop_panics.rs:12:23: 12:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/mir/mir_drop_panics.rs:12:23: 12:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/mir/mir_drop_panics.rs:12:23: 12:32
        return;                          // scope 0 at ui/mir/mir_drop_panics.rs:12:23: 12:32
    }
}

fn mir() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_drop_panics.rs:17:10: 17:10
    let _1: Droppable;                   // in scope 0 at ui/mir/mir_drop_panics.rs:18:9: 18:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/mir/mir_drop_panics.rs:18:9: 18:10
        let _2: Droppable;               // in scope 1 at ui/mir/mir_drop_panics.rs:19:9: 19:10
        scope 2 {
            debug y => _2;               // in scope 2 at ui/mir/mir_drop_panics.rs:19:9: 19:10
        }
    }

    bb0: {
        _1 = Droppable(const 2_u32);     // scope 0 at ui/mir/mir_drop_panics.rs:18:13: 18:25
        _2 = Droppable(const 1_u32);     // scope 1 at ui/mir/mir_drop_panics.rs:19:13: 19:25
        drop(_2) -> [return: bb1, unwind: bb3]; // scope 1 at ui/mir/mir_drop_panics.rs:20:1: 20:2
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/mir/mir_drop_panics.rs:20:1: 20:2
    }

    bb2: {
        return;                          // scope 0 at ui/mir/mir_drop_panics.rs:20:2: 20:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/mir/mir_drop_panics.rs:20:1: 20:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/mir/mir_drop_panics.rs:17:1: 20:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_drop_panics.rs:22:11: 22:11
    let _1: ();                          // in scope 0 at ui/mir/mir_drop_panics.rs:23:5: 23:10

    bb0: {
        _1 = mir() -> bb1;               // scope 0 at ui/mir/mir_drop_panics.rs:23:5: 23:10
                                         // mir::Constant
                                         // + span: ui/mir/mir_drop_panics.rs:23:5: 23:8
                                         // + literal: Const { ty: fn() {mir}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/mir_drop_panics.rs:24:2: 24:2
    }
}

fn Droppable(_1: u32) -> Droppable {
    let mut _0: Droppable;               // return place in scope 0 at ui/mir/mir_drop_panics.rs:6:1: 6:17

    bb0: {
        _0 = Droppable(move _1);         // scope 0 at ui/mir/mir_drop_panics.rs:6:1: 6:17
        return;                          // scope 0 at ui/mir/mir_drop_panics.rs:6:1: 6:17
    }
}

// MIR FOR CTFE
fn Droppable(_1: u32) -> Droppable {
    let mut _0: Droppable;               // return place in scope 0 at ui/mir/mir_drop_panics.rs:6:1: 6:17

    bb0: {
        _0 = Droppable(move _1);         // scope 0 at ui/mir/mir_drop_panics.rs:6:1: 6:17
        return;                          // scope 0 at ui/mir/mir_drop_panics.rs:6:1: 6:17
    }
}
