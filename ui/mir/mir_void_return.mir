// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn mir() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_void_return.rs:2:13: 2:15
    let _1: i32;                         // in scope 0 at ui/mir/mir_void_return.rs:3:9: 3:10
    let mut _3: bool;                    // in scope 0 at ui/mir/mir_void_return.rs:5:12: 5:17
    let mut _4: i32;                     // in scope 0 at ui/mir/mir_void_return.rs:5:12: 5:13
    let mut _5: i32;                     // in scope 0 at ui/mir/mir_void_return.rs:5:16: 5:17
    let mut _6: (i32, bool);             // in scope 0 at ui/mir/mir_void_return.rs:6:9: 6:15
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/mir/mir_void_return.rs:3:9: 3:10
        let mut _2: i32;                 // in scope 1 at ui/mir/mir_void_return.rs:4:9: 4:14
        scope 2 {
            debug y => _2;               // in scope 2 at ui/mir/mir_void_return.rs:4:9: 4:14
        }
    }

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/mir/mir_void_return.rs:3:13: 3:14
        _2 = const 0_i32;                // scope 1 at ui/mir/mir_void_return.rs:4:17: 4:18
        goto -> bb1;                     // scope 2 at ui/mir/mir_void_return.rs:5:5: 7:6
    }

    bb1: {
        _4 = _2;                         // scope 2 at ui/mir/mir_void_return.rs:5:12: 5:13
        _5 = _1;                         // scope 2 at ui/mir/mir_void_return.rs:5:16: 5:17
        _3 = Lt(move _4, move _5);       // scope 2 at ui/mir/mir_void_return.rs:5:12: 5:17
        switchInt(move _3) -> [0: bb4, otherwise: bb2]; // scope 2 at ui/mir/mir_void_return.rs:5:12: 5:17
    }

    bb2: {
        _6 = CheckedAdd(_2, const 1_i32); // scope 2 at ui/mir/mir_void_return.rs:6:9: 6:15
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_i32) -> bb3; // scope 2 at ui/mir/mir_void_return.rs:6:9: 6:15
    }

    bb3: {
        _2 = move (_6.0: i32);           // scope 2 at ui/mir/mir_void_return.rs:6:9: 6:15
        goto -> bb1;                     // scope 2 at ui/mir/mir_void_return.rs:5:5: 7:6
    }

    bb4: {
        return;                          // scope 0 at ui/mir/mir_void_return.rs:8:2: 8:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_void_return.rs:10:15: 10:15
    let _1: ();                          // in scope 0 at ui/mir/mir_void_return.rs:11:5: 11:10

    bb0: {
        _1 = mir() -> bb1;               // scope 0 at ui/mir/mir_void_return.rs:11:5: 11:10
                                         // mir::Constant
                                         // + span: ui/mir/mir_void_return.rs:11:5: 11:8
                                         // + literal: Const { ty: fn() {mir}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/mir_void_return.rs:12:2: 12:2
    }
}
