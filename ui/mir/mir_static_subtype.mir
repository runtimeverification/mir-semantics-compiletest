// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &()) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_static_subtype.rs:4:17: 4:17

    bb0: {
        return;                          // scope 0 at ui/mir/mir_static_subtype.rs:4:19: 4:19
    }
}

static X: fn(&()) = {
    let mut _0: fn(&());                 // return place in scope 0 at ui/mir/mir_static_subtype.rs:5:11: 5:26

    bb0: {
        _0 = foo as for<'a> fn(&'a ()) (Pointer(ReifyFnPointer)); // scope 0 at ui/mir/mir_static_subtype.rs:5:29: 5:32
                                         // mir::Constant
                                         // + span: ui/mir/mir_static_subtype.rs:5:29: 5:32
                                         // + literal: Const { ty: for<'a> fn(&'a ()) {foo}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/mir/mir_static_subtype.rs:5:1: 5:33
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_static_subtype.rs:7:11: 7:11
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/mir/mir_static_subtype.rs:9:2: 9:2
    }
}
