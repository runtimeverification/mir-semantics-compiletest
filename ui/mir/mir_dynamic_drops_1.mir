// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/mir/mir_dynamic_drops_1.rs:8:1: 8:32>::drop(_1: &mut Droppable<'_>) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: bool;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &u32;
    let _11: !;
    let _12: ();
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let _16: &[core::fmt::rt::Argument<'_>; 1];
    let _17: [core::fmt::rt::Argument<'_>; 1];
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &u32;
    let mut _20: &[&str; 2];
    let mut _21: &[&str; 2];
    let mut _22: &mut bool;
    let mut _23: &mut bool;

    bb0: {
        _22 = deref_copy ((*_1).0: &mut bool);
        _2 = (*_22);
        switchInt(move _2) -> [0: bb5, otherwise: bb1];
    }

    bb1: {
        _20 = const _;
        _5 = _20 as &[&str] (Pointer(Unsize));
        _10 = &((*_1).1: u32);
        _9 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_10) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = _eprint(move _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        _11 = exit(const 1_i32) -> unwind continue;
    }

    bb5: {
        _21 = const _;
        _14 = _21 as &[&str] (Pointer(Unsize));
        _19 = &((*_1).1: u32);
        _18 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_19) -> [return: bb6, unwind continue];
    }

    bb6: {
        _17 = [move _18];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _13 = Arguments::<'_>::new_v1(move _14, move _15) -> [return: bb7, unwind continue];
    }

    bb7: {
        _12 = _eprint(move _13) -> [return: bb8, unwind continue];
    }

    bb8: {
        _23 = deref_copy ((*_1).0: &mut bool);
        (*_23) = const true;
        return;
    }
}

promoted[0] in <impl at ui/mir/mir_dynamic_drops_1.rs:8:1: 8:32>::drop: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const " dropped twice\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in <impl at ui/mir/mir_dynamic_drops_1.rs:8:1: 8:32>::drop: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "drop ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn mir() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: (bool, bool);
    let mut _5: &mut bool;
    let mut _7: &mut bool;
    scope 1 {
        debug xv => _1;
        debug yv => _2;
        let _4: Droppable<'_>;
        scope 2 {
            debug x => _4;
            let _6: Droppable<'_>;
            scope 3 {
                debug y => _6;
                let mut _8: Droppable<'_>;
                scope 4 {
                    debug z => _8;
                    scope 5 {
                        debug k => _6;
                    }
                }
            }
        }
    }

    bb0: {
        _3 = (const false, const false);
        _1 = (_3.0: bool);
        _2 = (_3.1: bool);
        _5 = &mut _1;
        _4 = Droppable::<'_>(_5, const 1_u32);
        _7 = &mut _2;
        _6 = Droppable::<'_>(_7, const 2_u32);
        _8 = move _4;
        drop(_8) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        _8 = move _6;
        drop(_8) -> [return: bb3, unwind continue];
    }

    bb2 (cleanup): {
        _8 = move _6;
        drop(_8) -> [return: bb4, unwind terminate];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: !;

    bb0: {
        _1 = mir() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }
}

fn Droppable(_1: &mut bool, _2: u32) -> Droppable<'_> {
    let mut _0: Droppable<'_>;

    bb0: {
        _0 = Droppable::<'_>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Droppable(_1: &mut bool, _2: u32) -> Droppable<'_> {
    let mut _0: Droppable<'_>;

    bb0: {
        _0 = Droppable::<'_>(move _1, move _2);
        return;
    }
}
