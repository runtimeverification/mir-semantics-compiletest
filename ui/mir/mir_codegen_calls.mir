// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test1(_1: isize, _2: (i32, i32), _3: &[i32]) -> (isize, (i32, i32), &[i32]) {
    debug a => _1;
    debug b => _2;
    debug c => _3;
    let mut _0: (isize, (i32, i32), &[i32]);

    bb0: {
        _0 = test1::callee(_1, _2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn test1::callee(_1: isize, _2: (i32, i32), _3: &[i32]) -> (isize, (i32, i32), &[i32]) {
    debug a => _1;
    debug b => _2;
    debug c => _3;
    let mut _0: (isize, (i32, i32), &[i32]);

    bb0: {
        _0 = (_1, _2, _3);
        return;
    }
}

fn test2(_1: isize) -> isize {
    debug a => _1;
    let mut _0: isize;

    bb0: {
        _0 = test2::callee(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn test2::callee(_1: isize) -> isize {
    debug a => _1;
    let mut _0: isize;

    bb0: {
        _0 = _1;
        return;
    }
}

fn <impl at ui/mir/mir_codegen_calls.rs:24:10: 24:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/mir/mir_codegen_calls.rs:24:21: 24:23>::assert_receiver_is_total_eq(_1: &Foo) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/mir/mir_codegen_calls.rs:24:25: 24:30>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Foo";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/mir/mir_codegen_calls.rs:26:1: 26:9>::inherent_method(_1: &Foo, _2: isize) -> isize {
    debug self => _1;
    debug a => _2;
    let mut _0: isize;

    bb0: {
        _0 = _2;
        return;
    }
}

fn test3(_1: &Foo, _2: isize) -> isize {
    debug x => _1;
    debug a => _2;
    let mut _0: isize;

    bb0: {
        _0 = Foo::inherent_method(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn Bar::extension_method(_1: &Self, _2: isize) -> isize {
    debug self => _1;
    debug a => _2;
    let mut _0: isize;

    bb0: {
        _0 = _2;
        return;
    }
}

fn test4(_1: &Foo, _2: isize) -> isize {
    debug x => _1;
    debug a => _2;
    let mut _0: isize;

    bb0: {
        _0 = <Foo as Bar>::extension_method(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn test5(_1: &dyn Bar, _2: isize) -> isize {
    debug x => _1;
    debug a => _2;
    let mut _0: isize;

    bb0: {
        _0 = <dyn Bar as Bar>::extension_method(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn test6(_1: &T, _2: isize) -> isize {
    debug x => _1;
    debug a => _2;
    let mut _0: isize;

    bb0: {
        _0 = <T as Bar>::extension_method(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/mir/mir_codegen_calls.rs:58:1: 58:19>::one() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 1_isize;
        return;
    }
}

fn test7() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = <isize as One>::one() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/mir/mir_codegen_calls.rs:68:1: 68:9>::two() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 2_isize;
        return;
    }
}

fn test8() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = Two::two() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn simple_extern(_1: u32, _2: (u32, u32)) -> u32 {
    debug x => _1;
    debug y => _2;
    let mut _0: u32;
    let mut _3: u32;
    let mut _4: u32;
    let mut _5: u32;

    bb0: {
        _4 = (_2.0: u32);
        _5 = (_2.1: u32);
        _3 = Mul(move _4, move _5);
        _0 = Add(_1, move _3);
        return;
    }
}

fn test9() -> u32 {
    let mut _0: u32;
    let mut _1: (u32, u32);

    bb0: {
        _1 = (const 42_u32, const 43_u32);
        _0 = simple_extern(const 41_u32, move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn test_closure(_1: &F, _2: i32, _3: i32) -> i32 {
    debug f => _1;
    debug x => _2;
    debug y => _3;
    let mut _0: i32;
    let mut _4: (i32, i32);

    bb0: {
        _4 = (_2, _3);
        _0 = <F as Fn<(i32, i32)>>::call(_1, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn test_fn_object(_1: &dyn Fn(i32, i32) -> i32, _2: i32, _3: i32) -> i32 {
    debug f => _1;
    debug x => _2;
    debug y => _3;
    let mut _0: i32;
    let mut _4: (i32, i32);

    bb0: {
        _4 = (_2, _3);
        _0 = <dyn Fn(i32, i32) -> i32 as Fn<(i32, i32)>>::call(_1, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn test_fn_impl(_1: &&dyn Fn(i32, i32) -> i32, _2: i32, _3: i32) -> i32 {
    debug f => _1;
    debug x => _2;
    debug y => _3;
    let mut _0: i32;
    let mut _4: (i32, i32);

    bb0: {
        _4 = (_2, _3);
        _0 = <&dyn Fn(i32, i32) -> i32 as Fn<(i32, i32)>>::call(_1, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn test_fn_direct_call(_1: &F, _2: i32, _3: i32) -> i32 {
    debug f => _1;
    debug x => _2;
    debug y => _3;
    let mut _0: i32;
    let mut _4: (i32, i32);

    bb0: {
        _4 = (_2, _3);
        _0 = <F as Fn<(i32, i32)>>::call(_1, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn test_fn_const_call(_1: &F) -> i32 {
    debug f => _1;
    let mut _0: i32;
    let mut _2: (i32, i32);

    bb0: {
        _2 = (const 100_i32, const -1_i32);
        _0 = <F as Fn<(i32, i32)>>::call(_1, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn test_fn_nil_call(_1: &F) -> i32 {
    debug f => _1;
    let mut _0: i32;

    bb0: {
        _0 = <F as Fn<()>>::call(_1, const ()) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn test_fn_transmute_zst(_1: ()) -> [(); 1] {
    debug x => const ();
    let mut _0: [(); 1];
    scope 1 {
    }

    bb0: {
        _0 = test_fn_transmute_zst::id::<[(); 1]>(const [()]) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

test_fn_transmute_zst::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn test_fn_transmute_zst::id(_1: T) -> T {
    debug x => _1;
    let mut _0: T;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn test_fn_ignored_pair() -> ((), ()) {
    let mut _0: ((), ());

    bb0: {
        return;
    }
}

fn test_fn_ignored_pair_0() -> () {
    let mut _0: ();
    let mut _1: ((), ());

    bb0: {
        _1 = test_fn_ignored_pair() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn id(_1: T) -> T {
    debug x => _1;
    let mut _0: T;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn ignored_pair_named() -> (Foo, Foo) {
    let mut _0: (Foo, Foo);

    bb0: {
        return;
    }
}

fn test_fn_ignored_pair_named() -> (Foo, Foo) {
    let mut _0: (Foo, Foo);
    let mut _1: (Foo, Foo);

    bb0: {
        _1 = ignored_pair_named() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = id::<(Foo, Foo)>(const (Foo, Foo)) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn test_fn_nested_pair(_1: &((f32, f32), u32)) -> (f32, f32) {
    debug x => _1;
    let mut _0: (f32, f32);
    let _2: ((f32, f32), u32);
    let mut _4: f32;
    let mut _5: f32;
    scope 1 {
        debug y => _2;
        let _3: (f32, f32);
        scope 2 {
            debug z => _3;
        }
    }

    bb0: {
        _2 = (*_1);
        _3 = (_2.0: (f32, f32));
        _4 = (_3.0: f32);
        _5 = (_3.1: f32);
        _0 = (move _4, move _5);
        return;
    }
}

fn test_fn_const_arg_by_ref(_1: [u64; 4]) -> u64 {
    debug a => _1;
    let mut _0: u64;
    let _2: &mut [u64; 4];
    let mut _3: &mut [u64; 4];
    let mut _4: u64;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let _8: usize;
    let mut _9: usize;
    let mut _10: bool;
    let mut _11: u64;
    let _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: u64;
    let _19: usize;
    let mut _20: usize;
    let mut _21: bool;
    let _22: usize;
    let mut _23: usize;
    let mut _24: bool;
    let _25: usize;
    let mut _26: usize;
    let mut _27: bool;
    scope 1 {
        debug a => _2;
    }

    bb0: {
        _3 = &mut _1;
        _2 = test::black_box::<&mut [u64; 4]>(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = const 1_usize;
        _6 = const 4_usize;
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> [success: bb2, unwind continue];
    }

    bb2: {
        _4 = (*_2)[_5];
        _8 = const 0_usize;
        _9 = const 4_usize;
        _10 = Lt(_8, _9);
        assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> [success: bb3, unwind continue];
    }

    bb3: {
        (*_2)[_8] = Add((*_2)[_8], move _4);
        _12 = const 2_usize;
        _13 = const 4_usize;
        _14 = Lt(_12, _13);
        assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> [success: bb4, unwind continue];
    }

    bb4: {
        _11 = (*_2)[_12];
        _15 = const 0_usize;
        _16 = const 4_usize;
        _17 = Lt(_15, _16);
        assert(move _17, "index out of bounds: the length is {} but the index is {}", move _16, _15) -> [success: bb5, unwind continue];
    }

    bb5: {
        (*_2)[_15] = Add((*_2)[_15], move _11);
        _19 = const 3_usize;
        _20 = const 4_usize;
        _21 = Lt(_19, _20);
        assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> [success: bb6, unwind continue];
    }

    bb6: {
        _18 = (*_2)[_19];
        _22 = const 0_usize;
        _23 = const 4_usize;
        _24 = Lt(_22, _23);
        assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _22) -> [success: bb7, unwind continue];
    }

    bb7: {
        (*_2)[_22] = Add((*_2)[_22], move _18);
        _25 = const 0_usize;
        _26 = const 4_usize;
        _27 = Lt(_25, _26);
        assert(move _27, "index out of bounds: the length is {} but the index is {}", move _26, _25) -> [success: bb8, unwind continue];
    }

    bb8: {
        _0 = (*_2)[_25];
        return;
    }
}

test_fn_const_arg_by_ref::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&(isize, (i32, i32), &[i32]), &(isize, (i32, i32), &[i32]));
    let mut _2: &(isize, (i32, i32), &[i32]);
    let _3: (isize, (i32, i32), &[i32]);
    let mut _4: (i32, i32);
    let mut _5: &[i32];
    let mut _6: &(isize, (i32, i32), &[i32]);
    let _7: (isize, (i32, i32), &[i32]);
    let mut _8: (i32, i32);
    let mut _9: &[i32];
    let _10: &[i32];
    let _11: &(isize, (i32, i32), &[i32]);
    let _12: &(isize, (i32, i32), &[i32]);
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&isize, &isize);
    let mut _19: &isize;
    let _20: isize;
    let _21: &isize;
    let _22: &isize;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: isize;
    let mut _26: isize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: (&isize, &isize);
    let mut _31: &isize;
    let _32: isize;
    let _33: &isize;
    let _34: &isize;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: isize;
    let mut _38: isize;
    let _40: !;
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _42: (&isize, &isize);
    let mut _43: &isize;
    let _44: isize;
    let _45: &isize;
    let _46: &isize;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: isize;
    let mut _50: isize;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _54: (&isize, &isize);
    let mut _55: &isize;
    let _56: isize;
    let mut _57: &dyn Bar;
    let _58: &isize;
    let _59: &isize;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: isize;
    let mut _63: isize;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: (&isize, &isize);
    let mut _68: &isize;
    let _69: isize;
    let _70: &isize;
    let _71: &isize;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: isize;
    let mut _75: isize;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _79: (&isize, &isize);
    let mut _80: &isize;
    let _81: isize;
    let _82: &isize;
    let _83: &isize;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: isize;
    let mut _87: isize;
    let _89: !;
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _91: (&isize, &isize);
    let mut _92: &isize;
    let _93: isize;
    let _94: &isize;
    let _95: &isize;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: isize;
    let mut _99: isize;
    let _101: !;
    let mut _102: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _103: (&u32, &u32);
    let mut _104: &u32;
    let _105: u32;
    let _106: &u32;
    let _107: &u32;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: u32;
    let mut _111: u32;
    let _113: !;
    let mut _114: std::option::Option<std::fmt::Arguments<'_>>;
    let _115: i32;
    let mut _117: &i32;
    let mut _118: (&i32, &i32);
    let mut _119: &i32;
    let _120: i32;
    let _121: &[closure@ui/mir/mir_codegen_calls.rs:175:19: 175:35];
    let mut _124: bool;
    let mut _125: bool;
    let mut _126: i32;
    let mut _127: i32;
    let _129: !;
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _131: (&i32, &i32);
    let mut _132: &i32;
    let _133: i32;
    let _134: &[closure@ui/mir/mir_codegen_calls.rs:175:19: 175:35];
    let mut _137: bool;
    let mut _138: bool;
    let mut _139: i32;
    let mut _140: i32;
    let _142: !;
    let mut _143: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _145: &dyn std::ops::Fn(i32, i32) -> i32;
    let _146: &[closure@ui/mir/mir_codegen_calls.rs:175:19: 175:35];
    let mut _147: (&i32, &i32);
    let mut _148: &i32;
    let _149: i32;
    let mut _150: &dyn std::ops::Fn(i32, i32) -> i32;
    let mut _153: bool;
    let mut _154: bool;
    let mut _155: i32;
    let mut _156: i32;
    let _158: !;
    let mut _159: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _160: (&i32, &i32);
    let mut _161: &i32;
    let _162: i32;
    let _163: &&dyn std::ops::Fn(i32, i32) -> i32;
    let mut _166: bool;
    let mut _167: bool;
    let mut _168: i32;
    let mut _169: i32;
    let _171: !;
    let mut _172: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _173: (&i32, &i32);
    let mut _174: &i32;
    let _175: i32;
    let _176: &[closure@ui/mir/mir_codegen_calls.rs:175:19: 175:35];
    let mut _179: bool;
    let mut _180: bool;
    let mut _181: i32;
    let mut _182: i32;
    let _184: !;
    let mut _185: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _186: (&i32, &i32);
    let mut _187: &i32;
    let _188: i32;
    let mut _191: bool;
    let mut _192: bool;
    let mut _193: i32;
    let mut _194: i32;
    let _196: !;
    let mut _197: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _198: (&[(); 1], &[(); 1]);
    let mut _199: &[(); 1];
    let _200: [(); 1];
    let mut _203: bool;
    let mut _204: bool;
    let _206: !;
    let mut _207: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _208: (&(), &());
    let mut _209: &();
    let _210: ();
    let mut _213: bool;
    let mut _214: bool;
    let _216: !;
    let mut _217: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _218: (&(Foo, Foo), &(Foo, Foo));
    let mut _219: &(Foo, Foo);
    let _220: (Foo, Foo);
    let mut _223: bool;
    let mut _224: bool;
    let _226: !;
    let mut _227: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _228: (&(f32, f32), &(f32, f32));
    let mut _229: &(f32, f32);
    let _230: (f32, f32);
    let mut _233: bool;
    let mut _234: bool;
    let _236: !;
    let mut _237: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _238: (&u64, &u64);
    let mut _239: &u64;
    let _240: u64;
    let mut _243: bool;
    let mut _244: bool;
    let mut _245: u64;
    let mut _246: u64;
    let _248: !;
    let mut _249: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _263: &u32;
    let mut _264: &isize;
    let mut _265: &isize;
    let mut _266: &isize;
    let mut _267: &Foo;
    let mut _268: &isize;
    let mut _269: &Foo;
    let mut _270: &isize;
    let mut _271: &Foo;
    let mut _272: &isize;
    let mut _273: &Foo;
    let mut _274: &isize;
    let mut _275: &[i32; 3];
    let mut _276: &[i32; 3];
    scope 1 {
        debug left_val => _11;
        debug right_val => _12;
        let _15: core::panicking::AssertKind;
        scope 2 {
            debug kind => _15;
        }
    }
    scope 3 {
        debug left_val => _21;
        debug right_val => _22;
        let _27: core::panicking::AssertKind;
        scope 4 {
            debug kind => _27;
        }
    }
    scope 5 {
        debug left_val => _33;
        debug right_val => _34;
        let _39: core::panicking::AssertKind;
        scope 6 {
            debug kind => _39;
        }
    }
    scope 7 {
        debug left_val => _45;
        debug right_val => _46;
        let _51: core::panicking::AssertKind;
        scope 8 {
            debug kind => _51;
        }
    }
    scope 9 {
        debug left_val => _58;
        debug right_val => _59;
        let _64: core::panicking::AssertKind;
        scope 10 {
            debug kind => _64;
        }
    }
    scope 11 {
        debug left_val => _70;
        debug right_val => _71;
        let _76: core::panicking::AssertKind;
        scope 12 {
            debug kind => _76;
        }
    }
    scope 13 {
        debug left_val => _82;
        debug right_val => _83;
        let _88: core::panicking::AssertKind;
        scope 14 {
            debug kind => _88;
        }
    }
    scope 15 {
        debug left_val => _94;
        debug right_val => _95;
        let _100: core::panicking::AssertKind;
        scope 16 {
            debug kind => _100;
        }
    }
    scope 17 {
        debug left_val => _106;
        debug right_val => _107;
        let _112: core::panicking::AssertKind;
        scope 18 {
            debug kind => _112;
        }
    }
    scope 19 {
        debug r => const 3_i32;
        let _116: [closure@ui/mir/mir_codegen_calls.rs:175:19: 175:35];
        scope 20 {
            debug closure => _116;
            let _122: &i32;
            let _123: &i32;
            let _135: &i32;
            let _136: &i32;
            let _144: &dyn std::ops::Fn(i32, i32) -> i32;
            let mut _261: &i32;
            let mut _262: &i32;
            scope 21 {
                debug left_val => _122;
                debug right_val => _123;
                let _128: core::panicking::AssertKind;
                scope 22 {
                    debug kind => _128;
                }
            }
            scope 23 {
                debug left_val => _135;
                debug right_val => _136;
                let _141: core::panicking::AssertKind;
                scope 24 {
                    debug kind => _141;
                }
            }
            scope 25 {
                debug function_object => _144;
                let _151: &i32;
                let _152: &i32;
                let _164: &i32;
                let _165: &i32;
                let _177: &i32;
                let _178: &i32;
                let _189: &i32;
                let _190: &i32;
                let _201: &[(); 1];
                let _202: &[(); 1];
                let _211: &();
                let _212: &();
                let _221: &(Foo, Foo);
                let _222: &(Foo, Foo);
                let _231: &(f32, f32);
                let _232: &(f32, f32);
                let _241: &u64;
                let _242: &u64;
                let mut _250: &u64;
                let mut _251: &(f32, f32);
                let mut _252: &((f32, f32), u32);
                let mut _253: &(Foo, Foo);
                let mut _254: &();
                let mut _255: &[(); 1];
                let mut _256: &i32;
                let mut _257: &[closure@ui/mir/mir_codegen_calls.rs:183:35: 183:37];
                let mut _258: &i32;
                let mut _259: &i32;
                let mut _260: &i32;
                scope 26 {
                    debug left_val => _151;
                    debug right_val => _152;
                    let _157: core::panicking::AssertKind;
                    scope 27 {
                        debug kind => _157;
                    }
                }
                scope 28 {
                    debug left_val => _164;
                    debug right_val => _165;
                    let _170: core::panicking::AssertKind;
                    scope 29 {
                        debug kind => _170;
                    }
                }
                scope 30 {
                    debug left_val => _177;
                    debug right_val => _178;
                    let _183: core::panicking::AssertKind;
                    scope 31 {
                        debug kind => _183;
                    }
                }
                scope 32 {
                    debug left_val => _189;
                    debug right_val => _190;
                    let _195: core::panicking::AssertKind;
                    scope 33 {
                        debug kind => _195;
                    }
                }
                scope 34 {
                    debug left_val => _201;
                    debug right_val => _202;
                    let _205: core::panicking::AssertKind;
                    scope 35 {
                        debug kind => _205;
                    }
                }
                scope 36 {
                    debug left_val => _211;
                    debug right_val => _212;
                    let _215: core::panicking::AssertKind;
                    scope 37 {
                        debug kind => _215;
                    }
                }
                scope 38 {
                    debug left_val => _221;
                    debug right_val => _222;
                    let _225: core::panicking::AssertKind;
                    scope 39 {
                        debug kind => _225;
                    }
                }
                scope 40 {
                    debug left_val => _231;
                    debug right_val => _232;
                    let _235: core::panicking::AssertKind;
                    scope 41 {
                        debug kind => _235;
                    }
                }
                scope 42 {
                    debug left_val => _241;
                    debug right_val => _242;
                    let _247: core::panicking::AssertKind;
                    scope 43 {
                        debug kind => _247;
                    }
                }
            }
        }
    }

    bb0: {
        _4 = (const 2_i32, const 3_i32);
        _276 = const _;
        _5 = _276 as &[i32] (Pointer(Unsize));
        _3 = test1(const 1_isize, move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _8 = (const 2_i32, const 3_i32);
        _275 = const _;
        _10 = <[i32; 3] as Index<RangeFull>>::index(_275, const RangeFull) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = _10;
        _7 = (const 1_isize, move _8, move _9);
        _6 = &_7;
        _1 = (move _2, move _6);
        _11 = (_1.0: &(isize, (i32, i32), &[i32]));
        _12 = (_1.1: &(isize, (i32, i32), &[i32]));
        _14 = <(isize, (i32, i32), &[i32]) as PartialEq>::eq(_11, _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<(isize, (i32, i32), &[i32]), (isize, (i32, i32), &[i32])>(move _15, _11, _12, move _17) -> unwind continue;
    }

    bb5: {
        _20 = test2(const 98_isize) -> [return: bb6, unwind continue];
    }

    bb6: {
        _19 = &_20;
        _274 = const _;
        _18 = (move _19, _274);
        _21 = (_18.0: &isize);
        _22 = (_18.1: &isize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<isize, isize>(move _27, _21, _22, move _29) -> unwind continue;
    }

    bb8: {
        _273 = const _;
        _32 = test3(_273, const 42_isize) -> [return: bb9, unwind continue];
    }

    bb9: {
        _31 = &_32;
        _272 = const _;
        _30 = (move _31, _272);
        _33 = (_30.0: &isize);
        _34 = (_30.1: &isize);
        _37 = (*_33);
        _38 = (*_34);
        _36 = Eq(move _37, move _38);
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _39 = core::panicking::AssertKind::Eq;
        _41 = Option::<Arguments<'_>>::None;
        _40 = core::panicking::assert_failed::<isize, isize>(move _39, _33, _34, move _41) -> unwind continue;
    }

    bb11: {
        _271 = const _;
        _44 = test4(_271, const 970_isize) -> [return: bb12, unwind continue];
    }

    bb12: {
        _43 = &_44;
        _270 = const _;
        _42 = (move _43, _270);
        _45 = (_42.0: &isize);
        _46 = (_42.1: &isize);
        _49 = (*_45);
        _50 = (*_46);
        _48 = Eq(move _49, move _50);
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<isize, isize>(move _51, _45, _46, move _53) -> unwind continue;
    }

    bb14: {
        _269 = const _;
        _57 = _269 as &dyn Bar (Pointer(Unsize));
        _56 = test5(move _57, const 8576_isize) -> [return: bb15, unwind continue];
    }

    bb15: {
        _55 = &_56;
        _268 = const _;
        _54 = (move _55, _268);
        _58 = (_54.0: &isize);
        _59 = (_54.1: &isize);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<isize, isize>(move _64, _58, _59, move _66) -> unwind continue;
    }

    bb17: {
        _267 = const _;
        _69 = test6::<Foo>(_267, const 12367_isize) -> [return: bb18, unwind continue];
    }

    bb18: {
        _68 = &_69;
        _266 = const _;
        _67 = (move _68, _266);
        _70 = (_67.0: &isize);
        _71 = (_67.1: &isize);
        _74 = (*_70);
        _75 = (*_71);
        _73 = Eq(move _74, move _75);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<isize, isize>(move _76, _70, _71, move _78) -> unwind continue;
    }

    bb20: {
        _81 = test7() -> [return: bb21, unwind continue];
    }

    bb21: {
        _80 = &_81;
        _265 = const _;
        _79 = (move _80, _265);
        _82 = (_79.0: &isize);
        _83 = (_79.1: &isize);
        _86 = (*_82);
        _87 = (*_83);
        _85 = Eq(move _86, move _87);
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _88 = core::panicking::AssertKind::Eq;
        _90 = Option::<Arguments<'_>>::None;
        _89 = core::panicking::assert_failed::<isize, isize>(move _88, _82, _83, move _90) -> unwind continue;
    }

    bb23: {
        _93 = test8() -> [return: bb24, unwind continue];
    }

    bb24: {
        _92 = &_93;
        _264 = const _;
        _91 = (move _92, _264);
        _94 = (_91.0: &isize);
        _95 = (_91.1: &isize);
        _98 = (*_94);
        _99 = (*_95);
        _97 = Eq(move _98, move _99);
        _96 = Not(move _97);
        switchInt(move _96) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _100 = core::panicking::AssertKind::Eq;
        _102 = Option::<Arguments<'_>>::None;
        _101 = core::panicking::assert_failed::<isize, isize>(move _100, _94, _95, move _102) -> unwind continue;
    }

    bb26: {
        _105 = test9() -> [return: bb27, unwind continue];
    }

    bb27: {
        _104 = &_105;
        _263 = const _;
        _103 = (move _104, _263);
        _106 = (_103.0: &u32);
        _107 = (_103.1: &u32);
        _110 = (*_106);
        _111 = (*_107);
        _109 = Eq(move _110, move _111);
        _108 = Not(move _109);
        switchInt(move _108) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _112 = core::panicking::AssertKind::Eq;
        _114 = Option::<Arguments<'_>>::None;
        _113 = core::panicking::assert_failed::<u32, u32>(move _112, _106, _107, move _114) -> unwind continue;
    }

    bb29: {
        _115 = const 3_i32;
        _117 = &_115;
        _116 = [closure@ui/mir/mir_codegen_calls.rs:175:19: 175:35] { r: move _117 };
        _121 = &_116;
        _120 = test_fn_const_call::<[closure@ui/mir/mir_codegen_calls.rs:175:19: 175:35]>(_121) -> [return: bb30, unwind continue];
    }

    bb30: {
        _119 = &_120;
        _262 = const _;
        _118 = (move _119, _262);
        _122 = (_118.0: &i32);
        _123 = (_118.1: &i32);
        _126 = (*_122);
        _127 = (*_123);
        _125 = Eq(move _126, move _127);
        _124 = Not(move _125);
        switchInt(move _124) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _128 = core::panicking::AssertKind::Eq;
        _130 = Option::<Arguments<'_>>::None;
        _129 = core::panicking::assert_failed::<i32, i32>(move _128, _122, _123, move _130) -> unwind continue;
    }

    bb32: {
        _134 = &_116;
        _133 = test_closure::<[closure@ui/mir/mir_codegen_calls.rs:175:19: 175:35]>(_134, const 100_i32, const 1_i32) -> [return: bb33, unwind continue];
    }

    bb33: {
        _132 = &_133;
        _261 = const _;
        _131 = (move _132, _261);
        _135 = (_131.0: &i32);
        _136 = (_131.1: &i32);
        _139 = (*_135);
        _140 = (*_136);
        _138 = Eq(move _139, move _140);
        _137 = Not(move _138);
        switchInt(move _137) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _141 = core::panicking::AssertKind::Eq;
        _143 = Option::<Arguments<'_>>::None;
        _142 = core::panicking::assert_failed::<i32, i32>(move _141, _135, _136, move _143) -> unwind continue;
    }

    bb35: {
        _146 = &_116;
        _145 = _146 as &dyn std::ops::Fn(i32, i32) -> i32 (Pointer(Unsize));
        _144 = _145;
        _150 = _144;
        _149 = test_fn_object(move _150, const 100_i32, const 2_i32) -> [return: bb36, unwind continue];
    }

    bb36: {
        _148 = &_149;
        _260 = const _;
        _147 = (move _148, _260);
        _151 = (_147.0: &i32);
        _152 = (_147.1: &i32);
        _155 = (*_151);
        _156 = (*_152);
        _154 = Eq(move _155, move _156);
        _153 = Not(move _154);
        switchInt(move _153) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _157 = core::panicking::AssertKind::Eq;
        _159 = Option::<Arguments<'_>>::None;
        _158 = core::panicking::assert_failed::<i32, i32>(move _157, _151, _152, move _159) -> unwind continue;
    }

    bb38: {
        _163 = &_144;
        _162 = test_fn_impl(_163, const 100_i32, const 3_i32) -> [return: bb39, unwind continue];
    }

    bb39: {
        _161 = &_162;
        _259 = const _;
        _160 = (move _161, _259);
        _164 = (_160.0: &i32);
        _165 = (_160.1: &i32);
        _168 = (*_164);
        _169 = (*_165);
        _167 = Eq(move _168, move _169);
        _166 = Not(move _167);
        switchInt(move _166) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        _170 = core::panicking::AssertKind::Eq;
        _172 = Option::<Arguments<'_>>::None;
        _171 = core::panicking::assert_failed::<i32, i32>(move _170, _164, _165, move _172) -> unwind continue;
    }

    bb41: {
        _176 = &_116;
        _175 = test_fn_direct_call::<[closure@ui/mir/mir_codegen_calls.rs:175:19: 175:35]>(_176, const 100_i32, const 4_i32) -> [return: bb42, unwind continue];
    }

    bb42: {
        _174 = &_175;
        _258 = const _;
        _173 = (move _174, _258);
        _177 = (_173.0: &i32);
        _178 = (_173.1: &i32);
        _181 = (*_177);
        _182 = (*_178);
        _180 = Eq(move _181, move _182);
        _179 = Not(move _180);
        switchInt(move _179) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _183 = core::panicking::AssertKind::Eq;
        _185 = Option::<Arguments<'_>>::None;
        _184 = core::panicking::assert_failed::<i32, i32>(move _183, _177, _178, move _185) -> unwind continue;
    }

    bb44: {
        _257 = const _;
        _188 = test_fn_nil_call::<[closure@ui/mir/mir_codegen_calls.rs:183:35: 183:37]>(_257) -> [return: bb45, unwind continue];
    }

    bb45: {
        _187 = &_188;
        _256 = const _;
        _186 = (move _187, _256);
        _189 = (_186.0: &i32);
        _190 = (_186.1: &i32);
        _193 = (*_189);
        _194 = (*_190);
        _192 = Eq(move _193, move _194);
        _191 = Not(move _192);
        switchInt(move _191) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _195 = core::panicking::AssertKind::Eq;
        _197 = Option::<Arguments<'_>>::None;
        _196 = core::panicking::assert_failed::<i32, i32>(move _195, _189, _190, move _197) -> unwind continue;
    }

    bb47: {
        _200 = test_fn_transmute_zst(const ()) -> [return: bb48, unwind continue];
    }

    bb48: {
        _199 = &_200;
        _255 = const _;
        _198 = (move _199, _255);
        _201 = (_198.0: &[(); 1]);
        _202 = (_198.1: &[(); 1]);
        _204 = <[(); 1] as PartialEq>::eq(_201, _202) -> [return: bb49, unwind continue];
    }

    bb49: {
        _203 = Not(move _204);
        switchInt(move _203) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _205 = core::panicking::AssertKind::Eq;
        _207 = Option::<Arguments<'_>>::None;
        _206 = core::panicking::assert_failed::<[(); 1], [(); 1]>(move _205, _201, _202, move _207) -> unwind continue;
    }

    bb51: {
        _210 = test_fn_ignored_pair_0() -> [return: bb52, unwind continue];
    }

    bb52: {
        _209 = &_210;
        _254 = const _;
        _208 = (move _209, _254);
        _211 = (_208.0: &());
        _212 = (_208.1: &());
        _214 = <() as PartialEq>::eq(_211, _212) -> [return: bb53, unwind continue];
    }

    bb53: {
        _213 = Not(move _214);
        switchInt(move _213) -> [0: bb55, otherwise: bb54];
    }

    bb54: {
        _215 = core::panicking::AssertKind::Eq;
        _217 = Option::<Arguments<'_>>::None;
        _216 = core::panicking::assert_failed::<(), ()>(move _215, _211, _212, move _217) -> unwind continue;
    }

    bb55: {
        _220 = test_fn_ignored_pair_named() -> [return: bb56, unwind continue];
    }

    bb56: {
        _219 = &_220;
        _253 = const _;
        _218 = (move _219, _253);
        _221 = (_218.0: &(Foo, Foo));
        _222 = (_218.1: &(Foo, Foo));
        _224 = <(Foo, Foo) as PartialEq>::eq(_221, _222) -> [return: bb57, unwind continue];
    }

    bb57: {
        _223 = Not(move _224);
        switchInt(move _223) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        _225 = core::panicking::AssertKind::Eq;
        _227 = Option::<Arguments<'_>>::None;
        _226 = core::panicking::assert_failed::<(Foo, Foo), (Foo, Foo)>(move _225, _221, _222, move _227) -> unwind continue;
    }

    bb59: {
        _252 = const _;
        _230 = test_fn_nested_pair(_252) -> [return: bb60, unwind continue];
    }

    bb60: {
        _229 = &_230;
        _251 = const _;
        _228 = (move _229, _251);
        _231 = (_228.0: &(f32, f32));
        _232 = (_228.1: &(f32, f32));
        _234 = <(f32, f32) as PartialEq>::eq(_231, _232) -> [return: bb61, unwind continue];
    }

    bb61: {
        _233 = Not(move _234);
        switchInt(move _233) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _235 = core::panicking::AssertKind::Eq;
        _237 = Option::<Arguments<'_>>::None;
        _236 = core::panicking::assert_failed::<(f32, f32), (f32, f32)>(move _235, _231, _232, move _237) -> unwind continue;
    }

    bb63: {
        _240 = test_fn_const_arg_by_ref(const _) -> [return: bb64, unwind continue];
    }

    bb64: {
        _239 = &_240;
        _250 = const _;
        _238 = (move _239, _250);
        _241 = (_238.0: &u64);
        _242 = (_238.1: &u64);
        _245 = (*_241);
        _246 = (*_242);
        _244 = Eq(move _245, move _246);
        _243 = Not(move _244);
        switchInt(move _243) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _247 = core::panicking::AssertKind::Eq;
        _249 = Option::<Arguments<'_>>::None;
        _248 = core::panicking::assert_failed::<u64, u64>(move _247, _241, _242, move _249) -> unwind continue;
    }

    bb66: {
        return;
    }
}

promoted[0] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;
    let mut _2: u64;
    let mut _3: u64;

    bb0: {
        _3 = Add(const 1_u64, const 2_u64);
        _2 = Add(move _3, const 3_u64);
        _1 = Add(move _2, const 4_u64);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &(f32, f32) = {
    let mut _0: &(f32, f32);
    let mut _1: (f32, f32);

    bb0: {
        _1 = (const 1f32, const 2f32);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &((f32, f32), u32) = {
    let mut _0: &((f32, f32), u32);
    let mut _1: ((f32, f32), u32);
    let mut _2: (f32, f32);

    bb0: {
        _2 = (const 1f32, const 2f32);
        _1 = (move _2, const 0_u32);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &(Foo, Foo) = {
    let mut _0: &(Foo, Foo);
    let mut _1: (Foo, Foo);
    let mut _2: Foo;
    let mut _3: Foo;

    bb0: {
        _2 = Foo;
        _3 = Foo;
        _1 = (move _2, move _3);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[(); 1] = {
    let mut _0: &[(); 1];
    let mut _1: [(); 1];
    let mut _2: ();

    bb0: {
        _2 = ();
        _1 = [move _2];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &[closure@ui/mir/mir_codegen_calls.rs:183:35: 183:37] = {
    let mut _0: &[closure@ui/mir/mir_codegen_calls.rs:183:35: 183:37];
    let mut _1: [closure@ui/mir/mir_codegen_calls.rs:183:35: 183:37];

    bb0: {
        _1 = [closure@ui/mir/mir_codegen_calls.rs:183:35: 183:37];
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 324_i32;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 318_i32;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 312_i32;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 306_i32;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 294_i32;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;
    let mut _2: u32;

    bb0: {
        _2 = Mul(const 42_u32, const 43_u32);
        _1 = Add(const 41_u32, move _2);
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 12367_isize;
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 8576_isize;
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 970_isize;
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 42_isize;
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 98_isize;
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];
    let mut _1: [i32; 3];

    bb0: {
        _1 = [const 4_i32, const 5_i32, const 6_i32];
        _0 = &_1;
        return;
    }
}

promoted[26] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];
    let mut _1: [i32; 3];

    bb0: {
        _1 = [const 4_i32, const 5_i32, const 6_i32];
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/mir/mir_codegen_calls.rs:175:19: 175:35], _2: i32, _3: i32) -> i32 {
    debug x => _2;
    debug y => _3;
    debug r => (*((*_1).0: &i32));
    let mut _0: i32;
    let mut _4: i32;
    let mut _5: i32;
    let mut _6: i32;
    let mut _7: &i32;

    bb0: {
        _7 = deref_copy ((*_1).0: &i32);
        _4 = (*_7);
        _6 = Mul(_3, const 2_i32);
        _5 = Add(_2, move _6);
        _0 = Mul(move _4, move _5);
        return;
    }
}

fn main::{closure#1}(_1: &[closure@ui/mir/mir_codegen_calls.rs:183:35: 183:37]) -> i32 {
    let mut _0: i32;

    bb0: {
        _0 = const 42_i32;
        return;
    }
}

const ARRAY: [u64; 4] = {
    let mut _0: [u64; 4];

    bb0: {
        _0 = [const 1_u64, const 2_u64, const 3_u64, const 4_u64];
        return;
    }
}

ARRAY::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}
