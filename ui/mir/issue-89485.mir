// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Type::A::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/mir/issue-89485.rs:7:9: 7:10

    bb0: {
        _0 = const 1_isize;              // scope 0 at ui/mir/issue-89485.rs:7:9: 7:10
        return;                          // scope 0 at ui/mir/issue-89485.rs:7:9: 7:10
    }
}

Type::B::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/mir/issue-89485.rs:8:9: 8:10

    bb0: {
        _0 = const 2_isize;              // scope 0 at ui/mir/issue-89485.rs:8:9: 8:10
        return;                          // scope 0 at ui/mir/issue-89485.rs:8:9: 8:10
    }
}

fn <impl at ui/mir/issue-89485.rs:5:10: 5:15>::fmt(_1: &Type, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/mir/issue-89485.rs:5:10: 5:15
    debug f => _2;                       // in scope 0 at ui/mir/issue-89485.rs:5:10: 5:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/mir/issue-89485.rs:5:10: 5:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/mir/issue-89485.rs:5:10: 5:15
    let mut _4: &str;                    // in scope 0 at ui/mir/issue-89485.rs:5:10: 5:15
    let mut _5: isize;                   // in scope 0 at ui/mir/issue-89485.rs:5:10: 5:15
    let _6: &str;                        // in scope 0 at ui/mir/issue-89485.rs:5:10: 5:15
    let _7: &str;                        // in scope 0 at ui/mir/issue-89485.rs:5:10: 5:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/mir/issue-89485.rs:5:10: 5:15
        _5 = discriminant((*_1));        // scope 0 at ui/mir/issue-89485.rs:5:10: 5:15
        switchInt(move _5) -> [1: bb3, 2: bb1, otherwise: bb2]; // scope 0 at ui/mir/issue-89485.rs:5:10: 5:15
    }

    bb1: {
        _7 = const "B";                  // scope 0 at ui/mir/issue-89485.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/mir/issue-89485.rs:5:10: 5:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _7;                         // scope 0 at ui/mir/issue-89485.rs:5:10: 5:15
        goto -> bb4;                     // scope 0 at ui/mir/issue-89485.rs:5:14: 5:15
    }

    bb2: {
        unreachable;                     // scope 0 at ui/mir/issue-89485.rs:5:10: 5:15
    }

    bb3: {
        _6 = const "A";                  // scope 0 at ui/mir/issue-89485.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/mir/issue-89485.rs:5:10: 5:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _6;                         // scope 0 at ui/mir/issue-89485.rs:5:10: 5:15
        goto -> bb4;                     // scope 0 at ui/mir/issue-89485.rs:5:14: 5:15
    }

    bb4: {
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb5; // scope 0 at ui/mir/issue-89485.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/mir/issue-89485.rs:5:10: 5:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/mir/issue-89485.rs:5:15: 5:15
    }
}

fn <impl at ui/mir/issue-89485.rs:5:17: 5:19>::assert_receiver_is_total_eq(_1: &Type) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/issue-89485.rs:5:17: 5:19
    let mut _0: ();                      // return place in scope 0 at ui/mir/issue-89485.rs:5:17: 5:19

    bb0: {
        return;                          // scope 0 at ui/mir/issue-89485.rs:5:19: 5:19
    }
}

fn <impl at ui/mir/issue-89485.rs:5:21: 5:30>::eq(_1: &Type, _2: &Type) -> bool {
    debug self => _1;                    // in scope 0 at ui/mir/issue-89485.rs:5:21: 5:30
    debug other => _2;                   // in scope 0 at ui/mir/issue-89485.rs:5:21: 5:30
    let mut _0: bool;                    // return place in scope 0 at ui/mir/issue-89485.rs:5:21: 5:30
    let _3: isize;                       // in scope 0 at ui/mir/issue-89485.rs:5:21: 5:30
    let mut _4: &Type;                   // in scope 0 at ui/mir/issue-89485.rs:5:21: 5:30
    let mut _6: &Type;                   // in scope 0 at ui/mir/issue-89485.rs:5:21: 5:30
    let mut _7: isize;                   // in scope 0 at ui/mir/issue-89485.rs:5:21: 5:30
    let mut _8: isize;                   // in scope 0 at ui/mir/issue-89485.rs:5:21: 5:30
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/mir/issue-89485.rs:5:21: 5:30
        let _5: isize;                   // in scope 1 at ui/mir/issue-89485.rs:5:21: 5:30
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/mir/issue-89485.rs:5:21: 5:30
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/mir/issue-89485.rs:5:21: 5:30
        _3 = discriminant((*_4));        // scope 0 at ui/mir/issue-89485.rs:5:21: 5:30
        _6 = _2;                         // scope 1 at ui/mir/issue-89485.rs:5:21: 5:30
        _5 = discriminant((*_6));        // scope 1 at ui/mir/issue-89485.rs:5:21: 5:30
        _7 = _3;                         // scope 2 at ui/mir/issue-89485.rs:5:21: 5:30
        _8 = _5;                         // scope 2 at ui/mir/issue-89485.rs:5:21: 5:30
        _0 = Eq(move _7, move _8);       // scope 2 at ui/mir/issue-89485.rs:5:21: 5:30
        return;                          // scope 0 at ui/mir/issue-89485.rs:5:30: 5:30
    }
}

fn encode(_1: Type) -> Type {
    debug v => _1;                       // in scope 0 at ui/mir/issue-89485.rs:10:15: 10:16
    let mut _0: Type;                    // return place in scope 0 at ui/mir/issue-89485.rs:10:27: 10:31
    let mut _2: isize;                   // in scope 0 at ui/mir/issue-89485.rs:12:9: 12:16

    bb0: {
        _2 = discriminant(_1);           // scope 0 at ui/mir/issue-89485.rs:11:11: 11:12
        switchInt(move _2) -> [1: bb2, otherwise: bb1]; // scope 0 at ui/mir/issue-89485.rs:11:5: 11:12
    }

    bb1: {
        _0 = move _1;                    // scope 0 at ui/mir/issue-89485.rs:13:14: 13:15
        goto -> bb3;                     // scope 0 at ui/mir/issue-89485.rs:13:14: 13:15
    }

    bb2: {
        _0 = const Type::B;              // scope 0 at ui/mir/issue-89485.rs:12:20: 12:27
                                         // mir::Constant
                                         // + span: ui/mir/issue-89485.rs:12:20: 12:27
                                         // + literal: Const { ty: Type, val: Value(Scalar(0x02)) }
        goto -> bb3;                     // scope 0 at ui/mir/issue-89485.rs:12:20: 12:27
    }

    bb3: {
        return;                          // scope 0 at ui/mir/issue-89485.rs:15:2: 15:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/issue-89485.rs:16:11: 16:11
    let mut _1: (&Type, &Type);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &Type;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &Type;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: Type;                        // in scope 0 at ui/mir/issue-89485.rs:17:23: 17:38
    let mut _5: Type;                    // in scope 0 at ui/mir/issue-89485.rs:17:30: 17:37
    let _6: &Type;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &Type;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &Type;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &Type;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &Type;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &Type;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &Type;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &Type;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: &Type;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _20 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Type, val: Unevaluated(main, [], Some(promoted[0])) }
        _2 = _20;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _5 = const Type::A;              // scope 0 at ui/mir/issue-89485.rs:17:30: 17:37
                                         // mir::Constant
                                         // + span: ui/mir/issue-89485.rs:17:30: 17:37
                                         // + literal: Const { ty: Type, val: Value(Scalar(0x01)) }
        _4 = encode(move _5) -> bb1;     // scope 0 at ui/mir/issue-89485.rs:17:23: 17:38
                                         // mir::Constant
                                         // + span: ui/mir/issue-89485.rs:17:23: 17:29
                                         // + literal: Const { ty: fn(Type) -> Type {encode}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_1.0: &Type);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_1.1: &Type);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <Type as PartialEq>::eq(move _10, move _11) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Type, &'b Type) -> bool {<Type as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<Type, Type>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Type, &'b Type, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Type, Type>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/mir/issue-89485.rs:18:2: 18:2
    }
}

promoted[0] in main: &Type = {
    let mut _0: &Type;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: Type;                    // in scope 0 at ui/mir/issue-89485.rs:17:14: 17:21

    bb0: {
        _1 = Type::B;                    // scope 0 at ui/mir/issue-89485.rs:17:14: 17:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}
