// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [closure@ui/mir/mir_match_test.rs:6:22: 6:28];
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let _4: i32;
    let mut _5: &[closure@ui/mir/mir_match_test.rs:6:22: 6:28];
    let mut _6: (i32, bool);
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&i32, &i32);
    let mut _17: &i32;
    let _18: i32;
    let mut _19: &[closure@ui/mir/mir_match_test.rs:6:22: 6:28];
    let mut _20: (i32, bool);
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: i32;
    let mut _26: i32;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: (&i32, &i32);
    let mut _31: &i32;
    let _32: i32;
    let mut _33: &[closure@ui/mir/mir_match_test.rs:6:22: 6:28];
    let mut _34: (i32, bool);
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: i32;
    let mut _40: i32;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _44: (&i32, &i32);
    let mut _45: &i32;
    let _46: i32;
    let mut _47: &[closure@ui/mir/mir_match_test.rs:6:22: 6:28];
    let mut _48: (i32, bool);
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: i32;
    let mut _54: i32;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _59: (&i32, &i32);
    let mut _60: &i32;
    let _61: i32;
    let mut _62: &[closure@ui/mir/mir_match_test.rs:19:22: 19:28];
    let mut _63: (i32, bool);
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: i32;
    let mut _69: i32;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&i32, &i32);
    let mut _74: &i32;
    let _75: i32;
    let mut _76: &[closure@ui/mir/mir_match_test.rs:19:22: 19:28];
    let mut _77: (i32, bool);
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: i32;
    let mut _83: i32;
    let _85: !;
    let mut _86: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _87: (&i32, &i32);
    let mut _88: &i32;
    let _89: i32;
    let mut _90: &[closure@ui/mir/mir_match_test.rs:19:22: 19:28];
    let mut _91: (i32, bool);
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: i32;
    let mut _97: i32;
    let _99: !;
    let mut _100: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _101: (&i32, &i32);
    let mut _102: &i32;
    let _103: i32;
    let mut _104: &[closure@ui/mir/mir_match_test.rs:19:22: 19:28];
    let mut _105: (i32, bool);
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: i32;
    let mut _111: i32;
    let _113: !;
    let mut _114: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _116: (&i32, &i32);
    let mut _117: &i32;
    let _118: i32;
    let mut _119: &[closure@ui/mir/mir_match_test.rs:32:31: 32:37];
    let mut _120: (i32, bool);
    let mut _123: bool;
    let mut _124: bool;
    let mut _125: i32;
    let mut _126: i32;
    let _128: !;
    let mut _129: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _130: (&i32, &i32);
    let mut _131: &i32;
    let _132: i32;
    let mut _133: &[closure@ui/mir/mir_match_test.rs:32:31: 32:37];
    let mut _134: (i32, bool);
    let mut _137: bool;
    let mut _138: bool;
    let mut _139: i32;
    let mut _140: i32;
    let _142: !;
    let mut _143: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _144: (&i32, &i32);
    let mut _145: &i32;
    let _146: i32;
    let mut _147: &[closure@ui/mir/mir_match_test.rs:32:31: 32:37];
    let mut _148: (i32, bool);
    let mut _151: bool;
    let mut _152: bool;
    let mut _153: i32;
    let mut _154: i32;
    let _156: !;
    let mut _157: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _158: (&i32, &i32);
    let mut _159: &i32;
    let _160: i32;
    let mut _161: &[closure@ui/mir/mir_match_test.rs:32:31: 32:37];
    let mut _162: (i32, bool);
    let mut _165: bool;
    let mut _166: bool;
    let mut _167: i32;
    let mut _168: i32;
    let _170: !;
    let mut _171: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _172: (&i32, &i32);
    let mut _173: &i32;
    let _174: i32;
    let mut _175: &[closure@ui/mir/mir_match_test.rs:32:31: 32:37];
    let mut _176: (i32, bool);
    let mut _179: bool;
    let mut _180: bool;
    let mut _181: i32;
    let mut _182: i32;
    let _184: !;
    let mut _185: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _186: (&i32, &i32);
    let mut _187: &i32;
    let _188: i32;
    let mut _189: &[closure@ui/mir/mir_match_test.rs:32:31: 32:37];
    let mut _190: (i32, bool);
    let mut _193: bool;
    let mut _194: bool;
    let mut _195: i32;
    let mut _196: i32;
    let _198: !;
    let mut _199: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _201: (&i32, &i32);
    let mut _202: &i32;
    let _203: i32;
    let mut _204: &[closure@ui/mir/mir_match_test.rs:47:31: 47:37];
    let mut _205: (i32, bool);
    let mut _208: bool;
    let mut _209: bool;
    let mut _210: i32;
    let mut _211: i32;
    let _213: !;
    let mut _214: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _215: (&i32, &i32);
    let mut _216: &i32;
    let _217: i32;
    let mut _218: &[closure@ui/mir/mir_match_test.rs:47:31: 47:37];
    let mut _219: (i32, bool);
    let mut _222: bool;
    let mut _223: bool;
    let mut _224: i32;
    let mut _225: i32;
    let _227: !;
    let mut _228: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _229: (&i32, &i32);
    let mut _230: &i32;
    let _231: i32;
    let mut _232: &[closure@ui/mir/mir_match_test.rs:47:31: 47:37];
    let mut _233: (i32, bool);
    let mut _236: bool;
    let mut _237: bool;
    let mut _238: i32;
    let mut _239: i32;
    let _241: !;
    let mut _242: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _243: (&i32, &i32);
    let mut _244: &i32;
    let _245: i32;
    let mut _246: &[closure@ui/mir/mir_match_test.rs:47:31: 47:37];
    let mut _247: (i32, bool);
    let mut _250: bool;
    let mut _251: bool;
    let mut _252: i32;
    let mut _253: i32;
    let _255: !;
    let mut _256: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _257: (&i32, &i32);
    let mut _258: &i32;
    let _259: i32;
    let mut _260: &[closure@ui/mir/mir_match_test.rs:47:31: 47:37];
    let mut _261: (i32, bool);
    let mut _264: bool;
    let mut _265: bool;
    let mut _266: i32;
    let mut _267: i32;
    let _269: !;
    let mut _270: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _271: (&i32, &i32);
    let mut _272: &i32;
    let _273: i32;
    let mut _274: &[closure@ui/mir/mir_match_test.rs:47:31: 47:37];
    let mut _275: (i32, bool);
    let mut _278: bool;
    let mut _279: bool;
    let mut _280: i32;
    let mut _281: i32;
    let _283: !;
    let mut _284: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _286: (&i32, &i32);
    let mut _287: &i32;
    let _288: i32;
    let mut _289: &[closure@ui/mir/mir_match_test.rs:62:31: 62:37];
    let mut _290: (i32, bool);
    let mut _293: bool;
    let mut _294: bool;
    let mut _295: i32;
    let mut _296: i32;
    let _298: !;
    let mut _299: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _300: (&i32, &i32);
    let mut _301: &i32;
    let _302: i32;
    let mut _303: &[closure@ui/mir/mir_match_test.rs:62:31: 62:37];
    let mut _304: (i32, bool);
    let mut _307: bool;
    let mut _308: bool;
    let mut _309: i32;
    let mut _310: i32;
    let _312: !;
    let mut _313: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _315: (&i32, &i32);
    let mut _316: &i32;
    let _317: i32;
    let mut _318: &[closure@ui/mir/mir_match_test.rs:73:31: 73:37];
    let mut _319: (i32, bool);
    let mut _322: bool;
    let mut _323: bool;
    let mut _324: i32;
    let mut _325: i32;
    let _327: !;
    let mut _328: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _329: (&i32, &i32);
    let mut _330: &i32;
    let _331: i32;
    let mut _332: &[closure@ui/mir/mir_match_test.rs:73:31: 73:37];
    let mut _333: (i32, bool);
    let mut _336: bool;
    let mut _337: bool;
    let mut _338: i32;
    let mut _339: i32;
    let _341: !;
    let mut _342: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug incl_range => const ZeroSized: [closure@ui/mir/mir_match_test.rs:6:22: 6:28];
        let _7: &i32;
        let _8: &i32;
        let _21: &i32;
        let _22: &i32;
        let _35: &i32;
        let _36: &i32;
        let _49: &i32;
        let _50: &i32;
        let _58: [closure@ui/mir/mir_match_test.rs:19:22: 19:28];
        let mut _363: &i32;
        let mut _364: &i32;
        let mut _365: &i32;
        let mut _366: &i32;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
        scope 4 {
            debug left_val => _21;
            debug right_val => _22;
            let _27: core::panicking::AssertKind;
            scope 5 {
                debug kind => _27;
            }
        }
        scope 6 {
            debug left_val => _35;
            debug right_val => _36;
            let _41: core::panicking::AssertKind;
            scope 7 {
                debug kind => _41;
            }
        }
        scope 8 {
            debug left_val => _49;
            debug right_val => _50;
            let _55: core::panicking::AssertKind;
            scope 9 {
                debug kind => _55;
            }
        }
        scope 10 {
            debug excl_range => const ZeroSized: [closure@ui/mir/mir_match_test.rs:19:22: 19:28];
            let _64: &i32;
            let _65: &i32;
            let _78: &i32;
            let _79: &i32;
            let _92: &i32;
            let _93: &i32;
            let _106: &i32;
            let _107: &i32;
            let _115: [closure@ui/mir/mir_match_test.rs:32:31: 32:37];
            let mut _359: &i32;
            let mut _360: &i32;
            let mut _361: &i32;
            let mut _362: &i32;
            scope 11 {
                debug left_val => _64;
                debug right_val => _65;
                let _70: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _70;
                }
            }
            scope 13 {
                debug left_val => _78;
                debug right_val => _79;
                let _84: core::panicking::AssertKind;
                scope 14 {
                    debug kind => _84;
                }
            }
            scope 15 {
                debug left_val => _92;
                debug right_val => _93;
                let _98: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _98;
                }
            }
            scope 17 {
                debug left_val => _106;
                debug right_val => _107;
                let _112: core::panicking::AssertKind;
                scope 18 {
                    debug kind => _112;
                }
            }
            scope 19 {
                debug incl_range_vs_const => const ZeroSized: [closure@ui/mir/mir_match_test.rs:32:31: 32:37];
                let _121: &i32;
                let _122: &i32;
                let _135: &i32;
                let _136: &i32;
                let _149: &i32;
                let _150: &i32;
                let _163: &i32;
                let _164: &i32;
                let _177: &i32;
                let _178: &i32;
                let _191: &i32;
                let _192: &i32;
                let _200: [closure@ui/mir/mir_match_test.rs:47:31: 47:37];
                let mut _353: &i32;
                let mut _354: &i32;
                let mut _355: &i32;
                let mut _356: &i32;
                let mut _357: &i32;
                let mut _358: &i32;
                scope 20 {
                    debug left_val => _121;
                    debug right_val => _122;
                    let _127: core::panicking::AssertKind;
                    scope 21 {
                        debug kind => _127;
                    }
                }
                scope 22 {
                    debug left_val => _135;
                    debug right_val => _136;
                    let _141: core::panicking::AssertKind;
                    scope 23 {
                        debug kind => _141;
                    }
                }
                scope 24 {
                    debug left_val => _149;
                    debug right_val => _150;
                    let _155: core::panicking::AssertKind;
                    scope 25 {
                        debug kind => _155;
                    }
                }
                scope 26 {
                    debug left_val => _163;
                    debug right_val => _164;
                    let _169: core::panicking::AssertKind;
                    scope 27 {
                        debug kind => _169;
                    }
                }
                scope 28 {
                    debug left_val => _177;
                    debug right_val => _178;
                    let _183: core::panicking::AssertKind;
                    scope 29 {
                        debug kind => _183;
                    }
                }
                scope 30 {
                    debug left_val => _191;
                    debug right_val => _192;
                    let _197: core::panicking::AssertKind;
                    scope 31 {
                        debug kind => _197;
                    }
                }
                scope 32 {
                    debug excl_range_vs_const => const ZeroSized: [closure@ui/mir/mir_match_test.rs:47:31: 47:37];
                    let _206: &i32;
                    let _207: &i32;
                    let _220: &i32;
                    let _221: &i32;
                    let _234: &i32;
                    let _235: &i32;
                    let _248: &i32;
                    let _249: &i32;
                    let _262: &i32;
                    let _263: &i32;
                    let _276: &i32;
                    let _277: &i32;
                    let _285: [closure@ui/mir/mir_match_test.rs:62:31: 62:37];
                    let mut _347: &i32;
                    let mut _348: &i32;
                    let mut _349: &i32;
                    let mut _350: &i32;
                    let mut _351: &i32;
                    let mut _352: &i32;
                    scope 33 {
                        debug left_val => _206;
                        debug right_val => _207;
                        let _212: core::panicking::AssertKind;
                        scope 34 {
                            debug kind => _212;
                        }
                    }
                    scope 35 {
                        debug left_val => _220;
                        debug right_val => _221;
                        let _226: core::panicking::AssertKind;
                        scope 36 {
                            debug kind => _226;
                        }
                    }
                    scope 37 {
                        debug left_val => _234;
                        debug right_val => _235;
                        let _240: core::panicking::AssertKind;
                        scope 38 {
                            debug kind => _240;
                        }
                    }
                    scope 39 {
                        debug left_val => _248;
                        debug right_val => _249;
                        let _254: core::panicking::AssertKind;
                        scope 40 {
                            debug kind => _254;
                        }
                    }
                    scope 41 {
                        debug left_val => _262;
                        debug right_val => _263;
                        let _268: core::panicking::AssertKind;
                        scope 42 {
                            debug kind => _268;
                        }
                    }
                    scope 43 {
                        debug left_val => _276;
                        debug right_val => _277;
                        let _282: core::panicking::AssertKind;
                        scope 44 {
                            debug kind => _282;
                        }
                    }
                    scope 45 {
                        debug const_vs_incl_range => const ZeroSized: [closure@ui/mir/mir_match_test.rs:62:31: 62:37];
                        let _291: &i32;
                        let _292: &i32;
                        let _305: &i32;
                        let _306: &i32;
                        let _314: [closure@ui/mir/mir_match_test.rs:73:31: 73:37];
                        let mut _345: &i32;
                        let mut _346: &i32;
                        scope 46 {
                            debug left_val => _291;
                            debug right_val => _292;
                            let _297: core::panicking::AssertKind;
                            scope 47 {
                                debug kind => _297;
                            }
                        }
                        scope 48 {
                            debug left_val => _305;
                            debug right_val => _306;
                            let _311: core::panicking::AssertKind;
                            scope 49 {
                                debug kind => _311;
                            }
                        }
                        scope 50 {
                            debug const_vs_excl_range => const ZeroSized: [closure@ui/mir/mir_match_test.rs:73:31: 73:37];
                            let _320: &i32;
                            let _321: &i32;
                            let _334: &i32;
                            let _335: &i32;
                            let mut _343: &i32;
                            let mut _344: &i32;
                            scope 51 {
                                debug left_val => _320;
                                debug right_val => _321;
                                let _326: core::panicking::AssertKind;
                                scope 52 {
                                    debug kind => _326;
                                }
                            }
                            scope 53 {
                                debug left_val => _334;
                                debug right_val => _335;
                                let _340: core::panicking::AssertKind;
                                scope 54 {
                                    debug kind => _340;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _5 = &_1;
        _6 = (const 3_i32, const false);
        _4 = <[closure@ui/mir/mir_match_test.rs:6:22: 6:28] as Fn<(i32, bool)>>::call(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _366 = const _;
        _2 = (move _3, _366);
        _7 = (_2.0: &i32);
        _8 = (_2.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i32, i32>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb3: {
        _19 = &_1;
        _20 = (const 3_i32, const true);
        _18 = <[closure@ui/mir/mir_match_test.rs:6:22: 6:28] as Fn<(i32, bool)>>::call(move _19, move _20) -> [return: bb4, unwind continue];
    }

    bb4: {
        _17 = &_18;
        _365 = const _;
        _16 = (move _17, _365);
        _21 = (_16.0: &i32);
        _22 = (_16.1: &i32);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<i32, i32>(move _27, _21, _22, move _29) -> unwind continue;
    }

    bb6: {
        _33 = &_1;
        _34 = (const 5_i32, const false);
        _32 = <[closure@ui/mir/mir_match_test.rs:6:22: 6:28] as Fn<(i32, bool)>>::call(move _33, move _34) -> [return: bb7, unwind continue];
    }

    bb7: {
        _31 = &_32;
        _364 = const _;
        _30 = (move _31, _364);
        _35 = (_30.0: &i32);
        _36 = (_30.1: &i32);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<i32, i32>(move _41, _35, _36, move _43) -> unwind continue;
    }

    bb9: {
        _47 = &_1;
        _48 = (const 5_i32, const true);
        _46 = <[closure@ui/mir/mir_match_test.rs:6:22: 6:28] as Fn<(i32, bool)>>::call(move _47, move _48) -> [return: bb10, unwind continue];
    }

    bb10: {
        _45 = &_46;
        _363 = const _;
        _44 = (move _45, _363);
        _49 = (_44.0: &i32);
        _50 = (_44.1: &i32);
        _53 = (*_49);
        _54 = (*_50);
        _52 = Eq(move _53, move _54);
        _51 = Not(move _52);
        switchInt(move _51) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<i32, i32>(move _55, _49, _50, move _57) -> unwind continue;
    }

    bb12: {
        _62 = &_58;
        _63 = (const 3_i32, const false);
        _61 = <[closure@ui/mir/mir_match_test.rs:19:22: 19:28] as Fn<(i32, bool)>>::call(move _62, move _63) -> [return: bb13, unwind continue];
    }

    bb13: {
        _60 = &_61;
        _362 = const _;
        _59 = (move _60, _362);
        _64 = (_59.0: &i32);
        _65 = (_59.1: &i32);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<i32, i32>(move _70, _64, _65, move _72) -> unwind continue;
    }

    bb15: {
        _76 = &_58;
        _77 = (const 3_i32, const true);
        _75 = <[closure@ui/mir/mir_match_test.rs:19:22: 19:28] as Fn<(i32, bool)>>::call(move _76, move _77) -> [return: bb16, unwind continue];
    }

    bb16: {
        _74 = &_75;
        _361 = const _;
        _73 = (move _74, _361);
        _78 = (_73.0: &i32);
        _79 = (_73.1: &i32);
        _82 = (*_78);
        _83 = (*_79);
        _81 = Eq(move _82, move _83);
        _80 = Not(move _81);
        switchInt(move _80) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _84 = core::panicking::AssertKind::Eq;
        _86 = Option::<Arguments<'_>>::None;
        _85 = core::panicking::assert_failed::<i32, i32>(move _84, _78, _79, move _86) -> unwind continue;
    }

    bb18: {
        _90 = &_58;
        _91 = (const 5_i32, const false);
        _89 = <[closure@ui/mir/mir_match_test.rs:19:22: 19:28] as Fn<(i32, bool)>>::call(move _90, move _91) -> [return: bb19, unwind continue];
    }

    bb19: {
        _88 = &_89;
        _360 = const _;
        _87 = (move _88, _360);
        _92 = (_87.0: &i32);
        _93 = (_87.1: &i32);
        _96 = (*_92);
        _97 = (*_93);
        _95 = Eq(move _96, move _97);
        _94 = Not(move _95);
        switchInt(move _94) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _98 = core::panicking::AssertKind::Eq;
        _100 = Option::<Arguments<'_>>::None;
        _99 = core::panicking::assert_failed::<i32, i32>(move _98, _92, _93, move _100) -> unwind continue;
    }

    bb21: {
        _104 = &_58;
        _105 = (const 5_i32, const true);
        _103 = <[closure@ui/mir/mir_match_test.rs:19:22: 19:28] as Fn<(i32, bool)>>::call(move _104, move _105) -> [return: bb22, unwind continue];
    }

    bb22: {
        _102 = &_103;
        _359 = const _;
        _101 = (move _102, _359);
        _106 = (_101.0: &i32);
        _107 = (_101.1: &i32);
        _110 = (*_106);
        _111 = (*_107);
        _109 = Eq(move _110, move _111);
        _108 = Not(move _109);
        switchInt(move _108) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _112 = core::panicking::AssertKind::Eq;
        _114 = Option::<Arguments<'_>>::None;
        _113 = core::panicking::assert_failed::<i32, i32>(move _112, _106, _107, move _114) -> unwind continue;
    }

    bb24: {
        _119 = &_115;
        _120 = (const 5_i32, const false);
        _118 = <[closure@ui/mir/mir_match_test.rs:32:31: 32:37] as Fn<(i32, bool)>>::call(move _119, move _120) -> [return: bb25, unwind continue];
    }

    bb25: {
        _117 = &_118;
        _358 = const _;
        _116 = (move _117, _358);
        _121 = (_116.0: &i32);
        _122 = (_116.1: &i32);
        _125 = (*_121);
        _126 = (*_122);
        _124 = Eq(move _125, move _126);
        _123 = Not(move _124);
        switchInt(move _123) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _127 = core::panicking::AssertKind::Eq;
        _129 = Option::<Arguments<'_>>::None;
        _128 = core::panicking::assert_failed::<i32, i32>(move _127, _121, _122, move _129) -> unwind continue;
    }

    bb27: {
        _133 = &_115;
        _134 = (const 5_i32, const true);
        _132 = <[closure@ui/mir/mir_match_test.rs:32:31: 32:37] as Fn<(i32, bool)>>::call(move _133, move _134) -> [return: bb28, unwind continue];
    }

    bb28: {
        _131 = &_132;
        _357 = const _;
        _130 = (move _131, _357);
        _135 = (_130.0: &i32);
        _136 = (_130.1: &i32);
        _139 = (*_135);
        _140 = (*_136);
        _138 = Eq(move _139, move _140);
        _137 = Not(move _138);
        switchInt(move _137) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _141 = core::panicking::AssertKind::Eq;
        _143 = Option::<Arguments<'_>>::None;
        _142 = core::panicking::assert_failed::<i32, i32>(move _141, _135, _136, move _143) -> unwind continue;
    }

    bb30: {
        _147 = &_115;
        _148 = (const 3_i32, const false);
        _146 = <[closure@ui/mir/mir_match_test.rs:32:31: 32:37] as Fn<(i32, bool)>>::call(move _147, move _148) -> [return: bb31, unwind continue];
    }

    bb31: {
        _145 = &_146;
        _356 = const _;
        _144 = (move _145, _356);
        _149 = (_144.0: &i32);
        _150 = (_144.1: &i32);
        _153 = (*_149);
        _154 = (*_150);
        _152 = Eq(move _153, move _154);
        _151 = Not(move _152);
        switchInt(move _151) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _155 = core::panicking::AssertKind::Eq;
        _157 = Option::<Arguments<'_>>::None;
        _156 = core::panicking::assert_failed::<i32, i32>(move _155, _149, _150, move _157) -> unwind continue;
    }

    bb33: {
        _161 = &_115;
        _162 = (const 3_i32, const true);
        _160 = <[closure@ui/mir/mir_match_test.rs:32:31: 32:37] as Fn<(i32, bool)>>::call(move _161, move _162) -> [return: bb34, unwind continue];
    }

    bb34: {
        _159 = &_160;
        _355 = const _;
        _158 = (move _159, _355);
        _163 = (_158.0: &i32);
        _164 = (_158.1: &i32);
        _167 = (*_163);
        _168 = (*_164);
        _166 = Eq(move _167, move _168);
        _165 = Not(move _166);
        switchInt(move _165) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _169 = core::panicking::AssertKind::Eq;
        _171 = Option::<Arguments<'_>>::None;
        _170 = core::panicking::assert_failed::<i32, i32>(move _169, _163, _164, move _171) -> unwind continue;
    }

    bb36: {
        _175 = &_115;
        _176 = (const 7_i32, const false);
        _174 = <[closure@ui/mir/mir_match_test.rs:32:31: 32:37] as Fn<(i32, bool)>>::call(move _175, move _176) -> [return: bb37, unwind continue];
    }

    bb37: {
        _173 = &_174;
        _354 = const _;
        _172 = (move _173, _354);
        _177 = (_172.0: &i32);
        _178 = (_172.1: &i32);
        _181 = (*_177);
        _182 = (*_178);
        _180 = Eq(move _181, move _182);
        _179 = Not(move _180);
        switchInt(move _179) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _183 = core::panicking::AssertKind::Eq;
        _185 = Option::<Arguments<'_>>::None;
        _184 = core::panicking::assert_failed::<i32, i32>(move _183, _177, _178, move _185) -> unwind continue;
    }

    bb39: {
        _189 = &_115;
        _190 = (const 7_i32, const true);
        _188 = <[closure@ui/mir/mir_match_test.rs:32:31: 32:37] as Fn<(i32, bool)>>::call(move _189, move _190) -> [return: bb40, unwind continue];
    }

    bb40: {
        _187 = &_188;
        _353 = const _;
        _186 = (move _187, _353);
        _191 = (_186.0: &i32);
        _192 = (_186.1: &i32);
        _195 = (*_191);
        _196 = (*_192);
        _194 = Eq(move _195, move _196);
        _193 = Not(move _194);
        switchInt(move _193) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _197 = core::panicking::AssertKind::Eq;
        _199 = Option::<Arguments<'_>>::None;
        _198 = core::panicking::assert_failed::<i32, i32>(move _197, _191, _192, move _199) -> unwind continue;
    }

    bb42: {
        _204 = &_200;
        _205 = (const 5_i32, const false);
        _203 = <[closure@ui/mir/mir_match_test.rs:47:31: 47:37] as Fn<(i32, bool)>>::call(move _204, move _205) -> [return: bb43, unwind continue];
    }

    bb43: {
        _202 = &_203;
        _352 = const _;
        _201 = (move _202, _352);
        _206 = (_201.0: &i32);
        _207 = (_201.1: &i32);
        _210 = (*_206);
        _211 = (*_207);
        _209 = Eq(move _210, move _211);
        _208 = Not(move _209);
        switchInt(move _208) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _212 = core::panicking::AssertKind::Eq;
        _214 = Option::<Arguments<'_>>::None;
        _213 = core::panicking::assert_failed::<i32, i32>(move _212, _206, _207, move _214) -> unwind continue;
    }

    bb45: {
        _218 = &_200;
        _219 = (const 5_i32, const true);
        _217 = <[closure@ui/mir/mir_match_test.rs:47:31: 47:37] as Fn<(i32, bool)>>::call(move _218, move _219) -> [return: bb46, unwind continue];
    }

    bb46: {
        _216 = &_217;
        _351 = const _;
        _215 = (move _216, _351);
        _220 = (_215.0: &i32);
        _221 = (_215.1: &i32);
        _224 = (*_220);
        _225 = (*_221);
        _223 = Eq(move _224, move _225);
        _222 = Not(move _223);
        switchInt(move _222) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _226 = core::panicking::AssertKind::Eq;
        _228 = Option::<Arguments<'_>>::None;
        _227 = core::panicking::assert_failed::<i32, i32>(move _226, _220, _221, move _228) -> unwind continue;
    }

    bb48: {
        _232 = &_200;
        _233 = (const 3_i32, const false);
        _231 = <[closure@ui/mir/mir_match_test.rs:47:31: 47:37] as Fn<(i32, bool)>>::call(move _232, move _233) -> [return: bb49, unwind continue];
    }

    bb49: {
        _230 = &_231;
        _350 = const _;
        _229 = (move _230, _350);
        _234 = (_229.0: &i32);
        _235 = (_229.1: &i32);
        _238 = (*_234);
        _239 = (*_235);
        _237 = Eq(move _238, move _239);
        _236 = Not(move _237);
        switchInt(move _236) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _240 = core::panicking::AssertKind::Eq;
        _242 = Option::<Arguments<'_>>::None;
        _241 = core::panicking::assert_failed::<i32, i32>(move _240, _234, _235, move _242) -> unwind continue;
    }

    bb51: {
        _246 = &_200;
        _247 = (const 3_i32, const true);
        _245 = <[closure@ui/mir/mir_match_test.rs:47:31: 47:37] as Fn<(i32, bool)>>::call(move _246, move _247) -> [return: bb52, unwind continue];
    }

    bb52: {
        _244 = &_245;
        _349 = const _;
        _243 = (move _244, _349);
        _248 = (_243.0: &i32);
        _249 = (_243.1: &i32);
        _252 = (*_248);
        _253 = (*_249);
        _251 = Eq(move _252, move _253);
        _250 = Not(move _251);
        switchInt(move _250) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _254 = core::panicking::AssertKind::Eq;
        _256 = Option::<Arguments<'_>>::None;
        _255 = core::panicking::assert_failed::<i32, i32>(move _254, _248, _249, move _256) -> unwind continue;
    }

    bb54: {
        _260 = &_200;
        _261 = (const 7_i32, const false);
        _259 = <[closure@ui/mir/mir_match_test.rs:47:31: 47:37] as Fn<(i32, bool)>>::call(move _260, move _261) -> [return: bb55, unwind continue];
    }

    bb55: {
        _258 = &_259;
        _348 = const _;
        _257 = (move _258, _348);
        _262 = (_257.0: &i32);
        _263 = (_257.1: &i32);
        _266 = (*_262);
        _267 = (*_263);
        _265 = Eq(move _266, move _267);
        _264 = Not(move _265);
        switchInt(move _264) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _268 = core::panicking::AssertKind::Eq;
        _270 = Option::<Arguments<'_>>::None;
        _269 = core::panicking::assert_failed::<i32, i32>(move _268, _262, _263, move _270) -> unwind continue;
    }

    bb57: {
        _274 = &_200;
        _275 = (const 7_i32, const true);
        _273 = <[closure@ui/mir/mir_match_test.rs:47:31: 47:37] as Fn<(i32, bool)>>::call(move _274, move _275) -> [return: bb58, unwind continue];
    }

    bb58: {
        _272 = &_273;
        _347 = const _;
        _271 = (move _272, _347);
        _276 = (_271.0: &i32);
        _277 = (_271.1: &i32);
        _280 = (*_276);
        _281 = (*_277);
        _279 = Eq(move _280, move _281);
        _278 = Not(move _279);
        switchInt(move _278) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _282 = core::panicking::AssertKind::Eq;
        _284 = Option::<Arguments<'_>>::None;
        _283 = core::panicking::assert_failed::<i32, i32>(move _282, _276, _277, move _284) -> unwind continue;
    }

    bb60: {
        _289 = &_285;
        _290 = (const 3_i32, const false);
        _288 = <[closure@ui/mir/mir_match_test.rs:62:31: 62:37] as Fn<(i32, bool)>>::call(move _289, move _290) -> [return: bb61, unwind continue];
    }

    bb61: {
        _287 = &_288;
        _346 = const _;
        _286 = (move _287, _346);
        _291 = (_286.0: &i32);
        _292 = (_286.1: &i32);
        _295 = (*_291);
        _296 = (*_292);
        _294 = Eq(move _295, move _296);
        _293 = Not(move _294);
        switchInt(move _293) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _297 = core::panicking::AssertKind::Eq;
        _299 = Option::<Arguments<'_>>::None;
        _298 = core::panicking::assert_failed::<i32, i32>(move _297, _291, _292, move _299) -> unwind continue;
    }

    bb63: {
        _303 = &_285;
        _304 = (const 3_i32, const true);
        _302 = <[closure@ui/mir/mir_match_test.rs:62:31: 62:37] as Fn<(i32, bool)>>::call(move _303, move _304) -> [return: bb64, unwind continue];
    }

    bb64: {
        _301 = &_302;
        _345 = const _;
        _300 = (move _301, _345);
        _305 = (_300.0: &i32);
        _306 = (_300.1: &i32);
        _309 = (*_305);
        _310 = (*_306);
        _308 = Eq(move _309, move _310);
        _307 = Not(move _308);
        switchInt(move _307) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _311 = core::panicking::AssertKind::Eq;
        _313 = Option::<Arguments<'_>>::None;
        _312 = core::panicking::assert_failed::<i32, i32>(move _311, _305, _306, move _313) -> unwind continue;
    }

    bb66: {
        _318 = &_314;
        _319 = (const 3_i32, const false);
        _317 = <[closure@ui/mir/mir_match_test.rs:73:31: 73:37] as Fn<(i32, bool)>>::call(move _318, move _319) -> [return: bb67, unwind continue];
    }

    bb67: {
        _316 = &_317;
        _344 = const _;
        _315 = (move _316, _344);
        _320 = (_315.0: &i32);
        _321 = (_315.1: &i32);
        _324 = (*_320);
        _325 = (*_321);
        _323 = Eq(move _324, move _325);
        _322 = Not(move _323);
        switchInt(move _322) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _326 = core::panicking::AssertKind::Eq;
        _328 = Option::<Arguments<'_>>::None;
        _327 = core::panicking::assert_failed::<i32, i32>(move _326, _320, _321, move _328) -> unwind continue;
    }

    bb69: {
        _332 = &_314;
        _333 = (const 3_i32, const true);
        _331 = <[closure@ui/mir/mir_match_test.rs:73:31: 73:37] as Fn<(i32, bool)>>::call(move _332, move _333) -> [return: bb70, unwind continue];
    }

    bb70: {
        _330 = &_331;
        _343 = const _;
        _329 = (move _330, _343);
        _334 = (_329.0: &i32);
        _335 = (_329.1: &i32);
        _338 = (*_334);
        _339 = (*_335);
        _337 = Eq(move _338, move _339);
        _336 = Not(move _337);
        switchInt(move _336) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _340 = core::panicking::AssertKind::Eq;
        _342 = Option::<Arguments<'_>>::None;
        _341 = core::panicking::assert_failed::<i32, i32>(move _340, _334, _335, move _342) -> unwind continue;
    }

    bb72: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/mir/mir_match_test.rs:6:22: 6:28], _2: i32, _3: bool) -> i32 {
    debug x => _2;
    debug b => _3;
    let mut _0: i32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;

    bb0: {
        _8 = Le(const 0_i32, _2);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _9 = Le(_2, const 5_i32);
        switchInt(move _9) -> [0: bb2, otherwise: bb7];
    }

    bb2: {
        _6 = Le(const 5_i32, _2);
        switchInt(move _6) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        _7 = Le(_2, const 10_i32);
        switchInt(move _7) -> [0: bb5, otherwise: bb9];
    }

    bb4: {
        _0 = const 3_i32;
        goto -> bb13;
    }

    bb5: {
        _4 = Le(const 1_i32, _2);
        switchInt(move _4) -> [0: bb4, otherwise: bb6];
    }

    bb6: {
        _5 = Le(_2, const 4_i32);
        switchInt(move _5) -> [0: bb4, otherwise: bb11];
    }

    bb7: {
        switchInt(_3) -> [0: bb2, otherwise: bb8];
    }

    bb8: {
        _0 = const 0_i32;
        goto -> bb13;
    }

    bb9: {
        switchInt(_3) -> [0: bb4, otherwise: bb10];
    }

    bb10: {
        _0 = const 1_i32;
        goto -> bb13;
    }

    bb11: {
        _10 = Not(_3);
        switchInt(move _10) -> [0: bb4, otherwise: bb12];
    }

    bb12: {
        _0 = const 2_i32;
        goto -> bb13;
    }

    bb13: {
        return;
    }
}

fn main::{closure#1}(_1: &[closure@ui/mir/mir_match_test.rs:19:22: 19:28], _2: i32, _3: bool) -> i32 {
    debug x => _2;
    debug b => _3;
    let mut _0: i32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;

    bb0: {
        _8 = Le(const 0_i32, _2);
        switchInt(move _8) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        _9 = Lt(_2, const 5_i32);
        switchInt(move _9) -> [0: bb3, otherwise: bb7];
    }

    bb2: {
        _6 = Le(const 1_i32, _2);
        switchInt(move _6) -> [0: bb6, otherwise: bb5];
    }

    bb3: {
        _4 = Le(const 5_i32, _2);
        switchInt(move _4) -> [0: bb2, otherwise: bb4];
    }

    bb4: {
        _5 = Lt(_2, const 10_i32);
        switchInt(move _5) -> [0: bb2, otherwise: bb9];
    }

    bb5: {
        _7 = Lt(_2, const 4_i32);
        switchInt(move _7) -> [0: bb6, otherwise: bb11];
    }

    bb6: {
        _0 = const 3_i32;
        goto -> bb13;
    }

    bb7: {
        switchInt(_3) -> [0: bb2, otherwise: bb8];
    }

    bb8: {
        _0 = const 0_i32;
        goto -> bb13;
    }

    bb9: {
        switchInt(_3) -> [0: bb2, otherwise: bb10];
    }

    bb10: {
        _0 = const 1_i32;
        goto -> bb13;
    }

    bb11: {
        _10 = Not(_3);
        switchInt(move _10) -> [0: bb6, otherwise: bb12];
    }

    bb12: {
        _0 = const 2_i32;
        goto -> bb13;
    }

    bb13: {
        return;
    }
}

fn main::{closure#2}(_1: &[closure@ui/mir/mir_match_test.rs:32:31: 32:37], _2: i32, _3: bool) -> i32 {
    debug x => _2;
    debug b => _3;
    let mut _0: i32;
    let mut _4: bool;
    let mut _5: bool;

    bb0: {
        _4 = Le(const 0_i32, _2);
        switchInt(move _4) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        _5 = Le(_2, const 5_i32);
        switchInt(move _5) -> [0: bb3, otherwise: bb5];
    }

    bb2: {
        switchInt(_2) -> [3: bb8, otherwise: bb4];
    }

    bb3: {
        switchInt(_2) -> [7: bb7, otherwise: bb2];
    }

    bb4: {
        _0 = const 3_i32;
        goto -> bb9;
    }

    bb5: {
        switchInt(_3) -> [0: bb2, otherwise: bb6];
    }

    bb6: {
        _0 = const 0_i32;
        goto -> bb9;
    }

    bb7: {
        _0 = const 1_i32;
        goto -> bb9;
    }

    bb8: {
        _0 = const 2_i32;
        goto -> bb9;
    }

    bb9: {
        return;
    }
}

fn main::{closure#3}(_1: &[closure@ui/mir/mir_match_test.rs:47:31: 47:37], _2: i32, _3: bool) -> i32 {
    debug x => _2;
    debug b => _3;
    let mut _0: i32;
    let mut _4: bool;
    let mut _5: bool;

    bb0: {
        _4 = Le(const 0_i32, _2);
        switchInt(move _4) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        _5 = Lt(_2, const 5_i32);
        switchInt(move _5) -> [0: bb3, otherwise: bb5];
    }

    bb2: {
        switchInt(_2) -> [3: bb8, otherwise: bb4];
    }

    bb3: {
        switchInt(_2) -> [7: bb7, otherwise: bb2];
    }

    bb4: {
        _0 = const 3_i32;
        goto -> bb9;
    }

    bb5: {
        switchInt(_3) -> [0: bb2, otherwise: bb6];
    }

    bb6: {
        _0 = const 0_i32;
        goto -> bb9;
    }

    bb7: {
        _0 = const 1_i32;
        goto -> bb9;
    }

    bb8: {
        _0 = const 2_i32;
        goto -> bb9;
    }

    bb9: {
        return;
    }
}

fn main::{closure#4}(_1: &[closure@ui/mir/mir_match_test.rs:62:31: 62:37], _2: i32, _3: bool) -> i32 {
    debug x => _2;
    debug b => _3;
    let mut _0: i32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;

    bb0: {
        switchInt(_2) -> [3: bb6, otherwise: bb2];
    }

    bb1: {
        _6 = Le(const 1_i32, _2);
        switchInt(move _6) -> [0: bb5, otherwise: bb4];
    }

    bb2: {
        _4 = Le(const 5_i32, _2);
        switchInt(move _4) -> [0: bb1, otherwise: bb3];
    }

    bb3: {
        _5 = Le(_2, const 7_i32);
        switchInt(move _5) -> [0: bb1, otherwise: bb8];
    }

    bb4: {
        _7 = Le(_2, const 4_i32);
        switchInt(move _7) -> [0: bb5, otherwise: bb9];
    }

    bb5: {
        _0 = const 3_i32;
        goto -> bb10;
    }

    bb6: {
        switchInt(_3) -> [0: bb1, otherwise: bb7];
    }

    bb7: {
        _0 = const 0_i32;
        goto -> bb10;
    }

    bb8: {
        _0 = const 2_i32;
        goto -> bb10;
    }

    bb9: {
        _0 = const 1_i32;
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn main::{closure#5}(_1: &[closure@ui/mir/mir_match_test.rs:73:31: 73:37], _2: i32, _3: bool) -> i32 {
    debug x => _2;
    debug b => _3;
    let mut _0: i32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;

    bb0: {
        switchInt(_2) -> [3: bb6, otherwise: bb2];
    }

    bb1: {
        _6 = Le(const 1_i32, _2);
        switchInt(move _6) -> [0: bb5, otherwise: bb4];
    }

    bb2: {
        _4 = Le(const 5_i32, _2);
        switchInt(move _4) -> [0: bb1, otherwise: bb3];
    }

    bb3: {
        _5 = Lt(_2, const 7_i32);
        switchInt(move _5) -> [0: bb1, otherwise: bb8];
    }

    bb4: {
        _7 = Lt(_2, const 4_i32);
        switchInt(move _7) -> [0: bb5, otherwise: bb9];
    }

    bb5: {
        _0 = const 3_i32;
        goto -> bb10;
    }

    bb6: {
        switchInt(_3) -> [0: bb1, otherwise: bb7];
    }

    bb7: {
        _0 = const 0_i32;
        goto -> bb10;
    }

    bb8: {
        _0 = const 2_i32;
        goto -> bb10;
    }

    bb9: {
        _0 = const 1_i32;
        goto -> bb10;
    }

    bb10: {
        return;
    }
}
