// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_ascription_coercion.rs:6:11: 6:11
    let _1: [i32; 3];                    // in scope 0 at ui/mir/mir_ascription_coercion.rs:7:9: 7:10
    let mut _3: &[i32; 3];               // in scope 0 at ui/mir/mir_ascription_coercion.rs:9:23: 9:51
    let _4: &[i32; 3];                   // in scope 0 at ui/mir/mir_ascription_coercion.rs:9:37: 9:39
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/mir/mir_ascription_coercion.rs:7:9: 7:10
        let _2: &[i32];                  // in scope 1 at ui/mir/mir_ascription_coercion.rs:9:9: 9:11
        scope 2 {
            debug _y => _2;              // in scope 2 at ui/mir/mir_ascription_coercion.rs:9:9: 9:11
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at ui/mir/mir_ascription_coercion.rs:7:13: 7:22
        _4 = &_1;                        // scope 1 at ui/mir/mir_ascription_coercion.rs:9:37: 9:39
        _3 = _4;                         // scope 1 at ui/mir/mir_ascription_coercion.rs:9:23: 9:51
        _2 = move _3 as &[i32] (Pointer(Unsize)); // scope 1 at ui/mir/mir_ascription_coercion.rs:9:23: 9:51
        return;                          // scope 0 at ui/mir/mir_ascription_coercion.rs:10:2: 10:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir_ascription_coercion.rs:9:48: 9:49

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/mir/mir_ascription_coercion.rs:9:48: 9:49
        return;                          // scope 0 at ui/mir/mir_ascription_coercion.rs:9:48: 9:49
    }
}
