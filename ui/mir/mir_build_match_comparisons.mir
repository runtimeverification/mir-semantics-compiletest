// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test1(_1: i8) -> i32 {
    debug x => _1;
    let mut _0: i32;
    let mut _2: bool;
    let mut _3: bool;

    bb0: {
        _2 = Le(const 1_i8, _1);
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = Le(_1, const 10_i8);
        switchInt(move _3) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        _0 = const 1_i32;
        goto -> bb4;
    }

    bb3: {
        _0 = const 0_i32;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

const U: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        _0 = Option::<i8>::Some(const 10_i8);
        return;
    }
}

const S: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "hello";
        return;
    }
}

fn test2(_1: i8) -> i32 {
    debug x => _1;
    let mut _0: i32;
    let mut _2: std::option::Option<i8>;
    let mut _3: isize;

    bb0: {
        _2 = Option::<i8>::Some(_1);
        _3 = discriminant(_2);
        switchInt(move _3) -> [1: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const 1_i32;
        goto -> bb4;
    }

    bb2: {
        switchInt(((_2 as Some).0: i8)) -> [10: bb3, otherwise: bb1];
    }

    bb3: {
        _0 = const 0_i32;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn test3(_1: &str) -> i32 {
    debug x => _1;
    let mut _0: i32;
    let mut _2: bool;

    bb0: {
        _2 = <str as PartialEq>::eq(_1, const "hello") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        _0 = const 1_i32;
        goto -> bb4;
    }

    bb3: {
        _0 = const 0_i32;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn test4(_1: u64) -> i32 {
    debug x => _1;
    let mut _0: i32;
    let _2: Opt<u64>;
    let mut _3: isize;
    scope 1 {
        debug opt => _2;
    }

    bb0: {
        _2 = Opt::<u64>::Some { v: _1 };
        _3 = discriminant(_2);
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        switchInt(((_2 as Some).0: u64)) -> [10: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = const 1_i32;
        goto -> bb4;
    }

    bb3: {
        _0 = const 0_i32;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let _4: &i32;
    let _5: &i32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: i32;
    let mut _9: i32;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&i32, &i32);
    let mut _14: &i32;
    let _15: i32;
    let _16: &i32;
    let _17: &i32;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: i32;
    let mut _21: i32;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&i32, &i32);
    let mut _26: &i32;
    let _27: i32;
    let _28: &i32;
    let _29: &i32;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: i32;
    let mut _33: i32;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&i32, &i32);
    let mut _38: &i32;
    let _39: i32;
    let _40: &i32;
    let _41: &i32;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: i32;
    let mut _45: i32;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&i32, &i32);
    let mut _50: &i32;
    let _51: i32;
    let _52: &i32;
    let _53: &i32;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: i32;
    let mut _57: i32;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&i32, &i32);
    let mut _62: &i32;
    let _63: i32;
    let _64: &i32;
    let _65: &i32;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: i32;
    let mut _69: i32;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&i32, &i32);
    let mut _74: &i32;
    let _75: i32;
    let _76: &i32;
    let _77: &i32;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: i32;
    let mut _81: i32;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&i32, &i32);
    let mut _86: &i32;
    let _87: i32;
    let _88: &i32;
    let _89: &i32;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: i32;
    let mut _93: i32;
    let _95: !;
    let mut _96: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _97: (&i32, &i32);
    let mut _98: &i32;
    let _99: i32;
    let _100: &i32;
    let _101: &i32;
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: i32;
    let mut _105: i32;
    let _107: !;
    let mut _108: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _109: (&i32, &i32);
    let mut _110: &i32;
    let _111: i32;
    let _112: &i32;
    let _113: &i32;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: i32;
    let mut _117: i32;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: (&i32, &i32);
    let mut _122: &i32;
    let _123: i32;
    let _124: &i32;
    let _125: &i32;
    let mut _126: bool;
    let mut _127: bool;
    let mut _128: i32;
    let mut _129: i32;
    let _131: !;
    let mut _132: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _133: (&i32, &i32);
    let mut _134: &i32;
    let _135: i32;
    let _136: &i32;
    let _137: &i32;
    let mut _138: bool;
    let mut _139: bool;
    let mut _140: i32;
    let mut _141: i32;
    let _143: !;
    let mut _144: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _145: (&i32, &i32);
    let mut _146: &i32;
    let _147: i32;
    let _148: &i32;
    let _149: &i32;
    let mut _150: bool;
    let mut _151: bool;
    let mut _152: i32;
    let mut _153: i32;
    let _155: !;
    let mut _156: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _157: (&i32, &i32);
    let mut _158: &i32;
    let _159: i32;
    let _160: &i32;
    let _161: &i32;
    let mut _162: bool;
    let mut _163: bool;
    let mut _164: i32;
    let mut _165: i32;
    let _167: !;
    let mut _168: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _169: (&i32, &i32);
    let mut _170: &i32;
    let _171: i32;
    let _172: &i32;
    let _173: &i32;
    let mut _174: bool;
    let mut _175: bool;
    let mut _176: i32;
    let mut _177: i32;
    let _179: !;
    let mut _180: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _181: (&i32, &i32);
    let mut _182: &i32;
    let _183: i32;
    let _184: &i32;
    let _185: &i32;
    let mut _186: bool;
    let mut _187: bool;
    let mut _188: i32;
    let mut _189: i32;
    let _191: !;
    let mut _192: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _193: (&i32, &i32);
    let mut _194: &i32;
    let _195: i32;
    let _196: &i32;
    let _197: &i32;
    let mut _198: bool;
    let mut _199: bool;
    let mut _200: i32;
    let mut _201: i32;
    let _203: !;
    let mut _204: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _205: &i32;
    let mut _206: &i32;
    let mut _207: &i32;
    let mut _208: &i32;
    let mut _209: &i32;
    let mut _210: &i32;
    let mut _211: &i32;
    let mut _212: &i32;
    let mut _213: &i32;
    let mut _214: &i32;
    let mut _215: &i32;
    let mut _216: &i32;
    let mut _217: &i32;
    let mut _218: &i32;
    let mut _219: &i32;
    let mut _220: &i32;
    let mut _221: &i32;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _16;
        debug right_val => _17;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _28;
        debug right_val => _29;
        let _34: core::panicking::AssertKind;
        scope 6 {
            debug kind => _34;
        }
    }
    scope 7 {
        debug left_val => _40;
        debug right_val => _41;
        let _46: core::panicking::AssertKind;
        scope 8 {
            debug kind => _46;
        }
    }
    scope 9 {
        debug left_val => _52;
        debug right_val => _53;
        let _58: core::panicking::AssertKind;
        scope 10 {
            debug kind => _58;
        }
    }
    scope 11 {
        debug left_val => _64;
        debug right_val => _65;
        let _70: core::panicking::AssertKind;
        scope 12 {
            debug kind => _70;
        }
    }
    scope 13 {
        debug left_val => _76;
        debug right_val => _77;
        let _82: core::panicking::AssertKind;
        scope 14 {
            debug kind => _82;
        }
    }
    scope 15 {
        debug left_val => _88;
        debug right_val => _89;
        let _94: core::panicking::AssertKind;
        scope 16 {
            debug kind => _94;
        }
    }
    scope 17 {
        debug left_val => _100;
        debug right_val => _101;
        let _106: core::panicking::AssertKind;
        scope 18 {
            debug kind => _106;
        }
    }
    scope 19 {
        debug left_val => _112;
        debug right_val => _113;
        let _118: core::panicking::AssertKind;
        scope 20 {
            debug kind => _118;
        }
    }
    scope 21 {
        debug left_val => _124;
        debug right_val => _125;
        let _130: core::panicking::AssertKind;
        scope 22 {
            debug kind => _130;
        }
    }
    scope 23 {
        debug left_val => _136;
        debug right_val => _137;
        let _142: core::panicking::AssertKind;
        scope 24 {
            debug kind => _142;
        }
    }
    scope 25 {
        debug left_val => _148;
        debug right_val => _149;
        let _154: core::panicking::AssertKind;
        scope 26 {
            debug kind => _154;
        }
    }
    scope 27 {
        debug left_val => _160;
        debug right_val => _161;
        let _166: core::panicking::AssertKind;
        scope 28 {
            debug kind => _166;
        }
    }
    scope 29 {
        debug left_val => _172;
        debug right_val => _173;
        let _178: core::panicking::AssertKind;
        scope 30 {
            debug kind => _178;
        }
    }
    scope 31 {
        debug left_val => _184;
        debug right_val => _185;
        let _190: core::panicking::AssertKind;
        scope 32 {
            debug kind => _190;
        }
    }
    scope 33 {
        debug left_val => _196;
        debug right_val => _197;
        let _202: core::panicking::AssertKind;
        scope 34 {
            debug kind => _202;
        }
    }

    bb0: {
        _3 = test1(const 0_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _221 = const _;
        _1 = (move _2, _221);
        _4 = (_1.0: &i32);
        _5 = (_1.1: &i32);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<i32, i32>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        _15 = test1(const 1_i8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = &_15;
        _220 = const _;
        _13 = (move _14, _220);
        _16 = (_13.0: &i32);
        _17 = (_13.1: &i32);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<i32, i32>(move _22, _16, _17, move _24) -> unwind continue;
    }

    bb6: {
        _27 = test1(const 2_i8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _26 = &_27;
        _219 = const _;
        _25 = (move _26, _219);
        _28 = (_25.0: &i32);
        _29 = (_25.1: &i32);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<i32, i32>(move _34, _28, _29, move _36) -> unwind continue;
    }

    bb9: {
        _39 = test1(const 5_i8) -> [return: bb10, unwind continue];
    }

    bb10: {
        _38 = &_39;
        _218 = const _;
        _37 = (move _38, _218);
        _40 = (_37.0: &i32);
        _41 = (_37.1: &i32);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<i32, i32>(move _46, _40, _41, move _48) -> unwind continue;
    }

    bb12: {
        _51 = test1(const 9_i8) -> [return: bb13, unwind continue];
    }

    bb13: {
        _50 = &_51;
        _217 = const _;
        _49 = (move _50, _217);
        _52 = (_49.0: &i32);
        _53 = (_49.1: &i32);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<i32, i32>(move _58, _52, _53, move _60) -> unwind continue;
    }

    bb15: {
        _63 = test1(const 10_i8) -> [return: bb16, unwind continue];
    }

    bb16: {
        _62 = &_63;
        _216 = const _;
        _61 = (move _62, _216);
        _64 = (_61.0: &i32);
        _65 = (_61.1: &i32);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<i32, i32>(move _70, _64, _65, move _72) -> unwind continue;
    }

    bb18: {
        _75 = test1(const 11_i8) -> [return: bb19, unwind continue];
    }

    bb19: {
        _74 = &_75;
        _215 = const _;
        _73 = (move _74, _215);
        _76 = (_73.0: &i32);
        _77 = (_73.1: &i32);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<i32, i32>(move _82, _76, _77, move _84) -> unwind continue;
    }

    bb21: {
        _87 = test1(const 20_i8) -> [return: bb22, unwind continue];
    }

    bb22: {
        _86 = &_87;
        _214 = const _;
        _85 = (move _86, _214);
        _88 = (_85.0: &i32);
        _89 = (_85.1: &i32);
        _92 = (*_88);
        _93 = (*_89);
        _91 = Eq(move _92, move _93);
        _90 = Not(move _91);
        switchInt(move _90) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _94 = core::panicking::AssertKind::Eq;
        _96 = Option::<Arguments<'_>>::None;
        _95 = core::panicking::assert_failed::<i32, i32>(move _94, _88, _89, move _96) -> unwind continue;
    }

    bb24: {
        _99 = test2(const 10_i8) -> [return: bb25, unwind continue];
    }

    bb25: {
        _98 = &_99;
        _213 = const _;
        _97 = (move _98, _213);
        _100 = (_97.0: &i32);
        _101 = (_97.1: &i32);
        _104 = (*_100);
        _105 = (*_101);
        _103 = Eq(move _104, move _105);
        _102 = Not(move _103);
        switchInt(move _102) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _106 = core::panicking::AssertKind::Eq;
        _108 = Option::<Arguments<'_>>::None;
        _107 = core::panicking::assert_failed::<i32, i32>(move _106, _100, _101, move _108) -> unwind continue;
    }

    bb27: {
        _111 = test2(const 0_i8) -> [return: bb28, unwind continue];
    }

    bb28: {
        _110 = &_111;
        _212 = const _;
        _109 = (move _110, _212);
        _112 = (_109.0: &i32);
        _113 = (_109.1: &i32);
        _116 = (*_112);
        _117 = (*_113);
        _115 = Eq(move _116, move _117);
        _114 = Not(move _115);
        switchInt(move _114) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<i32, i32>(move _118, _112, _113, move _120) -> unwind continue;
    }

    bb30: {
        _123 = test2(const 20_i8) -> [return: bb31, unwind continue];
    }

    bb31: {
        _122 = &_123;
        _211 = const _;
        _121 = (move _122, _211);
        _124 = (_121.0: &i32);
        _125 = (_121.1: &i32);
        _128 = (*_124);
        _129 = (*_125);
        _127 = Eq(move _128, move _129);
        _126 = Not(move _127);
        switchInt(move _126) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _130 = core::panicking::AssertKind::Eq;
        _132 = Option::<Arguments<'_>>::None;
        _131 = core::panicking::assert_failed::<i32, i32>(move _130, _124, _125, move _132) -> unwind continue;
    }

    bb33: {
        _135 = test3(const "hello") -> [return: bb34, unwind continue];
    }

    bb34: {
        _134 = &_135;
        _210 = const _;
        _133 = (move _134, _210);
        _136 = (_133.0: &i32);
        _137 = (_133.1: &i32);
        _140 = (*_136);
        _141 = (*_137);
        _139 = Eq(move _140, move _141);
        _138 = Not(move _139);
        switchInt(move _138) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _142 = core::panicking::AssertKind::Eq;
        _144 = Option::<Arguments<'_>>::None;
        _143 = core::panicking::assert_failed::<i32, i32>(move _142, _136, _137, move _144) -> unwind continue;
    }

    bb36: {
        _147 = test3(const "") -> [return: bb37, unwind continue];
    }

    bb37: {
        _146 = &_147;
        _209 = const _;
        _145 = (move _146, _209);
        _148 = (_145.0: &i32);
        _149 = (_145.1: &i32);
        _152 = (*_148);
        _153 = (*_149);
        _151 = Eq(move _152, move _153);
        _150 = Not(move _151);
        switchInt(move _150) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _154 = core::panicking::AssertKind::Eq;
        _156 = Option::<Arguments<'_>>::None;
        _155 = core::panicking::assert_failed::<i32, i32>(move _154, _148, _149, move _156) -> unwind continue;
    }

    bb39: {
        _159 = test3(const "world") -> [return: bb40, unwind continue];
    }

    bb40: {
        _158 = &_159;
        _208 = const _;
        _157 = (move _158, _208);
        _160 = (_157.0: &i32);
        _161 = (_157.1: &i32);
        _164 = (*_160);
        _165 = (*_161);
        _163 = Eq(move _164, move _165);
        _162 = Not(move _163);
        switchInt(move _162) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _166 = core::panicking::AssertKind::Eq;
        _168 = Option::<Arguments<'_>>::None;
        _167 = core::panicking::assert_failed::<i32, i32>(move _166, _160, _161, move _168) -> unwind continue;
    }

    bb42: {
        _171 = test4(const 10_u64) -> [return: bb43, unwind continue];
    }

    bb43: {
        _170 = &_171;
        _207 = const _;
        _169 = (move _170, _207);
        _172 = (_169.0: &i32);
        _173 = (_169.1: &i32);
        _176 = (*_172);
        _177 = (*_173);
        _175 = Eq(move _176, move _177);
        _174 = Not(move _175);
        switchInt(move _174) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _178 = core::panicking::AssertKind::Eq;
        _180 = Option::<Arguments<'_>>::None;
        _179 = core::panicking::assert_failed::<i32, i32>(move _178, _172, _173, move _180) -> unwind continue;
    }

    bb45: {
        _183 = test4(const 0_u64) -> [return: bb46, unwind continue];
    }

    bb46: {
        _182 = &_183;
        _206 = const _;
        _181 = (move _182, _206);
        _184 = (_181.0: &i32);
        _185 = (_181.1: &i32);
        _188 = (*_184);
        _189 = (*_185);
        _187 = Eq(move _188, move _189);
        _186 = Not(move _187);
        switchInt(move _186) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _190 = core::panicking::AssertKind::Eq;
        _192 = Option::<Arguments<'_>>::None;
        _191 = core::panicking::assert_failed::<i32, i32>(move _190, _184, _185, move _192) -> unwind continue;
    }

    bb48: {
        _195 = test4(const 20_u64) -> [return: bb49, unwind continue];
    }

    bb49: {
        _194 = &_195;
        _205 = const _;
        _193 = (move _194, _205);
        _196 = (_193.0: &i32);
        _197 = (_193.1: &i32);
        _200 = (*_196);
        _201 = (*_197);
        _199 = Eq(move _200, move _201);
        _198 = Not(move _199);
        switchInt(move _198) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _202 = core::panicking::AssertKind::Eq;
        _204 = Option::<Arguments<'_>>::None;
        _203 = core::panicking::assert_failed::<i32, i32>(move _202, _196, _197, move _204) -> unwind continue;
    }

    bb51: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}
