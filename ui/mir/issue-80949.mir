// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn make_dyn_trait(_1: &()) -> Box<dyn Trait<Item = &()>> {
    let mut _0: std::boxed::Box<dyn Trait<Item = &()>>; // return place in scope 0 at ui/mir/issue-80949.rs:13:30: 13:56
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _2 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn diff(_1: N, _2: S) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/issue-80949.rs:18:1: 18:1
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _3 = core::panicking::panic(const "not yet implemented") -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_2) -> bb2;                 // scope 0 at ui/mir/issue-80949.rs:24:1: 24:2
    }

    bb2 (cleanup): {
        drop(_1) -> bb3;                 // scope 0 at ui/mir/issue-80949.rs:24:1: 24:2
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/mir/issue-80949.rs:17:1: 24:2
    }
}

fn may_panic(_1: X) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/issue-80949.rs:26:23: 26:23

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/mir/issue-80949.rs:26:25: 26:26
    }

    bb1: {
        return;                          // scope 0 at ui/mir/issue-80949.rs:26:26: 26:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/issue-80949.rs:28:11: 28:11
    let _1: std::boxed::Box<dyn Trait<Item = &()>>; // in scope 0 at ui/mir/issue-80949.rs:29:9: 29:18
    let mut _2: &();                     // in scope 0 at ui/mir/issue-80949.rs:29:36: 29:39
    let _3: &();                         // in scope 0 at ui/mir/issue-80949.rs:29:36: 29:39
    let mut _5: std::boxed::Box<[()]>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: std::boxed::Box<[(); 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: std::boxed::Box<[(); 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _12: ();                     // in scope 0 at ui/mir/issue-80949.rs:31:24: 31:26
    let _14: ();                         // in scope 0 at ui/mir/issue-80949.rs:33:5: 33:33
    let mut _15: std::boxed::Box<dyn Trait<Item = &()>>; // in scope 0 at ui/mir/issue-80949.rs:33:10: 33:19
    let mut _16: &std::vec::Vec<()>;     // in scope 0 at ui/mir/issue-80949.rs:33:21: 33:32
    let mut _17: &();                    // in scope 0 at ui/mir/issue-80949.rs:29:36: 29:39
    let mut _18: bool;                   // in scope 0 at ui/mir/issue-80949.rs:34:1: 34:2
    scope 1 {
        debug dyn_trait => _1;           // in scope 1 at ui/mir/issue-80949.rs:29:9: 29:18
        let _4: std::vec::Vec<()>;       // in scope 1 at ui/mir/issue-80949.rs:30:9: 30:16
        scope 2 {
            debug storage => _4;         // in scope 2 at ui/mir/issue-80949.rs:30:9: 30:16
            let _11: ();                 // in scope 2 at ui/mir/issue-80949.rs:31:9: 31:11
            scope 4 {
                debug _x => _11;         // in scope 4 at ui/mir/issue-80949.rs:31:9: 31:11
                let _13: &std::vec::Vec<()>; // in scope 4 at ui/mir/issue-80949.rs:32:9: 32:20
                scope 5 {
                    debug storage_ref => _13; // in scope 5 at ui/mir/issue-80949.rs:32:9: 32:20
                }
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _18 = const false;               // scope 0 at ui/mir/issue-80949.rs:29:9: 29:18
        _17 = const _;                   // scope 0 at ui/mir/issue-80949.rs:29:36: 29:39
                                         // mir::Constant
                                         // + span: ui/mir/issue-80949.rs:29:36: 29:39
                                         // + literal: Const { ty: &(), val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _17;                        // scope 0 at ui/mir/issue-80949.rs:29:36: 29:39
        _2 = _3;                         // scope 0 at ui/mir/issue-80949.rs:29:36: 29:39
        _18 = const true;                // scope 0 at ui/mir/issue-80949.rs:29:21: 29:40
        _1 = make_dyn_trait(move _2) -> bb1; // scope 0 at ui/mir/issue-80949.rs:29:21: 29:40
                                         // mir::Constant
                                         // + span: ui/mir/issue-80949.rs:29:21: 29:35
                                         // + literal: Const { ty: for<'a> fn(&'a ()) -> Box<(dyn Trait<Item = &'a ()> + 'static)> {make_dyn_trait}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = const 0_usize;              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _8 = const 1_usize;              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = alloc::alloc::exchange_malloc(move _7, move _8) -> [return: bb2, unwind: bb10]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = ShallowInitBox(move _9, [(); 1]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = move _10;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = move _6 as std::boxed::Box<[()]> (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _4 = slice::<impl [()]>::into_vec::<std::alloc::Global>(move _5) -> [return: bb3, unwind: bb10]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[()]>) -> Vec<()> {slice::<impl [()]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = may_panic::<()>(move _12) -> [return: bb4, unwind: bb7]; // scope 2 at ui/mir/issue-80949.rs:31:14: 31:27
                                         // mir::Constant
                                         // + span: ui/mir/issue-80949.rs:31:14: 31:23
                                         // + literal: Const { ty: fn(()) {may_panic::<()>}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = &_4;                       // scope 4 at ui/mir/issue-80949.rs:32:23: 32:31
        _18 = const false;               // scope 5 at ui/mir/issue-80949.rs:33:10: 33:19
        _15 = move _1;                   // scope 5 at ui/mir/issue-80949.rs:33:10: 33:19
        _16 = _13;                       // scope 5 at ui/mir/issue-80949.rs:33:21: 33:32
        _14 = diff::<'_, (), Box<dyn Trait<Item = &()>>, &Vec<()>>(move _15, move _16) -> [return: bb5, unwind: bb7]; // scope 5 at ui/mir/issue-80949.rs:33:5: 33:33
                                         // mir::Constant
                                         // + span: ui/mir/issue-80949.rs:33:5: 33:9
                                         // + literal: Const { ty: fn(Box<dyn Trait<Item = &()>>, &Vec<()>) {diff::<'_, (), Box<dyn Trait<Item = &()>>, &Vec<()>>}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_4) -> [return: bb6, unwind: bb10]; // scope 1 at ui/mir/issue-80949.rs:34:1: 34:2
    }

    bb6: {
        _18 = const false;               // scope 0 at ui/mir/issue-80949.rs:34:1: 34:2
        return;                          // scope 0 at ui/mir/issue-80949.rs:34:2: 34:2
    }

    bb7 (cleanup): {
        drop(_4) -> bb10;                // scope 1 at ui/mir/issue-80949.rs:34:1: 34:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/mir/issue-80949.rs:28:1: 34:2
    }

    bb9 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/mir/issue-80949.rs:34:1: 34:2
    }

    bb10 (cleanup): {
        switchInt(_18) -> [0: bb8, otherwise: bb9]; // scope 0 at ui/mir/issue-80949.rs:34:1: 34:2
    }
}

promoted[0] in main: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/mir/issue-80949.rs:29:36: 29:39
    let mut _1: ();                      // in scope 0 at ui/mir/issue-80949.rs:29:37: 29:39

    bb0: {
        _1 = ();                         // scope 0 at ui/mir/issue-80949.rs:29:37: 29:39
        _0 = &_1;                        // scope 0 at ui/mir/issue-80949.rs:29:36: 29:39
        return;                          // scope 0 at ui/mir/issue-80949.rs:29:36: 29:39
    }
}
