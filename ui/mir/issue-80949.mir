// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn make_dyn_trait(_1: &()) -> Box<dyn Trait<Item = &()>> {
    let mut _0: std::boxed::Box<dyn Trait<Item = &()>>;
    let mut _2: !;

    bb0: {
        _2 = core::panicking::panic(const "not yet implemented") -> unwind continue;
    }
}

fn diff(_1: N, _2: S) -> () {
    let mut _0: ();
    let mut _3: !;

    bb0: {
        _3 = core::panicking::panic(const "not yet implemented") -> bb1;
    }

    bb1 (cleanup): {
        drop(_2) -> [return: bb2, unwind terminate];
    }

    bb2 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn may_panic(_1: X) -> () {
    let mut _0: ();

    bb0: {
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<dyn Trait<Item = &()>>;
    let mut _3: std::boxed::Box<[()]>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: *mut u8;
    let mut _7: std::boxed::Box<[(); 1]>;
    let _8: ();
    let _10: ();
    let mut _11: std::boxed::Box<dyn Trait<Item = &()>>;
    let mut _12: &();
    let mut _13: bool;
    let mut _14: *const [(); 1];
    scope 1 {
        debug dyn_trait => _1;
        let _2: std::vec::Vec<()>;
        let mut _15: *const ();
        let mut _16: usize;
        let mut _17: usize;
        let mut _18: usize;
        let mut _19: usize;
        let mut _20: bool;
        scope 2 {
            debug storage => _2;
            let _9: &std::vec::Vec<()>;
            scope 4 {
                debug storage_ref => _9;
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _13 = const false;
        _12 = const _;
        _13 = const true;
        _1 = make_dyn_trait(_12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = SizeOf([(); 1]);
        _5 = AlignOf([(); 1]);
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _7 = ShallowInitBox(move _6, [(); 1]);
        _14 = (((_7.0: std::ptr::Unique<[(); 1]>).0: std::ptr::NonNull<[(); 1]>).0: *const [(); 1]);
        _15 = _14 as *const () (PtrToPtr);
        _16 = _15 as usize (Transmute);
        _17 = AlignOf(());
        _18 = Sub(_17, const 1_usize);
        _19 = BitAnd(_16, _18);
        _20 = Eq(_19, const 0_usize);
        assert(_20, "misaligned pointer dereference: address must be a multiple of {} but is {}", _17, _16) -> [success: bb11, unwind unreachable];
    }

    bb3: {
        _8 = may_panic::<()>(const ()) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _9 = &_2;
        _13 = const false;
        _11 = move _1;
        _10 = diff::<'_, (), Box<dyn Trait<Item = &()>>, &Vec<()>>(move _11, _9) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_2) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _13 = const false;
        return;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb10 (cleanup): {
        switchInt(_13) -> [0: bb8, otherwise: bb9];
    }

    bb11: {
        _3 = move _7 as std::boxed::Box<[()]> (Pointer(Unsize));
        _2 = slice::<impl [()]>::into_vec::<std::alloc::Global>(move _3) -> [return: bb3, unwind: bb10];
    }
}

promoted[0] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}
