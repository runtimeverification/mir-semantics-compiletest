// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/issue66339.rs:6:10: 6:10
    let _1: [closure@ui/mir/issue66339.rs:7:15: 7:18]; // in scope 0 at ui/mir/issue66339.rs:7:9: 7:12
    let mut _2: ();                      // in scope 0 at ui/mir/issue66339.rs:8:13: 8:21
    let mut _3: &[closure@ui/mir/issue66339.rs:7:15: 7:18]; // in scope 0 at ui/mir/issue66339.rs:8:13: 8:16
    let mut _4: (&str,);                 // in scope 0 at ui/mir/issue66339.rs:8:13: 8:21
    scope 1 {
        debug bar => _1;                 // in scope 1 at ui/mir/issue66339.rs:7:9: 7:12
        scope 2 {
        }
    }

    bb0: {
        _3 = &_1;                        // scope 1 at ui/mir/issue66339.rs:8:13: 8:16
        _4 = (const "a",);               // scope 1 at ui/mir/issue66339.rs:8:13: 8:21
                                         // mir::Constant
                                         // + span: ui/mir/issue66339.rs:8:17: 8:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = <[closure@ui/mir/issue66339.rs:7:15: 7:18] as Fn<(&str,)>>::call(move _3, move _4) -> bb1; // scope 1 at ui/mir/issue66339.rs:8:13: 8:21
                                         // mir::Constant
                                         // + span: ui/mir/issue66339.rs:8:13: 8:16
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/issue66339.rs:7:15: 7:18], (&str,)) -> <[closure@ui/mir/issue66339.rs:7:15: 7:18] as FnOnce<(&str,)>>::Output {<[closure@ui/mir/issue66339.rs:7:15: 7:18] as Fn<(&str,)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/issue66339.rs:9:2: 9:2
    }
}

fn foo::{closure#0}(_1: &[closure@ui/mir/issue66339.rs:7:15: 7:18], _2: &str) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/issue66339.rs:7:19: 7:19

    bb0: {
        return;                          // scope 0 at ui/mir/issue66339.rs:7:22: 7:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/issue66339.rs:11:11: 11:11
    let _1: ();                          // in scope 0 at ui/mir/issue66339.rs:12:5: 12:10

    bb0: {
        _1 = foo() -> bb1;               // scope 0 at ui/mir/issue66339.rs:12:5: 12:10
                                         // mir::Constant
                                         // + span: ui/mir/issue66339.rs:12:5: 12:8
                                         // + literal: Const { ty: fn() {foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/issue66339.rs:13:2: 13:2
    }
}
