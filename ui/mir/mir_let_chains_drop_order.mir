// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/mir/mir_let_chains_drop_order.rs:18:1: 18:39>::drop(_1: &mut DropLogger<'_, T>) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:19:13: 19:22
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_let_chains_drop_order.rs:19:24: 19:24
    let _2: ();                          // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:20:9: 20:46
    let mut _3: &mut std::vec::Vec<usize>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:20:9: 20:46
    let mut _4: &mut std::vec::Vec<usize>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:20:9: 20:46
    let mut _5: &mut std::cell::RefMut<'_, std::vec::Vec<usize>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:20:9: 20:46
    let mut _6: std::cell::RefMut<'_, std::vec::Vec<usize>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:20:9: 20:32
    let mut _7: &std::cell::RefCell<std::vec::Vec<usize>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:20:9: 20:32
    let mut _8: usize;                   // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:20:38: 20:45
    let mut _9: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:19:13: 19:22

    bb0: {
        _9 = deref_copy ((*_1).2: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:20:9: 20:32
        _7 = &((*_9).0: std::cell::RefCell<std::vec::Vec<usize>>); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:20:9: 20:32
        _6 = RefCell::<Vec<usize>>::borrow_mut(move _7) -> bb1; // scope 0 at ui/mir/mir_let_chains_drop_order.rs:20:9: 20:32
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:20:20: 20:30
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<usize>>) -> RefMut<'a, Vec<usize>> {RefCell::<Vec<usize>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut _6;                    // scope 0 at ui/mir/mir_let_chains_drop_order.rs:20:9: 20:46
        _4 = <RefMut<'_, Vec<usize>> as DerefMut>::deref_mut(move _5) -> [return: bb2, unwind: bb5]; // scope 0 at ui/mir/mir_let_chains_drop_order.rs:20:9: 20:46
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:20:9: 20:46
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, Vec<usize>>) -> &'a mut <RefMut<'_, Vec<usize>> as Deref>::Target {<RefMut<'_, Vec<usize>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &mut (*_4);                 // scope 0 at ui/mir/mir_let_chains_drop_order.rs:20:9: 20:46
        _8 = ((*_1).1: usize);           // scope 0 at ui/mir/mir_let_chains_drop_order.rs:20:38: 20:45
        _2 = Vec::<usize>::push(move _3, move _8) -> [return: bb3, unwind: bb5]; // scope 0 at ui/mir/mir_let_chains_drop_order.rs:20:9: 20:46
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:20:33: 20:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<usize>, usize) {Vec::<usize>::push}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_6) -> bb4;                 // scope 0 at ui/mir/mir_let_chains_drop_order.rs:20:46: 20:47
    }

    bb4: {
        return;                          // scope 0 at ui/mir/mir_let_chains_drop_order.rs:21:6: 21:6
    }

    bb5 (cleanup): {
        drop(_6) -> bb6;                 // scope 0 at ui/mir/mir_let_chains_drop_order.rs:20:46: 20:47
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/mir/mir_let_chains_drop_order.rs:19:5: 21:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_let_chains_drop_order.rs:27:11: 27:11
    let _1: std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:28:9: 28:12
    let mut _2: std::cell::RefCell<std::vec::Vec<usize>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:28:39: 28:59
    let mut _3: std::vec::Vec<usize>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
    let mut _5: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:29:13: 29:64
    let mut _7: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:30:15: 34:6
    let mut _9: DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:38:13: 48:14
    let mut _10: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:38:13: 38:14
    let mut _11: (usize, std::option::Option<bool>); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:38:13: 48:14
    let mut _12: std::option::Option<bool>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:40:17: 47:24
    let mut _13: DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:40:17: 47:18
    let mut _14: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:40:17: 40:18
    let mut _15: (usize, std::option::Option<bool>); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:40:17: 47:18
    let mut _16: std::option::Option<bool>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:42:21: 46:22
    let mut _17: DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:42:38: 42:54
    let mut _18: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:42:38: 42:39
    let mut _19: (usize, std::option::Option<bool>); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:42:38: 42:54
    let mut _20: isize;                  // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:42:28: 42:35
    let mut _21: DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:42:88: 42:98
    let mut _22: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:42:88: 42:89
    let mut _23: (usize, std::option::Option<bool>); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:42:88: 42:98
    let mut _24: DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:49:13: 49:23
    let mut _25: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:49:13: 49:14
    let mut _26: (usize, std::option::Option<bool>); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:49:13: 49:23
    let mut _27: &DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:50:13: 50:24
    let _28: DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:50:14: 50:24
    let mut _29: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:50:14: 50:15
    let mut _30: (usize, std::option::Option<bool>); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:50:14: 50:24
    let mut _31: DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:51:13: 51:23
    let mut _32: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:51:13: 51:14
    let mut _33: (usize, std::option::Option<bool>); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:51:13: 51:23
    let mut _34: DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:52:13: 58:14
    let mut _35: DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:52:40: 52:50
    let mut _36: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:52:40: 52:41
    let mut _37: (usize, std::option::Option<bool>); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:52:40: 52:50
    let mut _38: DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:52:78: 52:88
    let mut _39: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:52:78: 52:79
    let mut _40: (usize, std::option::Option<bool>); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:52:78: 52:88
    let mut _41: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:53:17: 53:18
    let mut _42: (usize, std::option::Option<bool>); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:53:17: 53:27
    let mut _43: (&std::vec::Vec<usize>, &std::vec::Vec<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _44: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _45: std::vec::Vec<usize>;       // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:60:20: 60:25
    let mut _46: &[closure@ui/mir/mir_let_chains_drop_order.rs:30:15: 30:27]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:60:20: 60:23
    let mut _47: ();                     // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:60:20: 60:25
    let mut _48: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _49: std::vec::Vec<usize>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _50: std::boxed::Box<[usize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _51: std::boxed::Box<[usize; 5]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _52: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _53: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _54: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _55: std::boxed::Box<[usize; 5]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _58: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _59: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _60: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _61: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _63: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _64: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _65: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _66: &std::vec::Vec<usize>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _67: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _68: &std::vec::Vec<usize>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _69: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _70: (&std::vec::Vec<usize>, &std::vec::Vec<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _71: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _72: std::vec::Vec<usize>;       // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:62:16: 62:21
    let mut _73: &[closure@ui/mir/mir_let_chains_drop_order.rs:30:15: 30:27]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:62:16: 62:19
    let mut _74: ();                     // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:62:16: 62:21
    let mut _75: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _76: std::vec::Vec<usize>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _77: std::boxed::Box<[usize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _78: std::boxed::Box<[usize; 5]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _79: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _80: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _81: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _82: std::boxed::Box<[usize; 5]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _85: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _86: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _87: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _88: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _90: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _91: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _92: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _93: &std::vec::Vec<usize>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _94: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _95: &std::vec::Vec<usize>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _96: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _97: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:64:13: 91:7
    let mut _98: [closure@ui/mir/mir_let_chains_drop_order.rs:64:38: 64:40]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:64:38: 91:6
    let mut _99: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:64:38: 91:6
    let mut _100: (&std::vec::Vec<usize>, &std::vec::Vec<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _101: &std::vec::Vec<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _102: std::vec::Vec<usize>;      // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:92:16: 92:21
    let mut _103: &[closure@ui/mir/mir_let_chains_drop_order.rs:30:15: 30:27]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:92:16: 92:19
    let mut _104: ();                    // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:92:16: 92:21
    let mut _105: &std::vec::Vec<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _106: std::vec::Vec<usize>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _107: std::boxed::Box<[usize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _108: std::boxed::Box<[usize; 10]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _109: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _110: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _111: *mut u8;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _112: std::boxed::Box<[usize; 10]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _115: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _116: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _117: &std::vec::Vec<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _118: &std::vec::Vec<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _120: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _121: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _122: &std::vec::Vec<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _123: &std::vec::Vec<usize>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _124: &std::vec::Vec<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _125: &std::vec::Vec<usize>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _126: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _127: bool;                  // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    let mut _128: *const [usize; 5];     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _129: *const [usize; 5];     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _130: *const [usize; 10];    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug log => _1;                 // in scope 1 at ui/mir/mir_let_chains_drop_order.rs:28:9: 28:12
        let _4: [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 1 at ui/mir/mir_let_chains_drop_order.rs:29:9: 29:10
        scope 2 {
            debug d => _4;               // in scope 2 at ui/mir/mir_let_chains_drop_order.rs:29:9: 29:10
            let _6: [closure@ui/mir/mir_let_chains_drop_order.rs:30:15: 30:27]; // in scope 2 at ui/mir/mir_let_chains_drop_order.rs:30:9: 30:12
            scope 3 {
                debug get => _6;         // in scope 3 at ui/mir/mir_let_chains_drop_order.rs:30:9: 30:12
                let _8: (DropLogger<'_, std::option::Option<bool>>, DropLogger<'_, std::option::Option<bool>>, &DropLogger<'_, std::option::Option<bool>>, DropLogger<'_, std::option::Option<bool>>, DropLogger<'_, std::option::Option<bool>>); // in scope 3 at ui/mir/mir_let_chains_drop_order.rs:37:13: 37:15
                let _83: &std::vec::Vec<usize>; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _84: &std::vec::Vec<usize>; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                scope 4 {
                    debug _x => _8;      // in scope 4 at ui/mir/mir_let_chains_drop_order.rs:37:13: 37:15
                    let _56: &std::vec::Vec<usize>; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _57: &std::vec::Vec<usize>; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    scope 5 {
                    }
                    scope 6 {
                        debug left_val => _56; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _57; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _62: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 7 {
                            debug kind => _62; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
                scope 8 {
                }
                scope 9 {
                    debug left_val => _83; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _84; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _89: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 10 {
                        debug kind => _89; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 11 {
                    let _113: &std::vec::Vec<usize>; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _114: &std::vec::Vec<usize>; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    scope 12 {
                    }
                    scope 13 {
                        debug left_val => _113; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _114; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _119: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 14 {
                            debug kind => _119; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _127 = const false;              // scope 0 at ui/mir/mir_let_chains_drop_order.rs:28:9: 28:12
        _3 = Vec::<usize>::new() -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<usize> {Vec::<usize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = RefCell::<Vec<usize>>::new(move _3) -> bb2; // scope 0 at ui/mir/mir_let_chains_drop_order.rs:28:39: 28:59
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:28:39: 28:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Vec<usize>) -> RefCell<Vec<usize>> {RefCell::<Vec<usize>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = AssertUnwindSafe::<RefCell<Vec<usize>>>(move _2); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:28:15: 28:60
        _5 = &_1;                        // scope 1 at ui/mir/mir_let_chains_drop_order.rs:29:13: 29:64
        _4 = [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] { log: move _5 }; // scope 1 at ui/mir/mir_let_chains_drop_order.rs:29:13: 29:64
                                         // closure
                                         // + def_id: DefId(0:18 ~ mir_let_chains_drop_order[ceee]::main::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn((usize, std::option::Option<bool>)) -> DropLogger<'_, std::option::Option<bool>>,
                                         //     (&std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>,),
                                         // ]
        _7 = &_1;                        // scope 2 at ui/mir/mir_let_chains_drop_order.rs:30:15: 34:6
        _6 = [closure@ui/mir/mir_let_chains_drop_order.rs:30:15: 30:27] { log: move _7 }; // scope 2 at ui/mir/mir_let_chains_drop_order.rs:30:15: 34:6
                                         // closure
                                         // + def_id: DefId(0:19 ~ mir_let_chains_drop_order[ceee]::main::{closure#1})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::vec::Vec<usize>,
                                         //     (&std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>,),
                                         // ]
        _10 = &_4;                       // scope 3 at ui/mir/mir_let_chains_drop_order.rs:38:13: 38:14
        _14 = &_4;                       // scope 3 at ui/mir/mir_let_chains_drop_order.rs:40:17: 40:18
        _18 = &_4;                       // scope 3 at ui/mir/mir_let_chains_drop_order.rs:42:38: 42:39
        _19 = const (2_usize, Option::<bool>::Some(true)); // scope 3 at ui/mir/mir_let_chains_drop_order.rs:42:38: 42:54
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:42:38: 42:54
                                         // + literal: Const { ty: (usize, Option<bool>), val: Value(ByRef(..)) }
        _17 = <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call(move _18, move _19) -> [return: bb3, unwind: bb77]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:42:38: 42:54
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:42:38: 42:39
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], (usize, Option<bool>)) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as FnOnce<(usize, Option<bool>)>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call}, val: Value(<ZST>) }
    }

    bb3: {
        _20 = discriminant((_17.0: std::option::Option<bool>)); // scope 3 at ui/mir/mir_let_chains_drop_order.rs:42:28: 42:35
        switchInt(move _20) -> [1: bb4, otherwise: bb6]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:42:28: 42:35
    }

    bb4: {
        _22 = &_4;                       // scope 3 at ui/mir/mir_let_chains_drop_order.rs:42:88: 42:89
        _23 = const (3_usize, Option::<bool>::None); // scope 3 at ui/mir/mir_let_chains_drop_order.rs:42:88: 42:98
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:42:88: 42:98
                                         // + literal: Const { ty: (usize, Option<bool>), val: Value(ByRef(..)) }
        _21 = <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call(move _22, move _23) -> [return: bb5, unwind: bb76]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:42:88: 42:98
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:42:88: 42:89
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], (usize, Option<bool>)) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as FnOnce<(usize, Option<bool>)>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call}, val: Value(<ZST>) }
    }

    bb5: {
        _127 = const true;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:42:97: 42:98
        _16 = const Option::<bool>::None; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:43:25: 43:29
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:43:25: 43:29
                                         // + literal: Const { ty: Option<bool>, val: Value(Scalar(0x02)) }
        goto -> bb7;                     // scope 3 at ui/mir/mir_let_chains_drop_order.rs:42:21: 46:22
    }

    bb6: {
        _16 = const Option::<bool>::Some(true); // scope 3 at ui/mir/mir_let_chains_drop_order.rs:45:25: 45:35
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:45:25: 45:35
                                         // + literal: Const { ty: Option<bool>, val: Value(Scalar(0x01)) }
        goto -> bb7;                     // scope 3 at ui/mir/mir_let_chains_drop_order.rs:42:21: 46:22
    }

    bb7: {
        _15 = (const 1_usize, move _16); // scope 3 at ui/mir/mir_let_chains_drop_order.rs:40:17: 47:18
        _13 = <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call(move _14, move _15) -> [return: bb8, unwind: bb86]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:40:17: 47:18
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:40:17: 40:18
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], (usize, Option<bool>)) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as FnOnce<(usize, Option<bool>)>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call}, val: Value(<ZST>) }
    }

    bb8: {
        _12 = (_13.0: std::option::Option<bool>); // scope 3 at ui/mir/mir_let_chains_drop_order.rs:40:17: 47:24
        _11 = (const 0_usize, move _12); // scope 3 at ui/mir/mir_let_chains_drop_order.rs:38:13: 48:14
        _9 = <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call(move _10, move _11) -> [return: bb9, unwind: bb75]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:38:13: 48:14
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:38:13: 38:14
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], (usize, Option<bool>)) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as FnOnce<(usize, Option<bool>)>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call}, val: Value(<ZST>) }
    }

    bb9: {
        _25 = &_4;                       // scope 3 at ui/mir/mir_let_chains_drop_order.rs:49:13: 49:14
        _26 = const (4_usize, Option::<bool>::None); // scope 3 at ui/mir/mir_let_chains_drop_order.rs:49:13: 49:23
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:49:13: 49:23
                                         // + literal: Const { ty: (usize, Option<bool>), val: Value(ByRef(..)) }
        _24 = <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call(move _25, move _26) -> [return: bb10, unwind: bb74]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:49:13: 49:23
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:49:13: 49:14
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], (usize, Option<bool>)) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as FnOnce<(usize, Option<bool>)>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call}, val: Value(<ZST>) }
    }

    bb10: {
        _29 = &_4;                       // scope 3 at ui/mir/mir_let_chains_drop_order.rs:50:14: 50:15
        _30 = const (5_usize, Option::<bool>::None); // scope 3 at ui/mir/mir_let_chains_drop_order.rs:50:14: 50:24
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:50:14: 50:24
                                         // + literal: Const { ty: (usize, Option<bool>), val: Value(ByRef(..)) }
        _28 = <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call(move _29, move _30) -> [return: bb11, unwind: bb73]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:50:14: 50:24
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:50:14: 50:15
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], (usize, Option<bool>)) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as FnOnce<(usize, Option<bool>)>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call}, val: Value(<ZST>) }
    }

    bb11: {
        _27 = &_28;                      // scope 3 at ui/mir/mir_let_chains_drop_order.rs:50:13: 50:24
        _32 = &_4;                       // scope 3 at ui/mir/mir_let_chains_drop_order.rs:51:13: 51:14
        _33 = const (6_usize, Option::<bool>::None); // scope 3 at ui/mir/mir_let_chains_drop_order.rs:51:13: 51:23
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:51:13: 51:23
                                         // + literal: Const { ty: (usize, Option<bool>), val: Value(ByRef(..)) }
        _31 = <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call(move _32, move _33) -> [return: bb12, unwind: bb68]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:51:13: 51:23
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:51:13: 51:14
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], (usize, Option<bool>)) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as FnOnce<(usize, Option<bool>)>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call}, val: Value(<ZST>) }
    }

    bb12: {
        _36 = &_4;                       // scope 3 at ui/mir/mir_let_chains_drop_order.rs:52:40: 52:41
        _37 = const (7_usize, Option::<bool>::None); // scope 3 at ui/mir/mir_let_chains_drop_order.rs:52:40: 52:50
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:52:40: 52:50
                                         // + literal: Const { ty: (usize, Option<bool>), val: Value(ByRef(..)) }
        _35 = <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call(move _36, move _37) -> [return: bb13, unwind: bb67]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:52:40: 52:50
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:52:40: 52:41
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], (usize, Option<bool>)) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as FnOnce<(usize, Option<bool>)>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call}, val: Value(<ZST>) }
    }

    bb13: {
        _39 = &_4;                       // scope 3 at ui/mir/mir_let_chains_drop_order.rs:52:78: 52:79
        _40 = const (8_usize, Option::<bool>::None); // scope 3 at ui/mir/mir_let_chains_drop_order.rs:52:78: 52:88
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:52:78: 52:88
                                         // + literal: Const { ty: (usize, Option<bool>), val: Value(ByRef(..)) }
        _38 = <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call(move _39, move _40) -> [return: bb14, unwind: bb63]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:52:78: 52:88
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:52:78: 52:79
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], (usize, Option<bool>)) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as FnOnce<(usize, Option<bool>)>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call}, val: Value(<ZST>) }
    }

    bb14: {
        _41 = &_4;                       // scope 3 at ui/mir/mir_let_chains_drop_order.rs:53:17: 53:18
        _42 = const (9_usize, Option::<bool>::None); // scope 3 at ui/mir/mir_let_chains_drop_order.rs:53:17: 53:27
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:53:17: 53:27
                                         // + literal: Const { ty: (usize, Option<bool>), val: Value(ByRef(..)) }
        _34 = <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call(move _41, move _42) -> [return: bb15, unwind: bb59]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:53:17: 53:27
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:53:17: 53:18
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], (usize, Option<bool>)) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as FnOnce<(usize, Option<bool>)>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call}, val: Value(<ZST>) }
    }

    bb15: {
        _8 = (move _9, move _24, move _27, move _31, move _34); // scope 3 at ui/mir/mir_let_chains_drop_order.rs:37:18: 59:10
        drop(_38) -> [return: bb16, unwind: bb55]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }

    bb16: {
        drop(_35) -> [return: bb17, unwind: bb56]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }

    bb17: {
        drop(_13) -> [return: bb80, unwind: bb82]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }

    bb18: {
        _127 = const false;              // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
        drop(_17) -> [return: bb19, unwind: bb58]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }

    bb19: {
        _46 = &_6;                       // scope 4 at ui/mir/mir_let_chains_drop_order.rs:60:20: 60:23
        _45 = <[closure@ui/mir/mir_let_chains_drop_order.rs:30:15: 30:27] as Fn<()>>::call(move _46, move _47) -> [return: bb20, unwind: bb58]; // scope 4 at ui/mir/mir_let_chains_drop_order.rs:60:20: 60:25
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:60:20: 60:23
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:30:15: 30:27], ()) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:30:15: 30:27] as FnOnce<()>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:30:15: 30:27] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb20: {
        _44 = &_45;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _52 = const 40_usize;            // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _53 = const 8_usize;             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _54 = alloc::alloc::exchange_malloc(move _52, move _53) -> [return: bb21, unwind: bb54]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb21: {
        _55 = ShallowInitBox(move _54, [usize; 5]); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _128 = (((_55.0: std::ptr::Unique<[usize; 5]>).0: std::ptr::NonNull<[usize; 5]>).0: *const [usize; 5]); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_128) = [const 8_usize, const 7_usize, const 1_usize, const 3_usize, const 2_usize]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _51 = move _55;                  // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _50 = move _51 as std::boxed::Box<[usize]> (Pointer(Unsize)); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _49 = slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _50) -> [return: bb22, unwind: bb54]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Box<[usize]>) -> Vec<usize> {slice::<impl [usize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb22: {
        _48 = &_49;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _43 = (move _44, move _48);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _56 = (_43.0: &std::vec::Vec<usize>); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _57 = (_43.1: &std::vec::Vec<usize>); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _60 = _56;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _61 = _57;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _59 = <Vec<usize> as PartialEq>::eq(move _60, move _61) -> [return: bb23, unwind: bb53]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<usize>, &'b Vec<usize>) -> bool {<Vec<usize> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb23: {
        _58 = Not(move _59);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _58) -> [0: bb25, otherwise: bb24]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb24: {
        _62 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _64 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _66 = _56;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _65 = _66;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _68 = _57;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _67 = _68;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _69 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _63 = core::panicking::assert_failed::<Vec<usize>, Vec<usize>>(move _64, move _65, move _67, move _69) -> bb53; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<usize>, &'b Vec<usize>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<usize>, Vec<usize>>}, val: Value(<ZST>) }
    }

    bb25: {
        drop(_49) -> [return: bb26, unwind: bb54]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb26: {
        drop(_45) -> [return: bb27, unwind: bb58]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb27: {
        drop(_8) -> [return: bb28, unwind: bb72]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:61:5: 61:6
    }

    bb28: {
        drop(_28) -> [return: bb29, unwind: bb77]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:61:5: 61:6
    }

    bb29: {
        _73 = &_6;                       // scope 3 at ui/mir/mir_let_chains_drop_order.rs:62:16: 62:19
        _72 = <[closure@ui/mir/mir_let_chains_drop_order.rs:30:15: 30:27] as Fn<()>>::call(move _73, move _74) -> [return: bb30, unwind: bb77]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:62:16: 62:21
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:62:16: 62:19
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:30:15: 30:27], ()) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:30:15: 30:27] as FnOnce<()>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:30:15: 30:27] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb30: {
        _71 = &_72;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _79 = const 40_usize;            // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _80 = const 8_usize;             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _81 = alloc::alloc::exchange_malloc(move _79, move _80) -> [return: bb31, unwind: bb52]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb31: {
        _82 = ShallowInitBox(move _81, [usize; 5]); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _129 = (((_82.0: std::ptr::Unique<[usize; 5]>).0: std::ptr::NonNull<[usize; 5]>).0: *const [usize; 5]); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_129) = [const 0_usize, const 4_usize, const 6_usize, const 9_usize, const 5_usize]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _78 = move _82;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _77 = move _78 as std::boxed::Box<[usize]> (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _76 = slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _77) -> [return: bb32, unwind: bb52]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(Box<[usize]>) -> Vec<usize> {slice::<impl [usize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb32: {
        _75 = &_76;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _70 = (move _71, move _75);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _83 = (_70.0: &std::vec::Vec<usize>); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _84 = (_70.1: &std::vec::Vec<usize>); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _87 = _83;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _88 = _84;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _86 = <Vec<usize> as PartialEq>::eq(move _87, move _88) -> [return: bb33, unwind: bb51]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<usize>, &'b Vec<usize>) -> bool {<Vec<usize> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb33: {
        _85 = Not(move _86);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _85) -> [0: bb35, otherwise: bb34]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb34: {
        _89 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _91 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _93 = _83;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _92 = _93;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _95 = _84;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _94 = _95;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _96 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _90 = core::panicking::assert_failed::<Vec<usize>, Vec<usize>>(move _91, move _92, move _94, move _96) -> bb51; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<usize>, &'b Vec<usize>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<usize>, Vec<usize>>}, val: Value(<ZST>) }
    }

    bb35: {
        drop(_76) -> [return: bb36, unwind: bb52]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb36: {
        drop(_72) -> [return: bb37, unwind: bb77]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb37: {
        _99 = &_4;                       // scope 3 at ui/mir/mir_let_chains_drop_order.rs:64:38: 91:6
        _98 = [closure@ui/mir/mir_let_chains_drop_order.rs:64:38: 64:40] { d: move _99 }; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:64:38: 91:6
                                         // closure
                                         // + def_id: DefId(0:20 ~ mir_let_chains_drop_order[ceee]::main::{closure#2})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (&[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24],),
                                         // ]
        _97 = catch_unwind::<[closure@ui/mir/mir_let_chains_drop_order.rs:64:38: 64:40], ()>(move _98) -> [return: bb38, unwind: bb77]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:64:13: 91:7
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:64:13: 64:37
                                         // + literal: Const { ty: fn([closure@ui/mir/mir_let_chains_drop_order.rs:64:38: 64:40]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/mir/mir_let_chains_drop_order.rs:64:38: 64:40], ()>}, val: Value(<ZST>) }
    }

    bb38: {
        drop(_97) -> [return: bb39, unwind: bb77]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:91:7: 91:8
    }

    bb39: {
        _103 = &_6;                      // scope 11 at ui/mir/mir_let_chains_drop_order.rs:92:16: 92:19
        _102 = <[closure@ui/mir/mir_let_chains_drop_order.rs:30:15: 30:27] as Fn<()>>::call(move _103, move _104) -> [return: bb40, unwind: bb77]; // scope 11 at ui/mir/mir_let_chains_drop_order.rs:92:16: 92:21
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:92:16: 92:19
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:30:15: 30:27], ()) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:30:15: 30:27] as FnOnce<()>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:30:15: 30:27] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb40: {
        _101 = &_102;                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _109 = const 80_usize;           // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _110 = const 8_usize;            // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _111 = alloc::alloc::exchange_malloc(move _109, move _110) -> [return: bb41, unwind: bb50]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb41: {
        _112 = ShallowInitBox(move _111, [usize; 10]); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _130 = (((_112.0: std::ptr::Unique<[usize; 10]>).0: std::ptr::NonNull<[usize; 10]>).0: *const [usize; 10]); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_130) = [const 20_usize, const 17_usize, const 15_usize, const 11_usize, const 19_usize, const 18_usize, const 16_usize, const 12_usize, const 14_usize, const 13_usize]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _108 = move _112;                // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _107 = move _108 as std::boxed::Box<[usize]> (Pointer(Unsize)); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _106 = slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _107) -> [return: bb42, unwind: bb50]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(Box<[usize]>) -> Vec<usize> {slice::<impl [usize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb42: {
        _105 = &_106;                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _100 = (move _101, move _105);   // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _113 = (_100.0: &std::vec::Vec<usize>); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _114 = (_100.1: &std::vec::Vec<usize>); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _117 = _113;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _118 = _114;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _116 = <Vec<usize> as PartialEq>::eq(move _117, move _118) -> [return: bb43, unwind: bb49]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<usize>, &'b Vec<usize>) -> bool {<Vec<usize> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb43: {
        _115 = Not(move _116);           // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _115) -> [0: bb45, otherwise: bb44]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb44: {
        _119 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _121 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _123 = _113;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _122 = _123;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _125 = _114;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _124 = _125;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _126 = Option::<Arguments<'_>>::None; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _120 = core::panicking::assert_failed::<Vec<usize>, Vec<usize>>(move _121, move _122, move _124, move _126) -> bb49; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<usize>, &'b Vec<usize>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<usize>, Vec<usize>>}, val: Value(<ZST>) }
    }

    bb45: {
        drop(_106) -> [return: bb46, unwind: bb50]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb46: {
        drop(_102) -> [return: bb47, unwind: bb77]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb47: {
        drop(_1) -> bb48;                // scope 0 at ui/mir/mir_let_chains_drop_order.rs:93:1: 93:2
    }

    bb48: {
        return;                          // scope 0 at ui/mir/mir_let_chains_drop_order.rs:93:2: 93:2
    }

    bb49 (cleanup): {
        drop(_106) -> bb50;              // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb50 (cleanup): {
        drop(_102) -> bb77;              // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb51 (cleanup): {
        drop(_76) -> bb52;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb52 (cleanup): {
        drop(_72) -> bb77;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb53 (cleanup): {
        drop(_49) -> bb54;               // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb54 (cleanup): {
        drop(_45) -> bb58;               // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb55 (cleanup): {
        drop(_35) -> bb56;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }

    bb56 (cleanup): {
        drop(_13) -> bb82;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }

    bb57 (cleanup): {
        drop(_17) -> bb58;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }

    bb58 (cleanup): {
        drop(_8) -> bb72;                // scope 3 at ui/mir/mir_let_chains_drop_order.rs:61:5: 61:6
    }

    bb59 (cleanup): {
        drop(_31) -> bb60;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:9: 59:10
    }

    bb60 (cleanup): {
        drop(_24) -> bb61;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:9: 59:10
    }

    bb61 (cleanup): {
        drop(_9) -> bb62;                // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:9: 59:10
    }

    bb62 (cleanup): {
        drop(_38) -> bb66;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }

    bb63 (cleanup): {
        drop(_31) -> bb64;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:9: 59:10
    }

    bb64 (cleanup): {
        drop(_24) -> bb65;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:9: 59:10
    }

    bb65 (cleanup): {
        drop(_9) -> bb66;                // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:9: 59:10
    }

    bb66 (cleanup): {
        drop(_35) -> bb70;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }

    bb67 (cleanup): {
        drop(_31) -> bb68;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:9: 59:10
    }

    bb68 (cleanup): {
        drop(_24) -> bb69;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:9: 59:10
    }

    bb69 (cleanup): {
        drop(_9) -> bb70;                // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:9: 59:10
    }

    bb70 (cleanup): {
        drop(_13) -> bb84;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }

    bb71 (cleanup): {
        drop(_17) -> bb72;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }

    bb72 (cleanup): {
        drop(_28) -> bb77;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:61:5: 61:6
    }

    bb73 (cleanup): {
        drop(_24) -> bb74;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:9: 59:10
    }

    bb74 (cleanup): {
        drop(_9) -> bb75;                // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:9: 59:10
    }

    bb75 (cleanup): {
        drop(_13) -> bb86;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }

    bb76 (cleanup): {
        drop(_17) -> bb77;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }

    bb77 (cleanup): {
        drop(_1) -> bb78;                // scope 0 at ui/mir/mir_let_chains_drop_order.rs:93:1: 93:2
    }

    bb78 (cleanup): {
        resume;                          // scope 0 at ui/mir/mir_let_chains_drop_order.rs:27:1: 93:2
    }

    bb79: {
        drop(_21) -> [return: bb18, unwind: bb57]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }

    bb80: {
        switchInt(_127) -> [0: bb18, otherwise: bb79]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }

    bb81 (cleanup): {
        drop(_21) -> bb57;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }

    bb82 (cleanup): {
        switchInt(_127) -> [0: bb57, otherwise: bb81]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }

    bb83 (cleanup): {
        drop(_21) -> bb71;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }

    bb84 (cleanup): {
        switchInt(_127) -> [0: bb71, otherwise: bb83]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }

    bb85 (cleanup): {
        drop(_21) -> bb76;               // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }

    bb86 (cleanup): {
        switchInt(_127) -> [0: bb76, otherwise: bb85]; // scope 3 at ui/mir/mir_let_chains_drop_order.rs:59:10: 59:11
    }
}

fn main::{closure#0}(_1: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], _2: usize, _3: Option<bool>) -> DropLogger<'_, Option<bool>> {
    debug id => _2;                      // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:29:14: 29:16
    debug extra => _3;                   // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:29:18: 29:23
    debug log => (*((*_1).0: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>)); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:28:9: 28:12
    let mut _0: DropLogger<'_, std::option::Option<bool>>; // return place in scope 0 at ui/mir/mir_let_chains_drop_order.rs:29:25: 29:25
    let mut _4: std::option::Option<bool>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:29:38: 29:43
    let mut _5: usize;                   // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:29:49: 29:51
    let mut _6: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:29:58: 29:62
    let _7: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:29:58: 29:62
    let mut _8: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:29:13: 29:64

    bb0: {
        _4 = _3;                         // scope 0 at ui/mir/mir_let_chains_drop_order.rs:29:38: 29:43
        _5 = _2;                         // scope 0 at ui/mir/mir_let_chains_drop_order.rs:29:49: 29:51
        _8 = deref_copy ((*_1).0: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:29:58: 29:62
        _7 = _8;                         // scope 0 at ui/mir/mir_let_chains_drop_order.rs:29:58: 29:62
        _6 = _7;                         // scope 0 at ui/mir/mir_let_chains_drop_order.rs:29:58: 29:62
        _0 = DropLogger::<'_, Option<bool>> { extra: move _4, id: move _5, log: move _6 }; // scope 0 at ui/mir/mir_let_chains_drop_order.rs:29:25: 29:64
        return;                          // scope 0 at ui/mir/mir_let_chains_drop_order.rs:29:64: 29:64
    }
}

fn main::{closure#1}(_1: &[closure@ui/mir/mir_let_chains_drop_order.rs:30:15: 30:27]) -> Vec<usize> {
    debug log => (*((*_1).0: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>)); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:28:9: 28:12
    let mut _0: std::vec::Vec<usize>;    // return place in scope 0 at ui/mir/mir_let_chains_drop_order.rs:30:21: 30:27
    let mut _2: std::cell::RefMut<'_, std::vec::Vec<usize>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:31:13: 31:18
    let mut _3: &std::cell::RefCell<std::vec::Vec<usize>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:31:21: 31:39
    let mut _5: &mut std::vec::Vec<usize>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:32:17: 32:28
    let mut _6: &mut std::vec::Vec<usize>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:32:17: 32:28
    let mut _7: &mut std::cell::RefMut<'_, std::vec::Vec<usize>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:32:17: 32:28
    let mut _8: std::ops::RangeFull;     // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:32:25: 32:27
    let mut _9: std::vec::Drain<'_, usize>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:33:9: 33:10
    let mut _10: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:30:15: 34:6
    scope 1 {
        debug m => _2;                   // in scope 1 at ui/mir/mir_let_chains_drop_order.rs:31:13: 31:18
        let _4: std::vec::Drain<'_, usize>; // in scope 1 at ui/mir/mir_let_chains_drop_order.rs:32:13: 32:14
        scope 2 {
            debug n => _4;               // in scope 2 at ui/mir/mir_let_chains_drop_order.rs:32:13: 32:14
        }
    }

    bb0: {
        _10 = deref_copy ((*_1).0: &std::panic::AssertUnwindSafe<std::cell::RefCell<std::vec::Vec<usize>>>); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:31:21: 31:39
        _3 = &((*_10).0: std::cell::RefCell<std::vec::Vec<usize>>); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:31:21: 31:39
        _2 = RefCell::<Vec<usize>>::borrow_mut(move _3) -> bb1; // scope 0 at ui/mir/mir_let_chains_drop_order.rs:31:21: 31:39
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:31:27: 31:37
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<usize>>) -> RefMut<'a, Vec<usize>> {RefCell::<Vec<usize>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &mut _2;                    // scope 1 at ui/mir/mir_let_chains_drop_order.rs:32:17: 32:28
        _6 = <RefMut<'_, Vec<usize>> as DerefMut>::deref_mut(move _7) -> [return: bb2, unwind: bb6]; // scope 1 at ui/mir/mir_let_chains_drop_order.rs:32:17: 32:28
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:32:17: 32:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, Vec<usize>>) -> &'a mut <RefMut<'_, Vec<usize>> as Deref>::Target {<RefMut<'_, Vec<usize>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &mut (*_6);                 // scope 1 at ui/mir/mir_let_chains_drop_order.rs:32:17: 32:28
        _4 = Vec::<usize>::drain::<RangeFull>(move _5, move _8) -> [return: bb3, unwind: bb6]; // scope 1 at ui/mir/mir_let_chains_drop_order.rs:32:17: 32:28
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:32:19: 32:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<usize>, RangeFull) -> std::vec::Drain<'a, usize> {Vec::<usize>::drain::<RangeFull>}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = move _4;                    // scope 2 at ui/mir/mir_let_chains_drop_order.rs:33:9: 33:10
        _0 = <std::vec::Drain<'_, usize> as Iterator>::collect::<Vec<usize>>(move _9) -> [return: bb4, unwind: bb6]; // scope 2 at ui/mir/mir_let_chains_drop_order.rs:33:9: 33:20
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:33:11: 33:18
                                         // + literal: Const { ty: fn(std::vec::Drain<'_, usize>) -> Vec<usize> {<std::vec::Drain<'_, usize> as Iterator>::collect::<Vec<usize>>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_2) -> bb5;                 // scope 0 at ui/mir/mir_let_chains_drop_order.rs:34:5: 34:6
    }

    bb5: {
        return;                          // scope 0 at ui/mir/mir_let_chains_drop_order.rs:34:6: 34:6
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/mir/mir_let_chains_drop_order.rs:34:5: 34:6
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/mir/mir_let_chains_drop_order.rs:30:15: 34:6
    }
}

fn main::{closure#2}(_1: [closure@ui/mir/mir_let_chains_drop_order.rs:64:38: 64:40]) -> () {
    debug d => (*(_1.0: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24])); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:29:9: 29:10
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_let_chains_drop_order.rs:64:41: 64:41
    let mut _2: DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:66:13: 78:14
    let mut _3: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:66:13: 66:14
    let mut _4: (usize, std::option::Option<bool>); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:66:13: 78:14
    let mut _5: std::option::Option<bool>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:68:17: 77:24
    let mut _6: DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:68:17: 77:18
    let mut _7: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:68:17: 68:18
    let mut _8: (usize, std::option::Option<bool>); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:68:17: 77:18
    let mut _9: std::option::Option<bool>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:70:21: 76:22
    let mut _10: DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:70:38: 70:55
    let mut _11: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:70:38: 70:39
    let mut _12: (usize, std::option::Option<bool>); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:70:38: 70:55
    let mut _13: isize;                  // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:70:28: 70:35
    let mut _14: DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:71:52: 71:63
    let mut _15: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:71:52: 71:53
    let mut _16: (usize, std::option::Option<bool>); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:71:52: 71:63
    let mut _17: DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:79:13: 79:24
    let mut _18: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:79:13: 79:14
    let mut _19: (usize, std::option::Option<bool>); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:79:13: 79:24
    let _20: DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:80:14: 80:25
    let mut _21: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:80:14: 80:15
    let mut _22: (usize, std::option::Option<bool>); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:80:14: 80:25
    let mut _23: DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:81:13: 81:24
    let mut _24: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:81:13: 81:14
    let mut _25: (usize, std::option::Option<bool>); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:81:13: 81:24
    let mut _26: DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:82:13: 88:14
    let mut _27: DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:82:40: 82:51
    let mut _28: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:82:40: 82:41
    let mut _29: (usize, std::option::Option<bool>); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:82:40: 82:51
    let mut _30: DropLogger<'_, std::option::Option<bool>>; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:82:79: 82:90
    let mut _31: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:82:79: 82:80
    let mut _32: (usize, std::option::Option<bool>); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:82:79: 82:90
    let mut _33: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:83:17: 83:18
    let mut _34: (usize, std::option::Option<bool>); // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:83:17: 83:28
    let mut _35: !;                      // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:89:13: 89:46
    let mut _36: InjectedFailure;        // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:89:30: 89:45
    let mut _37: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:64:38: 91:6
    let mut _38: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:64:38: 91:6
    let mut _39: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:64:38: 91:6
    let mut _40: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:64:38: 91:6
    let mut _41: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:64:38: 91:6
    let mut _42: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:64:38: 91:6
    let mut _43: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:64:38: 91:6
    let mut _44: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:64:38: 91:6
    let mut _45: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:64:38: 91:6
    let mut _46: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]; // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:64:38: 91:6
    let mut _47: bool;                   // in scope 0 at ui/mir/mir_let_chains_drop_order.rs:90:10: 90:11

    bb0: {
        _47 = const false;               // scope 0 at ui/mir/mir_let_chains_drop_order.rs:65:9: 90:10
        _37 = deref_copy (_1.0: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:66:13: 66:14
        _3 = _37;                        // scope 0 at ui/mir/mir_let_chains_drop_order.rs:66:13: 66:14
        _38 = deref_copy (_1.0: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:68:17: 68:18
        _7 = _38;                        // scope 0 at ui/mir/mir_let_chains_drop_order.rs:68:17: 68:18
        _39 = deref_copy (_1.0: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:70:38: 70:39
        _11 = _39;                       // scope 0 at ui/mir/mir_let_chains_drop_order.rs:70:38: 70:39
        _12 = const (13_usize, Option::<bool>::Some(true)); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:70:38: 70:55
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:70:38: 70:55
                                         // + literal: Const { ty: (usize, Option<bool>), val: Value(ByRef(..)) }
        _10 = <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call(move _11, move _12) -> bb1; // scope 0 at ui/mir/mir_let_chains_drop_order.rs:70:38: 70:55
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:70:38: 70:39
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], (usize, Option<bool>)) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as FnOnce<(usize, Option<bool>)>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        _13 = discriminant((_10.0: std::option::Option<bool>)); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:70:28: 70:35
        switchInt(move _13) -> [1: bb2, otherwise: bb4]; // scope 0 at ui/mir/mir_let_chains_drop_order.rs:70:28: 70:35
    }

    bb2: {
        _40 = deref_copy (_1.0: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:71:52: 71:53
        _15 = _40;                       // scope 0 at ui/mir/mir_let_chains_drop_order.rs:71:52: 71:53
        _16 = const (14_usize, Option::<bool>::None); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:71:52: 71:63
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:71:52: 71:63
                                         // + literal: Const { ty: (usize, Option<bool>), val: Value(ByRef(..)) }
        _14 = <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call(move _15, move _16) -> [return: bb3, unwind: bb30]; // scope 0 at ui/mir/mir_let_chains_drop_order.rs:71:52: 71:63
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:71:52: 71:53
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], (usize, Option<bool>)) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as FnOnce<(usize, Option<bool>)>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call}, val: Value(<ZST>) }
    }

    bb3: {
        _47 = const true;                // scope 0 at ui/mir/mir_let_chains_drop_order.rs:71:62: 71:63
        _9 = const Option::<bool>::None; // scope 0 at ui/mir/mir_let_chains_drop_order.rs:73:25: 73:29
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:73:25: 73:29
                                         // + literal: Const { ty: Option<bool>, val: Value(Scalar(0x02)) }
        goto -> bb5;                     // scope 0 at ui/mir/mir_let_chains_drop_order.rs:70:21: 76:22
    }

    bb4: {
        _9 = const Option::<bool>::Some(true); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:75:25: 75:35
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:75:25: 75:35
                                         // + literal: Const { ty: Option<bool>, val: Value(Scalar(0x01)) }
        goto -> bb5;                     // scope 0 at ui/mir/mir_let_chains_drop_order.rs:70:21: 76:22
    }

    bb5: {
        _8 = (const 12_usize, move _9);  // scope 0 at ui/mir/mir_let_chains_drop_order.rs:68:17: 77:18
        _6 = <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call(move _7, move _8) -> [return: bb6, unwind: bb33]; // scope 0 at ui/mir/mir_let_chains_drop_order.rs:68:17: 77:18
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:68:17: 68:18
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], (usize, Option<bool>)) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as FnOnce<(usize, Option<bool>)>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call}, val: Value(<ZST>) }
    }

    bb6: {
        _5 = (_6.0: std::option::Option<bool>); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:68:17: 77:24
        _4 = (const 11_usize, move _5);  // scope 0 at ui/mir/mir_let_chains_drop_order.rs:66:13: 78:14
        _2 = <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call(move _3, move _4) -> [return: bb7, unwind: bb29]; // scope 0 at ui/mir/mir_let_chains_drop_order.rs:66:13: 78:14
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:66:13: 66:14
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], (usize, Option<bool>)) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as FnOnce<(usize, Option<bool>)>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call}, val: Value(<ZST>) }
    }

    bb7: {
        _41 = deref_copy (_1.0: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:79:13: 79:14
        _18 = _41;                       // scope 0 at ui/mir/mir_let_chains_drop_order.rs:79:13: 79:14
        _19 = const (15_usize, Option::<bool>::None); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:79:13: 79:24
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:79:13: 79:24
                                         // + literal: Const { ty: (usize, Option<bool>), val: Value(ByRef(..)) }
        _17 = <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call(move _18, move _19) -> [return: bb8, unwind: bb28]; // scope 0 at ui/mir/mir_let_chains_drop_order.rs:79:13: 79:24
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:79:13: 79:14
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], (usize, Option<bool>)) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as FnOnce<(usize, Option<bool>)>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call}, val: Value(<ZST>) }
    }

    bb8: {
        _42 = deref_copy (_1.0: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:80:14: 80:15
        _21 = _42;                       // scope 0 at ui/mir/mir_let_chains_drop_order.rs:80:14: 80:15
        _22 = const (16_usize, Option::<bool>::None); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:80:14: 80:25
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:80:14: 80:25
                                         // + literal: Const { ty: (usize, Option<bool>), val: Value(ByRef(..)) }
        _20 = <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call(move _21, move _22) -> [return: bb9, unwind: bb27]; // scope 0 at ui/mir/mir_let_chains_drop_order.rs:80:14: 80:25
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:80:14: 80:15
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], (usize, Option<bool>)) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as FnOnce<(usize, Option<bool>)>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call}, val: Value(<ZST>) }
    }

    bb9: {
        _43 = deref_copy (_1.0: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:81:13: 81:14
        _24 = _43;                       // scope 0 at ui/mir/mir_let_chains_drop_order.rs:81:13: 81:14
        _25 = const (17_usize, Option::<bool>::None); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:81:13: 81:24
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:81:13: 81:24
                                         // + literal: Const { ty: (usize, Option<bool>), val: Value(ByRef(..)) }
        _23 = <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call(move _24, move _25) -> [return: bb10, unwind: bb24]; // scope 0 at ui/mir/mir_let_chains_drop_order.rs:81:13: 81:24
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:81:13: 81:14
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], (usize, Option<bool>)) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as FnOnce<(usize, Option<bool>)>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call}, val: Value(<ZST>) }
    }

    bb10: {
        _44 = deref_copy (_1.0: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:82:40: 82:41
        _28 = _44;                       // scope 0 at ui/mir/mir_let_chains_drop_order.rs:82:40: 82:41
        _29 = const (18_usize, Option::<bool>::None); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:82:40: 82:51
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:82:40: 82:51
                                         // + literal: Const { ty: (usize, Option<bool>), val: Value(ByRef(..)) }
        _27 = <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call(move _28, move _29) -> [return: bb11, unwind: bb23]; // scope 0 at ui/mir/mir_let_chains_drop_order.rs:82:40: 82:51
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:82:40: 82:41
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], (usize, Option<bool>)) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as FnOnce<(usize, Option<bool>)>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call}, val: Value(<ZST>) }
    }

    bb11: {
        _45 = deref_copy (_1.0: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:82:79: 82:80
        _31 = _45;                       // scope 0 at ui/mir/mir_let_chains_drop_order.rs:82:79: 82:80
        _32 = const (19_usize, Option::<bool>::None); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:82:79: 82:90
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:82:79: 82:90
                                         // + literal: Const { ty: (usize, Option<bool>), val: Value(ByRef(..)) }
        _30 = <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call(move _31, move _32) -> [return: bb12, unwind: bb19]; // scope 0 at ui/mir/mir_let_chains_drop_order.rs:82:79: 82:90
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:82:79: 82:80
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], (usize, Option<bool>)) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as FnOnce<(usize, Option<bool>)>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call}, val: Value(<ZST>) }
    }

    bb12: {
        _46 = deref_copy (_1.0: &[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24]); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:83:17: 83:18
        _33 = _46;                       // scope 0 at ui/mir/mir_let_chains_drop_order.rs:83:17: 83:18
        _34 = const (20_usize, Option::<bool>::None); // scope 0 at ui/mir/mir_let_chains_drop_order.rs:83:17: 83:28
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:83:17: 83:28
                                         // + literal: Const { ty: (usize, Option<bool>), val: Value(ByRef(..)) }
        _26 = <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call(move _33, move _34) -> [return: bb13, unwind: bb15]; // scope 0 at ui/mir/mir_let_chains_drop_order.rs:83:17: 83:28
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:83:17: 83:18
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24], (usize, Option<bool>)) -> <[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as FnOnce<(usize, Option<bool>)>>::Output {<[closure@ui/mir/mir_let_chains_drop_order.rs:29:13: 29:24] as Fn<(usize, Option<bool>)>>::call}, val: Value(<ZST>) }
    }

    bb13: {
        _35 = panic_any::<InjectedFailure>(move _36) -> bb14; // scope 0 at ui/mir/mir_let_chains_drop_order.rs:89:13: 89:46
                                         // mir::Constant
                                         // + span: ui/mir/mir_let_chains_drop_order.rs:89:13: 89:29
                                         // + literal: Const { ty: fn(InjectedFailure) -> ! {panic_any::<InjectedFailure>}, val: Value(<ZST>) }
    }

    bb14 (cleanup): {
        drop(_26) -> bb15;               // scope 0 at ui/mir/mir_let_chains_drop_order.rs:90:9: 90:10
    }

    bb15 (cleanup): {
        drop(_23) -> bb16;               // scope 0 at ui/mir/mir_let_chains_drop_order.rs:90:9: 90:10
    }

    bb16 (cleanup): {
        drop(_17) -> bb17;               // scope 0 at ui/mir/mir_let_chains_drop_order.rs:90:9: 90:10
    }

    bb17 (cleanup): {
        drop(_2) -> bb18;                // scope 0 at ui/mir/mir_let_chains_drop_order.rs:90:9: 90:10
    }

    bb18 (cleanup): {
        drop(_30) -> bb22;               // scope 0 at ui/mir/mir_let_chains_drop_order.rs:90:10: 90:11
    }

    bb19 (cleanup): {
        drop(_23) -> bb20;               // scope 0 at ui/mir/mir_let_chains_drop_order.rs:90:9: 90:10
    }

    bb20 (cleanup): {
        drop(_17) -> bb21;               // scope 0 at ui/mir/mir_let_chains_drop_order.rs:90:9: 90:10
    }

    bb21 (cleanup): {
        drop(_2) -> bb22;                // scope 0 at ui/mir/mir_let_chains_drop_order.rs:90:9: 90:10
    }

    bb22 (cleanup): {
        drop(_27) -> bb26;               // scope 0 at ui/mir/mir_let_chains_drop_order.rs:90:10: 90:11
    }

    bb23 (cleanup): {
        drop(_23) -> bb24;               // scope 0 at ui/mir/mir_let_chains_drop_order.rs:90:9: 90:10
    }

    bb24 (cleanup): {
        drop(_17) -> bb25;               // scope 0 at ui/mir/mir_let_chains_drop_order.rs:90:9: 90:10
    }

    bb25 (cleanup): {
        drop(_2) -> bb26;                // scope 0 at ui/mir/mir_let_chains_drop_order.rs:90:9: 90:10
    }

    bb26 (cleanup): {
        drop(_20) -> bb29;               // scope 0 at ui/mir/mir_let_chains_drop_order.rs:90:10: 90:11
    }

    bb27 (cleanup): {
        drop(_17) -> bb28;               // scope 0 at ui/mir/mir_let_chains_drop_order.rs:90:9: 90:10
    }

    bb28 (cleanup): {
        drop(_2) -> bb29;                // scope 0 at ui/mir/mir_let_chains_drop_order.rs:90:9: 90:10
    }

    bb29 (cleanup): {
        drop(_6) -> bb33;                // scope 0 at ui/mir/mir_let_chains_drop_order.rs:90:10: 90:11
    }

    bb30 (cleanup): {
        drop(_10) -> bb31;               // scope 0 at ui/mir/mir_let_chains_drop_order.rs:90:10: 90:11
    }

    bb31 (cleanup): {
        resume;                          // scope 0 at ui/mir/mir_let_chains_drop_order.rs:64:38: 91:6
    }

    bb32 (cleanup): {
        drop(_14) -> bb30;               // scope 0 at ui/mir/mir_let_chains_drop_order.rs:90:10: 90:11
    }

    bb33 (cleanup): {
        switchInt(_47) -> [0: bb30, otherwise: bb32]; // scope 0 at ui/mir/mir_let_chains_drop_order.rs:90:10: 90:11
    }
}
