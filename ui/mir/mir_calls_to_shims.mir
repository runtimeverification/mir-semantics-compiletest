// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: u32, _2: u32) -> u32 {
    debug x => _1;
    debug y => _2;
    let mut _0: u32;
    let mut _3: bool;

    bb0: {
        _3 = Eq(_2, const 0_u32);
        assert(!move _3, "attempt to divide `{}` by zero", _1) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Div(_1, _2);
        return;
    }
}

fn foo_diverges() -> ! {
    let mut _0: !;

    bb0: {
        _0 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }
}

fn test_fn_ptr(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    let mut _2: (&u32, &u32);
    let mut _3: &u32;
    let _4: u32;
    let _5: &T;
    let mut _6: (u32, u32);
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: u32;
    let mut _12: u32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&u32, &u32);
    let mut _17: &u32;
    let _18: u32;
    let mut _19: &mut T;
    let mut _20: (u32, u32);
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: u32;
    let mut _26: u32;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: (&u32, &u32);
    let mut _31: &u32;
    let _32: u32;
    let mut _33: T;
    let mut _34: (u32, u32);
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: u32;
    let mut _40: u32;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: bool;
    scope 1 {
        debug as_fn => <T as Fn<(u32, u32)>>::call;
        let _7: &u32;
        let _8: &u32;
        let mut _46: &u32;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
        scope 4 {
            debug as_fn_mut => <T as FnMut<(u32, u32)>>::call_mut;
            let _21: &u32;
            let _22: &u32;
            let mut _45: &u32;
            scope 5 {
                debug left_val => _21;
                debug right_val => _22;
                let _27: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _27;
                }
            }
            scope 7 {
                debug as_fn_once => <T as FnOnce<(u32, u32)>>::call_once;
                let _35: &u32;
                let _36: &u32;
                let mut _44: &u32;
                scope 8 {
                    debug left_val => _35;
                    debug right_val => _36;
                    let _41: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _41;
                    }
                }
            }
        }
    }

    bb0: {
        _47 = const false;
        _47 = const true;
        _5 = &_1;
        _6 = (const 9_u32, const 3_u32);
        _4 = <T as Fn<(u32, u32)>>::call(_5, move _6) -> [return: bb1, unwind: bb12];
    }

    bb1: {
        _3 = &_4;
        _46 = const _;
        _2 = (move _3, _46);
        _7 = (_2.0: &u32);
        _8 = (_2.1: &u32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<u32, u32>(move _13, _7, _8, move _15) -> bb12;
    }

    bb3: {
        _19 = &mut _1;
        _20 = (const 18_u32, const 3_u32);
        _18 = <T as FnMut<(u32, u32)>>::call_mut(_19, move _20) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        _17 = &_18;
        _45 = const _;
        _16 = (move _17, _45);
        _21 = (_16.0: &u32);
        _22 = (_16.1: &u32);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<u32, u32>(move _27, _21, _22, move _29) -> bb12;
    }

    bb6: {
        _47 = const false;
        _33 = move _1;
        _34 = (const 24_u32, const 3_u32);
        _32 = <T as FnOnce<(u32, u32)>>::call_once(move _33, move _34) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _31 = &_32;
        _44 = const _;
        _30 = (move _31, _44);
        _35 = (_30.0: &u32);
        _36 = (_30.1: &u32);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<u32, u32>(move _41, _35, _36, move _43) -> bb12;
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        resume;
    }

    bb11 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate];
    }

    bb12 (cleanup): {
        switchInt(_47) -> [0: bb10, otherwise: bb11];
    }
}

promoted[0] in test_fn_ptr: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 8_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in test_fn_ptr: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 6_u32;
        _0 = &_1;
        return;
    }
}

promoted[2] in test_fn_ptr: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 3_u32;
        _0 = &_1;
        return;
    }
}

fn assert_panics(_1: F) -> () {
    debug f => _1;
    let mut _0: ();
    let _2: std::panic::AssertUnwindSafe<F>;
    let mut _4: [closure@ui/mir/mir_calls_to_shims.rs:25:38: 25:45];
    let mut _5: isize;
    let _6: !;
    scope 1 {
        debug f => _2;
        let _3: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 2 {
            debug result => _3;
            scope 3 {
            }
        }
    }

    bb0: {
        _2 = AssertUnwindSafe::<F>(move _1);
        _4 = [closure@ui/mir/mir_calls_to_shims.rs:25:38: 25:45] { f: move _2 };
        _3 = catch_unwind::<[closure@ui/mir/mir_calls_to_shims.rs:25:38: 25:45], ()>(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = begin_panic::<&str>(const "diverging function returned") -> bb5;
    }

    bb3: {
        drop(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_3) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn assert_panics::{closure#0}(_1: [closure@ui/mir/mir_calls_to_shims.rs:25:38: 25:45]) -> () {
    debug f => (_1.0: std::panic::AssertUnwindSafe<F>);
    let mut _0: ();
    let mut _2: F;

    bb0: {
        _2 = move ((_1.0: std::panic::AssertUnwindSafe<F>).0: F);
        _0 = <F as FnOnce<()>>::call_once(move _2, const ()) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn test_fn_ptr_panic(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    let _2: for<'a> extern "rust-call" fn(&'a T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::Fn<()>>::call};
    let _3: ();
    let mut _4: [closure@ui/mir/mir_calls_to_shims.rs:37:19: 37:21];
    let mut _5: &for<'a> extern "rust-call" fn(&'a T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::Fn<()>>::call};
    let mut _6: &T;
    let _8: ();
    let mut _9: [closure@ui/mir/mir_calls_to_shims.rs:39:19: 39:21];
    let mut _10: &for<'a> extern "rust-call" fn(&'a mut T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::FnMut<()>>::call_mut};
    let mut _11: &mut T;
    let _13: ();
    let mut _14: [closure@ui/mir/mir_calls_to_shims.rs:41:19: 41:21];
    let mut _15: &extern "rust-call" fn(T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::FnOnce<()>>::call_once};
    let mut _16: bool;
    scope 1 {
        debug as_fn => <T as Fn<()>>::call;
        let _7: for<'a> extern "rust-call" fn(&'a mut T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::FnMut<()>>::call_mut};
        scope 2 {
            debug as_fn_mut => <T as FnMut<()>>::call_mut;
            let _12: extern "rust-call" fn(T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::FnOnce<()>>::call_once};
            scope 3 {
                debug as_fn_once => <T as FnOnce<()>>::call_once;
            }
        }
    }

    bb0: {
        _16 = const false;
        _16 = const true;
        _5 = &_2;
        _6 = &_1;
        _4 = [closure@ui/mir/mir_calls_to_shims.rs:37:19: 37:21] { as_fn: move _5, t: move _6 };
        _3 = assert_panics::<[closure@ui/mir/mir_calls_to_shims.rs:37:19: 37:21]>(move _4) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _10 = &_7;
        _11 = &mut _1;
        _9 = [closure@ui/mir/mir_calls_to_shims.rs:39:19: 39:21] { as_fn_mut: move _10, t: move _11 };
        _8 = assert_panics::<[closure@ui/mir/mir_calls_to_shims.rs:39:19: 39:21]>(move _9) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _15 = &_12;
        _16 = const false;
        _14 = [closure@ui/mir/mir_calls_to_shims.rs:41:19: 41:21] { as_fn_once: move _15, t: move _1 };
        _13 = assert_panics::<[closure@ui/mir/mir_calls_to_shims.rs:41:19: 41:21]>(move _14) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb6 (cleanup): {
        switchInt(_16) -> [0: bb4, otherwise: bb5];
    }
}

fn test_fn_ptr_panic::{closure#0}(_1: [closure@ui/mir/mir_calls_to_shims.rs:37:19: 37:21]) -> () {
    debug as_fn => <T as Fn<()>>::call;
    debug t => (*(_1.1: &T));
    let mut _0: ();
    let mut _2: !;
    let mut _3: &T;

    bb0: {
        _3 = deref_copy (_1.1: &T);
        _2 = <T as Fn<()>>::call(_3, const ()) -> unwind continue;
    }
}

fn test_fn_ptr_panic::{closure#1}(_1: [closure@ui/mir/mir_calls_to_shims.rs:39:19: 39:21]) -> () {
    debug as_fn_mut => <T as FnMut<()>>::call_mut;
    debug t => (*(_1.1: &mut T));
    let mut _0: ();
    let mut _2: !;
    let mut _3: &mut T;

    bb0: {
        _3 = deref_copy (_1.1: &mut T);
        _2 = <T as FnMut<()>>::call_mut(_3, const ()) -> unwind continue;
    }
}

fn test_fn_ptr_panic::{closure#2}(_1: [closure@ui/mir/mir_calls_to_shims.rs:41:19: 41:21]) -> () {
    debug as_fn_once => <T as FnOnce<()>>::call_once;
    debug t => (_1.1: T);
    let mut _0: ();
    let mut _2: !;
    let mut _3: T;

    bb0: {
        _3 = move (_1.1: T);
        _2 = <T as FnOnce<()>>::call_once(move _3, const ()) -> unwind continue;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let mut _3: fn(u32, u32) -> u32;
    let _4: ();
    let _5: ();
    let mut _6: fn() -> !;

    bb0: {
        _1 = test_fn_ptr::<fn(u32, u32) -> u32 {foo}>(foo) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = foo as fn(u32, u32) -> u32 (Pointer(ReifyFnPointer));
        _2 = test_fn_ptr::<fn(u32, u32) -> u32>(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = test_fn_ptr_panic::<fn() -> ! {foo_diverges}>(foo_diverges) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = foo_diverges as fn() -> ! (Pointer(ReifyFnPointer));
        _5 = test_fn_ptr_panic::<fn() -> !>(move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}
