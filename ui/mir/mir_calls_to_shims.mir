// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: u32, _2: u32) -> u32 {
    debug x => _1;                       // in scope 0 at ui/mir/mir_calls_to_shims.rs:9:8: 9:9
    debug y => _2;                       // in scope 0 at ui/mir/mir_calls_to_shims.rs:9:16: 9:17
    let mut _0: u32;                     // return place in scope 0 at ui/mir/mir_calls_to_shims.rs:9:27: 9:30
    let mut _3: u32;                     // in scope 0 at ui/mir/mir_calls_to_shims.rs:9:33: 9:34
    let mut _4: u32;                     // in scope 0 at ui/mir/mir_calls_to_shims.rs:9:35: 9:36
    let mut _5: bool;                    // in scope 0 at ui/mir/mir_calls_to_shims.rs:9:33: 9:36

    bb0: {
        _3 = _1;                         // scope 0 at ui/mir/mir_calls_to_shims.rs:9:33: 9:34
        _4 = _2;                         // scope 0 at ui/mir/mir_calls_to_shims.rs:9:35: 9:36
        _5 = Eq(_4, const 0_u32);        // scope 0 at ui/mir/mir_calls_to_shims.rs:9:33: 9:36
        assert(!move _5, "attempt to divide `{}` by zero", _3) -> bb1; // scope 0 at ui/mir/mir_calls_to_shims.rs:9:33: 9:36
    }

    bb1: {
        _0 = Div(move _3, move _4);      // scope 0 at ui/mir/mir_calls_to_shims.rs:9:33: 9:36
        return;                          // scope 0 at ui/mir/mir_calls_to_shims.rs:9:38: 9:38
    }
}

fn foo_diverges() -> ! {
    let mut _0: !;                       // return place in scope 0 at ui/mir/mir_calls_to_shims.rs:10:22: 10:23
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn test_fn_ptr(_1: T) -> () {
    debug t => _1;                       // in scope 0 at ui/mir/mir_calls_to_shims.rs:12:19: 12:24
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_calls_to_shims.rs:13:5: 13:5
    let _2: for<'a> extern "rust-call" fn(&'a T, (u32, u32)) -> <T as std::ops::FnOnce<(u32, u32)>>::Output {<T as std::ops::Fn<(u32, u32)>>::call}; // in scope 0 at ui/mir/mir_calls_to_shims.rs:15:9: 15:14
    let mut _3: (&u32, &u32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: u32;                         // in scope 0 at ui/mir/mir_calls_to_shims.rs:16:16: 16:33
    let mut _6: for<'a> extern "rust-call" fn(&'a T, (u32, u32)) -> <T as std::ops::FnOnce<(u32, u32)>>::Output {<T as std::ops::Fn<(u32, u32)>>::call}; // in scope 0 at ui/mir/mir_calls_to_shims.rs:16:16: 16:21
    let mut _7: &T;                      // in scope 0 at ui/mir/mir_calls_to_shims.rs:16:22: 16:24
    let _8: &T;                          // in scope 0 at ui/mir/mir_calls_to_shims.rs:16:22: 16:24
    let mut _9: (u32, u32);              // in scope 0 at ui/mir/mir_calls_to_shims.rs:16:26: 16:32
    let mut _10: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _20: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _21: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _22: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _23: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _26: (&u32, &u32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _27: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _28: u32;                        // in scope 0 at ui/mir/mir_calls_to_shims.rs:18:16: 18:42
    let mut _29: for<'a> extern "rust-call" fn(&'a mut T, (u32, u32)) -> <T as std::ops::FnOnce<(u32, u32)>>::Output {<T as std::ops::FnMut<(u32, u32)>>::call_mut}; // in scope 0 at ui/mir/mir_calls_to_shims.rs:18:16: 18:25
    let mut _30: &mut T;                 // in scope 0 at ui/mir/mir_calls_to_shims.rs:18:26: 18:32
    let mut _31: &mut T;                 // in scope 0 at ui/mir/mir_calls_to_shims.rs:18:26: 18:32
    let mut _32: (u32, u32);             // in scope 0 at ui/mir/mir_calls_to_shims.rs:18:34: 18:41
    let mut _33: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _38: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _39: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _41: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _42: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _43: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _44: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _45: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _46: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _49: (&u32, &u32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _50: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _51: u32;                        // in scope 0 at ui/mir/mir_calls_to_shims.rs:20:16: 20:38
    let mut _52: extern "rust-call" fn(T, (u32, u32)) -> <T as std::ops::FnOnce<(u32, u32)>>::Output {<T as std::ops::FnOnce<(u32, u32)>>::call_once}; // in scope 0 at ui/mir/mir_calls_to_shims.rs:20:16: 20:26
    let mut _53: T;                      // in scope 0 at ui/mir/mir_calls_to_shims.rs:20:27: 20:28
    let mut _54: (u32, u32);             // in scope 0 at ui/mir/mir_calls_to_shims.rs:20:30: 20:37
    let mut _55: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _58: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _59: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _60: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _61: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _63: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _64: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _65: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _66: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _67: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _68: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _69: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _73: bool;                   // in scope 0 at ui/mir/mir_calls_to_shims.rs:21:1: 21:2
    scope 1 {
        debug as_fn => _2;               // in scope 1 at ui/mir/mir_calls_to_shims.rs:15:9: 15:14
        let _11: &u32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _12: &u32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _25: for<'a> extern "rust-call" fn(&'a mut T, (u32, u32)) -> <T as std::ops::FnOnce<(u32, u32)>>::Output {<T as std::ops::FnMut<(u32, u32)>>::call_mut}; // in scope 1 at ui/mir/mir_calls_to_shims.rs:17:9: 17:18
        let mut _72: &u32;               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _11;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _12;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _17: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _17;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug as_fn_mut => _25;      // in scope 4 at ui/mir/mir_calls_to_shims.rs:17:9: 17:18
            let _34: &u32;               // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _35: &u32;               // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _48: extern "rust-call" fn(T, (u32, u32)) -> <T as std::ops::FnOnce<(u32, u32)>>::Output {<T as std::ops::FnOnce<(u32, u32)>>::call_once}; // in scope 4 at ui/mir/mir_calls_to_shims.rs:19:9: 19:19
            let mut _71: &u32;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 5 {
                debug left_val => _34;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _35;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _40: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 6 {
                    debug kind => _40;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 7 {
                debug as_fn_once => _48; // in scope 7 at ui/mir/mir_calls_to_shims.rs:19:9: 19:19
                let _56: &u32;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _57: &u32;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _70: &u32;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 8 {
                    debug left_val => _56; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _57; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _62: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 9 {
                        debug kind => _62; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _73 = const false;               // scope 0 at ui/mir/mir_calls_to_shims.rs:15:9: 15:14
        _73 = const true;                // scope 0 at ui/mir/mir_calls_to_shims.rs:15:9: 15:14
        _8 = &_1;                        // scope 1 at ui/mir/mir_calls_to_shims.rs:16:22: 16:24
        _7 = _8;                         // scope 1 at ui/mir/mir_calls_to_shims.rs:16:22: 16:24
        _9 = const (9_u32, 3_u32);       // scope 1 at ui/mir/mir_calls_to_shims.rs:16:26: 16:32
        _5 = move _6(move _7, move _9) -> [return: bb1, unwind: bb12]; // scope 1 at ui/mir/mir_calls_to_shims.rs:16:16: 16:33
    }

    bb1: {
        _4 = &_5;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _72 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(test_fn_ptr, [T], Some(promoted[2])) }
        _10 = _72;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _10);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_3.0: &u32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_3.1: &u32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = (*_11);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = (*_12);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = Eq(move _15, move _16);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _13 = Not(move _14);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb3, otherwise: bb2]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _17 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = _11;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = _23;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = core::panicking::assert_failed::<u32, u32>(move _19, move _20, move _22, move _24) -> bb12; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb3: {
        _31 = &mut _1;                   // scope 4 at ui/mir/mir_calls_to_shims.rs:18:26: 18:32
        _30 = &mut (*_31);               // scope 4 at ui/mir/mir_calls_to_shims.rs:18:26: 18:32
        _32 = const (18_u32, 3_u32);     // scope 4 at ui/mir/mir_calls_to_shims.rs:18:34: 18:41
        _28 = move _29(move _30, move _32) -> [return: bb4, unwind: bb12]; // scope 4 at ui/mir/mir_calls_to_shims.rs:18:16: 18:42
    }

    bb4: {
        _27 = &_28;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _71 = const _;                   // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(test_fn_ptr, [T], Some(promoted[1])) }
        _33 = _71;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _26 = (move _27, move _33);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _34 = (_26.0: &u32);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _35 = (_26.1: &u32);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _38 = (*_34);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _39 = (*_35);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _37 = Eq(move _38, move _39);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _36 = Not(move _37);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _36) -> [0: bb6, otherwise: bb5]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _40 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _42 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _44 = _34;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _43 = _44;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _46 = _35;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _45 = _46;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _47 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _41 = core::panicking::assert_failed::<u32, u32>(move _42, move _43, move _45, move _47) -> bb12; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb6: {
        _73 = const false;               // scope 7 at ui/mir/mir_calls_to_shims.rs:20:27: 20:28
        _53 = move _1;                   // scope 7 at ui/mir/mir_calls_to_shims.rs:20:27: 20:28
        _54 = const (24_u32, 3_u32);     // scope 7 at ui/mir/mir_calls_to_shims.rs:20:30: 20:37
        _51 = move _52(move _53, move _54) -> [return: bb7, unwind: bb12]; // scope 7 at ui/mir/mir_calls_to_shims.rs:20:16: 20:38
    }

    bb7: {
        _50 = &_51;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _70 = const _;                   // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(test_fn_ptr, [T], Some(promoted[0])) }
        _55 = _70;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _49 = (move _50, move _55);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _56 = (_49.0: &u32);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _57 = (_49.1: &u32);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _60 = (*_56);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _61 = (*_57);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _59 = Eq(move _60, move _61);    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _58 = Not(move _59);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _58) -> [0: bb9, otherwise: bb8]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _62 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _64 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _66 = _56;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _65 = _66;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _68 = _57;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _67 = _68;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _69 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _63 = core::panicking::assert_failed::<u32, u32>(move _64, move _65, move _67, move _69) -> bb12; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/mir/mir_calls_to_shims.rs:21:2: 21:2
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/mir/mir_calls_to_shims.rs:12:1: 21:2
    }

    bb11 (cleanup): {
        drop(_1) -> bb10;                // scope 0 at ui/mir/mir_calls_to_shims.rs:21:1: 21:2
    }

    bb12 (cleanup): {
        switchInt(_73) -> [0: bb10, otherwise: bb11]; // scope 0 at ui/mir/mir_calls_to_shims.rs:21:1: 21:2
    }
}

promoted[0] in test_fn_ptr: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/mir/mir_calls_to_shims.rs:20:40: 20:41

    bb0: {
        _1 = const 8_u32;                // scope 0 at ui/mir/mir_calls_to_shims.rs:20:40: 20:41
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in test_fn_ptr: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/mir/mir_calls_to_shims.rs:18:44: 18:45

    bb0: {
        _1 = const 6_u32;                // scope 0 at ui/mir/mir_calls_to_shims.rs:18:44: 18:45
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in test_fn_ptr: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/mir/mir_calls_to_shims.rs:16:35: 16:36

    bb0: {
        _1 = const 3_u32;                // scope 0 at ui/mir/mir_calls_to_shims.rs:16:35: 16:36
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn assert_panics(_1: F) -> () {
    debug f => _1;                       // in scope 0 at ui/mir/mir_calls_to_shims.rs:23:21: 23:22
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_calls_to_shims.rs:23:27: 23:27
    let _2: std::panic::AssertUnwindSafe<F>; // in scope 0 at ui/mir/mir_calls_to_shims.rs:24:9: 24:10
    let mut _3: F;                       // in scope 0 at ui/mir/mir_calls_to_shims.rs:24:37: 24:38
    let mut _5: [closure@ui/mir/mir_calls_to_shims.rs:25:38: 25:45]; // in scope 0 at ui/mir/mir_calls_to_shims.rs:25:38: 27:6
    let mut _6: isize;                   // in scope 0 at ui/mir/mir_calls_to_shims.rs:28:12: 28:18
    let mut _7: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    scope 1 {
        debug f => _2;                   // in scope 1 at ui/mir/mir_calls_to_shims.rs:24:9: 24:10
        let _4: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 1 at ui/mir/mir_calls_to_shims.rs:25:9: 25:15
        scope 2 {
            debug result => _4;          // in scope 2 at ui/mir/mir_calls_to_shims.rs:25:9: 25:15
            scope 3 {
            }
        }
    }

    bb0: {
        _3 = move _1;                    // scope 0 at ui/mir/mir_calls_to_shims.rs:24:37: 24:38
        _2 = AssertUnwindSafe::<F>(move _3); // scope 0 at ui/mir/mir_calls_to_shims.rs:24:13: 24:39
        _5 = [closure@ui/mir/mir_calls_to_shims.rs:25:38: 25:45] { f: move _2 }; // scope 1 at ui/mir/mir_calls_to_shims.rs:25:38: 27:6
                                         // closure
                                         // + def_id: DefId(0:10 ~ mir_calls_to_shims[34b0]::assert_panics::{closure#0})
                                         // + substs: [
                                         //     F,
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (std::panic::AssertUnwindSafe<F>,),
                                         // ]
        _4 = catch_unwind::<[closure@ui/mir/mir_calls_to_shims.rs:25:38: 25:45], ()>(move _5) -> bb1; // scope 1 at ui/mir/mir_calls_to_shims.rs:25:18: 27:7
                                         // mir::Constant
                                         // + span: ui/mir/mir_calls_to_shims.rs:25:18: 25:37
                                         // + literal: Const { ty: fn([closure@ui/mir/mir_calls_to_shims.rs:25:38: 25:45]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/mir/mir_calls_to_shims.rs:25:38: 25:45], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = discriminant(_4);           // scope 3 at ui/mir/mir_calls_to_shims.rs:28:12: 28:18
        switchInt(move _6) -> [0: bb2, otherwise: bb3]; // scope 3 at ui/mir/mir_calls_to_shims.rs:28:12: 28:18
    }

    bb2: {
        _7 = begin_panic::<&str>(const "diverging function returned") -> bb5; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/mir/mir_calls_to_shims.rs:29:16: 29:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        drop(_4) -> bb4;                 // scope 1 at ui/mir/mir_calls_to_shims.rs:31:1: 31:2
    }

    bb4: {
        return;                          // scope 0 at ui/mir/mir_calls_to_shims.rs:31:2: 31:2
    }

    bb5 (cleanup): {
        drop(_4) -> bb6;                 // scope 1 at ui/mir/mir_calls_to_shims.rs:31:1: 31:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/mir/mir_calls_to_shims.rs:23:1: 31:2
    }
}

fn assert_panics::{closure#0}(_1: [closure@ui/mir/mir_calls_to_shims.rs:25:38: 25:45]) -> () {
    debug f => (_1.0: std::panic::AssertUnwindSafe<F>); // in scope 0 at ui/mir/mir_calls_to_shims.rs:24:9: 24:10
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_calls_to_shims.rs:25:46: 25:46
    let mut _2: F;                       // in scope 0 at ui/mir/mir_calls_to_shims.rs:26:9: 26:12
    let mut _3: ();                      // in scope 0 at ui/mir/mir_calls_to_shims.rs:26:9: 26:14

    bb0: {
        _2 = move ((_1.0: std::panic::AssertUnwindSafe<F>).0: F); // scope 0 at ui/mir/mir_calls_to_shims.rs:26:9: 26:12
        _0 = <F as FnOnce<()>>::call_once(move _2, move _3) -> bb1; // scope 0 at ui/mir/mir_calls_to_shims.rs:26:9: 26:14
                                         // mir::Constant
                                         // + span: ui/mir/mir_calls_to_shims.rs:26:9: 26:12
                                         // + literal: Const { ty: extern "rust-call" fn(F, ()) -> <F as FnOnce<()>>::Output {<F as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/mir_calls_to_shims.rs:27:6: 27:6
    }
}

fn test_fn_ptr_panic(_1: T) -> () {
    debug t => _1;                       // in scope 0 at ui/mir/mir_calls_to_shims.rs:33:25: 33:30
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_calls_to_shims.rs:34:5: 34:5
    let _2: for<'a> extern "rust-call" fn(&'a T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::Fn<()>>::call}; // in scope 0 at ui/mir/mir_calls_to_shims.rs:36:9: 36:14
    let _3: ();                          // in scope 0 at ui/mir/mir_calls_to_shims.rs:37:5: 37:36
    let mut _4: [closure@ui/mir/mir_calls_to_shims.rs:37:19: 37:21]; // in scope 0 at ui/mir/mir_calls_to_shims.rs:37:19: 37:35
    let mut _5: &for<'a> extern "rust-call" fn(&'a T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::Fn<()>>::call}; // in scope 0 at ui/mir/mir_calls_to_shims.rs:37:19: 37:35
    let mut _6: &T;                      // in scope 0 at ui/mir/mir_calls_to_shims.rs:37:19: 37:35
    let _8: ();                          // in scope 0 at ui/mir/mir_calls_to_shims.rs:39:5: 39:44
    let mut _9: [closure@ui/mir/mir_calls_to_shims.rs:39:19: 39:21]; // in scope 0 at ui/mir/mir_calls_to_shims.rs:39:19: 39:43
    let mut _10: &for<'a> extern "rust-call" fn(&'a mut T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::FnMut<()>>::call_mut}; // in scope 0 at ui/mir/mir_calls_to_shims.rs:39:19: 39:43
    let mut _11: &mut T;                 // in scope 0 at ui/mir/mir_calls_to_shims.rs:39:19: 39:43
    let _13: ();                         // in scope 0 at ui/mir/mir_calls_to_shims.rs:41:5: 41:40
    let mut _14: [closure@ui/mir/mir_calls_to_shims.rs:41:19: 41:21]; // in scope 0 at ui/mir/mir_calls_to_shims.rs:41:19: 41:39
    let mut _15: &extern "rust-call" fn(T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::FnOnce<()>>::call_once}; // in scope 0 at ui/mir/mir_calls_to_shims.rs:41:19: 41:39
    let mut _16: bool;                   // in scope 0 at ui/mir/mir_calls_to_shims.rs:42:1: 42:2
    scope 1 {
        debug as_fn => _2;               // in scope 1 at ui/mir/mir_calls_to_shims.rs:36:9: 36:14
        let _7: for<'a> extern "rust-call" fn(&'a mut T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::FnMut<()>>::call_mut}; // in scope 1 at ui/mir/mir_calls_to_shims.rs:38:9: 38:18
        scope 2 {
            debug as_fn_mut => _7;       // in scope 2 at ui/mir/mir_calls_to_shims.rs:38:9: 38:18
            let _12: extern "rust-call" fn(T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::FnOnce<()>>::call_once}; // in scope 2 at ui/mir/mir_calls_to_shims.rs:40:9: 40:19
            scope 3 {
                debug as_fn_once => _12; // in scope 3 at ui/mir/mir_calls_to_shims.rs:40:9: 40:19
            }
        }
    }

    bb0: {
        _16 = const false;               // scope 0 at ui/mir/mir_calls_to_shims.rs:36:9: 36:14
        _16 = const true;                // scope 0 at ui/mir/mir_calls_to_shims.rs:36:9: 36:14
        _5 = &_2;                        // scope 1 at ui/mir/mir_calls_to_shims.rs:37:19: 37:35
        _6 = &_1;                        // scope 1 at ui/mir/mir_calls_to_shims.rs:37:19: 37:35
        _4 = [closure@ui/mir/mir_calls_to_shims.rs:37:19: 37:21] { as_fn: move _5, t: move _6 }; // scope 1 at ui/mir/mir_calls_to_shims.rs:37:19: 37:35
                                         // closure
                                         // + def_id: DefId(0:13 ~ mir_calls_to_shims[34b0]::test_fn_ptr_panic::{closure#0})
                                         // + substs: [
                                         //     T,
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (&for<'a> extern "rust-call" fn(&'a T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::Fn<()>>::call}, &T),
                                         // ]
        _3 = assert_panics::<[closure@ui/mir/mir_calls_to_shims.rs:37:19: 37:21]>(move _4) -> [return: bb1, unwind: bb6]; // scope 1 at ui/mir/mir_calls_to_shims.rs:37:5: 37:36
                                         // mir::Constant
                                         // + span: ui/mir/mir_calls_to_shims.rs:37:5: 37:18
                                         // + literal: Const { ty: fn([closure@ui/mir/mir_calls_to_shims.rs:37:19: 37:21]) {assert_panics::<[closure@ui/mir/mir_calls_to_shims.rs:37:19: 37:21]>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = &_7;                       // scope 2 at ui/mir/mir_calls_to_shims.rs:39:19: 39:43
        _11 = &mut _1;                   // scope 2 at ui/mir/mir_calls_to_shims.rs:39:19: 39:43
        _9 = [closure@ui/mir/mir_calls_to_shims.rs:39:19: 39:21] { as_fn_mut: move _10, t: move _11 }; // scope 2 at ui/mir/mir_calls_to_shims.rs:39:19: 39:43
                                         // closure
                                         // + def_id: DefId(0:14 ~ mir_calls_to_shims[34b0]::test_fn_ptr_panic::{closure#1})
                                         // + substs: [
                                         //     T,
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (&for<'a> extern "rust-call" fn(&'a mut T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::FnMut<()>>::call_mut}, &mut T),
                                         // ]
        _8 = assert_panics::<[closure@ui/mir/mir_calls_to_shims.rs:39:19: 39:21]>(move _9) -> [return: bb2, unwind: bb6]; // scope 2 at ui/mir/mir_calls_to_shims.rs:39:5: 39:44
                                         // mir::Constant
                                         // + span: ui/mir/mir_calls_to_shims.rs:39:5: 39:18
                                         // + literal: Const { ty: fn([closure@ui/mir/mir_calls_to_shims.rs:39:19: 39:21]) {assert_panics::<[closure@ui/mir/mir_calls_to_shims.rs:39:19: 39:21]>}, val: Value(<ZST>) }
    }

    bb2: {
        _15 = &_12;                      // scope 3 at ui/mir/mir_calls_to_shims.rs:41:19: 41:39
        _16 = const false;               // scope 3 at ui/mir/mir_calls_to_shims.rs:41:19: 41:39
        _14 = [closure@ui/mir/mir_calls_to_shims.rs:41:19: 41:21] { as_fn_once: move _15, t: move _1 }; // scope 3 at ui/mir/mir_calls_to_shims.rs:41:19: 41:39
                                         // closure
                                         // + def_id: DefId(0:15 ~ mir_calls_to_shims[34b0]::test_fn_ptr_panic::{closure#2})
                                         // + substs: [
                                         //     T,
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (&extern "rust-call" fn(T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::FnOnce<()>>::call_once}, T),
                                         // ]
        _13 = assert_panics::<[closure@ui/mir/mir_calls_to_shims.rs:41:19: 41:21]>(move _14) -> [return: bb3, unwind: bb6]; // scope 3 at ui/mir/mir_calls_to_shims.rs:41:5: 41:40
                                         // mir::Constant
                                         // + span: ui/mir/mir_calls_to_shims.rs:41:5: 41:18
                                         // + literal: Const { ty: fn([closure@ui/mir/mir_calls_to_shims.rs:41:19: 41:21]) {assert_panics::<[closure@ui/mir/mir_calls_to_shims.rs:41:19: 41:21]>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/mir/mir_calls_to_shims.rs:42:2: 42:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/mir/mir_calls_to_shims.rs:33:1: 42:2
    }

    bb5 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/mir/mir_calls_to_shims.rs:42:1: 42:2
    }

    bb6 (cleanup): {
        switchInt(_16) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/mir/mir_calls_to_shims.rs:42:1: 42:2
    }
}

fn test_fn_ptr_panic::{closure#0}(_1: [closure@ui/mir/mir_calls_to_shims.rs:37:19: 37:21]) -> () {
    debug as_fn => (*(_1.0: &for<'a> extern "rust-call" fn(&'a T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::Fn<()>>::call})); // in scope 0 at ui/mir/mir_calls_to_shims.rs:36:9: 36:14
    debug t => (*(_1.1: &T));            // in scope 0 at ui/mir/mir_calls_to_shims.rs:33:25: 33:30
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_calls_to_shims.rs:37:22: 37:22
    let mut _2: !;                       // in scope 0 at ui/mir/mir_calls_to_shims.rs:37:22: 37:35
    let mut _3: for<'a> extern "rust-call" fn(&'a T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::Fn<()>>::call}; // in scope 0 at ui/mir/mir_calls_to_shims.rs:37:22: 37:27
    let mut _4: &T;                      // in scope 0 at ui/mir/mir_calls_to_shims.rs:37:28: 37:30
    let _5: &T;                          // in scope 0 at ui/mir/mir_calls_to_shims.rs:37:28: 37:30
    let mut _6: ();                      // in scope 0 at ui/mir/mir_calls_to_shims.rs:37:32: 37:34
    let mut _7: &T;                      // in scope 0 at ui/mir/mir_calls_to_shims.rs:37:19: 37:35

    bb0: {
        _7 = deref_copy (_1.1: &T);      // scope 0 at ui/mir/mir_calls_to_shims.rs:37:28: 37:30
        _5 = _7;                         // scope 0 at ui/mir/mir_calls_to_shims.rs:37:28: 37:30
        _4 = _5;                         // scope 0 at ui/mir/mir_calls_to_shims.rs:37:28: 37:30
        _2 = move _3(move _4, move _6);  // scope 0 at ui/mir/mir_calls_to_shims.rs:37:22: 37:35
    }
}

fn test_fn_ptr_panic::{closure#1}(_1: [closure@ui/mir/mir_calls_to_shims.rs:39:19: 39:21]) -> () {
    debug as_fn_mut => (*(_1.0: &for<'a> extern "rust-call" fn(&'a mut T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::FnMut<()>>::call_mut})); // in scope 0 at ui/mir/mir_calls_to_shims.rs:38:9: 38:18
    debug t => (*(_1.1: &mut T));        // in scope 0 at ui/mir/mir_calls_to_shims.rs:33:25: 33:30
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_calls_to_shims.rs:39:22: 39:22
    let mut _2: !;                       // in scope 0 at ui/mir/mir_calls_to_shims.rs:39:22: 39:43
    let mut _3: for<'a> extern "rust-call" fn(&'a mut T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::FnMut<()>>::call_mut}; // in scope 0 at ui/mir/mir_calls_to_shims.rs:39:22: 39:31
    let mut _4: &mut T;                  // in scope 0 at ui/mir/mir_calls_to_shims.rs:39:32: 39:38
    let mut _5: &mut T;                  // in scope 0 at ui/mir/mir_calls_to_shims.rs:39:32: 39:38
    let mut _6: ();                      // in scope 0 at ui/mir/mir_calls_to_shims.rs:39:40: 39:42
    let mut _7: &mut T;                  // in scope 0 at ui/mir/mir_calls_to_shims.rs:39:19: 39:43

    bb0: {
        _7 = deref_copy (_1.1: &mut T);  // scope 0 at ui/mir/mir_calls_to_shims.rs:39:32: 39:38
        _5 = &mut (*_7);                 // scope 0 at ui/mir/mir_calls_to_shims.rs:39:32: 39:38
        _4 = &mut (*_5);                 // scope 0 at ui/mir/mir_calls_to_shims.rs:39:32: 39:38
        _2 = move _3(move _4, move _6);  // scope 0 at ui/mir/mir_calls_to_shims.rs:39:22: 39:43
    }
}

fn test_fn_ptr_panic::{closure#2}(_1: [closure@ui/mir/mir_calls_to_shims.rs:41:19: 41:21]) -> () {
    debug as_fn_once => (*(_1.0: &extern "rust-call" fn(T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::FnOnce<()>>::call_once})); // in scope 0 at ui/mir/mir_calls_to_shims.rs:40:9: 40:19
    debug t => (_1.1: T);                // in scope 0 at ui/mir/mir_calls_to_shims.rs:33:25: 33:30
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_calls_to_shims.rs:41:22: 41:22
    let mut _2: !;                       // in scope 0 at ui/mir/mir_calls_to_shims.rs:41:22: 41:39
    let mut _3: extern "rust-call" fn(T, ()) -> <T as std::ops::FnOnce<()>>::Output {<T as std::ops::FnOnce<()>>::call_once}; // in scope 0 at ui/mir/mir_calls_to_shims.rs:41:22: 41:32
    let mut _4: T;                       // in scope 0 at ui/mir/mir_calls_to_shims.rs:41:33: 41:34
    let mut _5: ();                      // in scope 0 at ui/mir/mir_calls_to_shims.rs:41:36: 41:38

    bb0: {
        _4 = move (_1.1: T);             // scope 0 at ui/mir/mir_calls_to_shims.rs:41:33: 41:34
        _2 = move _3(move _4, move _5);  // scope 0 at ui/mir/mir_calls_to_shims.rs:41:22: 41:39
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_calls_to_shims.rs:44:11: 44:11
    let _1: ();                          // in scope 0 at ui/mir/mir_calls_to_shims.rs:45:5: 45:21
    let _2: ();                          // in scope 0 at ui/mir/mir_calls_to_shims.rs:46:5: 46:44
    let mut _3: fn(u32, u32) -> u32;     // in scope 0 at ui/mir/mir_calls_to_shims.rs:46:17: 46:43
    let _4: ();                          // in scope 0 at ui/mir/mir_calls_to_shims.rs:47:5: 47:36
    let _5: ();                          // in scope 0 at ui/mir/mir_calls_to_shims.rs:48:5: 48:49
    let mut _6: fn() -> !;               // in scope 0 at ui/mir/mir_calls_to_shims.rs:48:23: 48:48

    bb0: {
        _1 = test_fn_ptr::<fn(u32, u32) -> u32 {foo}>(foo) -> bb1; // scope 0 at ui/mir/mir_calls_to_shims.rs:45:5: 45:21
                                         // mir::Constant
                                         // + span: ui/mir/mir_calls_to_shims.rs:45:5: 45:16
                                         // + literal: Const { ty: fn(fn(u32, u32) -> u32 {foo}) {test_fn_ptr::<fn(u32, u32) -> u32 {foo}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/mir/mir_calls_to_shims.rs:45:17: 45:20
                                         // + literal: Const { ty: fn(u32, u32) -> u32 {foo}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = foo as fn(u32, u32) -> u32 (Pointer(ReifyFnPointer)); // scope 0 at ui/mir/mir_calls_to_shims.rs:46:17: 46:20
                                         // mir::Constant
                                         // + span: ui/mir/mir_calls_to_shims.rs:46:17: 46:20
                                         // + literal: Const { ty: fn(u32, u32) -> u32 {foo}, val: Value(<ZST>) }
        _2 = test_fn_ptr::<fn(u32, u32) -> u32>(move _3) -> bb2; // scope 0 at ui/mir/mir_calls_to_shims.rs:46:5: 46:44
                                         // mir::Constant
                                         // + span: ui/mir/mir_calls_to_shims.rs:46:5: 46:16
                                         // + literal: Const { ty: fn(fn(u32, u32) -> u32) {test_fn_ptr::<fn(u32, u32) -> u32>}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = test_fn_ptr_panic::<fn() -> ! {foo_diverges}>(foo_diverges) -> bb3; // scope 0 at ui/mir/mir_calls_to_shims.rs:47:5: 47:36
                                         // mir::Constant
                                         // + span: ui/mir/mir_calls_to_shims.rs:47:5: 47:22
                                         // + literal: Const { ty: fn(fn() -> ! {foo_diverges}) {test_fn_ptr_panic::<fn() -> ! {foo_diverges}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/mir/mir_calls_to_shims.rs:47:23: 47:35
                                         // + literal: Const { ty: fn() -> ! {foo_diverges}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = foo_diverges as fn() -> ! (Pointer(ReifyFnPointer)); // scope 0 at ui/mir/mir_calls_to_shims.rs:48:23: 48:35
                                         // mir::Constant
                                         // + span: ui/mir/mir_calls_to_shims.rs:48:23: 48:35
                                         // + literal: Const { ty: fn() -> ! {foo_diverges}, val: Value(<ZST>) }
        _5 = test_fn_ptr_panic::<fn() -> !>(move _6) -> bb4; // scope 0 at ui/mir/mir_calls_to_shims.rs:48:5: 48:49
                                         // mir::Constant
                                         // + span: ui/mir/mir_calls_to_shims.rs:48:5: 48:22
                                         // + literal: Const { ty: fn(fn() -> !) {test_fn_ptr_panic::<fn() -> !>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/mir/mir_calls_to_shims.rs:49:2: 49:2
    }
}
