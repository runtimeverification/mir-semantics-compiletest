// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn converging_fn() -> u64 {
    let mut _0: u64;

    bb0: {
        _0 = const 43_u64;
        return;
    }
}

fn mir() -> u64 {
    let mut _0: u64;
    let mut _1: u64;
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _1 = converging_fn() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = move _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u64, &u64);
    let mut _2: &u64;
    let _3: u64;
    let _4: &u64;
    let _5: &u64;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: u64;
    let mut _9: u64;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: &u64;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }

    bb0: {
        _3 = mir() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _13 = const _;
        _1 = (move _2, _13);
        _4 = (_1.0: &u64);
        _5 = (_1.1: &u64);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<u64, u64>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 43_u64;
        _0 = &_1;
        return;
    }
}
