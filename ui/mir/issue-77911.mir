// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn file_lines() -> impl Iterator<Item = String> {
    let mut _0: impl std::iter::Iterator<Item = std::string::String>;
    let mut _1: std::io::Lines<std::io::BufReader<std::fs::File>>;
    let mut _2: std::io::BufReader<std::fs::File>;
    let mut _3: std::fs::File;
    let mut _4: std::result::Result<std::fs::File, std::io::Error>;

    bb0: {
        _4 = File::open::<&str>(const "") -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = Result::<File, std::io::Error>::unwrap(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = BufReader::<File>::new(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _1 = <BufReader<File> as BufRead>::lines(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = <std::io::Lines<BufReader<File>> as Iterator>::map::<String, fn(Result<String, std::io::Error>) -> String {Result::<String, std::io::Error>::unwrap}>(move _1, Result::<String, std::io::Error>::unwrap) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: impl std::iter::Iterator<Item = std::string::String>;
    let mut _2: impl std::iter::Iterator<Item = std::string::String>;
    let mut _3: impl std::iter::Iterator<Item = std::string::String>;
    let mut _4: std::option::Option<std::string::String>;
    let mut _5: &mut impl std::iter::Iterator<Item = std::string::String>;
    let mut _6: isize;
    scope 1 {
        debug iter => _3;
    }

    bb0: {
        _2 = file_lines() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = <impl Iterator<Item = String> as IntoIterator>::into_iter(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = move _1;
        goto -> bb3;
    }

    bb3: {
        _5 = &mut _3;
        _4 = <impl Iterator<Item = String> as Iterator>::next(_5) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        drop(_4) -> [return: bb3, unwind: bb10];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        drop(_4) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        drop(_3) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }
}
