// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn file_lines() -> impl Iterator<Item = String> {
    let mut _0: impl std::iter::Iterator<Item = std::string::String>; // return place in scope 0 at ui/mir/issue-77911.rs:7:20: 7:48
    let mut _1: std::io::Lines<std::io::BufReader<std::fs::File>>; // in scope 0 at ui/mir/issue-77911.rs:8:5: 9:17
    let mut _2: std::io::BufReader<std::fs::File>; // in scope 0 at ui/mir/issue-77911.rs:8:5: 8:44
    let mut _3: std::fs::File;           // in scope 0 at ui/mir/issue-77911.rs:8:20: 8:43
    let mut _4: std::result::Result<std::fs::File, std::io::Error>; // in scope 0 at ui/mir/issue-77911.rs:8:20: 8:34

    bb0: {
        _4 = File::open::<&str>(const "") -> bb1; // scope 0 at ui/mir/issue-77911.rs:8:20: 8:34
                                         // mir::Constant
                                         // + span: ui/mir/issue-77911.rs:8:20: 8:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&str) -> Result<File, std::io::Error> {File::open::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/mir/issue-77911.rs:8:31: 8:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _3 = Result::<File, std::io::Error>::unwrap(move _4) -> bb2; // scope 0 at ui/mir/issue-77911.rs:8:20: 8:43
                                         // mir::Constant
                                         // + span: ui/mir/issue-77911.rs:8:35: 8:41
                                         // + literal: Const { ty: fn(Result<File, std::io::Error>) -> File {Result::<File, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = BufReader::<File>::new(move _3) -> bb3; // scope 0 at ui/mir/issue-77911.rs:8:5: 8:44
                                         // mir::Constant
                                         // + span: ui/mir/issue-77911.rs:8:5: 8:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(File) -> BufReader<File> {BufReader::<File>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = <BufReader<File> as BufRead>::lines(move _2) -> bb4; // scope 0 at ui/mir/issue-77911.rs:8:5: 9:17
                                         // mir::Constant
                                         // + span: ui/mir/issue-77911.rs:9:10: 9:15
                                         // + literal: Const { ty: fn(BufReader<File>) -> std::io::Lines<BufReader<File>> {<BufReader<File> as BufRead>::lines}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = <std::io::Lines<BufReader<File>> as Iterator>::map::<String, fn(Result<String, std::io::Error>) -> String {Result::<String, std::io::Error>::unwrap}>(move _1, Result::<String, std::io::Error>::unwrap) -> bb5; // scope 0 at ui/mir/issue-77911.rs:8:5: 10:29
                                         // mir::Constant
                                         // + span: ui/mir/issue-77911.rs:10:10: 10:13
                                         // + literal: Const { ty: fn(std::io::Lines<BufReader<File>>, fn(Result<String, std::io::Error>) -> String {Result::<String, std::io::Error>::unwrap}) -> Map<std::io::Lines<BufReader<File>>, fn(Result<String, std::io::Error>) -> String {Result::<String, std::io::Error>::unwrap}> {<std::io::Lines<BufReader<File>> as Iterator>::map::<String, fn(Result<String, std::io::Error>) -> String {Result::<String, std::io::Error>::unwrap}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/mir/issue-77911.rs:10:14: 10:28
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Result<String, std::io::Error>) -> String {Result::<String, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/mir/issue-77911.rs:11:2: 11:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/issue-77911.rs:13:11: 13:11
    let mut _1: impl std::iter::Iterator<Item = std::string::String>; // in scope 0 at ui/mir/issue-77911.rs:14:14: 14:26
    let mut _2: impl std::iter::Iterator<Item = std::string::String>; // in scope 0 at ui/mir/issue-77911.rs:14:14: 14:26
    let mut _3: impl std::iter::Iterator<Item = std::string::String>; // in scope 0 at ui/mir/issue-77911.rs:14:14: 14:26
    let mut _4: std::option::Option<std::string::String>; // in scope 0 at ui/mir/issue-77911.rs:14:14: 14:26
    let mut _5: &mut impl std::iter::Iterator<Item = std::string::String>; // in scope 0 at ui/mir/issue-77911.rs:14:14: 14:26
    let mut _6: &mut impl std::iter::Iterator<Item = std::string::String>; // in scope 0 at ui/mir/issue-77911.rs:14:14: 14:26
    let mut _7: isize;                   // in scope 0 at ui/mir/issue-77911.rs:14:5: 14:29
    scope 1 {
        debug iter => _3;                // in scope 1 at ui/mir/issue-77911.rs:14:14: 14:26
    }

    bb0: {
        _2 = file_lines() -> bb1;        // scope 0 at ui/mir/issue-77911.rs:14:14: 14:26
                                         // mir::Constant
                                         // + span: ui/mir/issue-77911.rs:14:14: 14:24
                                         // + literal: Const { ty: fn() -> impl Iterator<Item = String> {file_lines}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <impl Iterator<Item = String> as IntoIterator>::into_iter(move _2) -> bb2; // scope 0 at ui/mir/issue-77911.rs:14:14: 14:26
                                         // mir::Constant
                                         // + span: ui/mir/issue-77911.rs:14:14: 14:26
                                         // + literal: Const { ty: fn(impl Iterator<Item = String>) -> <impl Iterator<Item = String> as IntoIterator>::IntoIter {<impl Iterator<Item = String> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = move _1;                    // scope 0 at ui/mir/issue-77911.rs:14:14: 14:26
        goto -> bb3;                     // scope 1 at ui/mir/issue-77911.rs:14:5: 14:29
    }

    bb3: {
        _6 = &mut _3;                    // scope 1 at ui/mir/issue-77911.rs:14:14: 14:26
        _5 = &mut (*_6);                 // scope 1 at ui/mir/issue-77911.rs:14:14: 14:26
        _4 = <impl Iterator<Item = String> as Iterator>::next(move _5) -> [return: bb4, unwind: bb10]; // scope 1 at ui/mir/issue-77911.rs:14:14: 14:26
                                         // mir::Constant
                                         // + span: ui/mir/issue-77911.rs:14:14: 14:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Iterator<Item = String>) -> Option<<impl Iterator<Item = String> as Iterator>::Item> {<impl Iterator<Item = String> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = discriminant(_4);           // scope 1 at ui/mir/issue-77911.rs:14:14: 14:26
        switchInt(move _7) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 1 at ui/mir/issue-77911.rs:14:14: 14:26
    }

    bb5: {
        drop(_4) -> [return: bb3, unwind: bb10]; // scope 1 at ui/mir/issue-77911.rs:14:28: 14:29
    }

    bb6: {
        unreachable;                     // scope 1 at ui/mir/issue-77911.rs:14:14: 14:26
    }

    bb7: {
        drop(_4) -> [return: bb8, unwind: bb10]; // scope 1 at ui/mir/issue-77911.rs:14:28: 14:29
    }

    bb8: {
        drop(_3) -> bb9;                 // scope 0 at ui/mir/issue-77911.rs:14:28: 14:29
    }

    bb9: {
        return;                          // scope 0 at ui/mir/issue-77911.rs:15:2: 15:2
    }

    bb10 (cleanup): {
        drop(_3) -> bb11;                // scope 0 at ui/mir/issue-77911.rs:14:28: 14:29
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/mir/issue-77911.rs:13:1: 15:2
    }
}
