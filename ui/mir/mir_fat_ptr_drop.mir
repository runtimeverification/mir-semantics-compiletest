// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static COUNTER: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize;

    bb0: {
        ConstEvalCounter;
        _0 = AtomicUsize::new(const 0_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/mir/mir_fat_ptr_drop.rs:18:1: 18:21>::drop(_1: &mut DropMe) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: usize;
    let _3: &std::sync::atomic::AtomicUsize;
    let mut _4: std::sync::atomic::Ordering;

    bb0: {
        _3 = const {alloc1: &AtomicUsize};
        _4 = SeqCst;
        _2 = AtomicUsize::fetch_add(_3, const 1_usize, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

alloc1 (static: COUNTER, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn fat_ptr_move_then_drop(_1: Box<[DropMe]>) -> () {
    debug a => _1;
    let mut _0: ();
    let _2: std::boxed::Box<[DropMe]>;
    scope 1 {
        debug b => _2;
    }

    bb0: {
        _2 = move _1;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<[DropMe]>;
    let mut _2: std::boxed::Box<[DropMe; 1]>;
    let _3: ();
    let mut _4: (&usize, &usize);
    let mut _5: &usize;
    let _6: usize;
    let _7: &std::sync::atomic::AtomicUsize;
    let mut _8: std::sync::atomic::Ordering;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let _9: &usize;
        let _10: &usize;
        let mut _18: &usize;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
    }

    bb0: {
        _2 = Box::<[DropMe; 1]>::new(const [DropMe {{  }}]) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = move _2 as std::boxed::Box<[DropMe]> (Pointer(Unsize));
        _3 = fat_ptr_move_then_drop(move _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = const {alloc1: &AtomicUsize};
        _8 = SeqCst;
        _6 = AtomicUsize::load(_7, move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = &_6;
        _18 = const _;
        _4 = (move _5, _18);
        _9 = (_4.0: &usize);
        _10 = (_4.1: &usize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<usize, usize>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb5: {
        return;
    }
}

alloc1 (static: COUNTER, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}
