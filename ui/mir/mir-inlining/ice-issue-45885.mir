// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/mir/mir-inlining/ice-issue-45885.rs:14:1: 14:26>::get(_1: &usize) -> &Enum {
    debug self => _1;
    let mut _0: &Enum;

    bb0: {
        _0 = const _;
        return;
    }
}

promoted[0] in <impl at ui/mir/mir-inlining/ice-issue-45885.rs:14:1: 14:26>::get: &Enum = {
    let mut _0: &Enum;
    let mut _1: Enum;

    bb0: {
        _1 = Enum::A;
        _0 = &_1;
        return;
    }
}

fn index(_1: &T) -> &<T as SliceIndex>::Output {
    debug t => _1;
    let mut _0: &<T as SliceIndex>::Output;
    let _2: &<T as SliceIndex>::Output;

    bb0: {
        _2 = <T as SliceIndex>::get(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = _2;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: &Enum;
    let mut _2: &usize;

    bb0: {
        _2 = const _;
        _1 = index::<usize>(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}
