// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/mir/mir-inlining/ice-issue-45885.rs:14:1: 14:26>::get(_1: &usize) -> &Enum {
    debug self => _1;                    // in scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:17:12: 17:17
    let mut _0: &Enum;                   // return place in scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:18:9: 18:17
    let mut _2: &Enum;                   // in scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:18:9: 18:17

    bb0: {
        _2 = const _;                    // scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:18:9: 18:17
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-45885.rs:18:9: 18:17
                                         // + literal: Const { ty: &Enum, val: Unevaluated(<usize as SliceIndex>::get, [], Some(promoted[0])) }
        _0 = _2;                         // scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:18:9: 18:17
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:19:6: 19:6
    }
}

promoted[0] in <impl at ui/mir/mir-inlining/ice-issue-45885.rs:14:1: 14:26>::get: &Enum = {
    let mut _0: &Enum;                   // return place in scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:18:9: 18:17
    let mut _1: Enum;                    // in scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:18:10: 18:17

    bb0: {
        _1 = Enum::A;                    // scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:18:10: 18:17
        _0 = &_1;                        // scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:18:9: 18:17
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:18:9: 18:17
    }
}

fn index(_1: &T) -> &<T as SliceIndex>::Output {
    debug t => _1;                       // in scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:23:25: 23:26
    let mut _0: &<T as SliceIndex>::Output; // return place in scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:24:5: 24:12
    let mut _2: &T;                      // in scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:24:5: 24:12

    bb0: {
        _2 = _1;                         // scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:24:5: 24:12
        _0 = <T as SliceIndex>::get(move _2) -> bb1; // scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:24:5: 24:12
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-45885.rs:24:7: 24:10
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> &'a <T as SliceIndex>::Output {<T as SliceIndex>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:25:2: 25:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:27:11: 27:11
    let mut _1: &Enum;                   // in scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:28:12: 28:21
    let mut _2: &usize;                  // in scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:28:18: 28:20
    let _3: &usize;                      // in scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:28:18: 28:20
    let mut _4: &usize;                  // in scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:28:18: 28:20

    bb0: {
        _4 = const _;                    // scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:28:18: 28:20
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-45885.rs:28:18: 28:20
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _4;                         // scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:28:18: 28:20
        _2 = _3;                         // scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:28:18: 28:20
        _1 = index::<usize>(move _2) -> bb1; // scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:28:12: 28:21
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-45885.rs:28:12: 28:17
                                         // + literal: Const { ty: for<'a> fn(&'a usize) -> &'a <usize as SliceIndex>::Output {index::<usize>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:29:2: 29:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:28:18: 28:20
    let mut _1: usize;                   // in scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:28:19: 28:20

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:28:19: 28:20
        _0 = &_1;                        // scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:28:18: 28:20
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-45885.rs:28:18: 28:20
    }
}
