// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Array::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:7:37: 7:38

    bb0: {
        _0 = const N;                    // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:7:37: 7:38
        return;                          // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:7:37: 7:38
    }
}

<impl at ui/mir/mir-inlining/array-clone-with-generic-size.rs:6:10: 6:15>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:7:23: 7:24

    bb0: {
        _0 = const N;                    // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:7:23: 7:24
        return;                          // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:7:23: 7:24
    }
}

fn <impl at ui/mir/mir-inlining/array-clone-with-generic-size.rs:6:10: 6:15>::clone(_1: &Array<T, N>) -> Array<T, N> {
    debug self => _1;                    // in scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:6:10: 6:15
    let mut _0: Array<T, N>;             // return place in scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:6:10: 6:15
    let mut _2: [T; N];                  // in scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:7:33: 7:39
    let mut _3: &[T; N];                 // in scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:7:33: 7:39
    let _4: &[T; N];                     // in scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:7:33: 7:39

    bb0: {
        _4 = &((*_1).0: [T; N]);         // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:7:33: 7:39
        _3 = _4;                         // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:7:33: 7:39
        _2 = <[T; N] as Clone>::clone(move _3) -> bb1; // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:7:33: 7:39
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/array-clone-with-generic-size.rs:7:33: 7:39
                                         // + literal: Const { ty: for<'a> fn(&'a [T; N]) -> [T; N] {<[T; N] as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Array::<T, N>(move _2);     // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:6:10: 6:15
        return;                          // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:6:15: 6:15
    }
}

<impl at ui/mir/mir-inlining/array-clone-with-generic-size.rs:6:10: 6:15>::clone::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:6:10: 6:15

    bb0: {
        _0 = const N;                    // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:6:10: 6:15
        return;                          // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:6:10: 6:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:9:11: 9:11
    let mut _1: Array<u32, 3>;           // in scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:10:13: 10:46
    let mut _2: &Array<u32, 3>;          // in scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:10:13: 10:46
    let mut _3: &Array<u32, 3>;          // in scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:10:13: 10:46
    scope 1 {
    }

    bb0: {
        _3 = const _;                    // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:10:13: 10:46
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/array-clone-with-generic-size.rs:10:13: 10:46
                                         // + literal: Const { ty: &Array<u32, 3>, val: Unevaluated(main, [], Some(promoted[0])) }
        _2 = _3;                         // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:10:13: 10:46
        _1 = <Array<u32, 3> as Clone>::clone(move _2) -> bb1; // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:10:13: 10:46
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/array-clone-with-generic-size.rs:10:39: 10:44
                                         // + literal: Const { ty: for<'a> fn(&'a Array<u32, 3>) -> Array<u32, 3> {<Array<u32, 3> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:11:2: 11:2
    }
}

promoted[0] in main: &Array<u32, 3> = {
    let mut _0: &Array<u32, 3>;          // return place in scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:10:13: 10:46
    let mut _1: Array<u32, 3>;           // in scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:10:13: 10:38
    let mut _2: [u32; 3];                // in scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:10:19: 10:37

    bb0: {
        _2 = [const 0_u32, const 1_u32, const 2_u32]; // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:10:19: 10:37
        _1 = Array::<u32, 3>(move _2);   // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:10:13: 10:38
        _0 = &_1;                        // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:10:13: 10:46
        return;                          // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:10:13: 10:46
    }
}

fn Array(_1: [T; N]) -> Array<T, N> {
    let mut _0: Array<T, N>;             // return place in scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:7:1: 7:32

    bb0: {
        _0 = Array::<T, N>(move _1);     // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:7:1: 7:32
        return;                          // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:7:1: 7:32
    }
}

// MIR FOR CTFE
fn Array(_1: [T; N]) -> Array<T, N> {
    let mut _0: Array<T, N>;             // return place in scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:7:1: 7:32

    bb0: {
        _0 = Array::<T, N>(move _1);     // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:7:1: 7:32
        return;                          // scope 0 at ui/mir/mir-inlining/array-clone-with-generic-size.rs:7:1: 7:32
    }
}
