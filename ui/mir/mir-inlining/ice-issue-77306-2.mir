// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/mir/mir-inlining/ice-issue-77306-2.rs:7:1: 7:25>::next(_1: &mut Cursor) -> Option<TokenTree> {
    debug self => _1;                    // in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:10:13: 10:22
    let mut _0: std::option::Option<TokenTree>; // return place in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:10:27: 10:44

    bb0: {
        _0 = const Option::<TokenTree>::None; // scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:11:9: 11:13
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77306-2.rs:11:9: 11:13
                                         // + literal: Const { ty: Option<TokenTree>, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:12:6: 12:6
    }
}

fn tokenstream_probably_equal_for_proc_macro() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:15:48: 15:48
    let _1: Cursor;                      // in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:21:9: 21:11
    let mut _4: Cursor;                  // in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:24:18: 24:20
    let mut _6: Cursor;                  // in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:25:18: 25:20
    let mut _7: std::iter::Zip<&mut std::iter::FlatMap<Cursor, impl std::iter::Iterator<Item = TokenTree>, fn(TokenTree) -> impl std::iter::Iterator<Item = TokenTree> {tokenstream_probably_equal_for_proc_macro::break_tokens}>, &mut std::iter::FlatMap<Cursor, impl std::iter::Iterator<Item = TokenTree>, fn(TokenTree) -> impl std::iter::Iterator<Item = TokenTree> {tokenstream_probably_equal_for_proc_macro::break_tokens}>>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:51
    let mut _8: std::iter::Zip<&mut std::iter::FlatMap<Cursor, impl std::iter::Iterator<Item = TokenTree>, fn(TokenTree) -> impl std::iter::Iterator<Item = TokenTree> {tokenstream_probably_equal_for_proc_macro::break_tokens}>, &mut std::iter::FlatMap<Cursor, impl std::iter::Iterator<Item = TokenTree>, fn(TokenTree) -> impl std::iter::Iterator<Item = TokenTree> {tokenstream_probably_equal_for_proc_macro::break_tokens}>>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:51
    let mut _9: &mut std::iter::FlatMap<Cursor, impl std::iter::Iterator<Item = TokenTree>, fn(TokenTree) -> impl std::iter::Iterator<Item = TokenTree> {tokenstream_probably_equal_for_proc_macro::break_tokens}>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:51
    let mut _10: &mut std::iter::FlatMap<Cursor, impl std::iter::Iterator<Item = TokenTree>, fn(TokenTree) -> impl std::iter::Iterator<Item = TokenTree> {tokenstream_probably_equal_for_proc_macro::break_tokens}>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:34
    let mut _11: &mut std::iter::FlatMap<Cursor, impl std::iter::Iterator<Item = TokenTree>, fn(TokenTree) -> impl std::iter::Iterator<Item = TokenTree> {tokenstream_probably_equal_for_proc_macro::break_tokens}>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:34
    let mut _12: &mut std::iter::FlatMap<Cursor, impl std::iter::Iterator<Item = TokenTree>, fn(TokenTree) -> impl std::iter::Iterator<Item = TokenTree> {tokenstream_probably_equal_for_proc_macro::break_tokens}>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:39: 27:50
    let mut _13: &mut std::iter::FlatMap<Cursor, impl std::iter::Iterator<Item = TokenTree>, fn(TokenTree) -> impl std::iter::Iterator<Item = TokenTree> {tokenstream_probably_equal_for_proc_macro::break_tokens}>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:39: 27:50
    let mut _15: std::option::Option<(TokenTree, TokenTree)>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:51
    let mut _16: &mut std::iter::Zip<&mut std::iter::FlatMap<Cursor, impl std::iter::Iterator<Item = TokenTree>, fn(TokenTree) -> impl std::iter::Iterator<Item = TokenTree> {tokenstream_probably_equal_for_proc_macro::break_tokens}>, &mut std::iter::FlatMap<Cursor, impl std::iter::Iterator<Item = TokenTree>, fn(TokenTree) -> impl std::iter::Iterator<Item = TokenTree> {tokenstream_probably_equal_for_proc_macro::break_tokens}>>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:51
    let mut _17: &mut std::iter::Zip<&mut std::iter::FlatMap<Cursor, impl std::iter::Iterator<Item = TokenTree>, fn(TokenTree) -> impl std::iter::Iterator<Item = TokenTree> {tokenstream_probably_equal_for_proc_macro::break_tokens}>, &mut std::iter::FlatMap<Cursor, impl std::iter::Iterator<Item = TokenTree>, fn(TokenTree) -> impl std::iter::Iterator<Item = TokenTree> {tokenstream_probably_equal_for_proc_macro::break_tokens}>>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:51
    let mut _18: isize;                  // in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:5: 27:54
    scope 1 {
        debug c1 => _1;                  // in scope 1 at ui/mir/mir-inlining/ice-issue-77306-2.rs:21:9: 21:11
        let _2: Cursor;                  // in scope 1 at ui/mir/mir-inlining/ice-issue-77306-2.rs:22:9: 22:11
        scope 2 {
            debug c2 => _2;              // in scope 2 at ui/mir/mir-inlining/ice-issue-77306-2.rs:22:9: 22:11
            let mut _3: std::iter::FlatMap<Cursor, impl std::iter::Iterator<Item = TokenTree>, fn(TokenTree) -> impl std::iter::Iterator<Item = TokenTree> {tokenstream_probably_equal_for_proc_macro::break_tokens}>; // in scope 2 at ui/mir/mir-inlining/ice-issue-77306-2.rs:24:9: 24:15
            scope 3 {
                debug t1 => _3;          // in scope 3 at ui/mir/mir-inlining/ice-issue-77306-2.rs:24:9: 24:15
                let mut _5: std::iter::FlatMap<Cursor, impl std::iter::Iterator<Item = TokenTree>, fn(TokenTree) -> impl std::iter::Iterator<Item = TokenTree> {tokenstream_probably_equal_for_proc_macro::break_tokens}>; // in scope 3 at ui/mir/mir-inlining/ice-issue-77306-2.rs:25:9: 25:15
                scope 4 {
                    debug t2 => _5;      // in scope 4 at ui/mir/mir-inlining/ice-issue-77306-2.rs:25:9: 25:15
                    let mut _14: std::iter::Zip<&mut std::iter::FlatMap<Cursor, impl std::iter::Iterator<Item = TokenTree>, fn(TokenTree) -> impl std::iter::Iterator<Item = TokenTree> {tokenstream_probably_equal_for_proc_macro::break_tokens}>, &mut std::iter::FlatMap<Cursor, impl std::iter::Iterator<Item = TokenTree>, fn(TokenTree) -> impl std::iter::Iterator<Item = TokenTree> {tokenstream_probably_equal_for_proc_macro::break_tokens}>>; // in scope 4 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:51
                    scope 5 {
                        debug iter => _14; // in scope 5 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:51
                        let _19: TokenTree; // in scope 5 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:10: 27:13
                        let _20: TokenTree; // in scope 5 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:15: 27:18
                        scope 6 {
                            debug _t1 => _19; // in scope 6 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:10: 27:13
                            debug _t2 => _20; // in scope 6 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:15: 27:18
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = <Cursor as Iterator>::flat_map::<impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>(move _4, break_tokens) -> bb1; // scope 2 at ui/mir/mir-inlining/ice-issue-77306-2.rs:24:18: 24:43
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77306-2.rs:24:21: 24:29
                                         // + literal: Const { ty: fn(Cursor, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}) -> FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}> {<Cursor as Iterator>::flat_map::<impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77306-2.rs:24:30: 24:42
                                         // + literal: Const { ty: fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = <Cursor as Iterator>::flat_map::<impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>(move _6, break_tokens) -> [return: bb2, unwind: bb14]; // scope 3 at ui/mir/mir-inlining/ice-issue-77306-2.rs:25:18: 25:43
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77306-2.rs:25:21: 25:29
                                         // + literal: Const { ty: fn(Cursor, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}) -> FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}> {<Cursor as Iterator>::flat_map::<impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77306-2.rs:25:30: 25:42
                                         // + literal: Const { ty: fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = &mut _3;                   // scope 4 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:34
        _10 = <FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}> as Iterator>::by_ref(move _11) -> [return: bb3, unwind: bb13]; // scope 4 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:34
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77306-2.rs:27:26: 27:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>) -> &'a mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}> {<FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}> as Iterator>::by_ref}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &mut (*_10);                // scope 4 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:51
        _13 = &mut _5;                   // scope 4 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:39: 27:50
        _12 = <FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}> as Iterator>::by_ref(move _13) -> [return: bb4, unwind: bb13]; // scope 4 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:39: 27:50
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77306-2.rs:27:42: 27:48
                                         // + literal: Const { ty: for<'a> fn(&'a mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>) -> &'a mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}> {<FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}> as Iterator>::by_ref}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = <&mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}> as Iterator>::zip::<&mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>>(move _9, move _12) -> [return: bb5, unwind: bb13]; // scope 4 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:51
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77306-2.rs:27:35: 27:38
                                         // + literal: Const { ty: fn(&mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>, &mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>) -> Zip<&mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>, <&mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}> as IntoIterator>::IntoIter> {<&mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}> as Iterator>::zip::<&mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>>}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = <Zip<&mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>, &mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>> as IntoIterator>::into_iter(move _8) -> [return: bb6, unwind: bb13]; // scope 4 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:51
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:51
                                         // + literal: Const { ty: fn(Zip<&mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>, &mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>>) -> <Zip<&mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>, &mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>> as IntoIterator>::IntoIter {<Zip<&mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>, &mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = move _7;                   // scope 4 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:51
        goto -> bb7;                     // scope 5 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:5: 27:54
    }

    bb7: {
        _17 = &mut _14;                  // scope 5 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:51
        _16 = &mut (*_17);               // scope 5 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:51
        _15 = <Zip<&mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>, &mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>> as Iterator>::next(move _16) -> [return: bb8, unwind: bb13]; // scope 5 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:51
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:51
                                         // + literal: Const { ty: for<'a> fn(&'a mut Zip<&mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>, &mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>>) -> Option<<Zip<&mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>, &mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>> as Iterator>::Item> {<Zip<&mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>, &mut FlatMap<Cursor, impl Iterator<Item = TokenTree>, fn(TokenTree) -> impl Iterator<Item = TokenTree> {break_tokens}>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb8: {
        _18 = discriminant(_15);         // scope 5 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:51
        switchInt(move _18) -> [0: bb10, 1: bb7, otherwise: bb9]; // scope 5 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:51
    }

    bb9: {
        unreachable;                     // scope 5 at ui/mir/mir-inlining/ice-issue-77306-2.rs:27:23: 27:51
    }

    bb10: {
        drop(_5) -> [return: bb11, unwind: bb14]; // scope 3 at ui/mir/mir-inlining/ice-issue-77306-2.rs:28:1: 28:2
    }

    bb11: {
        drop(_3) -> bb12;                // scope 2 at ui/mir/mir-inlining/ice-issue-77306-2.rs:28:1: 28:2
    }

    bb12: {
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:28:2: 28:2
    }

    bb13 (cleanup): {
        drop(_5) -> bb14;                // scope 3 at ui/mir/mir-inlining/ice-issue-77306-2.rs:28:1: 28:2
    }

    bb14 (cleanup): {
        drop(_3) -> bb15;                // scope 2 at ui/mir/mir-inlining/ice-issue-77306-2.rs:28:1: 28:2
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:15:1: 28:2
    }
}

fn break_tokens(_1: TokenTree) -> impl Iterator<Item = TokenTree> {
    debug _tree => _1;                   // in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:16:21: 16:26
    let mut _0: impl std::iter::Iterator<Item = TokenTree>; // return place in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:16:42: 16:73
    let _2: std::vec::Vec<TokenTree>;    // in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:17:13: 17:24
    let mut _3: std::vec::Vec<TokenTree>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:18:9: 18:20
    scope 1 {
        debug token_trees => _2;         // in scope 1 at ui/mir/mir-inlining/ice-issue-77306-2.rs:17:13: 17:24
    }

    bb0: {
        _2 = Vec::<TokenTree>::new() -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<TokenTree> {Vec::<TokenTree>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = move _2;                    // scope 1 at ui/mir/mir-inlining/ice-issue-77306-2.rs:18:9: 18:20
        _0 = <Vec<TokenTree> as IntoIterator>::into_iter(move _3) -> bb2; // scope 1 at ui/mir/mir-inlining/ice-issue-77306-2.rs:18:9: 18:32
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77306-2.rs:18:21: 18:30
                                         // + literal: Const { ty: fn(Vec<TokenTree>) -> <Vec<TokenTree> as IntoIterator>::IntoIter {<Vec<TokenTree> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:19:6: 19:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:30:11: 30:11
    let _1: ();                          // in scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:31:5: 31:48

    bb0: {
        _1 = tokenstream_probably_equal_for_proc_macro() -> bb1; // scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:31:5: 31:48
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77306-2.rs:31:5: 31:46
                                         // + literal: Const { ty: fn() {tokenstream_probably_equal_for_proc_macro}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-77306-2.rs:32:2: 32:2
    }
}
