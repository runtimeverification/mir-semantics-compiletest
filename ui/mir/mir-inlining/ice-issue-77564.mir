// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const N: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:5:10: 5:15

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:5:18: 5:19
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:5:1: 5:20
    }
}

CollectArray::inner_array::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:8:38: 8:39

    bb0: {
        _0 = const _;                    // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:8:38: 8:39
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:8:38: 8:39
    }
}

fn CollectArray::collect_array(_1: &mut Self) -> [A; 2] {
    debug self => _1;                    // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:9:22: 9:31
    let mut _0: [A; 2];                  // return place in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:10:13: 10:19
    let mut _2: &mut Self;               // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:10:22: 10:40
    let mut _3: bool;                    // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:11:9: 11:39
    let mut _4: bool;                    // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:11:17: 11:38
    let mut _5: &std::option::Option<A>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:11:17: 11:38
    let _6: std::option::Option<A>;      // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:11:17: 11:28
    let mut _7: &mut Self;               // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:11:17: 11:28
    let mut _8: !;                       // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:11:9: 11:39
    scope 1 {
        debug result => _0;              // in scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:10:13: 10:19
    }

    bb0: {
        _2 = &mut (*_1);                 // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:10:22: 10:40
        _0 = <Self as CollectArray<A>>::inner_array(move _2) -> bb1; // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:10:22: 10:40
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77564.rs:10:27: 10:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut Self) -> [A; N] {<Self as CollectArray<A>>::inner_array}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &mut (*_1);                 // scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:11:17: 11:28
        _6 = <Self as Iterator>::next(move _7) -> [return: bb2, unwind: bb8]; // scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:11:17: 11:28
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77564.rs:11:22: 11:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut Self) -> Option<<Self as Iterator>::Item> {<Self as Iterator>::next}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_6;                        // scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:11:17: 11:38
        _4 = Option::<A>::is_none(move _5) -> [return: bb3, unwind: bb7]; // scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:11:17: 11:38
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77564.rs:11:29: 11:36
                                         // + literal: Const { ty: for<'a> fn(&'a Option<A>) -> bool {Option::<A>::is_none}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = Not(move _4);               // scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:11:9: 11:39
        drop(_6) -> [return: bb4, unwind: bb8]; // scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:11:38: 11:39
    }

    bb4: {
        switchInt(move _3) -> [0: bb6, otherwise: bb5]; // scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:11:9: 11:39
    }

    bb5: {
        _8 = core::panicking::panic(const "assertion failed: self.next().is_none()") -> bb8; // scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:11:9: 11:39
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77564.rs:11:9: 11:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:13:6: 13:6
    }

    bb7 (cleanup): {
        drop(_6) -> bb8;                 // scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:11:38: 11:39
    }

    bb8 (cleanup): {
        drop(_0) -> bb9;                 // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:13:5: 13:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:9:5: 13:6
    }
}

CollectArray::collect_array::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:9:40: 9:41

    bb0: {
        _0 = const _;                    // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:9:40: 9:41
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:9:40: 9:41
    }
}

fn <impl at ui/mir/mir-inlining/ice-issue-77564.rs:16:1: 16:41>::inner_array(_1: &mut I) -> [A; 2] {
    debug self => _1;                    // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:20:20: 20:29
    let mut _0: [A; 2];                  // return place in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:20:34: 20:40
    let mut _2: [std::mem::MaybeUninit<A>; 2]; // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:21:13: 21:23
    let mut _3: std::mem::MaybeUninit<[std::mem::MaybeUninit<A>; 2]>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:21:56: 21:77
    let mut _4: std::iter::Zip<std::slice::IterMut<'_, std::mem::MaybeUninit<A>>, &mut I>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:56
    let mut _5: std::iter::Zip<std::slice::IterMut<'_, std::mem::MaybeUninit<A>>, &mut I>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:56
    let mut _6: std::slice::IterMut<'_, std::mem::MaybeUninit<A>>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:46
    let mut _7: &mut [std::mem::MaybeUninit<A>]; // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:46
    let mut _8: &mut [std::mem::MaybeUninit<A>; 2]; // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:46
    let mut _9: &mut I;                  // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:22:51: 22:55
    let mut _11: std::option::Option<(&mut std::mem::MaybeUninit<A>, A)>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:56
    let mut _12: &mut std::iter::Zip<std::slice::IterMut<'_, std::mem::MaybeUninit<A>>, &mut I>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:56
    let mut _13: &mut std::iter::Zip<std::slice::IterMut<'_, std::mem::MaybeUninit<A>>, &mut I>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:56
    let mut _14: isize;                  // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:22:9: 24:10
    let mut _17: std::mem::MaybeUninit<A>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:23:21: 23:43
    let mut _18: A;                      // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:23:38: 23:42
    let _20: &[std::mem::MaybeUninit<A>; 2]; // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:25:52: 25:59
    let mut _21: *const [A; 2];          // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:26:33: 26:58
    let mut _22: *const [A; 2];          // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:26:33: 26:58
    let mut _23: *const [std::mem::MaybeUninit<A>; 2]; // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:26:33: 26:41
    scope 1 {
        debug result => _2;              // in scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:21:13: 21:23
        let mut _10: std::iter::Zip<std::slice::IterMut<'_, std::mem::MaybeUninit<A>>, &mut I>; // in scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:56
        let _19: *const [std::mem::MaybeUninit<A>; 2]; // in scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:25:13: 25:21
        scope 3 {
            debug iter => _10;           // in scope 3 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:56
            let _15: &mut std::mem::MaybeUninit<A>; // in scope 3 at ui/mir/mir-inlining/ice-issue-77564.rs:22:14: 22:18
            let _16: A;                  // in scope 3 at ui/mir/mir-inlining/ice-issue-77564.rs:22:20: 22:24
            scope 4 {
                debug dest => _15;       // in scope 4 at ui/mir/mir-inlining/ice-issue-77564.rs:22:14: 22:18
                debug item => _16;       // in scope 4 at ui/mir/mir-inlining/ice-issue-77564.rs:22:20: 22:24
            }
        }
        scope 5 {
            debug temp_ptr => _19;       // in scope 5 at ui/mir/mir-inlining/ice-issue-77564.rs:25:13: 25:21
            scope 6 {
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = MaybeUninit::<[MaybeUninit<A>; 2]>::uninit() -> bb1; // scope 2 at ui/mir/mir-inlining/ice-issue-77564.rs:21:56: 21:77
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77564.rs:21:56: 21:75
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> MaybeUninit<[MaybeUninit<A>; 2]> {MaybeUninit::<[MaybeUninit<A>; 2]>::uninit}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = MaybeUninit::<[MaybeUninit<A>; 2]>::assume_init(move _3) -> bb2; // scope 2 at ui/mir/mir-inlining/ice-issue-77564.rs:21:56: 21:91
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77564.rs:21:78: 21:89
                                         // + literal: Const { ty: unsafe fn(MaybeUninit<[MaybeUninit<A>; 2]>) -> [MaybeUninit<A>; 2] {MaybeUninit::<[MaybeUninit<A>; 2]>::assume_init}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &mut _2;                    // scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:46
        _7 = move _8 as &mut [std::mem::MaybeUninit<A>] (Pointer(Unsize)); // scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:46
        _6 = core::slice::<impl [MaybeUninit<A>]>::iter_mut(move _7) -> bb3; // scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:46
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77564.rs:22:36: 22:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut [MaybeUninit<A>]) -> std::slice::IterMut<'a, MaybeUninit<A>> {core::slice::<impl [MaybeUninit<A>]>::iter_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = move _1;                    // scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:22:51: 22:55
        _5 = <std::slice::IterMut<'_, MaybeUninit<A>> as Iterator>::zip::<&mut I>(move _6, move _9) -> bb4; // scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:56
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77564.rs:22:47: 22:50
                                         // + literal: Const { ty: fn(std::slice::IterMut<'_, MaybeUninit<A>>, &mut I) -> Zip<std::slice::IterMut<'_, MaybeUninit<A>>, <&mut I as IntoIterator>::IntoIter> {<std::slice::IterMut<'_, MaybeUninit<A>> as Iterator>::zip::<&mut I>}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = <Zip<std::slice::IterMut<'_, MaybeUninit<A>>, &mut I> as IntoIterator>::into_iter(move _5) -> bb5; // scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:56
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:56
                                         // + literal: Const { ty: fn(Zip<std::slice::IterMut<'_, MaybeUninit<A>>, &mut I>) -> <Zip<std::slice::IterMut<'_, MaybeUninit<A>>, &mut I> as IntoIterator>::IntoIter {<Zip<std::slice::IterMut<'_, MaybeUninit<A>>, &mut I> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = move _4;                   // scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:56
        goto -> bb6;                     // scope 3 at ui/mir/mir-inlining/ice-issue-77564.rs:22:9: 24:10
    }

    bb6: {
        _13 = &mut _10;                  // scope 3 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:56
        _12 = &mut (*_13);               // scope 3 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:56
        _11 = <Zip<std::slice::IterMut<'_, MaybeUninit<A>>, &mut I> as Iterator>::next(move _12) -> bb7; // scope 3 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:56
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:56
                                         // + literal: Const { ty: for<'a> fn(&'a mut Zip<std::slice::IterMut<'_, MaybeUninit<A>>, &mut I>) -> Option<<Zip<std::slice::IterMut<'_, MaybeUninit<A>>, &mut I> as Iterator>::Item> {<Zip<std::slice::IterMut<'_, MaybeUninit<A>>, &mut I> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = discriminant(_11);         // scope 3 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:56
        switchInt(move _14) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 3 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:56
    }

    bb8: {
        _15 = move (((_11 as Some).0: (&mut std::mem::MaybeUninit<A>, A)).0: &mut std::mem::MaybeUninit<A>); // scope 3 at ui/mir/mir-inlining/ice-issue-77564.rs:22:14: 22:18
        _16 = move (((_11 as Some).0: (&mut std::mem::MaybeUninit<A>, A)).1: A); // scope 3 at ui/mir/mir-inlining/ice-issue-77564.rs:22:20: 22:24
        _18 = move _16;                  // scope 4 at ui/mir/mir-inlining/ice-issue-77564.rs:23:38: 23:42
        _17 = MaybeUninit::<A>::new(move _18) -> bb11; // scope 4 at ui/mir/mir-inlining/ice-issue-77564.rs:23:21: 23:43
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77564.rs:23:21: 23:37
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(A) -> MaybeUninit<A> {MaybeUninit::<A>::new}, val: Value(<ZST>) }
    }

    bb9: {
        unreachable;                     // scope 3 at ui/mir/mir-inlining/ice-issue-77564.rs:22:29: 22:56
    }

    bb10: {
        _20 = &_2;                       // scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:25:52: 25:59
        _19 = &raw const (*_20);         // scope 1 at ui/mir/mir-inlining/ice-issue-77564.rs:25:52: 25:59
        _23 = _19;                       // scope 6 at ui/mir/mir-inlining/ice-issue-77564.rs:26:33: 26:41
        _22 = move _23 as *const [A; 2] (PtrToPtr); // scope 6 at ui/mir/mir-inlining/ice-issue-77564.rs:26:33: 26:58
        _21 = _22;                       // scope 6 at ui/mir/mir-inlining/ice-issue-77564.rs:26:33: 26:58
        _0 = std::ptr::read::<[A; 2]>(move _21) -> bb12; // scope 6 at ui/mir/mir-inlining/ice-issue-77564.rs:26:18: 26:59
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77564.rs:26:18: 26:32
                                         // + literal: Const { ty: unsafe fn(*const [A; 2]) -> [A; 2] {std::ptr::read::<[A; 2]>}, val: Value(<ZST>) }
    }

    bb11: {
        (*_15) = move _17;               // scope 4 at ui/mir/mir-inlining/ice-issue-77564.rs:23:13: 23:43
        goto -> bb6;                     // scope 3 at ui/mir/mir-inlining/ice-issue-77564.rs:22:9: 24:10
    }

    bb12: {
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:27:6: 27:6
    }
}

<impl at ui/mir/mir-inlining/ice-issue-77564.rs:16:1: 16:41>::inner_array::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:20:38: 20:39

    bb0: {
        _0 = const _;                    // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:20:38: 20:39
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:20:38: 20:39
    }
}

<impl at ui/mir/mir-inlining/ice-issue-77564.rs:16:1: 16:41>::inner_array::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:21:42: 21:43

    bb0: {
        _0 = const _;                    // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:21:42: 21:43
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:21:42: 21:43
    }
}

<impl at ui/mir/mir-inlining/ice-issue-77564.rs:16:1: 16:41>::inner_array::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:25:47: 25:48

    bb0: {
        _0 = const _;                    // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:25:47: 25:48
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:25:47: 25:48
    }
}

<impl at ui/mir/mir-inlining/ice-issue-77564.rs:16:1: 16:41>::inner_array::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:26:56: 26:57

    bb0: {
        _0 = const _;                    // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:26:56: 26:57
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:26:56: 26:57
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:30:11: 30:11
    let mut _1: (&[[&i32; 2]; 2], &[[&i32; 2]; 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &[[&i32; 2]; 2];         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: [[&i32; 2]; 2];              // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:9: 35:29
    let mut _4: &mut std::iter::Map<std::slice::Iter<'_, [i32; 2]>, [closure@ui/mir/mir-inlining/ice-issue-77564.rs:34:18: 34:23]>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:9: 35:29
    let mut _5: std::iter::Map<std::slice::Iter<'_, [i32; 2]>, [closure@ui/mir/mir-inlining/ice-issue-77564.rs:34:18: 34:23]>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:9: 34:51
    let mut _6: std::slice::Iter<'_, [i32; 2]>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:9: 33:20
    let mut _7: &[[i32; 2]];             // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:9: 33:20
    let mut _8: &[[i32; 2]; 2];          // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:9: 33:20
    let mut _9: [closure@ui/mir/mir-inlining/ice-issue-77564.rs:34:18: 34:23]; // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:34:18: 34:50
    let mut _10: &[[&i32; 2]; 2];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _11: &[[&i32; 2]; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _12: &[[&i32; 2]; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: &[[&i32; 2]; 2];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: &[[&i32; 2]; 2];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _20: &[[&i32; 2]; 2];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _21: &[[&i32; 2]; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _22: &[[&i32; 2]; 2];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _23: &[[&i32; 2]; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _25: &[[&i32; 2]; 2];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _26: &[[i32; 2]; 2];         // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:9: 33:20
    scope 1 {
        debug left_val => _11;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _12;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _17: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _17;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _26 = const _;                   // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:9: 33:20
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77564.rs:32:9: 33:20
                                         // + literal: Const { ty: &[[i32; 2]; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _8 = _26;                        // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:9: 33:20
        _7 = move _8 as &[[i32; 2]] (Pointer(Unsize)); // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:9: 33:20
        _6 = core::slice::<impl [[i32; 2]]>::iter(move _7) -> bb1; // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:9: 33:20
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77564.rs:33:14: 33:18
                                         // + literal: Const { ty: for<'a> fn(&'a [[i32; 2]]) -> std::slice::Iter<'a, [i32; 2]> {core::slice::<impl [[i32; 2]]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = <std::slice::Iter<'_, [i32; 2]> as Iterator>::map::<[&i32; 2], [closure@ui/mir/mir-inlining/ice-issue-77564.rs:34:18: 34:23]>(move _6, move _9) -> bb2; // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:9: 34:51
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77564.rs:34:14: 34:17
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, [i32; 2]>, [closure@ui/mir/mir-inlining/ice-issue-77564.rs:34:18: 34:23]) -> Map<std::slice::Iter<'_, [i32; 2]>, [closure@ui/mir/mir-inlining/ice-issue-77564.rs:34:18: 34:23]> {<std::slice::Iter<'_, [i32; 2]> as Iterator>::map::<[&i32; 2], [closure@ui/mir/mir-inlining/ice-issue-77564.rs:34:18: 34:23]>}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &mut _5;                    // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:9: 35:29
        _3 = <Map<std::slice::Iter<'_, [i32; 2]>, [closure@ui/mir/mir-inlining/ice-issue-77564.rs:34:18: 34:23]> as CollectArray<[&i32; 2]>>::collect_array(move _4) -> bb3; // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:9: 35:29
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77564.rs:35:14: 35:27
                                         // + literal: Const { ty: for<'a> fn(&'a mut Map<std::slice::Iter<'_, [i32; 2]>, [closure@ui/mir/mir-inlining/ice-issue-77564.rs:34:18: 34:23]>) -> [[&i32; 2]; N] {<Map<std::slice::Iter<'_, [i32; 2]>, [closure@ui/mir/mir-inlining/ice-issue-77564.rs:34:18: 34:23]> as CollectArray<[&i32; 2]>>::collect_array}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _25 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[[&i32; 2]; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _10 = _25;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _10);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_1.0: &[[&i32; 2]; 2]);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_1.1: &[[&i32; 2]; 2]);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = _11;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = _12;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = <[[&i32; 2]; 2] as PartialEq>::eq(move _15, move _16) -> bb4; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [[&i32; 2]; 2], &'b [[&i32; 2]; 2]) -> bool {<[[&i32; 2]; 2] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = Not(move _14);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb6, otherwise: bb5]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _17 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = _11;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _21;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _12;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = _23;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = core::panicking::assert_failed::<[[&i32; 2]; 2], [[&i32; 2]; 2]>(move _19, move _20, move _22, move _24); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [[&i32; 2]; 2], &'b [[&i32; 2]; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[[&i32; 2]; 2], [[&i32; 2]; 2]>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:38:2: 38:2
    }
}

promoted[0] in main: &[[&i32; 2]; 2] = {
    let mut _0: &[[&i32; 2]; 2];         // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [[&i32; 2]; 2];          // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:9: 36:29
    let mut _2: [&i32; 2];               // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:10: 36:18
    let mut _3: &i32;                    // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:11: 36:13
    let mut _4: i32;                     // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:12: 36:13
    let mut _5: &i32;                    // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:15: 36:17
    let mut _6: &i32;                    // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:15: 36:17
    let mut _7: i32;                     // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:16: 36:17
    let mut _8: [&i32; 2];               // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:20: 36:28
    let mut _9: &i32;                    // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:21: 36:23
    let mut _10: &i32;                   // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:21: 36:23
    let mut _11: i32;                    // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:22: 36:23
    let mut _12: &i32;                   // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:25: 36:27
    let mut _13: &i32;                   // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:25: 36:27
    let mut _14: i32;                    // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:26: 36:27

    bb0: {
        _4 = const 1_i32;                // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:12: 36:13
        _3 = &_4;                        // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:11: 36:13
        _7 = const 2_i32;                // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:16: 36:17
        _6 = &_7;                        // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:15: 36:17
        _5 = &(*_6);                     // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:15: 36:17
        _2 = [move _3, move _5];         // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:10: 36:18
        _11 = const 3_i32;               // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:22: 36:23
        _10 = &_11;                      // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:21: 36:23
        _9 = &(*_10);                    // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:21: 36:23
        _14 = const 4_i32;               // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:26: 36:27
        _13 = &_14;                      // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:25: 36:27
        _12 = &(*_13);                   // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:25: 36:27
        _8 = [move _9, move _12];        // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:20: 36:28
        _1 = [move _2, move _8];         // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:36:9: 36:29
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[[i32; 2]; 2] = {
    let mut _0: &[[i32; 2]; 2];          // return place in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:9: 33:20
    let mut _1: [[i32; 2]; 2];           // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:9: 32:25
    let mut _2: [i32; 2];                // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:10: 32:16
    let mut _3: [i32; 2];                // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:18: 32:24

    bb0: {
        _2 = [const 1_i32, const 2_i32]; // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:10: 32:16
        _3 = [const 3_i32, const 4_i32]; // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:18: 32:24
        _1 = [move _2, move _3];         // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:9: 32:25
        _0 = &_1;                        // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:9: 33:20
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:32:9: 33:20
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/mir/mir-inlining/ice-issue-77564.rs:34:18: 34:23], _2: &[i32; 2]) -> [&i32; 2] {
    debug row => _2;                     // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:34:19: 34:22
    let mut _0: [&i32; 2];               // return place in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:34:24: 34:24
    let mut _3: &mut std::slice::Iter<'_, i32>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:34:24: 34:50
    let mut _4: std::slice::Iter<'_, i32>; // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:34:24: 34:34
    let mut _5: &[i32];                  // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:34:24: 34:34
    let mut _6: &[i32; 2];               // in scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:34:24: 34:34

    bb0: {
        _6 = _2;                         // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:34:24: 34:34
        _5 = move _6 as &[i32] (Pointer(Unsize)); // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:34:24: 34:34
        _4 = core::slice::<impl [i32]>::iter(move _5) -> bb1; // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:34:24: 34:34
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77564.rs:34:28: 34:32
                                         // + literal: Const { ty: for<'a> fn(&'a [i32]) -> std::slice::Iter<'a, i32> {core::slice::<impl [i32]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &mut _4;                    // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:34:24: 34:50
        _0 = <std::slice::Iter<'_, i32> as CollectArray<&i32>>::collect_array(move _3) -> bb2; // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:34:24: 34:50
                                         // mir::Constant
                                         // + span: ui/mir/mir-inlining/ice-issue-77564.rs:34:35: 34:48
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, i32>) -> [&i32; N] {<std::slice::Iter<'_, i32> as CollectArray<&i32>>::collect_array}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/mir/mir-inlining/ice-issue-77564.rs:34:50: 34:50
    }
}
