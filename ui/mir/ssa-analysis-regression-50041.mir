// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/mir/ssa-analysis-regression-50041.rs:15:1: 15:32>::drop(_1: &mut Box<T>) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:16:13: 16:22
    let mut _0: ();                      // return place in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:16:24: 16:24

    bb0: {
        return;                          // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:16:26: 16:26
    }
}

fn box_free(_1: Unique<T>) -> () {
    debug ptr => _1;                     // in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:21:31: 21:34
    let mut _0: ();                      // return place in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:21:47: 21:47
    let mut _2: *const T;                // in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:22:13: 22:20

    bb0: {
        _2 = ((_1.0: NonNull<T>).0: *const T); // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:22:13: 22:20
        _0 = dealloc::<T>(move _2) -> bb1; // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:22:5: 22:21
                                         // mir::Constant
                                         // + span: ui/mir/ssa-analysis-regression-50041.rs:22:5: 22:12
                                         // + literal: Const { ty: fn(*const T) {dealloc::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:23:2: 23:2
    }
}

fn dealloc(_1: *const T) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:26:36: 26:36

    bb0: {
        return;                          // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:26:38: 26:38
    }
}

fn foo(_1: Option<Box<Foo<usize>>>) -> usize {
    debug a => _1;                       // in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:30:12: 30:13
    let mut _0: usize;                   // return place in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:30:43: 30:48
    let _2: Foo<usize>;                  // in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:31:9: 31:10
    let mut _3: isize;                   // in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:32:9: 32:13
    let _4: Box<Foo<usize>>;             // in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:33:14: 33:17
    let mut _5: ();                      // in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:33:25: 33:26
    let mut _6: *const Foo<usize>;       // in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:33:14: 33:17
    scope 1 {
        debug f => _2;                   // in scope 1 at ui/mir/ssa-analysis-regression-50041.rs:31:9: 31:10
    }
    scope 2 {
        debug vec => _4;                 // in scope 2 at ui/mir/ssa-analysis-regression-50041.rs:33:14: 33:17
    }

    bb0: {
        _3 = discriminant(_1);           // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:31:19: 31:20
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:31:13: 31:20
    }

    bb1: {
        _4 = move ((_1 as Some).0: Box<Foo<usize>>); // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:33:14: 33:17
        _6 = (((_4.0: Unique<Foo<usize>>).0: NonNull<Foo<usize>>).0: *const Foo<usize>); // scope 2 at ui/mir/ssa-analysis-regression-50041.rs:33:22: 33:26
        _2 = move (*_6);                 // scope 2 at ui/mir/ssa-analysis-regression-50041.rs:33:22: 33:26
        _5 = box_free::<Foo<usize>>(move (_4.0: Unique<Foo<usize>>)) -> bb4; // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:33:25: 33:26
                                         // mir::Constant
                                         // + span: ui/mir/ssa-analysis-regression-50041.rs:33:25: 33:26
                                         // + literal: Const { ty: unsafe fn(Unique<Foo<usize>>) {box_free::<Foo<usize>>}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:31:19: 31:20
    }

    bb3: {
        _2 = const Foo::<usize>(0_usize); // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:32:17: 32:23
                                         // mir::Constant
                                         // + span: ui/mir/ssa-analysis-regression-50041.rs:32:17: 32:23
                                         // + literal: Const { ty: Foo<usize>, val: Value(Scalar(0x0000000000000000)) }
        goto -> bb4;                     // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:32:17: 32:23
    }

    bb4: {
        _0 = (_2.0: usize);              // scope 1 at ui/mir/ssa-analysis-regression-50041.rs:35:5: 35:8
        return;                          // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:36:2: 36:2
    }
}

fn NonNull(_1: *const T) -> NonNull<T> {
    let mut _0: NonNull<T>;              // return place in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:8:1: 8:26

    bb0: {
        _0 = NonNull::<T>(move _1);      // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:8:1: 8:26
        return;                          // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:8:1: 8:26
    }
}

// MIR FOR CTFE
fn NonNull(_1: *const T) -> NonNull<T> {
    let mut _0: NonNull<T>;              // return place in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:8:1: 8:26

    bb0: {
        _0 = NonNull::<T>(move _1);      // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:8:1: 8:26
        return;                          // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:8:1: 8:26
    }
}

fn Unique(_1: NonNull<T>) -> Unique<T> {
    let mut _0: Unique<T>;               // return place in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:10:1: 10:25

    bb0: {
        _0 = Unique::<T>(move _1);       // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:10:1: 10:25
        return;                          // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:10:1: 10:25
    }
}

// MIR FOR CTFE
fn Unique(_1: NonNull<T>) -> Unique<T> {
    let mut _0: Unique<T>;               // return place in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:10:1: 10:25

    bb0: {
        _0 = Unique::<T>(move _1);       // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:10:1: 10:25
        return;                          // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:10:1: 10:25
    }
}

fn Box(_1: Unique<T>) -> Box<T> {
    let mut _0: Box<T>;                  // return place in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:13:1: 13:26

    bb0: {
        _0 = Box::<T>(move _1);          // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:13:1: 13:26
        return;                          // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:13:1: 13:26
    }
}

// MIR FOR CTFE
fn Box(_1: Unique<T>) -> Box<T> {
    let mut _0: Box<T>;                  // return place in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:13:1: 13:26

    bb0: {
        _0 = Box::<T>(move _1);          // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:13:1: 13:26
        return;                          // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:13:1: 13:26
    }
}

fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:28:1: 28:18

    bb0: {
        _0 = Foo::<T>(move _1);          // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:28:1: 28:18
        return;                          // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:28:1: 28:18
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/mir/ssa-analysis-regression-50041.rs:28:1: 28:18

    bb0: {
        _0 = Foo::<T>(move _1);          // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:28:1: 28:18
        return;                          // scope 0 at ui/mir/ssa-analysis-regression-50041.rs:28:1: 28:18
    }
}
