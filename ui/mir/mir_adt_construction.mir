// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
CEnum::Hello::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/mir/mir_adt_construction.rs:6:13: 6:15

    bb0: {
        _0 = const 30_isize;             // scope 0 at ui/mir/mir_adt_construction.rs:6:13: 6:15
        return;                          // scope 0 at ui/mir/mir_adt_construction.rs:6:13: 6:15
    }
}

CEnum::World::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/mir/mir_adt_construction.rs:7:13: 7:15

    bb0: {
        _0 = const 60_isize;             // scope 0 at ui/mir/mir_adt_construction.rs:7:13: 7:15
        return;                          // scope 0 at ui/mir/mir_adt_construction.rs:7:13: 7:15
    }
}

fn test1(_1: CEnum) -> i32 {
    debug c => _1;                       // in scope 0 at ui/mir/mir_adt_construction.rs:10:10: 10:11
    let mut _0: i32;                     // return place in scope 0 at ui/mir/mir_adt_construction.rs:10:23: 10:26
    let _2: CEnum;                       // in scope 0 at ui/mir/mir_adt_construction.rs:11:9: 11:11
    let mut _3: (CEnum, CEnum);          // in scope 0 at ui/mir/mir_adt_construction.rs:12:11: 12:18
    let mut _4: CEnum;                   // in scope 0 at ui/mir/mir_adt_construction.rs:12:12: 12:13
    let mut _5: CEnum;                   // in scope 0 at ui/mir/mir_adt_construction.rs:12:15: 12:17
    let mut _6: isize;                   // in scope 0 at ui/mir/mir_adt_construction.rs:13:10: 13:22
    scope 1 {
        debug c2 => _2;                  // in scope 1 at ui/mir/mir_adt_construction.rs:11:9: 11:11
    }

    bb0: {
        _2 = const CEnum::Hello;         // scope 0 at ui/mir/mir_adt_construction.rs:11:14: 11:26
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:11:14: 11:26
                                         // + literal: Const { ty: CEnum, val: Value(Scalar(0x0000001e)) }
        _4 = move _1;                    // scope 1 at ui/mir/mir_adt_construction.rs:12:12: 12:13
        _5 = const CEnum::Hello;         // scope 1 at ui/mir/mir_adt_construction.rs:12:15: 12:17
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:12:15: 12:17
                                         // + literal: Const { ty: CEnum, val: Value(Scalar(0x0000001e)) }
        _3 = (move _4, move _5);         // scope 1 at ui/mir/mir_adt_construction.rs:12:11: 12:18
        _6 = discriminant((_3.0: CEnum)); // scope 1 at ui/mir/mir_adt_construction.rs:12:11: 12:18
        switchInt(move _6) -> [30: bb1, 60: bb2, otherwise: bb4]; // scope 1 at ui/mir/mir_adt_construction.rs:12:5: 12:18
    }

    bb1: {
        _0 = const 42_i32;               // scope 1 at ui/mir/mir_adt_construction.rs:13:41: 13:43
        goto -> bb3;                     // scope 1 at ui/mir/mir_adt_construction.rs:13:41: 13:43
    }

    bb2: {
        _0 = const 0_i32;                // scope 1 at ui/mir/mir_adt_construction.rs:14:41: 14:42
        goto -> bb3;                     // scope 1 at ui/mir/mir_adt_construction.rs:14:41: 14:42
    }

    bb3: {
        return;                          // scope 0 at ui/mir/mir_adt_construction.rs:17:2: 17:2
    }

    bb4: {
        unreachable;                     // scope 1 at ui/mir/mir_adt_construction.rs:15:14: 15:15
    }
}

fn <impl at ui/mir/mir_adt_construction.rs:30:1: 30:25>::fmt(_1: &Pakd, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/mir/mir_adt_construction.rs:31:12: 31:17
    debug f => _2;                       // in scope 0 at ui/mir/mir_adt_construction.rs:31:19: 31:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/mir/mir_adt_construction.rs:31:46: 31:57
    let _3: u64;                         // in scope 0 at ui/mir/mir_adt_construction.rs:35:20: 35:21
    let _4: u32;                         // in scope 0 at ui/mir/mir_adt_construction.rs:35:23: 35:24
    let _5: u16;                         // in scope 0 at ui/mir/mir_adt_construction.rs:35:26: 35:27
    let _6: u8;                          // in scope 0 at ui/mir/mir_adt_construction.rs:35:29: 35:30
    let _7: ();                          // in scope 0 at ui/mir/mir_adt_construction.rs:35:32: 35:33
    let mut _8: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/mir/mir_adt_construction.rs:36:9: 42:22
    let mut _9: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/mir/mir_adt_construction.rs:36:9: 41:28
    let mut _10: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/mir/mir_adt_construction.rs:36:9: 41:28
    let mut _11: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/mir/mir_adt_construction.rs:36:9: 40:28
    let mut _12: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/mir/mir_adt_construction.rs:36:9: 40:28
    let mut _13: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/mir/mir_adt_construction.rs:36:9: 39:28
    let mut _14: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/mir/mir_adt_construction.rs:36:9: 39:28
    let mut _15: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/mir/mir_adt_construction.rs:36:9: 38:28
    let mut _16: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/mir/mir_adt_construction.rs:36:9: 38:28
    let mut _17: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/mir/mir_adt_construction.rs:36:9: 37:28
    let mut _18: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/mir/mir_adt_construction.rs:36:9: 37:28
    let mut _19: std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/mir/mir_adt_construction.rs:36:9: 36:31
    let mut _20: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/mir/mir_adt_construction.rs:36:9: 36:31
    let mut _21: &str;                   // in scope 0 at ui/mir/mir_adt_construction.rs:36:24: 36:30
    let _22: &str;                       // in scope 0 at ui/mir/mir_adt_construction.rs:36:24: 36:30
    let mut _23: &str;                   // in scope 0 at ui/mir/mir_adt_construction.rs:37:20: 37:23
    let _24: &str;                       // in scope 0 at ui/mir/mir_adt_construction.rs:37:20: 37:23
    let mut _25: &dyn std::fmt::Debug;   // in scope 0 at ui/mir/mir_adt_construction.rs:37:25: 37:27
    let mut _26: &u64;                   // in scope 0 at ui/mir/mir_adt_construction.rs:37:25: 37:27
    let _27: &u64;                       // in scope 0 at ui/mir/mir_adt_construction.rs:37:25: 37:27
    let mut _28: &str;                   // in scope 0 at ui/mir/mir_adt_construction.rs:38:20: 38:23
    let _29: &str;                       // in scope 0 at ui/mir/mir_adt_construction.rs:38:20: 38:23
    let mut _30: &dyn std::fmt::Debug;   // in scope 0 at ui/mir/mir_adt_construction.rs:38:25: 38:27
    let mut _31: &u32;                   // in scope 0 at ui/mir/mir_adt_construction.rs:38:25: 38:27
    let _32: &u32;                       // in scope 0 at ui/mir/mir_adt_construction.rs:38:25: 38:27
    let mut _33: &str;                   // in scope 0 at ui/mir/mir_adt_construction.rs:39:20: 39:23
    let _34: &str;                       // in scope 0 at ui/mir/mir_adt_construction.rs:39:20: 39:23
    let mut _35: &dyn std::fmt::Debug;   // in scope 0 at ui/mir/mir_adt_construction.rs:39:25: 39:27
    let mut _36: &u16;                   // in scope 0 at ui/mir/mir_adt_construction.rs:39:25: 39:27
    let _37: &u16;                       // in scope 0 at ui/mir/mir_adt_construction.rs:39:25: 39:27
    let mut _38: &str;                   // in scope 0 at ui/mir/mir_adt_construction.rs:40:20: 40:23
    let _39: &str;                       // in scope 0 at ui/mir/mir_adt_construction.rs:40:20: 40:23
    let mut _40: &dyn std::fmt::Debug;   // in scope 0 at ui/mir/mir_adt_construction.rs:40:25: 40:27
    let mut _41: &u8;                    // in scope 0 at ui/mir/mir_adt_construction.rs:40:25: 40:27
    let _42: &u8;                        // in scope 0 at ui/mir/mir_adt_construction.rs:40:25: 40:27
    let mut _43: &str;                   // in scope 0 at ui/mir/mir_adt_construction.rs:41:20: 41:23
    let _44: &str;                       // in scope 0 at ui/mir/mir_adt_construction.rs:41:20: 41:23
    let mut _45: &dyn std::fmt::Debug;   // in scope 0 at ui/mir/mir_adt_construction.rs:41:25: 41:27
    let mut _46: &();                    // in scope 0 at ui/mir/mir_adt_construction.rs:41:25: 41:27
    let _47: &();                        // in scope 0 at ui/mir/mir_adt_construction.rs:41:25: 41:27
    scope 1 {
        debug a => _3;                   // in scope 1 at ui/mir/mir_adt_construction.rs:35:20: 35:21
        debug b => _4;                   // in scope 1 at ui/mir/mir_adt_construction.rs:35:23: 35:24
        debug c => _5;                   // in scope 1 at ui/mir/mir_adt_construction.rs:35:26: 35:27
        debug d => _6;                   // in scope 1 at ui/mir/mir_adt_construction.rs:35:29: 35:30
        debug e => _7;                   // in scope 1 at ui/mir/mir_adt_construction.rs:35:32: 35:33
    }

    bb0: {
        _3 = ((*_1).0: u64);             // scope 0 at ui/mir/mir_adt_construction.rs:35:20: 35:21
        _4 = ((*_1).1: u32);             // scope 0 at ui/mir/mir_adt_construction.rs:35:23: 35:24
        _5 = ((*_1).2: u16);             // scope 0 at ui/mir/mir_adt_construction.rs:35:26: 35:27
        _6 = ((*_1).3: u8);              // scope 0 at ui/mir/mir_adt_construction.rs:35:29: 35:30
        _20 = &mut (*_2);                // scope 1 at ui/mir/mir_adt_construction.rs:36:9: 36:31
        _22 = const "Pakd";              // scope 1 at ui/mir/mir_adt_construction.rs:36:24: 36:30
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:36:24: 36:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _21 = _22;                       // scope 1 at ui/mir/mir_adt_construction.rs:36:24: 36:30
        _19 = Formatter::<'_>::debug_struct(move _20, move _21) -> bb1; // scope 1 at ui/mir/mir_adt_construction.rs:36:9: 36:31
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:36:11: 36:23
                                         // + literal: Const { ty: for<'b, 'a> fn(&'b mut Formatter<'_>, &'a str) -> DebugStruct<'b, '_> {Formatter::<'_>::debug_struct}, val: Value(<ZST>) }
    }

    bb1: {
        _18 = &mut _19;                  // scope 1 at ui/mir/mir_adt_construction.rs:36:9: 37:28
        _24 = const "a";                 // scope 1 at ui/mir/mir_adt_construction.rs:37:20: 37:23
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:37:20: 37:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _23 = _24;                       // scope 1 at ui/mir/mir_adt_construction.rs:37:20: 37:23
        _27 = &_3;                       // scope 1 at ui/mir/mir_adt_construction.rs:37:25: 37:27
        _26 = _27;                       // scope 1 at ui/mir/mir_adt_construction.rs:37:25: 37:27
        _25 = move _26 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/mir/mir_adt_construction.rs:37:25: 37:27
        _17 = DebugStruct::<'_, '_>::field(move _18, move _23, move _25) -> bb2; // scope 1 at ui/mir/mir_adt_construction.rs:36:9: 37:28
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:37:14: 37:19
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut DebugStruct<'_, '_>, &'b str, &'c (dyn Debug + 'c)) -> &'a mut DebugStruct<'_, '_> {DebugStruct::<'_, '_>::field}, val: Value(<ZST>) }
    }

    bb2: {
        _16 = &mut (*_17);               // scope 1 at ui/mir/mir_adt_construction.rs:36:9: 38:28
        _29 = const "b";                 // scope 1 at ui/mir/mir_adt_construction.rs:38:20: 38:23
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:38:20: 38:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _28 = _29;                       // scope 1 at ui/mir/mir_adt_construction.rs:38:20: 38:23
        _32 = &_4;                       // scope 1 at ui/mir/mir_adt_construction.rs:38:25: 38:27
        _31 = _32;                       // scope 1 at ui/mir/mir_adt_construction.rs:38:25: 38:27
        _30 = move _31 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/mir/mir_adt_construction.rs:38:25: 38:27
        _15 = DebugStruct::<'_, '_>::field(move _16, move _28, move _30) -> bb3; // scope 1 at ui/mir/mir_adt_construction.rs:36:9: 38:28
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:38:14: 38:19
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut DebugStruct<'_, '_>, &'b str, &'c (dyn Debug + 'c)) -> &'a mut DebugStruct<'_, '_> {DebugStruct::<'_, '_>::field}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = &mut (*_15);               // scope 1 at ui/mir/mir_adt_construction.rs:36:9: 39:28
        _34 = const "c";                 // scope 1 at ui/mir/mir_adt_construction.rs:39:20: 39:23
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:39:20: 39:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _33 = _34;                       // scope 1 at ui/mir/mir_adt_construction.rs:39:20: 39:23
        _37 = &_5;                       // scope 1 at ui/mir/mir_adt_construction.rs:39:25: 39:27
        _36 = _37;                       // scope 1 at ui/mir/mir_adt_construction.rs:39:25: 39:27
        _35 = move _36 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/mir/mir_adt_construction.rs:39:25: 39:27
        _13 = DebugStruct::<'_, '_>::field(move _14, move _33, move _35) -> bb4; // scope 1 at ui/mir/mir_adt_construction.rs:36:9: 39:28
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:39:14: 39:19
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut DebugStruct<'_, '_>, &'b str, &'c (dyn Debug + 'c)) -> &'a mut DebugStruct<'_, '_> {DebugStruct::<'_, '_>::field}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = &mut (*_13);               // scope 1 at ui/mir/mir_adt_construction.rs:36:9: 40:28
        _39 = const "d";                 // scope 1 at ui/mir/mir_adt_construction.rs:40:20: 40:23
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:40:20: 40:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _38 = _39;                       // scope 1 at ui/mir/mir_adt_construction.rs:40:20: 40:23
        _42 = &_6;                       // scope 1 at ui/mir/mir_adt_construction.rs:40:25: 40:27
        _41 = _42;                       // scope 1 at ui/mir/mir_adt_construction.rs:40:25: 40:27
        _40 = move _41 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/mir/mir_adt_construction.rs:40:25: 40:27
        _11 = DebugStruct::<'_, '_>::field(move _12, move _38, move _40) -> bb5; // scope 1 at ui/mir/mir_adt_construction.rs:36:9: 40:28
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:40:14: 40:19
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut DebugStruct<'_, '_>, &'b str, &'c (dyn Debug + 'c)) -> &'a mut DebugStruct<'_, '_> {DebugStruct::<'_, '_>::field}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = &mut (*_11);               // scope 1 at ui/mir/mir_adt_construction.rs:36:9: 41:28
        _44 = const "e";                 // scope 1 at ui/mir/mir_adt_construction.rs:41:20: 41:23
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:41:20: 41:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _43 = _44;                       // scope 1 at ui/mir/mir_adt_construction.rs:41:20: 41:23
        _47 = &_7;                       // scope 1 at ui/mir/mir_adt_construction.rs:41:25: 41:27
        _46 = _47;                       // scope 1 at ui/mir/mir_adt_construction.rs:41:25: 41:27
        _45 = move _46 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/mir/mir_adt_construction.rs:41:25: 41:27
        _9 = DebugStruct::<'_, '_>::field(move _10, move _43, move _45) -> bb6; // scope 1 at ui/mir/mir_adt_construction.rs:36:9: 41:28
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:41:14: 41:19
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut DebugStruct<'_, '_>, &'b str, &'c (dyn Debug + 'c)) -> &'a mut DebugStruct<'_, '_> {DebugStruct::<'_, '_>::field}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = &mut (*_9);                 // scope 1 at ui/mir/mir_adt_construction.rs:36:9: 42:22
        _0 = DebugStruct::<'_, '_>::finish(move _8) -> bb7; // scope 1 at ui/mir/mir_adt_construction.rs:36:9: 42:22
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:42:14: 42:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut DebugStruct<'_, '_>) -> Result<(), std::fmt::Error> {DebugStruct::<'_, '_>::finish}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/mir/mir_adt_construction.rs:43:6: 43:6
    }
}

fn <impl at ui/mir/mir_adt_construction.rs:48:1: 48:24>::eq(_1: &Pakd, _2: &Pakd) -> bool {
    debug self => _1;                    // in scope 0 at ui/mir/mir_adt_construction.rs:49:11: 49:16
    debug other => _2;                   // in scope 0 at ui/mir/mir_adt_construction.rs:49:18: 49:23
    let mut _0: bool;                    // return place in scope 0 at ui/mir/mir_adt_construction.rs:49:35: 49:39
    let mut _3: bool;                    // in scope 0 at ui/mir/mir_adt_construction.rs:50:9: 53:30
    let mut _4: bool;                    // in scope 0 at ui/mir/mir_adt_construction.rs:50:9: 52:30
    let mut _5: bool;                    // in scope 0 at ui/mir/mir_adt_construction.rs:50:9: 51:30
    let mut _6: bool;                    // in scope 0 at ui/mir/mir_adt_construction.rs:50:9: 50:26
    let mut _7: u64;                     // in scope 0 at ui/mir/mir_adt_construction.rs:50:9: 50:15
    let mut _8: u64;                     // in scope 0 at ui/mir/mir_adt_construction.rs:50:19: 50:26
    let mut _9: bool;                    // in scope 0 at ui/mir/mir_adt_construction.rs:51:13: 51:30
    let mut _10: u32;                    // in scope 0 at ui/mir/mir_adt_construction.rs:51:13: 51:19
    let mut _11: u32;                    // in scope 0 at ui/mir/mir_adt_construction.rs:51:23: 51:30
    let mut _12: bool;                   // in scope 0 at ui/mir/mir_adt_construction.rs:52:13: 52:30
    let mut _13: u16;                    // in scope 0 at ui/mir/mir_adt_construction.rs:52:13: 52:19
    let mut _14: u16;                    // in scope 0 at ui/mir/mir_adt_construction.rs:52:23: 52:30
    let mut _15: bool;                   // in scope 0 at ui/mir/mir_adt_construction.rs:53:13: 53:30
    let mut _16: u8;                     // in scope 0 at ui/mir/mir_adt_construction.rs:53:13: 53:19
    let mut _17: u8;                     // in scope 0 at ui/mir/mir_adt_construction.rs:53:23: 53:30
    let mut _18: bool;                   // in scope 0 at ui/mir/mir_adt_construction.rs:54:13: 54:30
    let mut _19: &();                    // in scope 0 at ui/mir/mir_adt_construction.rs:54:13: 54:19
    let mut _20: &();                    // in scope 0 at ui/mir/mir_adt_construction.rs:54:23: 54:30

    bb0: {
        _7 = ((*_1).0: u64);             // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 50:15
        _8 = ((*_2).0: u64);             // scope 0 at ui/mir/mir_adt_construction.rs:50:19: 50:26
        _6 = Eq(move _7, move _8);       // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 50:26
        switchInt(move _6) -> [0: bb10, otherwise: bb11]; // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 51:30
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 54:30
        goto -> bb3;                     // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 54:30
    }

    bb2: {
        _19 = &((*_1).4: ());            // scope 0 at ui/mir/mir_adt_construction.rs:54:13: 54:19
        _20 = &((*_2).4: ());            // scope 0 at ui/mir/mir_adt_construction.rs:54:23: 54:30
        _18 = <() as PartialEq>::eq(move _19, move _20) -> bb13; // scope 0 at ui/mir/mir_adt_construction.rs:54:13: 54:30
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:54:13: 54:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (), &'b ()) -> bool {<() as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/mir/mir_adt_construction.rs:55:6: 55:6
    }

    bb4: {
        _3 = const false;                // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 53:30
        goto -> bb6;                     // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 53:30
    }

    bb5: {
        _16 = ((*_1).3: u8);             // scope 0 at ui/mir/mir_adt_construction.rs:53:13: 53:19
        _17 = ((*_2).3: u8);             // scope 0 at ui/mir/mir_adt_construction.rs:53:23: 53:30
        _15 = Eq(move _16, move _17);    // scope 0 at ui/mir/mir_adt_construction.rs:53:13: 53:30
        _3 = move _15;                   // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 53:30
        goto -> bb6;                     // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 53:30
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 54:30
    }

    bb7: {
        _4 = const false;                // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 52:30
        goto -> bb9;                     // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 52:30
    }

    bb8: {
        _13 = ((*_1).2: u16);            // scope 0 at ui/mir/mir_adt_construction.rs:52:13: 52:19
        _14 = ((*_2).2: u16);            // scope 0 at ui/mir/mir_adt_construction.rs:52:23: 52:30
        _12 = Eq(move _13, move _14);    // scope 0 at ui/mir/mir_adt_construction.rs:52:13: 52:30
        _4 = move _12;                   // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 52:30
        goto -> bb9;                     // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 52:30
    }

    bb9: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 53:30
    }

    bb10: {
        _5 = const false;                // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 51:30
        goto -> bb12;                    // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 51:30
    }

    bb11: {
        _10 = ((*_1).1: u32);            // scope 0 at ui/mir/mir_adt_construction.rs:51:13: 51:19
        _11 = ((*_2).1: u32);            // scope 0 at ui/mir/mir_adt_construction.rs:51:23: 51:30
        _9 = Eq(move _10, move _11);     // scope 0 at ui/mir/mir_adt_construction.rs:51:13: 51:30
        _5 = move _9;                    // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 51:30
        goto -> bb12;                    // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 51:30
    }

    bb12: {
        switchInt(move _5) -> [0: bb7, otherwise: bb8]; // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 52:30
    }

    bb13: {
        _0 = move _18;                   // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 54:30
        goto -> bb3;                     // scope 0 at ui/mir/mir_adt_construction.rs:50:9: 54:30
    }
}

fn <impl at ui/mir/mir_adt_construction.rs:58:1: 58:19>::drop(_1: &mut Pakd) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/mir_adt_construction.rs:59:13: 59:22
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_adt_construction.rs:59:24: 59:24

    bb0: {
        return;                          // scope 0 at ui/mir/mir_adt_construction.rs:59:26: 59:26
    }
}

fn test2() -> Pakd {
    let mut _0: Pakd;                    // return place in scope 0 at ui/mir/mir_adt_construction.rs:62:15: 62:19
    let mut _1: ();                      // in scope 0 at ui/mir/mir_adt_construction.rs:63:43: 63:45

    bb0: {
        _0 = Pakd { a: const 42_u64, b: const 42_u32, c: const 42_u16, d: const 42_u8, e: move _1 }; // scope 0 at ui/mir/mir_adt_construction.rs:63:5: 63:47
        return;                          // scope 0 at ui/mir/mir_adt_construction.rs:64:2: 64:2
    }
}

fn <impl at ui/mir/mir_adt_construction.rs:66:10: 66:19>::eq(_1: &TupleLike, _2: &TupleLike) -> bool {
    debug self => _1;                    // in scope 0 at ui/mir/mir_adt_construction.rs:66:10: 66:19
    debug other => _2;                   // in scope 0 at ui/mir/mir_adt_construction.rs:66:10: 66:19
    let mut _0: bool;                    // return place in scope 0 at ui/mir/mir_adt_construction.rs:66:10: 66:19
    let mut _3: bool;                    // in scope 0 at ui/mir/mir_adt_construction.rs:67:18: 67:21
    let mut _4: u64;                     // in scope 0 at ui/mir/mir_adt_construction.rs:67:18: 67:21
    let mut _5: u64;                     // in scope 0 at ui/mir/mir_adt_construction.rs:67:18: 67:21
    let mut _6: bool;                    // in scope 0 at ui/mir/mir_adt_construction.rs:67:23: 67:26
    let mut _7: u32;                     // in scope 0 at ui/mir/mir_adt_construction.rs:67:23: 67:26
    let mut _8: u32;                     // in scope 0 at ui/mir/mir_adt_construction.rs:67:23: 67:26

    bb0: {
        _4 = ((*_1).0: u64);             // scope 0 at ui/mir/mir_adt_construction.rs:67:18: 67:21
        _5 = ((*_2).0: u64);             // scope 0 at ui/mir/mir_adt_construction.rs:67:18: 67:21
        _3 = Eq(move _4, move _5);       // scope 0 at ui/mir/mir_adt_construction.rs:67:18: 67:21
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/mir/mir_adt_construction.rs:67:23: 67:26
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/mir/mir_adt_construction.rs:67:23: 67:26
        goto -> bb3;                     // scope 0 at ui/mir/mir_adt_construction.rs:67:23: 67:26
    }

    bb2: {
        _7 = ((*_1).1: u32);             // scope 0 at ui/mir/mir_adt_construction.rs:67:23: 67:26
        _8 = ((*_2).1: u32);             // scope 0 at ui/mir/mir_adt_construction.rs:67:23: 67:26
        _6 = Eq(move _7, move _8);       // scope 0 at ui/mir/mir_adt_construction.rs:67:23: 67:26
        _0 = move _6;                    // scope 0 at ui/mir/mir_adt_construction.rs:67:23: 67:26
        goto -> bb3;                     // scope 0 at ui/mir/mir_adt_construction.rs:67:23: 67:26
    }

    bb3: {
        return;                          // scope 0 at ui/mir/mir_adt_construction.rs:66:19: 66:19
    }
}

fn <impl at ui/mir/mir_adt_construction.rs:66:21: 66:26>::fmt(_1: &TupleLike, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/mir/mir_adt_construction.rs:66:21: 66:26
    debug f => _2;                       // in scope 0 at ui/mir/mir_adt_construction.rs:66:21: 66:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/mir/mir_adt_construction.rs:66:21: 66:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/mir/mir_adt_construction.rs:66:21: 66:26
    let mut _4: &str;                    // in scope 0 at ui/mir/mir_adt_construction.rs:66:21: 66:26
    let _5: &str;                        // in scope 0 at ui/mir/mir_adt_construction.rs:66:21: 66:26
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/mir/mir_adt_construction.rs:67:18: 67:21
    let mut _7: &u64;                    // in scope 0 at ui/mir/mir_adt_construction.rs:67:18: 67:21
    let _8: &u64;                        // in scope 0 at ui/mir/mir_adt_construction.rs:67:18: 67:21
    let mut _9: &dyn std::fmt::Debug;    // in scope 0 at ui/mir/mir_adt_construction.rs:67:23: 67:26
    let mut _10: &&u32;                  // in scope 0 at ui/mir/mir_adt_construction.rs:67:23: 67:26
    let _11: &&u32;                      // in scope 0 at ui/mir/mir_adt_construction.rs:67:23: 67:26
    let _12: &u32;                       // in scope 0 at ui/mir/mir_adt_construction.rs:67:23: 67:26

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/mir/mir_adt_construction.rs:66:21: 66:26
        _5 = const "TupleLike";          // scope 0 at ui/mir/mir_adt_construction.rs:66:21: 66:26
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:66:21: 66:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/mir/mir_adt_construction.rs:66:21: 66:26
        _8 = &((*_1).0: u64);            // scope 0 at ui/mir/mir_adt_construction.rs:67:18: 67:21
        _7 = _8;                         // scope 0 at ui/mir/mir_adt_construction.rs:67:18: 67:21
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/mir/mir_adt_construction.rs:67:18: 67:21
        _12 = &((*_1).1: u32);           // scope 0 at ui/mir/mir_adt_construction.rs:67:23: 67:26
        _11 = &_12;                      // scope 0 at ui/mir/mir_adt_construction.rs:67:23: 67:26
        _10 = _11;                       // scope 0 at ui/mir/mir_adt_construction.rs:67:23: 67:26
        _9 = move _10 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/mir/mir_adt_construction.rs:67:23: 67:26
        _0 = Formatter::<'_>::debug_tuple_field2_finish(move _3, move _4, move _6, move _9) -> bb1; // scope 0 at ui/mir/mir_adt_construction.rs:66:21: 66:26
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:66:21: 66:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/mir_adt_construction.rs:66:26: 66:26
    }
}

fn test3() -> TupleLike {
    let mut _0: TupleLike;               // return place in scope 0 at ui/mir/mir_adt_construction.rs:69:15: 69:24

    bb0: {
        _0 = TupleLike(const 42_u64, const 42_u32); // scope 0 at ui/mir/mir_adt_construction.rs:70:5: 70:22
        return;                          // scope 0 at ui/mir/mir_adt_construction.rs:71:2: 71:2
    }
}

fn test4(_1: fn(u64, u32) -> TupleLike) -> (TupleLike, TupleLike) {
    debug x => _1;                       // in scope 0 at ui/mir/mir_adt_construction.rs:73:10: 73:11
    let mut _0: (TupleLike, TupleLike);  // return place in scope 0 at ui/mir/mir_adt_construction.rs:73:43: 73:65
    let _2: fn(u64, u32) -> TupleLike {TupleLike}; // in scope 0 at ui/mir/mir_adt_construction.rs:74:9: 74:10
    let mut _3: TupleLike;               // in scope 0 at ui/mir/mir_adt_construction.rs:75:6: 75:15
    let mut _4: fn(u64, u32) -> TupleLike; // in scope 0 at ui/mir/mir_adt_construction.rs:75:6: 75:7
    let mut _5: TupleLike;               // in scope 0 at ui/mir/mir_adt_construction.rs:75:17: 75:26
    let mut _6: fn(u64, u32) -> TupleLike {TupleLike}; // in scope 0 at ui/mir/mir_adt_construction.rs:75:17: 75:18
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/mir/mir_adt_construction.rs:74:9: 74:10
    }

    bb0: {
        _4 = _1;                         // scope 1 at ui/mir/mir_adt_construction.rs:75:6: 75:7
        _3 = move _4(const 42_u64, const 84_u32) -> bb1; // scope 1 at ui/mir/mir_adt_construction.rs:75:6: 75:15
    }

    bb1: {
        _5 = move _6(const 42_u64, const 84_u32) -> bb2; // scope 1 at ui/mir/mir_adt_construction.rs:75:17: 75:26
    }

    bb2: {
        _0 = (move _3, move _5);         // scope 1 at ui/mir/mir_adt_construction.rs:75:5: 75:27
        return;                          // scope 0 at ui/mir/mir_adt_construction.rs:76:2: 76:2
    }
}

fn test5(_1: fn(u32) -> Option<u32>) -> (Option<u32>, Option<u32>) {
    debug x => _1;                       // in scope 0 at ui/mir/mir_adt_construction.rs:78:10: 78:11
    let mut _0: (std::option::Option<u32>, std::option::Option<u32>); // return place in scope 0 at ui/mir/mir_adt_construction.rs:78:40: 78:66
    let _2: fn(u32) -> std::option::Option<u32> {std::option::Option::<u32>::Some}; // in scope 0 at ui/mir/mir_adt_construction.rs:79:9: 79:10
    let mut _3: std::option::Option<u32>; // in scope 0 at ui/mir/mir_adt_construction.rs:80:6: 80:11
    let mut _4: fn(u32) -> std::option::Option<u32>; // in scope 0 at ui/mir/mir_adt_construction.rs:80:6: 80:7
    let mut _5: std::option::Option<u32>; // in scope 0 at ui/mir/mir_adt_construction.rs:80:13: 80:18
    let mut _6: fn(u32) -> std::option::Option<u32> {std::option::Option::<u32>::Some}; // in scope 0 at ui/mir/mir_adt_construction.rs:80:13: 80:14
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/mir/mir_adt_construction.rs:79:9: 79:10
    }

    bb0: {
        _4 = _1;                         // scope 1 at ui/mir/mir_adt_construction.rs:80:6: 80:7
        _3 = move _4(const 42_u32) -> bb1; // scope 1 at ui/mir/mir_adt_construction.rs:80:6: 80:11
    }

    bb1: {
        _5 = move _6(const 42_u32) -> bb2; // scope 1 at ui/mir/mir_adt_construction.rs:80:13: 80:18
    }

    bb2: {
        _0 = (move _3, move _5);         // scope 1 at ui/mir/mir_adt_construction.rs:80:5: 80:19
        return;                          // scope 0 at ui/mir/mir_adt_construction.rs:81:2: 81:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_adt_construction.rs:83:11: 83:11
    let mut _1: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: i32;                         // in scope 0 at ui/mir/mir_adt_construction.rs:84:16: 84:35
    let mut _4: CEnum;                   // in scope 0 at ui/mir/mir_adt_construction.rs:84:22: 84:34
    let mut _5: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _21: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _22: i32;                        // in scope 0 at ui/mir/mir_adt_construction.rs:85:16: 85:35
    let mut _23: CEnum;                  // in scope 0 at ui/mir/mir_adt_construction.rs:85:22: 85:34
    let mut _24: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _25: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _26: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _29: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _30: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _32: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _33: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _34: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _35: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _36: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _37: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _39: (&Pakd, &Pakd);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _40: &Pakd;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _41: Pakd;                       // in scope 0 at ui/mir/mir_adt_construction.rs:86:16: 86:23
    let mut _42: &Pakd;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _43: Pakd;                       // in scope 0 at ui/mir/mir_adt_construction.rs:86:25: 86:67
    let mut _44: ();                     // in scope 0 at ui/mir/mir_adt_construction.rs:86:63: 86:65
    let _45: &Pakd;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _46: &Pakd;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _47: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _48: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _49: &Pakd;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _50: &Pakd;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _52: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _53: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _54: &Pakd;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _55: &Pakd;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _56: &Pakd;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _57: &Pakd;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _59: (&TupleLike, &TupleLike); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _60: &TupleLike;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _61: TupleLike;                  // in scope 0 at ui/mir/mir_adt_construction.rs:87:16: 87:23
    let mut _62: &TupleLike;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _63: &TupleLike;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _64: &TupleLike;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _65: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _66: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _67: &TupleLike;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _68: &TupleLike;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _70: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _71: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _72: &TupleLike;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _73: &TupleLike;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _74: &TupleLike;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _75: &TupleLike;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _77: (TupleLike, TupleLike);     // in scope 0 at ui/mir/mir_adt_construction.rs:88:9: 88:11
    let mut _78: fn(u64, u32) -> TupleLike; // in scope 0 at ui/mir/mir_adt_construction.rs:88:20: 88:29
    let mut _79: (&TupleLike, &TupleLike); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _80: &TupleLike;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _81: &TupleLike;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _84: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _85: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _86: &TupleLike;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _87: &TupleLike;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _89: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _90: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _91: &TupleLike;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _92: &TupleLike;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _93: &TupleLike;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _94: &TupleLike;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _95: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _97: fn(u32) -> std::option::Option<u32>; // in scope 0 at ui/mir/mir_adt_construction.rs:90:20: 90:24
    let mut _98: (&std::option::Option<u32>, &std::option::Option<u32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _99: &std::option::Option<u32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _100: &std::option::Option<u32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _103: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _104: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _105: &std::option::Option<u32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _106: &std::option::Option<u32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _108: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _109: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _110: &std::option::Option<u32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _111: &std::option::Option<u32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _112: &std::option::Option<u32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _113: &std::option::Option<u32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _114: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _115: &TupleLike;            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _116: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _117: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _25;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _26;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _31: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _31;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _45;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _46;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _51: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _51;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _63;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _64;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _69: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _69;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 9 {
        debug t4 => _77;                 // in scope 9 at ui/mir/mir_adt_construction.rs:88:9: 88:11
        let _82: &TupleLike;             // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _83: &TupleLike;             // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _96: (std::option::Option<u32>, std::option::Option<u32>); // in scope 9 at ui/mir/mir_adt_construction.rs:90:9: 90:11
        scope 10 {
            debug left_val => _82;       // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _83;      // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _88: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 11 {
                debug kind => _88;       // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 12 {
            debug t5 => _96;             // in scope 12 at ui/mir/mir_adt_construction.rs:90:9: 90:11
            let _101: &std::option::Option<u32>; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _102: &std::option::Option<u32>; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 13 {
                debug left_val => _101;  // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _102; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _107: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 14 {
                    debug kind => _107;  // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _4 = const CEnum::Hello;         // scope 0 at ui/mir/mir_adt_construction.rs:84:22: 84:34
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:84:22: 84:34
                                         // + literal: Const { ty: CEnum, val: Value(Scalar(0x0000001e)) }
        _3 = test1(move _4) -> bb1;      // scope 0 at ui/mir/mir_adt_construction.rs:84:16: 84:35
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:84:16: 84:21
                                         // + literal: Const { ty: fn(CEnum) -> i32 {test1}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _117 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[2])) }
        _5 = _117;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_1.0: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_1.1: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = (*_6);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = const 42_i32;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = Eq(move _10, move _11);     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<i32, i32>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb3: {
        _23 = const CEnum::World;        // scope 0 at ui/mir/mir_adt_construction.rs:85:22: 85:34
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:85:22: 85:34
                                         // + literal: Const { ty: CEnum, val: Value(Scalar(0x0000003c)) }
        _22 = test1(move _23) -> bb4;    // scope 0 at ui/mir/mir_adt_construction.rs:85:16: 85:35
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:85:16: 85:21
                                         // + literal: Const { ty: fn(CEnum) -> i32 {test1}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = &_22;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _116 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _24 = _116;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _20 = (move _21, move _24);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _25 = (_20.0: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _26 = (_20.1: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _29 = (*_25);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _30 = const 0_i32;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _28 = Eq(move _29, move _30);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _27 = Not(move _28);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _27) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _31 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = _25;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = _37;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _32 = core::panicking::assert_failed::<i32, i32>(move _33, move _34, move _36, move _38); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb6: {
        _41 = test2() -> bb7;            // scope 0 at ui/mir/mir_adt_construction.rs:86:16: 86:23
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:86:16: 86:21
                                         // + literal: Const { ty: fn() -> Pakd {test2}, val: Value(<ZST>) }
    }

    bb7: {
        _40 = &_41;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _43 = Pakd { a: const 42_u64, b: const 42_u32, c: const 42_u16, d: const 42_u8, e: move _44 }; // scope 0 at ui/mir/mir_adt_construction.rs:86:25: 86:67
        _42 = &_43;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _39 = (move _40, move _42);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _45 = (_39.0: &Pakd);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _46 = (_39.1: &Pakd);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _49 = _45;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _50 = _46;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _48 = <Pakd as PartialEq>::eq(move _49, move _50) -> [return: bb8, unwind: bb25]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Pakd, &'b Pakd) -> bool {<Pakd as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _47 = Not(move _48);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _47) -> [0: bb10, otherwise: bb9]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _51 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _53 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _55 = _45;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _54 = _55;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _46;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _56 = _57;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _58 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _52 = core::panicking::assert_failed::<Pakd, Pakd>(move _53, move _54, move _56, move _58) -> bb25; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Pakd, &'b Pakd, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Pakd, Pakd>}, val: Value(<ZST>) }
    }

    bb10: {
        drop(_43) -> [return: bb11, unwind: bb26]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb11: {
        drop(_41) -> bb12;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb12: {
        _61 = test3() -> bb13;           // scope 0 at ui/mir/mir_adt_construction.rs:87:16: 87:23
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:87:16: 87:21
                                         // + literal: Const { ty: fn() -> TupleLike {test3}, val: Value(<ZST>) }
    }

    bb13: {
        _60 = &_61;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _115 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &TupleLike, val: Unevaluated(main, [], Some(promoted[0])) }
        _62 = _115;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _59 = (move _60, move _62);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _63 = (_59.0: &TupleLike);       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _64 = (_59.1: &TupleLike);       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _67 = _63;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _68 = _64;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _66 = <TupleLike as PartialEq>::eq(move _67, move _68) -> bb14; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a TupleLike, &'b TupleLike) -> bool {<TupleLike as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        _65 = Not(move _66);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _65) -> [0: bb16, otherwise: bb15]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _69 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _71 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _73 = _63;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _72 = _73;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _75 = _64;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _74 = _75;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _76 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _70 = core::panicking::assert_failed::<TupleLike, TupleLike>(move _71, move _72, move _74, move _76); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a TupleLike, &'b TupleLike, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<TupleLike, TupleLike>}, val: Value(<ZST>) }
    }

    bb16: {
        _78 = TupleLike as fn(u64, u32) -> TupleLike (Pointer(ReifyFnPointer)); // scope 0 at ui/mir/mir_adt_construction.rs:88:20: 88:29
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:88:20: 88:29
                                         // + literal: Const { ty: fn(u64, u32) -> TupleLike {TupleLike}, val: Value(<ZST>) }
        _77 = test4(move _78) -> bb17;   // scope 0 at ui/mir/mir_adt_construction.rs:88:14: 88:30
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:88:14: 88:19
                                         // + literal: Const { ty: fn(fn(u64, u32) -> TupleLike) -> (TupleLike, TupleLike) {test4}, val: Value(<ZST>) }
    }

    bb17: {
        _80 = &(_77.0: TupleLike);       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _81 = &(_77.1: TupleLike);       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _79 = (move _80, move _81);      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _82 = (_79.0: &TupleLike);       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _83 = (_79.1: &TupleLike);       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _86 = _82;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _87 = _83;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _85 = <TupleLike as PartialEq>::eq(move _86, move _87) -> bb18; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a TupleLike, &'b TupleLike) -> bool {<TupleLike as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        _84 = Not(move _85);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _84) -> [0: bb20, otherwise: bb19]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _88 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _90 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _92 = _82;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _91 = _92;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _94 = _83;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _93 = _94;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _95 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _89 = core::panicking::assert_failed::<TupleLike, TupleLike>(move _90, move _91, move _93, move _95); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a TupleLike, &'b TupleLike, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<TupleLike, TupleLike>}, val: Value(<ZST>) }
    }

    bb20: {
        _97 = Option::<u32>::Some as fn(u32) -> std::option::Option<u32> (Pointer(ReifyFnPointer)); // scope 9 at ui/mir/mir_adt_construction.rs:90:20: 90:24
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:90:20: 90:24
                                         // + literal: Const { ty: fn(u32) -> Option<u32> {Option::<u32>::Some}, val: Value(<ZST>) }
        _96 = test5(move _97) -> bb21;   // scope 9 at ui/mir/mir_adt_construction.rs:90:14: 90:25
                                         // mir::Constant
                                         // + span: ui/mir/mir_adt_construction.rs:90:14: 90:19
                                         // + literal: Const { ty: fn(fn(u32) -> Option<u32>) -> (Option<u32>, Option<u32>) {test5}, val: Value(<ZST>) }
    }

    bb21: {
        _99 = &(_96.0: std::option::Option<u32>); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _100 = &(_96.1: std::option::Option<u32>); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _98 = (move _99, move _100);     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _101 = (_98.0: &std::option::Option<u32>); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _102 = (_98.1: &std::option::Option<u32>); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _105 = _101;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _106 = _102;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _104 = <Option<u32> as PartialEq>::eq(move _105, move _106) -> bb22; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<u32>, &'b Option<u32>) -> bool {<Option<u32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb22: {
        _103 = Not(move _104);           // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _103) -> [0: bb24, otherwise: bb23]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb23: {
        _107 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _109 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _111 = _101;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _110 = _111;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _113 = _102;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _112 = _113;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _114 = Option::<Arguments<'_>>::None; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _108 = core::panicking::assert_failed::<Option<u32>, Option<u32>>(move _109, move _110, move _112, move _114); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<u32>, &'b Option<u32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<u32>, Option<u32>>}, val: Value(<ZST>) }
    }

    bb24: {
        return;                          // scope 0 at ui/mir/mir_adt_construction.rs:92:2: 92:2
    }

    bb25 (cleanup): {
        drop(_43) -> bb26;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb26 (cleanup): {
        drop(_41) -> bb27;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb27 (cleanup): {
        resume;                          // scope 0 at ui/mir/mir_adt_construction.rs:83:1: 92:2
    }
}

promoted[0] in main: &TupleLike = {
    let mut _0: &TupleLike;              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: TupleLike;               // in scope 0 at ui/mir/mir_adt_construction.rs:87:25: 87:42

    bb0: {
        _1 = TupleLike(const 42_u64, const 42_u32); // scope 0 at ui/mir/mir_adt_construction.rs:87:25: 87:42
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/mir/mir_adt_construction.rs:85:37: 85:38

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/mir/mir_adt_construction.rs:85:37: 85:38
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/mir/mir_adt_construction.rs:84:37: 84:39

    bb0: {
        _1 = const 42_i32;               // scope 0 at ui/mir/mir_adt_construction.rs:84:37: 84:39
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn TupleLike(_1: u64, _2: u32) -> TupleLike {
    let mut _0: TupleLike;               // return place in scope 0 at ui/mir/mir_adt_construction.rs:67:1: 67:17

    bb0: {
        _0 = TupleLike(move _1, move _2); // scope 0 at ui/mir/mir_adt_construction.rs:67:1: 67:17
        return;                          // scope 0 at ui/mir/mir_adt_construction.rs:67:1: 67:17
    }
}

// MIR FOR CTFE
fn TupleLike(_1: u64, _2: u32) -> TupleLike {
    let mut _0: TupleLike;               // return place in scope 0 at ui/mir/mir_adt_construction.rs:67:1: 67:17

    bb0: {
        _0 = TupleLike(move _1, move _2); // scope 0 at ui/mir/mir_adt_construction.rs:67:1: 67:17
        return;                          // scope 0 at ui/mir/mir_adt_construction.rs:67:1: 67:17
    }
}
