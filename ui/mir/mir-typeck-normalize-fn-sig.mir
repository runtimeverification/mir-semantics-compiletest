// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &u32, _2: &u32) -> f64 {
    debug x => _1;                       // in scope 0 at ui/mir/mir-typeck-normalize-fn-sig.rs:24:20: 24:21
    debug y => _2;                       // in scope 0 at ui/mir/mir-typeck-normalize-fn-sig.rs:24:32: 24:33
    let mut _0: f64;                     // return place in scope 0 at ui/mir/mir-typeck-normalize-fn-sig.rs:24:47: 24:70
    let mut _3: u32;                     // in scope 0 at ui/mir/mir-typeck-normalize-fn-sig.rs:25:5: 25:7

    bb0: {
        _3 = (*_1);                      // scope 0 at ui/mir/mir-typeck-normalize-fn-sig.rs:25:5: 25:7
        _0 = move _3 as f64 (IntToFloat); // scope 0 at ui/mir/mir-typeck-normalize-fn-sig.rs:25:5: 25:14
        return;                          // scope 0 at ui/mir/mir-typeck-normalize-fn-sig.rs:26:2: 26:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir-typeck-normalize-fn-sig.rs:28:11: 28:11

    bb0: {
        return;                          // scope 0 at ui/mir/mir-typeck-normalize-fn-sig.rs:30:2: 30:2
    }
}
