// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
M::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn f(_1: &[i64; 2]) -> [i64; 2] {
    debug a => _1;
    let mut _0: [i64; 2];
    let mut _2: [i64; 2];
    let mut _3: i64;
    let _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: i64;
    let _8: usize;
    let mut _9: usize;
    let mut _10: bool;
    let _11: usize;
    let mut _12: usize;
    let mut _13: bool;
    scope 1 {
        debug b => _2;
    }

    bb0: {
        _2 = <[i64; 2] as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = const 0_usize;
        _5 = const 2_usize;
        _6 = Lt(_4, _5);
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> [success: bb2, unwind continue];
    }

    bb2: {
        _3 = (*_1)[_4];
        _8 = const 0_usize;
        _9 = const 2_usize;
        _10 = Lt(_8, _9);
        assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> [success: bb3, unwind continue];
    }

    bb3: {
        _7 = (*_1)[_8];
        _11 = const 0_usize;
        _12 = const 2_usize;
        _13 = Lt(_11, _12);
        assert(move _13, "index out of bounds: the length is {} but the index is {}", move _12, _11) -> [success: bb4, unwind continue];
    }

    bb4: {
        _2[_11] = Mul(move _3, move _7);
        _0 = _2;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: [i64; 2];
    let mut _2: [i64; 2];
    let _3: &[i64; 2];
    let mut _4: (&i64, &i64);
    let mut _5: &i64;
    let _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i64;
    let mut _14: i64;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let _9: &i64;
        let _10: &i64;
        let mut _18: &i64;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
    }

    bb0: {
        _1 = [const 1_i64, const 1_i64];
        _3 = &_1;
        _2 = f(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = move _2;
        _6 = const 0_usize;
        _7 = const 2_usize;
        _8 = Lt(_6, _7);
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> [success: bb2, unwind continue];
    }

    bb2: {
        _5 = &_1[_6];
        _18 = const _;
        _4 = (move _5, _18);
        _9 = (_4.0: &i64);
        _10 = (_4.1: &i64);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<i64, i64>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 1_i64;
        _0 = &_1;
        return;
    }
}
