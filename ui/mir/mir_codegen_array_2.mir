// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn into_inner(_1: u64) -> [u64; 1024] {
    debug x => _1;                       // in scope 0 at ui/mir/mir_codegen_array_2.rs:2:15: 2:16
    let mut _0: [u64; 1024];             // return place in scope 0 at ui/mir/mir_codegen_array_2.rs:2:26: 2:37
    let mut _2: u64;                     // in scope 0 at ui/mir/mir_codegen_array_2.rs:3:6: 3:7

    bb0: {
        _2 = _1;                         // scope 0 at ui/mir/mir_codegen_array_2.rs:3:6: 3:7
        _0 = [move _2; 1024];            // scope 0 at ui/mir/mir_codegen_array_2.rs:3:5: 3:18
        return;                          // scope 0 at ui/mir/mir_codegen_array_2.rs:4:2: 4:2
    }
}

into_inner::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir_codegen_array_2.rs:2:32: 2:36

    bb0: {
        _0 = const 1024_usize;           // scope 0 at ui/mir/mir_codegen_array_2.rs:2:32: 2:36
        return;                          // scope 0 at ui/mir/mir_codegen_array_2.rs:2:32: 2:36
    }
}

into_inner::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir_codegen_array_2.rs:3:9: 3:17
    let mut _1: usize;                   // in scope 0 at ui/mir/mir_codegen_array_2.rs:3:9: 3:14
    let mut _2: usize;                   // in scope 0 at ui/mir/mir_codegen_array_2.rs:3:9: 3:12
    let mut _3: (usize, bool);           // in scope 0 at ui/mir/mir_codegen_array_2.rs:3:9: 3:12
    let mut _4: (usize, bool);           // in scope 0 at ui/mir/mir_codegen_array_2.rs:3:9: 3:14
    let mut _5: (usize, bool);           // in scope 0 at ui/mir/mir_codegen_array_2.rs:3:9: 3:17

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/mir/mir_codegen_array_2.rs:3:9: 3:14
        StorageLive(_2);                 // scope 0 at ui/mir/mir_codegen_array_2.rs:3:9: 3:12
        _3 = CheckedMul(const 2_usize, const 4_usize); // scope 0 at ui/mir/mir_codegen_array_2.rs:3:9: 3:12
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, const 4_usize) -> bb1; // scope 0 at ui/mir/mir_codegen_array_2.rs:3:9: 3:12
    }

    bb1: {
        _2 = move (_3.0: usize);         // scope 0 at ui/mir/mir_codegen_array_2.rs:3:9: 3:12
        _4 = CheckedMul(_2, const 8_usize); // scope 0 at ui/mir/mir_codegen_array_2.rs:3:9: 3:14
        assert(!move (_4.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, const 8_usize) -> bb2; // scope 0 at ui/mir/mir_codegen_array_2.rs:3:9: 3:14
    }

    bb2: {
        _1 = move (_4.0: usize);         // scope 0 at ui/mir/mir_codegen_array_2.rs:3:9: 3:14
        StorageDead(_2);                 // scope 0 at ui/mir/mir_codegen_array_2.rs:3:13: 3:14
        _5 = CheckedMul(_1, const 16_usize); // scope 0 at ui/mir/mir_codegen_array_2.rs:3:9: 3:17
        assert(!move (_5.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 16_usize) -> bb3; // scope 0 at ui/mir/mir_codegen_array_2.rs:3:9: 3:17
    }

    bb3: {
        _0 = move (_5.0: usize);         // scope 0 at ui/mir/mir_codegen_array_2.rs:3:9: 3:17
        StorageDead(_1);                 // scope 0 at ui/mir/mir_codegen_array_2.rs:3:16: 3:17
        return;                          // scope 0 at ui/mir/mir_codegen_array_2.rs:3:9: 3:17
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_codegen_array_2.rs:6:10: 6:10
    let _1: &[u64];                      // in scope 0 at ui/mir/mir_codegen_array_2.rs:7:9: 7:10
    let mut _2: &[u64; 1024];            // in scope 0 at ui/mir/mir_codegen_array_2.rs:7:21: 7:32
    let _3: &[u64; 1024];                // in scope 0 at ui/mir/mir_codegen_array_2.rs:7:21: 7:32
    let mut _4: (&&[u64], &&[u64]);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &&[u64];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _6: &[u64];                      // in scope 0 at ui/mir/mir_codegen_array_2.rs:8:16: 8:35
    let _7: &[u64];                      // in scope 0 at ui/mir/mir_codegen_array_2.rs:8:17: 8:35
    let mut _8: &[u64; 1024];            // in scope 0 at ui/mir/mir_codegen_array_2.rs:8:17: 8:31
    let _9: [u64; 1024];                 // in scope 0 at ui/mir/mir_codegen_array_2.rs:8:17: 8:31
    let mut _10: std::ops::RangeFull;    // in scope 0 at ui/mir/mir_codegen_array_2.rs:8:32: 8:34
    let mut _11: &&[u64];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: &&[u64];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: &&[u64];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &&[u64];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &&[u64];                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &&[u64];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &&[u64];                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _26: &[u64; 1024];           // in scope 0 at ui/mir/mir_codegen_array_2.rs:7:21: 7:32
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/mir/mir_codegen_array_2.rs:7:9: 7:10
        let _12: &&[u64];                // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _13: &&[u64];                // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        scope 2 {
            debug left_val => _12;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _13;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _18: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _18;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _26 = const _;                   // scope 0 at ui/mir/mir_codegen_array_2.rs:7:21: 7:32
                                         // mir::Constant
                                         // + span: ui/mir/mir_codegen_array_2.rs:7:21: 7:32
                                         // + literal: Const { ty: &[u64; 1024], val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _26;                        // scope 0 at ui/mir/mir_codegen_array_2.rs:7:21: 7:32
        _2 = _3;                         // scope 0 at ui/mir/mir_codegen_array_2.rs:7:21: 7:32
        _1 = move _2 as &[u64] (Pointer(Unsize)); // scope 0 at ui/mir/mir_codegen_array_2.rs:7:21: 7:32
        _9 = into_inner(const 42_u64) -> bb1; // scope 1 at ui/mir/mir_codegen_array_2.rs:8:17: 8:31
                                         // mir::Constant
                                         // + span: ui/mir/mir_codegen_array_2.rs:8:17: 8:27
                                         // + literal: Const { ty: fn(u64) -> [u64; 1024] {into_inner}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &_9;                        // scope 1 at ui/mir/mir_codegen_array_2.rs:8:17: 8:31
        _7 = <[u64; 1024] as Index<RangeFull>>::index(move _8, move _10) -> bb2; // scope 1 at ui/mir/mir_codegen_array_2.rs:8:17: 8:35
                                         // mir::Constant
                                         // + span: ui/mir/mir_codegen_array_2.rs:8:17: 8:35
                                         // + literal: Const { ty: for<'a> fn(&'a [u64; 1024], RangeFull) -> &'a <[u64; 1024] as Index<RangeFull>>::Output {<[u64; 1024] as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = _7;                         // scope 1 at ui/mir/mir_codegen_array_2.rs:8:16: 8:35
        _5 = &_6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _11 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _11);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_4.0: &&[u64]);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_4.1: &&[u64]);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = _12;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = _13;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = <&[u64] as PartialEq>::eq(move _16, move _17) -> bb3; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[u64], &'b &[u64]) -> bool {<&[u64] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = Not(move _15);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb5, otherwise: bb4]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _18 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<&[u64], &[u64]>(move _20, move _21, move _23, move _25); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[u64], &'b &[u64], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[u64], &[u64]>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/mir/mir_codegen_array_2.rs:9:2: 9:2
    }
}

promoted[0] in main: &[u64; 1024] = {
    let mut _0: &[u64; 1024];            // return place in scope 0 at ui/mir/mir_codegen_array_2.rs:7:21: 7:32
    let mut _1: [u64; 1024];             // in scope 0 at ui/mir/mir_codegen_array_2.rs:7:22: 7:32

    bb0: {
        _1 = [const 42_u64; 1024];       // scope 0 at ui/mir/mir_codegen_array_2.rs:7:22: 7:32
        _0 = &_1;                        // scope 0 at ui/mir/mir_codegen_array_2.rs:7:21: 7:32
        return;                          // scope 0 at ui/mir/mir_codegen_array_2.rs:7:21: 7:32
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir_codegen_array_2.rs:7:27: 7:31

    bb0: {
        _0 = const 1024_usize;           // scope 0 at ui/mir/mir_codegen_array_2.rs:7:27: 7:31
        return;                          // scope 0 at ui/mir/mir_codegen_array_2.rs:7:27: 7:31
    }
}
