// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut DROP: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/mir/mir_early_return_scope.rs:3:18: 3:22

    bb0: {
        _0 = const false;                // scope 0 at ui/mir/mir_early_return_scope.rs:3:25: 3:30
        return;                          // scope 0 at ui/mir/mir_early_return_scope.rs:3:1: 3:31
    }
}

fn <impl at ui/mir/mir_early_return_scope.rs:6:1: 6:36>::deref(_1: &ConnWrap) -> &Conn {
    debug self => _1;                    // in scope 0 at ui/mir/mir_early_return_scope.rs:8:14: 8:19
    let mut _0: &Conn;                   // return place in scope 0 at ui/mir/mir_early_return_scope.rs:8:32: 8:39

    bb0: {
        _0 = &((*_1).0: Conn);           // scope 0 at ui/mir/mir_early_return_scope.rs:8:32: 8:39
        return;                          // scope 0 at ui/mir/mir_early_return_scope.rs:8:41: 8:41
    }
}

fn <impl at ui/mir/mir_early_return_scope.rs:12:1: 12:20>::drop(_1: &mut Conn) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/mir_early_return_scope.rs:13:13: 13:22
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_early_return_scope.rs:13:24: 13:24
    let mut _2: *mut bool;               // in scope 0 at ui/mir/mir_early_return_scope.rs:13:35: 13:39
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut bool};  // scope 1 at ui/mir/mir_early_return_scope.rs:13:35: 13:39
                                         // mir::Constant
                                         // + span: ui/mir/mir_early_return_scope.rs:13:35: 13:39
                                         // + literal: Const { ty: *mut bool, val: Value(Scalar(alloc1)) }
        (*_2) = const true;              // scope 1 at ui/mir/mir_early_return_scope.rs:13:35: 13:46
        return;                          // scope 0 at ui/mir/mir_early_return_scope.rs:13:51: 13:51
    }
}

alloc1 (static: DROP, size: 1, align: 1) {
    00                                              â”‚ .
}

fn inner() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_early_return_scope.rs:16:12: 16:12
    let _1: &Conn;                       // in scope 0 at ui/mir/mir_early_return_scope.rs:17:9: 17:13
    let _2: &Conn;                       // in scope 0 at ui/mir/mir_early_return_scope.rs:17:17: 20:6
    let mut _3: &ConnWrap;               // in scope 0 at ui/mir/mir_early_return_scope.rs:17:18: 20:6
    let _4: ConnWrap;                    // in scope 0 at ui/mir/mir_early_return_scope.rs:17:18: 20:6
    let _5: ConnWrap;                    // in scope 0 at ui/mir/mir_early_return_scope.rs:18:14: 18:17
    scope 1 {
        debug conn => _1;                // in scope 1 at ui/mir/mir_early_return_scope.rs:17:9: 17:13
    }
    scope 2 {
        debug val => _5;                 // in scope 2 at ui/mir/mir_early_return_scope.rs:18:14: 18:17
    }

    bb0: {
        _3 = &_4;                        // scope 0 at ui/mir/mir_early_return_scope.rs:17:18: 20:6
        _2 = <ConnWrap as Deref>::deref(move _3) -> [return: bb1, unwind: bb3]; // scope 0 at ui/mir/mir_early_return_scope.rs:17:17: 20:6
                                         // mir::Constant
                                         // + span: ui/mir/mir_early_return_scope.rs:17:17: 20:6
                                         // + literal: Const { ty: for<'a> fn(&'a ConnWrap) -> &'a <ConnWrap as Deref>::Target {<ConnWrap as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = _2;                         // scope 0 at ui/mir/mir_early_return_scope.rs:17:16: 20:6
        drop(_4) -> bb2;                 // scope 0 at ui/mir/mir_early_return_scope.rs:22:1: 22:2
    }

    bb2: {
        return;                          // scope 0 at ui/mir/mir_early_return_scope.rs:22:2: 22:2
    }

    bb3 (cleanup): {
        drop(_4) -> bb4;                 // scope 0 at ui/mir/mir_early_return_scope.rs:22:1: 22:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/mir/mir_early_return_scope.rs:16:1: 22:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_early_return_scope.rs:24:11: 24:11
    let _1: ();                          // in scope 0 at ui/mir/mir_early_return_scope.rs:25:5: 25:12
    let mut _2: (&bool, &bool);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: *mut bool;                   // in scope 0 at ui/mir/mir_early_return_scope.rs:27:20: 27:24
    let mut _5: &bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        let _6: &bool;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _7: &bool;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _20: &bool;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _6;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _7;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _12: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _12;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = inner() -> bb1;             // scope 0 at ui/mir/mir_early_return_scope.rs:25:5: 25:12
                                         // mir::Constant
                                         // + span: ui/mir/mir_early_return_scope.rs:25:5: 25:10
                                         // + literal: Const { ty: fn() {inner}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = const {alloc1: *mut bool};  // scope 1 at ui/mir/mir_early_return_scope.rs:27:20: 27:24
                                         // mir::Constant
                                         // + span: ui/mir/mir_early_return_scope.rs:27:20: 27:24
                                         // + literal: Const { ty: *mut bool, val: Value(Scalar(alloc1)) }
        _3 = &(*_4);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _20 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &bool, val: Unevaluated(main, [], Some(promoted[0])) }
        _5 = _20;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _5);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_2.0: &bool);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_2.1: &bool);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = (*_6);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = const true;                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = Eq(move _10, move _11);     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _8 = Not(move _9);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _12 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<bool, bool>(move _14, move _15, move _17, move _19); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/mir/mir_early_return_scope.rs:29:2: 29:2
    }
}

alloc1 (static: DROP, size: 1, align: 1) {
    00                                              â”‚ .
}

promoted[0] in main: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: bool;                    // in scope 0 at ui/mir/mir_early_return_scope.rs:27:26: 27:30

    bb0: {
        _1 = const true;                 // scope 0 at ui/mir/mir_early_return_scope.rs:27:26: 27:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn ConnWrap(_1: Conn) -> ConnWrap {
    let mut _0: ConnWrap;                // return place in scope 0 at ui/mir/mir_early_return_scope.rs:5:1: 5:16

    bb0: {
        _0 = ConnWrap(move _1);          // scope 0 at ui/mir/mir_early_return_scope.rs:5:1: 5:16
        return;                          // scope 0 at ui/mir/mir_early_return_scope.rs:5:1: 5:16
    }
}

// MIR FOR CTFE
fn ConnWrap(_1: Conn) -> ConnWrap {
    let mut _0: ConnWrap;                // return place in scope 0 at ui/mir/mir_early_return_scope.rs:5:1: 5:16

    bb0: {
        _0 = ConnWrap(move _1);          // scope 0 at ui/mir/mir_early_return_scope.rs:5:1: 5:16
        return;                          // scope 0 at ui/mir/mir_early_return_scope.rs:5:1: 5:16
    }
}
