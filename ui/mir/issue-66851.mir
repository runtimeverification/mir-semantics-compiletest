// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/mir/issue-66851.rs:7:10: 7:15>::fmt(_1: &SpecialsRes, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/mir/issue-66851.rs:7:10: 7:15
    debug f => _2;                       // in scope 0 at ui/mir/issue-66851.rs:7:10: 7:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/mir/issue-66851.rs:7:10: 7:15
    let _3: &u64;                        // in scope 0 at ui/mir/issue-66851.rs:8:24: 8:27
    let mut _4: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/mir/issue-66851.rs:7:10: 7:15
    let mut _5: &str;                    // in scope 0 at ui/mir/issue-66851.rs:7:10: 7:15
    let _6: &str;                        // in scope 0 at ui/mir/issue-66851.rs:7:10: 7:15
    let mut _7: &dyn std::fmt::Debug;    // in scope 0 at ui/mir/issue-66851.rs:8:24: 8:27
    let mut _8: &&u64;                   // in scope 0 at ui/mir/issue-66851.rs:8:24: 8:27
    let _9: &&u64;                       // in scope 0 at ui/mir/issue-66851.rs:8:24: 8:27
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/mir/issue-66851.rs:8:24: 8:27
    }

    bb0: {
        _3 = &(((*_1) as Res).0: u64);   // scope 0 at ui/mir/issue-66851.rs:8:24: 8:27
        _4 = &mut (*_2);                 // scope 1 at ui/mir/issue-66851.rs:7:10: 7:15
        _6 = const "Res";                // scope 1 at ui/mir/issue-66851.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/mir/issue-66851.rs:7:10: 7:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 1 at ui/mir/issue-66851.rs:7:10: 7:15
        _9 = &_3;                        // scope 1 at ui/mir/issue-66851.rs:8:24: 8:27
        _8 = _9;                         // scope 1 at ui/mir/issue-66851.rs:8:24: 8:27
        _7 = move _8 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/mir/issue-66851.rs:8:24: 8:27
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _4, move _5, move _7) -> bb1; // scope 1 at ui/mir/issue-66851.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/mir/issue-66851.rs:7:10: 7:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/issue-66851.rs:7:15: 7:15
    }
}

fn <impl at ui/mir/issue-66851.rs:7:17: 7:26>::eq(_1: &SpecialsRes, _2: &SpecialsRes) -> bool {
    debug self => _1;                    // in scope 0 at ui/mir/issue-66851.rs:7:17: 7:26
    debug other => _2;                   // in scope 0 at ui/mir/issue-66851.rs:7:17: 7:26
    let mut _0: bool;                    // return place in scope 0 at ui/mir/issue-66851.rs:7:17: 7:26
    let mut _3: (&SpecialsRes, &SpecialsRes); // in scope 0 at ui/mir/issue-66851.rs:7:17: 7:26
    let mut _4: &SpecialsRes;            // in scope 0 at ui/mir/issue-66851.rs:7:17: 7:26
    let mut _5: &SpecialsRes;            // in scope 0 at ui/mir/issue-66851.rs:7:17: 7:26
    let _6: &u64;                        // in scope 0 at ui/mir/issue-66851.rs:8:24: 8:27
    let _7: &u64;                        // in scope 0 at ui/mir/issue-66851.rs:8:24: 8:27
    let mut _8: u64;                     // in scope 0 at ui/mir/issue-66851.rs:8:24: 8:27
    let mut _9: u64;                     // in scope 0 at ui/mir/issue-66851.rs:8:24: 8:27
    let mut _10: &SpecialsRes;           // in scope 0 at ui/mir/issue-66851.rs:7:17: 7:26
    let mut _11: &SpecialsRes;           // in scope 0 at ui/mir/issue-66851.rs:7:17: 7:26
    scope 1 {
        debug __self_0 => _6;            // in scope 1 at ui/mir/issue-66851.rs:8:24: 8:27
        debug __arg1_0 => _7;            // in scope 1 at ui/mir/issue-66851.rs:8:24: 8:27
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/mir/issue-66851.rs:7:17: 7:26
        _5 = _2;                         // scope 0 at ui/mir/issue-66851.rs:7:17: 7:26
        _3 = (move _4, move _5);         // scope 0 at ui/mir/issue-66851.rs:7:17: 7:26
        _10 = deref_copy (_3.0: &SpecialsRes); // scope 0 at ui/mir/issue-66851.rs:8:24: 8:27
        _6 = &(((*_10) as Res).0: u64);  // scope 0 at ui/mir/issue-66851.rs:8:24: 8:27
        _11 = deref_copy (_3.1: &SpecialsRes); // scope 0 at ui/mir/issue-66851.rs:8:24: 8:27
        _7 = &(((*_11) as Res).0: u64);  // scope 0 at ui/mir/issue-66851.rs:8:24: 8:27
        _8 = (*_6);                      // scope 1 at ui/mir/issue-66851.rs:8:24: 8:27
        _9 = (*_7);                      // scope 1 at ui/mir/issue-66851.rs:8:24: 8:27
        _0 = Eq(move _8, move _9);       // scope 1 at ui/mir/issue-66851.rs:8:24: 8:27
        return;                          // scope 0 at ui/mir/issue-66851.rs:7:26: 7:26
    }
}

fn <impl at ui/mir/issue-66851.rs:7:28: 7:30>::assert_receiver_is_total_eq(_1: &SpecialsRes) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/issue-66851.rs:7:28: 7:30
    let mut _0: ();                      // return place in scope 0 at ui/mir/issue-66851.rs:7:28: 7:30
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/mir/issue-66851.rs:7:30: 7:30
    }
}

fn e103() -> SpecialsRes {
    let mut _0: SpecialsRes;             // return place in scope 0 at ui/mir/issue-66851.rs:10:14: 10:25
    let mut _1: std::result::Result<u64, std::num::ParseIntError>; // in scope 0 at ui/mir/issue-66851.rs:11:20: 11:31
    let mut _2: &str;                    // in scope 0 at ui/mir/issue-66851.rs:11:20: 11:31
    let _3: &str;                        // in scope 0 at ui/mir/issue-66851.rs:11:20: 11:23
    let mut _4: isize;                   // in scope 0 at ui/mir/issue-66851.rs:11:12: 11:17
    let mut _6: u64;                     // in scope 0 at ui/mir/issue-66851.rs:12:26: 12:27
    scope 1 {
        debug r => _5;                   // in scope 1 at ui/mir/issue-66851.rs:11:15: 11:16
        let _5: u64;                     // in scope 1 at ui/mir/issue-66851.rs:11:15: 11:16
    }

    bb0: {
        _3 = const "1";                  // scope 1 at ui/mir/issue-66851.rs:11:20: 11:23
                                         // mir::Constant
                                         // + span: ui/mir/issue-66851.rs:11:20: 11:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 1 at ui/mir/issue-66851.rs:11:20: 11:31
        _1 = core::str::<impl str>::parse::<u64>(move _2) -> bb1; // scope 1 at ui/mir/issue-66851.rs:11:20: 11:31
                                         // mir::Constant
                                         // + span: ui/mir/issue-66851.rs:11:24: 11:29
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<u64, <u64 as FromStr>::Err> {core::str::<impl str>::parse::<u64>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_1);           // scope 1 at ui/mir/issue-66851.rs:11:12: 11:17
        switchInt(move _4) -> [0: bb2, otherwise: bb3]; // scope 1 at ui/mir/issue-66851.rs:11:12: 11:17
    }

    bb2: {
        _5 = ((_1 as Ok).0: u64);        // scope 1 at ui/mir/issue-66851.rs:11:15: 11:16
        _6 = _5;                         // scope 1 at ui/mir/issue-66851.rs:12:26: 12:27
        _0 = SpecialsRes::Res(move _6);  // scope 1 at ui/mir/issue-66851.rs:12:9: 12:28
        goto -> bb4;                     // scope 0 at ui/mir/issue-66851.rs:11:5: 15:6
    }

    bb3: {
        _0 = const SpecialsRes::Res(42_u64); // scope 0 at ui/mir/issue-66851.rs:14:9: 14:29
                                         // mir::Constant
                                         // + span: ui/mir/issue-66851.rs:14:9: 14:29
                                         // + literal: Const { ty: SpecialsRes, val: Value(Scalar(0x000000000000002a)) }
        goto -> bb4;                     // scope 0 at ui/mir/issue-66851.rs:11:5: 15:6
    }

    bb4: {
        return;                          // scope 0 at ui/mir/issue-66851.rs:16:2: 16:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/issue-66851.rs:18:11: 18:11
    let mut _1: (&SpecialsRes, &SpecialsRes); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &SpecialsRes;            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: SpecialsRes;                 // in scope 0 at ui/mir/issue-66851.rs:19:16: 19:22
    let mut _4: &SpecialsRes;            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &SpecialsRes;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &SpecialsRes;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: &SpecialsRes;            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: &SpecialsRes;           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &SpecialsRes;           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &SpecialsRes;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &SpecialsRes;           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &SpecialsRes;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: &SpecialsRes;           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = e103() -> bb1;              // scope 0 at ui/mir/issue-66851.rs:19:16: 19:22
                                         // mir::Constant
                                         // + span: ui/mir/issue-66851.rs:19:16: 19:20
                                         // + literal: Const { ty: fn() -> SpecialsRes {e103}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _19 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &SpecialsRes, val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _19;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &SpecialsRes);       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &SpecialsRes);       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = _5;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = <SpecialsRes as PartialEq>::eq(move _9, move _10) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a SpecialsRes, &'b SpecialsRes) -> bool {<SpecialsRes as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<SpecialsRes, SpecialsRes>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a SpecialsRes, &'b SpecialsRes, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<SpecialsRes, SpecialsRes>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/mir/issue-66851.rs:20:2: 20:2
    }
}

promoted[0] in main: &SpecialsRes = {
    let mut _0: &SpecialsRes;            // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: SpecialsRes;             // in scope 0 at ui/mir/issue-66851.rs:19:24: 19:43

    bb0: {
        _1 = SpecialsRes::Res(const 1_u64); // scope 0 at ui/mir/issue-66851.rs:19:24: 19:43
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn SpecialsRes::Res(_1: u64) -> SpecialsRes {
    let mut _0: SpecialsRes;             // return place in scope 0 at ui/mir/issue-66851.rs:8:20: 8:23

    bb0: {
        _0 = SpecialsRes::Res(move _1);  // scope 0 at ui/mir/issue-66851.rs:8:20: 8:23
        return;                          // scope 0 at ui/mir/issue-66851.rs:8:20: 8:23
    }
}

// MIR FOR CTFE
fn SpecialsRes::Res(_1: u64) -> SpecialsRes {
    let mut _0: SpecialsRes;             // return place in scope 0 at ui/mir/issue-66851.rs:8:20: 8:23

    bb0: {
        _0 = SpecialsRes::Res(move _1);  // scope 0 at ui/mir/issue-66851.rs:8:20: 8:23
        return;                          // scope 0 at ui/mir/issue-66851.rs:8:20: 8:23
    }
}
