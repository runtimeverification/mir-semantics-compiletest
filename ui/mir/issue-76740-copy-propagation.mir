// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
V::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/issue-76740-copy-propagation.rs:6:22: 6:23

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/mir/issue-76740-copy-propagation.rs:6:22: 6:23
        return;                          // scope 0 at ui/mir/issue-76740-copy-propagation.rs:6:22: 6:23
    }
}

fn <impl at ui/mir/issue-76740-copy-propagation.rs:5:16: 5:21>::clone(_1: &V) -> V {
    debug self => _1;                    // in scope 0 at ui/mir/issue-76740-copy-propagation.rs:5:16: 5:21
    let mut _0: V;                       // return place in scope 0 at ui/mir/issue-76740-copy-propagation.rs:5:16: 5:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/mir/issue-76740-copy-propagation.rs:5:16: 5:21
        return;                          // scope 0 at ui/mir/issue-76740-copy-propagation.rs:5:21: 5:21
    }
}

<impl at ui/mir/issue-76740-copy-propagation.rs:5:16: 5:21>::clone::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/issue-76740-copy-propagation.rs:6:22: 6:23

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/mir/issue-76740-copy-propagation.rs:6:22: 6:23
        return;                          // scope 0 at ui/mir/issue-76740-copy-propagation.rs:6:22: 6:23
    }
}

fn <impl at ui/mir/issue-76740-copy-propagation.rs:8:1: 8:7>::new() -> V {
    let mut _0: V;                       // return place in scope 0 at ui/mir/issue-76740-copy-propagation.rs:9:17: 9:21
    let mut _1: [usize; 4];              // in scope 0 at ui/mir/issue-76740-copy-propagation.rs:10:11: 10:17

    bb0: {
        _1 = [const 0_usize; 4];         // scope 0 at ui/mir/issue-76740-copy-propagation.rs:10:11: 10:17
        _0 = V(move _1);                 // scope 0 at ui/mir/issue-76740-copy-propagation.rs:10:9: 10:18
        return;                          // scope 0 at ui/mir/issue-76740-copy-propagation.rs:11:6: 11:6
    }
}

<impl at ui/mir/issue-76740-copy-propagation.rs:8:1: 8:7>::new::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/issue-76740-copy-propagation.rs:10:15: 10:16

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/mir/issue-76740-copy-propagation.rs:10:15: 10:16
        return;                          // scope 0 at ui/mir/issue-76740-copy-propagation.rs:10:15: 10:16
    }
}

fn <impl at ui/mir/issue-76740-copy-propagation.rs:8:1: 8:7>::check(_1: V) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/issue-76740-copy-propagation.rs:14:14: 14:22
    let mut _0: ();                      // return place in scope 0 at ui/mir/issue-76740-copy-propagation.rs:14:24: 14:24
    let mut _2: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: usize;                       // in scope 0 at ui/mir/issue-76740-copy-propagation.rs:15:27: 15:28
    let mut _5: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _20: usize;                      // in scope 0 at ui/mir/issue-76740-copy-propagation.rs:16:16: 16:17
    let mut _21: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _4 = const 0_usize;              // scope 0 at ui/mir/issue-76740-copy-propagation.rs:15:27: 15:28
        _3 = &(_1.0: [usize; 4])[_4];    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(V::check, [], Some(promoted[0])) }
        _5 = _21;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_2.0: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_2.1: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = (*_6);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = const 0_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = Eq(move _10, move _11);     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb2, otherwise: bb1]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<usize, usize>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb2: {
        _20 = const 0_usize;             // scope 0 at ui/mir/issue-76740-copy-propagation.rs:16:16: 16:17
        (_1.0: [usize; 4])[_20] = const 1_usize; // scope 0 at ui/mir/issue-76740-copy-propagation.rs:16:9: 16:22
        return;                          // scope 0 at ui/mir/issue-76740-copy-propagation.rs:17:6: 17:6
    }
}

promoted[0] in <impl at ui/mir/issue-76740-copy-propagation.rs:8:1: 8:7>::check: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/mir/issue-76740-copy-propagation.rs:15:31: 15:32

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/mir/issue-76740-copy-propagation.rs:15:31: 15:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/issue-76740-copy-propagation.rs:20:11: 20:11
    let _1: V;                           // in scope 0 at ui/mir/issue-76740-copy-propagation.rs:21:9: 21:10
    let mut _3: i32;                     // in scope 0 at ui/mir/issue-76740-copy-propagation.rs:23:11: 23:12
    let _4: ();                          // in scope 0 at ui/mir/issue-76740-copy-propagation.rs:27:9: 27:18
    let mut _5: V;                       // in scope 0 at ui/mir/issue-76740-copy-propagation.rs:27:9: 27:10
    let mut _6: (i32, bool);             // in scope 0 at ui/mir/issue-76740-copy-propagation.rs:28:9: 28:15
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/mir/issue-76740-copy-propagation.rs:21:9: 21:10
        let mut _2: i32;                 // in scope 1 at ui/mir/issue-76740-copy-propagation.rs:22:9: 22:14
        scope 2 {
            debug i => _2;               // in scope 2 at ui/mir/issue-76740-copy-propagation.rs:22:9: 22:14
        }
    }

    bb0: {
        _1 = V::new() -> bb1;            // scope 0 at ui/mir/issue-76740-copy-propagation.rs:21:13: 21:21
                                         // mir::Constant
                                         // + span: ui/mir/issue-76740-copy-propagation.rs:21:13: 21:19
                                         // + literal: Const { ty: fn() -> V {V::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = const 0_i32;                // scope 1 at ui/mir/issue-76740-copy-propagation.rs:22:17: 22:18
        goto -> bb2;                     // scope 2 at ui/mir/issue-76740-copy-propagation.rs:23:5: 29:6
    }

    bb2: {
        _3 = _2;                         // scope 2 at ui/mir/issue-76740-copy-propagation.rs:23:11: 23:12
        switchInt(move _3) -> [10: bb6, otherwise: bb3]; // scope 2 at ui/mir/issue-76740-copy-propagation.rs:23:11: 23:18
    }

    bb3: {
        _5 = _1;                         // scope 2 at ui/mir/issue-76740-copy-propagation.rs:27:9: 27:10
        _4 = V::check(move _5) -> bb4;   // scope 2 at ui/mir/issue-76740-copy-propagation.rs:27:9: 27:18
                                         // mir::Constant
                                         // + span: ui/mir/issue-76740-copy-propagation.rs:27:11: 27:16
                                         // + literal: Const { ty: fn(V) {V::check}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = CheckedAdd(_2, const 1_i32); // scope 2 at ui/mir/issue-76740-copy-propagation.rs:28:9: 28:15
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_i32) -> bb5; // scope 2 at ui/mir/issue-76740-copy-propagation.rs:28:9: 28:15
    }

    bb5: {
        _2 = move (_6.0: i32);           // scope 2 at ui/mir/issue-76740-copy-propagation.rs:28:9: 28:15
        goto -> bb2;                     // scope 2 at ui/mir/issue-76740-copy-propagation.rs:23:5: 29:6
    }

    bb6: {
        return;                          // scope 0 at ui/mir/issue-76740-copy-propagation.rs:30:2: 30:2
    }
}

fn V(_1: [usize; 4]) -> V {
    let mut _0: V;                       // return place in scope 0 at ui/mir/issue-76740-copy-propagation.rs:6:1: 6:13

    bb0: {
        _0 = V(move _1);                 // scope 0 at ui/mir/issue-76740-copy-propagation.rs:6:1: 6:13
        return;                          // scope 0 at ui/mir/issue-76740-copy-propagation.rs:6:1: 6:13
    }
}

// MIR FOR CTFE
fn V(_1: [usize; 4]) -> V {
    let mut _0: V;                       // return place in scope 0 at ui/mir/issue-76740-copy-propagation.rs:6:1: 6:13

    bb0: {
        _0 = V(move _1);                 // scope 0 at ui/mir/issue-76740-copy-propagation.rs:6:1: 6:13
        return;                          // scope 0 at ui/mir/issue-76740-copy-propagation.rs:6:1: 6:13
    }
}
