// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&i8, &i8);
    let mut _2: &i8;
    let _3: i8;
    let _4: &i8;
    let _5: &i8;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: i8;
    let mut _9: i8;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&u8, &u8);
    let mut _14: &u8;
    let _15: u8;
    let _16: &u8;
    let _17: &u8;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: u8;
    let mut _21: u8;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&u8, &u8);
    let mut _26: &u8;
    let _27: u8;
    let _28: &u8;
    let _29: &u8;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: u8;
    let mut _33: u8;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&u8, &u8);
    let mut _38: &u8;
    let _39: u8;
    let _40: &u8;
    let _41: &u8;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: u8;
    let mut _45: u8;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&u8, &u8);
    let mut _50: &u8;
    let _51: u8;
    let _52: &u8;
    let _53: &u8;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: u8;
    let mut _57: u8;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&u8, &u8);
    let mut _62: &u8;
    let _63: u8;
    let _64: &u8;
    let _65: &u8;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: u8;
    let mut _69: u8;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: &u8;
    let mut _74: &u8;
    let mut _75: &u8;
    let mut _76: &u8;
    let mut _77: &u8;
    let mut _78: &i8;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _16;
        debug right_val => _17;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _28;
        debug right_val => _29;
        let _34: core::panicking::AssertKind;
        scope 6 {
            debug kind => _34;
        }
    }
    scope 7 {
        debug left_val => _40;
        debug right_val => _41;
        let _46: core::panicking::AssertKind;
        scope 8 {
            debug kind => _46;
        }
    }
    scope 9 {
        debug left_val => _52;
        debug right_val => _53;
        let _58: core::panicking::AssertKind;
        scope 10 {
            debug kind => _58;
        }
    }
    scope 11 {
        debug left_val => _64;
        debug right_val => _65;
        let _70: core::panicking::AssertKind;
        scope 12 {
            debug kind => _70;
        }
    }

    bb0: {
        _3 = <i8 as std::ops::Neg>::neg(const i8::MIN) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _78 = const _;
        _1 = (move _2, _78);
        _4 = (_1.0: &i8);
        _5 = (_1.1: &i8);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<i8, i8>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        _15 = <u8 as std::ops::Add>::add(const u8::MAX, const 1_u8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = &_15;
        _77 = const _;
        _13 = (move _14, _77);
        _16 = (_13.0: &u8);
        _17 = (_13.1: &u8);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<u8, u8>(move _22, _16, _17, move _24) -> unwind continue;
    }

    bb6: {
        _27 = <u8 as std::ops::Sub>::sub(const 0_u8, const 1_u8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _26 = &_27;
        _76 = const _;
        _25 = (move _26, _76);
        _28 = (_25.0: &u8);
        _29 = (_25.1: &u8);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<u8, u8>(move _34, _28, _29, move _36) -> unwind continue;
    }

    bb9: {
        _39 = <u8 as std::ops::Mul>::mul(const u8::MAX, const 2_u8) -> [return: bb10, unwind continue];
    }

    bb10: {
        _38 = &_39;
        _75 = const _;
        _37 = (move _38, _75);
        _40 = (_37.0: &u8);
        _41 = (_37.1: &u8);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<u8, u8>(move _46, _40, _41, move _48) -> unwind continue;
    }

    bb12: {
        _51 = <u8 as std::ops::Shl<i32>>::shl(const 1_u8, const 9_i32) -> [return: bb13, unwind continue];
    }

    bb13: {
        _50 = &_51;
        _74 = const _;
        _49 = (move _50, _74);
        _52 = (_49.0: &u8);
        _53 = (_49.1: &u8);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<u8, u8>(move _58, _52, _53, move _60) -> unwind continue;
    }

    bb15: {
        _63 = <u8 as std::ops::Shr<i32>>::shr(const 2_u8, const 9_i32) -> [return: bb16, unwind continue];
    }

    bb16: {
        _62 = &_63;
        _73 = const _;
        _61 = (move _62, _73);
        _64 = (_61.0: &u8);
        _65 = (_61.1: &u8);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<u8, u8>(move _70, _64, _65, move _72) -> unwind continue;
    }

    bb18: {
        return;
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 254_u8;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const u8::MAX;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const i8::MIN;
        _0 = &_1;
        return;
    }
}
