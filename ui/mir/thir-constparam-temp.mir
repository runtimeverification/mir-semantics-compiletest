// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/mir/thir-constparam-temp.rs:6:10: 6:19>::eq(_1: &Yikes, _2: &Yikes) -> bool {
    debug self => _1;                    // in scope 0 at ui/mir/thir-constparam-temp.rs:6:10: 6:19
    debug other => _2;                   // in scope 0 at ui/mir/thir-constparam-temp.rs:6:10: 6:19
    let mut _0: bool;                    // return place in scope 0 at ui/mir/thir-constparam-temp.rs:6:10: 6:19

    bb0: {
        _0 = const true;                 // scope 0 at ui/mir/thir-constparam-temp.rs:6:10: 6:19
        return;                          // scope 0 at ui/mir/thir-constparam-temp.rs:6:19: 6:19
    }
}

fn <impl at ui/mir/thir-constparam-temp.rs:6:21: 6:23>::assert_receiver_is_total_eq(_1: &Yikes) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/thir-constparam-temp.rs:6:21: 6:23
    let mut _0: ();                      // return place in scope 0 at ui/mir/thir-constparam-temp.rs:6:21: 6:23

    bb0: {
        return;                          // scope 0 at ui/mir/thir-constparam-temp.rs:6:23: 6:23
    }
}

fn <impl at ui/mir/thir-constparam-temp.rs:9:1: 9:11>::mut_self(_1: &mut Yikes) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/thir-constparam-temp.rs:10:17: 10:26
    let mut _0: ();                      // return place in scope 0 at ui/mir/thir-constparam-temp.rs:10:28: 10:28

    bb0: {
        return;                          // scope 0 at ui/mir/thir-constparam-temp.rs:10:30: 10:30
    }
}

fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/thir-constparam-temp.rs:13:30: 13:30
    let mut _1: &mut Yikes;              // in scope 0 at ui/mir/thir-constparam-temp.rs:14:5: 14:21
    let mut _2: Yikes;                   // in scope 0 at ui/mir/thir-constparam-temp.rs:14:5: 14:10

    bb0: {
        _1 = &mut _2;                    // scope 0 at ui/mir/thir-constparam-temp.rs:14:5: 14:21
        _0 = Yikes::mut_self(move _1) -> bb1; // scope 0 at ui/mir/thir-constparam-temp.rs:14:5: 14:21
                                         // mir::Constant
                                         // + span: ui/mir/thir-constparam-temp.rs:14:11: 14:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut Yikes) {Yikes::mut_self}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/thir-constparam-temp.rs:16:2: 16:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/thir-constparam-temp.rs:18:11: 18:11

    bb0: {
        _0 = foo::<Yikes>() -> bb1;      // scope 0 at ui/mir/thir-constparam-temp.rs:19:5: 19:23
                                         // mir::Constant
                                         // + span: ui/mir/thir-constparam-temp.rs:19:5: 19:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {foo::<Yikes>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/thir-constparam-temp.rs:20:2: 20:2
    }
}

main::{constant#0}: Yikes = {
    let mut _0: Yikes;                   // return place in scope 0 at ui/mir/thir-constparam-temp.rs:19:11: 19:20

    bb0: {
        _0 = Yikes;                      // scope 0 at ui/mir/thir-constparam-temp.rs:19:13: 19:18
        return;                          // scope 0 at ui/mir/thir-constparam-temp.rs:19:11: 19:20
    }
}
