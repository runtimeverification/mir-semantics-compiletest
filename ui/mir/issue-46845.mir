// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/mir/issue-46845.rs:8:16: 8:21>::clone(_1: &Never) -> Never {
    debug self => _1;
    let mut _0: Never;

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let _3: &usize;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&usize, &usize);
    let _12: &usize;
    let _13: &usize;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: usize;
    let mut _17: usize;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let _21: [Foo; 2];
    let mut _22: Foo;
    let mut _23: Foo;
    let _24: ();
    let mut _25: std::fmt::Arguments<'_>;
    let mut _26: &[&str];
    let mut _27: &[core::fmt::rt::Argument<'_>];
    let _28: &[core::fmt::rt::Argument<'_>; 1];
    let _29: [core::fmt::rt::Argument<'_>; 1];
    let mut _30: core::fmt::rt::Argument<'_>;
    let _31: &u64;
    let _32: u64;
    let _33: usize;
    let mut _34: usize;
    let mut _35: bool;
    let mut _36: (&u64, &u64);
    let mut _37: &u64;
    let _38: u64;
    let _39: usize;
    let mut _40: usize;
    let mut _41: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: u64;
    let mut _47: u64;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: &usize;
    let mut _54: &usize;
    let mut _55: &usize;
    let mut _56: &usize;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug f => _21;
        let _42: &u64;
        let _43: &u64;
        let mut _51: &u64;
        let mut _52: &[&str; 2];
        scope 6 {
        }
        scope 7 {
        }
        scope 8 {
            debug left_val => _42;
            debug right_val => _43;
            let _48: core::panicking::AssertKind;
            scope 9 {
                debug kind => _48;
            }
        }
    }

    bb0: {
        _56 = const _;
        _55 = const _;
        _1 = (_56, _55);
        _2 = (_1.0: &usize);
        _3 = (_1.1: &usize);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<usize, usize>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _54 = const _;
        _53 = const _;
        _11 = (_54, _53);
        _12 = (_11.0: &usize);
        _13 = (_11.1: &usize);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<usize, usize>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb4: {
        _22 = Foo { a: const 42_u64 };
        _23 = Foo { a: const 10_u64 };
        _21 = [move _22, move _23];
        _52 = const _;
        _26 = _52 as &[&str] (Pointer(Unsize));
        _33 = const 0_usize;
        _34 = const 2_usize;
        _35 = Lt(_33, _34);
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> [success: bb5, unwind continue];
    }

    bb5: {
        _32 = (_21[_33].0: u64);
        _31 = &_32;
        _30 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_31) -> [return: bb6, unwind continue];
    }

    bb6: {
        _29 = [move _30];
        _28 = &_29;
        _27 = _28 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _25 = Arguments::<'_>::new_v1(move _26, move _27) -> [return: bb7, unwind continue];
    }

    bb7: {
        _24 = _print(move _25) -> [return: bb8, unwind continue];
    }

    bb8: {
        _39 = const 1_usize;
        _40 = const 2_usize;
        _41 = Lt(_39, _40);
        assert(move _41, "index out of bounds: the length is {} but the index is {}", move _40, _39) -> [success: bb9, unwind continue];
    }

    bb9: {
        _38 = (_21[_39].0: u64);
        _37 = &_38;
        _51 = const _;
        _36 = (move _37, _51);
        _42 = (_36.0: &u64);
        _43 = (_36.1: &u64);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<u64, u64>(move _48, _42, _43, move _50) -> unwind continue;
    }

    bb11: {
        return;
    }
}

promoted[0] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 10_u64;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 8_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<Bar>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 8_usize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<Foo>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}
