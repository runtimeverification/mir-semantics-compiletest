// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const C: [u32; 5] = {
    let mut _0: [u32; 5];                // return place in scope 0 at ui/mir/mir_indexing_oob_1.rs:5:10: 5:18

    bb0: {
        _0 = [const 0_u32; 5];           // scope 0 at ui/mir/mir_indexing_oob_1.rs:5:21: 5:27
        return;                          // scope 0 at ui/mir/mir_indexing_oob_1.rs:5:1: 5:28
    }
}

C::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir_indexing_oob_1.rs:5:16: 5:17

    bb0: {
        _0 = const 5_usize;              // scope 0 at ui/mir/mir_indexing_oob_1.rs:5:16: 5:17
        return;                          // scope 0 at ui/mir/mir_indexing_oob_1.rs:5:16: 5:17
    }
}

C::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir_indexing_oob_1.rs:5:25: 5:26

    bb0: {
        _0 = const 5_usize;              // scope 0 at ui/mir/mir_indexing_oob_1.rs:5:25: 5:26
        return;                          // scope 0 at ui/mir/mir_indexing_oob_1.rs:5:25: 5:26
    }
}

fn test() -> u32 {
    let mut _0: u32;                     // return place in scope 0 at ui/mir/mir_indexing_oob_1.rs:8:14: 8:17
    let mut _1: [u32; 5];                // in scope 0 at ui/mir/mir_indexing_oob_1.rs:9:5: 9:6
    let _2: usize;                       // in scope 0 at ui/mir/mir_indexing_oob_1.rs:9:7: 9:9
    let mut _3: usize;                   // in scope 0 at ui/mir/mir_indexing_oob_1.rs:9:5: 9:10
    let mut _4: bool;                    // in scope 0 at ui/mir/mir_indexing_oob_1.rs:9:5: 9:10

    bb0: {
        _1 = const _;                    // scope 0 at ui/mir/mir_indexing_oob_1.rs:9:5: 9:6
        _2 = const 10_usize;             // scope 0 at ui/mir/mir_indexing_oob_1.rs:9:7: 9:9
        _3 = const 5_usize;              // scope 0 at ui/mir/mir_indexing_oob_1.rs:9:5: 9:10
        _4 = const false;                // scope 0 at ui/mir/mir_indexing_oob_1.rs:9:5: 9:10
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1; // scope 0 at ui/mir/mir_indexing_oob_1.rs:9:5: 9:10
    }

    bb1: {
        _0 = _1[_2];                     // scope 0 at ui/mir/mir_indexing_oob_1.rs:9:5: 9:10
        return;                          // scope 0 at ui/mir/mir_indexing_oob_1.rs:10:2: 10:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_indexing_oob_1.rs:12:11: 12:11
    let _1: u32;                         // in scope 0 at ui/mir/mir_indexing_oob_1.rs:13:5: 13:11

    bb0: {
        _1 = test() -> bb1;              // scope 0 at ui/mir/mir_indexing_oob_1.rs:13:5: 13:11
                                         // mir::Constant
                                         // + span: ui/mir/mir_indexing_oob_1.rs:13:5: 13:9
                                         // + literal: Const { ty: fn() -> u32 {test}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/mir_indexing_oob_1.rs:14:2: 14:2
    }
}
