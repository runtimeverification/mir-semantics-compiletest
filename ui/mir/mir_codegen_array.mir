// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn into_inner() -> [u64; 1024] {
    let mut _0: [u64; 1024];
    let mut _1: u64;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _1 = Add(const 10_u64, const 20_u64);
        _0 = [_1; 1024];
        return;
    }
}

into_inner::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1024_usize;
        return;
    }
}

into_inner::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1024_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &[u64];
    let mut _2: (&&[u64], &&[u64]);
    let mut _3: &&[u64];
    let _4: &[u64];
    let _5: &[u64];
    let mut _6: &[u64; 1024];
    let _7: [u64; 1024];
    let mut _8: &&[u64];
    let mut _11: bool;
    let mut _12: bool;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: &[u64; 1024];
    scope 1 {
        debug x => _1;
        let _9: &&[u64];
        let _10: &&[u64];
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
    }

    bb0: {
        _16 = const _;
        _1 = _16 as &[u64] (Pointer(Unsize));
        _7 = into_inner() -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_7;
        _5 = <[u64; 1024] as Index<RangeFull>>::index(move _6, const RangeFull) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = _5;
        _3 = &_4;
        _8 = &_1;
        _2 = (move _3, move _8);
        _9 = (_2.0: &&[u64]);
        _10 = (_2.1: &&[u64]);
        _12 = <&[u64] as PartialEq>::eq(_9, _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<&[u64], &[u64]>(move _13, _9, _10, move _15) -> unwind continue;
    }

    bb5: {
        return;
    }
}

promoted[0] in main: &[u64; 1024] = {
    let mut _0: &[u64; 1024];
    let mut _1: [u64; 1024];

    bb0: {
        _1 = [const 30_u64; 1024];
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1024_usize;
        return;
    }
}
