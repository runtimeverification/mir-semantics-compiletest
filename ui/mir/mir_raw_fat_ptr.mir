// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15>::fmt(_1: &ComparisonResults, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
    debug f => _2;                       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
    let _3: &[&str; 6];                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
    let _4: &[&str; 6];                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
    let mut _6: &[&dyn std::fmt::Debug; 6]; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
    let _7: &[&dyn std::fmt::Debug; 6];  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
    let _8: [&dyn std::fmt::Debug; 6];   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
    let mut _9: &dyn std::fmt::Debug;    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:10:5: 10:13
    let mut _10: &bool;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:10:5: 10:13
    let _11: &bool;                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:10:5: 10:13
    let mut _12: &dyn std::fmt::Debug;   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
    let mut _13: &bool;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
    let _14: &bool;                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
    let mut _15: &dyn std::fmt::Debug;   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
    let mut _16: &bool;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
    let _17: &bool;                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
    let mut _18: &dyn std::fmt::Debug;   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
    let mut _19: &bool;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
    let _20: &bool;                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
    let mut _21: &dyn std::fmt::Debug;   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
    let mut _22: &bool;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
    let _23: &bool;                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
    let mut _24: &dyn std::fmt::Debug;   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
    let mut _25: &&bool;                 // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
    let _26: &&bool;                     // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
    let _27: &bool;                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
    let mut _28: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
    let mut _29: &str;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
    let _30: &str;                       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
    let mut _31: &[&str];                // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
    let mut _32: &[&str; 6];             // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
    let mut _33: &[&dyn std::fmt::Debug]; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
    let mut _34: &[&str; 6];             // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
    scope 1 {
        debug names => _3;               // in scope 1 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
        let _5: &[&dyn std::fmt::Debug]; // in scope 1 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
        scope 2 {
            debug values => _5;          // in scope 2 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
        }
    }

    bb0: {
        _34 = const _;                   // scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
                                         // + literal: Const { ty: &[&str; 6], val: Unevaluated(<ComparisonResults as Debug>::fmt, [], Some(promoted[0])) }
        _4 = _34;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
        _3 = _4;                         // scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
        _11 = &((*_1).0: bool);          // scope 1 at ui/mir/mir_raw_fat_ptr.rs:10:5: 10:13
        _10 = _11;                       // scope 1 at ui/mir/mir_raw_fat_ptr.rs:10:5: 10:13
        _9 = move _10 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/mir/mir_raw_fat_ptr.rs:10:5: 10:13
        _14 = &((*_1).1: bool);          // scope 1 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
        _13 = _14;                       // scope 1 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
        _12 = move _13 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
        _17 = &((*_1).2: bool);          // scope 1 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
        _16 = _17;                       // scope 1 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
        _15 = move _16 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
        _20 = &((*_1).3: bool);          // scope 1 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
        _19 = _20;                       // scope 1 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
        _18 = move _19 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
        _23 = &((*_1).4: bool);          // scope 1 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
        _22 = _23;                       // scope 1 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
        _21 = move _22 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
        _27 = &((*_1).5: bool);          // scope 1 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
        _26 = &_27;                      // scope 1 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
        _25 = _26;                       // scope 1 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
        _24 = move _25 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
        _8 = [move _9, move _12, move _15, move _18, move _21, move _24]; // scope 1 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
        _7 = &_8;                        // scope 1 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
        _6 = _7;                         // scope 1 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
        _5 = move _6 as &[&dyn std::fmt::Debug] (Pointer(Unsize)); // scope 1 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
        _28 = &mut (*_2);                // scope 2 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
        _30 = const "ComparisonResults"; // scope 2 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _29 = _30;                       // scope 2 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
        _32 = _3;                        // scope 2 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
        _31 = move _32 as &[&str] (Pointer(Unsize)); // scope 2 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
        _33 = _5;                        // scope 2 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
        _0 = Formatter::<'_>::debug_struct_fields_finish(move _28, move _29, move _31, move _33) -> bb1; // scope 2 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c [&'d str], &'e [&'f (dyn Debug + 'f)]) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_fields_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:15: 8:15
    }
}

promoted[0] in <impl at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15>::fmt: &[&str; 6] = {
    let mut _0: &[&str; 6];              // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
    let mut _1: [&str; 6];               // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
    let mut _2: &str;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
    let mut _3: &str;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
    let mut _4: &str;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
    let mut _5: &str;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
    let mut _6: &str;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
    let mut _7: &str;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
    let mut _8: &str;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
    let mut _9: &str;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
    let mut _10: &str;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
    let mut _11: &str;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13

    bb0: {
        _3 = const "le";                 // scope 0 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
        _5 = const "gt";                 // scope 0 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
        _7 = const "ge";                 // scope 0 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
        _9 = const "eq";                 // scope 0 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = &(*_9);                     // scope 0 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
        _11 = const "ne";                // scope 0 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &(*_11);                   // scope 0 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
        _1 = [const "lt", move _2, move _4, move _6, move _8, move _10]; // scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:10:5: 10:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:10: 8:15
    }
}

fn <impl at ui/mir/mir_raw_fat_ptr.rs:8:17: 8:26>::eq(_1: &ComparisonResults, _2: &ComparisonResults) -> bool {
    debug self => _1;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:17: 8:26
    debug other => _2;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:17: 8:26
    let mut _0: bool;                    // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:17: 8:26
    let mut _3: bool;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
    let mut _4: bool;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
    let mut _5: bool;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
    let mut _6: bool;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
    let mut _7: bool;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:10:5: 10:13
    let mut _8: bool;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:10:5: 10:13
    let mut _9: bool;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:10:5: 10:13
    let mut _10: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
    let mut _11: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
    let mut _12: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
    let mut _13: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
    let mut _14: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
    let mut _15: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
    let mut _16: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
    let mut _17: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
    let mut _18: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
    let mut _19: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
    let mut _20: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
    let mut _21: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
    let mut _22: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
    let mut _23: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
    let mut _24: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13

    bb0: {
        _8 = ((*_1).0: bool);            // scope 0 at ui/mir/mir_raw_fat_ptr.rs:10:5: 10:13
        _9 = ((*_2).0: bool);            // scope 0 at ui/mir/mir_raw_fat_ptr.rs:10:5: 10:13
        _7 = Eq(move _8, move _9);       // scope 0 at ui/mir/mir_raw_fat_ptr.rs:10:5: 10:13
        switchInt(move _7) -> [0: bb13, otherwise: bb14]; // scope 0 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
        goto -> bb3;                     // scope 0 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
    }

    bb2: {
        _23 = ((*_1).5: bool);           // scope 0 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
        _24 = ((*_2).5: bool);           // scope 0 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
        _22 = Eq(move _23, move _24);    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
        _0 = move _22;                   // scope 0 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
        goto -> bb3;                     // scope 0 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
    }

    bb3: {
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:26: 8:26
    }

    bb4: {
        _3 = const false;                // scope 0 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
        goto -> bb6;                     // scope 0 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
    }

    bb5: {
        _20 = ((*_1).4: bool);           // scope 0 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
        _21 = ((*_2).4: bool);           // scope 0 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
        _19 = Eq(move _20, move _21);    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
        _3 = move _19;                   // scope 0 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
        goto -> bb6;                     // scope 0 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/mir/mir_raw_fat_ptr.rs:15:5: 15:13
    }

    bb7: {
        _4 = const false;                // scope 0 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
        goto -> bb9;                     // scope 0 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
    }

    bb8: {
        _17 = ((*_1).3: bool);           // scope 0 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
        _18 = ((*_2).3: bool);           // scope 0 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
        _16 = Eq(move _17, move _18);    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
        _4 = move _16;                   // scope 0 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
        goto -> bb9;                     // scope 0 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
    }

    bb9: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/mir/mir_raw_fat_ptr.rs:14:5: 14:13
    }

    bb10: {
        _5 = const false;                // scope 0 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
        goto -> bb12;                    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
    }

    bb11: {
        _14 = ((*_1).2: bool);           // scope 0 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
        _15 = ((*_2).2: bool);           // scope 0 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
        _13 = Eq(move _14, move _15);    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
        _5 = move _13;                   // scope 0 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
        goto -> bb12;                    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
    }

    bb12: {
        switchInt(move _5) -> [0: bb7, otherwise: bb8]; // scope 0 at ui/mir/mir_raw_fat_ptr.rs:13:5: 13:13
    }

    bb13: {
        _6 = const false;                // scope 0 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
        goto -> bb15;                    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
    }

    bb14: {
        _11 = ((*_1).1: bool);           // scope 0 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
        _12 = ((*_2).1: bool);           // scope 0 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
        _10 = Eq(move _11, move _12);    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
        _6 = move _10;                   // scope 0 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
        goto -> bb15;                    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:11:5: 11:13
    }

    bb15: {
        switchInt(move _6) -> [0: bb10, otherwise: bb11]; // scope 0 at ui/mir/mir_raw_fat_ptr.rs:12:5: 12:13
    }
}

fn <impl at ui/mir/mir_raw_fat_ptr.rs:8:28: 8:30>::assert_receiver_is_total_eq(_1: &ComparisonResults) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:28: 8:30
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:28: 8:30
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:8:30: 8:30
    }
}

const LT: ComparisonResults = {
    let mut _0: ComparisonResults;       // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:18:11: 18:28

    bb0: {
        _0 = ComparisonResults { lt: const true, le: const true, gt: const false, ge: const false, eq: const false, ne: const true }; // scope 0 at ui/mir/mir_raw_fat_ptr.rs:18:31: 25:2
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:18:1: 25:3
    }
}

const EQ: ComparisonResults = {
    let mut _0: ComparisonResults;       // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:27:11: 27:28

    bb0: {
        _0 = ComparisonResults { lt: const false, le: const true, gt: const false, ge: const true, eq: const true, ne: const false }; // scope 0 at ui/mir/mir_raw_fat_ptr.rs:27:31: 34:2
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:27:1: 34:3
    }
}

const GT: ComparisonResults = {
    let mut _0: ComparisonResults;       // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:36:11: 36:28

    bb0: {
        _0 = ComparisonResults { lt: const false, le: const false, gt: const true, ge: const true, eq: const false, ne: const true }; // scope 0 at ui/mir/mir_raw_fat_ptr.rs:36:31: 43:2
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:36:1: 43:3
    }
}

fn compare_su8(_1: *const S<[u8]>, _2: *const S<[u8]>) -> ComparisonResults {
    debug a => _1;                       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:45:16: 45:17
    debug b => _2;                       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:45:35: 45:36
    let mut _0: ComparisonResults;       // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:45:57: 45:74
    let mut _3: bool;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:47:13: 47:18
    let mut _4: *const S<[u8]>;          // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:47:13: 47:14
    let mut _5: *const S<[u8]>;          // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:47:17: 47:18
    let mut _6: bool;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:48:13: 48:19
    let mut _7: *const S<[u8]>;          // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:48:13: 48:14
    let mut _8: *const S<[u8]>;          // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:48:18: 48:19
    let mut _9: bool;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:49:13: 49:18
    let mut _10: *const S<[u8]>;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:49:13: 49:14
    let mut _11: *const S<[u8]>;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:49:17: 49:18
    let mut _12: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:50:13: 50:19
    let mut _13: *const S<[u8]>;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:50:13: 50:14
    let mut _14: *const S<[u8]>;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:50:18: 50:19
    let mut _15: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:51:13: 51:19
    let mut _16: *const S<[u8]>;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:51:13: 51:14
    let mut _17: *const S<[u8]>;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:51:18: 51:19
    let mut _18: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:52:13: 52:19
    let mut _19: *const S<[u8]>;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:52:13: 52:14
    let mut _20: *const S<[u8]>;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:52:18: 52:19

    bb0: {
        _4 = _1;                         // scope 0 at ui/mir/mir_raw_fat_ptr.rs:47:13: 47:14
        _5 = _2;                         // scope 0 at ui/mir/mir_raw_fat_ptr.rs:47:17: 47:18
        _3 = Lt(move _4, move _5);       // scope 0 at ui/mir/mir_raw_fat_ptr.rs:47:13: 47:18
        _7 = _1;                         // scope 0 at ui/mir/mir_raw_fat_ptr.rs:48:13: 48:14
        _8 = _2;                         // scope 0 at ui/mir/mir_raw_fat_ptr.rs:48:18: 48:19
        _6 = Le(move _7, move _8);       // scope 0 at ui/mir/mir_raw_fat_ptr.rs:48:13: 48:19
        _10 = _1;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:49:13: 49:14
        _11 = _2;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:49:17: 49:18
        _9 = Gt(move _10, move _11);     // scope 0 at ui/mir/mir_raw_fat_ptr.rs:49:13: 49:18
        _13 = _1;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:50:13: 50:14
        _14 = _2;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:50:18: 50:19
        _12 = Ge(move _13, move _14);    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:50:13: 50:19
        _16 = _1;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:51:13: 51:14
        _17 = _2;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:51:18: 51:19
        _15 = Eq(move _16, move _17);    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:51:13: 51:19
        _19 = _1;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:52:13: 52:14
        _20 = _2;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:52:18: 52:19
        _18 = Ne(move _19, move _20);    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:52:13: 52:19
        _0 = ComparisonResults { lt: move _3, le: move _6, gt: move _9, ge: move _12, eq: move _15, ne: move _18 }; // scope 0 at ui/mir/mir_raw_fat_ptr.rs:46:5: 53:6
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:54:2: 54:2
    }
}

fn compare_au8(_1: *const [u8], _2: *const [u8]) -> ComparisonResults {
    debug a => _1;                       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:56:16: 56:17
    debug b => _2;                       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:56:32: 56:33
    let mut _0: ComparisonResults;       // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:56:51: 56:68
    let mut _3: bool;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:58:13: 58:18
    let mut _4: *const [u8];             // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:58:13: 58:14
    let mut _5: *const [u8];             // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:58:17: 58:18
    let mut _6: bool;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:59:13: 59:19
    let mut _7: *const [u8];             // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:59:13: 59:14
    let mut _8: *const [u8];             // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:59:18: 59:19
    let mut _9: bool;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:60:13: 60:18
    let mut _10: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:60:13: 60:14
    let mut _11: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:60:17: 60:18
    let mut _12: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:61:13: 61:19
    let mut _13: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:61:13: 61:14
    let mut _14: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:61:18: 61:19
    let mut _15: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:62:13: 62:19
    let mut _16: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:62:13: 62:14
    let mut _17: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:62:18: 62:19
    let mut _18: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:63:13: 63:19
    let mut _19: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:63:13: 63:14
    let mut _20: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:63:18: 63:19

    bb0: {
        _4 = _1;                         // scope 0 at ui/mir/mir_raw_fat_ptr.rs:58:13: 58:14
        _5 = _2;                         // scope 0 at ui/mir/mir_raw_fat_ptr.rs:58:17: 58:18
        _3 = Lt(move _4, move _5);       // scope 0 at ui/mir/mir_raw_fat_ptr.rs:58:13: 58:18
        _7 = _1;                         // scope 0 at ui/mir/mir_raw_fat_ptr.rs:59:13: 59:14
        _8 = _2;                         // scope 0 at ui/mir/mir_raw_fat_ptr.rs:59:18: 59:19
        _6 = Le(move _7, move _8);       // scope 0 at ui/mir/mir_raw_fat_ptr.rs:59:13: 59:19
        _10 = _1;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:60:13: 60:14
        _11 = _2;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:60:17: 60:18
        _9 = Gt(move _10, move _11);     // scope 0 at ui/mir/mir_raw_fat_ptr.rs:60:13: 60:18
        _13 = _1;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:61:13: 61:14
        _14 = _2;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:61:18: 61:19
        _12 = Ge(move _13, move _14);    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:61:13: 61:19
        _16 = _1;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:62:13: 62:14
        _17 = _2;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:62:18: 62:19
        _15 = Eq(move _16, move _17);    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:62:13: 62:19
        _19 = _1;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:63:13: 63:14
        _20 = _2;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:63:18: 63:19
        _18 = Ne(move _19, move _20);    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:63:13: 63:19
        _0 = ComparisonResults { lt: move _3, le: move _6, gt: move _9, ge: move _12, eq: move _15, ne: move _18 }; // scope 0 at ui/mir/mir_raw_fat_ptr.rs:57:5: 64:6
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:65:2: 65:2
    }
}

fn compare_foo(_1: *const dyn Foo, _2: *const dyn Foo) -> ComparisonResults {
    debug a => _1;                       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:67:20: 67:21
    debug b => _2;                       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:67:44: 67:45
    let mut _0: ComparisonResults;       // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:67:71: 67:88
    let mut _3: bool;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:69:13: 69:18
    let mut _4: *const dyn Foo;          // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:69:13: 69:14
    let mut _5: *const dyn Foo;          // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:69:17: 69:18
    let mut _6: *const dyn Foo;          // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:69:17: 69:18
    let mut _7: bool;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:70:13: 70:19
    let mut _8: *const dyn Foo;          // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:70:13: 70:14
    let mut _9: *const dyn Foo;          // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:70:18: 70:19
    let mut _10: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:70:18: 70:19
    let mut _11: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:71:13: 71:18
    let mut _12: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:71:13: 71:14
    let mut _13: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:71:17: 71:18
    let mut _14: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:71:17: 71:18
    let mut _15: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:72:13: 72:19
    let mut _16: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:72:13: 72:14
    let mut _17: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:72:18: 72:19
    let mut _18: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:72:18: 72:19
    let mut _19: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:73:13: 73:19
    let mut _20: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:73:13: 73:14
    let mut _21: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:73:18: 73:19
    let mut _22: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:73:18: 73:19
    let mut _23: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:74:13: 74:19
    let mut _24: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:74:13: 74:14
    let mut _25: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:74:18: 74:19
    let mut _26: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:74:18: 74:19

    bb0: {
        _4 = _1;                         // scope 0 at ui/mir/mir_raw_fat_ptr.rs:69:13: 69:14
        _6 = _2;                         // scope 0 at ui/mir/mir_raw_fat_ptr.rs:69:17: 69:18
        _5 = move _6 as *const dyn Foo (Pointer(Unsize)); // scope 0 at ui/mir/mir_raw_fat_ptr.rs:69:17: 69:18
        _3 = Lt(move _4, move _5);       // scope 0 at ui/mir/mir_raw_fat_ptr.rs:69:13: 69:18
        _8 = _1;                         // scope 0 at ui/mir/mir_raw_fat_ptr.rs:70:13: 70:14
        _10 = _2;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:70:18: 70:19
        _9 = move _10 as *const dyn Foo (Pointer(Unsize)); // scope 0 at ui/mir/mir_raw_fat_ptr.rs:70:18: 70:19
        _7 = Le(move _8, move _9);       // scope 0 at ui/mir/mir_raw_fat_ptr.rs:70:13: 70:19
        _12 = _1;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:71:13: 71:14
        _14 = _2;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:71:17: 71:18
        _13 = move _14 as *const dyn Foo (Pointer(Unsize)); // scope 0 at ui/mir/mir_raw_fat_ptr.rs:71:17: 71:18
        _11 = Gt(move _12, move _13);    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:71:13: 71:18
        _16 = _1;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:72:13: 72:14
        _18 = _2;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:72:18: 72:19
        _17 = move _18 as *const dyn Foo (Pointer(Unsize)); // scope 0 at ui/mir/mir_raw_fat_ptr.rs:72:18: 72:19
        _15 = Ge(move _16, move _17);    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:72:13: 72:19
        _20 = _1;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:73:13: 73:14
        _22 = _2;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:73:18: 73:19
        _21 = move _22 as *const dyn Foo (Pointer(Unsize)); // scope 0 at ui/mir/mir_raw_fat_ptr.rs:73:18: 73:19
        _19 = Eq(move _20, move _21);    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:73:13: 73:19
        _24 = _1;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:74:13: 74:14
        _26 = _2;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:74:18: 74:19
        _25 = move _26 as *const dyn Foo (Pointer(Unsize)); // scope 0 at ui/mir/mir_raw_fat_ptr.rs:74:18: 74:19
        _23 = Ne(move _24, move _25);    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:74:13: 74:19
        _0 = ComparisonResults { lt: move _3, le: move _7, gt: move _11, ge: move _15, eq: move _19, ne: move _23 }; // scope 0 at ui/mir/mir_raw_fat_ptr.rs:68:5: 75:6
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:76:2: 76:2
    }
}

fn simple_eq(_1: *const dyn Foo, _2: *const dyn Foo) -> bool {
    debug a => _1;                       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:78:18: 78:19
    debug b => _2;                       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:78:42: 78:43
    let mut _0: bool;                    // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:79:9: 79:15
    let mut _3: *const dyn Foo;          // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:79:18: 79:19
    let mut _4: *const dyn Foo;          // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:79:23: 79:24
    let mut _5: *const dyn Foo;          // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:79:23: 79:24
    scope 1 {
        debug result => _0;              // in scope 1 at ui/mir/mir_raw_fat_ptr.rs:79:9: 79:15
    }

    bb0: {
        _3 = _1;                         // scope 0 at ui/mir/mir_raw_fat_ptr.rs:79:18: 79:19
        _5 = _2;                         // scope 0 at ui/mir/mir_raw_fat_ptr.rs:79:23: 79:24
        _4 = move _5 as *const dyn Foo (Pointer(Unsize)); // scope 0 at ui/mir/mir_raw_fat_ptr.rs:79:23: 79:24
        _0 = Eq(move _3, move _4);       // scope 0 at ui/mir/mir_raw_fat_ptr.rs:79:18: 79:24
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:81:2: 81:2
    }
}

fn assert_inorder(_1: &[T], _2: fn(T, T) -> ComparisonResults) -> () {
    debug a => _1;                       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:83:28: 83:29
    debug compare => _2;                 // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:84:28: 84:35
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:84:68: 84:68
    let mut _3: std::ops::Range<usize>;  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:85:14: 85:24
    let mut _4: std::ops::Range<usize>;  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:85:14: 85:24
    let mut _5: usize;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:85:17: 85:24
    let mut _6: &[T];                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:85:17: 85:24
    let mut _7: std::ops::Range<usize>;  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:85:14: 85:24
    let mut _8: std::option::Option<usize>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:85:14: 85:24
    let mut _9: &mut std::ops::Range<usize>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:85:14: 85:24
    let mut _10: &mut std::ops::Range<usize>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:85:14: 85:24
    let mut _11: isize;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:85:5: 96:6
    let mut _13: std::ops::Range<usize>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:86:18: 86:28
    let mut _14: std::ops::Range<usize>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:86:18: 86:28
    let mut _15: usize;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:86:21: 86:28
    let mut _16: &[T];                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:86:21: 86:28
    let mut _18: std::option::Option<usize>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:86:18: 86:28
    let mut _19: &mut std::ops::Range<usize>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:86:18: 86:28
    let mut _20: &mut std::ops::Range<usize>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:86:18: 86:28
    let mut _21: isize;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:86:9: 95:10
    let mut _24: fn(T, T) -> ComparisonResults; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:87:24: 87:31
    let mut _25: T;                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:87:32: 87:36
    let _26: usize;                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:87:34: 87:35
    let mut _27: usize;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:87:32: 87:36
    let mut _28: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:87:32: 87:36
    let mut _29: T;                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:87:38: 87:42
    let _30: usize;                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:87:40: 87:41
    let mut _31: usize;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:87:38: 87:42
    let mut _32: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:87:38: 87:42
    let mut _33: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:88:16: 88:21
    let mut _34: usize;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:88:16: 88:17
    let mut _35: usize;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:88:20: 88:21
    let mut _36: (&ComparisonResults, &ComparisonResults); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _37: &ComparisonResults;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _38: &ComparisonResults;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _41: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _42: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _43: &ComparisonResults;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _44: &ComparisonResults;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _46: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _47: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _48: &ComparisonResults;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _49: &ComparisonResults;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _50: &ComparisonResults;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _51: &ComparisonResults;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _53: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:90:23: 90:29
    let mut _54: usize;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:90:23: 90:24
    let mut _55: usize;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:90:28: 90:29
    let mut _56: (&ComparisonResults, &ComparisonResults); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _57: &ComparisonResults;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _58: &ComparisonResults;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _61: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _62: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _63: &ComparisonResults;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _64: &ComparisonResults;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _66: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _67: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _68: &ComparisonResults;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _69: &ComparisonResults;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _70: &ComparisonResults;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _71: &ComparisonResults;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _73: (&ComparisonResults, &ComparisonResults); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _74: &ComparisonResults;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _75: &ComparisonResults;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _78: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _79: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _80: &ComparisonResults;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _81: &ComparisonResults;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _83: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _84: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _85: &ComparisonResults;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _86: &ComparisonResults;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _87: &ComparisonResults;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _88: &ComparisonResults;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _89: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug iter => _7;                // in scope 1 at ui/mir/mir_raw_fat_ptr.rs:85:14: 85:24
        let _12: usize;                  // in scope 1 at ui/mir/mir_raw_fat_ptr.rs:85:9: 85:10
        scope 2 {
            debug i => _12;              // in scope 2 at ui/mir/mir_raw_fat_ptr.rs:85:9: 85:10
            let mut _17: std::ops::Range<usize>; // in scope 2 at ui/mir/mir_raw_fat_ptr.rs:86:18: 86:28
            scope 3 {
                debug iter => _17;       // in scope 3 at ui/mir/mir_raw_fat_ptr.rs:86:18: 86:28
                let _22: usize;          // in scope 3 at ui/mir/mir_raw_fat_ptr.rs:86:13: 86:14
                scope 4 {
                    debug j => _22;      // in scope 4 at ui/mir/mir_raw_fat_ptr.rs:86:13: 86:14
                    let _23: ComparisonResults; // in scope 4 at ui/mir/mir_raw_fat_ptr.rs:87:17: 87:21
                    scope 5 {
                        debug cres => _23; // in scope 5 at ui/mir/mir_raw_fat_ptr.rs:87:17: 87:21
                        let _39: &ComparisonResults; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _40: &ComparisonResults; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _59: &ComparisonResults; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _60: &ComparisonResults; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _76: &ComparisonResults; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _77: &ComparisonResults; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let mut _90: &ComparisonResults; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        let mut _91: &ComparisonResults; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        let mut _92: &ComparisonResults; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        scope 6 {
                            debug left_val => _39; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _40; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _45: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 7 {
                                debug kind => _45; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                        scope 8 {
                            debug left_val => _59; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _60; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _65: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 9 {
                                debug kind => _65; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                        scope 10 {
                            debug left_val => _76; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _77; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _82: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 11 {
                                debug kind => _82; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _6 = _1;                         // scope 0 at ui/mir/mir_raw_fat_ptr.rs:85:17: 85:24
        _5 = Len((*_6));                 // scope 0 at ui/mir/mir_raw_fat_ptr.rs:85:17: 85:24
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: move _5 }; // scope 0 at ui/mir/mir_raw_fat_ptr.rs:85:14: 85:24
        _3 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _4) -> bb1; // scope 0 at ui/mir/mir_raw_fat_ptr.rs:85:14: 85:24
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:85:14: 85:24
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = move _3;                    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:85:14: 85:24
        goto -> bb2;                     // scope 1 at ui/mir/mir_raw_fat_ptr.rs:85:5: 96:6
    }

    bb2: {
        _10 = &mut _7;                   // scope 1 at ui/mir/mir_raw_fat_ptr.rs:85:14: 85:24
        _9 = &mut (*_10);                // scope 1 at ui/mir/mir_raw_fat_ptr.rs:85:14: 85:24
        _8 = <std::ops::Range<usize> as Iterator>::next(move _9) -> bb3; // scope 1 at ui/mir/mir_raw_fat_ptr.rs:85:14: 85:24
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:85:14: 85:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = discriminant(_8);          // scope 1 at ui/mir/mir_raw_fat_ptr.rs:85:14: 85:24
        switchInt(move _11) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/mir/mir_raw_fat_ptr.rs:85:14: 85:24
    }

    bb4: {
        _12 = ((_8 as Some).0: usize);   // scope 1 at ui/mir/mir_raw_fat_ptr.rs:85:9: 85:10
        _16 = _1;                        // scope 2 at ui/mir/mir_raw_fat_ptr.rs:86:21: 86:28
        _15 = Len((*_16));               // scope 2 at ui/mir/mir_raw_fat_ptr.rs:86:21: 86:28
        _14 = std::ops::Range::<usize> { start: const 0_usize, end: move _15 }; // scope 2 at ui/mir/mir_raw_fat_ptr.rs:86:18: 86:28
        _13 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _14) -> bb7; // scope 2 at ui/mir/mir_raw_fat_ptr.rs:86:18: 86:28
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:86:18: 86:28
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 1 at ui/mir/mir_raw_fat_ptr.rs:85:14: 85:24
    }

    bb6: {
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:97:2: 97:2
    }

    bb7: {
        _17 = move _13;                  // scope 2 at ui/mir/mir_raw_fat_ptr.rs:86:18: 86:28
        goto -> bb8;                     // scope 3 at ui/mir/mir_raw_fat_ptr.rs:86:9: 95:10
    }

    bb8: {
        _20 = &mut _17;                  // scope 3 at ui/mir/mir_raw_fat_ptr.rs:86:18: 86:28
        _19 = &mut (*_20);               // scope 3 at ui/mir/mir_raw_fat_ptr.rs:86:18: 86:28
        _18 = <std::ops::Range<usize> as Iterator>::next(move _19) -> bb9; // scope 3 at ui/mir/mir_raw_fat_ptr.rs:86:18: 86:28
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:86:18: 86:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb9: {
        _21 = discriminant(_18);         // scope 3 at ui/mir/mir_raw_fat_ptr.rs:86:18: 86:28
        switchInt(move _21) -> [0: bb2, 1: bb10, otherwise: bb11]; // scope 3 at ui/mir/mir_raw_fat_ptr.rs:86:18: 86:28
    }

    bb10: {
        _22 = ((_18 as Some).0: usize);  // scope 3 at ui/mir/mir_raw_fat_ptr.rs:86:13: 86:14
        _24 = _2;                        // scope 4 at ui/mir/mir_raw_fat_ptr.rs:87:24: 87:31
        _26 = _12;                       // scope 4 at ui/mir/mir_raw_fat_ptr.rs:87:34: 87:35
        _27 = Len((*_1));                // scope 4 at ui/mir/mir_raw_fat_ptr.rs:87:32: 87:36
        _28 = Lt(_26, _27);              // scope 4 at ui/mir/mir_raw_fat_ptr.rs:87:32: 87:36
        assert(move _28, "index out of bounds: the length is {} but the index is {}", move _27, _26) -> bb12; // scope 4 at ui/mir/mir_raw_fat_ptr.rs:87:32: 87:36
    }

    bb11: {
        unreachable;                     // scope 3 at ui/mir/mir_raw_fat_ptr.rs:86:18: 86:28
    }

    bb12: {
        _25 = (*_1)[_26];                // scope 4 at ui/mir/mir_raw_fat_ptr.rs:87:32: 87:36
        _30 = _22;                       // scope 4 at ui/mir/mir_raw_fat_ptr.rs:87:40: 87:41
        _31 = Len((*_1));                // scope 4 at ui/mir/mir_raw_fat_ptr.rs:87:38: 87:42
        _32 = Lt(_30, _31);              // scope 4 at ui/mir/mir_raw_fat_ptr.rs:87:38: 87:42
        assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _30) -> bb13; // scope 4 at ui/mir/mir_raw_fat_ptr.rs:87:38: 87:42
    }

    bb13: {
        _29 = (*_1)[_30];                // scope 4 at ui/mir/mir_raw_fat_ptr.rs:87:38: 87:42
        _23 = move _24(move _25, move _29) -> bb14; // scope 4 at ui/mir/mir_raw_fat_ptr.rs:87:24: 87:43
    }

    bb14: {
        _34 = _12;                       // scope 5 at ui/mir/mir_raw_fat_ptr.rs:88:16: 88:17
        _35 = _22;                       // scope 5 at ui/mir/mir_raw_fat_ptr.rs:88:20: 88:21
        _33 = Lt(move _34, move _35);    // scope 5 at ui/mir/mir_raw_fat_ptr.rs:88:16: 88:21
        switchInt(move _33) -> [0: bb18, otherwise: bb15]; // scope 5 at ui/mir/mir_raw_fat_ptr.rs:88:16: 88:21
    }

    bb15: {
        _37 = &_23;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _92 = const _;                   // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &ComparisonResults, val: Unevaluated(assert_inorder, [T], Some(promoted[2])) }
        _38 = _92;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _36 = (move _37, move _38);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _39 = (_36.0: &ComparisonResults); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _40 = (_36.1: &ComparisonResults); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _43 = _39;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _44 = _40;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _42 = <ComparisonResults as PartialEq>::eq(move _43, move _44) -> bb16; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ComparisonResults, &'b ComparisonResults) -> bool {<ComparisonResults as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb16: {
        _41 = Not(move _42);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _41) -> [0: bb8, otherwise: bb17]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb17: {
        _45 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _47 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _49 = _39;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _48 = _49;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _51 = _40;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _50 = _51;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _52 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _46 = core::panicking::assert_failed::<ComparisonResults, ComparisonResults>(move _47, move _48, move _50, move _52); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a ComparisonResults, &'b ComparisonResults, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<ComparisonResults, ComparisonResults>}, val: Value(<ZST>) }
    }

    bb18: {
        _54 = _12;                       // scope 5 at ui/mir/mir_raw_fat_ptr.rs:90:23: 90:24
        _55 = _22;                       // scope 5 at ui/mir/mir_raw_fat_ptr.rs:90:28: 90:29
        _53 = Eq(move _54, move _55);    // scope 5 at ui/mir/mir_raw_fat_ptr.rs:90:23: 90:29
        switchInt(move _53) -> [0: bb22, otherwise: bb19]; // scope 5 at ui/mir/mir_raw_fat_ptr.rs:90:23: 90:29
    }

    bb19: {
        _57 = &_23;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _91 = const _;                   // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &ComparisonResults, val: Unevaluated(assert_inorder, [T], Some(promoted[1])) }
        _58 = _91;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _56 = (move _57, move _58);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _59 = (_56.0: &ComparisonResults); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _60 = (_56.1: &ComparisonResults); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _63 = _59;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _64 = _60;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _62 = <ComparisonResults as PartialEq>::eq(move _63, move _64) -> bb20; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ComparisonResults, &'b ComparisonResults) -> bool {<ComparisonResults as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb20: {
        _61 = Not(move _62);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _61) -> [0: bb8, otherwise: bb21]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb21: {
        _65 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _67 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _69 = _59;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _68 = _69;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _71 = _60;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _70 = _71;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _72 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _66 = core::panicking::assert_failed::<ComparisonResults, ComparisonResults>(move _67, move _68, move _70, move _72); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a ComparisonResults, &'b ComparisonResults, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<ComparisonResults, ComparisonResults>}, val: Value(<ZST>) }
    }

    bb22: {
        _74 = &_23;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _90 = const _;                   // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &ComparisonResults, val: Unevaluated(assert_inorder, [T], Some(promoted[0])) }
        _75 = _90;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _73 = (move _74, move _75);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _76 = (_73.0: &ComparisonResults); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _77 = (_73.1: &ComparisonResults); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _80 = _76;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _81 = _77;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _79 = <ComparisonResults as PartialEq>::eq(move _80, move _81) -> bb23; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ComparisonResults, &'b ComparisonResults) -> bool {<ComparisonResults as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb23: {
        _78 = Not(move _79);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _78) -> [0: bb8, otherwise: bb24]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb24: {
        _82 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _84 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _86 = _76;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _85 = _86;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _88 = _77;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _87 = _88;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _89 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _83 = core::panicking::assert_failed::<ComparisonResults, ComparisonResults>(move _84, move _85, move _87, move _89); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a ComparisonResults, &'b ComparisonResults, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<ComparisonResults, ComparisonResults>}, val: Value(<ZST>) }
    }
}

promoted[0] in assert_inorder: &ComparisonResults = {
    let mut _0: &ComparisonResults;      // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: ComparisonResults;       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:93:34: 93:36

    bb0: {
        _1 = const _;                    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:93:34: 93:36
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:93:34: 93:36
                                         // + literal: Const { ty: ComparisonResults, val: Unevaluated(GT, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in assert_inorder: &ComparisonResults = {
    let mut _0: &ComparisonResults;      // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: ComparisonResults;       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:91:34: 91:36

    bb0: {
        _1 = const _;                    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:91:34: 91:36
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:91:34: 91:36
                                         // + literal: Const { ty: ComparisonResults, val: Unevaluated(EQ, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in assert_inorder: &ComparisonResults = {
    let mut _0: &ComparisonResults;      // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: ComparisonResults;       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:89:34: 89:36

    bb0: {
        _1 = const _;                    // scope 0 at ui/mir/mir_raw_fat_ptr.rs:89:34: 89:36
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:89:34: 89:36
                                         // + literal: Const { ty: ComparisonResults, val: Unevaluated(LT, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn <impl at ui/mir/mir_raw_fat_ptr.rs:100:1: 100:18>::foo(_1: &T) -> usize {
    debug self => _1;                    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:101:12: 101:17
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:101:22: 101:27

    bb0: {
        _0 = std::mem::size_of::<T>() -> bb1; // scope 0 at ui/mir/mir_raw_fat_ptr.rs:102:9: 102:28
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:102:9: 102:26
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:103:6: 103:6
    }
}

fn main_ref() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:109:15: 109:15
    let _1: [u8; 5];                     // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:110:9: 110:14
    let mut _4: std::boxed::Box<[*const [u8]]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: std::boxed::Box<[*const [u8]; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: std::boxed::Box<[*const [u8]; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:117:9: 117:21
    let _11: &[u8];                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:117:9: 117:21
    let _12: &[u8];                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:117:10: 117:21
    let mut _13: &[u8; 5];               // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:117:10: 117:15
    let mut _14: std::ops::Range<usize>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:117:16: 117:20
    let mut _15: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:117:23: 117:35
    let _16: &[u8];                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:117:23: 117:35
    let _17: &[u8];                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:117:24: 117:35
    let mut _18: &[u8; 5];               // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:117:24: 117:29
    let mut _19: std::ops::Range<usize>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:117:30: 117:34
    let mut _20: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:117:37: 117:43
    let mut _21: *const [u8; 5];         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:117:37: 117:43
    let _22: &[u8; 5];                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:117:37: 117:43
    let mut _23: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:117:45: 117:56
    let _24: &[u8];                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:117:45: 117:56
    let _25: &[u8];                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:117:46: 117:56
    let mut _26: &[u8; 5];               // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:117:46: 117:51
    let mut _27: std::ops::RangeFrom<usize>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:117:52: 117:55
    let mut _29: *const u8;              // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:120:22: 120:56
    let mut _30: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:120:22: 120:43
    let mut _31: *const [u8; 5];         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:120:22: 120:28
    let _32: &[u8; 5];                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:120:22: 120:28
    let mut _34: *const u8;              // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:121:23: 121:58
    let mut _35: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:121:23: 121:45
    let mut _36: *const [u8; 5];         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:121:23: 121:30
    let _37: &[u8; 5];                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:121:23: 121:30
    let mut _38: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:122:8: 122:32
    let mut _39: usize;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:122:8: 122:19
    let mut _40: usize;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:122:22: 122:32
    let _41: ();                         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:123:9: 123:32
    let mut _42: &mut std::vec::Vec<*const [u8]>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:123:9: 123:32
    let mut _43: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:123:24: 123:31
    let mut _44: *const [u8; 5];         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:123:24: 123:31
    let _45: &[u8; 5];                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:123:24: 123:31
    let _46: ();                         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:125:9: 125:27
    let mut _47: &mut std::vec::Vec<*const [u8]>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:125:9: 125:27
    let mut _48: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:125:19: 125:26
    let mut _49: *const [u8; 5];         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:125:19: 125:26
    let _50: &[u8; 5];                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:125:19: 125:26
    let _51: ();                         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:127:5: 127:39
    let mut _52: &[*const [u8]];         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:127:20: 127:25
    let _53: &[*const [u8]];             // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:127:20: 127:25
    let mut _54: &std::vec::Vec<*const [u8]>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:127:20: 127:25
    let _55: &std::vec::Vec<*const [u8]>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:127:20: 127:25
    let mut _56: fn(*const [u8], *const [u8]) -> ComparisonResults; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:127:27: 127:38
    let mut _60: &mut [*const dyn Foo; 4]; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:133:38: 136:6
    let mut _61: &mut [*const dyn Foo; 4]; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:133:38: 136:6
    let mut _62: [*const dyn Foo; 4];    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:133:43: 136:6
    let mut _63: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:134:9: 134:13
    let mut _64: *const (u8, u8);        // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:134:9: 134:13
    let _65: &(u8, u8);                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:134:9: 134:13
    let mut _66: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:134:15: 134:21
    let mut _67: *const u8;              // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:134:15: 134:21
    let _68: &u8;                        // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:134:15: 134:21
    let mut _69: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:135:9: 135:14
    let mut _70: *const (u32, u32);      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:135:9: 135:14
    let _71: &(u32, u32);                // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:135:9: 135:14
    let mut _72: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:135:16: 135:23
    let mut _73: *const u32;             // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:135:16: 135:23
    let _74: &u32;                       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:135:16: 135:23
    let _75: ();                         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:137:5: 141:7
    let mut _76: &mut [*const dyn Foo];  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:137:5: 141:7
    let mut _77: [closure@ui/mir/mir_raw_fat_ptr.rs:137:17: 137:22]; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:137:17: 141:6
    let _78: ();                         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:142:5: 142:37
    let mut _79: &[*const dyn Foo];      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:142:20: 142:23
    let mut _80: for<'a> fn(*const (dyn Foo + 'a), *const (dyn Foo + 'a)) -> ComparisonResults; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:142:25: 142:36
    let mut _82: S<[u8; 2]>;             // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:148:9: 148:21
    let mut _83: [u8; 2];                // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:148:14: 148:20
    let mut _84: S<[u8; 3]>;             // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:149:9: 149:28
    let mut _85: [u8; 3];                // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:149:15: 149:27
    let mut _86: S<[u8; 2]>;             // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:150:9: 150:21
    let mut _87: [u8; 2];                // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:150:14: 150:20
    let _88: ();                         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:152:5: 156:28
    let mut _89: &[*const S<[u8]>];      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:152:20: 156:14
    let mut _90: &[*const S<[u8]>; 3];   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:152:20: 156:14
    let _91: &[*const S<[u8]>; 3];       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:152:20: 156:14
    let _92: [*const S<[u8]>; 3];        // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:152:21: 156:14
    let mut _93: *const S<[u8]>;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:153:9: 153:32
    let mut _94: *const S<[u8; 2]>;      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:153:9: 153:14
    let _95: &S<[u8; 2]>;                // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:153:9: 153:14
    let mut _96: *const S<[u8]>;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:154:9: 154:32
    let mut _97: *const S<[u8; 3]>;      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:154:9: 154:14
    let _98: &S<[u8; 3]>;                // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:154:9: 154:14
    let mut _99: *const S<[u8]>;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:155:9: 155:32
    let mut _100: *const S<[u8; 2]>;     // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:155:9: 155:14
    let _101: &S<[u8; 2]>;               // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:155:9: 155:14
    let mut _102: fn(*const S<[u8]>, *const S<[u8]>) -> ComparisonResults; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:156:16: 156:27
    let mut _103: bool;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:5: 158:59
    let mut _104: bool;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:13: 158:58
    let mut _105: *const dyn Foo;        // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:23: 158:39
    let mut _106: *const dyn Foo;        // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:23: 158:39
    let mut _107: *const u8;             // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:23: 158:27
    let _108: &u8;                       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:23: 158:27
    let mut _109: *const dyn Foo;        // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:41: 158:57
    let mut _110: *const dyn Foo;        // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:41: 158:57
    let mut _111: *const u8;             // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:41: 158:45
    let _112: &u8;                       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:41: 158:45
    let mut _113: !;                     // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:5: 158:59
    let mut _114: bool;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:5: 159:60
    let mut _115: bool;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:13: 159:59
    let mut _116: bool;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:14: 159:59
    let mut _117: *const dyn Foo;        // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:24: 159:40
    let mut _118: *const dyn Foo;        // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:24: 159:40
    let mut _119: *const u8;             // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:24: 159:28
    let _120: &u8;                       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:24: 159:28
    let mut _121: *const dyn Foo;        // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:42: 159:58
    let mut _122: *const dyn Foo;        // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:42: 159:58
    let mut _123: *const u8;             // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:42: 159:46
    let _124: &u8;                       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:42: 159:46
    let mut _125: !;                     // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:5: 159:60
    let mut _130: ();                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _131: *const [*const [u8]; 4]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug array => _1;               // in scope 1 at ui/mir/mir_raw_fat_ptr.rs:110:9: 110:14
        let _2: [u8; 5];                 // in scope 1 at ui/mir/mir_raw_fat_ptr.rs:111:9: 111:15
        scope 2 {
            debug array2 => _2;          // in scope 2 at ui/mir/mir_raw_fat_ptr.rs:111:9: 111:15
            let mut _3: std::vec::Vec<*const [u8]>; // in scope 2 at ui/mir/mir_raw_fat_ptr.rs:116:9: 116:17
            scope 3 {
                debug ptrs => _3;        // in scope 3 at ui/mir/mir_raw_fat_ptr.rs:116:9: 116:17
                let _28: usize;          // in scope 3 at ui/mir/mir_raw_fat_ptr.rs:120:9: 120:19
                scope 5 {
                    debug array_addr => _28; // in scope 5 at ui/mir/mir_raw_fat_ptr.rs:120:9: 120:19
                    let _33: usize;      // in scope 5 at ui/mir/mir_raw_fat_ptr.rs:121:9: 121:20
                    scope 6 {
                        debug array2_addr => _33; // in scope 6 at ui/mir/mir_raw_fat_ptr.rs:121:9: 121:20
                        let _57: (u8, u8); // in scope 6 at ui/mir/mir_raw_fat_ptr.rs:129:9: 129:12
                        scope 7 {
                            debug u8_ => _57; // in scope 7 at ui/mir/mir_raw_fat_ptr.rs:129:9: 129:12
                            let _58: (u32, u32); // in scope 7 at ui/mir/mir_raw_fat_ptr.rs:130:9: 130:13
                            scope 8 {
                                debug u32_ => _58; // in scope 8 at ui/mir/mir_raw_fat_ptr.rs:130:9: 130:13
                                let _59: &mut [*const dyn Foo]; // in scope 8 at ui/mir/mir_raw_fat_ptr.rs:133:9: 133:12
                                scope 9 {
                                    debug buf => _59; // in scope 9 at ui/mir/mir_raw_fat_ptr.rs:133:9: 133:12
                                    let _81: (S<[u8; 2]>, S<[u8; 3]>, S<[u8; 2]>); // in scope 9 at ui/mir/mir_raw_fat_ptr.rs:145:9: 145:11
                                    scope 10 {
                                        debug ss => _81; // in scope 10 at ui/mir/mir_raw_fat_ptr.rs:145:9: 145:11
                                        let mut _126: &u8; // in scope 10 at ui/mir/mir_raw_fat_ptr.rs:159:42: 159:46
                                        let mut _127: &u8; // in scope 10 at ui/mir/mir_raw_fat_ptr.rs:159:24: 159:28
                                        let mut _128: &u8; // in scope 10 at ui/mir/mir_raw_fat_ptr.rs:158:41: 158:45
                                        let mut _129: &u8; // in scope 10 at ui/mir/mir_raw_fat_ptr.rs:158:23: 158:27
                                    }
                                }
                            }
                        }
                    }
                }
            }
            scope 4 {
            }
        }
    }

    bb0: {
        _1 = [const 0_u8, const 1_u8, const 2_u8, const 3_u8, const 4_u8]; // scope 0 at ui/mir/mir_raw_fat_ptr.rs:110:17: 110:28
        _2 = [const 5_u8, const 6_u8, const 7_u8, const 8_u8, const 9_u8]; // scope 1 at ui/mir/mir_raw_fat_ptr.rs:111:18: 111:29
        _6 = const 64_usize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = const 8_usize;              // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _8 = alloc::alloc::exchange_malloc(move _6, move _7) -> bb1; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = ShallowInitBox(move _8, [*const [u8]; 4]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _13 = &_1;                       // scope 2 at ui/mir/mir_raw_fat_ptr.rs:117:10: 117:15
        _14 = std::ops::Range::<usize> { start: const 0_usize, end: const 0_usize }; // scope 2 at ui/mir/mir_raw_fat_ptr.rs:117:16: 117:20
        _12 = <[u8; 5] as Index<std::ops::Range<usize>>>::index(move _13, move _14) -> [return: bb2, unwind: bb23]; // scope 2 at ui/mir/mir_raw_fat_ptr.rs:117:10: 117:21
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:117:10: 117:21
                                         // + literal: Const { ty: for<'a> fn(&'a [u8; 5], std::ops::Range<usize>) -> &'a <[u8; 5] as Index<std::ops::Range<usize>>>::Output {<[u8; 5] as Index<std::ops::Range<usize>>>::index}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = _12;                       // scope 2 at ui/mir/mir_raw_fat_ptr.rs:117:9: 117:21
        _10 = &raw const (*_11);         // scope 2 at ui/mir/mir_raw_fat_ptr.rs:117:9: 117:21
        _18 = &_1;                       // scope 2 at ui/mir/mir_raw_fat_ptr.rs:117:24: 117:29
        _19 = std::ops::Range::<usize> { start: const 0_usize, end: const 1_usize }; // scope 2 at ui/mir/mir_raw_fat_ptr.rs:117:30: 117:34
        _17 = <[u8; 5] as Index<std::ops::Range<usize>>>::index(move _18, move _19) -> [return: bb3, unwind: bb23]; // scope 2 at ui/mir/mir_raw_fat_ptr.rs:117:24: 117:35
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:117:24: 117:35
                                         // + literal: Const { ty: for<'a> fn(&'a [u8; 5], std::ops::Range<usize>) -> &'a <[u8; 5] as Index<std::ops::Range<usize>>>::Output {<[u8; 5] as Index<std::ops::Range<usize>>>::index}, val: Value(<ZST>) }
    }

    bb3: {
        _16 = _17;                       // scope 2 at ui/mir/mir_raw_fat_ptr.rs:117:23: 117:35
        _15 = &raw const (*_16);         // scope 2 at ui/mir/mir_raw_fat_ptr.rs:117:23: 117:35
        _22 = &_1;                       // scope 2 at ui/mir/mir_raw_fat_ptr.rs:117:37: 117:43
        _21 = &raw const (*_22);         // scope 2 at ui/mir/mir_raw_fat_ptr.rs:117:37: 117:43
        _20 = move _21 as *const [u8] (Pointer(Unsize)); // scope 2 at ui/mir/mir_raw_fat_ptr.rs:117:37: 117:43
        _26 = &_1;                       // scope 2 at ui/mir/mir_raw_fat_ptr.rs:117:46: 117:51
        _27 = const RangeFrom::<usize> {{ start: 1_usize }}; // scope 2 at ui/mir/mir_raw_fat_ptr.rs:117:52: 117:55
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:117:52: 117:55
                                         // + literal: Const { ty: RangeFrom<usize>, val: Value(Scalar(0x0000000000000001)) }
        _25 = <[u8; 5] as Index<RangeFrom<usize>>>::index(move _26, move _27) -> [return: bb4, unwind: bb23]; // scope 2 at ui/mir/mir_raw_fat_ptr.rs:117:46: 117:56
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:117:46: 117:56
                                         // + literal: Const { ty: for<'a> fn(&'a [u8; 5], RangeFrom<usize>) -> &'a <[u8; 5] as Index<RangeFrom<usize>>>::Output {<[u8; 5] as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb4: {
        _24 = _25;                       // scope 2 at ui/mir/mir_raw_fat_ptr.rs:117:45: 117:56
        _23 = &raw const (*_24);         // scope 2 at ui/mir/mir_raw_fat_ptr.rs:117:45: 117:56
        _131 = (((_9.0: std::ptr::Unique<[*const [u8]; 4]>).0: std::ptr::NonNull<[*const [u8]; 4]>).0: *const [*const [u8]; 4]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_131) = [move _10, move _15, move _20, move _23]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _5 = move _9;                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _4 = move _5 as std::boxed::Box<[*const [u8]]> (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = slice::<impl [*const [u8]]>::into_vec::<std::alloc::Global>(move _4) -> bb5; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[*const [u8]]>) -> Vec<*const [u8]> {slice::<impl [*const [u8]]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb5: {
        _32 = &_1;                       // scope 3 at ui/mir/mir_raw_fat_ptr.rs:120:22: 120:28
        _31 = &raw const (*_32);         // scope 3 at ui/mir/mir_raw_fat_ptr.rs:120:22: 120:28
        _30 = move _31 as *const [u8] (Pointer(Unsize)); // scope 3 at ui/mir/mir_raw_fat_ptr.rs:120:22: 120:28
        _29 = move _30 as *const u8 (PtrToPtr); // scope 3 at ui/mir/mir_raw_fat_ptr.rs:120:22: 120:56
        _28 = move _29 as usize (PointerExposeAddress); // scope 3 at ui/mir/mir_raw_fat_ptr.rs:120:22: 120:65
        _37 = &_2;                       // scope 5 at ui/mir/mir_raw_fat_ptr.rs:121:23: 121:30
        _36 = &raw const (*_37);         // scope 5 at ui/mir/mir_raw_fat_ptr.rs:121:23: 121:30
        _35 = move _36 as *const [u8] (Pointer(Unsize)); // scope 5 at ui/mir/mir_raw_fat_ptr.rs:121:23: 121:30
        _34 = move _35 as *const u8 (PtrToPtr); // scope 5 at ui/mir/mir_raw_fat_ptr.rs:121:23: 121:58
        _33 = move _34 as usize (PointerExposeAddress); // scope 5 at ui/mir/mir_raw_fat_ptr.rs:121:23: 121:67
        _39 = _33;                       // scope 6 at ui/mir/mir_raw_fat_ptr.rs:122:8: 122:19
        _40 = _28;                       // scope 6 at ui/mir/mir_raw_fat_ptr.rs:122:22: 122:32
        _38 = Lt(move _39, move _40);    // scope 6 at ui/mir/mir_raw_fat_ptr.rs:122:8: 122:32
        switchInt(move _38) -> [0: bb7, otherwise: bb6]; // scope 6 at ui/mir/mir_raw_fat_ptr.rs:122:8: 122:32
    }

    bb6: {
        _42 = &mut _3;                   // scope 6 at ui/mir/mir_raw_fat_ptr.rs:123:9: 123:32
        _45 = &_2;                       // scope 6 at ui/mir/mir_raw_fat_ptr.rs:123:24: 123:31
        _44 = &raw const (*_45);         // scope 6 at ui/mir/mir_raw_fat_ptr.rs:123:24: 123:31
        _43 = move _44 as *const [u8] (Pointer(Unsize)); // scope 6 at ui/mir/mir_raw_fat_ptr.rs:123:24: 123:31
        _41 = Vec::<*const [u8]>::insert(move _42, const 0_usize, move _43) -> [return: bb24, unwind: bb21]; // scope 6 at ui/mir/mir_raw_fat_ptr.rs:123:9: 123:32
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:123:14: 123:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<*const [u8]>, usize, *const [u8]) {Vec::<*const [u8]>::insert}, val: Value(<ZST>) }
    }

    bb7: {
        _47 = &mut _3;                   // scope 6 at ui/mir/mir_raw_fat_ptr.rs:125:9: 125:27
        _50 = &_2;                       // scope 6 at ui/mir/mir_raw_fat_ptr.rs:125:19: 125:26
        _49 = &raw const (*_50);         // scope 6 at ui/mir/mir_raw_fat_ptr.rs:125:19: 125:26
        _48 = move _49 as *const [u8] (Pointer(Unsize)); // scope 6 at ui/mir/mir_raw_fat_ptr.rs:125:19: 125:26
        _46 = Vec::<*const [u8]>::push(move _47, move _48) -> [return: bb25, unwind: bb21]; // scope 6 at ui/mir/mir_raw_fat_ptr.rs:125:9: 125:27
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:125:14: 125:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<*const [u8]>, *const [u8]) {Vec::<*const [u8]>::push}, val: Value(<ZST>) }
    }

    bb8: {
        _55 = &_3;                       // scope 6 at ui/mir/mir_raw_fat_ptr.rs:127:20: 127:25
        _54 = _55;                       // scope 6 at ui/mir/mir_raw_fat_ptr.rs:127:20: 127:25
        _53 = <Vec<*const [u8]> as Deref>::deref(move _54) -> [return: bb9, unwind: bb21]; // scope 6 at ui/mir/mir_raw_fat_ptr.rs:127:20: 127:25
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:127:20: 127:25
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<*const [u8]>) -> &'a <Vec<*const [u8]> as Deref>::Target {<Vec<*const [u8]> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _52 = _53;                       // scope 6 at ui/mir/mir_raw_fat_ptr.rs:127:20: 127:25
        _56 = compare_au8 as fn(*const [u8], *const [u8]) -> ComparisonResults (Pointer(ReifyFnPointer)); // scope 6 at ui/mir/mir_raw_fat_ptr.rs:127:27: 127:38
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:127:27: 127:38
                                         // + literal: Const { ty: fn(*const [u8], *const [u8]) -> ComparisonResults {compare_au8}, val: Value(<ZST>) }
        _51 = assert_inorder::<*const [u8]>(move _52, move _56) -> [return: bb10, unwind: bb21]; // scope 6 at ui/mir/mir_raw_fat_ptr.rs:127:5: 127:39
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:127:5: 127:19
                                         // + literal: Const { ty: for<'a> fn(&'a [*const [u8]], fn(*const [u8], *const [u8]) -> ComparisonResults) {assert_inorder::<*const [u8]>}, val: Value(<ZST>) }
    }

    bb10: {
        _57 = (const 0_u8, const 1_u8);  // scope 6 at ui/mir/mir_raw_fat_ptr.rs:129:15: 129:25
        _58 = (const 4_u32, const 5_u32); // scope 7 at ui/mir/mir_raw_fat_ptr.rs:130:16: 130:28
        _65 = &_57;                      // scope 8 at ui/mir/mir_raw_fat_ptr.rs:134:9: 134:13
        _64 = &raw const (*_65);         // scope 8 at ui/mir/mir_raw_fat_ptr.rs:134:9: 134:13
        _63 = move _64 as *const dyn Foo (Pointer(Unsize)); // scope 8 at ui/mir/mir_raw_fat_ptr.rs:134:9: 134:13
        _68 = &(_57.0: u8);              // scope 8 at ui/mir/mir_raw_fat_ptr.rs:134:15: 134:21
        _67 = &raw const (*_68);         // scope 8 at ui/mir/mir_raw_fat_ptr.rs:134:15: 134:21
        _66 = move _67 as *const dyn Foo (Pointer(Unsize)); // scope 8 at ui/mir/mir_raw_fat_ptr.rs:134:15: 134:21
        _71 = &_58;                      // scope 8 at ui/mir/mir_raw_fat_ptr.rs:135:9: 135:14
        _70 = &raw const (*_71);         // scope 8 at ui/mir/mir_raw_fat_ptr.rs:135:9: 135:14
        _69 = move _70 as *const dyn Foo (Pointer(Unsize)); // scope 8 at ui/mir/mir_raw_fat_ptr.rs:135:9: 135:14
        _74 = &(_58.0: u32);             // scope 8 at ui/mir/mir_raw_fat_ptr.rs:135:16: 135:23
        _73 = &raw const (*_74);         // scope 8 at ui/mir/mir_raw_fat_ptr.rs:135:16: 135:23
        _72 = move _73 as *const dyn Foo (Pointer(Unsize)); // scope 8 at ui/mir/mir_raw_fat_ptr.rs:135:16: 135:23
        _62 = [move _63, move _66, move _69, move _72]; // scope 8 at ui/mir/mir_raw_fat_ptr.rs:133:43: 136:6
        _61 = &mut _62;                  // scope 8 at ui/mir/mir_raw_fat_ptr.rs:133:38: 136:6
        _60 = &mut (*_61);               // scope 8 at ui/mir/mir_raw_fat_ptr.rs:133:38: 136:6
        _59 = move _60 as &mut [*const dyn Foo] (Pointer(Unsize)); // scope 8 at ui/mir/mir_raw_fat_ptr.rs:133:38: 136:6
        _76 = &mut (*_59);               // scope 9 at ui/mir/mir_raw_fat_ptr.rs:137:5: 141:7
        _75 = slice::<impl [*const dyn Foo]>::sort_by::<[closure@ui/mir/mir_raw_fat_ptr.rs:137:17: 137:22]>(move _76, move _77) -> [return: bb11, unwind: bb21]; // scope 9 at ui/mir/mir_raw_fat_ptr.rs:137:5: 141:7
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:137:9: 137:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut [*const dyn Foo], [closure@ui/mir/mir_raw_fat_ptr.rs:137:17: 137:22]) {slice::<impl [*const dyn Foo]>::sort_by::<[closure@ui/mir/mir_raw_fat_ptr.rs:137:17: 137:22]>}, val: Value(<ZST>) }
    }

    bb11: {
        _79 = &(*_59);                   // scope 9 at ui/mir/mir_raw_fat_ptr.rs:142:20: 142:23
        _80 = compare_foo as for<'a> fn(*const (dyn Foo + 'a), *const (dyn Foo + 'a)) -> ComparisonResults (Pointer(ReifyFnPointer)); // scope 9 at ui/mir/mir_raw_fat_ptr.rs:142:25: 142:36
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:142:25: 142:36
                                         // + literal: Const { ty: for<'a> fn(*const (dyn Foo + 'a), *const (dyn Foo + 'a)) -> ComparisonResults {compare_foo}, val: Value(<ZST>) }
        _78 = assert_inorder::<*const dyn Foo>(move _79, move _80) -> [return: bb12, unwind: bb21]; // scope 9 at ui/mir/mir_raw_fat_ptr.rs:142:5: 142:37
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:142:5: 142:19
                                         // + literal: Const { ty: for<'a> fn(&'a [*const dyn Foo], fn(*const dyn Foo, *const dyn Foo) -> ComparisonResults) {assert_inorder::<*const dyn Foo>}, val: Value(<ZST>) }
    }

    bb12: {
        _83 = [const 8_u8, const 9_u8];  // scope 9 at ui/mir/mir_raw_fat_ptr.rs:148:14: 148:20
        _82 = S::<[u8; 2]>(const 7_u32, move _83); // scope 9 at ui/mir/mir_raw_fat_ptr.rs:148:9: 148:21
        _85 = [const 11_u8, const 12_u8, const 13_u8]; // scope 9 at ui/mir/mir_raw_fat_ptr.rs:149:15: 149:27
        _84 = S::<[u8; 3]>(const 10_u32, move _85); // scope 9 at ui/mir/mir_raw_fat_ptr.rs:149:9: 149:28
        _87 = [const 5_u8, const 6_u8];  // scope 9 at ui/mir/mir_raw_fat_ptr.rs:150:14: 150:20
        _86 = S::<[u8; 2]>(const 4_u32, move _87); // scope 9 at ui/mir/mir_raw_fat_ptr.rs:150:9: 150:21
        _81 = (move _82, move _84, move _86); // scope 9 at ui/mir/mir_raw_fat_ptr.rs:147:28: 151:6
        _95 = &(_81.0: S<[u8; 2]>);      // scope 10 at ui/mir/mir_raw_fat_ptr.rs:153:9: 153:14
        _94 = &raw const (*_95);         // scope 10 at ui/mir/mir_raw_fat_ptr.rs:153:9: 153:14
        _93 = move _94 as *const S<[u8]> (Pointer(Unsize)); // scope 10 at ui/mir/mir_raw_fat_ptr.rs:153:9: 153:14
        _98 = &(_81.1: S<[u8; 3]>);      // scope 10 at ui/mir/mir_raw_fat_ptr.rs:154:9: 154:14
        _97 = &raw const (*_98);         // scope 10 at ui/mir/mir_raw_fat_ptr.rs:154:9: 154:14
        _96 = move _97 as *const S<[u8]> (Pointer(Unsize)); // scope 10 at ui/mir/mir_raw_fat_ptr.rs:154:9: 154:14
        _101 = &(_81.2: S<[u8; 2]>);     // scope 10 at ui/mir/mir_raw_fat_ptr.rs:155:9: 155:14
        _100 = &raw const (*_101);       // scope 10 at ui/mir/mir_raw_fat_ptr.rs:155:9: 155:14
        _99 = move _100 as *const S<[u8]> (Pointer(Unsize)); // scope 10 at ui/mir/mir_raw_fat_ptr.rs:155:9: 155:14
        _92 = [move _93, move _96, move _99]; // scope 10 at ui/mir/mir_raw_fat_ptr.rs:152:21: 156:14
        _91 = &_92;                      // scope 10 at ui/mir/mir_raw_fat_ptr.rs:152:20: 156:14
        _90 = _91;                       // scope 10 at ui/mir/mir_raw_fat_ptr.rs:152:20: 156:14
        _89 = move _90 as &[*const S<[u8]>] (Pointer(Unsize)); // scope 10 at ui/mir/mir_raw_fat_ptr.rs:152:20: 156:14
        _102 = compare_su8 as fn(*const S<[u8]>, *const S<[u8]>) -> ComparisonResults (Pointer(ReifyFnPointer)); // scope 10 at ui/mir/mir_raw_fat_ptr.rs:156:16: 156:27
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:156:16: 156:27
                                         // + literal: Const { ty: fn(*const S<[u8]>, *const S<[u8]>) -> ComparisonResults {compare_su8}, val: Value(<ZST>) }
        _88 = assert_inorder::<*const S<[u8]>>(move _89, move _102) -> [return: bb13, unwind: bb21]; // scope 10 at ui/mir/mir_raw_fat_ptr.rs:152:5: 156:28
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:152:5: 152:19
                                         // + literal: Const { ty: for<'a> fn(&'a [*const S<[u8]>], fn(*const S<[u8]>, *const S<[u8]>) -> ComparisonResults) {assert_inorder::<*const S<[u8]>>}, val: Value(<ZST>) }
    }

    bb13: {
        _129 = const _;                  // scope 10 at ui/mir/mir_raw_fat_ptr.rs:158:23: 158:27
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:158:23: 158:27
                                         // + literal: Const { ty: &u8, val: Unevaluated(main_ref, [], Some(promoted[3])) }
        _108 = _129;                     // scope 10 at ui/mir/mir_raw_fat_ptr.rs:158:23: 158:27
        _107 = &raw const (*_108);       // scope 10 at ui/mir/mir_raw_fat_ptr.rs:158:23: 158:27
        _106 = move _107 as *const dyn Foo (Pointer(Unsize)); // scope 10 at ui/mir/mir_raw_fat_ptr.rs:158:23: 158:27
        _105 = _106;                     // scope 10 at ui/mir/mir_raw_fat_ptr.rs:158:23: 158:39
        _128 = const _;                  // scope 10 at ui/mir/mir_raw_fat_ptr.rs:158:41: 158:45
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:158:41: 158:45
                                         // + literal: Const { ty: &u8, val: Unevaluated(main_ref, [], Some(promoted[2])) }
        _112 = _128;                     // scope 10 at ui/mir/mir_raw_fat_ptr.rs:158:41: 158:45
        _111 = &raw const (*_112);       // scope 10 at ui/mir/mir_raw_fat_ptr.rs:158:41: 158:45
        _110 = move _111 as *const dyn Foo (Pointer(Unsize)); // scope 10 at ui/mir/mir_raw_fat_ptr.rs:158:41: 158:45
        _109 = _110;                     // scope 10 at ui/mir/mir_raw_fat_ptr.rs:158:41: 158:57
        _104 = simple_eq(move _105, move _109) -> [return: bb14, unwind: bb21]; // scope 10 at ui/mir/mir_raw_fat_ptr.rs:158:13: 158:58
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:158:13: 158:22
                                         // + literal: Const { ty: for<'a> fn(*const (dyn Foo + 'a), *const (dyn Foo + 'a)) -> bool {simple_eq}, val: Value(<ZST>) }
    }

    bb14: {
        _103 = Not(move _104);           // scope 10 at ui/mir/mir_raw_fat_ptr.rs:158:5: 158:59
        switchInt(move _103) -> [0: bb16, otherwise: bb15]; // scope 10 at ui/mir/mir_raw_fat_ptr.rs:158:5: 158:59
    }

    bb15: {
        _113 = core::panicking::panic(const "assertion failed: simple_eq(&0u8 as *const _, &0u8 as *const _)") -> bb21; // scope 10 at ui/mir/mir_raw_fat_ptr.rs:158:5: 158:59
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:158:5: 158:59
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb16: {
        _127 = const _;                  // scope 10 at ui/mir/mir_raw_fat_ptr.rs:159:24: 159:28
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:159:24: 159:28
                                         // + literal: Const { ty: &u8, val: Unevaluated(main_ref, [], Some(promoted[1])) }
        _120 = _127;                     // scope 10 at ui/mir/mir_raw_fat_ptr.rs:159:24: 159:28
        _119 = &raw const (*_120);       // scope 10 at ui/mir/mir_raw_fat_ptr.rs:159:24: 159:28
        _118 = move _119 as *const dyn Foo (Pointer(Unsize)); // scope 10 at ui/mir/mir_raw_fat_ptr.rs:159:24: 159:28
        _117 = _118;                     // scope 10 at ui/mir/mir_raw_fat_ptr.rs:159:24: 159:40
        _126 = const _;                  // scope 10 at ui/mir/mir_raw_fat_ptr.rs:159:42: 159:46
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:159:42: 159:46
                                         // + literal: Const { ty: &u8, val: Unevaluated(main_ref, [], Some(promoted[0])) }
        _124 = _126;                     // scope 10 at ui/mir/mir_raw_fat_ptr.rs:159:42: 159:46
        _123 = &raw const (*_124);       // scope 10 at ui/mir/mir_raw_fat_ptr.rs:159:42: 159:46
        _122 = move _123 as *const dyn Foo (Pointer(Unsize)); // scope 10 at ui/mir/mir_raw_fat_ptr.rs:159:42: 159:46
        _121 = _122;                     // scope 10 at ui/mir/mir_raw_fat_ptr.rs:159:42: 159:58
        _116 = simple_eq(move _117, move _121) -> [return: bb17, unwind: bb21]; // scope 10 at ui/mir/mir_raw_fat_ptr.rs:159:14: 159:59
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:159:14: 159:23
                                         // + literal: Const { ty: for<'a> fn(*const (dyn Foo + 'a), *const (dyn Foo + 'a)) -> bool {simple_eq}, val: Value(<ZST>) }
    }

    bb17: {
        _115 = Not(move _116);           // scope 10 at ui/mir/mir_raw_fat_ptr.rs:159:13: 159:59
        _114 = Not(move _115);           // scope 10 at ui/mir/mir_raw_fat_ptr.rs:159:5: 159:60
        switchInt(move _114) -> [0: bb19, otherwise: bb18]; // scope 10 at ui/mir/mir_raw_fat_ptr.rs:159:5: 159:60
    }

    bb18: {
        _125 = core::panicking::panic(const "assertion failed: !simple_eq(&0u8 as *const _, &1u8 as *const _)") -> bb21; // scope 10 at ui/mir/mir_raw_fat_ptr.rs:159:5: 159:60
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:159:5: 159:60
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb19: {
        drop(_3) -> bb20;                // scope 2 at ui/mir/mir_raw_fat_ptr.rs:160:1: 160:2
    }

    bb20: {
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:160:2: 160:2
    }

    bb21 (cleanup): {
        drop(_3) -> bb22;                // scope 2 at ui/mir/mir_raw_fat_ptr.rs:160:1: 160:2
    }

    bb22 (cleanup): {
        resume;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:109:1: 160:2
    }

    bb23 (cleanup): {
        _130 = alloc::alloc::box_free::<[*const [u8]; 4], std::alloc::Global>(move (_9.0: std::ptr::Unique<[*const [u8]; 4]>), move (_9.1: std::alloc::Global)) -> bb22; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[*const [u8]; 4]>, std::alloc::Global) {alloc::alloc::box_free::<[*const [u8]; 4], std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb24: {
        goto -> bb8;                     // scope 6 at ui/mir/mir_raw_fat_ptr.rs:123:9: 123:32
    }

    bb25: {
        goto -> bb8;                     // scope 6 at ui/mir/mir_raw_fat_ptr.rs:125:9: 125:27
    }
}

promoted[0] in main_ref: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:42: 159:46
    let mut _1: u8;                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:43: 159:46

    bb0: {
        _1 = const 1_u8;                 // scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:43: 159:46
        _0 = &_1;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:42: 159:46
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:42: 159:46
    }
}

promoted[1] in main_ref: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:24: 159:28
    let mut _1: u8;                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:25: 159:28

    bb0: {
        _1 = const 0_u8;                 // scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:25: 159:28
        _0 = &_1;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:24: 159:28
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:159:24: 159:28
    }
}

promoted[2] in main_ref: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:41: 158:45
    let mut _1: u8;                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:42: 158:45

    bb0: {
        _1 = const 0_u8;                 // scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:42: 158:45
        _0 = &_1;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:41: 158:45
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:41: 158:45
    }
}

promoted[3] in main_ref: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:23: 158:27
    let mut _1: u8;                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:24: 158:27

    bb0: {
        _1 = const 0_u8;                 // scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:24: 158:27
        _0 = &_1;                        // scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:23: 158:27
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:158:23: 158:27
    }
}

fn main_ref::{closure#0}(_1: &mut [closure@ui/mir/mir_raw_fat_ptr.rs:137:17: 137:22], _2: &*const dyn Foo, _3: &*const dyn Foo) -> std::cmp::Ordering {
    debug u => _2;                       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:137:18: 137:19
    debug v => _3;                       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:137:20: 137:21
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:137:23: 137:23
    let _4: [*const (); 2];              // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:138:13: 138:14
    let mut _5: *const dyn Foo;          // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:138:58: 138:60
    let mut _7: *const dyn Foo;          // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:139:58: 139:60
    let mut _8: &[*const (); 2];         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:140:9: 140:18
    let mut _9: &[*const (); 2];         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:140:15: 140:17
    let _10: &[*const (); 2];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:140:15: 140:17
    scope 1 {
        debug u => _4;                   // in scope 1 at ui/mir/mir_raw_fat_ptr.rs:138:13: 138:14
        let _6: [*const (); 2];          // in scope 1 at ui/mir/mir_raw_fat_ptr.rs:139:13: 139:14
        scope 3 {
            debug v => _6;               // in scope 3 at ui/mir/mir_raw_fat_ptr.rs:139:13: 139:14
        }
        scope 4 {
        }
    }
    scope 2 {
    }

    bb0: {
        _5 = (*_2);                      // scope 2 at ui/mir/mir_raw_fat_ptr.rs:138:58: 138:60
        _4 = transmute::<*const dyn Foo, [*const (); 2]>(move _5) -> bb1; // scope 2 at ui/mir/mir_raw_fat_ptr.rs:138:43: 138:61
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:138:43: 138:57
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(*const dyn Foo) -> [*const (); 2] {transmute::<*const dyn Foo, [*const (); 2]>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = (*_3);                      // scope 4 at ui/mir/mir_raw_fat_ptr.rs:139:58: 139:60
        _6 = transmute::<*const dyn Foo, [*const (); 2]>(move _7) -> bb2; // scope 4 at ui/mir/mir_raw_fat_ptr.rs:139:43: 139:61
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:139:43: 139:57
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(*const dyn Foo) -> [*const (); 2] {transmute::<*const dyn Foo, [*const (); 2]>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &_4;                        // scope 3 at ui/mir/mir_raw_fat_ptr.rs:140:9: 140:18
        _10 = &_6;                       // scope 3 at ui/mir/mir_raw_fat_ptr.rs:140:15: 140:17
        _9 = _10;                        // scope 3 at ui/mir/mir_raw_fat_ptr.rs:140:15: 140:17
        _0 = <[*const (); 2] as Ord>::cmp(move _8, move _9) -> bb3; // scope 3 at ui/mir/mir_raw_fat_ptr.rs:140:9: 140:18
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:140:11: 140:14
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [*const (); 2], &'b [*const (); 2]) -> std::cmp::Ordering {<[*const (); 2] as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:141:6: 141:6
    }
}

main_ref::{closure#0}::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:138:29: 138:30

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/mir/mir_raw_fat_ptr.rs:138:29: 138:30
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:138:29: 138:30
    }
}

main_ref::{closure#0}::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:139:29: 139:30

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/mir/mir_raw_fat_ptr.rs:139:29: 139:30
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:139:29: 139:30
    }
}

main_ref::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:145:21: 145:22

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/mir/mir_raw_fat_ptr.rs:145:21: 145:22
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:145:21: 145:22
    }
}

main_ref::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:146:21: 146:22

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/mir/mir_raw_fat_ptr.rs:146:21: 146:22
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:146:21: 146:22
    }
}

main_ref::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:147:21: 147:22

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/mir/mir_raw_fat_ptr.rs:147:21: 147:22
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:147:21: 147:22
    }
}

fn main_raw() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:163:15: 163:15
    let _1: [u8; 5];                     // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:164:9: 164:14
    let mut _4: std::boxed::Box<[*const [u8]]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: std::boxed::Box<[*const [u8]; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: std::boxed::Box<[*const [u8]; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:171:9: 171:31
    let _11: &[u8];                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:171:20: 171:31
    let mut _12: &[u8; 5];               // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:171:20: 171:25
    let mut _13: std::ops::Range<usize>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:171:26: 171:30
    let mut _14: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:171:33: 171:55
    let _15: &[u8];                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:171:44: 171:55
    let mut _16: &[u8; 5];               // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:171:44: 171:49
    let mut _17: std::ops::Range<usize>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:171:50: 171:54
    let mut _18: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:171:57: 171:73
    let mut _19: *const [u8; 5];         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:171:57: 171:73
    let mut _20: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:171:75: 171:96
    let _21: &[u8];                      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:171:86: 171:96
    let mut _22: &[u8; 5];               // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:171:86: 171:91
    let mut _23: std::ops::RangeFrom<usize>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:171:92: 171:95
    let mut _25: *const u8;              // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:174:22: 174:51
    let mut _26: *const [u8; 5];         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:174:22: 174:38
    let mut _28: *const u8;              // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:175:23: 175:53
    let mut _29: *const [u8; 5];         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:175:23: 175:40
    let mut _30: bool;                   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:176:8: 176:32
    let mut _31: usize;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:176:8: 176:19
    let mut _32: usize;                  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:176:22: 176:32
    let _33: ();                         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:177:9: 177:42
    let mut _34: &mut std::vec::Vec<*const [u8]>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:177:9: 177:42
    let mut _35: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:177:24: 177:41
    let mut _36: *const [u8; 5];         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:177:24: 177:41
    let _37: ();                         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:179:9: 179:37
    let mut _38: &mut std::vec::Vec<*const [u8]>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:179:9: 179:37
    let mut _39: *const [u8];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:179:19: 179:36
    let mut _40: *const [u8; 5];         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:179:19: 179:36
    let _41: ();                         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:181:5: 181:39
    let mut _42: &[*const [u8]];         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:181:20: 181:25
    let _43: &[*const [u8]];             // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:181:20: 181:25
    let mut _44: &std::vec::Vec<*const [u8]>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:181:20: 181:25
    let _45: &std::vec::Vec<*const [u8]>; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:181:20: 181:25
    let mut _46: fn(*const [u8], *const [u8]) -> ComparisonResults; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:181:27: 181:38
    let mut _50: &mut [*const dyn Foo; 4]; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:187:38: 190:6
    let mut _51: &mut [*const dyn Foo; 4]; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:187:38: 190:6
    let mut _52: [*const dyn Foo; 4];    // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:187:43: 190:6
    let mut _53: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:188:9: 188:23
    let mut _54: *const (u8, u8);        // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:188:9: 188:23
    let mut _55: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:188:25: 188:41
    let mut _56: *const u8;              // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:188:25: 188:41
    let mut _57: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:189:9: 189:24
    let mut _58: *const (u32, u32);      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:189:9: 189:24
    let mut _59: *const dyn Foo;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:189:26: 189:43
    let mut _60: *const u32;             // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:189:26: 189:43
    let _61: ();                         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:191:5: 195:7
    let mut _62: &mut [*const dyn Foo];  // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:191:5: 195:7
    let mut _63: [closure@ui/mir/mir_raw_fat_ptr.rs:191:17: 191:22]; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:191:17: 195:6
    let _64: ();                         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:196:5: 196:37
    let mut _65: &[*const dyn Foo];      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:196:20: 196:23
    let mut _66: for<'a> fn(*const (dyn Foo + 'a), *const (dyn Foo + 'a)) -> ComparisonResults; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:196:25: 196:36
    let mut _68: S<[u8; 2]>;             // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:202:9: 202:21
    let mut _69: [u8; 2];                // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:202:14: 202:20
    let mut _70: S<[u8; 3]>;             // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:203:9: 203:28
    let mut _71: [u8; 3];                // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:203:15: 203:27
    let mut _72: S<[u8; 2]>;             // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:204:9: 204:21
    let mut _73: [u8; 2];                // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:204:14: 204:20
    let _74: ();                         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:206:5: 210:28
    let mut _75: &[*const S<[u8]>];      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:206:20: 210:14
    let mut _76: &[*const S<[u8]>; 3];   // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:206:20: 210:14
    let _77: &[*const S<[u8]>; 3];       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:206:20: 210:14
    let _78: [*const S<[u8]>; 3];        // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:206:21: 210:14
    let mut _79: *const S<[u8]>;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:207:9: 207:42
    let mut _80: *const S<[u8; 2]>;      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:207:9: 207:24
    let mut _81: *const S<[u8]>;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:208:9: 208:42
    let mut _82: *const S<[u8; 3]>;      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:208:9: 208:24
    let mut _83: *const S<[u8]>;         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:209:9: 209:42
    let mut _84: *const S<[u8; 2]>;      // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:209:9: 209:24
    let mut _85: fn(*const S<[u8]>, *const S<[u8]>) -> ComparisonResults; // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:210:16: 210:27
    let mut _86: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _87: *const [*const [u8]; 4]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug array => _1;               // in scope 1 at ui/mir/mir_raw_fat_ptr.rs:164:9: 164:14
        let _2: [u8; 5];                 // in scope 1 at ui/mir/mir_raw_fat_ptr.rs:165:9: 165:15
        scope 2 {
            debug array2 => _2;          // in scope 2 at ui/mir/mir_raw_fat_ptr.rs:165:9: 165:15
            let mut _3: std::vec::Vec<*const [u8]>; // in scope 2 at ui/mir/mir_raw_fat_ptr.rs:170:9: 170:17
            scope 3 {
                debug ptrs => _3;        // in scope 3 at ui/mir/mir_raw_fat_ptr.rs:170:9: 170:17
                let _24: usize;          // in scope 3 at ui/mir/mir_raw_fat_ptr.rs:174:9: 174:19
                scope 5 {
                    debug array_addr => _24; // in scope 5 at ui/mir/mir_raw_fat_ptr.rs:174:9: 174:19
                    let _27: usize;      // in scope 5 at ui/mir/mir_raw_fat_ptr.rs:175:9: 175:20
                    scope 6 {
                        debug array2_addr => _27; // in scope 6 at ui/mir/mir_raw_fat_ptr.rs:175:9: 175:20
                        let _47: (u8, u8); // in scope 6 at ui/mir/mir_raw_fat_ptr.rs:183:9: 183:12
                        scope 7 {
                            debug u8_ => _47; // in scope 7 at ui/mir/mir_raw_fat_ptr.rs:183:9: 183:12
                            let _48: (u32, u32); // in scope 7 at ui/mir/mir_raw_fat_ptr.rs:184:9: 184:13
                            scope 8 {
                                debug u32_ => _48; // in scope 8 at ui/mir/mir_raw_fat_ptr.rs:184:9: 184:13
                                let _49: &mut [*const dyn Foo]; // in scope 8 at ui/mir/mir_raw_fat_ptr.rs:187:9: 187:12
                                scope 9 {
                                    debug buf => _49; // in scope 9 at ui/mir/mir_raw_fat_ptr.rs:187:9: 187:12
                                    let _67: (S<[u8; 2]>, S<[u8; 3]>, S<[u8; 2]>); // in scope 9 at ui/mir/mir_raw_fat_ptr.rs:199:9: 199:11
                                    scope 10 {
                                        debug ss => _67; // in scope 10 at ui/mir/mir_raw_fat_ptr.rs:199:9: 199:11
                                    }
                                }
                            }
                        }
                    }
                }
            }
            scope 4 {
            }
        }
    }

    bb0: {
        _1 = [const 0_u8, const 1_u8, const 2_u8, const 3_u8, const 4_u8]; // scope 0 at ui/mir/mir_raw_fat_ptr.rs:164:17: 164:28
        _2 = [const 5_u8, const 6_u8, const 7_u8, const 8_u8, const 9_u8]; // scope 1 at ui/mir/mir_raw_fat_ptr.rs:165:18: 165:29
        _6 = const 64_usize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = const 8_usize;              // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _8 = alloc::alloc::exchange_malloc(move _6, move _7) -> bb1; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = ShallowInitBox(move _8, [*const [u8]; 4]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _12 = &_1;                       // scope 2 at ui/mir/mir_raw_fat_ptr.rs:171:20: 171:25
        _13 = std::ops::Range::<usize> { start: const 0_usize, end: const 0_usize }; // scope 2 at ui/mir/mir_raw_fat_ptr.rs:171:26: 171:30
        _11 = <[u8; 5] as Index<std::ops::Range<usize>>>::index(move _12, move _13) -> [return: bb2, unwind: bb17]; // scope 2 at ui/mir/mir_raw_fat_ptr.rs:171:20: 171:31
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:171:20: 171:31
                                         // + literal: Const { ty: for<'a> fn(&'a [u8; 5], std::ops::Range<usize>) -> &'a <[u8; 5] as Index<std::ops::Range<usize>>>::Output {<[u8; 5] as Index<std::ops::Range<usize>>>::index}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = &raw const (*_11);         // scope 2 at ui/mir/mir_raw_fat_ptr.rs:171:9: 171:31
        _16 = &_1;                       // scope 2 at ui/mir/mir_raw_fat_ptr.rs:171:44: 171:49
        _17 = std::ops::Range::<usize> { start: const 0_usize, end: const 1_usize }; // scope 2 at ui/mir/mir_raw_fat_ptr.rs:171:50: 171:54
        _15 = <[u8; 5] as Index<std::ops::Range<usize>>>::index(move _16, move _17) -> [return: bb3, unwind: bb17]; // scope 2 at ui/mir/mir_raw_fat_ptr.rs:171:44: 171:55
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:171:44: 171:55
                                         // + literal: Const { ty: for<'a> fn(&'a [u8; 5], std::ops::Range<usize>) -> &'a <[u8; 5] as Index<std::ops::Range<usize>>>::Output {<[u8; 5] as Index<std::ops::Range<usize>>>::index}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = &raw const (*_15);         // scope 2 at ui/mir/mir_raw_fat_ptr.rs:171:33: 171:55
        _19 = &raw const _1;             // scope 2 at ui/mir/mir_raw_fat_ptr.rs:171:57: 171:73
        _18 = move _19 as *const [u8] (Pointer(Unsize)); // scope 2 at ui/mir/mir_raw_fat_ptr.rs:171:57: 171:73
        _22 = &_1;                       // scope 2 at ui/mir/mir_raw_fat_ptr.rs:171:86: 171:91
        _23 = const RangeFrom::<usize> {{ start: 1_usize }}; // scope 2 at ui/mir/mir_raw_fat_ptr.rs:171:92: 171:95
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:171:92: 171:95
                                         // + literal: Const { ty: RangeFrom<usize>, val: Value(Scalar(0x0000000000000001)) }
        _21 = <[u8; 5] as Index<RangeFrom<usize>>>::index(move _22, move _23) -> [return: bb4, unwind: bb17]; // scope 2 at ui/mir/mir_raw_fat_ptr.rs:171:86: 171:96
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:171:86: 171:96
                                         // + literal: Const { ty: for<'a> fn(&'a [u8; 5], RangeFrom<usize>) -> &'a <[u8; 5] as Index<RangeFrom<usize>>>::Output {<[u8; 5] as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb4: {
        _20 = &raw const (*_21);         // scope 2 at ui/mir/mir_raw_fat_ptr.rs:171:75: 171:96
        _87 = (((_9.0: std::ptr::Unique<[*const [u8]; 4]>).0: std::ptr::NonNull<[*const [u8]; 4]>).0: *const [*const [u8]; 4]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_87) = [move _10, move _14, move _18, move _20]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _5 = move _9;                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _4 = move _5 as std::boxed::Box<[*const [u8]]> (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = slice::<impl [*const [u8]]>::into_vec::<std::alloc::Global>(move _4) -> bb5; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[*const [u8]]>) -> Vec<*const [u8]> {slice::<impl [*const [u8]]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb5: {
        _26 = &raw const _1;             // scope 3 at ui/mir/mir_raw_fat_ptr.rs:174:22: 174:38
        _25 = move _26 as *const u8 (PtrToPtr); // scope 3 at ui/mir/mir_raw_fat_ptr.rs:174:22: 174:51
        _24 = move _25 as usize (PointerExposeAddress); // scope 3 at ui/mir/mir_raw_fat_ptr.rs:174:22: 174:60
        _29 = &raw const _2;             // scope 5 at ui/mir/mir_raw_fat_ptr.rs:175:23: 175:40
        _28 = move _29 as *const u8 (PtrToPtr); // scope 5 at ui/mir/mir_raw_fat_ptr.rs:175:23: 175:53
        _27 = move _28 as usize (PointerExposeAddress); // scope 5 at ui/mir/mir_raw_fat_ptr.rs:175:23: 175:62
        _31 = _27;                       // scope 6 at ui/mir/mir_raw_fat_ptr.rs:176:8: 176:19
        _32 = _24;                       // scope 6 at ui/mir/mir_raw_fat_ptr.rs:176:22: 176:32
        _30 = Lt(move _31, move _32);    // scope 6 at ui/mir/mir_raw_fat_ptr.rs:176:8: 176:32
        switchInt(move _30) -> [0: bb7, otherwise: bb6]; // scope 6 at ui/mir/mir_raw_fat_ptr.rs:176:8: 176:32
    }

    bb6: {
        _34 = &mut _3;                   // scope 6 at ui/mir/mir_raw_fat_ptr.rs:177:9: 177:42
        _36 = &raw const _2;             // scope 6 at ui/mir/mir_raw_fat_ptr.rs:177:24: 177:41
        _35 = move _36 as *const [u8] (Pointer(Unsize)); // scope 6 at ui/mir/mir_raw_fat_ptr.rs:177:24: 177:41
        _33 = Vec::<*const [u8]>::insert(move _34, const 0_usize, move _35) -> [return: bb18, unwind: bb15]; // scope 6 at ui/mir/mir_raw_fat_ptr.rs:177:9: 177:42
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:177:14: 177:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<*const [u8]>, usize, *const [u8]) {Vec::<*const [u8]>::insert}, val: Value(<ZST>) }
    }

    bb7: {
        _38 = &mut _3;                   // scope 6 at ui/mir/mir_raw_fat_ptr.rs:179:9: 179:37
        _40 = &raw const _2;             // scope 6 at ui/mir/mir_raw_fat_ptr.rs:179:19: 179:36
        _39 = move _40 as *const [u8] (Pointer(Unsize)); // scope 6 at ui/mir/mir_raw_fat_ptr.rs:179:19: 179:36
        _37 = Vec::<*const [u8]>::push(move _38, move _39) -> [return: bb19, unwind: bb15]; // scope 6 at ui/mir/mir_raw_fat_ptr.rs:179:9: 179:37
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:179:14: 179:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<*const [u8]>, *const [u8]) {Vec::<*const [u8]>::push}, val: Value(<ZST>) }
    }

    bb8: {
        _45 = &_3;                       // scope 6 at ui/mir/mir_raw_fat_ptr.rs:181:20: 181:25
        _44 = _45;                       // scope 6 at ui/mir/mir_raw_fat_ptr.rs:181:20: 181:25
        _43 = <Vec<*const [u8]> as Deref>::deref(move _44) -> [return: bb9, unwind: bb15]; // scope 6 at ui/mir/mir_raw_fat_ptr.rs:181:20: 181:25
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:181:20: 181:25
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<*const [u8]>) -> &'a <Vec<*const [u8]> as Deref>::Target {<Vec<*const [u8]> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _42 = _43;                       // scope 6 at ui/mir/mir_raw_fat_ptr.rs:181:20: 181:25
        _46 = compare_au8 as fn(*const [u8], *const [u8]) -> ComparisonResults (Pointer(ReifyFnPointer)); // scope 6 at ui/mir/mir_raw_fat_ptr.rs:181:27: 181:38
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:181:27: 181:38
                                         // + literal: Const { ty: fn(*const [u8], *const [u8]) -> ComparisonResults {compare_au8}, val: Value(<ZST>) }
        _41 = assert_inorder::<*const [u8]>(move _42, move _46) -> [return: bb10, unwind: bb15]; // scope 6 at ui/mir/mir_raw_fat_ptr.rs:181:5: 181:39
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:181:5: 181:19
                                         // + literal: Const { ty: for<'a> fn(&'a [*const [u8]], fn(*const [u8], *const [u8]) -> ComparisonResults) {assert_inorder::<*const [u8]>}, val: Value(<ZST>) }
    }

    bb10: {
        _47 = (const 0_u8, const 1_u8);  // scope 6 at ui/mir/mir_raw_fat_ptr.rs:183:15: 183:25
        _48 = (const 4_u32, const 5_u32); // scope 7 at ui/mir/mir_raw_fat_ptr.rs:184:16: 184:28
        _54 = &raw const _47;            // scope 8 at ui/mir/mir_raw_fat_ptr.rs:188:9: 188:23
        _53 = move _54 as *const dyn Foo (Pointer(Unsize)); // scope 8 at ui/mir/mir_raw_fat_ptr.rs:188:9: 188:23
        _56 = &raw const (_47.0: u8);    // scope 8 at ui/mir/mir_raw_fat_ptr.rs:188:25: 188:41
        _55 = move _56 as *const dyn Foo (Pointer(Unsize)); // scope 8 at ui/mir/mir_raw_fat_ptr.rs:188:25: 188:41
        _58 = &raw const _48;            // scope 8 at ui/mir/mir_raw_fat_ptr.rs:189:9: 189:24
        _57 = move _58 as *const dyn Foo (Pointer(Unsize)); // scope 8 at ui/mir/mir_raw_fat_ptr.rs:189:9: 189:24
        _60 = &raw const (_48.0: u32);   // scope 8 at ui/mir/mir_raw_fat_ptr.rs:189:26: 189:43
        _59 = move _60 as *const dyn Foo (Pointer(Unsize)); // scope 8 at ui/mir/mir_raw_fat_ptr.rs:189:26: 189:43
        _52 = [move _53, move _55, move _57, move _59]; // scope 8 at ui/mir/mir_raw_fat_ptr.rs:187:43: 190:6
        _51 = &mut _52;                  // scope 8 at ui/mir/mir_raw_fat_ptr.rs:187:38: 190:6
        _50 = &mut (*_51);               // scope 8 at ui/mir/mir_raw_fat_ptr.rs:187:38: 190:6
        _49 = move _50 as &mut [*const dyn Foo] (Pointer(Unsize)); // scope 8 at ui/mir/mir_raw_fat_ptr.rs:187:38: 190:6
        _62 = &mut (*_49);               // scope 9 at ui/mir/mir_raw_fat_ptr.rs:191:5: 195:7
        _61 = slice::<impl [*const dyn Foo]>::sort_by::<[closure@ui/mir/mir_raw_fat_ptr.rs:191:17: 191:22]>(move _62, move _63) -> [return: bb11, unwind: bb15]; // scope 9 at ui/mir/mir_raw_fat_ptr.rs:191:5: 195:7
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:191:9: 191:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut [*const dyn Foo], [closure@ui/mir/mir_raw_fat_ptr.rs:191:17: 191:22]) {slice::<impl [*const dyn Foo]>::sort_by::<[closure@ui/mir/mir_raw_fat_ptr.rs:191:17: 191:22]>}, val: Value(<ZST>) }
    }

    bb11: {
        _65 = &(*_49);                   // scope 9 at ui/mir/mir_raw_fat_ptr.rs:196:20: 196:23
        _66 = compare_foo as for<'a> fn(*const (dyn Foo + 'a), *const (dyn Foo + 'a)) -> ComparisonResults (Pointer(ReifyFnPointer)); // scope 9 at ui/mir/mir_raw_fat_ptr.rs:196:25: 196:36
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:196:25: 196:36
                                         // + literal: Const { ty: for<'a> fn(*const (dyn Foo + 'a), *const (dyn Foo + 'a)) -> ComparisonResults {compare_foo}, val: Value(<ZST>) }
        _64 = assert_inorder::<*const dyn Foo>(move _65, move _66) -> [return: bb12, unwind: bb15]; // scope 9 at ui/mir/mir_raw_fat_ptr.rs:196:5: 196:37
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:196:5: 196:19
                                         // + literal: Const { ty: for<'a> fn(&'a [*const dyn Foo], fn(*const dyn Foo, *const dyn Foo) -> ComparisonResults) {assert_inorder::<*const dyn Foo>}, val: Value(<ZST>) }
    }

    bb12: {
        _69 = [const 8_u8, const 9_u8];  // scope 9 at ui/mir/mir_raw_fat_ptr.rs:202:14: 202:20
        _68 = S::<[u8; 2]>(const 7_u32, move _69); // scope 9 at ui/mir/mir_raw_fat_ptr.rs:202:9: 202:21
        _71 = [const 11_u8, const 12_u8, const 13_u8]; // scope 9 at ui/mir/mir_raw_fat_ptr.rs:203:15: 203:27
        _70 = S::<[u8; 3]>(const 10_u32, move _71); // scope 9 at ui/mir/mir_raw_fat_ptr.rs:203:9: 203:28
        _73 = [const 5_u8, const 6_u8];  // scope 9 at ui/mir/mir_raw_fat_ptr.rs:204:14: 204:20
        _72 = S::<[u8; 2]>(const 4_u32, move _73); // scope 9 at ui/mir/mir_raw_fat_ptr.rs:204:9: 204:21
        _67 = (move _68, move _70, move _72); // scope 9 at ui/mir/mir_raw_fat_ptr.rs:201:28: 205:6
        _80 = &raw const (_67.0: S<[u8; 2]>); // scope 10 at ui/mir/mir_raw_fat_ptr.rs:207:9: 207:24
        _79 = move _80 as *const S<[u8]> (Pointer(Unsize)); // scope 10 at ui/mir/mir_raw_fat_ptr.rs:207:9: 207:24
        _82 = &raw const (_67.1: S<[u8; 3]>); // scope 10 at ui/mir/mir_raw_fat_ptr.rs:208:9: 208:24
        _81 = move _82 as *const S<[u8]> (Pointer(Unsize)); // scope 10 at ui/mir/mir_raw_fat_ptr.rs:208:9: 208:24
        _84 = &raw const (_67.2: S<[u8; 2]>); // scope 10 at ui/mir/mir_raw_fat_ptr.rs:209:9: 209:24
        _83 = move _84 as *const S<[u8]> (Pointer(Unsize)); // scope 10 at ui/mir/mir_raw_fat_ptr.rs:209:9: 209:24
        _78 = [move _79, move _81, move _83]; // scope 10 at ui/mir/mir_raw_fat_ptr.rs:206:21: 210:14
        _77 = &_78;                      // scope 10 at ui/mir/mir_raw_fat_ptr.rs:206:20: 210:14
        _76 = _77;                       // scope 10 at ui/mir/mir_raw_fat_ptr.rs:206:20: 210:14
        _75 = move _76 as &[*const S<[u8]>] (Pointer(Unsize)); // scope 10 at ui/mir/mir_raw_fat_ptr.rs:206:20: 210:14
        _85 = compare_su8 as fn(*const S<[u8]>, *const S<[u8]>) -> ComparisonResults (Pointer(ReifyFnPointer)); // scope 10 at ui/mir/mir_raw_fat_ptr.rs:210:16: 210:27
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:210:16: 210:27
                                         // + literal: Const { ty: fn(*const S<[u8]>, *const S<[u8]>) -> ComparisonResults {compare_su8}, val: Value(<ZST>) }
        _74 = assert_inorder::<*const S<[u8]>>(move _75, move _85) -> [return: bb13, unwind: bb15]; // scope 10 at ui/mir/mir_raw_fat_ptr.rs:206:5: 210:28
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:206:5: 206:19
                                         // + literal: Const { ty: for<'a> fn(&'a [*const S<[u8]>], fn(*const S<[u8]>, *const S<[u8]>) -> ComparisonResults) {assert_inorder::<*const S<[u8]>>}, val: Value(<ZST>) }
    }

    bb13: {
        drop(_3) -> bb14;                // scope 2 at ui/mir/mir_raw_fat_ptr.rs:211:1: 211:2
    }

    bb14: {
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:211:2: 211:2
    }

    bb15 (cleanup): {
        drop(_3) -> bb16;                // scope 2 at ui/mir/mir_raw_fat_ptr.rs:211:1: 211:2
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:163:1: 211:2
    }

    bb17 (cleanup): {
        _86 = alloc::alloc::box_free::<[*const [u8]; 4], std::alloc::Global>(move (_9.0: std::ptr::Unique<[*const [u8]; 4]>), move (_9.1: std::alloc::Global)) -> bb16; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[*const [u8]; 4]>, std::alloc::Global) {alloc::alloc::box_free::<[*const [u8]; 4], std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb18: {
        goto -> bb8;                     // scope 6 at ui/mir/mir_raw_fat_ptr.rs:177:9: 177:42
    }

    bb19: {
        goto -> bb8;                     // scope 6 at ui/mir/mir_raw_fat_ptr.rs:179:9: 179:37
    }
}

fn main_raw::{closure#0}(_1: &mut [closure@ui/mir/mir_raw_fat_ptr.rs:191:17: 191:22], _2: &*const dyn Foo, _3: &*const dyn Foo) -> std::cmp::Ordering {
    debug u => _2;                       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:191:18: 191:19
    debug v => _3;                       // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:191:20: 191:21
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:191:23: 191:23
    let _4: [*const (); 2];              // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:192:13: 192:14
    let mut _5: *const dyn Foo;          // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:192:58: 192:60
    let mut _7: *const dyn Foo;          // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:193:58: 193:60
    let mut _8: &[*const (); 2];         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:194:9: 194:18
    let mut _9: &[*const (); 2];         // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:194:15: 194:17
    let _10: &[*const (); 2];            // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:194:15: 194:17
    scope 1 {
        debug u => _4;                   // in scope 1 at ui/mir/mir_raw_fat_ptr.rs:192:13: 192:14
        let _6: [*const (); 2];          // in scope 1 at ui/mir/mir_raw_fat_ptr.rs:193:13: 193:14
        scope 3 {
            debug v => _6;               // in scope 3 at ui/mir/mir_raw_fat_ptr.rs:193:13: 193:14
        }
        scope 4 {
        }
    }
    scope 2 {
    }

    bb0: {
        _5 = (*_2);                      // scope 2 at ui/mir/mir_raw_fat_ptr.rs:192:58: 192:60
        _4 = transmute::<*const dyn Foo, [*const (); 2]>(move _5) -> bb1; // scope 2 at ui/mir/mir_raw_fat_ptr.rs:192:43: 192:61
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:192:43: 192:57
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(*const dyn Foo) -> [*const (); 2] {transmute::<*const dyn Foo, [*const (); 2]>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = (*_3);                      // scope 4 at ui/mir/mir_raw_fat_ptr.rs:193:58: 193:60
        _6 = transmute::<*const dyn Foo, [*const (); 2]>(move _7) -> bb2; // scope 4 at ui/mir/mir_raw_fat_ptr.rs:193:43: 193:61
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:193:43: 193:57
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(*const dyn Foo) -> [*const (); 2] {transmute::<*const dyn Foo, [*const (); 2]>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &_4;                        // scope 3 at ui/mir/mir_raw_fat_ptr.rs:194:9: 194:18
        _10 = &_6;                       // scope 3 at ui/mir/mir_raw_fat_ptr.rs:194:15: 194:17
        _9 = _10;                        // scope 3 at ui/mir/mir_raw_fat_ptr.rs:194:15: 194:17
        _0 = <[*const (); 2] as Ord>::cmp(move _8, move _9) -> bb3; // scope 3 at ui/mir/mir_raw_fat_ptr.rs:194:9: 194:18
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:194:11: 194:14
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [*const (); 2], &'b [*const (); 2]) -> std::cmp::Ordering {<[*const (); 2] as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:195:6: 195:6
    }
}

main_raw::{closure#0}::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:192:29: 192:30

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/mir/mir_raw_fat_ptr.rs:192:29: 192:30
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:192:29: 192:30
    }
}

main_raw::{closure#0}::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:193:29: 193:30

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/mir/mir_raw_fat_ptr.rs:193:29: 193:30
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:193:29: 193:30
    }
}

main_raw::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:199:21: 199:22

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/mir/mir_raw_fat_ptr.rs:199:21: 199:22
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:199:21: 199:22
    }
}

main_raw::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:200:21: 200:22

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/mir/mir_raw_fat_ptr.rs:200:21: 200:22
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:200:21: 200:22
    }
}

main_raw::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:201:21: 201:22

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/mir/mir_raw_fat_ptr.rs:201:21: 201:22
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:201:21: 201:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:213:11: 213:11
    let _1: ();                          // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:214:5: 214:15
    let _2: ();                          // in scope 0 at ui/mir/mir_raw_fat_ptr.rs:215:5: 215:15

    bb0: {
        _1 = main_ref() -> bb1;          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:214:5: 214:15
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:214:5: 214:13
                                         // + literal: Const { ty: fn() {main_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = main_raw() -> bb2;          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:215:5: 215:15
                                         // mir::Constant
                                         // + span: ui/mir/mir_raw_fat_ptr.rs:215:5: 215:13
                                         // + literal: Const { ty: fn() {main_raw}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:216:2: 216:2
    }
}

fn S(_1: u32, _2: T) -> S<T> {
    let mut _0: S<T>;                    // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:107:1: 107:19

    bb0: {
        _0 = S::<T>(move _1, move _2);   // scope 0 at ui/mir/mir_raw_fat_ptr.rs:107:1: 107:19
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:107:1: 107:19
    }
}

// MIR FOR CTFE
fn S(_1: u32, _2: T) -> S<T> {
    let mut _0: S<T>;                    // return place in scope 0 at ui/mir/mir_raw_fat_ptr.rs:107:1: 107:19

    bb0: {
        _0 = S::<T>(move _1, move _2);   // scope 0 at ui/mir/mir_raw_fat_ptr.rs:107:1: 107:19
        return;                          // scope 0 at ui/mir/mir_raw_fat_ptr.rs:107:1: 107:19
    }
}
