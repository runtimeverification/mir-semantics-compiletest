// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn fat_ptr_project(_1: &Wrapper<[u8]>) -> &[u8] {
    debug a => _1;
    let mut _0: &[u8];

    bb0: {
        _0 = &((*_1).1: [u8]);
        return;
    }
}

fn fat_ptr_simple(_1: &[u8]) -> &[u8] {
    debug a => _1;
    let mut _0: &[u8];

    bb0: {
        _0 = _1;
        return;
    }
}

fn fat_ptr_via_local(_1: &[u8]) -> &[u8] {
    debug a => _1;
    let mut _0: &[u8];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _0 = _1;
        return;
    }
}

fn fat_ptr_from_struct(_1: FatPtrContainer<'_>) -> &[u8] {
    debug s => _1;
    let mut _0: &[u8];

    bb0: {
        _0 = (_1.0: &[u8]);
        return;
    }
}

fn fat_ptr_to_struct(_1: &[u8]) -> FatPtrContainer<'_> {
    debug a => _1;
    let mut _0: FatPtrContainer<'_>;

    bb0: {
        _0 = FatPtrContainer::<'_> { ptr: _1 };
        return;
    }
}

fn fat_ptr_store_to(_1: &[u8], _2: &mut &[u8]) -> () {
    debug a => _1;
    debug b => _2;
    let mut _0: ();

    bb0: {
        (*_2) = _1;
        return;
    }
}

fn fat_ptr_constant() -> &str {
    let mut _0: &str;

    bb0: {
        _0 = const "HELLO";
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Wrapper<[u8; 3]>;
    let mut _2: [u8; 3];
    let mut _4: &Wrapper<[u8]>;
    let _5: &Wrapper<[u8; 3]>;
    let mut _7: &[u8];
    let mut _9: &[u8];
    let mut _11: FatPtrContainer<'_>;
    let mut _12: &[u8];
    let _14: ();
    let mut _15: &[u8];
    let mut _16: &mut &[u8];
    let mut _17: (&&[u8], &&[u8; 3]);
    let mut _18: &&[u8];
    let mut _19: &&[u8; 3];
    let _20: &[u8; 3];
    let mut _23: bool;
    let mut _24: bool;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&&str, &&str);
    let mut _29: &&str;
    let _30: &str;
    let mut _33: bool;
    let mut _34: bool;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let _3: &[u8];
        scope 2 {
            debug p => _3;
            let _6: &[u8];
            scope 3 {
                debug p => _6;
                let _8: &[u8];
                scope 4 {
                    debug p => _8;
                    let _10: &[u8];
                    scope 5 {
                        debug p => _10;
                        let mut _13: &[u8];
                        let mut _39: &[u8; 1];
                        scope 6 {
                            debug target => _13;
                            let _21: &&[u8];
                            let _22: &&[u8; 3];
                            let _31: &&str;
                            let _32: &&str;
                            let mut _38: &&str;
                            scope 7 {
                                debug left_val => _21;
                                debug right_val => _22;
                                let _25: core::panicking::AssertKind;
                                scope 8 {
                                    debug kind => _25;
                                }
                            }
                            scope 9 {
                                debug left_val => _31;
                                debug right_val => _32;
                                let _35: core::panicking::AssertKind;
                                scope 10 {
                                    debug kind => _35;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = [const 7_u8, const 6_u8, const 5_u8];
        _1 = Wrapper::<[u8; 3]>(const 4_u32, move _2);
        _5 = &_1;
        _4 = _5 as &Wrapper<[u8]> (Pointer(Unsize));
        _3 = fat_ptr_project(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = _3;
        _6 = fat_ptr_simple(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = _6;
        _8 = fat_ptr_via_local(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        _12 = _8;
        _11 = fat_ptr_to_struct(move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = fat_ptr_from_struct(move _11) -> [return: bb5, unwind continue];
    }

    bb5: {
        _39 = const _;
        _13 = _39 as &[u8] (Pointer(Unsize));
        _15 = _10;
        _16 = &mut _13;
        _14 = fat_ptr_store_to(move _15, _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        _18 = &_13;
        _20 = &(_1.1: [u8; 3]);
        _19 = &_20;
        _17 = (move _18, move _19);
        _21 = (_17.0: &&[u8]);
        _22 = (_17.1: &&[u8; 3]);
        _24 = <&[u8] as PartialEq<&[u8; 3]>>::eq(_21, _22) -> [return: bb7, unwind continue];
    }

    bb7: {
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<&[u8], &[u8; 3]>(move _25, _21, _22, move _27) -> unwind continue;
    }

    bb9: {
        _30 = fat_ptr_constant() -> [return: bb10, unwind continue];
    }

    bb10: {
        _29 = &_30;
        _38 = const _;
        _28 = (move _29, _38);
        _31 = (_28.0: &&str);
        _32 = (_28.1: &&str);
        _34 = <&str as PartialEq>::eq(_31, _32) -> [return: bb11, unwind continue];
    }

    bb11: {
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<&str, &str>(move _35, _31, _32, move _37) -> unwind continue;
    }

    bb13: {
        return;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "HELLO";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[u8; 1] = {
    let mut _0: &[u8; 1];
    let mut _1: [u8; 1];

    bb0: {
        _1 = [const 42_u8];
        _0 = &_1;
        return;
    }
}

fn Wrapper(_1: u32, _2: T) -> Wrapper<T> {
    let mut _0: Wrapper<T>;

    bb0: {
        _0 = Wrapper::<T>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Wrapper(_1: u32, _2: T) -> Wrapper<T> {
    let mut _0: Wrapper<T>;

    bb0: {
        _0 = Wrapper::<T>(move _1, move _2);
        return;
    }
}
