// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/mir/mir_augmented_assignments.rs:8:10: 8:15>::fmt(_1: &Int, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:8:10: 8:15
    debug f => _2;                       // in scope 0 at ui/mir/mir_augmented_assignments.rs:8:10: 8:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:8:10: 8:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/mir/mir_augmented_assignments.rs:8:10: 8:15
    let mut _4: &str;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:8:10: 8:15
    let _5: &str;                        // in scope 0 at ui/mir/mir_augmented_assignments.rs:8:10: 8:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/mir/mir_augmented_assignments.rs:9:12: 9:15
    let mut _7: &&i32;                   // in scope 0 at ui/mir/mir_augmented_assignments.rs:9:12: 9:15
    let _8: &&i32;                       // in scope 0 at ui/mir/mir_augmented_assignments.rs:9:12: 9:15
    let _9: &i32;                        // in scope 0 at ui/mir/mir_augmented_assignments.rs:9:12: 9:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/mir/mir_augmented_assignments.rs:8:10: 8:15
        _5 = const "Int";                // scope 0 at ui/mir/mir_augmented_assignments.rs:8:10: 8:15
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:8:10: 8:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/mir/mir_augmented_assignments.rs:8:10: 8:15
        _9 = &((*_1).0: i32);            // scope 0 at ui/mir/mir_augmented_assignments.rs:9:12: 9:15
        _8 = &_9;                        // scope 0 at ui/mir/mir_augmented_assignments.rs:9:12: 9:15
        _7 = _8;                         // scope 0 at ui/mir/mir_augmented_assignments.rs:9:12: 9:15
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/mir/mir_augmented_assignments.rs:9:12: 9:15
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/mir/mir_augmented_assignments.rs:8:10: 8:15
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:8:10: 8:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:8:15: 8:15
    }
}

fn <impl at ui/mir/mir_augmented_assignments.rs:8:17: 8:26>::eq(_1: &Int, _2: &Int) -> bool {
    debug self => _1;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:8:17: 8:26
    debug other => _2;                   // in scope 0 at ui/mir/mir_augmented_assignments.rs:8:17: 8:26
    let mut _0: bool;                    // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:8:17: 8:26
    let mut _3: i32;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:9:12: 9:15
    let mut _4: i32;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:9:12: 9:15

    bb0: {
        _3 = ((*_1).0: i32);             // scope 0 at ui/mir/mir_augmented_assignments.rs:9:12: 9:15
        _4 = ((*_2).0: i32);             // scope 0 at ui/mir/mir_augmented_assignments.rs:9:12: 9:15
        _0 = Eq(move _3, move _4);       // scope 0 at ui/mir/mir_augmented_assignments.rs:9:12: 9:15
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:8:26: 8:26
    }
}

fn <impl at ui/mir/mir_augmented_assignments.rs:13:1: 13:11>::new(_1: &mut [i32]) -> &mut Slice {
    debug slice => _1;                   // in scope 0 at ui/mir/mir_augmented_assignments.rs:14:12: 14:17
    let mut _0: &mut Slice;              // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:14:34: 14:44
    let mut _2: &mut Slice;              // in scope 0 at ui/mir/mir_augmented_assignments.rs:15:9: 17:10
    let mut _3: &mut Slice;              // in scope 0 at ui/mir/mir_augmented_assignments.rs:16:13: 16:34
    let mut _4: &mut [i32];              // in scope 0 at ui/mir/mir_augmented_assignments.rs:16:28: 16:33
    scope 1 {
    }

    bb0: {
        _4 = move _1;                    // scope 1 at ui/mir/mir_augmented_assignments.rs:16:28: 16:33
        _3 = transmute::<&mut [i32], &mut Slice>(move _4) -> bb1; // scope 1 at ui/mir/mir_augmented_assignments.rs:16:13: 16:34
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:16:13: 16:27
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&mut [i32]) -> &mut Slice {transmute::<&mut [i32], &mut Slice>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &mut (*_3);                 // scope 0 at ui/mir/mir_augmented_assignments.rs:16:13: 16:34
        _0 = &mut (*_2);                 // scope 0 at ui/mir/mir_augmented_assignments.rs:15:9: 17:10
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:18:6: 18:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:21:11: 21:11
    let _1: ();                          // in scope 0 at ui/mir/mir_augmented_assignments.rs:22:5: 22:15

    bb0: {
        _1 = main_mir() -> bb1;          // scope 0 at ui/mir/mir_augmented_assignments.rs:22:5: 22:15
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:22:5: 22:13
                                         // + literal: Const { ty: fn() {main_mir}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:23:2: 23:2
    }
}

fn main_mir() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:25:15: 25:15
    let mut _1: Int;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:26:9: 26:14
    let _2: ();                          // in scope 0 at ui/mir/mir_augmented_assignments.rs:28:5: 28:16
    let mut _3: &mut Int;                // in scope 0 at ui/mir/mir_augmented_assignments.rs:28:5: 28:6
    let mut _4: Int;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:28:10: 28:16
    let mut _5: (&Int, &Int);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &Int;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _7: &Int;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &Int;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &Int;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _22: ();                         // in scope 0 at ui/mir/mir_augmented_assignments.rs:31:5: 31:19
    let mut _23: &mut Int;               // in scope 0 at ui/mir/mir_augmented_assignments.rs:31:5: 31:6
    let mut _24: Int;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:31:10: 31:19
    let mut _25: (&Int, &Int);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _26: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _27: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _32: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _33: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _35: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _36: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _37: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _38: &Int;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _39: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _40: &Int;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _42: ();                         // in scope 0 at ui/mir/mir_augmented_assignments.rs:34:5: 34:19
    let mut _43: &mut Int;               // in scope 0 at ui/mir/mir_augmented_assignments.rs:34:5: 34:6
    let mut _44: Int;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:34:10: 34:19
    let mut _45: (&Int, &Int);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _46: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _47: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _50: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _51: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _52: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _53: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _55: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _56: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _57: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _58: &Int;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _59: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _60: &Int;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _62: ();                         // in scope 0 at ui/mir/mir_augmented_assignments.rs:37:5: 37:19
    let mut _63: &mut Int;               // in scope 0 at ui/mir/mir_augmented_assignments.rs:37:5: 37:6
    let mut _64: Int;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:37:10: 37:19
    let mut _65: (&Int, &Int);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _66: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _67: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _70: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _71: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _72: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _73: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _75: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _76: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _77: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _78: &Int;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _79: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _80: &Int;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _81: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _82: ();                         // in scope 0 at ui/mir/mir_augmented_assignments.rs:40:5: 40:16
    let mut _83: &mut Int;               // in scope 0 at ui/mir/mir_augmented_assignments.rs:40:5: 40:6
    let mut _84: Int;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:40:10: 40:16
    let mut _85: (&Int, &Int);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _86: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _87: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _90: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _91: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _92: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _93: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _95: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _96: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _97: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _98: &Int;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _99: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _100: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _101: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _102: ();                        // in scope 0 at ui/mir/mir_augmented_assignments.rs:43:5: 43:16
    let mut _103: &mut Int;              // in scope 0 at ui/mir/mir_augmented_assignments.rs:43:5: 43:6
    let mut _104: Int;                   // in scope 0 at ui/mir/mir_augmented_assignments.rs:43:10: 43:16
    let mut _105: (&Int, &Int);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _106: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _107: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _110: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _111: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _112: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _113: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _115: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _116: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _117: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _118: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _119: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _120: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _121: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _122: ();                        // in scope 0 at ui/mir/mir_augmented_assignments.rs:46:5: 46:16
    let mut _123: &mut Int;              // in scope 0 at ui/mir/mir_augmented_assignments.rs:46:5: 46:6
    let mut _124: Int;                   // in scope 0 at ui/mir/mir_augmented_assignments.rs:46:10: 46:16
    let mut _125: (&Int, &Int);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _126: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _127: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _130: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _131: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _132: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _133: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _135: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _136: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _137: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _138: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _139: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _140: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _141: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _142: ();                        // in scope 0 at ui/mir/mir_augmented_assignments.rs:50:5: 50:14
    let mut _143: &mut Int;              // in scope 0 at ui/mir/mir_augmented_assignments.rs:50:5: 50:6
    let mut _144: (&Int, &Int);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _145: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _146: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _149: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _150: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _151: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _152: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _154: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _155: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _156: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _157: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _158: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _159: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _160: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _161: ();                        // in scope 0 at ui/mir/mir_augmented_assignments.rs:53:5: 53:15
    let mut _162: &mut Int;              // in scope 0 at ui/mir/mir_augmented_assignments.rs:53:5: 53:6
    let mut _163: (&Int, &Int);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _164: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _165: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _168: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _169: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _170: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _171: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _173: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _174: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _175: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _176: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _177: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _178: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _179: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _180: ();                        // in scope 0 at ui/mir/mir_augmented_assignments.rs:56:5: 56:14
    let mut _181: &mut Int;              // in scope 0 at ui/mir/mir_augmented_assignments.rs:56:5: 56:6
    let mut _182: (&Int, &Int);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _183: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _184: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _187: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _188: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _189: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _190: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _192: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _193: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _194: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _195: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _196: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _197: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _198: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _199: ();                        // in scope 0 at ui/mir/mir_augmented_assignments.rs:59:5: 59:15
    let mut _200: &mut Int;              // in scope 0 at ui/mir/mir_augmented_assignments.rs:59:5: 59:6
    let mut _201: (&Int, &Int);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _202: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _203: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _206: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _207: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _208: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _209: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _211: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _212: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _213: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _214: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _215: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _216: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _217: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _218: ();                        // in scope 0 at ui/mir/mir_augmented_assignments.rs:62:5: 62:16
    let mut _219: &mut Int;              // in scope 0 at ui/mir/mir_augmented_assignments.rs:62:5: 62:6
    let mut _220: Int;                   // in scope 0 at ui/mir/mir_augmented_assignments.rs:62:10: 62:16
    let mut _221: (&Int, &Int);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _222: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _223: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _226: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _227: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _228: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _229: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _231: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _232: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _233: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _234: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _235: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _236: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _237: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _239: ();                        // in scope 0 at ui/mir/mir_augmented_assignments.rs:68:5: 68:19
    let mut _240: &mut std::vec::Vec<Int>; // in scope 0 at ui/mir/mir_augmented_assignments.rs:68:5: 68:19
    let mut _241: Int;                   // in scope 0 at ui/mir/mir_augmented_assignments.rs:68:12: 68:18
    let _242: ();                        // in scope 0 at ui/mir/mir_augmented_assignments.rs:69:5: 69:19
    let mut _243: &mut std::vec::Vec<Int>; // in scope 0 at ui/mir/mir_augmented_assignments.rs:69:5: 69:19
    let mut _244: Int;                   // in scope 0 at ui/mir/mir_augmented_assignments.rs:69:12: 69:18
    let _245: ();                        // in scope 0 at ui/mir/mir_augmented_assignments.rs:70:5: 70:19
    let mut _246: &mut Int;              // in scope 0 at ui/mir/mir_augmented_assignments.rs:70:5: 70:9
    let mut _247: &mut Int;              // in scope 0 at ui/mir/mir_augmented_assignments.rs:70:5: 70:9
    let mut _248: &mut std::vec::Vec<Int>; // in scope 0 at ui/mir/mir_augmented_assignments.rs:70:5: 70:6
    let mut _249: Int;                   // in scope 0 at ui/mir/mir_augmented_assignments.rs:70:13: 70:19
    let mut _250: (&Int, &Int);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _251: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _252: &Int;                      // in scope 0 at ui/mir/mir_augmented_assignments.rs:71:16: 71:20
    let mut _253: &std::vec::Vec<Int>;   // in scope 0 at ui/mir/mir_augmented_assignments.rs:71:16: 71:17
    let mut _254: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _257: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _258: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _259: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _260: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _262: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _263: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _264: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _265: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _266: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _267: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _268: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _270: ();                        // in scope 0 at ui/mir/mir_augmented_assignments.rs:75:5: 75:33
    let mut _271: &mut Slice;            // in scope 0 at ui/mir/mir_augmented_assignments.rs:75:5: 75:28
    let mut _272: &mut Slice;            // in scope 0 at ui/mir/mir_augmented_assignments.rs:75:6: 75:28
    let mut _273: &mut [i32];            // in scope 0 at ui/mir/mir_augmented_assignments.rs:75:17: 75:27
    let mut _274: &mut [i32; 3];         // in scope 0 at ui/mir/mir_augmented_assignments.rs:75:17: 75:27
    let mut _275: &mut [i32; 3];         // in scope 0 at ui/mir/mir_augmented_assignments.rs:75:17: 75:27
    let mut _276: (&i32, &i32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _277: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _278: usize;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:76:22: 76:23
    let mut _279: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _282: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _283: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _284: i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _285: i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _287: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _288: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _289: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _290: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _291: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _292: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _293: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _294: (&i32, &i32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _295: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _296: usize;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:77:22: 77:23
    let mut _297: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _300: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _301: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _302: i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _303: i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _305: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _306: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _307: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _308: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _309: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _310: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _311: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _312: (&i32, &i32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _313: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _314: usize;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:78:22: 78:23
    let mut _315: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _318: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _319: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _320: i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _321: i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _323: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _324: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _325: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _326: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _327: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _328: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _329: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/mir/mir_augmented_assignments.rs:26:9: 26:14
        let _8: &Int;                    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _9: &Int;                    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _28: &Int;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _29: &Int;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _48: &Int;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _49: &Int;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _68: &Int;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _69: &Int;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _88: &Int;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _89: &Int;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _108: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _109: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _128: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _129: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _147: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _148: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _166: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _167: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _185: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _186: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _204: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _205: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _224: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _225: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _238: std::vec::Vec<Int>; // in scope 1 at ui/mir/mir_augmented_assignments.rs:67:9: 67:14
        let mut _334: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _335: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _336: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _337: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _338: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _339: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _340: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _341: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _342: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _343: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _344: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _345: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _8;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _9;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _14: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _14;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _28;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _29;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _34: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _34;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug left_val => _48;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _49;      // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _54: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 7 {
                debug kind => _54;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 8 {
            debug left_val => _68;       // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _69;      // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _74: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 9 {
                debug kind => _74;       // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 10 {
            debug left_val => _88;       // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _89;      // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _94: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 11 {
                debug kind => _94;       // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 12 {
            debug left_val => _108;      // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _109;     // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _114: core::panicking::AssertKind; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 13 {
                debug kind => _114;      // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 14 {
            debug left_val => _128;      // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _129;     // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _134: core::panicking::AssertKind; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 15 {
                debug kind => _134;      // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 16 {
            debug left_val => _147;      // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _148;     // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _153: core::panicking::AssertKind; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 17 {
                debug kind => _153;      // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 18 {
            debug left_val => _166;      // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _167;     // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _172: core::panicking::AssertKind; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 19 {
                debug kind => _172;      // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 20 {
            debug left_val => _185;      // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _186;     // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _191: core::panicking::AssertKind; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 21 {
                debug kind => _191;      // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 22 {
            debug left_val => _204;      // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _205;     // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _210: core::panicking::AssertKind; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 23 {
                debug kind => _210;      // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 24 {
            debug left_val => _224;      // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _225;     // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _230: core::panicking::AssertKind; // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 25 {
                debug kind => _230;      // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 26 {
            debug v => _238;             // in scope 26 at ui/mir/mir_augmented_assignments.rs:67:9: 67:14
            let _255: &Int;              // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _256: &Int;              // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _269: [i32; 3];      // in scope 26 at ui/mir/mir_augmented_assignments.rs:74:9: 74:18
            let mut _333: &Int;          // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 27 {
                debug left_val => _255;  // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _256; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _261: core::panicking::AssertKind; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 28 {
                    debug kind => _261;  // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 29 {
                debug array => _269;     // in scope 29 at ui/mir/mir_augmented_assignments.rs:74:9: 74:18
                let _280: &i32;          // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _281: &i32;          // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _298: &i32;          // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _299: &i32;          // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _316: &i32;          // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _317: &i32;          // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _330: &i32;      // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _331: &i32;      // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _332: &i32;      // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 30 {
                    debug left_val => _280; // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _281; // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _286: core::panicking::AssertKind; // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 31 {
                        debug kind => _286; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 32 {
                    debug left_val => _298; // in scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _299; // in scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _304: core::panicking::AssertKind; // in scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 33 {
                        debug kind => _304; // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 34 {
                    debug left_val => _316; // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _317; // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _322: core::panicking::AssertKind; // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 35 {
                        debug kind => _322; // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Int(const 1_i32);           // scope 0 at ui/mir/mir_augmented_assignments.rs:26:17: 26:23
        _3 = &mut _1;                    // scope 1 at ui/mir/mir_augmented_assignments.rs:28:5: 28:6
        _4 = const Int(2_i32);           // scope 1 at ui/mir/mir_augmented_assignments.rs:28:10: 28:16
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:28:10: 28:16
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000002)) }
        _2 = <Int as AddAssign>::add_assign(move _3, move _4) -> bb1; // scope 1 at ui/mir/mir_augmented_assignments.rs:28:5: 28:16
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:28:5: 28:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, Int) {<Int as AddAssign>::add_assign}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _345 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main_mir, [], Some(promoted[15])) }
        _7 = _345;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _7);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_5.0: &Int);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_5.1: &Int);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = <Int as PartialEq>::eq(move _12, move _13) -> bb2; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = Not(move _11);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<Int, Int>(move _16, move _17, move _19, move _21); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb4: {
        _23 = &mut _1;                   // scope 1 at ui/mir/mir_augmented_assignments.rs:31:5: 31:6
        _24 = const Int(1_i32);          // scope 1 at ui/mir/mir_augmented_assignments.rs:31:10: 31:19
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:31:10: 31:19
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000001)) }
        _22 = <Int as BitAndAssign>::bitand_assign(move _23, move _24) -> bb5; // scope 1 at ui/mir/mir_augmented_assignments.rs:31:5: 31:19
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:31:5: 31:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, Int) {<Int as BitAndAssign>::bitand_assign}, val: Value(<ZST>) }
    }

    bb5: {
        _26 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _344 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main_mir, [], Some(promoted[14])) }
        _27 = _344;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _25 = (move _26, move _27);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _28 = (_25.0: &Int);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _29 = (_25.1: &Int);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _32 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _33 = _29;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _31 = <Int as PartialEq>::eq(move _32, move _33) -> bb6; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _30 = Not(move _31);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _30) -> [0: bb8, otherwise: bb7]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _34 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _38;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _29;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = _40;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _35 = core::panicking::assert_failed::<Int, Int>(move _36, move _37, move _39, move _41); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb8: {
        _43 = &mut _1;                   // scope 1 at ui/mir/mir_augmented_assignments.rs:34:5: 34:6
        _44 = const Int(2_i32);          // scope 1 at ui/mir/mir_augmented_assignments.rs:34:10: 34:19
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:34:10: 34:19
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000002)) }
        _42 = <Int as BitOrAssign>::bitor_assign(move _43, move _44) -> bb9; // scope 1 at ui/mir/mir_augmented_assignments.rs:34:5: 34:19
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:34:5: 34:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, Int) {<Int as BitOrAssign>::bitor_assign}, val: Value(<ZST>) }
    }

    bb9: {
        _46 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _343 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main_mir, [], Some(promoted[13])) }
        _47 = _343;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _45 = (move _46, move _47);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _48 = (_45.0: &Int);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _49 = (_45.1: &Int);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _52 = _48;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _53 = _49;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _51 = <Int as PartialEq>::eq(move _52, move _53) -> bb10; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _50 = Not(move _51);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _50) -> [0: bb12, otherwise: bb11]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _54 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _56 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = _48;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _58;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _60 = _49;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _59 = _60;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _55 = core::panicking::assert_failed::<Int, Int>(move _56, move _57, move _59, move _61); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb12: {
        _63 = &mut _1;                   // scope 1 at ui/mir/mir_augmented_assignments.rs:37:5: 37:6
        _64 = const Int(1_i32);          // scope 1 at ui/mir/mir_augmented_assignments.rs:37:10: 37:19
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:37:10: 37:19
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000001)) }
        _62 = <Int as BitXorAssign>::bitxor_assign(move _63, move _64) -> bb13; // scope 1 at ui/mir/mir_augmented_assignments.rs:37:5: 37:19
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:37:5: 37:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, Int) {<Int as BitXorAssign>::bitxor_assign}, val: Value(<ZST>) }
    }

    bb13: {
        _66 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _342 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main_mir, [], Some(promoted[12])) }
        _67 = _342;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _65 = (move _66, move _67);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _68 = (_65.0: &Int);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _69 = (_65.1: &Int);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _72 = _68;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _73 = _69;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _71 = <Int as PartialEq>::eq(move _72, move _73) -> bb14; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        _70 = Not(move _71);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _70) -> [0: bb16, otherwise: bb15]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _74 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _76 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _78 = _68;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _77 = _78;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _80 = _69;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _79 = _80;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _81 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _75 = core::panicking::assert_failed::<Int, Int>(move _76, move _77, move _79, move _81); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb16: {
        _83 = &mut _1;                   // scope 1 at ui/mir/mir_augmented_assignments.rs:40:5: 40:6
        _84 = const Int(2_i32);          // scope 1 at ui/mir/mir_augmented_assignments.rs:40:10: 40:16
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:40:10: 40:16
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000002)) }
        _82 = <Int as DivAssign>::div_assign(move _83, move _84) -> bb17; // scope 1 at ui/mir/mir_augmented_assignments.rs:40:5: 40:16
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:40:5: 40:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, Int) {<Int as DivAssign>::div_assign}, val: Value(<ZST>) }
    }

    bb17: {
        _86 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _341 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main_mir, [], Some(promoted[11])) }
        _87 = _341;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _85 = (move _86, move _87);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _88 = (_85.0: &Int);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _89 = (_85.1: &Int);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _92 = _88;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _93 = _89;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _91 = <Int as PartialEq>::eq(move _92, move _93) -> bb18; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        _90 = Not(move _91);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _90) -> [0: bb20, otherwise: bb19]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _94 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _96 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _98 = _88;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _97 = _98;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _100 = _89;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _99 = _100;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _101 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _95 = core::panicking::assert_failed::<Int, Int>(move _96, move _97, move _99, move _101); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb20: {
        _103 = &mut _1;                  // scope 1 at ui/mir/mir_augmented_assignments.rs:43:5: 43:6
        _104 = const Int(3_i32);         // scope 1 at ui/mir/mir_augmented_assignments.rs:43:10: 43:16
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:43:10: 43:16
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000003)) }
        _102 = <Int as MulAssign>::mul_assign(move _103, move _104) -> bb21; // scope 1 at ui/mir/mir_augmented_assignments.rs:43:5: 43:16
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:43:5: 43:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, Int) {<Int as MulAssign>::mul_assign}, val: Value(<ZST>) }
    }

    bb21: {
        _106 = &_1;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _340 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main_mir, [], Some(promoted[10])) }
        _107 = _340;                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _105 = (move _106, move _107);   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _108 = (_105.0: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _109 = (_105.1: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _112 = _108;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _113 = _109;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _111 = <Int as PartialEq>::eq(move _112, move _113) -> bb22; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb22: {
        _110 = Not(move _111);           // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _110) -> [0: bb24, otherwise: bb23]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb23: {
        _114 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _116 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _118 = _108;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _117 = _118;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _120 = _109;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _119 = _120;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _121 = Option::<Arguments<'_>>::None; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _115 = core::panicking::assert_failed::<Int, Int>(move _116, move _117, move _119, move _121); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb24: {
        _123 = &mut _1;                  // scope 1 at ui/mir/mir_augmented_assignments.rs:46:5: 46:6
        _124 = const Int(2_i32);         // scope 1 at ui/mir/mir_augmented_assignments.rs:46:10: 46:16
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:46:10: 46:16
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000002)) }
        _122 = <Int as RemAssign>::rem_assign(move _123, move _124) -> bb25; // scope 1 at ui/mir/mir_augmented_assignments.rs:46:5: 46:16
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:46:5: 46:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, Int) {<Int as RemAssign>::rem_assign}, val: Value(<ZST>) }
    }

    bb25: {
        _126 = &_1;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _339 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main_mir, [], Some(promoted[9])) }
        _127 = _339;                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _125 = (move _126, move _127);   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _128 = (_125.0: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _129 = (_125.1: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _132 = _128;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _133 = _129;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _131 = <Int as PartialEq>::eq(move _132, move _133) -> bb26; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb26: {
        _130 = Not(move _131);           // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _130) -> [0: bb28, otherwise: bb27]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb27: {
        _134 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _136 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _138 = _128;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _137 = _138;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _140 = _129;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _139 = _140;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _141 = Option::<Arguments<'_>>::None; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _135 = core::panicking::assert_failed::<Int, Int>(move _136, move _137, move _139, move _141); // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb28: {
        _143 = &mut _1;                  // scope 1 at ui/mir/mir_augmented_assignments.rs:50:5: 50:6
        _142 = <Int as ShlAssign<u8>>::shl_assign(move _143, const 1_u8) -> bb29; // scope 1 at ui/mir/mir_augmented_assignments.rs:50:5: 50:14
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:50:5: 50:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, u8) {<Int as ShlAssign<u8>>::shl_assign}, val: Value(<ZST>) }
    }

    bb29: {
        _145 = &_1;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _338 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main_mir, [], Some(promoted[8])) }
        _146 = _338;                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _144 = (move _145, move _146);   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _147 = (_144.0: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _148 = (_144.1: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _151 = _147;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _152 = _148;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _150 = <Int as PartialEq>::eq(move _151, move _152) -> bb30; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb30: {
        _149 = Not(move _150);           // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _149) -> [0: bb32, otherwise: bb31]; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb31: {
        _153 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _155 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _157 = _147;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _156 = _157;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _159 = _148;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _158 = _159;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _160 = Option::<Arguments<'_>>::None; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _154 = core::panicking::assert_failed::<Int, Int>(move _155, move _156, move _158, move _160); // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb32: {
        _162 = &mut _1;                  // scope 1 at ui/mir/mir_augmented_assignments.rs:53:5: 53:6
        _161 = <Int as ShlAssign<u16>>::shl_assign(move _162, const 1_u16) -> bb33; // scope 1 at ui/mir/mir_augmented_assignments.rs:53:5: 53:15
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:53:5: 53:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, u16) {<Int as ShlAssign<u16>>::shl_assign}, val: Value(<ZST>) }
    }

    bb33: {
        _164 = &_1;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _337 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main_mir, [], Some(promoted[7])) }
        _165 = _337;                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _163 = (move _164, move _165);   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _166 = (_163.0: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _167 = (_163.1: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _170 = _166;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _171 = _167;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _169 = <Int as PartialEq>::eq(move _170, move _171) -> bb34; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb34: {
        _168 = Not(move _169);           // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _168) -> [0: bb36, otherwise: bb35]; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb35: {
        _172 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _174 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _176 = _166;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _175 = _176;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _178 = _167;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _177 = _178;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _179 = Option::<Arguments<'_>>::None; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _173 = core::panicking::assert_failed::<Int, Int>(move _174, move _175, move _177, move _179); // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb36: {
        _181 = &mut _1;                  // scope 1 at ui/mir/mir_augmented_assignments.rs:56:5: 56:6
        _180 = <Int as ShrAssign<u8>>::shr_assign(move _181, const 1_u8) -> bb37; // scope 1 at ui/mir/mir_augmented_assignments.rs:56:5: 56:14
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:56:5: 56:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, u8) {<Int as ShrAssign<u8>>::shr_assign}, val: Value(<ZST>) }
    }

    bb37: {
        _183 = &_1;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _336 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main_mir, [], Some(promoted[6])) }
        _184 = _336;                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _182 = (move _183, move _184);   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _185 = (_182.0: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _186 = (_182.1: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _189 = _185;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _190 = _186;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _188 = <Int as PartialEq>::eq(move _189, move _190) -> bb38; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb38: {
        _187 = Not(move _188);           // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _187) -> [0: bb40, otherwise: bb39]; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb39: {
        _191 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _193 = const core::panicking::AssertKind::Eq; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _195 = _185;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _194 = _195;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _197 = _186;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _196 = _197;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _198 = Option::<Arguments<'_>>::None; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _192 = core::panicking::assert_failed::<Int, Int>(move _193, move _194, move _196, move _198); // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb40: {
        _200 = &mut _1;                  // scope 1 at ui/mir/mir_augmented_assignments.rs:59:5: 59:6
        _199 = <Int as ShrAssign<u16>>::shr_assign(move _200, const 1_u16) -> bb41; // scope 1 at ui/mir/mir_augmented_assignments.rs:59:5: 59:15
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:59:5: 59:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, u16) {<Int as ShrAssign<u16>>::shr_assign}, val: Value(<ZST>) }
    }

    bb41: {
        _202 = &_1;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _335 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main_mir, [], Some(promoted[5])) }
        _203 = _335;                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _201 = (move _202, move _203);   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _204 = (_201.0: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _205 = (_201.1: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _208 = _204;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _209 = _205;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _207 = <Int as PartialEq>::eq(move _208, move _209) -> bb42; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb42: {
        _206 = Not(move _207);           // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _206) -> [0: bb44, otherwise: bb43]; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb43: {
        _210 = const core::panicking::AssertKind::Eq; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _212 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _214 = _204;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _213 = _214;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _216 = _205;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _215 = _216;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _217 = Option::<Arguments<'_>>::None; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _211 = core::panicking::assert_failed::<Int, Int>(move _212, move _213, move _215, move _217); // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb44: {
        _219 = &mut _1;                  // scope 1 at ui/mir/mir_augmented_assignments.rs:62:5: 62:6
        _220 = const Int(1_i32);         // scope 1 at ui/mir/mir_augmented_assignments.rs:62:10: 62:16
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:62:10: 62:16
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000001)) }
        _218 = <Int as SubAssign>::sub_assign(move _219, move _220) -> bb45; // scope 1 at ui/mir/mir_augmented_assignments.rs:62:5: 62:16
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:62:5: 62:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, Int) {<Int as SubAssign>::sub_assign}, val: Value(<ZST>) }
    }

    bb45: {
        _222 = &_1;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _334 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main_mir, [], Some(promoted[4])) }
        _223 = _334;                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _221 = (move _222, move _223);   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _224 = (_221.0: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _225 = (_221.1: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _228 = _224;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _229 = _225;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _227 = <Int as PartialEq>::eq(move _228, move _229) -> bb46; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb46: {
        _226 = Not(move _227);           // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _226) -> [0: bb48, otherwise: bb47]; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb47: {
        _230 = const core::panicking::AssertKind::Eq; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _232 = const core::panicking::AssertKind::Eq; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _234 = _224;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _233 = _234;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _236 = _225;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _235 = _236;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _237 = Option::<Arguments<'_>>::None; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _231 = core::panicking::assert_failed::<Int, Int>(move _232, move _233, move _235, move _237); // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb48: {
        _238 = Vec::<Int>::new() -> bb49; // scope 1 at ui/mir/mir_augmented_assignments.rs:67:17: 67:27
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:67:17: 67:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<Int> {Vec::<Int>::new}, val: Value(<ZST>) }
    }

    bb49: {
        _240 = &mut _238;                // scope 26 at ui/mir/mir_augmented_assignments.rs:68:5: 68:19
        _241 = const Int(1_i32);         // scope 26 at ui/mir/mir_augmented_assignments.rs:68:12: 68:18
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:68:12: 68:18
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000001)) }
        _239 = Vec::<Int>::push(move _240, move _241) -> [return: bb50, unwind: bb67]; // scope 26 at ui/mir/mir_augmented_assignments.rs:68:5: 68:19
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:68:7: 68:11
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Int>, Int) {Vec::<Int>::push}, val: Value(<ZST>) }
    }

    bb50: {
        _243 = &mut _238;                // scope 26 at ui/mir/mir_augmented_assignments.rs:69:5: 69:19
        _244 = const Int(2_i32);         // scope 26 at ui/mir/mir_augmented_assignments.rs:69:12: 69:18
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:69:12: 69:18
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000002)) }
        _242 = Vec::<Int>::push(move _243, move _244) -> [return: bb51, unwind: bb67]; // scope 26 at ui/mir/mir_augmented_assignments.rs:69:5: 69:19
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:69:7: 69:11
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Int>, Int) {Vec::<Int>::push}, val: Value(<ZST>) }
    }

    bb51: {
        _248 = &mut _238;                // scope 26 at ui/mir/mir_augmented_assignments.rs:70:5: 70:6
        _247 = <Vec<Int> as IndexMut<usize>>::index_mut(move _248, const 0_usize) -> [return: bb52, unwind: bb67]; // scope 26 at ui/mir/mir_augmented_assignments.rs:70:5: 70:9
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:70:5: 70:9
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Int>, usize) -> &'a mut <Vec<Int> as Index<usize>>::Output {<Vec<Int> as IndexMut<usize>>::index_mut}, val: Value(<ZST>) }
    }

    bb52: {
        _246 = &mut (*_247);             // scope 26 at ui/mir/mir_augmented_assignments.rs:70:5: 70:9
        _249 = const Int(2_i32);         // scope 26 at ui/mir/mir_augmented_assignments.rs:70:13: 70:19
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:70:13: 70:19
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000002)) }
        _245 = <Int as AddAssign>::add_assign(move _246, move _249) -> [return: bb53, unwind: bb67]; // scope 26 at ui/mir/mir_augmented_assignments.rs:70:5: 70:19
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:70:5: 70:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, Int) {<Int as AddAssign>::add_assign}, val: Value(<ZST>) }
    }

    bb53: {
        _253 = &_238;                    // scope 26 at ui/mir/mir_augmented_assignments.rs:71:16: 71:17
        _252 = <Vec<Int> as Index<usize>>::index(move _253, const 0_usize) -> [return: bb54, unwind: bb67]; // scope 26 at ui/mir/mir_augmented_assignments.rs:71:16: 71:20
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:71:16: 71:20
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Int>, usize) -> &'a <Vec<Int> as Index<usize>>::Output {<Vec<Int> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb54: {
        _251 = _252;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _333 = const _;                  // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main_mir, [], Some(promoted[3])) }
        _254 = _333;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _250 = (move _251, move _254);   // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _255 = (_250.0: &Int);           // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _256 = (_250.1: &Int);           // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _259 = _255;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _260 = _256;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _258 = <Int as PartialEq>::eq(move _259, move _260) -> [return: bb55, unwind: bb67]; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb55: {
        _257 = Not(move _258);           // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _257) -> [0: bb57, otherwise: bb56]; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb56: {
        _261 = const core::panicking::AssertKind::Eq; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _263 = const core::panicking::AssertKind::Eq; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _265 = _255;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _264 = _265;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _267 = _256;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _266 = _267;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _268 = Option::<Arguments<'_>>::None; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _262 = core::panicking::assert_failed::<Int, Int>(move _263, move _264, move _266, move _268) -> bb67; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb57: {
        _269 = [const 0_i32, const 1_i32, const 2_i32]; // scope 26 at ui/mir/mir_augmented_assignments.rs:74:21: 74:30
        _275 = &mut _269;                // scope 29 at ui/mir/mir_augmented_assignments.rs:75:17: 75:27
        _274 = &mut (*_275);             // scope 29 at ui/mir/mir_augmented_assignments.rs:75:17: 75:27
        _273 = move _274 as &mut [i32] (Pointer(Unsize)); // scope 29 at ui/mir/mir_augmented_assignments.rs:75:17: 75:27
        _272 = Slice::new(move _273) -> [return: bb58, unwind: bb67]; // scope 29 at ui/mir/mir_augmented_assignments.rs:75:6: 75:28
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:75:6: 75:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut [i32]) -> &'a mut Slice {Slice::new}, val: Value(<ZST>) }
    }

    bb58: {
        _271 = &mut (*_272);             // scope 29 at ui/mir/mir_augmented_assignments.rs:75:5: 75:28
        _270 = <Slice as AddAssign<i32>>::add_assign(move _271, const 1_i32) -> [return: bb59, unwind: bb67]; // scope 29 at ui/mir/mir_augmented_assignments.rs:75:5: 75:33
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:75:5: 75:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut Slice, i32) {<Slice as AddAssign<i32>>::add_assign}, val: Value(<ZST>) }
    }

    bb59: {
        _278 = const 0_usize;            // scope 29 at ui/mir/mir_augmented_assignments.rs:76:22: 76:23
        _277 = &_269[_278];              // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _332 = const _;                  // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main_mir, [], Some(promoted[2])) }
        _279 = _332;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _276 = (move _277, move _279);   // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _280 = (_276.0: &i32);           // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _281 = (_276.1: &i32);           // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _284 = (*_280);                  // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _285 = const 1_i32;              // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _283 = Eq(move _284, move _285); // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _282 = Not(move _283);           // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _282) -> [0: bb61, otherwise: bb60]; // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb60: {
        _286 = const core::panicking::AssertKind::Eq; // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _288 = const core::panicking::AssertKind::Eq; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _290 = _280;                     // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _289 = _290;                     // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _292 = _281;                     // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _291 = _292;                     // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _293 = Option::<Arguments<'_>>::None; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _287 = core::panicking::assert_failed::<i32, i32>(move _288, move _289, move _291, move _293) -> bb67; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb61: {
        _296 = const 1_usize;            // scope 29 at ui/mir/mir_augmented_assignments.rs:77:22: 77:23
        _295 = &_269[_296];              // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _331 = const _;                  // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main_mir, [], Some(promoted[1])) }
        _297 = _331;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _294 = (move _295, move _297);   // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _298 = (_294.0: &i32);           // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _299 = (_294.1: &i32);           // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _302 = (*_298);                  // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _303 = const 2_i32;              // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _301 = Eq(move _302, move _303); // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _300 = Not(move _301);           // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _300) -> [0: bb63, otherwise: bb62]; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb62: {
        _304 = const core::panicking::AssertKind::Eq; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _306 = const core::panicking::AssertKind::Eq; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _308 = _298;                     // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _307 = _308;                     // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _310 = _299;                     // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _309 = _310;                     // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _311 = Option::<Arguments<'_>>::None; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _305 = core::panicking::assert_failed::<i32, i32>(move _306, move _307, move _309, move _311) -> bb67; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb63: {
        _314 = const 2_usize;            // scope 29 at ui/mir/mir_augmented_assignments.rs:78:22: 78:23
        _313 = &_269[_314];              // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _330 = const _;                  // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main_mir, [], Some(promoted[0])) }
        _315 = _330;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _312 = (move _313, move _315);   // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _316 = (_312.0: &i32);           // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _317 = (_312.1: &i32);           // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _320 = (*_316);                  // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _321 = const 3_i32;              // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _319 = Eq(move _320, move _321); // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _318 = Not(move _319);           // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _318) -> [0: bb65, otherwise: bb64]; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb64: {
        _322 = const core::panicking::AssertKind::Eq; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _324 = const core::panicking::AssertKind::Eq; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _326 = _316;                     // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _325 = _326;                     // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _328 = _317;                     // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _327 = _328;                     // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _329 = Option::<Arguments<'_>>::None; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _323 = core::panicking::assert_failed::<i32, i32>(move _324, move _325, move _327, move _329) -> bb67; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb65: {
        drop(_238) -> bb66;              // scope 1 at ui/mir/mir_augmented_assignments.rs:80:1: 80:2
    }

    bb66: {
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:80:2: 80:2
    }

    bb67 (cleanup): {
        drop(_238) -> bb68;              // scope 1 at ui/mir/mir_augmented_assignments.rs:80:1: 80:2
    }

    bb68 (cleanup): {
        resume;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:25:1: 80:2
    }
}

promoted[0] in main_mir: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:78:26: 78:27

    bb0: {
        _1 = const 3_i32;                // scope 0 at ui/mir/mir_augmented_assignments.rs:78:26: 78:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main_mir: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:77:26: 77:27

    bb0: {
        _1 = const 2_i32;                // scope 0 at ui/mir/mir_augmented_assignments.rs:77:26: 77:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main_mir: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:76:26: 76:27

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/mir/mir_augmented_assignments.rs:76:26: 76:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main_mir: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:71:22: 71:28

    bb0: {
        _1 = Int(const 3_i32);           // scope 0 at ui/mir/mir_augmented_assignments.rs:71:22: 71:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main_mir: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:63:19: 63:25

    bb0: {
        _1 = Int(const 0_i32);           // scope 0 at ui/mir/mir_augmented_assignments.rs:63:19: 63:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main_mir: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:60:19: 60:25

    bb0: {
        _1 = Int(const 1_i32);           // scope 0 at ui/mir/mir_augmented_assignments.rs:60:19: 60:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[6] in main_mir: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:57:19: 57:25

    bb0: {
        _1 = Int(const 2_i32);           // scope 0 at ui/mir/mir_augmented_assignments.rs:57:19: 57:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[7] in main_mir: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:54:19: 54:25

    bb0: {
        _1 = Int(const 4_i32);           // scope 0 at ui/mir/mir_augmented_assignments.rs:54:19: 54:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[8] in main_mir: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:51:19: 51:25

    bb0: {
        _1 = Int(const 2_i32);           // scope 0 at ui/mir/mir_augmented_assignments.rs:51:19: 51:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[9] in main_mir: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:47:19: 47:25

    bb0: {
        _1 = Int(const 1_i32);           // scope 0 at ui/mir/mir_augmented_assignments.rs:47:19: 47:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[10] in main_mir: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:44:19: 44:25

    bb0: {
        _1 = Int(const 3_i32);           // scope 0 at ui/mir/mir_augmented_assignments.rs:44:19: 44:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[11] in main_mir: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:41:19: 41:25

    bb0: {
        _1 = Int(const 1_i32);           // scope 0 at ui/mir/mir_augmented_assignments.rs:41:19: 41:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[12] in main_mir: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:38:19: 38:28

    bb0: {
        _1 = Int(const 2_i32);           // scope 0 at ui/mir/mir_augmented_assignments.rs:38:19: 38:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[13] in main_mir: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:35:19: 35:28

    bb0: {
        _1 = Int(const 3_i32);           // scope 0 at ui/mir/mir_augmented_assignments.rs:35:19: 35:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[14] in main_mir: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:32:19: 32:28

    bb0: {
        _1 = Int(const 1_i32);           // scope 0 at ui/mir/mir_augmented_assignments.rs:32:19: 32:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[15] in main_mir: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:29:19: 29:28

    bb0: {
        _1 = Int(const 3_i32);           // scope 0 at ui/mir/mir_augmented_assignments.rs:29:19: 29:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn <impl at ui/mir/mir_augmented_assignments.rs:82:1: 82:23>::add_assign(_1: &mut Int, _2: Int) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:83:19: 83:28
    debug rhs => _2;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:83:30: 83:33
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:83:40: 83:40
    let mut _3: i32;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:84:19: 84:24
    let mut _4: (i32, bool);             // in scope 0 at ui/mir/mir_augmented_assignments.rs:84:9: 84:24

    bb0: {
        _3 = (_2.0: i32);                // scope 0 at ui/mir/mir_augmented_assignments.rs:84:19: 84:24
        _4 = CheckedAdd(((*_1).0: i32), _3); // scope 0 at ui/mir/mir_augmented_assignments.rs:84:9: 84:24
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: i32), move _3) -> bb1; // scope 0 at ui/mir/mir_augmented_assignments.rs:84:9: 84:24
    }

    bb1: {
        ((*_1).0: i32) = move (_4.0: i32); // scope 0 at ui/mir/mir_augmented_assignments.rs:84:9: 84:24
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:85:6: 85:6
    }
}

fn <impl at ui/mir/mir_augmented_assignments.rs:88:1: 88:26>::bitand_assign(_1: &mut Int, _2: Int) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:89:22: 89:31
    debug rhs => _2;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:89:33: 89:36
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:89:43: 89:43
    let mut _3: i32;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:90:19: 90:24

    bb0: {
        _3 = (_2.0: i32);                // scope 0 at ui/mir/mir_augmented_assignments.rs:90:19: 90:24
        ((*_1).0: i32) = BitAnd(((*_1).0: i32), move _3); // scope 0 at ui/mir/mir_augmented_assignments.rs:90:9: 90:24
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:91:6: 91:6
    }
}

fn <impl at ui/mir/mir_augmented_assignments.rs:94:1: 94:25>::bitor_assign(_1: &mut Int, _2: Int) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:95:21: 95:30
    debug rhs => _2;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:95:32: 95:35
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:95:42: 95:42
    let mut _3: i32;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:96:19: 96:24

    bb0: {
        _3 = (_2.0: i32);                // scope 0 at ui/mir/mir_augmented_assignments.rs:96:19: 96:24
        ((*_1).0: i32) = BitOr(((*_1).0: i32), move _3); // scope 0 at ui/mir/mir_augmented_assignments.rs:96:9: 96:24
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:97:6: 97:6
    }
}

fn <impl at ui/mir/mir_augmented_assignments.rs:100:1: 100:26>::bitxor_assign(_1: &mut Int, _2: Int) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:101:22: 101:31
    debug rhs => _2;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:101:33: 101:36
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:101:43: 101:43
    let mut _3: i32;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:102:19: 102:24

    bb0: {
        _3 = (_2.0: i32);                // scope 0 at ui/mir/mir_augmented_assignments.rs:102:19: 102:24
        ((*_1).0: i32) = BitXor(((*_1).0: i32), move _3); // scope 0 at ui/mir/mir_augmented_assignments.rs:102:9: 102:24
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:103:6: 103:6
    }
}

fn <impl at ui/mir/mir_augmented_assignments.rs:106:1: 106:23>::div_assign(_1: &mut Int, _2: Int) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:107:19: 107:28
    debug rhs => _2;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:107:30: 107:33
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:107:40: 107:40
    let mut _3: i32;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:108:19: 108:24
    let mut _4: bool;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:108:9: 108:24
    let mut _5: bool;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:108:9: 108:24
    let mut _6: bool;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:108:9: 108:24
    let mut _7: bool;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:108:9: 108:24

    bb0: {
        _3 = (_2.0: i32);                // scope 0 at ui/mir/mir_augmented_assignments.rs:108:19: 108:24
        _4 = Eq(_3, const 0_i32);        // scope 0 at ui/mir/mir_augmented_assignments.rs:108:9: 108:24
        assert(!move _4, "attempt to divide `{}` by zero", ((*_1).0: i32)) -> bb1; // scope 0 at ui/mir/mir_augmented_assignments.rs:108:9: 108:24
    }

    bb1: {
        _5 = Eq(_3, const -1_i32);       // scope 0 at ui/mir/mir_augmented_assignments.rs:108:9: 108:24
        _6 = Eq(((*_1).0: i32), const i32::MIN); // scope 0 at ui/mir/mir_augmented_assignments.rs:108:9: 108:24
        _7 = BitAnd(move _5, move _6);   // scope 0 at ui/mir/mir_augmented_assignments.rs:108:9: 108:24
        assert(!move _7, "attempt to compute `{} / {}`, which would overflow", ((*_1).0: i32), _3) -> bb2; // scope 0 at ui/mir/mir_augmented_assignments.rs:108:9: 108:24
    }

    bb2: {
        ((*_1).0: i32) = Div(((*_1).0: i32), move _3); // scope 0 at ui/mir/mir_augmented_assignments.rs:108:9: 108:24
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:109:6: 109:6
    }
}

fn <impl at ui/mir/mir_augmented_assignments.rs:112:1: 112:23>::mul_assign(_1: &mut Int, _2: Int) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:113:19: 113:28
    debug rhs => _2;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:113:30: 113:33
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:113:40: 113:40
    let mut _3: i32;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:114:19: 114:24
    let mut _4: (i32, bool);             // in scope 0 at ui/mir/mir_augmented_assignments.rs:114:9: 114:24

    bb0: {
        _3 = (_2.0: i32);                // scope 0 at ui/mir/mir_augmented_assignments.rs:114:19: 114:24
        _4 = CheckedMul(((*_1).0: i32), _3); // scope 0 at ui/mir/mir_augmented_assignments.rs:114:9: 114:24
        assert(!move (_4.1: bool), "attempt to compute `{} * {}`, which would overflow", ((*_1).0: i32), move _3) -> bb1; // scope 0 at ui/mir/mir_augmented_assignments.rs:114:9: 114:24
    }

    bb1: {
        ((*_1).0: i32) = move (_4.0: i32); // scope 0 at ui/mir/mir_augmented_assignments.rs:114:9: 114:24
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:115:6: 115:6
    }
}

fn <impl at ui/mir/mir_augmented_assignments.rs:118:1: 118:23>::rem_assign(_1: &mut Int, _2: Int) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:119:19: 119:28
    debug rhs => _2;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:119:30: 119:33
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:119:40: 119:40
    let mut _3: i32;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:120:19: 120:24
    let mut _4: bool;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:120:9: 120:24
    let mut _5: bool;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:120:9: 120:24
    let mut _6: bool;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:120:9: 120:24
    let mut _7: bool;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:120:9: 120:24

    bb0: {
        _3 = (_2.0: i32);                // scope 0 at ui/mir/mir_augmented_assignments.rs:120:19: 120:24
        _4 = Eq(_3, const 0_i32);        // scope 0 at ui/mir/mir_augmented_assignments.rs:120:9: 120:24
        assert(!move _4, "attempt to calculate the remainder of `{}` with a divisor of zero", ((*_1).0: i32)) -> bb1; // scope 0 at ui/mir/mir_augmented_assignments.rs:120:9: 120:24
    }

    bb1: {
        _5 = Eq(_3, const -1_i32);       // scope 0 at ui/mir/mir_augmented_assignments.rs:120:9: 120:24
        _6 = Eq(((*_1).0: i32), const i32::MIN); // scope 0 at ui/mir/mir_augmented_assignments.rs:120:9: 120:24
        _7 = BitAnd(move _5, move _6);   // scope 0 at ui/mir/mir_augmented_assignments.rs:120:9: 120:24
        assert(!move _7, "attempt to compute the remainder of `{} % {}`, which would overflow", ((*_1).0: i32), _3) -> bb2; // scope 0 at ui/mir/mir_augmented_assignments.rs:120:9: 120:24
    }

    bb2: {
        ((*_1).0: i32) = Rem(((*_1).0: i32), move _3); // scope 0 at ui/mir/mir_augmented_assignments.rs:120:9: 120:24
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:121:6: 121:6
    }
}

fn <impl at ui/mir/mir_augmented_assignments.rs:124:1: 124:27>::shl_assign(_1: &mut Int, _2: u8) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:125:19: 125:28
    debug rhs => _2;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:125:30: 125:33
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:125:39: 125:39
    let mut _3: u8;                      // in scope 0 at ui/mir/mir_augmented_assignments.rs:126:20: 126:23
    let mut _4: (i32, bool);             // in scope 0 at ui/mir/mir_augmented_assignments.rs:126:9: 126:23

    bb0: {
        _3 = _2;                         // scope 0 at ui/mir/mir_augmented_assignments.rs:126:20: 126:23
        _4 = CheckedShl(((*_1).0: i32), _3); // scope 0 at ui/mir/mir_augmented_assignments.rs:126:9: 126:23
        assert(!move (_4.1: bool), "attempt to shift left by `{}`, which would overflow", move _3) -> bb1; // scope 0 at ui/mir/mir_augmented_assignments.rs:126:9: 126:23
    }

    bb1: {
        ((*_1).0: i32) = move (_4.0: i32); // scope 0 at ui/mir/mir_augmented_assignments.rs:126:9: 126:23
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:127:6: 127:6
    }
}

fn <impl at ui/mir/mir_augmented_assignments.rs:130:1: 130:28>::shl_assign(_1: &mut Int, _2: u16) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:131:19: 131:28
    debug rhs => _2;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:131:30: 131:33
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:131:40: 131:40
    let mut _3: u16;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:132:20: 132:23
    let mut _4: (i32, bool);             // in scope 0 at ui/mir/mir_augmented_assignments.rs:132:9: 132:23

    bb0: {
        _3 = _2;                         // scope 0 at ui/mir/mir_augmented_assignments.rs:132:20: 132:23
        _4 = CheckedShl(((*_1).0: i32), _3); // scope 0 at ui/mir/mir_augmented_assignments.rs:132:9: 132:23
        assert(!move (_4.1: bool), "attempt to shift left by `{}`, which would overflow", move _3) -> bb1; // scope 0 at ui/mir/mir_augmented_assignments.rs:132:9: 132:23
    }

    bb1: {
        ((*_1).0: i32) = move (_4.0: i32); // scope 0 at ui/mir/mir_augmented_assignments.rs:132:9: 132:23
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:133:6: 133:6
    }
}

fn <impl at ui/mir/mir_augmented_assignments.rs:136:1: 136:27>::shr_assign(_1: &mut Int, _2: u8) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:137:19: 137:28
    debug rhs => _2;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:137:30: 137:33
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:137:39: 137:39
    let mut _3: u8;                      // in scope 0 at ui/mir/mir_augmented_assignments.rs:138:20: 138:23
    let mut _4: (i32, bool);             // in scope 0 at ui/mir/mir_augmented_assignments.rs:138:9: 138:23

    bb0: {
        _3 = _2;                         // scope 0 at ui/mir/mir_augmented_assignments.rs:138:20: 138:23
        _4 = CheckedShr(((*_1).0: i32), _3); // scope 0 at ui/mir/mir_augmented_assignments.rs:138:9: 138:23
        assert(!move (_4.1: bool), "attempt to shift right by `{}`, which would overflow", move _3) -> bb1; // scope 0 at ui/mir/mir_augmented_assignments.rs:138:9: 138:23
    }

    bb1: {
        ((*_1).0: i32) = move (_4.0: i32); // scope 0 at ui/mir/mir_augmented_assignments.rs:138:9: 138:23
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:139:6: 139:6
    }
}

fn <impl at ui/mir/mir_augmented_assignments.rs:142:1: 142:28>::shr_assign(_1: &mut Int, _2: u16) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:143:19: 143:28
    debug rhs => _2;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:143:30: 143:33
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:143:40: 143:40
    let mut _3: u16;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:144:20: 144:23
    let mut _4: (i32, bool);             // in scope 0 at ui/mir/mir_augmented_assignments.rs:144:9: 144:23

    bb0: {
        _3 = _2;                         // scope 0 at ui/mir/mir_augmented_assignments.rs:144:20: 144:23
        _4 = CheckedShr(((*_1).0: i32), _3); // scope 0 at ui/mir/mir_augmented_assignments.rs:144:9: 144:23
        assert(!move (_4.1: bool), "attempt to shift right by `{}`, which would overflow", move _3) -> bb1; // scope 0 at ui/mir/mir_augmented_assignments.rs:144:9: 144:23
    }

    bb1: {
        ((*_1).0: i32) = move (_4.0: i32); // scope 0 at ui/mir/mir_augmented_assignments.rs:144:9: 144:23
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:145:6: 145:6
    }
}

fn <impl at ui/mir/mir_augmented_assignments.rs:148:1: 148:23>::sub_assign(_1: &mut Int, _2: Int) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:149:19: 149:28
    debug rhs => _2;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:149:30: 149:33
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:149:40: 149:40
    let mut _3: i32;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:150:19: 150:24
    let mut _4: (i32, bool);             // in scope 0 at ui/mir/mir_augmented_assignments.rs:150:9: 150:24

    bb0: {
        _3 = (_2.0: i32);                // scope 0 at ui/mir/mir_augmented_assignments.rs:150:19: 150:24
        _4 = CheckedSub(((*_1).0: i32), _3); // scope 0 at ui/mir/mir_augmented_assignments.rs:150:9: 150:24
        assert(!move (_4.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1).0: i32), move _3) -> bb1; // scope 0 at ui/mir/mir_augmented_assignments.rs:150:9: 150:24
    }

    bb1: {
        ((*_1).0: i32) = move (_4.0: i32); // scope 0 at ui/mir/mir_augmented_assignments.rs:150:9: 150:24
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:151:6: 151:6
    }
}

fn <impl at ui/mir/mir_augmented_assignments.rs:154:1: 154:30>::add_assign(_1: &mut Slice, _2: i32) -> () {
    debug self => _1;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:155:19: 155:28
    debug rhs => _2;                     // in scope 0 at ui/mir/mir_augmented_assignments.rs:155:30: 155:33
    let mut _0: ();                      // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:155:40: 155:40
    let mut _3: std::slice::IterMut<'_, i32>; // in scope 0 at ui/mir/mir_augmented_assignments.rs:156:20: 156:31
    let mut _4: &mut [i32];              // in scope 0 at ui/mir/mir_augmented_assignments.rs:156:20: 156:31
    let mut _5: std::slice::IterMut<'_, i32>; // in scope 0 at ui/mir/mir_augmented_assignments.rs:156:20: 156:31
    let mut _6: std::option::Option<&mut i32>; // in scope 0 at ui/mir/mir_augmented_assignments.rs:156:20: 156:31
    let mut _7: &mut std::slice::IterMut<'_, i32>; // in scope 0 at ui/mir/mir_augmented_assignments.rs:156:20: 156:31
    let mut _8: &mut std::slice::IterMut<'_, i32>; // in scope 0 at ui/mir/mir_augmented_assignments.rs:156:20: 156:31
    let mut _9: isize;                   // in scope 0 at ui/mir/mir_augmented_assignments.rs:156:9: 158:10
    let mut _11: i32;                    // in scope 0 at ui/mir/mir_augmented_assignments.rs:157:21: 157:24
    let mut _12: (i32, bool);            // in scope 0 at ui/mir/mir_augmented_assignments.rs:157:13: 157:24
    scope 1 {
        debug iter => _5;                // in scope 1 at ui/mir/mir_augmented_assignments.rs:156:20: 156:31
        let _10: &mut i32;               // in scope 1 at ui/mir/mir_augmented_assignments.rs:156:13: 156:16
        scope 2 {
            debug lhs => _10;            // in scope 2 at ui/mir/mir_augmented_assignments.rs:156:13: 156:16
        }
    }

    bb0: {
        _4 = &mut ((*_1).0: [i32]);      // scope 0 at ui/mir/mir_augmented_assignments.rs:156:20: 156:31
        _3 = <&mut [i32] as IntoIterator>::into_iter(move _4) -> bb1; // scope 0 at ui/mir/mir_augmented_assignments.rs:156:20: 156:31
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:156:20: 156:31
                                         // + literal: Const { ty: fn(&mut [i32]) -> <&mut [i32] as IntoIterator>::IntoIter {<&mut [i32] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _3;                    // scope 0 at ui/mir/mir_augmented_assignments.rs:156:20: 156:31
        goto -> bb2;                     // scope 1 at ui/mir/mir_augmented_assignments.rs:156:9: 158:10
    }

    bb2: {
        _8 = &mut _5;                    // scope 1 at ui/mir/mir_augmented_assignments.rs:156:20: 156:31
        _7 = &mut (*_8);                 // scope 1 at ui/mir/mir_augmented_assignments.rs:156:20: 156:31
        _6 = <std::slice::IterMut<'_, i32> as Iterator>::next(move _7) -> bb3; // scope 1 at ui/mir/mir_augmented_assignments.rs:156:20: 156:31
                                         // mir::Constant
                                         // + span: ui/mir/mir_augmented_assignments.rs:156:20: 156:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::IterMut<'_, i32>) -> Option<<std::slice::IterMut<'_, i32> as Iterator>::Item> {<std::slice::IterMut<'_, i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = discriminant(_6);           // scope 1 at ui/mir/mir_augmented_assignments.rs:156:20: 156:31
        switchInt(move _9) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/mir/mir_augmented_assignments.rs:156:20: 156:31
    }

    bb4: {
        _10 = move ((_6 as Some).0: &mut i32); // scope 1 at ui/mir/mir_augmented_assignments.rs:156:13: 156:16
        _11 = _2;                        // scope 2 at ui/mir/mir_augmented_assignments.rs:157:21: 157:24
        _12 = CheckedAdd((*_10), _11);   // scope 2 at ui/mir/mir_augmented_assignments.rs:157:13: 157:24
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_10), move _11) -> bb7; // scope 2 at ui/mir/mir_augmented_assignments.rs:157:13: 157:24
    }

    bb5: {
        unreachable;                     // scope 1 at ui/mir/mir_augmented_assignments.rs:156:20: 156:31
    }

    bb6: {
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:159:6: 159:6
    }

    bb7: {
        (*_10) = move (_12.0: i32);      // scope 2 at ui/mir/mir_augmented_assignments.rs:157:13: 157:24
        goto -> bb2;                     // scope 1 at ui/mir/mir_augmented_assignments.rs:156:9: 158:10
    }
}

fn Int(_1: i32) -> Int {
    let mut _0: Int;                     // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:9:1: 9:11

    bb0: {
        _0 = Int(move _1);               // scope 0 at ui/mir/mir_augmented_assignments.rs:9:1: 9:11
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:9:1: 9:11
    }
}

// MIR FOR CTFE
fn Int(_1: i32) -> Int {
    let mut _0: Int;                     // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:9:1: 9:11

    bb0: {
        _0 = Int(move _1);               // scope 0 at ui/mir/mir_augmented_assignments.rs:9:1: 9:11
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:9:1: 9:11
    }
}

fn Slice(_1: [i32]) -> Slice {
    let mut _0: Slice;                   // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:11:1: 11:13

    bb0: {
        _0 = Slice(move _1);             // scope 0 at ui/mir/mir_augmented_assignments.rs:11:1: 11:13
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:11:1: 11:13
    }
}

// MIR FOR CTFE
fn Slice(_1: [i32]) -> Slice {
    let mut _0: Slice;                   // return place in scope 0 at ui/mir/mir_augmented_assignments.rs:11:1: 11:13

    bb0: {
        _0 = Slice(move _1);             // scope 0 at ui/mir/mir_augmented_assignments.rs:11:1: 11:13
        return;                          // scope 0 at ui/mir/mir_augmented_assignments.rs:11:1: 11:13
    }
}
