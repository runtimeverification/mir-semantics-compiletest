// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: Abc) -> i32 {
    debug x => _1;
    let mut _0: i32;
    let mut _2: isize;

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb1, 1: bb5, 2: bb3, 3: bb4, otherwise: bb2];
    }

    bb1: {
        _0 = const 1_i32;
        goto -> bb6;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = const 3_i32;
        goto -> bb6;
    }

    bb4: {
        _0 = const 4_i32;
        goto -> bb6;
    }

    bb5: {
        _0 = const 2_i32;
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn foo2(_1: Abc) -> bool {
    debug x => _1;
    let mut _0: bool;
    let mut _2: isize;

    bb0: {
        _2 = discriminant(_1);
        _0 = Eq(_2, const 3_isize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let mut _4: Abc;
    let _5: &i32;
    let _6: &i32;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: i32;
    let mut _10: i32;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&i32, &i32);
    let mut _15: &i32;
    let _16: i32;
    let mut _17: Abc;
    let _18: &i32;
    let _19: &i32;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: i32;
    let mut _23: i32;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&i32, &i32);
    let mut _28: &i32;
    let _29: i32;
    let mut _30: Abc;
    let _31: &i32;
    let _32: &i32;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: i32;
    let mut _36: i32;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&i32, &i32);
    let mut _41: &i32;
    let _42: i32;
    let mut _43: Abc;
    let _44: &i32;
    let _45: &i32;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: i32;
    let mut _49: i32;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&bool, &bool);
    let mut _54: &bool;
    let _55: bool;
    let mut _56: Abc;
    let _57: &bool;
    let _58: &bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _66: (&bool, &bool);
    let mut _67: &bool;
    let _68: bool;
    let mut _69: Abc;
    let _70: &bool;
    let _71: &bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _79: (&bool, &bool);
    let mut _80: &bool;
    let _81: bool;
    let mut _82: Abc;
    let _83: &bool;
    let _84: &bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _92: (&bool, &bool);
    let mut _93: &bool;
    let _94: bool;
    let mut _95: Abc;
    let _96: &bool;
    let _97: &bool;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: bool;
    let _103: !;
    let mut _104: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _105: &bool;
    let mut _106: &bool;
    let mut _107: &bool;
    let mut _108: &bool;
    let mut _109: &i32;
    let mut _110: &i32;
    let mut _111: &i32;
    let mut _112: &i32;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }
    scope 5 {
        debug left_val => _31;
        debug right_val => _32;
        let _37: core::panicking::AssertKind;
        scope 6 {
            debug kind => _37;
        }
    }
    scope 7 {
        debug left_val => _44;
        debug right_val => _45;
        let _50: core::panicking::AssertKind;
        scope 8 {
            debug kind => _50;
        }
    }
    scope 9 {
        debug left_val => _57;
        debug right_val => _58;
        let _63: core::panicking::AssertKind;
        scope 10 {
            debug kind => _63;
        }
    }
    scope 11 {
        debug left_val => _70;
        debug right_val => _71;
        let _76: core::panicking::AssertKind;
        scope 12 {
            debug kind => _76;
        }
    }
    scope 13 {
        debug left_val => _83;
        debug right_val => _84;
        let _89: core::panicking::AssertKind;
        scope 14 {
            debug kind => _89;
        }
    }
    scope 15 {
        debug left_val => _96;
        debug right_val => _97;
        let _102: core::panicking::AssertKind;
        scope 16 {
            debug kind => _102;
        }
    }

    bb0: {
        _112 = const _;
        _4 = Abc::A(const 42_u8);
        _3 = foo(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _1 = (_112, move _2);
        _5 = (_1.0: &i32);
        _6 = (_1.1: &i32);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<i32, i32>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb3: {
        _111 = const _;
        _17 = Abc::B(const -100_i8);
        _16 = foo(move _17) -> [return: bb4, unwind continue];
    }

    bb4: {
        _15 = &_16;
        _14 = (_111, move _15);
        _18 = (_14.0: &i32);
        _19 = (_14.1: &i32);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<i32, i32>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb6: {
        _110 = const _;
        _30 = Abc::C;
        _29 = foo(move _30) -> [return: bb7, unwind continue];
    }

    bb7: {
        _28 = &_29;
        _27 = (_110, move _28);
        _31 = (_27.0: &i32);
        _32 = (_27.1: &i32);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<i32, i32>(move _37, _31, _32, move _39) -> unwind continue;
    }

    bb9: {
        _109 = const _;
        _43 = Abc::D;
        _42 = foo(move _43) -> [return: bb10, unwind continue];
    }

    bb10: {
        _41 = &_42;
        _40 = (_109, move _41);
        _44 = (_40.0: &i32);
        _45 = (_40.1: &i32);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<i32, i32>(move _50, _44, _45, move _52) -> unwind continue;
    }

    bb12: {
        _108 = const _;
        _56 = Abc::A(const 1_u8);
        _55 = foo2(move _56) -> [return: bb13, unwind continue];
    }

    bb13: {
        _54 = &_55;
        _53 = (_108, move _54);
        _57 = (_53.0: &bool);
        _58 = (_53.1: &bool);
        _61 = (*_57);
        _62 = (*_58);
        _60 = Eq(move _61, move _62);
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _63 = core::panicking::AssertKind::Eq;
        _65 = Option::<Arguments<'_>>::None;
        _64 = core::panicking::assert_failed::<bool, bool>(move _63, _57, _58, move _65) -> unwind continue;
    }

    bb15: {
        _107 = const _;
        _69 = Abc::B(const 2_i8);
        _68 = foo2(move _69) -> [return: bb16, unwind continue];
    }

    bb16: {
        _67 = &_68;
        _66 = (_107, move _67);
        _70 = (_66.0: &bool);
        _71 = (_66.1: &bool);
        _74 = (*_70);
        _75 = (*_71);
        _73 = Eq(move _74, move _75);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<bool, bool>(move _76, _70, _71, move _78) -> unwind continue;
    }

    bb18: {
        _106 = const _;
        _82 = Abc::C;
        _81 = foo2(move _82) -> [return: bb19, unwind continue];
    }

    bb19: {
        _80 = &_81;
        _79 = (_106, move _80);
        _83 = (_79.0: &bool);
        _84 = (_79.1: &bool);
        _87 = (*_83);
        _88 = (*_84);
        _86 = Eq(move _87, move _88);
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<bool, bool>(move _89, _83, _84, move _91) -> unwind continue;
    }

    bb21: {
        _105 = const _;
        _95 = Abc::D;
        _94 = foo2(move _95) -> [return: bb22, unwind continue];
    }

    bb22: {
        _93 = &_94;
        _92 = (_105, move _93);
        _96 = (_92.0: &bool);
        _97 = (_92.1: &bool);
        _100 = (*_96);
        _101 = (*_97);
        _99 = Eq(move _100, move _101);
        _98 = Not(move _99);
        switchInt(move _98) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _102 = core::panicking::AssertKind::Eq;
        _104 = Option::<Arguments<'_>>::None;
        _103 = core::panicking::assert_failed::<bool, bool>(move _102, _96, _97, move _104) -> unwind continue;
    }

    bb24: {
        return;
    }
}

promoted[0] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 4_i32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

fn Abc::A(_1: u8) -> Abc {
    let mut _0: Abc;

    bb0: {
        _0 = Abc::A(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Abc::A(_1: u8) -> Abc {
    let mut _0: Abc;

    bb0: {
        _0 = Abc::A(move _1);
        return;
    }
}

fn Abc::B(_1: i8) -> Abc {
    let mut _0: Abc;

    bb0: {
        _0 = Abc::B(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Abc::B(_1: i8) -> Abc {
    let mut _0: Abc;

    bb0: {
        _0 = Abc::B(move _1);
        return;
    }
}
