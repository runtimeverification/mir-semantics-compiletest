// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Data::offsets::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn create_data() -> Data {
    let mut _0: Data;
    let mut _1: Data;
    let mut _2: [u32; 2];
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    scope 1 {
        debug d => _1;
    }

    bb0: {
        _2 = [const 1_u32, const 2_u32];
        _1 = Data { offsets: move _2 };
        _3 = const 0_usize;
        _4 = const 2_usize;
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> [success: bb1, unwind continue];
    }

    bb1: {
        (_1.0: [u32; 2])[_3] = const 3_u32;
        _0 = move _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Data;
    let mut _2: (&u32, &u32);
    let mut _3: &u32;
    let _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: u32;
    let mut _12: u32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&u32, &u32);
    let mut _17: &u32;
    let _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: u32;
    let mut _26: u32;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug d => _1;
        let _7: &u32;
        let _8: &u32;
        let _21: &u32;
        let _22: &u32;
        let mut _30: &u32;
        let mut _31: &u32;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
        scope 4 {
            debug left_val => _21;
            debug right_val => _22;
            let _27: core::panicking::AssertKind;
            scope 5 {
                debug kind => _27;
            }
        }
    }

    bb0: {
        _1 = create_data() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = const 0_usize;
        _5 = const 2_usize;
        _6 = Lt(_4, _5);
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> [success: bb2, unwind continue];
    }

    bb2: {
        _3 = &(_1.0: [u32; 2])[_4];
        _31 = const _;
        _2 = (move _3, _31);
        _7 = (_2.0: &u32);
        _8 = (_2.1: &u32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<u32, u32>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb4: {
        _18 = const 1_usize;
        _19 = const 2_usize;
        _20 = Lt(_18, _19);
        assert(move _20, "index out of bounds: the length is {} but the index is {}", move _19, _18) -> [success: bb5, unwind continue];
    }

    bb5: {
        _17 = &(_1.0: [u32; 2])[_18];
        _30 = const _;
        _16 = (move _17, _30);
        _21 = (_16.0: &u32);
        _22 = (_16.1: &u32);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<u32, u32>(move _27, _21, _22, move _29) -> unwind continue;
    }

    bb7: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 2_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 3_u32;
        _0 = &_1;
        return;
    }
}

fn Global(_1: PhantomData<T>) -> Global<T> {
    let mut _0: Global<T>;

    bb0: {
        _0 = Global::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Global(_1: PhantomData<T>) -> Global<T> {
    let mut _0: Global<T>;

    bb0: {
        _0 = Global::<T>(move _1);
        return;
    }
}
