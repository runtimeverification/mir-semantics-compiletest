// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/auto-instantiate.rs:4:10: 4:15>::fmt(_1: &Pair<T, U>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &T;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&U;
    let _10: &U;

    bb0: {
        _3 = const "Pair";
        _4 = const "a";
        _6 = &((*_1).0: T);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "b";
        _10 = &((*_1).1: U);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn f(_1: T, _2: U) -> Pair<T, U> {
    debug x => _1;
    debug y => _2;
    let mut _0: Pair<T, U>;

    bb0: {
        _0 = Pair::<T, U> { a: move _1, b: move _2 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &isize;
    let _9: Pair<Triple, i32>;
    let mut _10: Triple;
    let _11: ();
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let mut _14: &[core::fmt::rt::Argument<'_>];
    let _15: &[core::fmt::rt::Argument<'_>; 1];
    let _16: [core::fmt::rt::Argument<'_>; 1];
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &i32;
    let _19: Pair<i32, i32>;
    let mut _20: &[&str; 2];
    let mut _21: &[&str; 2];

    bb0: {
        _21 = const _;
        _3 = _21 as &[&str] (Pointer(Unsize));
        _10 = Triple { x: const 3_isize, y: const 4_isize, z: const 5_isize };
        _9 = f::<Triple, i32>(move _10, const 4_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &((_9.0: Triple).0: isize);
        _7 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = [move _7];
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _1 = _print(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _20 = const _;
        _13 = _20 as &[&str] (Pointer(Unsize));
        _19 = f::<i32, i32>(const 5_i32, const 6_i32) -> [return: bb5, unwind continue];
    }

    bb5: {
        _18 = &(_19.0: i32);
        _17 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_18) -> [return: bb6, unwind continue];
    }

    bb6: {
        _16 = [move _17];
        _15 = &_16;
        _14 = _15 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb7, unwind continue];
    }

    bb7: {
        _11 = _print(move _12) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
