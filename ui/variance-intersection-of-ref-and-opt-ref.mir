// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &i32, _2: Option<&i32>) -> i32 {
    debug field1 => _1;                  // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:14:8: 14:14
    debug field2 => _2;                  // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:14:22: 14:28
    let mut _0: i32;                     // return place in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:14:47: 14:50
    let _3: List<'_>;                    // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:15:9: 15:13
    let mut _4: &i32;                    // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:15:31: 15:37
    let mut _5: std::option::Option<&i32>; // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:15:47: 15:53
    let mut _6: i32;                     // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:16:5: 16:17
    let mut _7: i32;                     // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:16:20: 16:53
    let mut _8: std::option::Option<i32>; // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:16:20: 16:40
    let mut _9: std::option::Option<&i32>; // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:16:20: 16:31
    let mut _10: (i32, bool);            // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:16:5: 16:53
    let mut _11: &i32;                   // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:15:9: 15:13
    scope 1 {
        debug list => _3;                // in scope 1 at ui/variance-intersection-of-ref-and-opt-ref.rs:15:9: 15:13
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:15:31: 15:37
        _5 = _2;                         // scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:15:47: 15:53
        _3 = List::<'_> { field1: move _4, field2: move _5 }; // scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:15:16: 15:55
        _11 = deref_copy (_3.0: &i32);   // scope 1 at ui/variance-intersection-of-ref-and-opt-ref.rs:16:5: 16:17
        _6 = (*_11);                     // scope 1 at ui/variance-intersection-of-ref-and-opt-ref.rs:16:5: 16:17
        _9 = (_3.1: std::option::Option<&i32>); // scope 1 at ui/variance-intersection-of-ref-and-opt-ref.rs:16:20: 16:31
        _8 = Option::<&i32>::cloned(move _9) -> bb1; // scope 1 at ui/variance-intersection-of-ref-and-opt-ref.rs:16:20: 16:40
                                         // mir::Constant
                                         // + span: ui/variance-intersection-of-ref-and-opt-ref.rs:16:32: 16:38
                                         // + literal: Const { ty: fn(Option<&i32>) -> Option<i32> {Option::<&i32>::cloned}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = Option::<i32>::unwrap_or(move _8, const 0_i32) -> bb2; // scope 1 at ui/variance-intersection-of-ref-and-opt-ref.rs:16:20: 16:53
                                         // mir::Constant
                                         // + span: ui/variance-intersection-of-ref-and-opt-ref.rs:16:41: 16:50
                                         // + literal: Const { ty: fn(Option<i32>, i32) -> i32 {Option::<i32>::unwrap_or}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = CheckedAdd(_6, _7);        // scope 1 at ui/variance-intersection-of-ref-and-opt-ref.rs:16:5: 16:53
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, move _7) -> bb3; // scope 1 at ui/variance-intersection-of-ref-and-opt-ref.rs:16:5: 16:53
    }

    bb3: {
        _0 = move (_10.0: i32);          // scope 1 at ui/variance-intersection-of-ref-and-opt-ref.rs:16:5: 16:53
        return;                          // scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:17:2: 17:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:19:11: 19:11
    let _1: i32;                         // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:20:9: 20:10
    let mut _4: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _6: i32;                         // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:23:16: 23:35
    let mut _7: &i32;                    // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:23:20: 23:22
    let _8: &i32;                        // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:23:20: 23:22
    let mut _9: std::option::Option<&i32>; // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:23:24: 23:34
    let mut _10: &std::option::Option<i32>; // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:23:24: 23:34
    let mut _11: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _26: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _27: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _28: i32;                        // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:24:16: 24:35
    let mut _29: &i32;                   // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:24:20: 24:22
    let _30: &i32;                       // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:24:20: 24:22
    let mut _31: std::option::Option<&i32>; // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:24:24: 24:34
    let mut _32: &std::option::Option<i32>; // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:24:24: 24:34
    let mut _33: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _38: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _39: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _41: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _42: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _43: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _44: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _45: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _46: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/variance-intersection-of-ref-and-opt-ref.rs:20:9: 20:10
        let _2: std::option::Option<i32>; // in scope 1 at ui/variance-intersection-of-ref-and-opt-ref.rs:21:9: 21:10
        scope 2 {
            debug y => _2;               // in scope 2 at ui/variance-intersection-of-ref-and-opt-ref.rs:21:9: 21:10
            let _3: std::option::Option<i32>; // in scope 2 at ui/variance-intersection-of-ref-and-opt-ref.rs:22:9: 22:10
            scope 3 {
                debug z => _3;           // in scope 3 at ui/variance-intersection-of-ref-and-opt-ref.rs:22:9: 22:10
                let _12: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _13: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _34: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _35: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _48: &i32;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _49: &i32;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 4 {
                    debug left_val => _12; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _13; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _18: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _18; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 6 {
                    debug left_val => _34; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _35; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _40: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 7 {
                        debug kind => _40; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 22_i32;               // scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:20:13: 20:15
        _2 = Option::<i32>::Some(const 3_i32); // scope 1 at ui/variance-intersection-of-ref-and-opt-ref.rs:21:13: 21:20
        _3 = Option::<i32>::None;        // scope 2 at ui/variance-intersection-of-ref-and-opt-ref.rs:22:13: 22:17
        _8 = &_1;                        // scope 3 at ui/variance-intersection-of-ref-and-opt-ref.rs:23:20: 23:22
        _7 = _8;                         // scope 3 at ui/variance-intersection-of-ref-and-opt-ref.rs:23:20: 23:22
        _10 = &_2;                       // scope 3 at ui/variance-intersection-of-ref-and-opt-ref.rs:23:24: 23:34
        _9 = Option::<i32>::as_ref(move _10) -> bb1; // scope 3 at ui/variance-intersection-of-ref-and-opt-ref.rs:23:24: 23:34
                                         // mir::Constant
                                         // + span: ui/variance-intersection-of-ref-and-opt-ref.rs:23:26: 23:32
                                         // + literal: Const { ty: for<'a> fn(&'a Option<i32>) -> Option<&'a i32> {Option::<i32>::as_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = foo(move _7, move _9) -> bb2; // scope 3 at ui/variance-intersection-of-ref-and-opt-ref.rs:23:16: 23:35
                                         // mir::Constant
                                         // + span: ui/variance-intersection-of-ref-and-opt-ref.rs:23:16: 23:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i32, Option<&'b i32>) -> i32 {foo}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _49 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _11 = _49;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _11);        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_4.0: &i32);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_4.1: &i32);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = (*_12);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = const 25_i32;              // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = Eq(move _16, move _17);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _14 = Not(move _15);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb4, otherwise: bb3]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _18 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<i32, i32>(move _20, move _21, move _23, move _25); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb4: {
        _30 = &_1;                       // scope 3 at ui/variance-intersection-of-ref-and-opt-ref.rs:24:20: 24:22
        _29 = _30;                       // scope 3 at ui/variance-intersection-of-ref-and-opt-ref.rs:24:20: 24:22
        _32 = &_3;                       // scope 3 at ui/variance-intersection-of-ref-and-opt-ref.rs:24:24: 24:34
        _31 = Option::<i32>::as_ref(move _32) -> bb5; // scope 3 at ui/variance-intersection-of-ref-and-opt-ref.rs:24:24: 24:34
                                         // mir::Constant
                                         // + span: ui/variance-intersection-of-ref-and-opt-ref.rs:24:26: 24:32
                                         // + literal: Const { ty: for<'a> fn(&'a Option<i32>) -> Option<&'a i32> {Option::<i32>::as_ref}, val: Value(<ZST>) }
    }

    bb5: {
        _28 = foo(move _29, move _31) -> bb6; // scope 3 at ui/variance-intersection-of-ref-and-opt-ref.rs:24:16: 24:35
                                         // mir::Constant
                                         // + span: ui/variance-intersection-of-ref-and-opt-ref.rs:24:16: 24:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i32, Option<&'b i32>) -> i32 {foo}, val: Value(<ZST>) }
    }

    bb6: {
        _27 = &_28;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _48 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _33 = _48;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _26 = (move _27, move _33);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _34 = (_26.0: &i32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _35 = (_26.1: &i32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _38 = (*_34);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _39 = const 22_i32;              // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _37 = Eq(move _38, move _39);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _36 = Not(move _37);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _36) -> [0: bb8, otherwise: bb7]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _40 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _42 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _44 = _34;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _43 = _44;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _46 = _35;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _45 = _46;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _47 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _41 = core::panicking::assert_failed::<i32, i32>(move _42, move _43, move _45, move _47); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:25:2: 25:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:24:37: 24:39

    bb0: {
        _1 = const 22_i32;               // scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:24:37: 24:39
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:23:37: 23:39

    bb0: {
        _1 = const 25_i32;               // scope 0 at ui/variance-intersection-of-ref-and-opt-ref.rs:23:37: 23:39
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
