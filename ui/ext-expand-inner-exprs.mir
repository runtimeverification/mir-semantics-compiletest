// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static FOO: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "helloworld";
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&&str, &&str);
    let _2: &&str;
    let _3: &&str;
    let _4: &&str;
    let mut _5: bool;
    let mut _6: bool;
    let _8: !;
    let mut _9: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _10: &&str;
    scope 1 {
        debug left_val => _3;
        debug right_val => _4;
        let _7: core::panicking::AssertKind;
        scope 2 {
            debug kind => _7;
        }
    }

    bb0: {
        _2 = const {alloc1: &&str};
        _10 = const _;
        _1 = (_2, _10);
        _3 = (_1.0: &&str);
        _4 = (_1.1: &&str);
        _6 = <&str as PartialEq>::eq(_3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _7 = core::panicking::AssertKind::Eq;
        _9 = Option::<Arguments<'_>>::None;
        _8 = core::panicking::assert_failed::<&str, &str>(move _7, _3, _4, move _9) -> unwind continue;
    }

    bb3: {
        return;
    }
}

alloc1 (static: FOO, size: 16, align: 8) {
    ╾───────alloc10───────╼ 0a 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc10 (size: 10, align: 1) {
    68 65 6c 6c 6f 77 6f 72 6c 64                   │ helloworld
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "helloworld";
        _0 = &_1;
        return;
    }
}
