// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/new-impl-syntax.rs:10:1: 10:27>::fmt(_1: &Thingy, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 2];
    let _7: [core::fmt::rt::Argument<'_>; 2];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &isize;
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &isize;
    let mut _12: &[&str; 3];

    bb0: {
        _12 = const _;
        _4 = _12 as &[&str] (Pointer(Unsize));
        _9 = &((*_1).0: isize);
        _8 = core::fmt::rt::Argument::<'_>::new_debug::<isize>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _11 = &((*_1).1: isize);
        _10 = core::fmt::rt::Argument::<'_>::new_debug::<isize>(_11) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = [move _8, move _10];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = Formatter::<'_>::write_fmt(_2, move _3) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in <impl at ui/new-impl-syntax.rs:10:1: 10:27>::fmt: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "{ x: ", const ", y: ", const " }"];
        _0 = &_1;
        return;
    }
}

fn <impl at ui/new-impl-syntax.rs:20:1: 20:55>::fmt(_1: &PolymorphicThingy<T>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &T;
    let mut _10: &[&str; 1];

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (Pointer(Unsize));
        _9 = &((*_1).0: T);
        _8 = core::fmt::rt::Argument::<'_>::new_debug::<T>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Formatter::<'_>::write_fmt(_2, move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in <impl at ui/new-impl-syntax.rs:20:1: 20:55>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let mut _15: &PolymorphicThingy<Thingy>;
    let mut _16: &[&str; 2];
    let mut _17: &Thingy;
    let mut _18: &[&str; 2];

    bb0: {
        _18 = const _;
        _3 = _18 as &[&str] (Pointer(Unsize));
        _17 = const _;
        _7 = core::fmt::rt::Argument::<'_>::new_debug::<Thingy>(_17) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = [move _7];
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = _print(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _16 = const _;
        _10 = _16 as &[&str] (Pointer(Unsize));
        _15 = const _;
        _14 = core::fmt::rt::Argument::<'_>::new_debug::<PolymorphicThingy<Thingy>>(_15) -> [return: bb4, unwind continue];
    }

    bb4: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = _print(move _9) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &PolymorphicThingy<Thingy> = {
    let mut _0: &PolymorphicThingy<Thingy>;
    let mut _1: PolymorphicThingy<Thingy>;
    let mut _2: Thingy;

    bb0: {
        _2 = Thingy { x: const 1_isize, y: const 2_isize };
        _1 = PolymorphicThingy::<Thingy> { x: move _2 };
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &Thingy = {
    let mut _0: &Thingy;
    let mut _1: Thingy;

    bb0: {
        _1 = Thingy { x: const 1_isize, y: const 2_isize };
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
