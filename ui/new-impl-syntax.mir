// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/new-impl-syntax.rs:10:1: 10:27>::fmt(_1: &Thingy, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/new-impl-syntax.rs:11:12: 11:17
    debug f => _2;                       // in scope 0 at ui/new-impl-syntax.rs:11:19: 11:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/new-impl-syntax.rs:11:46: 11:57
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _5: &[&str];                 // in scope 0 at ui/new-impl-syntax.rs:12:19: 12:43
    let mut _6: &[&str; 3];              // in scope 0 at ui/new-impl-syntax.rs:12:19: 12:43
    let _7: &[&str; 3];                  // in scope 0 at ui/new-impl-syntax.rs:12:19: 12:43
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _9: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _10: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _11: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/new-impl-syntax.rs:12:45: 12:51
    let mut _13: &isize;                 // in scope 0 at ui/new-impl-syntax.rs:12:45: 12:51
    let _14: &isize;                     // in scope 0 at ui/new-impl-syntax.rs:12:45: 12:51
    let mut _15: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/new-impl-syntax.rs:12:53: 12:59
    let mut _16: &isize;                 // in scope 0 at ui/new-impl-syntax.rs:12:53: 12:59
    let _17: &isize;                     // in scope 0 at ui/new-impl-syntax.rs:12:53: 12:59
    let mut _18: &[&str; 3];             // in scope 0 at ui/new-impl-syntax.rs:12:19: 12:43

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
        _18 = const _;                   // scope 0 at ui/new-impl-syntax.rs:12:19: 12:43
                                         // mir::Constant
                                         // + span: ui/new-impl-syntax.rs:12:19: 12:43
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(<Thingy as Debug>::fmt, [], Some(promoted[0])) }
        _7 = _18;                        // scope 0 at ui/new-impl-syntax.rs:12:19: 12:43
        _6 = _7;                         // scope 0 at ui/new-impl-syntax.rs:12:19: 12:43
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at ui/new-impl-syntax.rs:12:19: 12:43
        _14 = &((*_1).0: isize);         // scope 0 at ui/new-impl-syntax.rs:12:45: 12:51
        _13 = _14;                       // scope 0 at ui/new-impl-syntax.rs:12:45: 12:51
        _12 = core::fmt::ArgumentV1::<'_>::new_debug::<isize>(move _13) -> bb1; // scope 0 at ui/new-impl-syntax.rs:12:45: 12:51
                                         // mir::Constant
                                         // + span: ui/new-impl-syntax.rs:12:45: 12:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        _17 = &((*_1).1: isize);         // scope 0 at ui/new-impl-syntax.rs:12:53: 12:59
        _16 = _17;                       // scope 0 at ui/new-impl-syntax.rs:12:53: 12:59
        _15 = core::fmt::ArgumentV1::<'_>::new_debug::<isize>(move _16) -> bb2; // scope 0 at ui/new-impl-syntax.rs:12:53: 12:59
                                         // mir::Constant
                                         // + span: ui/new-impl-syntax.rs:12:53: 12:59
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = [move _12, move _15];      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _10 = &_11;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Formatter::<'_>::write_fmt(move _3, move _4) -> bb4; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/new-impl-syntax.rs:13:6: 13:6
    }
}

promoted[0] in <impl at ui/new-impl-syntax.rs:10:1: 10:27>::fmt: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/new-impl-syntax.rs:12:19: 12:43
    let mut _1: [&str; 3];               // in scope 0 at ui/new-impl-syntax.rs:12:19: 12:43

    bb0: {
        _1 = [const "{ x: ", const ", y: ", const " }"]; // scope 0 at ui/new-impl-syntax.rs:12:19: 12:43
                                         // mir::Constant
                                         // + span: ui/new-impl-syntax.rs:12:19: 12:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/new-impl-syntax.rs:12:19: 12:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/new-impl-syntax.rs:12:19: 12:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/new-impl-syntax.rs:12:19: 12:43
        return;                          // scope 0 at ui/new-impl-syntax.rs:12:19: 12:43
    }
}

fn <impl at ui/new-impl-syntax.rs:20:1: 20:55>::fmt(_1: &PolymorphicThingy<T>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/new-impl-syntax.rs:21:12: 21:17
    debug f => _2;                       // in scope 0 at ui/new-impl-syntax.rs:21:19: 21:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/new-impl-syntax.rs:21:46: 21:57
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _5: &[&str];                 // in scope 0 at ui/new-impl-syntax.rs:22:19: 22:25
    let mut _6: &[&str; 1];              // in scope 0 at ui/new-impl-syntax.rs:22:19: 22:25
    let _7: &[&str; 1];                  // in scope 0 at ui/new-impl-syntax.rs:22:19: 22:25
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/new-impl-syntax.rs:22:27: 22:33
    let mut _13: &T;                     // in scope 0 at ui/new-impl-syntax.rs:22:27: 22:33
    let _14: &T;                         // in scope 0 at ui/new-impl-syntax.rs:22:27: 22:33
    let mut _15: &[&str; 1];             // in scope 0 at ui/new-impl-syntax.rs:22:19: 22:25

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
        _15 = const _;                   // scope 0 at ui/new-impl-syntax.rs:22:19: 22:25
                                         // mir::Constant
                                         // + span: ui/new-impl-syntax.rs:22:19: 22:25
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<PolymorphicThingy<T> as Debug>::fmt, [T], Some(promoted[0])) }
        _7 = _15;                        // scope 0 at ui/new-impl-syntax.rs:22:19: 22:25
        _6 = _7;                         // scope 0 at ui/new-impl-syntax.rs:22:19: 22:25
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at ui/new-impl-syntax.rs:22:19: 22:25
        _14 = &((*_1).0: T);             // scope 0 at ui/new-impl-syntax.rs:22:27: 22:33
        _13 = _14;                       // scope 0 at ui/new-impl-syntax.rs:22:27: 22:33
        _12 = core::fmt::ArgumentV1::<'_>::new_debug::<T>(move _13) -> bb1; // scope 0 at ui/new-impl-syntax.rs:22:27: 22:33
                                         // mir::Constant
                                         // + span: ui/new-impl-syntax.rs:22:27: 22:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b T) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = [move _12];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _10 = &_11;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Formatter::<'_>::write_fmt(move _3, move _4) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/new-impl-syntax.rs:23:6: 23:6
    }
}

promoted[0] in <impl at ui/new-impl-syntax.rs:20:1: 20:55>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/new-impl-syntax.rs:22:19: 22:25
    let mut _1: [&str; 1];               // in scope 0 at ui/new-impl-syntax.rs:22:19: 22:25

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/new-impl-syntax.rs:22:19: 22:25
                                         // mir::Constant
                                         // + span: ui/new-impl-syntax.rs:22:19: 22:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/new-impl-syntax.rs:22:19: 22:25
        return;                          // scope 0 at ui/new-impl-syntax.rs:22:19: 22:25
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/new-impl-syntax.rs:26:15: 26:15
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _3: &[&str];                 // in scope 0 at ui/new-impl-syntax.rs:27:14: 27:20
    let mut _4: &[&str; 2];              // in scope 0 at ui/new-impl-syntax.rs:27:14: 27:20
    let _5: &[&str; 2];                  // in scope 0 at ui/new-impl-syntax.rs:27:14: 27:20
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/new-impl-syntax.rs:27:22: 27:43
    let mut _11: &Thingy;                // in scope 0 at ui/new-impl-syntax.rs:27:22: 27:43
    let _12: &Thingy;                    // in scope 0 at ui/new-impl-syntax.rs:27:22: 27:43
    let _13: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _14: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _15: &[&str];                // in scope 0 at ui/new-impl-syntax.rs:28:14: 28:20
    let mut _16: &[&str; 2];             // in scope 0 at ui/new-impl-syntax.rs:28:14: 28:20
    let _17: &[&str; 2];                 // in scope 0 at ui/new-impl-syntax.rs:28:14: 28:20
    let mut _18: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _19: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _20: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _21: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _22: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/new-impl-syntax.rs:28:22: 28:68
    let mut _23: &PolymorphicThingy<Thingy>; // in scope 0 at ui/new-impl-syntax.rs:28:22: 28:68
    let _24: &PolymorphicThingy<Thingy>; // in scope 0 at ui/new-impl-syntax.rs:28:22: 28:68
    let mut _25: &PolymorphicThingy<Thingy>; // in scope 0 at ui/new-impl-syntax.rs:28:22: 28:68
    let mut _26: &[&str; 2];             // in scope 0 at ui/new-impl-syntax.rs:28:14: 28:20
    let mut _27: &Thingy;                // in scope 0 at ui/new-impl-syntax.rs:27:22: 27:43
    let mut _28: &[&str; 2];             // in scope 0 at ui/new-impl-syntax.rs:27:14: 27:20

    bb0: {
        _28 = const _;                   // scope 0 at ui/new-impl-syntax.rs:27:14: 27:20
                                         // mir::Constant
                                         // + span: ui/new-impl-syntax.rs:27:14: 27:20
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[3])) }
        _5 = _28;                        // scope 0 at ui/new-impl-syntax.rs:27:14: 27:20
        _4 = _5;                         // scope 0 at ui/new-impl-syntax.rs:27:14: 27:20
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/new-impl-syntax.rs:27:14: 27:20
        _27 = const _;                   // scope 0 at ui/new-impl-syntax.rs:27:22: 27:43
                                         // mir::Constant
                                         // + span: ui/new-impl-syntax.rs:27:22: 27:43
                                         // + literal: Const { ty: &Thingy, val: Unevaluated(main, [], Some(promoted[2])) }
        _12 = _27;                       // scope 0 at ui/new-impl-syntax.rs:27:22: 27:43
        _11 = _12;                       // scope 0 at ui/new-impl-syntax.rs:27:22: 27:43
        _10 = core::fmt::ArgumentV1::<'_>::new_debug::<Thingy>(move _11) -> bb1; // scope 0 at ui/new-impl-syntax.rs:27:22: 27:43
                                         // mir::Constant
                                         // + span: ui/new-impl-syntax.rs:27:22: 27:43
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b Thingy) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Thingy>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = [move _10];                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = _print(move _2) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _26 = const _;                   // scope 0 at ui/new-impl-syntax.rs:28:14: 28:20
                                         // mir::Constant
                                         // + span: ui/new-impl-syntax.rs:28:14: 28:20
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _17 = _26;                       // scope 0 at ui/new-impl-syntax.rs:28:14: 28:20
        _16 = _17;                       // scope 0 at ui/new-impl-syntax.rs:28:14: 28:20
        _15 = move _16 as &[&str] (Pointer(Unsize)); // scope 0 at ui/new-impl-syntax.rs:28:14: 28:20
        _25 = const _;                   // scope 0 at ui/new-impl-syntax.rs:28:22: 28:68
                                         // mir::Constant
                                         // + span: ui/new-impl-syntax.rs:28:22: 28:68
                                         // + literal: Const { ty: &PolymorphicThingy<Thingy>, val: Unevaluated(main, [], Some(promoted[0])) }
        _24 = _25;                       // scope 0 at ui/new-impl-syntax.rs:28:22: 28:68
        _23 = _24;                       // scope 0 at ui/new-impl-syntax.rs:28:22: 28:68
        _22 = core::fmt::ArgumentV1::<'_>::new_debug::<PolymorphicThingy<Thingy>>(move _23) -> bb4; // scope 0 at ui/new-impl-syntax.rs:28:22: 28:68
                                         // mir::Constant
                                         // + span: ui/new-impl-syntax.rs:28:22: 28:68
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b PolymorphicThingy<Thingy>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<PolymorphicThingy<Thingy>>}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = [move _22];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = &_21;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _19 = _20;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _18 = move _19 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _14 = Arguments::<'_>::new_v1(move _15, move _18) -> bb5; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = _print(move _14) -> bb6;   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/new-impl-syntax.rs:29:2: 29:2
    }
}

promoted[0] in main: &PolymorphicThingy<Thingy> = {
    let mut _0: &PolymorphicThingy<Thingy>; // return place in scope 0 at ui/new-impl-syntax.rs:28:22: 28:68
    let mut _1: PolymorphicThingy<Thingy>; // in scope 0 at ui/new-impl-syntax.rs:28:22: 28:68
    let mut _2: Thingy;                  // in scope 0 at ui/new-impl-syntax.rs:28:45: 28:66

    bb0: {
        _2 = Thingy { x: const 1_isize, y: const 2_isize }; // scope 0 at ui/new-impl-syntax.rs:28:45: 28:66
        _1 = PolymorphicThingy::<Thingy> { x: move _2 }; // scope 0 at ui/new-impl-syntax.rs:28:22: 28:68
        _0 = &_1;                        // scope 0 at ui/new-impl-syntax.rs:28:22: 28:68
        return;                          // scope 0 at ui/new-impl-syntax.rs:28:22: 28:68
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/new-impl-syntax.rs:28:14: 28:20
    let mut _1: [&str; 2];               // in scope 0 at ui/new-impl-syntax.rs:28:14: 28:20

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/new-impl-syntax.rs:28:14: 28:20
                                         // mir::Constant
                                         // + span: ui/new-impl-syntax.rs:28:14: 28:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/new-impl-syntax.rs:28:14: 28:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/new-impl-syntax.rs:28:14: 28:20
        return;                          // scope 0 at ui/new-impl-syntax.rs:28:14: 28:20
    }
}

promoted[2] in main: &Thingy = {
    let mut _0: &Thingy;                 // return place in scope 0 at ui/new-impl-syntax.rs:27:22: 27:43
    let mut _1: Thingy;                  // in scope 0 at ui/new-impl-syntax.rs:27:22: 27:43

    bb0: {
        _1 = Thingy { x: const 1_isize, y: const 2_isize }; // scope 0 at ui/new-impl-syntax.rs:27:22: 27:43
        _0 = &_1;                        // scope 0 at ui/new-impl-syntax.rs:27:22: 27:43
        return;                          // scope 0 at ui/new-impl-syntax.rs:27:22: 27:43
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/new-impl-syntax.rs:27:14: 27:20
    let mut _1: [&str; 2];               // in scope 0 at ui/new-impl-syntax.rs:27:14: 27:20

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/new-impl-syntax.rs:27:14: 27:20
                                         // mir::Constant
                                         // + span: ui/new-impl-syntax.rs:27:14: 27:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/new-impl-syntax.rs:27:14: 27:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/new-impl-syntax.rs:27:14: 27:20
        return;                          // scope 0 at ui/new-impl-syntax.rs:27:14: 27:20
    }
}
