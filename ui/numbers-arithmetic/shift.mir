// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();

    bb0: {
        _1 = test_misc() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = test_expr() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = test_const() -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn test_misc() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let _2: &i32;
    let _3: &i32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: i32;
    let mut _7: i32;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: &i32;
    let mut _12: &i32;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }

    bb0: {
        _12 = const _;
        _11 = const _;
        _1 = (_12, _11);
        _2 = (_1.0: &i32);
        _3 = (_1.1: &i32);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<i32, i32>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        return;
    }
}

promoted[0] in test_misc: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 32_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in test_misc: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;
    let mut _2: i32;
    let mut _3: i32;
    let mut _4: i32;
    let mut _5: i32;

    bb0: {
        _5 = Shl(const 1_i32, const 1_i32);
        _4 = Shl(move _5, const 1_i32);
        _3 = Shl(move _4, const 1_i32);
        _2 = Shl(move _3, const 1_i32);
        _1 = Shl(move _2, const 1_i32);
        _0 = &_1;
        return;
    }
}

fn test_expr() -> () {
    let mut _0: ();
    let _1: usize;
    let mut _4: (&usize, &usize);
    let mut _5: &usize;
    let _6: usize;
    let mut _7: usize;
    let mut _8: &usize;
    let _9: usize;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: usize;
    let mut _15: usize;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: (&usize, &usize);
    let mut _20: &usize;
    let _21: usize;
    let mut _22: usize;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: usize;
    let mut _28: usize;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&u8, &u8);
    let mut _36: &u8;
    let _37: u8;
    let mut _38: &u8;
    let _39: u8;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: u8;
    let mut _45: u8;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&u8, &u8);
    let mut _50: &u8;
    let _51: u8;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: u8;
    let mut _57: u8;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _64: (&isize, &isize);
    let mut _65: &isize;
    let _66: isize;
    let mut _67: usize;
    let mut _68: &isize;
    let _69: isize;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: isize;
    let mut _75: isize;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _79: (&isize, &isize);
    let mut _80: &isize;
    let _81: isize;
    let mut _82: usize;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: isize;
    let mut _88: isize;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _95: (&i8, &i8);
    let mut _96: &i8;
    let _97: i8;
    let mut _98: usize;
    let mut _99: &i8;
    let _100: i8;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: i8;
    let mut _106: i8;
    let _108: !;
    let mut _109: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _110: (&i8, &i8);
    let mut _111: &i8;
    let _112: i8;
    let mut _113: usize;
    let mut _116: bool;
    let mut _117: bool;
    let mut _118: i8;
    let mut _119: i8;
    let _121: !;
    let mut _122: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _126: (&usize, &usize);
    let mut _127: &usize;
    let _128: usize;
    let mut _129: usize;
    let mut _130: &usize;
    let _131: usize;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: usize;
    let mut _137: usize;
    let _139: !;
    let mut _140: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _141: (&usize, &usize);
    let mut _142: &usize;
    let _143: usize;
    let mut _144: usize;
    let mut _147: bool;
    let mut _148: bool;
    let mut _149: usize;
    let mut _150: usize;
    let _152: !;
    let mut _153: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug v10 => const 10_usize;
        let _2: u8;
        scope 2 {
            debug v4 => const 4_u8;
            let _3: u8;
            scope 3 {
                debug v2 => const 2_u8;
                let _10: &usize;
                let _11: &usize;
                let _23: &usize;
                let _24: &usize;
                let _32: u8;
                let mut _158: &usize;
                scope 4 {
                    debug left_val => _10;
                    debug right_val => _11;
                    let _16: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _16;
                    }
                }
                scope 6 {
                    debug left_val => _23;
                    debug right_val => _24;
                    let _29: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _29;
                    }
                }
                scope 8 {
                    debug v10 => const 10_u8;
                    let _33: usize;
                    scope 9 {
                        debug v4 => const 4_usize;
                        let _34: usize;
                        scope 10 {
                            debug v2 => const 2_usize;
                            let _40: &u8;
                            let _41: &u8;
                            let _52: &u8;
                            let _53: &u8;
                            let _61: isize;
                            let mut _157: &u8;
                            scope 11 {
                                debug left_val => _40;
                                debug right_val => _41;
                                let _46: core::panicking::AssertKind;
                                scope 12 {
                                    debug kind => _46;
                                }
                            }
                            scope 13 {
                                debug left_val => _52;
                                debug right_val => _53;
                                let _58: core::panicking::AssertKind;
                                scope 14 {
                                    debug kind => _58;
                                }
                            }
                            scope 15 {
                                debug v10 => const 10_isize;
                                let _62: i8;
                                scope 16 {
                                    debug v4 => const 4_i8;
                                    let _63: i8;
                                    scope 17 {
                                        debug v2 => const 2_i8;
                                        let _70: &isize;
                                        let _71: &isize;
                                        let _83: &isize;
                                        let _84: &isize;
                                        let _92: i8;
                                        let mut _156: &isize;
                                        scope 18 {
                                            debug left_val => _70;
                                            debug right_val => _71;
                                            let _76: core::panicking::AssertKind;
                                            scope 19 {
                                                debug kind => _76;
                                            }
                                        }
                                        scope 20 {
                                            debug left_val => _83;
                                            debug right_val => _84;
                                            let _89: core::panicking::AssertKind;
                                            scope 21 {
                                                debug kind => _89;
                                            }
                                        }
                                        scope 22 {
                                            debug v10 => const 10_i8;
                                            let _93: isize;
                                            scope 23 {
                                                debug v4 => const 4_isize;
                                                let _94: isize;
                                                scope 24 {
                                                    debug v2 => const 2_isize;
                                                    let _101: &i8;
                                                    let _102: &i8;
                                                    let _114: &i8;
                                                    let _115: &i8;
                                                    let _123: usize;
                                                    let mut _155: &i8;
                                                    scope 25 {
                                                        debug left_val => _101;
                                                        debug right_val => _102;
                                                        let _107: core::panicking::AssertKind;
                                                        scope 26 {
                                                            debug kind => _107;
                                                        }
                                                    }
                                                    scope 27 {
                                                        debug left_val => _114;
                                                        debug right_val => _115;
                                                        let _120: core::panicking::AssertKind;
                                                        scope 28 {
                                                            debug kind => _120;
                                                        }
                                                    }
                                                    scope 29 {
                                                        debug v10 => const 10_usize;
                                                        let _124: isize;
                                                        scope 30 {
                                                            debug v4 => const 4_isize;
                                                            let _125: isize;
                                                            scope 31 {
                                                                debug v2 => const 2_isize;
                                                                let _132: &usize;
                                                                let _133: &usize;
                                                                let _145: &usize;
                                                                let _146: &usize;
                                                                let mut _154: &usize;
                                                                scope 32 {
                                                                    debug left_val => _132;
                                                                    debug right_val => _133;
                                                                    let _138: core::panicking::AssertKind;
                                                                    scope 33 {
                                                                        debug kind => _138;
                                                                    }
                                                                }
                                                                scope 34 {
                                                                    debug left_val => _145;
                                                                    debug right_val => _146;
                                                                    let _151: core::panicking::AssertKind;
                                                                    scope 35 {
                                                                        debug kind => _151;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 10_usize;
        _2 = const 4_u8;
        _3 = const 2_u8;
        _7 = _3 as usize (IntToInt);
        _6 = Shr(_1, move _7);
        _5 = &_6;
        _9 = _3 as usize (IntToInt);
        _8 = &_9;
        _4 = (move _5, move _8);
        _10 = (_4.0: &usize);
        _11 = (_4.1: &usize);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<usize, usize>(move _16, _10, _11, move _18) -> unwind continue;
    }

    bb2: {
        _22 = _2 as usize (IntToInt);
        _21 = Shl(_1, move _22);
        _20 = &_21;
        _158 = const _;
        _19 = (move _20, _158);
        _23 = (_19.0: &usize);
        _24 = (_19.1: &usize);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<usize, usize>(move _29, _23, _24, move _31) -> unwind continue;
    }

    bb4: {
        _32 = const 10_u8;
        _33 = const 4_usize;
        _34 = const 2_usize;
        _37 = Shr(_32, _34);
        _36 = &_37;
        _39 = _34 as u8 (IntToInt);
        _38 = &_39;
        _35 = (move _36, move _38);
        _40 = (_35.0: &u8);
        _41 = (_35.1: &u8);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<u8, u8>(move _46, _40, _41, move _48) -> unwind continue;
    }

    bb6: {
        _51 = Shl(_32, _33);
        _50 = &_51;
        _157 = const _;
        _49 = (move _50, _157);
        _52 = (_49.0: &u8);
        _53 = (_49.1: &u8);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<u8, u8>(move _58, _52, _53, move _60) -> unwind continue;
    }

    bb8: {
        _61 = const 10_isize;
        _62 = const 4_i8;
        _63 = const 2_i8;
        _67 = _63 as usize (IntToInt);
        _66 = Shr(_61, move _67);
        _65 = &_66;
        _69 = _63 as isize (IntToInt);
        _68 = &_69;
        _64 = (move _65, move _68);
        _70 = (_64.0: &isize);
        _71 = (_64.1: &isize);
        _74 = (*_70);
        _75 = (*_71);
        _73 = Eq(move _74, move _75);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<isize, isize>(move _76, _70, _71, move _78) -> unwind continue;
    }

    bb10: {
        _82 = _62 as usize (IntToInt);
        _81 = Shl(_61, move _82);
        _80 = &_81;
        _156 = const _;
        _79 = (move _80, _156);
        _83 = (_79.0: &isize);
        _84 = (_79.1: &isize);
        _87 = (*_83);
        _88 = (*_84);
        _86 = Eq(move _87, move _88);
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<isize, isize>(move _89, _83, _84, move _91) -> unwind continue;
    }

    bb12: {
        _92 = const 10_i8;
        _93 = const 4_isize;
        _94 = const 2_isize;
        _98 = _94 as usize (IntToInt);
        _97 = Shr(_92, move _98);
        _96 = &_97;
        _100 = _94 as i8 (IntToInt);
        _99 = &_100;
        _95 = (move _96, move _99);
        _101 = (_95.0: &i8);
        _102 = (_95.1: &i8);
        _105 = (*_101);
        _106 = (*_102);
        _104 = Eq(move _105, move _106);
        _103 = Not(move _104);
        switchInt(move _103) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _107 = core::panicking::AssertKind::Eq;
        _109 = Option::<Arguments<'_>>::None;
        _108 = core::panicking::assert_failed::<i8, i8>(move _107, _101, _102, move _109) -> unwind continue;
    }

    bb14: {
        _113 = _93 as usize (IntToInt);
        _112 = Shl(_92, move _113);
        _111 = &_112;
        _155 = const _;
        _110 = (move _111, _155);
        _114 = (_110.0: &i8);
        _115 = (_110.1: &i8);
        _118 = (*_114);
        _119 = (*_115);
        _117 = Eq(move _118, move _119);
        _116 = Not(move _117);
        switchInt(move _116) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _120 = core::panicking::AssertKind::Eq;
        _122 = Option::<Arguments<'_>>::None;
        _121 = core::panicking::assert_failed::<i8, i8>(move _120, _114, _115, move _122) -> unwind continue;
    }

    bb16: {
        _123 = const 10_usize;
        _124 = const 4_isize;
        _125 = const 2_isize;
        _129 = _125 as usize (IntToInt);
        _128 = Shr(_123, move _129);
        _127 = &_128;
        _131 = _125 as usize (IntToInt);
        _130 = &_131;
        _126 = (move _127, move _130);
        _132 = (_126.0: &usize);
        _133 = (_126.1: &usize);
        _136 = (*_132);
        _137 = (*_133);
        _135 = Eq(move _136, move _137);
        _134 = Not(move _135);
        switchInt(move _134) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _138 = core::panicking::AssertKind::Eq;
        _140 = Option::<Arguments<'_>>::None;
        _139 = core::panicking::assert_failed::<usize, usize>(move _138, _132, _133, move _140) -> unwind continue;
    }

    bb18: {
        _144 = _124 as usize (IntToInt);
        _143 = Shl(_123, move _144);
        _142 = &_143;
        _154 = const _;
        _141 = (move _142, _154);
        _145 = (_141.0: &usize);
        _146 = (_141.1: &usize);
        _149 = (*_145);
        _150 = (*_146);
        _148 = Eq(move _149, move _150);
        _147 = Not(move _148);
        switchInt(move _147) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _151 = core::panicking::AssertKind::Eq;
        _153 = Option::<Arguments<'_>>::None;
        _152 = core::panicking::assert_failed::<usize, usize>(move _151, _145, _146, move _153) -> unwind continue;
    }

    bb20: {
        return;
    }
}

promoted[0] in test_expr: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 160_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in test_expr: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const -96_i8;
        _0 = &_1;
        return;
    }
}

promoted[2] in test_expr: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 160_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in test_expr: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 160_u8;
        _0 = &_1;
        return;
    }
}

promoted[4] in test_expr: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 160_usize;
        _0 = &_1;
        return;
    }
}

fn test_const() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let _3: &usize;
    let _4: &usize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: usize;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: (&usize, &usize);
    let _13: &usize;
    let _14: &usize;
    let _15: &usize;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: (&u8, &u8);
    let _24: &u8;
    let _25: &u8;
    let _26: &u8;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: u8;
    let mut _30: u8;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: (&u8, &u8);
    let _35: &u8;
    let _36: &u8;
    let _37: &u8;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: u8;
    let mut _41: u8;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&isize, &isize);
    let _46: &isize;
    let _47: &isize;
    let _48: &isize;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: isize;
    let mut _52: isize;
    let _54: !;
    let mut _55: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _56: (&isize, &isize);
    let _57: &isize;
    let _58: &isize;
    let _59: &isize;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: isize;
    let mut _63: isize;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: (&i8, &i8);
    let _68: &i8;
    let _69: &i8;
    let _70: &i8;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: i8;
    let mut _74: i8;
    let _76: !;
    let mut _77: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _78: (&i8, &i8);
    let _79: &i8;
    let _80: &i8;
    let _81: &i8;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: i8;
    let mut _85: i8;
    let _87: !;
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _89: (&usize, &usize);
    let _90: &usize;
    let _91: &usize;
    let _92: &usize;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: usize;
    let mut _96: usize;
    let _98: !;
    let mut _99: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _100: (&usize, &usize);
    let _101: &usize;
    let _102: &usize;
    let _103: &usize;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: usize;
    let mut _107: usize;
    let _109: !;
    let mut _110: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _111: &usize;
    let mut _112: &usize;
    let mut _113: &i8;
    let mut _114: &i8;
    let mut _115: &isize;
    let mut _116: &isize;
    let mut _117: &u8;
    let mut _118: &u8;
    let mut _119: &usize;
    let mut _120: &usize;
    scope 1 {
        debug left_val => _3;
        debug right_val => _4;
        let _9: core::panicking::AssertKind;
        scope 2 {
            debug kind => _9;
        }
    }
    scope 3 {
        debug left_val => _14;
        debug right_val => _15;
        let _20: core::panicking::AssertKind;
        scope 4 {
            debug kind => _20;
        }
    }
    scope 5 {
        debug left_val => _25;
        debug right_val => _26;
        let _31: core::panicking::AssertKind;
        scope 6 {
            debug kind => _31;
        }
    }
    scope 7 {
        debug left_val => _36;
        debug right_val => _37;
        let _42: core::panicking::AssertKind;
        scope 8 {
            debug kind => _42;
        }
    }
    scope 9 {
        debug left_val => _47;
        debug right_val => _48;
        let _53: core::panicking::AssertKind;
        scope 10 {
            debug kind => _53;
        }
    }
    scope 11 {
        debug left_val => _58;
        debug right_val => _59;
        let _64: core::panicking::AssertKind;
        scope 12 {
            debug kind => _64;
        }
    }
    scope 13 {
        debug left_val => _69;
        debug right_val => _70;
        let _75: core::panicking::AssertKind;
        scope 14 {
            debug kind => _75;
        }
    }
    scope 15 {
        debug left_val => _80;
        debug right_val => _81;
        let _86: core::panicking::AssertKind;
        scope 16 {
            debug kind => _86;
        }
    }
    scope 17 {
        debug left_val => _91;
        debug right_val => _92;
        let _97: core::panicking::AssertKind;
        scope 18 {
            debug kind => _97;
        }
    }
    scope 19 {
        debug left_val => _102;
        debug right_val => _103;
        let _108: core::panicking::AssertKind;
        scope 20 {
            debug kind => _108;
        }
    }

    bb0: {
        _2 = const {alloc1: &usize};
        _120 = const _;
        _1 = (_2, _120);
        _3 = (_1.0: &usize);
        _4 = (_1.1: &usize);
        _7 = (*_3);
        _8 = (*_4);
        _6 = Eq(move _7, move _8);
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<usize, usize>(move _9, _3, _4, move _11) -> unwind continue;
    }

    bb2: {
        _13 = const {alloc2: &usize};
        _119 = const _;
        _12 = (_13, _119);
        _14 = (_12.0: &usize);
        _15 = (_12.1: &usize);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<usize, usize>(move _20, _14, _15, move _22) -> unwind continue;
    }

    bb4: {
        _24 = const {alloc3: &u8};
        _118 = const _;
        _23 = (_24, _118);
        _25 = (_23.0: &u8);
        _26 = (_23.1: &u8);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<u8, u8>(move _31, _25, _26, move _33) -> unwind continue;
    }

    bb6: {
        _35 = const {alloc4: &u8};
        _117 = const _;
        _34 = (_35, _117);
        _36 = (_34.0: &u8);
        _37 = (_34.1: &u8);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<u8, u8>(move _42, _36, _37, move _44) -> unwind continue;
    }

    bb8: {
        _46 = const {alloc5: &isize};
        _116 = const _;
        _45 = (_46, _116);
        _47 = (_45.0: &isize);
        _48 = (_45.1: &isize);
        _51 = (*_47);
        _52 = (*_48);
        _50 = Eq(move _51, move _52);
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _53 = core::panicking::AssertKind::Eq;
        _55 = Option::<Arguments<'_>>::None;
        _54 = core::panicking::assert_failed::<isize, isize>(move _53, _47, _48, move _55) -> unwind continue;
    }

    bb10: {
        _57 = const {alloc6: &isize};
        _115 = const _;
        _56 = (_57, _115);
        _58 = (_56.0: &isize);
        _59 = (_56.1: &isize);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<isize, isize>(move _64, _58, _59, move _66) -> unwind continue;
    }

    bb12: {
        _68 = const {alloc7: &i8};
        _114 = const _;
        _67 = (_68, _114);
        _69 = (_67.0: &i8);
        _70 = (_67.1: &i8);
        _73 = (*_69);
        _74 = (*_70);
        _72 = Eq(move _73, move _74);
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _75 = core::panicking::AssertKind::Eq;
        _77 = Option::<Arguments<'_>>::None;
        _76 = core::panicking::assert_failed::<i8, i8>(move _75, _69, _70, move _77) -> unwind continue;
    }

    bb14: {
        _79 = const {alloc8: &i8};
        _113 = const _;
        _78 = (_79, _113);
        _80 = (_78.0: &i8);
        _81 = (_78.1: &i8);
        _84 = (*_80);
        _85 = (*_81);
        _83 = Eq(move _84, move _85);
        _82 = Not(move _83);
        switchInt(move _82) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _86 = core::panicking::AssertKind::Eq;
        _88 = Option::<Arguments<'_>>::None;
        _87 = core::panicking::assert_failed::<i8, i8>(move _86, _80, _81, move _88) -> unwind continue;
    }

    bb16: {
        _90 = const {alloc9: &usize};
        _112 = const _;
        _89 = (_90, _112);
        _91 = (_89.0: &usize);
        _92 = (_89.1: &usize);
        _95 = (*_91);
        _96 = (*_92);
        _94 = Eq(move _95, move _96);
        _93 = Not(move _94);
        switchInt(move _93) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _97 = core::panicking::AssertKind::Eq;
        _99 = Option::<Arguments<'_>>::None;
        _98 = core::panicking::assert_failed::<usize, usize>(move _97, _91, _92, move _99) -> unwind continue;
    }

    bb18: {
        _101 = const {alloc10: &usize};
        _111 = const _;
        _100 = (_101, _111);
        _102 = (_100.0: &usize);
        _103 = (_100.1: &usize);
        _106 = (*_102);
        _107 = (*_103);
        _105 = Eq(move _106, move _107);
        _104 = Not(move _105);
        switchInt(move _104) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _108 = core::panicking::AssertKind::Eq;
        _110 = Option::<Arguments<'_>>::None;
        _109 = core::panicking::assert_failed::<usize, usize>(move _108, _102, _103, move _110) -> unwind continue;
    }

    bb20: {
        return;
    }
}

alloc10 (static: r2_5, size: 8, align: 8) {
    a0 00 00 00 00 00 00 00                         │ ........
}

alloc9 (static: r1_5, size: 8, align: 8) {
    02 00 00 00 00 00 00 00                         │ ........
}

alloc8 (static: r2_4, size: 1, align: 1) {
    a0                                              │ .
}

alloc7 (static: r1_4, size: 1, align: 1) {
    02                                              │ .
}

alloc6 (static: r2_3, size: 8, align: 8) {
    a0 00 00 00 00 00 00 00                         │ ........
}

alloc5 (static: r1_3, size: 8, align: 8) {
    02 00 00 00 00 00 00 00                         │ ........
}

alloc4 (static: r2_2, size: 1, align: 1) {
    a0                                              │ .
}

alloc3 (static: r1_2, size: 1, align: 1) {
    02                                              │ .
}

alloc2 (static: r2_1, size: 8, align: 8) {
    a0 00 00 00 00 00 00 00                         │ ........
}

alloc1 (static: r1_1, size: 8, align: 8) {
    02 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in test_const: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 160_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in test_const: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in test_const: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const -96_i8;
        _0 = &_1;
        return;
    }
}

promoted[3] in test_const: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 2_i8;
        _0 = &_1;
        return;
    }
}

promoted[4] in test_const: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 160_isize;
        _0 = &_1;
        return;
    }
}

promoted[5] in test_const: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[6] in test_const: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 160_u8;
        _0 = &_1;
        return;
    }
}

promoted[7] in test_const: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[8] in test_const: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 160_usize;
        _0 = &_1;
        return;
    }
}

promoted[9] in test_const: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

static r1_1: usize = {
    let mut _0: usize;
    let mut _1: bool;

    bb0: {
        _1 = Lt(const 2_usize, const 64_usize);
        assert(move _1, "attempt to shift right by `{}`, which would overflow", const 2_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Shr(const 10_usize, const 2_usize);
        return;
    }
}

static r2_1: usize = {
    let mut _0: usize;
    let mut _1: bool;

    bb0: {
        _1 = Lt(const 4_usize, const 64_usize);
        assert(move _1, "attempt to shift left by `{}`, which would overflow", const 4_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Shl(const 10_usize, const 4_usize);
        return;
    }
}

static r1_2: u8 = {
    let mut _0: u8;
    let mut _1: bool;

    bb0: {
        _1 = Lt(const 2_usize, const 8_usize);
        assert(move _1, "attempt to shift right by `{}`, which would overflow", const 2_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Shr(const 10_u8, const 2_usize);
        return;
    }
}

static r2_2: u8 = {
    let mut _0: u8;
    let mut _1: bool;

    bb0: {
        _1 = Lt(const 4_usize, const 8_usize);
        assert(move _1, "attempt to shift left by `{}`, which would overflow", const 4_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Shl(const 10_u8, const 4_usize);
        return;
    }
}

static r1_3: isize = {
    let mut _0: isize;
    let mut _1: bool;

    bb0: {
        _1 = Lt(const 2_usize, const 64_usize);
        assert(move _1, "attempt to shift right by `{}`, which would overflow", const 2_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Shr(const 10_isize, const 2_usize);
        return;
    }
}

static r2_3: isize = {
    let mut _0: isize;
    let mut _1: bool;

    bb0: {
        _1 = Lt(const 4_usize, const 64_usize);
        assert(move _1, "attempt to shift left by `{}`, which would overflow", const 4_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Shl(const 10_isize, const 4_usize);
        return;
    }
}

static r1_4: i8 = {
    let mut _0: i8;
    let mut _1: bool;

    bb0: {
        _1 = Lt(const 2_usize, const 8_usize);
        assert(move _1, "attempt to shift right by `{}`, which would overflow", const 2_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Shr(const 10_i8, const 2_usize);
        return;
    }
}

static r2_4: i8 = {
    let mut _0: i8;
    let mut _1: bool;

    bb0: {
        _1 = Lt(const 4_usize, const 8_usize);
        assert(move _1, "attempt to shift left by `{}`, which would overflow", const 4_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Shl(const 10_i8, const 4_usize);
        return;
    }
}

static r1_5: usize = {
    let mut _0: usize;
    let mut _1: bool;

    bb0: {
        _1 = Lt(const 2_usize, const 64_usize);
        assert(move _1, "attempt to shift right by `{}`, which would overflow", const 2_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Shr(const 10_usize, const 2_usize);
        return;
    }
}

static r2_5: usize = {
    let mut _0: usize;
    let mut _1: bool;

    bb0: {
        _1 = Lt(const 4_usize, const 64_usize);
        assert(move _1, "attempt to shift left by `{}`, which would overflow", const 4_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Shl(const 10_usize, const 4_usize);
        return;
    }
}
