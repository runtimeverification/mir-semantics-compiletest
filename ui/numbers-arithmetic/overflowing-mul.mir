// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/overflowing-mul.rs:8:11: 8:11
    let _1: u8;                          // in scope 0 at ui/numbers-arithmetic/overflowing-mul.rs:9:9: 9:10
    let mut _2: (u8, bool);              // in scope 0 at ui/numbers-arithmetic/overflowing-mul.rs:9:13: 9:22
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/numbers-arithmetic/overflowing-mul.rs:9:9: 9:10
    }

    bb0: {
        _2 = CheckedMul(const 200_u8, const 4_u8); // scope 0 at ui/numbers-arithmetic/overflowing-mul.rs:9:13: 9:22
        assert(!move (_2.1: bool), "attempt to compute `{} * {}`, which would overflow", const 200_u8, const 4_u8) -> bb1; // scope 0 at ui/numbers-arithmetic/overflowing-mul.rs:9:13: 9:22
    }

    bb1: {
        _1 = move (_2.0: u8);            // scope 0 at ui/numbers-arithmetic/overflowing-mul.rs:9:13: 9:22
        return;                          // scope 0 at ui/numbers-arithmetic/overflowing-mul.rs:10:2: 10:2
    }
}
