// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/overflowing-neg.rs:8:11: 8:11
    let _1: i8;                          // in scope 0 at ui/numbers-arithmetic/overflowing-neg.rs:9:9: 9:11
    let mut _2: bool;                    // in scope 0 at ui/numbers-arithmetic/overflowing-neg.rs:9:14: 9:22
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/numbers-arithmetic/overflowing-neg.rs:9:9: 9:11
    }

    bb0: {
        _2 = const true;                 // scope 0 at ui/numbers-arithmetic/overflowing-neg.rs:9:14: 9:22
        assert(!move _2, "attempt to negate `{}`, which would overflow", const _) -> bb1; // scope 0 at ui/numbers-arithmetic/overflowing-neg.rs:9:14: 9:22
    }

    bb1: {
        _1 = Neg(const _);               // scope 0 at ui/numbers-arithmetic/overflowing-neg.rs:9:14: 9:22
        return;                          // scope 0 at ui/numbers-arithmetic/overflowing-neg.rs:10:2: 10:2
    }
}
