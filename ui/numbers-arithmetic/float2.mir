// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: f64;
    let mut _12: (&f64, &f64);
    let mut _13: &f64;
    let mut _14: &f64;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: f64;
    let mut _20: f64;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: f64;
    let mut _27: f64;
    let mut _28: !;
    let mut _29: (&f64, &f64);
    let mut _30: &f64;
    let mut _31: &f64;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: f64;
    let mut _37: f64;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: f32;
    let mut _44: !;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: f64;
    let mut _48: !;
    let mut _49: (&f32, &f32);
    let mut _50: &f32;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: f32;
    let mut _56: f32;
    let _58: !;
    let mut _59: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _60: (&f64, &f64);
    let mut _61: &f64;
    let mut _62: &f64;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: f64;
    let mut _68: f64;
    let _70: !;
    let mut _71: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: !;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: f64;
    let mut _78: !;
    scope 1 {
        debug a => const 1.5E+6f64;
        let _2: f64;
        scope 2 {
            debug b => const 1.5E+6f64;
            let _3: f64;
            scope 3 {
                debug c => const 1.0E+6f64;
                let _4: f64;
                scope 4 {
                    debug d => const 1.0E+6f64;
                    let _5: f32;
                    scope 5 {
                        debug e => const 3f32;
                        let _6: f64;
                        scope 6 {
                            debug f => const 5.9000000000000004f64;
                            let _7: f32;
                            scope 7 {
                                debug g => const 1.0E+6f32;
                                let _8: f64;
                                scope 8 {
                                    debug h => const 1.0E+7f64;
                                    let _9: f64;
                                    scope 9 {
                                        debug i => const 1.0E+7f64;
                                        let _10: f64;
                                        scope 10 {
                                            debug j => const 3.1E+9f64;
                                            let _11: f64;
                                            scope 11 {
                                                debug k => const 3.1999999999999998E-10f64;
                                                let _15: &f64;
                                                let _16: &f64;
                                                let _32: &f64;
                                                let _33: &f64;
                                                let _51: &f32;
                                                let _52: &f32;
                                                let _63: &f64;
                                                let _64: &f64;
                                                let mut _79: &f32;
                                                scope 12 {
                                                    debug left_val => _15;
                                                    debug right_val => _16;
                                                    let _21: core::panicking::AssertKind;
                                                    scope 13 {
                                                        debug kind => _21;
                                                    }
                                                }
                                                scope 14 {
                                                    debug left_val => _32;
                                                    debug right_val => _33;
                                                    let _38: core::panicking::AssertKind;
                                                    scope 15 {
                                                        debug kind => _38;
                                                    }
                                                }
                                                scope 16 {
                                                    debug left_val => _51;
                                                    debug right_val => _52;
                                                    let _57: core::panicking::AssertKind;
                                                    scope 17 {
                                                        debug kind => _57;
                                                    }
                                                }
                                                scope 18 {
                                                    debug left_val => _63;
                                                    debug right_val => _64;
                                                    let _69: core::panicking::AssertKind;
                                                    scope 19 {
                                                        debug kind => _69;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 1.5E+6f64;
        _2 = const 1.5E+6f64;
        _3 = const 1.0E+6f64;
        _4 = const 1.0E+6f64;
        _5 = const 3f32;
        _6 = const 5.9000000000000004f64;
        _7 = const 1.0E+6f32;
        _8 = const 1.0E+7f64;
        _9 = const 1.0E+7f64;
        _10 = const 3.1E+9f64;
        _11 = const 3.1999999999999998E-10f64;
        _13 = &_1;
        _14 = &_2;
        _12 = (move _13, move _14);
        _15 = (_12.0: &f64);
        _16 = (_12.1: &f64);
        _19 = (*_15);
        _20 = (*_16);
        _18 = Eq(move _19, move _20);
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<f64, f64>(move _21, _15, _16, move _23) -> unwind continue;
    }

    bb2: {
        _26 = _3;
        _27 = _2;
        _25 = Lt(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _28 = core::panicking::panic(const "assertion failed: (c < b)") -> unwind continue;
    }

    bb4: {
        _30 = &_3;
        _31 = &_4;
        _29 = (move _30, move _31);
        _32 = (_29.0: &f64);
        _33 = (_29.1: &f64);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<f64, f64>(move _38, _32, _33, move _40) -> unwind continue;
    }

    bb6: {
        _43 = _7;
        _42 = Lt(_5, move _43);
        _41 = Not(move _42);
        switchInt(move _41) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _44 = core::panicking::panic(const "assertion failed: (e < g)") -> unwind continue;
    }

    bb8: {
        _47 = _8;
        _46 = Lt(_6, move _47);
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _48 = core::panicking::panic(const "assertion failed: (f < h)") -> unwind continue;
    }

    bb10: {
        _50 = &_7;
        _79 = const _;
        _49 = (move _50, _79);
        _51 = (_49.0: &f32);
        _52 = (_49.1: &f32);
        _55 = (*_51);
        _56 = (*_52);
        _54 = Eq(move _55, move _56);
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _57 = core::panicking::AssertKind::Eq;
        _59 = Option::<Arguments<'_>>::None;
        _58 = core::panicking::assert_failed::<f32, f32>(move _57, _51, _52, move _59) -> unwind continue;
    }

    bb12: {
        _61 = &_8;
        _62 = &_9;
        _60 = (move _61, move _62);
        _63 = (_60.0: &f64);
        _64 = (_60.1: &f64);
        _67 = (*_63);
        _68 = (*_64);
        _66 = Eq(move _67, move _68);
        _65 = Not(move _66);
        switchInt(move _65) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _69 = core::panicking::AssertKind::Eq;
        _71 = Option::<Arguments<'_>>::None;
        _70 = core::panicking::assert_failed::<f64, f64>(move _69, _63, _64, move _71) -> unwind continue;
    }

    bb14: {
        _73 = Gt(_10, _11);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _74 = core::panicking::panic(const "assertion failed: (j > k)") -> unwind continue;
    }

    bb16: {
        _77 = _1;
        _76 = Lt(_11, move _77);
        _75 = Not(move _76);
        switchInt(move _75) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _78 = core::panicking::panic(const "assertion failed: (k < a)") -> unwind continue;
    }

    bb18: {
        return;
    }
}

promoted[0] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 1.0E+6f32;
        _0 = &_1;
        return;
    }
}
