// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: f32;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 2];
    let _6: [&str; 2];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &f32;
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let _16: &[&str; 2];
    let _17: [&str; 2];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 1];
    let _20: [core::fmt::rt::Argument<'_>; 1];
    let mut _21: core::fmt::rt::Argument<'_>;
    let _22: &f64;
    let _24: ();
    let mut _25: std::fmt::Arguments<'_>;
    let mut _26: &[&str];
    let _27: &[&str; 2];
    let _28: [&str; 2];
    let mut _29: &[core::fmt::rt::Argument<'_>];
    let _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: [core::fmt::rt::Argument<'_>; 1];
    let mut _32: core::fmt::rt::Argument<'_>;
    let _33: &f64;
    scope 1 {
        debug x => _1;
        let _12: f64;
        scope 2 {
            debug y => _12;
            let _23: S;
            scope 3 {
                debug z => _23;
            }
        }
    }

    bb0: {
        _1 = const 4f32;
        _6 = [const "", const "\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (PointerCoercion(Unsize));
        _11 = &_1;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _12 = const 64f64;
        _17 = [const "", const "\n"];
        _16 = &_17;
        _15 = _16 as &[&str] (PointerCoercion(Unsize));
        _22 = &_12;
        _21 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_22) -> [return: bb4, unwind continue];
    }

    bb4: {
        _20 = [move _21];
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _14 = Arguments::<'_>::new_v1(move _15, move _18) -> [return: bb5, unwind continue];
    }

    bb5: {
        _13 = _print(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        _23 = S { z: const 1f64 };
        _28 = [const "", const "\n"];
        _27 = &_28;
        _26 = _27 as &[&str] (PointerCoercion(Unsize));
        _33 = &(_23.0: f64);
        _32 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_33) -> [return: bb7, unwind continue];
    }

    bb7: {
        _31 = [move _32];
        _30 = &_31;
        _29 = _30 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _25 = Arguments::<'_>::new_v1(move _26, move _29) -> [return: bb8, unwind continue];
    }

    bb8: {
        _24 = _print(move _25) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }
}
