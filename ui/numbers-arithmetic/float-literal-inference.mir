// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: f32;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &f32;
    let _11: ();
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let mut _14: &[core::fmt::rt::Argument<'_>];
    let _15: &[core::fmt::rt::Argument<'_>; 1];
    let _16: [core::fmt::rt::Argument<'_>; 1];
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &f64;
    let _20: ();
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _23: &[core::fmt::rt::Argument<'_>];
    let _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: [core::fmt::rt::Argument<'_>; 1];
    let mut _26: core::fmt::rt::Argument<'_>;
    let _27: &f64;
    scope 1 {
        debug x => const 4f32;
        let _10: f64;
        let mut _30: &[&str; 2];
        scope 2 {
            debug y => const 64f64;
            let _19: S;
            let mut _29: &[&str; 2];
            scope 3 {
                debug z => _19;
                let mut _28: &[&str; 2];
            }
        }
    }

    bb0: {
        _1 = const 4f32;
        _30 = const _;
        _4 = _30 as &[&str] (Pointer(Unsize));
        _9 = &_1;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _10 = const 64f64;
        _29 = const _;
        _13 = _29 as &[&str] (Pointer(Unsize));
        _18 = &_10;
        _17 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_18) -> [return: bb4, unwind continue];
    }

    bb4: {
        _16 = [move _17];
        _15 = &_16;
        _14 = _15 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb5, unwind continue];
    }

    bb5: {
        _11 = _print(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        _19 = S { z: const 1f64 };
        _28 = const _;
        _22 = _28 as &[&str] (Pointer(Unsize));
        _27 = &(_19.0: f64);
        _26 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_27) -> [return: bb7, unwind continue];
    }

    bb7: {
        _25 = [move _26];
        _24 = &_25;
        _23 = _24 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _21 = Arguments::<'_>::new_v1(move _22, move _23) -> [return: bb8, unwind continue];
    }

    bb8: {
        _20 = _print(move _21) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
