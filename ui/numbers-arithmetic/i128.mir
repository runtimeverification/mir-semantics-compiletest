// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: i128;
    let mut _2: (&i128, &i128);
    let mut _3: &i128;
    let _4: i128;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: i128;
    let mut _10: i128;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&i128, &i128);
    let mut _16: &i128;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: i128;
    let mut _22: i128;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&i128, &i128);
    let mut _28: &i128;
    let _29: i128;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: i128;
    let mut _35: i128;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&i128, &i128);
    let mut _40: &i128;
    let _41: i128;
    let mut _42: i128;
    let mut _43: i128;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: i128;
    let mut _49: i128;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&i128, &i128);
    let mut _54: &i128;
    let _55: i128;
    let mut _56: i128;
    let mut _57: i128;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: i128;
    let mut _63: i128;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: (&i128, &i128);
    let mut _68: &i128;
    let _69: i128;
    let mut _70: i128;
    let mut _71: i128;
    let mut _72: i128;
    let mut _73: i128;
    let mut _74: i128;
    let mut _75: i128;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: i128;
    let mut _81: i128;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&i128, &i128);
    let mut _86: &i128;
    let _87: i128;
    let mut _88: i128;
    let mut _89: i128;
    let mut _90: i128;
    let mut _91: i128;
    let mut _92: i128;
    let mut _93: i128;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: i128;
    let mut _99: i128;
    let _101: !;
    let mut _102: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _104: (&i128, &i128);
    let mut _105: &i128;
    let _106: i128;
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: i128;
    let mut _112: i128;
    let _114: !;
    let mut _115: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _116: (&i128, &i128);
    let mut _117: &i128;
    let _118: i128;
    let mut _121: bool;
    let mut _122: bool;
    let mut _123: i128;
    let mut _124: i128;
    let _126: !;
    let mut _127: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _128: (&i128, &i128);
    let mut _129: &i128;
    let _130: i128;
    let mut _133: bool;
    let mut _134: bool;
    let mut _135: i128;
    let mut _136: i128;
    let _138: !;
    let mut _139: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _140: (&i128, &i128);
    let mut _141: &i128;
    let _142: i128;
    let mut _145: bool;
    let mut _146: bool;
    let mut _147: i128;
    let mut _148: i128;
    let _150: !;
    let mut _151: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _152: (&i128, &i128);
    let mut _153: &i128;
    let _154: i128;
    let mut _155: bool;
    let mut _156: bool;
    let mut _157: bool;
    let mut _158: bool;
    let mut _161: bool;
    let mut _162: bool;
    let mut _163: i128;
    let mut _164: i128;
    let _166: !;
    let mut _167: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _168: (&i128, &i128);
    let mut _169: &i128;
    let _170: i128;
    let mut _171: &i128;
    let _172: i128;
    let mut _173: bool;
    let mut _174: bool;
    let mut _175: bool;
    let mut _176: bool;
    let mut _179: bool;
    let mut _180: bool;
    let mut _181: i128;
    let mut _182: i128;
    let _184: !;
    let mut _185: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _186: (&i128, &i128);
    let mut _187: &i128;
    let _188: i128;
    let mut _191: bool;
    let mut _192: bool;
    let mut _193: i128;
    let mut _194: i128;
    let _196: !;
    let mut _197: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _198: (&i128, &i128);
    let mut _199: &i128;
    let _200: i128;
    let mut _203: bool;
    let mut _204: bool;
    let mut _205: i128;
    let mut _206: i128;
    let _208: !;
    let mut _209: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _210: bool;
    let mut _211: bool;
    let mut _212: !;
    let mut _213: bool;
    let mut _214: bool;
    let mut _215: i128;
    let mut _216: !;
    let mut _217: bool;
    let mut _218: bool;
    let mut _219: i128;
    let mut _220: !;
    let mut _221: (&i64, &i64);
    let mut _222: &i64;
    let _223: i64;
    let mut _226: bool;
    let mut _227: bool;
    let mut _228: i64;
    let mut _229: i64;
    let _231: !;
    let mut _232: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _233: (&i64, &i64);
    let mut _234: &i64;
    let _235: i64;
    let mut _238: bool;
    let mut _239: bool;
    let mut _240: i64;
    let mut _241: i64;
    let _243: !;
    let mut _244: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _245: (&i64, &i64);
    let mut _246: &i64;
    let _247: i64;
    let mut _250: bool;
    let mut _251: bool;
    let mut _252: i64;
    let mut _253: i64;
    let _255: !;
    let mut _256: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _257: (&u128, &u128);
    let mut _258: &u128;
    let _259: u128;
    let mut _262: bool;
    let mut _263: bool;
    let mut _264: u128;
    let mut _265: u128;
    let _267: !;
    let mut _268: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _269: (&u128, &u128);
    let mut _270: &u128;
    let _271: u128;
    let mut _272: i128;
    let mut _275: bool;
    let mut _276: bool;
    let mut _277: u128;
    let mut _278: u128;
    let _280: !;
    let mut _281: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _282: (&i128, &i128);
    let mut _283: &i128;
    let _284: i128;
    let mut _285: f64;
    let mut _286: i128;
    let mut _287: &i128;
    let _288: i128;
    let mut _291: bool;
    let mut _292: bool;
    let mut _293: i128;
    let mut _294: i128;
    let _296: !;
    let mut _297: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _298: (&i128, &i128);
    let mut _299: &i128;
    let _300: i128;
    let mut _301: f32;
    let mut _302: i128;
    let mut _303: &i128;
    let _304: i128;
    let mut _307: bool;
    let mut _308: bool;
    let mut _309: i128;
    let mut _310: i128;
    let _312: !;
    let mut _313: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _314: (&i128, &i128);
    let mut _315: &i128;
    let _316: i128;
    let mut _317: f64;
    let mut _318: f64;
    let mut _319: i128;
    let mut _320: &i128;
    let _321: i128;
    let mut _322: i128;
    let mut _325: bool;
    let mut _326: bool;
    let mut _327: i128;
    let mut _328: i128;
    let _330: !;
    let mut _331: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _332: (&i128, &i128);
    let mut _333: &i128;
    let _334: i128;
    let mut _335: f32;
    let mut _336: f32;
    let mut _337: i128;
    let mut _338: &i128;
    let _339: i128;
    let mut _340: i128;
    let mut _343: bool;
    let mut _344: bool;
    let mut _345: i128;
    let mut _346: i128;
    let _348: !;
    let mut _349: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _351: (&i128, &i128);
    let mut _352: &i128;
    let _353: i128;
    let mut _354: i128;
    let mut _357: bool;
    let mut _358: bool;
    let mut _359: i128;
    let mut _360: i128;
    let _362: !;
    let mut _363: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _365: (&i128, &i128);
    let mut _366: &i128;
    let mut _369: bool;
    let mut _370: bool;
    let mut _371: i128;
    let mut _372: i128;
    let _374: !;
    let mut _375: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _377: (&i128, &i128);
    let mut _378: &i128;
    let _379: i128;
    let mut _380: i128;
    let mut _381: i128;
    let mut _384: bool;
    let mut _385: bool;
    let mut _386: i128;
    let mut _387: i128;
    let _389: !;
    let mut _390: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _391: (&i128, &i128);
    let mut _392: &i128;
    let _393: i128;
    let mut _394: i128;
    let mut _395: i128;
    let mut _396: i128;
    let mut _397: i128;
    let mut _398: i128;
    let mut _399: i128;
    let mut _402: bool;
    let mut _403: bool;
    let mut _404: i128;
    let mut _405: i128;
    let _407: !;
    let mut _408: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _409: (&i128, &i128);
    let mut _410: &i128;
    let _411: i128;
    let mut _412: i128;
    let mut _413: i128;
    let mut _414: i128;
    let mut _415: i128;
    let mut _418: bool;
    let mut _419: bool;
    let mut _420: i128;
    let mut _421: i128;
    let _423: !;
    let mut _424: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _425: (&i128, &i128);
    let mut _426: &i128;
    let _427: i128;
    let mut _428: i128;
    let mut _429: i128;
    let mut _430: i128;
    let mut _431: i128;
    let mut _432: i128;
    let mut _433: i128;
    let mut _434: i128;
    let mut _435: i128;
    let mut _436: i128;
    let mut _437: i128;
    let mut _440: bool;
    let mut _441: bool;
    let mut _442: i128;
    let mut _443: i128;
    let _445: !;
    let mut _446: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _447: (&i128, &i128);
    let mut _448: &i128;
    let _449: i128;
    let mut _450: i128;
    let mut _451: i128;
    let mut _452: i128;
    let mut _453: i128;
    let mut _454: i128;
    let mut _455: i128;
    let mut _456: i128;
    let mut _457: i128;
    let mut _458: i128;
    let mut _459: i128;
    let mut _462: bool;
    let mut _463: bool;
    let mut _464: i128;
    let mut _465: i128;
    let _467: !;
    let mut _468: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _470: (&i128, &i128);
    let mut _471: &i128;
    let _472: i128;
    let mut _473: i128;
    let mut _474: i128;
    let mut _477: bool;
    let mut _478: bool;
    let mut _479: i128;
    let mut _480: i128;
    let _482: !;
    let mut _483: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _484: (&i128, &i128);
    let mut _485: &i128;
    let _486: i128;
    let mut _487: i128;
    let mut _488: i128;
    let mut _491: bool;
    let mut _492: bool;
    let mut _493: i128;
    let mut _494: i128;
    let _496: !;
    let mut _497: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _498: (&i128, &i128);
    let mut _499: &i128;
    let _500: i128;
    let mut _501: i128;
    let mut _502: i128;
    let mut _505: bool;
    let mut _506: bool;
    let mut _507: i128;
    let mut _508: i128;
    let _510: !;
    let mut _511: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _512: (&i128, &i128);
    let mut _513: &i128;
    let _514: i128;
    let mut _515: i128;
    let mut _518: bool;
    let mut _519: bool;
    let mut _520: i128;
    let mut _521: i128;
    let _523: !;
    let mut _524: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _525: (&i128, &i128);
    let mut _526: &i128;
    let _527: i128;
    let mut _528: i128;
    let mut _529: bool;
    let mut _530: bool;
    let mut _531: bool;
    let mut _532: bool;
    let mut _535: bool;
    let mut _536: bool;
    let mut _537: i128;
    let mut _538: i128;
    let _540: !;
    let mut _541: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _542: (&i128, &i128);
    let mut _543: &i128;
    let _544: i128;
    let mut _545: i128;
    let mut _546: &i128;
    let _547: i128;
    let mut _548: i128;
    let mut _549: bool;
    let mut _550: bool;
    let mut _551: bool;
    let mut _552: bool;
    let mut _555: bool;
    let mut _556: bool;
    let mut _557: i128;
    let mut _558: i128;
    let _560: !;
    let mut _561: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _562: (&i128, &i128);
    let mut _563: &i128;
    let _564: i128;
    let mut _565: i128;
    let mut _568: bool;
    let mut _569: bool;
    let mut _570: i128;
    let mut _571: i128;
    let _573: !;
    let mut _574: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _575: (&i128, &i128);
    let mut _576: &i128;
    let _577: i128;
    let mut _578: i128;
    let mut _581: bool;
    let mut _582: bool;
    let mut _583: i128;
    let mut _584: i128;
    let _586: !;
    let mut _587: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _588: bool;
    let mut _589: bool;
    let mut _590: i128;
    let mut _591: i128;
    let mut _592: !;
    let mut _593: bool;
    let mut _594: bool;
    let mut _595: i128;
    let mut _596: i128;
    let mut _597: !;
    let mut _598: bool;
    let mut _599: bool;
    let mut _600: i128;
    let mut _601: i128;
    let mut _602: !;
    let mut _603: (&i64, &i64);
    let mut _604: &i64;
    let _605: i64;
    let mut _606: i128;
    let mut _609: bool;
    let mut _610: bool;
    let mut _611: i64;
    let mut _612: i64;
    let _614: !;
    let mut _615: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _616: (&i64, &i64);
    let mut _617: &i64;
    let _618: i64;
    let mut _619: i128;
    let mut _622: bool;
    let mut _623: bool;
    let mut _624: i64;
    let mut _625: i64;
    let _627: !;
    let mut _628: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _629: (&i64, &i64);
    let mut _630: &i64;
    let _631: i64;
    let mut _632: i128;
    let mut _635: bool;
    let mut _636: bool;
    let mut _637: i64;
    let mut _638: i64;
    let _640: !;
    let mut _641: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _642: (&u128, &u128);
    let mut _643: &u128;
    let _644: u128;
    let mut _645: i128;
    let mut _648: bool;
    let mut _649: bool;
    let mut _650: u128;
    let mut _651: u128;
    let _653: !;
    let mut _654: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _655: (&u128, &u128);
    let mut _656: &u128;
    let _657: u128;
    let mut _658: i128;
    let mut _659: i128;
    let mut _662: bool;
    let mut _663: bool;
    let mut _664: u128;
    let mut _665: u128;
    let _667: !;
    let mut _668: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _669: (&i128, &i128);
    let mut _670: &i128;
    let _671: i128;
    let mut _672: f64;
    let mut _673: i128;
    let mut _674: i128;
    let mut _675: &i128;
    let _676: i128;
    let mut _677: i128;
    let mut _680: bool;
    let mut _681: bool;
    let mut _682: i128;
    let mut _683: i128;
    let _685: !;
    let mut _686: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _687: (&i128, &i128);
    let mut _688: &i128;
    let _689: i128;
    let mut _690: f32;
    let mut _691: i128;
    let mut _692: i128;
    let mut _693: &i128;
    let _694: i128;
    let mut _695: i128;
    let mut _698: bool;
    let mut _699: bool;
    let mut _700: i128;
    let mut _701: i128;
    let _703: !;
    let mut _704: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _705: (&i128, &i128);
    let mut _706: &i128;
    let _707: i128;
    let mut _708: f64;
    let mut _709: f64;
    let mut _710: i128;
    let mut _711: i128;
    let mut _712: &i128;
    let _713: i128;
    let mut _714: i128;
    let mut _715: i128;
    let mut _718: bool;
    let mut _719: bool;
    let mut _720: i128;
    let mut _721: i128;
    let _723: !;
    let mut _724: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _725: (&i128, &i128);
    let mut _726: &i128;
    let _727: i128;
    let mut _728: f32;
    let mut _729: f32;
    let mut _730: i128;
    let mut _731: i128;
    let mut _732: &i128;
    let _733: i128;
    let mut _734: i128;
    let mut _735: i128;
    let mut _738: bool;
    let mut _739: bool;
    let mut _740: i128;
    let mut _741: i128;
    let _743: !;
    let mut _744: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _746: i128;
    let mut _747: (&&str, &std::string::String);
    let mut _748: &std::string::String;
    let _749: std::string::String;
    let mut _751: std::fmt::Arguments<'_>;
    let mut _752: &[&str];
    let mut _753: &[core::fmt::rt::Argument<'_>];
    let _754: &[core::fmt::rt::Argument<'_>; 1];
    let _755: [core::fmt::rt::Argument<'_>; 1];
    let mut _756: core::fmt::rt::Argument<'_>;
    let _757: &i128;
    let mut _760: bool;
    let mut _761: bool;
    let _763: !;
    let mut _764: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _765: (&&str, &std::string::String);
    let mut _766: &std::string::String;
    let _767: std::string::String;
    let mut _769: std::fmt::Arguments<'_>;
    let mut _770: &[&str];
    let mut _771: &[core::fmt::rt::Argument<'_>];
    let _772: &[core::fmt::rt::Argument<'_>; 1];
    let _773: [core::fmt::rt::Argument<'_>; 1];
    let mut _774: core::fmt::rt::Argument<'_>;
    let _775: &i128;
    let mut _778: bool;
    let mut _779: bool;
    let _781: !;
    let mut _782: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _783: (&&str, &std::string::String);
    let mut _784: &std::string::String;
    let _785: std::string::String;
    let mut _787: std::fmt::Arguments<'_>;
    let mut _788: &[&str];
    let mut _789: &[core::fmt::rt::Argument<'_>];
    let _790: &[core::fmt::rt::Argument<'_>; 1];
    let _791: [core::fmt::rt::Argument<'_>; 1];
    let mut _792: core::fmt::rt::Argument<'_>;
    let _793: &i128;
    let mut _796: bool;
    let mut _797: bool;
    let _799: !;
    let mut _800: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _801: (&&str, &std::string::String);
    let mut _802: &std::string::String;
    let _803: std::string::String;
    let mut _805: std::fmt::Arguments<'_>;
    let mut _806: &[&str];
    let mut _807: &[core::fmt::rt::Argument<'_>];
    let _808: &[core::fmt::rt::Argument<'_>; 1];
    let _809: [core::fmt::rt::Argument<'_>; 1];
    let mut _810: core::fmt::rt::Argument<'_>;
    let _811: &i128;
    let mut _814: bool;
    let mut _815: bool;
    let _817: !;
    let mut _818: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _819: (&&str, &std::string::String);
    let mut _820: &std::string::String;
    let _821: std::string::String;
    let mut _823: std::fmt::Arguments<'_>;
    let mut _824: &[&str];
    let mut _825: &[core::fmt::rt::Argument<'_>];
    let _826: &[core::fmt::rt::Argument<'_>; 1];
    let _827: [core::fmt::rt::Argument<'_>; 1];
    let mut _828: core::fmt::rt::Argument<'_>;
    let _829: &i128;
    let mut _832: bool;
    let mut _833: bool;
    let _835: !;
    let mut _836: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _837: (&i128, &i128);
    let mut _838: &i128;
    let mut _839: &i128;
    let _840: i128;
    let mut _841: i128;
    let mut _842: &i128;
    let mut _845: bool;
    let mut _846: bool;
    let mut _847: i128;
    let mut _848: i128;
    let _850: !;
    let mut _851: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _852: (&std::option::Option<i128>, &std::option::Option<i128>);
    let mut _853: &std::option::Option<i128>;
    let _854: std::option::Option<i128>;
    let mut _855: i128;
    let mut _856: i128;
    let mut _857: i128;
    let mut _858: i128;
    let mut _861: bool;
    let mut _862: bool;
    let _864: !;
    let mut _865: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _866: (&std::option::Option<i128>, &std::option::Option<i128>);
    let mut _867: &std::option::Option<i128>;
    let _868: std::option::Option<i128>;
    let mut _869: i128;
    let mut _870: i128;
    let mut _873: bool;
    let mut _874: bool;
    let _876: !;
    let mut _877: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _878: (&std::option::Option<i128>, &std::option::Option<i128>);
    let mut _879: &std::option::Option<i128>;
    let _880: std::option::Option<i128>;
    let mut _881: i128;
    let mut _882: i128;
    let mut _885: bool;
    let mut _886: bool;
    let _888: !;
    let mut _889: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _892: (&std::option::Option<i128>, &std::option::Option<i128>);
    let mut _893: &std::option::Option<i128>;
    let _894: std::option::Option<i128>;
    let mut _895: i128;
    let mut _896: i128;
    let mut _899: bool;
    let mut _900: bool;
    let _902: !;
    let mut _903: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _904: (&std::option::Option<i128>, &std::option::Option<i128>);
    let mut _905: &std::option::Option<i128>;
    let _906: std::option::Option<i128>;
    let mut _907: i128;
    let mut _908: i128;
    let mut _911: bool;
    let mut _912: bool;
    let _914: !;
    let mut _915: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _916: (&std::option::Option<i128>, &std::option::Option<i128>);
    let mut _917: &std::option::Option<i128>;
    let _918: std::option::Option<i128>;
    let mut _919: i128;
    let mut _920: i128;
    let mut _921: i128;
    let mut _924: bool;
    let mut _925: bool;
    let _927: !;
    let mut _928: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _929: (&std::option::Option<i128>, &std::option::Option<i128>);
    let mut _930: &std::option::Option<i128>;
    let _931: std::option::Option<i128>;
    let mut _932: i128;
    let mut _933: i128;
    let mut _936: bool;
    let mut _937: bool;
    let _939: !;
    let mut _940: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _941: (&std::option::Option<u128>, &std::option::Option<u128>);
    let mut _942: &std::option::Option<u128>;
    let _943: std::option::Option<u128>;
    let mut _944: u128;
    let mut _945: u32;
    let mut _948: bool;
    let mut _949: bool;
    let _951: !;
    let mut _952: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _953: (&std::option::Option<i128>, &std::option::Option<i128>);
    let mut _954: &std::option::Option<i128>;
    let _955: std::option::Option<i128>;
    let mut _956: i128;
    let mut _957: u32;
    let mut _960: bool;
    let mut _961: bool;
    let _963: !;
    let mut _964: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _965: (&i128, &i128);
    let mut _966: &i128;
    let _967: i128;
    let mut _968: i128;
    let mut _969: i128;
    let mut _970: bool;
    let mut _971: bool;
    let mut _972: bool;
    let mut _973: bool;
    let mut _976: bool;
    let mut _977: bool;
    let mut _978: i128;
    let mut _979: i128;
    let _981: !;
    let mut _982: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _983: (&i128, &i128);
    let mut _984: &i128;
    let _985: i128;
    let mut _986: std::slice::Iter<'_, i128>;
    let mut _987: &[i128];
    let mut _990: bool;
    let mut _991: bool;
    let mut _992: i128;
    let mut _993: i128;
    let _995: !;
    let mut _996: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _997: (&i128, &i128);
    let mut _998: &i128;
    let _999: i128;
    let mut _1000: std::slice::Iter<'_, i128>;
    let mut _1001: &[i128];
    let mut _1004: bool;
    let mut _1005: bool;
    let mut _1006: i128;
    let mut _1007: i128;
    let _1009: !;
    let mut _1010: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => const -1_i128;
        let _5: &i128;
        let _6: &i128;
        let _14: i128;
        let mut _1072: &i128;
        scope 2 {
            debug left_val => _5;
            debug right_val => _6;
            let _11: core::panicking::AssertKind;
            scope 3 {
                debug kind => _11;
            }
        }
        scope 4 {
            debug y => const -2_i128;
            let _17: &i128;
            let _18: &i128;
            let _26: i128;
            let mut _1071: &i128;
            scope 5 {
                debug left_val => _17;
                debug right_val => _18;
                let _23: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _23;
                }
            }
            scope 7 {
                debug z => const 11259375_i128;
                let _30: &i128;
                let _31: &i128;
                let _44: &i128;
                let _45: &i128;
                let _58: &i128;
                let _59: &i128;
                let _76: &i128;
                let _77: &i128;
                let _94: &i128;
                let _95: &i128;
                let _103: i128;
                let mut _1066: &i128;
                let mut _1067: &i128;
                let mut _1068: &i128;
                let mut _1069: &i128;
                let mut _1070: &i128;
                scope 8 {
                    debug left_val => _30;
                    debug right_val => _31;
                    let _36: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _36;
                    }
                }
                scope 10 {
                    debug left_val => _44;
                    debug right_val => _45;
                    let _50: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _50;
                    }
                }
                scope 12 {
                    debug left_val => _58;
                    debug right_val => _59;
                    let _64: core::panicking::AssertKind;
                    scope 13 {
                        debug kind => _64;
                    }
                }
                scope 14 {
                    debug left_val => _76;
                    debug right_val => _77;
                    let _82: core::panicking::AssertKind;
                    scope 15 {
                        debug kind => _82;
                    }
                }
                scope 16 {
                    debug left_val => _94;
                    debug right_val => _95;
                    let _100: core::panicking::AssertKind;
                    scope 17 {
                        debug kind => _100;
                    }
                }
                scope 18 {
                    debug k => const -1512366075204170947332355369683137040_i128;
                    let _107: &i128;
                    let _108: &i128;
                    let _119: &i128;
                    let _120: &i128;
                    let _131: &i128;
                    let _132: &i128;
                    let _143: &i128;
                    let _144: &i128;
                    let _159: &i128;
                    let _160: &i128;
                    let _177: &i128;
                    let _178: &i128;
                    let _189: &i128;
                    let _190: &i128;
                    let _201: &i128;
                    let _202: &i128;
                    let _224: &i64;
                    let _225: &i64;
                    let _236: &i64;
                    let _237: &i64;
                    let _248: &i64;
                    let _249: &i64;
                    let _260: &u128;
                    let _261: &u128;
                    let _273: &u128;
                    let _274: &u128;
                    let _289: &i128;
                    let _290: &i128;
                    let _305: &i128;
                    let _306: &i128;
                    let _323: &i128;
                    let _324: &i128;
                    let _341: &i128;
                    let _342: &i128;
                    let _350: i128;
                    let mut _1054: &u128;
                    let mut _1055: &u128;
                    let mut _1056: &i64;
                    let mut _1057: &i64;
                    let mut _1058: &i64;
                    let mut _1059: &i128;
                    let mut _1060: &i128;
                    let mut _1061: &i128;
                    let mut _1062: &i128;
                    let mut _1063: &i128;
                    let mut _1064: &i128;
                    let mut _1065: &i128;
                    scope 19 {
                        debug left_val => _107;
                        debug right_val => _108;
                        let _113: core::panicking::AssertKind;
                        scope 20 {
                            debug kind => _113;
                        }
                    }
                    scope 21 {
                        debug left_val => _119;
                        debug right_val => _120;
                        let _125: core::panicking::AssertKind;
                        scope 22 {
                            debug kind => _125;
                        }
                    }
                    scope 23 {
                        debug left_val => _131;
                        debug right_val => _132;
                        let _137: core::panicking::AssertKind;
                        scope 24 {
                            debug kind => _137;
                        }
                    }
                    scope 25 {
                        debug left_val => _143;
                        debug right_val => _144;
                        let _149: core::panicking::AssertKind;
                        scope 26 {
                            debug kind => _149;
                        }
                    }
                    scope 27 {
                        debug left_val => _159;
                        debug right_val => _160;
                        let _165: core::panicking::AssertKind;
                        scope 28 {
                            debug kind => _165;
                        }
                    }
                    scope 29 {
                        debug left_val => _177;
                        debug right_val => _178;
                        let _183: core::panicking::AssertKind;
                        scope 30 {
                            debug kind => _183;
                        }
                    }
                    scope 31 {
                        debug left_val => _189;
                        debug right_val => _190;
                        let _195: core::panicking::AssertKind;
                        scope 32 {
                            debug kind => _195;
                        }
                    }
                    scope 33 {
                        debug left_val => _201;
                        debug right_val => _202;
                        let _207: core::panicking::AssertKind;
                        scope 34 {
                            debug kind => _207;
                        }
                    }
                    scope 35 {
                        debug left_val => _224;
                        debug right_val => _225;
                        let _230: core::panicking::AssertKind;
                        scope 36 {
                            debug kind => _230;
                        }
                    }
                    scope 37 {
                        debug left_val => _236;
                        debug right_val => _237;
                        let _242: core::panicking::AssertKind;
                        scope 38 {
                            debug kind => _242;
                        }
                    }
                    scope 39 {
                        debug left_val => _248;
                        debug right_val => _249;
                        let _254: core::panicking::AssertKind;
                        scope 40 {
                            debug kind => _254;
                        }
                    }
                    scope 41 {
                        debug left_val => _260;
                        debug right_val => _261;
                        let _266: core::panicking::AssertKind;
                        scope 42 {
                            debug kind => _266;
                        }
                    }
                    scope 43 {
                        debug left_val => _273;
                        debug right_val => _274;
                        let _279: core::panicking::AssertKind;
                        scope 44 {
                            debug kind => _279;
                        }
                    }
                    scope 45 {
                        debug left_val => _289;
                        debug right_val => _290;
                        let _295: core::panicking::AssertKind;
                        scope 46 {
                            debug kind => _295;
                        }
                    }
                    scope 47 {
                        debug left_val => _305;
                        debug right_val => _306;
                        let _311: core::panicking::AssertKind;
                        scope 48 {
                            debug kind => _311;
                        }
                    }
                    scope 49 {
                        debug left_val => _323;
                        debug right_val => _324;
                        let _329: core::panicking::AssertKind;
                        scope 50 {
                            debug kind => _329;
                        }
                    }
                    scope 51 {
                        debug left_val => _341;
                        debug right_val => _342;
                        let _347: core::panicking::AssertKind;
                        scope 52 {
                            debug kind => _347;
                        }
                    }
                    scope 53 {
                        debug x => _350;
                        let _355: &i128;
                        let _356: &i128;
                        let _364: i128;
                        let mut _1053: &i128;
                        scope 54 {
                            debug left_val => _355;
                            debug right_val => _356;
                            let _361: core::panicking::AssertKind;
                            scope 55 {
                                debug kind => _361;
                            }
                        }
                        scope 56 {
                            debug y => _364;
                            let _367: &i128;
                            let _368: &i128;
                            let _376: i128;
                            let mut _1052: &i128;
                            scope 57 {
                                debug left_val => _367;
                                debug right_val => _368;
                                let _373: core::panicking::AssertKind;
                                scope 58 {
                                    debug kind => _373;
                                }
                            }
                            scope 59 {
                                debug z => _376;
                                let _382: &i128;
                                let _383: &i128;
                                let _400: &i128;
                                let _401: &i128;
                                let _416: &i128;
                                let _417: &i128;
                                let _438: &i128;
                                let _439: &i128;
                                let _460: &i128;
                                let _461: &i128;
                                let _469: i128;
                                let mut _1047: &i128;
                                let mut _1048: &i128;
                                let mut _1049: &i128;
                                let mut _1050: &i128;
                                let mut _1051: &i128;
                                scope 60 {
                                    debug left_val => _382;
                                    debug right_val => _383;
                                    let _388: core::panicking::AssertKind;
                                    scope 61 {
                                        debug kind => _388;
                                    }
                                }
                                scope 62 {
                                    debug left_val => _400;
                                    debug right_val => _401;
                                    let _406: core::panicking::AssertKind;
                                    scope 63 {
                                        debug kind => _406;
                                    }
                                }
                                scope 64 {
                                    debug left_val => _416;
                                    debug right_val => _417;
                                    let _422: core::panicking::AssertKind;
                                    scope 65 {
                                        debug kind => _422;
                                    }
                                }
                                scope 66 {
                                    debug left_val => _438;
                                    debug right_val => _439;
                                    let _444: core::panicking::AssertKind;
                                    scope 67 {
                                        debug kind => _444;
                                    }
                                }
                                scope 68 {
                                    debug left_val => _460;
                                    debug right_val => _461;
                                    let _466: core::panicking::AssertKind;
                                    scope 69 {
                                        debug kind => _466;
                                    }
                                }
                                scope 70 {
                                    debug k => _469;
                                    let _475: &i128;
                                    let _476: &i128;
                                    let _489: &i128;
                                    let _490: &i128;
                                    let _503: &i128;
                                    let _504: &i128;
                                    let _516: &i128;
                                    let _517: &i128;
                                    let _533: &i128;
                                    let _534: &i128;
                                    let _553: &i128;
                                    let _554: &i128;
                                    let _566: &i128;
                                    let _567: &i128;
                                    let _579: &i128;
                                    let _580: &i128;
                                    let _607: &i64;
                                    let _608: &i64;
                                    let _620: &i64;
                                    let _621: &i64;
                                    let _633: &i64;
                                    let _634: &i64;
                                    let _646: &u128;
                                    let _647: &u128;
                                    let _660: &u128;
                                    let _661: &u128;
                                    let _678: &i128;
                                    let _679: &i128;
                                    let _696: &i128;
                                    let _697: &i128;
                                    let _716: &i128;
                                    let _717: &i128;
                                    let _736: &i128;
                                    let _737: &i128;
                                    let _745: i128;
                                    let mut _1035: &u128;
                                    let mut _1036: &u128;
                                    let mut _1037: &i64;
                                    let mut _1038: &i64;
                                    let mut _1039: &i64;
                                    let mut _1040: &i128;
                                    let mut _1041: &i128;
                                    let mut _1042: &i128;
                                    let mut _1043: &i128;
                                    let mut _1044: &i128;
                                    let mut _1045: &i128;
                                    let mut _1046: &i128;
                                    scope 71 {
                                        debug left_val => _475;
                                        debug right_val => _476;
                                        let _481: core::panicking::AssertKind;
                                        scope 72 {
                                            debug kind => _481;
                                        }
                                    }
                                    scope 73 {
                                        debug left_val => _489;
                                        debug right_val => _490;
                                        let _495: core::panicking::AssertKind;
                                        scope 74 {
                                            debug kind => _495;
                                        }
                                    }
                                    scope 75 {
                                        debug left_val => _503;
                                        debug right_val => _504;
                                        let _509: core::panicking::AssertKind;
                                        scope 76 {
                                            debug kind => _509;
                                        }
                                    }
                                    scope 77 {
                                        debug left_val => _516;
                                        debug right_val => _517;
                                        let _522: core::panicking::AssertKind;
                                        scope 78 {
                                            debug kind => _522;
                                        }
                                    }
                                    scope 79 {
                                        debug left_val => _533;
                                        debug right_val => _534;
                                        let _539: core::panicking::AssertKind;
                                        scope 80 {
                                            debug kind => _539;
                                        }
                                    }
                                    scope 81 {
                                        debug left_val => _553;
                                        debug right_val => _554;
                                        let _559: core::panicking::AssertKind;
                                        scope 82 {
                                            debug kind => _559;
                                        }
                                    }
                                    scope 83 {
                                        debug left_val => _566;
                                        debug right_val => _567;
                                        let _572: core::panicking::AssertKind;
                                        scope 84 {
                                            debug kind => _572;
                                        }
                                    }
                                    scope 85 {
                                        debug left_val => _579;
                                        debug right_val => _580;
                                        let _585: core::panicking::AssertKind;
                                        scope 86 {
                                            debug kind => _585;
                                        }
                                    }
                                    scope 87 {
                                        debug left_val => _607;
                                        debug right_val => _608;
                                        let _613: core::panicking::AssertKind;
                                        scope 88 {
                                            debug kind => _613;
                                        }
                                    }
                                    scope 89 {
                                        debug left_val => _620;
                                        debug right_val => _621;
                                        let _626: core::panicking::AssertKind;
                                        scope 90 {
                                            debug kind => _626;
                                        }
                                    }
                                    scope 91 {
                                        debug left_val => _633;
                                        debug right_val => _634;
                                        let _639: core::panicking::AssertKind;
                                        scope 92 {
                                            debug kind => _639;
                                        }
                                    }
                                    scope 93 {
                                        debug left_val => _646;
                                        debug right_val => _647;
                                        let _652: core::panicking::AssertKind;
                                        scope 94 {
                                            debug kind => _652;
                                        }
                                    }
                                    scope 95 {
                                        debug left_val => _660;
                                        debug right_val => _661;
                                        let _666: core::panicking::AssertKind;
                                        scope 96 {
                                            debug kind => _666;
                                        }
                                    }
                                    scope 97 {
                                        debug left_val => _678;
                                        debug right_val => _679;
                                        let _684: core::panicking::AssertKind;
                                        scope 98 {
                                            debug kind => _684;
                                        }
                                    }
                                    scope 99 {
                                        debug left_val => _696;
                                        debug right_val => _697;
                                        let _702: core::panicking::AssertKind;
                                        scope 100 {
                                            debug kind => _702;
                                        }
                                    }
                                    scope 101 {
                                        debug left_val => _716;
                                        debug right_val => _717;
                                        let _722: core::panicking::AssertKind;
                                        scope 102 {
                                            debug kind => _722;
                                        }
                                    }
                                    scope 103 {
                                        debug left_val => _736;
                                        debug right_val => _737;
                                        let _742: core::panicking::AssertKind;
                                        scope 104 {
                                            debug kind => _742;
                                        }
                                    }
                                    scope 105 {
                                        debug j => _745;
                                        let _750: std::string::String;
                                        let _758: &&str;
                                        let _759: &std::string::String;
                                        let _768: std::string::String;
                                        let _776: &&str;
                                        let _777: &std::string::String;
                                        let _786: std::string::String;
                                        let _794: &&str;
                                        let _795: &std::string::String;
                                        let _804: std::string::String;
                                        let _812: &&str;
                                        let _813: &std::string::String;
                                        let _822: std::string::String;
                                        let _830: &&str;
                                        let _831: &std::string::String;
                                        let _843: &i128;
                                        let _844: &i128;
                                        let _859: &std::option::Option<i128>;
                                        let _860: &std::option::Option<i128>;
                                        let _871: &std::option::Option<i128>;
                                        let _872: &std::option::Option<i128>;
                                        let _883: &std::option::Option<i128>;
                                        let _884: &std::option::Option<i128>;
                                        let _890: i128;
                                        let mut _1022: &std::option::Option<i128>;
                                        let mut _1023: &std::option::Option<i128>;
                                        let mut _1024: &std::option::Option<i128>;
                                        let mut _1025: &[&str; 1];
                                        let mut _1026: &&str;
                                        let mut _1027: &[&str; 1];
                                        let mut _1028: &&str;
                                        let mut _1029: &[&str; 1];
                                        let mut _1030: &&str;
                                        let mut _1031: &[&str; 1];
                                        let mut _1032: &&str;
                                        let mut _1033: &[&str; 1];
                                        let mut _1034: &&str;
                                        scope 106 {
                                            debug res => _750;
                                        }
                                        scope 107 {
                                            debug left_val => _758;
                                            debug right_val => _759;
                                            let _762: core::panicking::AssertKind;
                                            scope 108 {
                                                debug kind => _762;
                                            }
                                        }
                                        scope 109 {
                                            debug res => _768;
                                        }
                                        scope 110 {
                                            debug left_val => _776;
                                            debug right_val => _777;
                                            let _780: core::panicking::AssertKind;
                                            scope 111 {
                                                debug kind => _780;
                                            }
                                        }
                                        scope 112 {
                                            debug res => _786;
                                        }
                                        scope 113 {
                                            debug left_val => _794;
                                            debug right_val => _795;
                                            let _798: core::panicking::AssertKind;
                                            scope 114 {
                                                debug kind => _798;
                                            }
                                        }
                                        scope 115 {
                                            debug res => _804;
                                        }
                                        scope 116 {
                                            debug left_val => _812;
                                            debug right_val => _813;
                                            let _816: core::panicking::AssertKind;
                                            scope 117 {
                                                debug kind => _816;
                                            }
                                        }
                                        scope 118 {
                                            debug res => _822;
                                        }
                                        scope 119 {
                                            debug left_val => _830;
                                            debug right_val => _831;
                                            let _834: core::panicking::AssertKind;
                                            scope 120 {
                                                debug kind => _834;
                                            }
                                        }
                                        scope 121 {
                                            debug left_val => _843;
                                            debug right_val => _844;
                                            let _849: core::panicking::AssertKind;
                                            scope 122 {
                                                debug kind => _849;
                                            }
                                        }
                                        scope 123 {
                                            debug left_val => _859;
                                            debug right_val => _860;
                                            let _863: core::panicking::AssertKind;
                                            scope 124 {
                                                debug kind => _863;
                                            }
                                        }
                                        scope 125 {
                                            debug left_val => _871;
                                            debug right_val => _872;
                                            let _875: core::panicking::AssertKind;
                                            scope 126 {
                                                debug kind => _875;
                                            }
                                        }
                                        scope 127 {
                                            debug left_val => _883;
                                            debug right_val => _884;
                                            let _887: core::panicking::AssertKind;
                                            scope 128 {
                                                debug kind => _887;
                                            }
                                        }
                                        scope 129 {
                                            debug l => _890;
                                            let _891: i128;
                                            scope 130 {
                                                debug o => _891;
                                                let _897: &std::option::Option<i128>;
                                                let _898: &std::option::Option<i128>;
                                                let _909: &std::option::Option<i128>;
                                                let _910: &std::option::Option<i128>;
                                                let _922: &std::option::Option<i128>;
                                                let _923: &std::option::Option<i128>;
                                                let _934: &std::option::Option<i128>;
                                                let _935: &std::option::Option<i128>;
                                                let _946: &std::option::Option<u128>;
                                                let _947: &std::option::Option<u128>;
                                                let _958: &std::option::Option<i128>;
                                                let _959: &std::option::Option<i128>;
                                                let _974: &i128;
                                                let _975: &i128;
                                                let _988: &i128;
                                                let _989: &i128;
                                                let _1002: &i128;
                                                let _1003: &i128;
                                                let mut _1011: &[i128; 4];
                                                let mut _1012: &i128;
                                                let mut _1013: &[i128; 4];
                                                let mut _1014: &i128;
                                                let mut _1015: &i128;
                                                let mut _1016: &std::option::Option<i128>;
                                                let mut _1017: &std::option::Option<u128>;
                                                let mut _1018: &std::option::Option<i128>;
                                                let mut _1019: &std::option::Option<i128>;
                                                let mut _1020: &std::option::Option<i128>;
                                                let mut _1021: &std::option::Option<i128>;
                                                scope 131 {
                                                    debug left_val => _897;
                                                    debug right_val => _898;
                                                    let _901: core::panicking::AssertKind;
                                                    scope 132 {
                                                        debug kind => _901;
                                                    }
                                                }
                                                scope 133 {
                                                    debug left_val => _909;
                                                    debug right_val => _910;
                                                    let _913: core::panicking::AssertKind;
                                                    scope 134 {
                                                        debug kind => _913;
                                                    }
                                                }
                                                scope 135 {
                                                    debug left_val => _922;
                                                    debug right_val => _923;
                                                    let _926: core::panicking::AssertKind;
                                                    scope 136 {
                                                        debug kind => _926;
                                                    }
                                                }
                                                scope 137 {
                                                    debug left_val => _934;
                                                    debug right_val => _935;
                                                    let _938: core::panicking::AssertKind;
                                                    scope 138 {
                                                        debug kind => _938;
                                                    }
                                                }
                                                scope 139 {
                                                    debug left_val => _946;
                                                    debug right_val => _947;
                                                    let _950: core::panicking::AssertKind;
                                                    scope 140 {
                                                        debug kind => _950;
                                                    }
                                                }
                                                scope 141 {
                                                    debug left_val => _958;
                                                    debug right_val => _959;
                                                    let _962: core::panicking::AssertKind;
                                                    scope 142 {
                                                        debug kind => _962;
                                                    }
                                                }
                                                scope 143 {
                                                    debug left_val => _974;
                                                    debug right_val => _975;
                                                    let _980: core::panicking::AssertKind;
                                                    scope 144 {
                                                        debug kind => _980;
                                                    }
                                                }
                                                scope 145 {
                                                    debug left_val => _988;
                                                    debug right_val => _989;
                                                    let _994: core::panicking::AssertKind;
                                                    scope 146 {
                                                        debug kind => _994;
                                                    }
                                                }
                                                scope 147 {
                                                    debug left_val => _1002;
                                                    debug right_val => _1003;
                                                    let _1008: core::panicking::AssertKind;
                                                    scope 148 {
                                                        debug kind => _1008;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const -1_i128;
        _1072 = const _;
        _4 = Not(_1);
        _3 = &_4;
        _2 = (_1072, move _3);
        _5 = (_2.0: &i128);
        _6 = (_2.1: &i128);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<i128, i128>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb2: {
        _14 = const -2_i128;
        _1071 = const _;
        _16 = &_14;
        _15 = (_1071, move _16);
        _17 = (_15.0: &i128);
        _18 = (_15.1: &i128);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<i128, i128>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb4: {
        _26 = const 11259375_i128;
        _29 = Mul(_26, _26);
        _28 = &_29;
        _1070 = const _;
        _27 = (move _28, _1070);
        _30 = (_27.0: &i128);
        _31 = (_27.1: &i128);
        _34 = (*_30);
        _35 = (*_31);
        _33 = Eq(move _34, move _35);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<i128, i128>(move _36, _30, _31, move _38) -> unwind continue;
    }

    bb6: {
        _43 = Mul(_26, _26);
        _42 = Mul(move _43, _26);
        _41 = Mul(move _42, _26);
        _40 = &_41;
        _1069 = const _;
        _39 = (move _40, _1069);
        _44 = (_39.0: &i128);
        _45 = (_39.1: &i128);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<i128, i128>(move _50, _44, _45, move _52) -> unwind continue;
    }

    bb8: {
        _56 = Neg(_26);
        _57 = Neg(_26);
        _55 = Mul(move _56, move _57);
        _54 = &_55;
        _1068 = const _;
        _53 = (move _54, _1068);
        _58 = (_53.0: &i128);
        _59 = (_53.1: &i128);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<i128, i128>(move _64, _58, _59, move _66) -> unwind continue;
    }

    bb10: {
        _72 = Neg(_26);
        _73 = Neg(_26);
        _71 = Mul(move _72, move _73);
        _74 = Neg(_26);
        _70 = Mul(move _71, move _74);
        _75 = Neg(_26);
        _69 = Mul(move _70, move _75);
        _68 = &_69;
        _1067 = const _;
        _67 = (move _68, _1067);
        _76 = (_67.0: &i128);
        _77 = (_67.1: &i128);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<i128, i128>(move _82, _76, _77, move _84) -> unwind continue;
    }

    bb12: {
        _90 = Neg(_26);
        _91 = Neg(_26);
        _89 = Add(move _90, move _91);
        _92 = Neg(_26);
        _88 = Add(move _89, move _92);
        _93 = Neg(_26);
        _87 = Add(move _88, move _93);
        _86 = &_87;
        _1066 = const _;
        _85 = (move _86, _1066);
        _94 = (_85.0: &i128);
        _95 = (_85.1: &i128);
        _98 = (*_94);
        _99 = (*_95);
        _97 = Eq(move _98, move _99);
        _96 = Not(move _97);
        switchInt(move _96) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _100 = core::panicking::AssertKind::Eq;
        _102 = Option::<Arguments<'_>>::None;
        _101 = core::panicking::assert_failed::<i128, i128>(move _100, _94, _95, move _102) -> unwind continue;
    }

    bb14: {
        _103 = const -1512366075204170947332355369683137040_i128;
        _106 = Add(_103, _103);
        _105 = &_106;
        _1065 = const _;
        _104 = (move _105, _1065);
        _107 = (_104.0: &i128);
        _108 = (_104.1: &i128);
        _111 = (*_107);
        _112 = (*_108);
        _110 = Eq(move _111, move _112);
        _109 = Not(move _110);
        switchInt(move _109) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _113 = core::panicking::AssertKind::Eq;
        _115 = Option::<Arguments<'_>>::None;
        _114 = core::panicking::assert_failed::<i128, i128>(move _113, _107, _108, move _115) -> unwind continue;
    }

    bb16: {
        _1064 = const _;
        _118 = Sub(_103, _103);
        _117 = &_118;
        _116 = (_1064, move _117);
        _119 = (_116.0: &i128);
        _120 = (_116.1: &i128);
        _123 = (*_119);
        _124 = (*_120);
        _122 = Eq(move _123, move _124);
        _121 = Not(move _122);
        switchInt(move _121) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _125 = core::panicking::AssertKind::Eq;
        _127 = Option::<Arguments<'_>>::None;
        _126 = core::panicking::assert_failed::<i128, i128>(move _125, _119, _120, move _127) -> unwind continue;
    }

    bb18: {
        _1063 = const _;
        _130 = Add(_103, _26);
        _129 = &_130;
        _128 = (_1063, move _129);
        _131 = (_128.0: &i128);
        _132 = (_128.1: &i128);
        _135 = (*_131);
        _136 = (*_132);
        _134 = Eq(move _135, move _136);
        _133 = Not(move _134);
        switchInt(move _133) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _137 = core::panicking::AssertKind::Eq;
        _139 = Option::<Arguments<'_>>::None;
        _138 = core::panicking::assert_failed::<i128, i128>(move _137, _131, _132, move _139) -> unwind continue;
    }

    bb20: {
        _1062 = const _;
        _142 = Add(_103, const 183138079419255074428548309402792464_i128);
        _141 = &_142;
        _140 = (_1062, move _141);
        _143 = (_140.0: &i128);
        _144 = (_140.1: &i128);
        _147 = (*_143);
        _148 = (*_144);
        _146 = Eq(move _147, move _148);
        _145 = Not(move _146);
        switchInt(move _145) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _149 = core::panicking::AssertKind::Eq;
        _151 = Option::<Arguments<'_>>::None;
        _150 = core::panicking::assert_failed::<i128, i128>(move _149, _143, _144, move _151) -> unwind continue;
    }

    bb22: {
        _1061 = const _;
        _155 = Eq(const 42_i128, const 0_i128);
        assert(!move _155, "attempt to divide `{}` by zero", _103) -> [success: bb23, unwind continue];
    }

    bb23: {
        _156 = Eq(const 42_i128, const -1_i128);
        _157 = Eq(_103, const i128::MIN);
        _158 = BitAnd(move _156, move _157);
        assert(!move _158, "attempt to compute `{} / {}`, which would overflow", _103, const 42_i128) -> [success: bb24, unwind continue];
    }

    bb24: {
        _154 = Div(_103, const 42_i128);
        _153 = &_154;
        _152 = (_1061, move _153);
        _159 = (_152.0: &i128);
        _160 = (_152.1: &i128);
        _163 = (*_159);
        _164 = (*_160);
        _162 = Eq(move _163, move _164);
        _161 = Not(move _162);
        switchInt(move _161) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _165 = core::panicking::AssertKind::Eq;
        _167 = Option::<Arguments<'_>>::None;
        _166 = core::panicking::assert_failed::<i128, i128>(move _165, _159, _160, move _167) -> unwind continue;
    }

    bb26: {
        _170 = Neg(_103);
        _169 = &_170;
        _173 = Eq(const -1_i128, const 0_i128);
        assert(!move _173, "attempt to divide `{}` by zero", _103) -> [success: bb27, unwind continue];
    }

    bb27: {
        _174 = Eq(const -1_i128, const -1_i128);
        _175 = Eq(_103, const i128::MIN);
        _176 = BitAnd(move _174, move _175);
        assert(!move _176, "attempt to compute `{} / {}`, which would overflow", _103, const -1_i128) -> [success: bb28, unwind continue];
    }

    bb28: {
        _172 = Div(_103, const -1_i128);
        _171 = &_172;
        _168 = (move _169, move _171);
        _177 = (_168.0: &i128);
        _178 = (_168.1: &i128);
        _181 = (*_177);
        _182 = (*_178);
        _180 = Eq(move _181, move _182);
        _179 = Not(move _180);
        switchInt(move _179) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _183 = core::panicking::AssertKind::Eq;
        _185 = Option::<Arguments<'_>>::None;
        _184 = core::panicking::assert_failed::<i128, i128>(move _183, _177, _178, move _185) -> unwind continue;
    }

    bb30: {
        _1060 = const _;
        _188 = Shr(_103, const 65_i32);
        _187 = &_188;
        _186 = (_1060, move _187);
        _189 = (_186.0: &i128);
        _190 = (_186.1: &i128);
        _193 = (*_189);
        _194 = (*_190);
        _192 = Eq(move _193, move _194);
        _191 = Not(move _192);
        switchInt(move _191) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _195 = core::panicking::AssertKind::Eq;
        _197 = Option::<Arguments<'_>>::None;
        _196 = core::panicking::assert_failed::<i128, i128>(move _195, _189, _190, move _197) -> unwind continue;
    }

    bb32: {
        _1059 = const _;
        _200 = Shl(_103, const 65_i32);
        _199 = &_200;
        _198 = (_1059, move _199);
        _201 = (_198.0: &i128);
        _202 = (_198.1: &i128);
        _205 = (*_201);
        _206 = (*_202);
        _204 = Eq(move _205, move _206);
        _203 = Not(move _204);
        switchInt(move _203) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _207 = core::panicking::AssertKind::Eq;
        _209 = Option::<Arguments<'_>>::None;
        _208 = core::panicking::assert_failed::<i128, i128>(move _207, _201, _202, move _209) -> unwind continue;
    }

    bb34: {
        _211 = Lt(_103, _26);
        _210 = Not(move _211);
        switchInt(move _210) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _212 = core::panicking::panic(const "assertion failed: k < z") -> unwind continue;
    }

    bb36: {
        _215 = _14;
        _214 = Gt(move _215, _103);
        _213 = Not(move _214);
        switchInt(move _213) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _216 = core::panicking::panic(const "assertion failed: y > k") -> unwind continue;
    }

    bb38: {
        _219 = _14;
        _218 = Lt(move _219, _1);
        _217 = Not(move _218);
        switchInt(move _217) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _220 = core::panicking::panic(const "assertion failed: y < x") -> unwind continue;
    }

    bb40: {
        _223 = _1 as i64 (IntToInt);
        _222 = &_223;
        _1058 = const _;
        _221 = (move _222, _1058);
        _224 = (_221.0: &i64);
        _225 = (_221.1: &i64);
        _228 = (*_224);
        _229 = (*_225);
        _227 = Eq(move _228, move _229);
        _226 = Not(move _227);
        switchInt(move _226) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _230 = core::panicking::AssertKind::Eq;
        _232 = Option::<Arguments<'_>>::None;
        _231 = core::panicking::assert_failed::<i64, i64>(move _230, _224, _225, move _232) -> unwind continue;
    }

    bb42: {
        _235 = _26 as i64 (IntToInt);
        _234 = &_235;
        _1057 = const _;
        _233 = (move _234, _1057);
        _236 = (_233.0: &i64);
        _237 = (_233.1: &i64);
        _240 = (*_236);
        _241 = (*_237);
        _239 = Eq(move _240, move _241);
        _238 = Not(move _239);
        switchInt(move _238) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _242 = core::panicking::AssertKind::Eq;
        _244 = Option::<Arguments<'_>>::None;
        _243 = core::panicking::assert_failed::<i64, i64>(move _242, _236, _237, move _244) -> unwind continue;
    }

    bb44: {
        _247 = _103 as i64 (IntToInt);
        _246 = &_247;
        _1056 = const _;
        _245 = (move _246, _1056);
        _248 = (_245.0: &i64);
        _249 = (_245.1: &i64);
        _252 = (*_248);
        _253 = (*_249);
        _251 = Eq(move _252, move _253);
        _250 = Not(move _251);
        switchInt(move _250) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        _254 = core::panicking::AssertKind::Eq;
        _256 = Option::<Arguments<'_>>::None;
        _255 = core::panicking::assert_failed::<i64, i64>(move _254, _248, _249, move _256) -> unwind continue;
    }

    bb46: {
        _259 = _103 as u128 (IntToInt);
        _258 = &_259;
        _1055 = const _;
        _257 = (move _258, _1055);
        _260 = (_257.0: &u128);
        _261 = (_257.1: &u128);
        _264 = (*_260);
        _265 = (*_261);
        _263 = Eq(move _264, move _265);
        _262 = Not(move _263);
        switchInt(move _262) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _266 = core::panicking::AssertKind::Eq;
        _268 = Option::<Arguments<'_>>::None;
        _267 = core::panicking::assert_failed::<u128, u128>(move _266, _260, _261, move _268) -> unwind continue;
    }

    bb48: {
        _272 = Neg(_103);
        _271 = move _272 as u128 (IntToInt);
        _270 = &_271;
        _1054 = const _;
        _269 = (move _270, _1054);
        _273 = (_269.0: &u128);
        _274 = (_269.1: &u128);
        _277 = (*_273);
        _278 = (*_274);
        _276 = Eq(move _277, move _278);
        _275 = Not(move _276);
        switchInt(move _275) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        _279 = core::panicking::AssertKind::Eq;
        _281 = Option::<Arguments<'_>>::None;
        _280 = core::panicking::assert_failed::<u128, u128>(move _279, _273, _274, move _281) -> unwind continue;
    }

    bb50: {
        _286 = Neg(_26);
        _285 = move _286 as f64 (IntToFloat);
        _284 = move _285 as i128 (FloatToInt);
        _283 = &_284;
        _288 = Neg(_26);
        _287 = &_288;
        _282 = (move _283, move _287);
        _289 = (_282.0: &i128);
        _290 = (_282.1: &i128);
        _293 = (*_289);
        _294 = (*_290);
        _292 = Eq(move _293, move _294);
        _291 = Not(move _292);
        switchInt(move _291) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _295 = core::panicking::AssertKind::Eq;
        _297 = Option::<Arguments<'_>>::None;
        _296 = core::panicking::assert_failed::<i128, i128>(move _295, _289, _290, move _297) -> unwind continue;
    }

    bb52: {
        _302 = Neg(_26);
        _301 = move _302 as f32 (IntToFloat);
        _300 = move _301 as i128 (FloatToInt);
        _299 = &_300;
        _304 = Neg(_26);
        _303 = &_304;
        _298 = (move _299, move _303);
        _305 = (_298.0: &i128);
        _306 = (_298.1: &i128);
        _309 = (*_305);
        _310 = (*_306);
        _308 = Eq(move _309, move _310);
        _307 = Not(move _308);
        switchInt(move _307) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _311 = core::panicking::AssertKind::Eq;
        _313 = Option::<Arguments<'_>>::None;
        _312 = core::panicking::assert_failed::<i128, i128>(move _311, _305, _306, move _313) -> unwind continue;
    }

    bb54: {
        _319 = Neg(_26);
        _318 = move _319 as f64 (IntToFloat);
        _317 = Mul(move _318, const 16f64);
        _316 = move _317 as i128 (FloatToInt);
        _315 = &_316;
        _322 = Neg(_26);
        _321 = Mul(move _322, const 16_i128);
        _320 = &_321;
        _314 = (move _315, move _320);
        _323 = (_314.0: &i128);
        _324 = (_314.1: &i128);
        _327 = (*_323);
        _328 = (*_324);
        _326 = Eq(move _327, move _328);
        _325 = Not(move _326);
        switchInt(move _325) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _329 = core::panicking::AssertKind::Eq;
        _331 = Option::<Arguments<'_>>::None;
        _330 = core::panicking::assert_failed::<i128, i128>(move _329, _323, _324, move _331) -> unwind continue;
    }

    bb56: {
        _337 = Neg(_26);
        _336 = move _337 as f32 (IntToFloat);
        _335 = Mul(move _336, const 16f32);
        _334 = move _335 as i128 (FloatToInt);
        _333 = &_334;
        _340 = Neg(_26);
        _339 = Mul(move _340, const 16_i128);
        _338 = &_339;
        _332 = (move _333, move _338);
        _341 = (_332.0: &i128);
        _342 = (_332.1: &i128);
        _345 = (*_341);
        _346 = (*_342);
        _344 = Eq(move _345, move _346);
        _343 = Not(move _344);
        switchInt(move _343) -> [0: bb58, otherwise: bb57];
    }

    bb57: {
        _347 = core::panicking::AssertKind::Eq;
        _349 = Option::<Arguments<'_>>::None;
        _348 = core::panicking::assert_failed::<i128, i128>(move _347, _341, _342, move _349) -> unwind continue;
    }

    bb58: {
        _350 = test::black_box::<i128>(const -1_i128) -> [return: bb59, unwind continue];
    }

    bb59: {
        _1053 = const _;
        _354 = _350;
        _353 = Not(move _354);
        _352 = &_353;
        _351 = (_1053, move _352);
        _355 = (_351.0: &i128);
        _356 = (_351.1: &i128);
        _359 = (*_355);
        _360 = (*_356);
        _358 = Eq(move _359, move _360);
        _357 = Not(move _358);
        switchInt(move _357) -> [0: bb61, otherwise: bb60];
    }

    bb60: {
        _361 = core::panicking::AssertKind::Eq;
        _363 = Option::<Arguments<'_>>::None;
        _362 = core::panicking::assert_failed::<i128, i128>(move _361, _355, _356, move _363) -> unwind continue;
    }

    bb61: {
        _364 = test::black_box::<i128>(const -2_i128) -> [return: bb62, unwind continue];
    }

    bb62: {
        _1052 = const _;
        _366 = &_364;
        _365 = (_1052, move _366);
        _367 = (_365.0: &i128);
        _368 = (_365.1: &i128);
        _371 = (*_367);
        _372 = (*_368);
        _370 = Eq(move _371, move _372);
        _369 = Not(move _370);
        switchInt(move _369) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        _373 = core::panicking::AssertKind::Eq;
        _375 = Option::<Arguments<'_>>::None;
        _374 = core::panicking::assert_failed::<i128, i128>(move _373, _367, _368, move _375) -> unwind continue;
    }

    bb64: {
        _376 = test::black_box::<i128>(const 11259375_i128) -> [return: bb65, unwind continue];
    }

    bb65: {
        _380 = _376;
        _381 = _376;
        _379 = Mul(move _380, move _381);
        _378 = &_379;
        _1051 = const _;
        _377 = (move _378, _1051);
        _382 = (_377.0: &i128);
        _383 = (_377.1: &i128);
        _386 = (*_382);
        _387 = (*_383);
        _385 = Eq(move _386, move _387);
        _384 = Not(move _385);
        switchInt(move _384) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        _388 = core::panicking::AssertKind::Eq;
        _390 = Option::<Arguments<'_>>::None;
        _389 = core::panicking::assert_failed::<i128, i128>(move _388, _382, _383, move _390) -> unwind continue;
    }

    bb67: {
        _396 = _376;
        _397 = _376;
        _395 = Mul(move _396, move _397);
        _398 = _376;
        _394 = Mul(move _395, move _398);
        _399 = _376;
        _393 = Mul(move _394, move _399);
        _392 = &_393;
        _1050 = const _;
        _391 = (move _392, _1050);
        _400 = (_391.0: &i128);
        _401 = (_391.1: &i128);
        _404 = (*_400);
        _405 = (*_401);
        _403 = Eq(move _404, move _405);
        _402 = Not(move _403);
        switchInt(move _402) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _406 = core::panicking::AssertKind::Eq;
        _408 = Option::<Arguments<'_>>::None;
        _407 = core::panicking::assert_failed::<i128, i128>(move _406, _400, _401, move _408) -> unwind continue;
    }

    bb69: {
        _413 = _376;
        _412 = Neg(move _413);
        _415 = _376;
        _414 = Neg(move _415);
        _411 = Mul(move _412, move _414);
        _410 = &_411;
        _1049 = const _;
        _409 = (move _410, _1049);
        _416 = (_409.0: &i128);
        _417 = (_409.1: &i128);
        _420 = (*_416);
        _421 = (*_417);
        _419 = Eq(move _420, move _421);
        _418 = Not(move _419);
        switchInt(move _418) -> [0: bb71, otherwise: bb70];
    }

    bb70: {
        _422 = core::panicking::AssertKind::Eq;
        _424 = Option::<Arguments<'_>>::None;
        _423 = core::panicking::assert_failed::<i128, i128>(move _422, _416, _417, move _424) -> unwind continue;
    }

    bb71: {
        _431 = _376;
        _430 = Neg(move _431);
        _433 = _376;
        _432 = Neg(move _433);
        _429 = Mul(move _430, move _432);
        _435 = _376;
        _434 = Neg(move _435);
        _428 = Mul(move _429, move _434);
        _437 = _376;
        _436 = Neg(move _437);
        _427 = Mul(move _428, move _436);
        _426 = &_427;
        _1048 = const _;
        _425 = (move _426, _1048);
        _438 = (_425.0: &i128);
        _439 = (_425.1: &i128);
        _442 = (*_438);
        _443 = (*_439);
        _441 = Eq(move _442, move _443);
        _440 = Not(move _441);
        switchInt(move _440) -> [0: bb73, otherwise: bb72];
    }

    bb72: {
        _444 = core::panicking::AssertKind::Eq;
        _446 = Option::<Arguments<'_>>::None;
        _445 = core::panicking::assert_failed::<i128, i128>(move _444, _438, _439, move _446) -> unwind continue;
    }

    bb73: {
        _453 = _376;
        _452 = Neg(move _453);
        _455 = _376;
        _454 = Neg(move _455);
        _451 = Add(move _452, move _454);
        _457 = _376;
        _456 = Neg(move _457);
        _450 = Add(move _451, move _456);
        _459 = _376;
        _458 = Neg(move _459);
        _449 = Add(move _450, move _458);
        _448 = &_449;
        _1047 = const _;
        _447 = (move _448, _1047);
        _460 = (_447.0: &i128);
        _461 = (_447.1: &i128);
        _464 = (*_460);
        _465 = (*_461);
        _463 = Eq(move _464, move _465);
        _462 = Not(move _463);
        switchInt(move _462) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _466 = core::panicking::AssertKind::Eq;
        _468 = Option::<Arguments<'_>>::None;
        _467 = core::panicking::assert_failed::<i128, i128>(move _466, _460, _461, move _468) -> unwind continue;
    }

    bb75: {
        _469 = test::black_box::<i128>(const -1512366075204170947332355369683137040_i128) -> [return: bb76, unwind continue];
    }

    bb76: {
        _473 = _469;
        _474 = _469;
        _472 = Add(move _473, move _474);
        _471 = &_472;
        _1046 = const _;
        _470 = (move _471, _1046);
        _475 = (_470.0: &i128);
        _476 = (_470.1: &i128);
        _479 = (*_475);
        _480 = (*_476);
        _478 = Eq(move _479, move _480);
        _477 = Not(move _478);
        switchInt(move _477) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _481 = core::panicking::AssertKind::Eq;
        _483 = Option::<Arguments<'_>>::None;
        _482 = core::panicking::assert_failed::<i128, i128>(move _481, _475, _476, move _483) -> unwind continue;
    }

    bb78: {
        _1045 = const _;
        _487 = _469;
        _488 = _469;
        _486 = Sub(move _487, move _488);
        _485 = &_486;
        _484 = (_1045, move _485);
        _489 = (_484.0: &i128);
        _490 = (_484.1: &i128);
        _493 = (*_489);
        _494 = (*_490);
        _492 = Eq(move _493, move _494);
        _491 = Not(move _492);
        switchInt(move _491) -> [0: bb80, otherwise: bb79];
    }

    bb79: {
        _495 = core::panicking::AssertKind::Eq;
        _497 = Option::<Arguments<'_>>::None;
        _496 = core::panicking::assert_failed::<i128, i128>(move _495, _489, _490, move _497) -> unwind continue;
    }

    bb80: {
        _1044 = const _;
        _501 = _469;
        _502 = _376;
        _500 = Add(move _501, move _502);
        _499 = &_500;
        _498 = (_1044, move _499);
        _503 = (_498.0: &i128);
        _504 = (_498.1: &i128);
        _507 = (*_503);
        _508 = (*_504);
        _506 = Eq(move _507, move _508);
        _505 = Not(move _506);
        switchInt(move _505) -> [0: bb82, otherwise: bb81];
    }

    bb81: {
        _509 = core::panicking::AssertKind::Eq;
        _511 = Option::<Arguments<'_>>::None;
        _510 = core::panicking::assert_failed::<i128, i128>(move _509, _503, _504, move _511) -> unwind continue;
    }

    bb82: {
        _1043 = const _;
        _515 = _469;
        _514 = Add(move _515, const 183138079419255074428548309402792464_i128);
        _513 = &_514;
        _512 = (_1043, move _513);
        _516 = (_512.0: &i128);
        _517 = (_512.1: &i128);
        _520 = (*_516);
        _521 = (*_517);
        _519 = Eq(move _520, move _521);
        _518 = Not(move _519);
        switchInt(move _518) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _522 = core::panicking::AssertKind::Eq;
        _524 = Option::<Arguments<'_>>::None;
        _523 = core::panicking::assert_failed::<i128, i128>(move _522, _516, _517, move _524) -> unwind continue;
    }

    bb84: {
        _1042 = const _;
        _528 = _469;
        _529 = Eq(const 42_i128, const 0_i128);
        assert(!move _529, "attempt to divide `{}` by zero", _528) -> [success: bb85, unwind continue];
    }

    bb85: {
        _530 = Eq(const 42_i128, const -1_i128);
        _531 = Eq(_528, const i128::MIN);
        _532 = BitAnd(move _530, move _531);
        assert(!move _532, "attempt to compute `{} / {}`, which would overflow", _528, const 42_i128) -> [success: bb86, unwind continue];
    }

    bb86: {
        _527 = Div(move _528, const 42_i128);
        _526 = &_527;
        _525 = (_1042, move _526);
        _533 = (_525.0: &i128);
        _534 = (_525.1: &i128);
        _537 = (*_533);
        _538 = (*_534);
        _536 = Eq(move _537, move _538);
        _535 = Not(move _536);
        switchInt(move _535) -> [0: bb88, otherwise: bb87];
    }

    bb87: {
        _539 = core::panicking::AssertKind::Eq;
        _541 = Option::<Arguments<'_>>::None;
        _540 = core::panicking::assert_failed::<i128, i128>(move _539, _533, _534, move _541) -> unwind continue;
    }

    bb88: {
        _545 = _469;
        _544 = Neg(move _545);
        _543 = &_544;
        _548 = _469;
        _549 = Eq(const -1_i128, const 0_i128);
        assert(!move _549, "attempt to divide `{}` by zero", _548) -> [success: bb89, unwind continue];
    }

    bb89: {
        _550 = Eq(const -1_i128, const -1_i128);
        _551 = Eq(_548, const i128::MIN);
        _552 = BitAnd(move _550, move _551);
        assert(!move _552, "attempt to compute `{} / {}`, which would overflow", _548, const -1_i128) -> [success: bb90, unwind continue];
    }

    bb90: {
        _547 = Div(move _548, const -1_i128);
        _546 = &_547;
        _542 = (move _543, move _546);
        _553 = (_542.0: &i128);
        _554 = (_542.1: &i128);
        _557 = (*_553);
        _558 = (*_554);
        _556 = Eq(move _557, move _558);
        _555 = Not(move _556);
        switchInt(move _555) -> [0: bb92, otherwise: bb91];
    }

    bb91: {
        _559 = core::panicking::AssertKind::Eq;
        _561 = Option::<Arguments<'_>>::None;
        _560 = core::panicking::assert_failed::<i128, i128>(move _559, _553, _554, move _561) -> unwind continue;
    }

    bb92: {
        _1041 = const _;
        _565 = _469;
        _564 = Shr(move _565, const 65_i32);
        _563 = &_564;
        _562 = (_1041, move _563);
        _566 = (_562.0: &i128);
        _567 = (_562.1: &i128);
        _570 = (*_566);
        _571 = (*_567);
        _569 = Eq(move _570, move _571);
        _568 = Not(move _569);
        switchInt(move _568) -> [0: bb94, otherwise: bb93];
    }

    bb93: {
        _572 = core::panicking::AssertKind::Eq;
        _574 = Option::<Arguments<'_>>::None;
        _573 = core::panicking::assert_failed::<i128, i128>(move _572, _566, _567, move _574) -> unwind continue;
    }

    bb94: {
        _1040 = const _;
        _578 = _469;
        _577 = Shl(move _578, const 65_i32);
        _576 = &_577;
        _575 = (_1040, move _576);
        _579 = (_575.0: &i128);
        _580 = (_575.1: &i128);
        _583 = (*_579);
        _584 = (*_580);
        _582 = Eq(move _583, move _584);
        _581 = Not(move _582);
        switchInt(move _581) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        _585 = core::panicking::AssertKind::Eq;
        _587 = Option::<Arguments<'_>>::None;
        _586 = core::panicking::assert_failed::<i128, i128>(move _585, _579, _580, move _587) -> unwind continue;
    }

    bb96: {
        _590 = _469;
        _591 = _376;
        _589 = Lt(move _590, move _591);
        _588 = Not(move _589);
        switchInt(move _588) -> [0: bb98, otherwise: bb97];
    }

    bb97: {
        _592 = core::panicking::panic(const "assertion failed: k < z") -> unwind continue;
    }

    bb98: {
        _595 = _364;
        _596 = _469;
        _594 = Gt(move _595, move _596);
        _593 = Not(move _594);
        switchInt(move _593) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        _597 = core::panicking::panic(const "assertion failed: y > k") -> unwind continue;
    }

    bb100: {
        _600 = _364;
        _601 = _350;
        _599 = Lt(move _600, move _601);
        _598 = Not(move _599);
        switchInt(move _598) -> [0: bb102, otherwise: bb101];
    }

    bb101: {
        _602 = core::panicking::panic(const "assertion failed: y < x") -> unwind continue;
    }

    bb102: {
        _606 = _350;
        _605 = move _606 as i64 (IntToInt);
        _604 = &_605;
        _1039 = const _;
        _603 = (move _604, _1039);
        _607 = (_603.0: &i64);
        _608 = (_603.1: &i64);
        _611 = (*_607);
        _612 = (*_608);
        _610 = Eq(move _611, move _612);
        _609 = Not(move _610);
        switchInt(move _609) -> [0: bb104, otherwise: bb103];
    }

    bb103: {
        _613 = core::panicking::AssertKind::Eq;
        _615 = Option::<Arguments<'_>>::None;
        _614 = core::panicking::assert_failed::<i64, i64>(move _613, _607, _608, move _615) -> unwind continue;
    }

    bb104: {
        _619 = _376;
        _618 = move _619 as i64 (IntToInt);
        _617 = &_618;
        _1038 = const _;
        _616 = (move _617, _1038);
        _620 = (_616.0: &i64);
        _621 = (_616.1: &i64);
        _624 = (*_620);
        _625 = (*_621);
        _623 = Eq(move _624, move _625);
        _622 = Not(move _623);
        switchInt(move _622) -> [0: bb106, otherwise: bb105];
    }

    bb105: {
        _626 = core::panicking::AssertKind::Eq;
        _628 = Option::<Arguments<'_>>::None;
        _627 = core::panicking::assert_failed::<i64, i64>(move _626, _620, _621, move _628) -> unwind continue;
    }

    bb106: {
        _632 = _469;
        _631 = move _632 as i64 (IntToInt);
        _630 = &_631;
        _1037 = const _;
        _629 = (move _630, _1037);
        _633 = (_629.0: &i64);
        _634 = (_629.1: &i64);
        _637 = (*_633);
        _638 = (*_634);
        _636 = Eq(move _637, move _638);
        _635 = Not(move _636);
        switchInt(move _635) -> [0: bb108, otherwise: bb107];
    }

    bb107: {
        _639 = core::panicking::AssertKind::Eq;
        _641 = Option::<Arguments<'_>>::None;
        _640 = core::panicking::assert_failed::<i64, i64>(move _639, _633, _634, move _641) -> unwind continue;
    }

    bb108: {
        _645 = _469;
        _644 = move _645 as u128 (IntToInt);
        _643 = &_644;
        _1036 = const _;
        _642 = (move _643, _1036);
        _646 = (_642.0: &u128);
        _647 = (_642.1: &u128);
        _650 = (*_646);
        _651 = (*_647);
        _649 = Eq(move _650, move _651);
        _648 = Not(move _649);
        switchInt(move _648) -> [0: bb110, otherwise: bb109];
    }

    bb109: {
        _652 = core::panicking::AssertKind::Eq;
        _654 = Option::<Arguments<'_>>::None;
        _653 = core::panicking::assert_failed::<u128, u128>(move _652, _646, _647, move _654) -> unwind continue;
    }

    bb110: {
        _659 = _469;
        _658 = Neg(move _659);
        _657 = move _658 as u128 (IntToInt);
        _656 = &_657;
        _1035 = const _;
        _655 = (move _656, _1035);
        _660 = (_655.0: &u128);
        _661 = (_655.1: &u128);
        _664 = (*_660);
        _665 = (*_661);
        _663 = Eq(move _664, move _665);
        _662 = Not(move _663);
        switchInt(move _662) -> [0: bb112, otherwise: bb111];
    }

    bb111: {
        _666 = core::panicking::AssertKind::Eq;
        _668 = Option::<Arguments<'_>>::None;
        _667 = core::panicking::assert_failed::<u128, u128>(move _666, _660, _661, move _668) -> unwind continue;
    }

    bb112: {
        _674 = _376;
        _673 = Neg(move _674);
        _672 = move _673 as f64 (IntToFloat);
        _671 = move _672 as i128 (FloatToInt);
        _670 = &_671;
        _677 = _376;
        _676 = Neg(move _677);
        _675 = &_676;
        _669 = (move _670, move _675);
        _678 = (_669.0: &i128);
        _679 = (_669.1: &i128);
        _682 = (*_678);
        _683 = (*_679);
        _681 = Eq(move _682, move _683);
        _680 = Not(move _681);
        switchInt(move _680) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        _684 = core::panicking::AssertKind::Eq;
        _686 = Option::<Arguments<'_>>::None;
        _685 = core::panicking::assert_failed::<i128, i128>(move _684, _678, _679, move _686) -> unwind continue;
    }

    bb114: {
        _692 = _376;
        _691 = Neg(move _692);
        _690 = move _691 as f32 (IntToFloat);
        _689 = move _690 as i128 (FloatToInt);
        _688 = &_689;
        _695 = _376;
        _694 = Neg(move _695);
        _693 = &_694;
        _687 = (move _688, move _693);
        _696 = (_687.0: &i128);
        _697 = (_687.1: &i128);
        _700 = (*_696);
        _701 = (*_697);
        _699 = Eq(move _700, move _701);
        _698 = Not(move _699);
        switchInt(move _698) -> [0: bb116, otherwise: bb115];
    }

    bb115: {
        _702 = core::panicking::AssertKind::Eq;
        _704 = Option::<Arguments<'_>>::None;
        _703 = core::panicking::assert_failed::<i128, i128>(move _702, _696, _697, move _704) -> unwind continue;
    }

    bb116: {
        _711 = _376;
        _710 = Neg(move _711);
        _709 = move _710 as f64 (IntToFloat);
        _708 = Mul(move _709, const 16f64);
        _707 = move _708 as i128 (FloatToInt);
        _706 = &_707;
        _715 = _376;
        _714 = Neg(move _715);
        _713 = Mul(move _714, const 16_i128);
        _712 = &_713;
        _705 = (move _706, move _712);
        _716 = (_705.0: &i128);
        _717 = (_705.1: &i128);
        _720 = (*_716);
        _721 = (*_717);
        _719 = Eq(move _720, move _721);
        _718 = Not(move _719);
        switchInt(move _718) -> [0: bb118, otherwise: bb117];
    }

    bb117: {
        _722 = core::panicking::AssertKind::Eq;
        _724 = Option::<Arguments<'_>>::None;
        _723 = core::panicking::assert_failed::<i128, i128>(move _722, _716, _717, move _724) -> unwind continue;
    }

    bb118: {
        _731 = _376;
        _730 = Neg(move _731);
        _729 = move _730 as f32 (IntToFloat);
        _728 = Mul(move _729, const 16f32);
        _727 = move _728 as i128 (FloatToInt);
        _726 = &_727;
        _735 = _376;
        _734 = Neg(move _735);
        _733 = Mul(move _734, const 16_i128);
        _732 = &_733;
        _725 = (move _726, move _732);
        _736 = (_725.0: &i128);
        _737 = (_725.1: &i128);
        _740 = (*_736);
        _741 = (*_737);
        _739 = Eq(move _740, move _741);
        _738 = Not(move _739);
        switchInt(move _738) -> [0: bb120, otherwise: bb119];
    }

    bb119: {
        _742 = core::panicking::AssertKind::Eq;
        _744 = Option::<Arguments<'_>>::None;
        _743 = core::panicking::assert_failed::<i128, i128>(move _742, _736, _737, move _744) -> unwind continue;
    }

    bb120: {
        _746 = Shl(const 1_i128, const 67_i32);
        _745 = Neg(move _746);
        _1034 = const _;
        _1033 = const _;
        _752 = _1033 as &[&str] (Pointer(Unsize));
        _757 = &_745;
        _756 = core::fmt::rt::Argument::<'_>::new_display::<i128>(_757) -> [return: bb121, unwind continue];
    }

    bb121: {
        _755 = [move _756];
        _754 = &_755;
        _753 = _754 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _751 = Arguments::<'_>::new_v1(move _752, move _753) -> [return: bb122, unwind continue];
    }

    bb122: {
        _750 = format(move _751) -> [return: bb123, unwind continue];
    }

    bb123: {
        _749 = move _750;
        _748 = &_749;
        _747 = (_1034, move _748);
        _758 = (_747.0: &&str);
        _759 = (_747.1: &std::string::String);
        _761 = <&str as PartialEq<String>>::eq(_758, _759) -> [return: bb124, unwind: bb219];
    }

    bb124: {
        _760 = Not(move _761);
        switchInt(move _760) -> [0: bb126, otherwise: bb125];
    }

    bb125: {
        _762 = core::panicking::AssertKind::Eq;
        _764 = Option::<Arguments<'_>>::None;
        _763 = core::panicking::assert_failed::<&str, String>(move _762, _758, _759, move _764) -> bb219;
    }

    bb126: {
        drop(_749) -> [return: bb127, unwind continue];
    }

    bb127: {
        _1032 = const _;
        _1031 = const _;
        _770 = _1031 as &[&str] (Pointer(Unsize));
        _775 = &_745;
        _774 = core::fmt::rt::Argument::<'_>::new_lower_hex::<i128>(_775) -> [return: bb128, unwind continue];
    }

    bb128: {
        _773 = [move _774];
        _772 = &_773;
        _771 = _772 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _769 = Arguments::<'_>::new_v1(move _770, move _771) -> [return: bb129, unwind continue];
    }

    bb129: {
        _768 = format(move _769) -> [return: bb130, unwind continue];
    }

    bb130: {
        _767 = move _768;
        _766 = &_767;
        _765 = (_1032, move _766);
        _776 = (_765.0: &&str);
        _777 = (_765.1: &std::string::String);
        _779 = <&str as PartialEq<String>>::eq(_776, _777) -> [return: bb131, unwind: bb218];
    }

    bb131: {
        _778 = Not(move _779);
        switchInt(move _778) -> [0: bb133, otherwise: bb132];
    }

    bb132: {
        _780 = core::panicking::AssertKind::Eq;
        _782 = Option::<Arguments<'_>>::None;
        _781 = core::panicking::assert_failed::<&str, String>(move _780, _776, _777, move _782) -> bb218;
    }

    bb133: {
        drop(_767) -> [return: bb134, unwind continue];
    }

    bb134: {
        _1030 = const _;
        _1029 = const _;
        _788 = _1029 as &[&str] (Pointer(Unsize));
        _793 = &_745;
        _792 = core::fmt::rt::Argument::<'_>::new_octal::<i128>(_793) -> [return: bb135, unwind continue];
    }

    bb135: {
        _791 = [move _792];
        _790 = &_791;
        _789 = _790 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _787 = Arguments::<'_>::new_v1(move _788, move _789) -> [return: bb136, unwind continue];
    }

    bb136: {
        _786 = format(move _787) -> [return: bb137, unwind continue];
    }

    bb137: {
        _785 = move _786;
        _784 = &_785;
        _783 = (_1030, move _784);
        _794 = (_783.0: &&str);
        _795 = (_783.1: &std::string::String);
        _797 = <&str as PartialEq<String>>::eq(_794, _795) -> [return: bb138, unwind: bb217];
    }

    bb138: {
        _796 = Not(move _797);
        switchInt(move _796) -> [0: bb140, otherwise: bb139];
    }

    bb139: {
        _798 = core::panicking::AssertKind::Eq;
        _800 = Option::<Arguments<'_>>::None;
        _799 = core::panicking::assert_failed::<&str, String>(move _798, _794, _795, move _800) -> bb217;
    }

    bb140: {
        drop(_785) -> [return: bb141, unwind continue];
    }

    bb141: {
        _1028 = const _;
        _1027 = const _;
        _806 = _1027 as &[&str] (Pointer(Unsize));
        _811 = &_745;
        _810 = core::fmt::rt::Argument::<'_>::new_binary::<i128>(_811) -> [return: bb142, unwind continue];
    }

    bb142: {
        _809 = [move _810];
        _808 = &_809;
        _807 = _808 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _805 = Arguments::<'_>::new_v1(move _806, move _807) -> [return: bb143, unwind continue];
    }

    bb143: {
        _804 = format(move _805) -> [return: bb144, unwind continue];
    }

    bb144: {
        _803 = move _804;
        _802 = &_803;
        _801 = (_1028, move _802);
        _812 = (_801.0: &&str);
        _813 = (_801.1: &std::string::String);
        _815 = <&str as PartialEq<String>>::eq(_812, _813) -> [return: bb145, unwind: bb216];
    }

    bb145: {
        _814 = Not(move _815);
        switchInt(move _814) -> [0: bb147, otherwise: bb146];
    }

    bb146: {
        _816 = core::panicking::AssertKind::Eq;
        _818 = Option::<Arguments<'_>>::None;
        _817 = core::panicking::assert_failed::<&str, String>(move _816, _812, _813, move _818) -> bb216;
    }

    bb147: {
        drop(_803) -> [return: bb148, unwind continue];
    }

    bb148: {
        _1026 = const _;
        _1025 = const _;
        _824 = _1025 as &[&str] (Pointer(Unsize));
        _829 = &_745;
        _828 = core::fmt::rt::Argument::<'_>::new_debug::<i128>(_829) -> [return: bb149, unwind continue];
    }

    bb149: {
        _827 = [move _828];
        _826 = &_827;
        _825 = _826 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _823 = Arguments::<'_>::new_v1(move _824, move _825) -> [return: bb150, unwind continue];
    }

    bb150: {
        _822 = format(move _823) -> [return: bb151, unwind continue];
    }

    bb151: {
        _821 = move _822;
        _820 = &_821;
        _819 = (_1026, move _820);
        _830 = (_819.0: &&str);
        _831 = (_819.1: &std::string::String);
        _833 = <&str as PartialEq<String>>::eq(_830, _831) -> [return: bb152, unwind: bb215];
    }

    bb152: {
        _832 = Not(move _833);
        switchInt(move _832) -> [0: bb154, otherwise: bb153];
    }

    bb153: {
        _834 = core::panicking::AssertKind::Eq;
        _836 = Option::<Arguments<'_>>::None;
        _835 = core::panicking::assert_failed::<&str, String>(move _834, _830, _831, move _836) -> bb215;
    }

    bb154: {
        drop(_821) -> [return: bb155, unwind continue];
    }

    bb155: {
        _838 = &_350;
        _842 = &_350;
        _841 = (*_842);
        _840 = test::black_box::<i128>(move _841) -> [return: bb156, unwind continue];
    }

    bb156: {
        _839 = &_840;
        _837 = (move _838, move _839);
        _843 = (_837.0: &i128);
        _844 = (_837.1: &i128);
        _847 = (*_843);
        _848 = (*_844);
        _846 = Eq(move _847, move _848);
        _845 = Not(move _846);
        switchInt(move _845) -> [0: bb158, otherwise: bb157];
    }

    bb157: {
        _849 = core::panicking::AssertKind::Eq;
        _851 = Option::<Arguments<'_>>::None;
        _850 = core::panicking::assert_failed::<i128, i128>(move _849, _843, _844, move _851) -> unwind continue;
    }

    bb158: {
        _856 = _376;
        _855 = Neg(move _856);
        _858 = _376;
        _857 = Neg(move _858);
        _854 = core::num::<impl i128>::checked_mul(move _855, move _857) -> [return: bb159, unwind continue];
    }

    bb159: {
        _853 = &_854;
        _1024 = const _;
        _852 = (move _853, _1024);
        _859 = (_852.0: &std::option::Option<i128>);
        _860 = (_852.1: &std::option::Option<i128>);
        _862 = <Option<i128> as PartialEq>::eq(_859, _860) -> [return: bb160, unwind continue];
    }

    bb160: {
        _861 = Not(move _862);
        switchInt(move _861) -> [0: bb162, otherwise: bb161];
    }

    bb161: {
        _863 = core::panicking::AssertKind::Eq;
        _865 = Option::<Arguments<'_>>::None;
        _864 = core::panicking::assert_failed::<Option<i128>, Option<i128>>(move _863, _859, _860, move _865) -> unwind continue;
    }

    bb162: {
        _869 = _376;
        _870 = _376;
        _868 = core::num::<impl i128>::checked_mul(move _869, move _870) -> [return: bb163, unwind continue];
    }

    bb163: {
        _867 = &_868;
        _1023 = const _;
        _866 = (move _867, _1023);
        _871 = (_866.0: &std::option::Option<i128>);
        _872 = (_866.1: &std::option::Option<i128>);
        _874 = <Option<i128> as PartialEq>::eq(_871, _872) -> [return: bb164, unwind continue];
    }

    bb164: {
        _873 = Not(move _874);
        switchInt(move _873) -> [0: bb166, otherwise: bb165];
    }

    bb165: {
        _875 = core::panicking::AssertKind::Eq;
        _877 = Option::<Arguments<'_>>::None;
        _876 = core::panicking::assert_failed::<Option<i128>, Option<i128>>(move _875, _871, _872, move _877) -> unwind continue;
    }

    bb166: {
        _881 = _469;
        _882 = _469;
        _880 = core::num::<impl i128>::checked_mul(move _881, move _882) -> [return: bb167, unwind continue];
    }

    bb167: {
        _879 = &_880;
        _1022 = const _;
        _878 = (move _879, _1022);
        _883 = (_878.0: &std::option::Option<i128>);
        _884 = (_878.1: &std::option::Option<i128>);
        _886 = <Option<i128> as PartialEq>::eq(_883, _884) -> [return: bb168, unwind continue];
    }

    bb168: {
        _885 = Not(move _886);
        switchInt(move _885) -> [0: bb170, otherwise: bb169];
    }

    bb169: {
        _887 = core::panicking::AssertKind::Eq;
        _889 = Option::<Arguments<'_>>::None;
        _888 = core::panicking::assert_failed::<Option<i128>, Option<i128>>(move _887, _883, _884, move _889) -> unwind continue;
    }

    bb170: {
        _890 = test::black_box::<i128>(const _) -> [return: bb171, unwind continue];
    }

    bb171: {
        _891 = test::black_box::<i128>(const 17_i128) -> [return: bb172, unwind continue];
    }

    bb172: {
        _895 = _890;
        _896 = test::black_box::<i128>(const 2_i128) -> [return: bb173, unwind continue];
    }

    bb173: {
        _894 = core::num::<impl i128>::checked_sub(move _895, move _896) -> [return: bb174, unwind continue];
    }

    bb174: {
        _893 = &_894;
        _1021 = const _;
        _892 = (move _893, _1021);
        _897 = (_892.0: &std::option::Option<i128>);
        _898 = (_892.1: &std::option::Option<i128>);
        _900 = <Option<i128> as PartialEq>::eq(_897, _898) -> [return: bb175, unwind continue];
    }

    bb175: {
        _899 = Not(move _900);
        switchInt(move _899) -> [0: bb177, otherwise: bb176];
    }

    bb176: {
        _901 = core::panicking::AssertKind::Eq;
        _903 = Option::<Arguments<'_>>::None;
        _902 = core::panicking::assert_failed::<Option<i128>, Option<i128>>(move _901, _897, _898, move _903) -> unwind continue;
    }

    bb177: {
        _907 = _890;
        _908 = _890;
        _906 = core::num::<impl i128>::checked_add(move _907, move _908) -> [return: bb178, unwind continue];
    }

    bb178: {
        _905 = &_906;
        _1020 = const _;
        _904 = (move _905, _1020);
        _909 = (_904.0: &std::option::Option<i128>);
        _910 = (_904.1: &std::option::Option<i128>);
        _912 = <Option<i128> as PartialEq>::eq(_909, _910) -> [return: bb179, unwind continue];
    }

    bb179: {
        _911 = Not(move _912);
        switchInt(move _911) -> [0: bb181, otherwise: bb180];
    }

    bb180: {
        _913 = core::panicking::AssertKind::Eq;
        _915 = Option::<Arguments<'_>>::None;
        _914 = core::panicking::assert_failed::<Option<i128>, Option<i128>>(move _913, _909, _910, move _915) -> unwind continue;
    }

    bb181: {
        _921 = _890;
        _920 = Add(move _921, const 1_i128);
        _919 = Neg(move _920);
        _918 = core::num::<impl i128>::checked_add(move _919, const 2_i128) -> [return: bb182, unwind continue];
    }

    bb182: {
        _917 = &_918;
        _1019 = const _;
        _916 = (move _917, _1019);
        _922 = (_916.0: &std::option::Option<i128>);
        _923 = (_916.1: &std::option::Option<i128>);
        _925 = <Option<i128> as PartialEq>::eq(_922, _923) -> [return: bb183, unwind continue];
    }

    bb183: {
        _924 = Not(move _925);
        switchInt(move _924) -> [0: bb185, otherwise: bb184];
    }

    bb184: {
        _926 = core::panicking::AssertKind::Eq;
        _928 = Option::<Arguments<'_>>::None;
        _927 = core::panicking::assert_failed::<Option<i128>, Option<i128>>(move _926, _922, _923, move _928) -> unwind continue;
    }

    bb185: {
        _932 = _890;
        _933 = _890;
        _931 = core::num::<impl i128>::checked_sub(move _932, move _933) -> [return: bb186, unwind continue];
    }

    bb186: {
        _930 = &_931;
        _1018 = const _;
        _929 = (move _930, _1018);
        _934 = (_929.0: &std::option::Option<i128>);
        _935 = (_929.1: &std::option::Option<i128>);
        _937 = <Option<i128> as PartialEq>::eq(_934, _935) -> [return: bb187, unwind continue];
    }

    bb187: {
        _936 = Not(move _937);
        switchInt(move _936) -> [0: bb189, otherwise: bb188];
    }

    bb188: {
        _938 = core::panicking::AssertKind::Eq;
        _940 = Option::<Arguments<'_>>::None;
        _939 = core::panicking::assert_failed::<Option<i128>, Option<i128>>(move _938, _934, _935, move _940) -> unwind continue;
    }

    bb189: {
        _944 = test::black_box::<u128>(const 1_u128) -> [return: bb190, unwind continue];
    }

    bb190: {
        _945 = test::black_box::<u32>(const 127_u32) -> [return: bb191, unwind continue];
    }

    bb191: {
        _943 = core::num::<impl u128>::checked_shl(move _944, move _945) -> [return: bb192, unwind continue];
    }

    bb192: {
        _942 = &_943;
        _1017 = const _;
        _941 = (move _942, _1017);
        _946 = (_941.0: &std::option::Option<u128>);
        _947 = (_941.1: &std::option::Option<u128>);
        _949 = <Option<u128> as PartialEq>::eq(_946, _947) -> [return: bb193, unwind continue];
    }

    bb193: {
        _948 = Not(move _949);
        switchInt(move _948) -> [0: bb195, otherwise: bb194];
    }

    bb194: {
        _950 = core::panicking::AssertKind::Eq;
        _952 = Option::<Arguments<'_>>::None;
        _951 = core::panicking::assert_failed::<Option<u128>, Option<u128>>(move _950, _946, _947, move _952) -> unwind continue;
    }

    bb195: {
        _956 = _891;
        _957 = test::black_box::<u32>(const 128_u32) -> [return: bb196, unwind continue];
    }

    bb196: {
        _955 = core::num::<impl i128>::checked_shl(move _956, move _957) -> [return: bb197, unwind continue];
    }

    bb197: {
        _954 = &_955;
        _1016 = const _;
        _953 = (move _954, _1016);
        _958 = (_953.0: &std::option::Option<i128>);
        _959 = (_953.1: &std::option::Option<i128>);
        _961 = <Option<i128> as PartialEq>::eq(_958, _959) -> [return: bb198, unwind continue];
    }

    bb198: {
        _960 = Not(move _961);
        switchInt(move _960) -> [0: bb200, otherwise: bb199];
    }

    bb199: {
        _962 = core::panicking::AssertKind::Eq;
        _964 = Option::<Arguments<'_>>::None;
        _963 = core::panicking::assert_failed::<Option<i128>, Option<i128>>(move _962, _958, _959, move _964) -> unwind continue;
    }

    bb200: {
        _968 = test::black_box::<i128>(const -87559967289969187895646876466835277875_i128) -> [return: bb201, unwind continue];
    }

    bb201: {
        _969 = test::black_box::<i128>(const 84285771033834995895337664386045050880_i128) -> [return: bb202, unwind continue];
    }

    bb202: {
        _970 = Eq(_969, const 0_i128);
        assert(!move _970, "attempt to divide `{}` by zero", _968) -> [success: bb203, unwind continue];
    }

    bb203: {
        _971 = Eq(_969, const -1_i128);
        _972 = Eq(_968, const i128::MIN);
        _973 = BitAnd(move _971, move _972);
        assert(!move _973, "attempt to compute `{} / {}`, which would overflow", _968, _969) -> [success: bb204, unwind continue];
    }

    bb204: {
        _967 = Div(move _968, move _969);
        _966 = &_967;
        _1015 = const _;
        _965 = (move _966, _1015);
        _974 = (_965.0: &i128);
        _975 = (_965.1: &i128);
        _978 = (*_974);
        _979 = (*_975);
        _977 = Eq(move _978, move _979);
        _976 = Not(move _977);
        switchInt(move _976) -> [0: bb206, otherwise: bb205];
    }

    bb205: {
        _980 = core::panicking::AssertKind::Eq;
        _982 = Option::<Arguments<'_>>::None;
        _981 = core::panicking::assert_failed::<i128, i128>(move _980, _974, _975, move _982) -> unwind continue;
    }

    bb206: {
        _1014 = const _;
        _1013 = const _;
        _987 = _1013 as &[i128] (Pointer(Unsize));
        _986 = core::slice::<impl [i128]>::iter(move _987) -> [return: bb207, unwind continue];
    }

    bb207: {
        _985 = <std::slice::Iter<'_, i128> as Iterator>::sum::<i128>(move _986) -> [return: bb208, unwind continue];
    }

    bb208: {
        _984 = &_985;
        _983 = (_1014, move _984);
        _988 = (_983.0: &i128);
        _989 = (_983.1: &i128);
        _992 = (*_988);
        _993 = (*_989);
        _991 = Eq(move _992, move _993);
        _990 = Not(move _991);
        switchInt(move _990) -> [0: bb210, otherwise: bb209];
    }

    bb209: {
        _994 = core::panicking::AssertKind::Eq;
        _996 = Option::<Arguments<'_>>::None;
        _995 = core::panicking::assert_failed::<i128, i128>(move _994, _988, _989, move _996) -> unwind continue;
    }

    bb210: {
        _1012 = const _;
        _1011 = const _;
        _1001 = _1011 as &[i128] (Pointer(Unsize));
        _1000 = core::slice::<impl [i128]>::iter(move _1001) -> [return: bb211, unwind continue];
    }

    bb211: {
        _999 = <std::slice::Iter<'_, i128> as Iterator>::product::<i128>(move _1000) -> [return: bb212, unwind continue];
    }

    bb212: {
        _998 = &_999;
        _997 = (_1012, move _998);
        _1002 = (_997.0: &i128);
        _1003 = (_997.1: &i128);
        _1006 = (*_1002);
        _1007 = (*_1003);
        _1005 = Eq(move _1006, move _1007);
        _1004 = Not(move _1005);
        switchInt(move _1004) -> [0: bb214, otherwise: bb213];
    }

    bb213: {
        _1008 = core::panicking::AssertKind::Eq;
        _1010 = Option::<Arguments<'_>>::None;
        _1009 = core::panicking::assert_failed::<i128, i128>(move _1008, _1002, _1003, move _1010) -> unwind continue;
    }

    bb214: {
        return;
    }

    bb215 (cleanup): {
        drop(_821) -> [return: bb220, unwind terminate];
    }

    bb216 (cleanup): {
        drop(_803) -> [return: bb220, unwind terminate];
    }

    bb217 (cleanup): {
        drop(_785) -> [return: bb220, unwind terminate];
    }

    bb218 (cleanup): {
        drop(_767) -> [return: bb220, unwind terminate];
    }

    bb219 (cleanup): {
        drop(_749) -> [return: bb220, unwind terminate];
    }

    bb220 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[i128; 4] = {
    let mut _0: &[i128; 4];
    let mut _1: [i128; 4];

    bb0: {
        _1 = [const 1_i128, const 2_i128, const 3_i128, const 4_i128];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const 24_i128;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[i128; 4] = {
    let mut _0: &[i128; 4];
    let mut _1: [i128; 4];

    bb0: {
        _1 = [const 1_i128, const 2_i128, const 3_i128, const 4_i128];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const 10_i128;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const -1_i128;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &Option<i128> = {
    let mut _0: &std::option::Option<i128>;
    let mut _1: std::option::Option<i128>;

    bb0: {
        _1 = Option::<i128>::None;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &Option<u128> = {
    let mut _0: &std::option::Option<u128>;
    let mut _1: std::option::Option<u128>;
    let mut _2: u128;

    bb0: {
        _2 = Shl(const 1_u128, const 127_i32);
        _1 = Option::<u128>::Some(move _2);
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &Option<i128> = {
    let mut _0: &std::option::Option<i128>;
    let mut _1: std::option::Option<i128>;

    bb0: {
        _1 = Option::<i128>::Some(const 0_i128);
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &Option<i128> = {
    let mut _0: &std::option::Option<i128>;
    let mut _1: std::option::Option<i128>;

    bb0: {
        _1 = Option::<i128>::None;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &Option<i128> = {
    let mut _0: &std::option::Option<i128>;
    let mut _1: std::option::Option<i128>;

    bb0: {
        _1 = Option::<i128>::None;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &Option<i128> = {
    let mut _0: &std::option::Option<i128>;
    let mut _1: std::option::Option<i128>;

    bb0: {
        _1 = Option::<i128>::None;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &Option<i128> = {
    let mut _0: &std::option::Option<i128>;
    let mut _1: std::option::Option<i128>;

    bb0: {
        _1 = Option::<i128>::None;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &Option<i128> = {
    let mut _0: &std::option::Option<i128>;
    let mut _1: std::option::Option<i128>;

    bb0: {
        _1 = Option::<i128>::Some(const 126773525390625_i128);
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &Option<i128> = {
    let mut _0: &std::option::Option<i128>;
    let mut _1: std::option::Option<i128>;

    bb0: {
        _1 = Option::<i128>::Some(const 126773525390625_i128);
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "-147573952589676412928";
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "11111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000";
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "3777777777777777777760000000000000000000000";
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "fffffffffffffff80000000000000000";
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "-147573952589676412928";
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 1512366075204170947332355369683137040_u128;
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 338770000845734292516042252062085074416_u128;
        _0 = &_1;
        return;
    }
}

promoted[26] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 81985529216486896_i64;
        _0 = &_1;
        return;
    }
}

promoted[27] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 11259375_i64;
        _0 = &_1;
        return;
    }
}

promoted[28] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const -1_i64;
        _0 = &_1;
        return;
    }
}

promoted[29] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const 3024732150408341894828681797799247872_i128;
        _0 = &_1;
        return;
    }
}

promoted[30] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const -40992764608243448_i128;
        _0 = &_1;
        return;
    }
}

promoted[31] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const -36008716076289784460294175468646120_i128;
        _0 = &_1;
        return;
    }
}

promoted[32] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const -1329227995784915872903807060280344576_i128;
        _0 = &_1;
        return;
    }
}

promoted[33] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const -1512366075204170947332355369671877665_i128;
        _0 = &_1;
        return;
    }
}

promoted[34] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const 0_i128;
        _0 = &_1;
        return;
    }
}

promoted[35] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const -3024732150408341894664710739366274080_i128;
        _0 = &_1;
        return;
    }
}

promoted[36] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const -45037500_i128;
        _0 = &_1;
        return;
    }
}

promoted[37] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const 16071526739967441558837890625_i128;
        _0 = &_1;
        return;
    }
}

promoted[38] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const 126773525390625_i128;
        _0 = &_1;
        return;
    }
}

promoted[39] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const 16071526739967441558837890625_i128;
        _0 = &_1;
        return;
    }
}

promoted[40] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const 126773525390625_i128;
        _0 = &_1;
        return;
    }
}

promoted[41] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = Not(const 1_i128);
        _0 = &_1;
        return;
    }
}

promoted[42] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const 0_i128;
        _0 = &_1;
        return;
    }
}

promoted[43] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 1512366075204170947332355369683137040_u128;
        _0 = &_1;
        return;
    }
}

promoted[44] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 338770000845734292516042252062085074416_u128;
        _0 = &_1;
        return;
    }
}

promoted[45] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 81985529216486896_i64;
        _0 = &_1;
        return;
    }
}

promoted[46] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 11259375_i64;
        _0 = &_1;
        return;
    }
}

promoted[47] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const -1_i64;
        _0 = &_1;
        return;
    }
}

promoted[48] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const 3024732150408341894828681797799247872_i128;
        _0 = &_1;
        return;
    }
}

promoted[49] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const -40992764608243448_i128;
        _0 = &_1;
        return;
    }
}

promoted[50] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const -36008716076289784460294175468646120_i128;
        _0 = &_1;
        return;
    }
}

promoted[51] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const -1329227995784915872903807060280344576_i128;
        _0 = &_1;
        return;
    }
}

promoted[52] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const -1512366075204170947332355369671877665_i128;
        _0 = &_1;
        return;
    }
}

promoted[53] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const 0_i128;
        _0 = &_1;
        return;
    }
}

promoted[54] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const -3024732150408341894664710739366274080_i128;
        _0 = &_1;
        return;
    }
}

promoted[55] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const -45037500_i128;
        _0 = &_1;
        return;
    }
}

promoted[56] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const 16071526739967441558837890625_i128;
        _0 = &_1;
        return;
    }
}

promoted[57] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const 126773525390625_i128;
        _0 = &_1;
        return;
    }
}

promoted[58] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const 16071526739967441558837890625_i128;
        _0 = &_1;
        return;
    }
}

promoted[59] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const 126773525390625_i128;
        _0 = &_1;
        return;
    }
}

promoted[60] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = Not(const 1_i128);
        _0 = &_1;
        return;
    }
}

promoted[61] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const 0_i128;
        _0 = &_1;
        return;
    }
}
