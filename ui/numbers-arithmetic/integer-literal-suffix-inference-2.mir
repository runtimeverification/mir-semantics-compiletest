// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: *const ()) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/integer-literal-suffix-inference-2.rs:4:22: 4:22

    bb0: {
        return;                          // scope 0 at ui/numbers-arithmetic/integer-literal-suffix-inference-2.rs:4:24: 4:24
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/integer-literal-suffix-inference-2.rs:6:11: 6:11
    let _1: i32;                         // in scope 0 at ui/numbers-arithmetic/integer-literal-suffix-inference-2.rs:7:9: 7:10
    let _2: ();                          // in scope 0 at ui/numbers-arithmetic/integer-literal-suffix-inference-2.rs:8:5: 8:37
    let mut _3: *const ();               // in scope 0 at ui/numbers-arithmetic/integer-literal-suffix-inference-2.rs:8:9: 8:36
    let mut _4: *const i32;              // in scope 0 at ui/numbers-arithmetic/integer-literal-suffix-inference-2.rs:8:9: 8:23
    let mut _5: *const i32;              // in scope 0 at ui/numbers-arithmetic/integer-literal-suffix-inference-2.rs:8:9: 8:23
    let _6: &i32;                        // in scope 0 at ui/numbers-arithmetic/integer-literal-suffix-inference-2.rs:8:9: 8:11
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/numbers-arithmetic/integer-literal-suffix-inference-2.rs:7:9: 7:10
    }

    bb0: {
        _1 = const 3_i32;                // scope 0 at ui/numbers-arithmetic/integer-literal-suffix-inference-2.rs:7:13: 7:14
        _6 = &_1;                        // scope 1 at ui/numbers-arithmetic/integer-literal-suffix-inference-2.rs:8:9: 8:11
        _5 = &raw const (*_6);           // scope 1 at ui/numbers-arithmetic/integer-literal-suffix-inference-2.rs:8:9: 8:11
        _4 = _5;                         // scope 1 at ui/numbers-arithmetic/integer-literal-suffix-inference-2.rs:8:9: 8:23
        _3 = move _4 as *const () (PtrToPtr); // scope 1 at ui/numbers-arithmetic/integer-literal-suffix-inference-2.rs:8:9: 8:36
        _2 = foo(move _3) -> bb1;        // scope 1 at ui/numbers-arithmetic/integer-literal-suffix-inference-2.rs:8:5: 8:37
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/integer-literal-suffix-inference-2.rs:8:5: 8:8
                                         // + literal: Const { ty: fn(*const ()) {foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/numbers-arithmetic/integer-literal-suffix-inference-2.rs:9:2: 9:2
    }
}
