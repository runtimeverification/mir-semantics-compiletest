// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:8:11: 8:11
    let _1: std::result::Result<u8, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:17: 11:18
    let mut _2: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 13:14
    let mut _3: bool;                    // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
    let mut _4: bool;                    // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:21: 14:31
    let mut _5: &std::result::Result<u8, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:21: 14:31
    let mut _6: !;                       // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
    let mut _8: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 18:14
    let mut _9: bool;                    // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
    let mut _10: bool;                   // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:21: 19:31
    let mut _11: &std::result::Result<u8, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:21: 19:31
    let mut _12: !;                      // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
    let mut _14: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 13:14
    let mut _15: bool;                   // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
    let mut _16: bool;                   // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:21: 14:31
    let mut _17: &std::result::Result<u16, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:21: 14:31
    let mut _18: !;                      // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
    let mut _20: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 18:14
    let mut _21: bool;                   // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
    let mut _22: bool;                   // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:21: 19:31
    let mut _23: &std::result::Result<u16, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:21: 19:31
    let mut _24: !;                      // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
    let mut _26: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 13:14
    let mut _27: bool;                   // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
    let mut _28: bool;                   // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:21: 14:31
    let mut _29: &std::result::Result<u32, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:21: 14:31
    let mut _30: !;                      // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
    let mut _32: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 18:14
    let mut _33: bool;                   // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
    let mut _34: bool;                   // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:21: 19:31
    let mut _35: &std::result::Result<u32, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:21: 19:31
    let mut _36: !;                      // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
    let mut _38: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 13:14
    let mut _39: bool;                   // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
    let mut _40: bool;                   // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:21: 14:31
    let mut _41: &std::result::Result<u64, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:21: 14:31
    let mut _42: !;                      // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
    let mut _44: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 18:14
    let mut _45: bool;                   // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
    let mut _46: bool;                   // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:21: 19:31
    let mut _47: &std::result::Result<u64, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:21: 19:31
    let mut _48: !;                      // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
    let mut _50: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 13:14
    let mut _51: bool;                   // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
    let mut _52: bool;                   // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:21: 14:31
    let mut _53: &std::result::Result<u128, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:21: 14:31
    let mut _54: !;                      // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
    let mut _56: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 18:14
    let mut _57: bool;                   // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
    let mut _58: bool;                   // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:21: 19:31
    let mut _59: &std::result::Result<u128, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:21: 19:31
    let mut _60: !;                      // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
    scope 1 {
        debug r => _1;                   // in scope 1 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:17: 11:18
        let _7: std::result::Result<u8, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 1 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:17: 16:18
        scope 2 {
            debug r => _7;               // in scope 2 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:17: 16:18
            let _13: std::result::Result<u16, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 2 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:17: 11:18
            scope 3 {
                debug r => _13;          // in scope 3 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:17: 11:18
                let _19: std::result::Result<u16, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 3 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:17: 16:18
                scope 4 {
                    debug r => _19;      // in scope 4 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:17: 16:18
                    let _25: std::result::Result<u32, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 4 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:17: 11:18
                    scope 5 {
                        debug r => _25;  // in scope 5 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:17: 11:18
                        let _31: std::result::Result<u32, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 5 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:17: 16:18
                        scope 6 {
                            debug r => _31; // in scope 6 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:17: 16:18
                            let _37: std::result::Result<u64, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 6 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:17: 11:18
                            scope 7 {
                                debug r => _37; // in scope 7 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:17: 11:18
                                let _43: std::result::Result<u64, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 7 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:17: 16:18
                                scope 8 {
                                    debug r => _43; // in scope 8 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:17: 16:18
                                    let _49: std::result::Result<u128, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 8 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:17: 11:18
                                    scope 9 {
                                        debug r => _49; // in scope 9 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:17: 11:18
                                        let _55: std::result::Result<u128, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 9 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:17: 16:18
                                        scope 10 {
                                            debug r => _55; // in scope 10 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:17: 16:18
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43], u8>(move _2) -> bb1; // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:21: 13:15
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:21: 11:40
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]) -> Result<u8, Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43], u8>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_1;                        // scope 1 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:21: 14:31
        _4 = Result::<u8, Box<dyn Any + Send>>::is_err(move _5) -> [return: bb2, unwind: bb60]; // scope 1 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:21: 14:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:23: 14:29
                                         // + literal: Const { ty: for<'a> fn(&'a Result<u8, Box<dyn Any + Send>>) -> bool {Result::<u8, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Not(move _4);               // scope 1 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
        switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 1 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
    }

    bb3: {
        _6 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb60; // scope 1 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _7 = catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43], u8>(move _8) -> [return: bb5, unwind: bb60]; // scope 1 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:21: 18:15
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:21: 16:40
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]) -> Result<u8, Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43], u8>}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = &_7;                       // scope 2 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:21: 19:31
        _10 = Result::<u8, Box<dyn Any + Send>>::is_err(move _11) -> [return: bb6, unwind: bb59]; // scope 2 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:21: 19:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:23: 19:29
                                         // + literal: Const { ty: for<'a> fn(&'a Result<u8, Box<dyn Any + Send>>) -> bool {Result::<u8, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb6: {
        _9 = Not(move _10);              // scope 2 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
        switchInt(move _9) -> [0: bb8, otherwise: bb7]; // scope 2 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
    }

    bb7: {
        _12 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb59; // scope 2 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb8: {
        _13 = catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43], u16>(move _14) -> [return: bb9, unwind: bb59]; // scope 2 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:21: 13:15
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:21: 11:40
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]) -> Result<u16, Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43], u16>}, val: Value(<ZST>) }
    }

    bb9: {
        _17 = &_13;                      // scope 3 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:21: 14:31
        _16 = Result::<u16, Box<dyn Any + Send>>::is_err(move _17) -> [return: bb10, unwind: bb58]; // scope 3 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:21: 14:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:23: 14:29
                                         // + literal: Const { ty: for<'a> fn(&'a Result<u16, Box<dyn Any + Send>>) -> bool {Result::<u16, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb10: {
        _15 = Not(move _16);             // scope 3 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
        switchInt(move _15) -> [0: bb12, otherwise: bb11]; // scope 3 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
    }

    bb11: {
        _18 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb58; // scope 3 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _19 = catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43], u16>(move _20) -> [return: bb13, unwind: bb58]; // scope 3 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:21: 18:15
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:21: 16:40
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]) -> Result<u16, Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43], u16>}, val: Value(<ZST>) }
    }

    bb13: {
        _23 = &_19;                      // scope 4 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:21: 19:31
        _22 = Result::<u16, Box<dyn Any + Send>>::is_err(move _23) -> [return: bb14, unwind: bb57]; // scope 4 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:21: 19:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:23: 19:29
                                         // + literal: Const { ty: for<'a> fn(&'a Result<u16, Box<dyn Any + Send>>) -> bool {Result::<u16, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb14: {
        _21 = Not(move _22);             // scope 4 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
        switchInt(move _21) -> [0: bb16, otherwise: bb15]; // scope 4 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
    }

    bb15: {
        _24 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb57; // scope 4 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb16: {
        _25 = catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43], u32>(move _26) -> [return: bb17, unwind: bb57]; // scope 4 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:21: 13:15
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:21: 11:40
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]) -> Result<u32, Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43], u32>}, val: Value(<ZST>) }
    }

    bb17: {
        _29 = &_25;                      // scope 5 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:21: 14:31
        _28 = Result::<u32, Box<dyn Any + Send>>::is_err(move _29) -> [return: bb18, unwind: bb56]; // scope 5 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:21: 14:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:23: 14:29
                                         // + literal: Const { ty: for<'a> fn(&'a Result<u32, Box<dyn Any + Send>>) -> bool {Result::<u32, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb18: {
        _27 = Not(move _28);             // scope 5 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
        switchInt(move _27) -> [0: bb20, otherwise: bb19]; // scope 5 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
    }

    bb19: {
        _30 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb56; // scope 5 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb20: {
        _31 = catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43], u32>(move _32) -> [return: bb21, unwind: bb56]; // scope 5 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:21: 18:15
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:21: 16:40
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]) -> Result<u32, Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43], u32>}, val: Value(<ZST>) }
    }

    bb21: {
        _35 = &_31;                      // scope 6 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:21: 19:31
        _34 = Result::<u32, Box<dyn Any + Send>>::is_err(move _35) -> [return: bb22, unwind: bb55]; // scope 6 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:21: 19:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:23: 19:29
                                         // + literal: Const { ty: for<'a> fn(&'a Result<u32, Box<dyn Any + Send>>) -> bool {Result::<u32, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb22: {
        _33 = Not(move _34);             // scope 6 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
        switchInt(move _33) -> [0: bb24, otherwise: bb23]; // scope 6 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
    }

    bb23: {
        _36 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb55; // scope 6 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb24: {
        _37 = catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43], u64>(move _38) -> [return: bb25, unwind: bb55]; // scope 6 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:21: 13:15
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:21: 11:40
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]) -> Result<u64, Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43], u64>}, val: Value(<ZST>) }
    }

    bb25: {
        _41 = &_37;                      // scope 7 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:21: 14:31
        _40 = Result::<u64, Box<dyn Any + Send>>::is_err(move _41) -> [return: bb26, unwind: bb54]; // scope 7 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:21: 14:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:23: 14:29
                                         // + literal: Const { ty: for<'a> fn(&'a Result<u64, Box<dyn Any + Send>>) -> bool {Result::<u64, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb26: {
        _39 = Not(move _40);             // scope 7 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
        switchInt(move _39) -> [0: bb28, otherwise: bb27]; // scope 7 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
    }

    bb27: {
        _42 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb54; // scope 7 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb28: {
        _43 = catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43], u64>(move _44) -> [return: bb29, unwind: bb54]; // scope 7 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:21: 18:15
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:21: 16:40
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]) -> Result<u64, Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43], u64>}, val: Value(<ZST>) }
    }

    bb29: {
        _47 = &_43;                      // scope 8 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:21: 19:31
        _46 = Result::<u64, Box<dyn Any + Send>>::is_err(move _47) -> [return: bb30, unwind: bb53]; // scope 8 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:21: 19:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:23: 19:29
                                         // + literal: Const { ty: for<'a> fn(&'a Result<u64, Box<dyn Any + Send>>) -> bool {Result::<u64, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb30: {
        _45 = Not(move _46);             // scope 8 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
        switchInt(move _45) -> [0: bb32, otherwise: bb31]; // scope 8 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
    }

    bb31: {
        _48 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb53; // scope 8 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb32: {
        _49 = catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43], u128>(move _50) -> [return: bb33, unwind: bb53]; // scope 8 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:21: 13:15
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:21: 11:40
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]) -> Result<u128, Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43], u128>}, val: Value(<ZST>) }
    }

    bb33: {
        _53 = &_49;                      // scope 9 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:21: 14:31
        _52 = Result::<u128, Box<dyn Any + Send>>::is_err(move _53) -> [return: bb34, unwind: bb52]; // scope 9 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:21: 14:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:23: 14:29
                                         // + literal: Const { ty: for<'a> fn(&'a Result<u128, Box<dyn Any + Send>>) -> bool {Result::<u128, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb34: {
        _51 = Not(move _52);             // scope 9 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
        switchInt(move _51) -> [0: bb36, otherwise: bb35]; // scope 9 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
    }

    bb35: {
        _54 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb52; // scope 9 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:14:13: 14:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb36: {
        _55 = catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43], u128>(move _56) -> [return: bb37, unwind: bb52]; // scope 9 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:21: 18:15
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:21: 16:40
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]) -> Result<u128, Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43], u128>}, val: Value(<ZST>) }
    }

    bb37: {
        _59 = &_55;                      // scope 10 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:21: 19:31
        _58 = Result::<u128, Box<dyn Any + Send>>::is_err(move _59) -> [return: bb38, unwind: bb51]; // scope 10 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:21: 19:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:23: 19:29
                                         // + literal: Const { ty: for<'a> fn(&'a Result<u128, Box<dyn Any + Send>>) -> bool {Result::<u128, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb38: {
        _57 = Not(move _58);             // scope 10 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
        switchInt(move _57) -> [0: bb40, otherwise: bb39]; // scope 10 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
    }

    bb39: {
        _60 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb51; // scope 10 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:19:13: 19:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb40: {
        drop(_55) -> [return: bb41, unwind: bb52]; // scope 9 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:1: 27:2
    }

    bb41: {
        drop(_49) -> [return: bb42, unwind: bb53]; // scope 8 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:1: 27:2
    }

    bb42: {
        drop(_43) -> [return: bb43, unwind: bb54]; // scope 7 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:1: 27:2
    }

    bb43: {
        drop(_37) -> [return: bb44, unwind: bb55]; // scope 6 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:1: 27:2
    }

    bb44: {
        drop(_31) -> [return: bb45, unwind: bb56]; // scope 5 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:1: 27:2
    }

    bb45: {
        drop(_25) -> [return: bb46, unwind: bb57]; // scope 4 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:1: 27:2
    }

    bb46: {
        drop(_19) -> [return: bb47, unwind: bb58]; // scope 3 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:1: 27:2
    }

    bb47: {
        drop(_13) -> [return: bb48, unwind: bb59]; // scope 2 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:1: 27:2
    }

    bb48: {
        drop(_7) -> [return: bb49, unwind: bb60]; // scope 1 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:1: 27:2
    }

    bb49: {
        drop(_1) -> bb50;                // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:1: 27:2
    }

    bb50: {
        return;                          // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:2: 27:2
    }

    bb51 (cleanup): {
        drop(_55) -> bb52;               // scope 9 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:1: 27:2
    }

    bb52 (cleanup): {
        drop(_49) -> bb53;               // scope 8 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:1: 27:2
    }

    bb53 (cleanup): {
        drop(_43) -> bb54;               // scope 7 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:1: 27:2
    }

    bb54 (cleanup): {
        drop(_37) -> bb55;               // scope 6 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:1: 27:2
    }

    bb55 (cleanup): {
        drop(_31) -> bb56;               // scope 5 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:1: 27:2
    }

    bb56 (cleanup): {
        drop(_25) -> bb57;               // scope 4 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:1: 27:2
    }

    bb57 (cleanup): {
        drop(_19) -> bb58;               // scope 3 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:1: 27:2
    }

    bb58 (cleanup): {
        drop(_13) -> bb59;               // scope 2 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:1: 27:2
    }

    bb59 (cleanup): {
        drop(_7) -> bb60;                // scope 1 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:1: 27:2
    }

    bb60 (cleanup): {
        drop(_1) -> bb61;                // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:27:1: 27:2
    }

    bb61 (cleanup): {
        resume;                          // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:8:1: 27:2
    }
}

fn main::{closure#0}(_1: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]) -> u8 {
    let mut _0: u8;                      // return place in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:44: 11:44

    bb0: {
        _0 = core::num::<impl u8>::next_power_of_two(const _) -> bb1; // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:12:17: 12:46
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:12:27: 12:44
                                         // + literal: Const { ty: fn(u8) -> u8 {core::num::<impl u8>::next_power_of_two}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:13:14: 13:14
    }
}

fn main::{closure#1}(_1: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]) -> u8 {
    let mut _0: u8;                      // return place in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:44: 16:44
    let mut _2: u8;                      // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:17:17: 17:37

    bb0: {
        _2 = const 129_u8;               // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:17:17: 17:37
        _0 = core::num::<impl u8>::next_power_of_two(move _2) -> bb1; // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:17:17: 17:57
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:17:38: 17:55
                                         // + literal: Const { ty: fn(u8) -> u8 {core::num::<impl u8>::next_power_of_two}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:18:14: 18:14
    }
}

fn main::{closure#2}(_1: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]) -> u16 {
    let mut _0: u16;                     // return place in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:44: 11:44

    bb0: {
        _0 = core::num::<impl u16>::next_power_of_two(const _) -> bb1; // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:12:17: 12:46
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:12:27: 12:44
                                         // + literal: Const { ty: fn(u16) -> u16 {core::num::<impl u16>::next_power_of_two}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:13:14: 13:14
    }
}

fn main::{closure#3}(_1: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]) -> u16 {
    let mut _0: u16;                     // return place in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:44: 16:44
    let mut _2: u16;                     // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:17:17: 17:37

    bb0: {
        _2 = const 32769_u16;            // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:17:17: 17:37
        _0 = core::num::<impl u16>::next_power_of_two(move _2) -> bb1; // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:17:17: 17:57
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:17:38: 17:55
                                         // + literal: Const { ty: fn(u16) -> u16 {core::num::<impl u16>::next_power_of_two}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:18:14: 18:14
    }
}

fn main::{closure#4}(_1: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]) -> u32 {
    let mut _0: u32;                     // return place in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:44: 11:44

    bb0: {
        _0 = core::num::<impl u32>::next_power_of_two(const _) -> bb1; // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:12:17: 12:46
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:12:27: 12:44
                                         // + literal: Const { ty: fn(u32) -> u32 {core::num::<impl u32>::next_power_of_two}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:13:14: 13:14
    }
}

fn main::{closure#5}(_1: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]) -> u32 {
    let mut _0: u32;                     // return place in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:44: 16:44
    let mut _2: u32;                     // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:17:17: 17:37

    bb0: {
        _2 = const 2147483649_u32;       // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:17:17: 17:37
        _0 = core::num::<impl u32>::next_power_of_two(move _2) -> bb1; // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:17:17: 17:57
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:17:38: 17:55
                                         // + literal: Const { ty: fn(u32) -> u32 {core::num::<impl u32>::next_power_of_two}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:18:14: 18:14
    }
}

fn main::{closure#6}(_1: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]) -> u64 {
    let mut _0: u64;                     // return place in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:44: 11:44

    bb0: {
        _0 = core::num::<impl u64>::next_power_of_two(const _) -> bb1; // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:12:17: 12:46
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:12:27: 12:44
                                         // + literal: Const { ty: fn(u64) -> u64 {core::num::<impl u64>::next_power_of_two}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:13:14: 13:14
    }
}

fn main::{closure#7}(_1: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]) -> u64 {
    let mut _0: u64;                     // return place in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:44: 16:44
    let mut _2: u64;                     // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:17:17: 17:37

    bb0: {
        _2 = const 9223372036854775809_u64; // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:17:17: 17:37
        _0 = core::num::<impl u64>::next_power_of_two(move _2) -> bb1; // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:17:17: 17:57
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:17:38: 17:55
                                         // + literal: Const { ty: fn(u64) -> u64 {core::num::<impl u64>::next_power_of_two}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:18:14: 18:14
    }
}

fn main::{closure#8}(_1: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:41: 11:43]) -> u128 {
    let mut _0: u128;                    // return place in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:11:44: 11:44

    bb0: {
        _0 = core::num::<impl u128>::next_power_of_two(const _) -> bb1; // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:12:17: 12:46
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:12:27: 12:44
                                         // + literal: Const { ty: fn(u128) -> u128 {core::num::<impl u128>::next_power_of_two}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:13:14: 13:14
    }
}

fn main::{closure#9}(_1: [closure@ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:41: 16:43]) -> u128 {
    let mut _0: u128;                    // return place in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:16:44: 16:44
    let mut _2: u128;                    // in scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:17:17: 17:37

    bb0: {
        _2 = const 170141183460469231731687303715884105729_u128; // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:17:17: 17:37
        _0 = core::num::<impl u128>::next_power_of_two(move _2) -> bb1; // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:17:17: 17:57
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:17:38: 17:55
                                         // + literal: Const { ty: fn(u128) -> u128 {core::num::<impl u128>::next_power_of_two}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs:18:14: 18:14
    }
}
