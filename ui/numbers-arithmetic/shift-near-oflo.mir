// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = test_left_shift() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = test_right_shift() -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

static mut HACK: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 0_i32;
        return;
    }
}

fn id(_1: T) -> T {
    debug x => _1;
    let mut _0: T;
    let mut _2: *mut i32;
    scope 1 {
        let mut _3: *const ();
        let mut _4: usize;
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: bool;
        let mut _9: *const ();
        let mut _10: usize;
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: bool;
    }

    bb0: {
        _2 = const {alloc1: *mut i32};
        _9 = _2 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(i32);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_2) = Add((*_2), const 1_i32);
        _0 = move _1;
        return;
    }

    bb2: {
        _3 = _2 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(i32);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: HACK, size: 4, align: 4) {
    00 00 00 00                                     â”‚ ....
}

fn test_left_shift() -> () {
    let mut _0: ();
    let _1: i8;
    let mut _2: i32;
    let mut _3: (&i8, &i8);
    let mut _4: &i8;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: i8;
    let mut _10: i8;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: i32;
    let mut _16: (&u8, &u8);
    let mut _17: &u8;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: u8;
    let mut _23: u8;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: i32;
    let mut _29: (&i8, &i8);
    let mut _30: &i8;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: i8;
    let mut _36: i8;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: i32;
    let mut _42: (&u8, &u8);
    let mut _43: &u8;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: u8;
    let mut _49: u8;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _54: i32;
    let mut _55: (&i8, &i8);
    let mut _56: &i8;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: i8;
    let mut _62: i8;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: i32;
    let mut _68: (&u8, &u8);
    let mut _69: &u8;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: u8;
    let mut _75: u8;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _80: i8;
    let mut _81: i32;
    let mut _82: (&i8, &i8);
    let mut _83: &i8;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: i8;
    let mut _89: i8;
    let _91: !;
    let mut _92: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _94: u8;
    let mut _95: i32;
    let mut _96: (&u8, &u8);
    let mut _97: &u8;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: u8;
    let mut _103: u8;
    let _105: !;
    let mut _106: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _108: i8;
    let mut _109: i32;
    let mut _110: (&i8, &i8);
    let mut _111: &i8;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: i8;
    let mut _117: i8;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _122: u8;
    let mut _123: i32;
    let mut _124: (&u8, &u8);
    let mut _125: &u8;
    let mut _128: bool;
    let mut _129: bool;
    let mut _130: u8;
    let mut _131: u8;
    let _133: !;
    let mut _134: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _136: i8;
    let mut _137: i32;
    let mut _138: (&i8, &i8);
    let mut _139: &i8;
    let mut _142: bool;
    let mut _143: bool;
    let mut _144: i8;
    let mut _145: i8;
    let _147: !;
    let mut _148: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _150: u8;
    let mut _151: i32;
    let mut _152: (&u8, &u8);
    let mut _153: &u8;
    let mut _156: bool;
    let mut _157: bool;
    let mut _158: u8;
    let mut _159: u8;
    let _161: !;
    let mut _162: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _164: i16;
    let mut _165: i32;
    let mut _166: (&i16, &i16);
    let mut _167: &i16;
    let mut _170: bool;
    let mut _171: bool;
    let mut _172: i16;
    let mut _173: i16;
    let _175: !;
    let mut _176: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _178: u16;
    let mut _179: i32;
    let mut _180: (&u16, &u16);
    let mut _181: &u16;
    let mut _184: bool;
    let mut _185: bool;
    let mut _186: u16;
    let mut _187: u16;
    let _189: !;
    let mut _190: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _192: i16;
    let mut _193: i32;
    let mut _194: (&i16, &i16);
    let mut _195: &i16;
    let mut _198: bool;
    let mut _199: bool;
    let mut _200: i16;
    let mut _201: i16;
    let _203: !;
    let mut _204: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _206: u16;
    let mut _207: i32;
    let mut _208: (&u16, &u16);
    let mut _209: &u16;
    let mut _212: bool;
    let mut _213: bool;
    let mut _214: u16;
    let mut _215: u16;
    let _217: !;
    let mut _218: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _220: i16;
    let mut _221: i32;
    let mut _222: (&i16, &i16);
    let mut _223: &i16;
    let mut _226: bool;
    let mut _227: bool;
    let mut _228: i16;
    let mut _229: i16;
    let _231: !;
    let mut _232: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _234: u16;
    let mut _235: i32;
    let mut _236: (&u16, &u16);
    let mut _237: &u16;
    let mut _240: bool;
    let mut _241: bool;
    let mut _242: u16;
    let mut _243: u16;
    let _245: !;
    let mut _246: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _248: i32;
    let mut _249: i32;
    let mut _250: (&i32, &i32);
    let mut _251: &i32;
    let mut _254: bool;
    let mut _255: bool;
    let mut _256: i32;
    let mut _257: i32;
    let _259: !;
    let mut _260: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _262: u32;
    let mut _263: i32;
    let mut _264: (&u32, &u32);
    let mut _265: &u32;
    let mut _268: bool;
    let mut _269: bool;
    let mut _270: u32;
    let mut _271: u32;
    let _273: !;
    let mut _274: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _276: i32;
    let mut _277: i32;
    let mut _278: (&i32, &i32);
    let mut _279: &i32;
    let mut _282: bool;
    let mut _283: bool;
    let mut _284: i32;
    let mut _285: i32;
    let _287: !;
    let mut _288: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _290: u32;
    let mut _291: i32;
    let mut _292: (&u32, &u32);
    let mut _293: &u32;
    let mut _296: bool;
    let mut _297: bool;
    let mut _298: u32;
    let mut _299: u32;
    let _301: !;
    let mut _302: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _304: i32;
    let mut _305: i32;
    let mut _306: (&i32, &i32);
    let mut _307: &i32;
    let mut _310: bool;
    let mut _311: bool;
    let mut _312: i32;
    let mut _313: i32;
    let _315: !;
    let mut _316: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _318: u32;
    let mut _319: i32;
    let mut _320: (&u32, &u32);
    let mut _321: &u32;
    let mut _324: bool;
    let mut _325: bool;
    let mut _326: u32;
    let mut _327: u32;
    let _329: !;
    let mut _330: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _332: i64;
    let mut _333: i32;
    let mut _334: (&i64, &i64);
    let mut _335: &i64;
    let mut _338: bool;
    let mut _339: bool;
    let mut _340: i64;
    let mut _341: i64;
    let _343: !;
    let mut _344: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _346: u64;
    let mut _347: i32;
    let mut _348: (&u64, &u64);
    let mut _349: &u64;
    let mut _352: bool;
    let mut _353: bool;
    let mut _354: u64;
    let mut _355: u64;
    let _357: !;
    let mut _358: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _360: i64;
    let mut _361: i32;
    let mut _362: (&i64, &i64);
    let mut _363: &i64;
    let mut _366: bool;
    let mut _367: bool;
    let mut _368: i64;
    let mut _369: i64;
    let _371: !;
    let mut _372: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _374: u64;
    let mut _375: i32;
    let mut _376: (&u64, &u64);
    let mut _377: &u64;
    let mut _380: bool;
    let mut _381: bool;
    let mut _382: u64;
    let mut _383: u64;
    let _385: !;
    let mut _386: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _388: i64;
    let mut _389: i32;
    let mut _390: (&i64, &i64);
    let mut _391: &i64;
    let mut _394: bool;
    let mut _395: bool;
    let mut _396: i64;
    let mut _397: i64;
    let _399: !;
    let mut _400: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _402: u64;
    let mut _403: i32;
    let mut _404: (&u64, &u64);
    let mut _405: &u64;
    let mut _408: bool;
    let mut _409: bool;
    let mut _410: u64;
    let mut _411: u64;
    let _413: !;
    let mut _414: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _5: &i8;
        let _6: &i8;
        let _14: u8;
        let mut _444: &i8;
        scope 2 {
            debug left_val => _5;
            debug right_val => _6;
            let _11: core::panicking::AssertKind;
            scope 3 {
                debug kind => _11;
            }
        }
        scope 4 {
            debug x => _14;
            let _18: &u8;
            let _19: &u8;
            let _27: i8;
            let mut _443: &u8;
            scope 5 {
                debug left_val => _18;
                debug right_val => _19;
                let _24: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _24;
                }
            }
            scope 7 {
                debug x => _27;
                let _31: &i8;
                let _32: &i8;
                let _40: u8;
                let mut _442: &i8;
                scope 8 {
                    debug left_val => _31;
                    debug right_val => _32;
                    let _37: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _37;
                    }
                }
                scope 10 {
                    debug x => _40;
                    let _44: &u8;
                    let _45: &u8;
                    let _53: i8;
                    let mut _441: &u8;
                    scope 11 {
                        debug left_val => _44;
                        debug right_val => _45;
                        let _50: core::panicking::AssertKind;
                        scope 12 {
                            debug kind => _50;
                        }
                    }
                    scope 13 {
                        debug x => _53;
                        let _57: &i8;
                        let _58: &i8;
                        let _66: u8;
                        let mut _440: &i8;
                        scope 14 {
                            debug left_val => _57;
                            debug right_val => _58;
                            let _63: core::panicking::AssertKind;
                            scope 15 {
                                debug kind => _63;
                            }
                        }
                        scope 16 {
                            debug x => _66;
                            let _70: &u8;
                            let _71: &u8;
                            let _79: i8;
                            let _163: i16;
                            let _247: i32;
                            let _331: i64;
                            let mut _439: &u8;
                            scope 17 {
                                debug left_val => _70;
                                debug right_val => _71;
                                let _76: core::panicking::AssertKind;
                                scope 18 {
                                    debug kind => _76;
                                }
                            }
                            scope 19 {
                                debug x => _79;
                                let _84: &i8;
                                let _85: &i8;
                                let _93: u8;
                                let mut _438: &i8;
                                scope 20 {
                                    debug left_val => _84;
                                    debug right_val => _85;
                                    let _90: core::panicking::AssertKind;
                                    scope 21 {
                                        debug kind => _90;
                                    }
                                }
                                scope 22 {
                                    debug x => _93;
                                    let _98: &u8;
                                    let _99: &u8;
                                    let _107: i8;
                                    let mut _437: &u8;
                                    scope 23 {
                                        debug left_val => _98;
                                        debug right_val => _99;
                                        let _104: core::panicking::AssertKind;
                                        scope 24 {
                                            debug kind => _104;
                                        }
                                    }
                                    scope 25 {
                                        debug x => _107;
                                        let _112: &i8;
                                        let _113: &i8;
                                        let _121: u8;
                                        let mut _436: &i8;
                                        scope 26 {
                                            debug left_val => _112;
                                            debug right_val => _113;
                                            let _118: core::panicking::AssertKind;
                                            scope 27 {
                                                debug kind => _118;
                                            }
                                        }
                                        scope 28 {
                                            debug x => _121;
                                            let _126: &u8;
                                            let _127: &u8;
                                            let _135: i8;
                                            let mut _435: &u8;
                                            scope 29 {
                                                debug left_val => _126;
                                                debug right_val => _127;
                                                let _132: core::panicking::AssertKind;
                                                scope 30 {
                                                    debug kind => _132;
                                                }
                                            }
                                            scope 31 {
                                                debug x => _135;
                                                let _140: &i8;
                                                let _141: &i8;
                                                let _149: u8;
                                                let mut _434: &i8;
                                                scope 32 {
                                                    debug left_val => _140;
                                                    debug right_val => _141;
                                                    let _146: core::panicking::AssertKind;
                                                    scope 33 {
                                                        debug kind => _146;
                                                    }
                                                }
                                                scope 34 {
                                                    debug x => _149;
                                                    let _154: &u8;
                                                    let _155: &u8;
                                                    let mut _433: &u8;
                                                    scope 35 {
                                                        debug left_val => _154;
                                                        debug right_val => _155;
                                                        let _160: core::panicking::AssertKind;
                                                        scope 36 {
                                                            debug kind => _160;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 37 {
                                debug x => _163;
                                let _168: &i16;
                                let _169: &i16;
                                let _177: u16;
                                let mut _432: &i16;
                                scope 38 {
                                    debug left_val => _168;
                                    debug right_val => _169;
                                    let _174: core::panicking::AssertKind;
                                    scope 39 {
                                        debug kind => _174;
                                    }
                                }
                                scope 40 {
                                    debug x => _177;
                                    let _182: &u16;
                                    let _183: &u16;
                                    let _191: i16;
                                    let mut _431: &u16;
                                    scope 41 {
                                        debug left_val => _182;
                                        debug right_val => _183;
                                        let _188: core::panicking::AssertKind;
                                        scope 42 {
                                            debug kind => _188;
                                        }
                                    }
                                    scope 43 {
                                        debug x => _191;
                                        let _196: &i16;
                                        let _197: &i16;
                                        let _205: u16;
                                        let mut _430: &i16;
                                        scope 44 {
                                            debug left_val => _196;
                                            debug right_val => _197;
                                            let _202: core::panicking::AssertKind;
                                            scope 45 {
                                                debug kind => _202;
                                            }
                                        }
                                        scope 46 {
                                            debug x => _205;
                                            let _210: &u16;
                                            let _211: &u16;
                                            let _219: i16;
                                            let mut _429: &u16;
                                            scope 47 {
                                                debug left_val => _210;
                                                debug right_val => _211;
                                                let _216: core::panicking::AssertKind;
                                                scope 48 {
                                                    debug kind => _216;
                                                }
                                            }
                                            scope 49 {
                                                debug x => _219;
                                                let _224: &i16;
                                                let _225: &i16;
                                                let _233: u16;
                                                let mut _428: &i16;
                                                scope 50 {
                                                    debug left_val => _224;
                                                    debug right_val => _225;
                                                    let _230: core::panicking::AssertKind;
                                                    scope 51 {
                                                        debug kind => _230;
                                                    }
                                                }
                                                scope 52 {
                                                    debug x => _233;
                                                    let _238: &u16;
                                                    let _239: &u16;
                                                    let mut _427: &u16;
                                                    scope 53 {
                                                        debug left_val => _238;
                                                        debug right_val => _239;
                                                        let _244: core::panicking::AssertKind;
                                                        scope 54 {
                                                            debug kind => _244;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 55 {
                                debug x => _247;
                                let _252: &i32;
                                let _253: &i32;
                                let _261: u32;
                                let mut _426: &i32;
                                scope 56 {
                                    debug left_val => _252;
                                    debug right_val => _253;
                                    let _258: core::panicking::AssertKind;
                                    scope 57 {
                                        debug kind => _258;
                                    }
                                }
                                scope 58 {
                                    debug x => _261;
                                    let _266: &u32;
                                    let _267: &u32;
                                    let _275: i32;
                                    let mut _425: &u32;
                                    scope 59 {
                                        debug left_val => _266;
                                        debug right_val => _267;
                                        let _272: core::panicking::AssertKind;
                                        scope 60 {
                                            debug kind => _272;
                                        }
                                    }
                                    scope 61 {
                                        debug x => _275;
                                        let _280: &i32;
                                        let _281: &i32;
                                        let _289: u32;
                                        let mut _424: &i32;
                                        scope 62 {
                                            debug left_val => _280;
                                            debug right_val => _281;
                                            let _286: core::panicking::AssertKind;
                                            scope 63 {
                                                debug kind => _286;
                                            }
                                        }
                                        scope 64 {
                                            debug x => _289;
                                            let _294: &u32;
                                            let _295: &u32;
                                            let _303: i32;
                                            let mut _423: &u32;
                                            scope 65 {
                                                debug left_val => _294;
                                                debug right_val => _295;
                                                let _300: core::panicking::AssertKind;
                                                scope 66 {
                                                    debug kind => _300;
                                                }
                                            }
                                            scope 67 {
                                                debug x => _303;
                                                let _308: &i32;
                                                let _309: &i32;
                                                let _317: u32;
                                                let mut _422: &i32;
                                                scope 68 {
                                                    debug left_val => _308;
                                                    debug right_val => _309;
                                                    let _314: core::panicking::AssertKind;
                                                    scope 69 {
                                                        debug kind => _314;
                                                    }
                                                }
                                                scope 70 {
                                                    debug x => _317;
                                                    let _322: &u32;
                                                    let _323: &u32;
                                                    let mut _421: &u32;
                                                    scope 71 {
                                                        debug left_val => _322;
                                                        debug right_val => _323;
                                                        let _328: core::panicking::AssertKind;
                                                        scope 72 {
                                                            debug kind => _328;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 73 {
                                debug x => _331;
                                let _336: &i64;
                                let _337: &i64;
                                let _345: u64;
                                let mut _420: &i64;
                                scope 74 {
                                    debug left_val => _336;
                                    debug right_val => _337;
                                    let _342: core::panicking::AssertKind;
                                    scope 75 {
                                        debug kind => _342;
                                    }
                                }
                                scope 76 {
                                    debug x => _345;
                                    let _350: &u64;
                                    let _351: &u64;
                                    let _359: i64;
                                    let mut _419: &u64;
                                    scope 77 {
                                        debug left_val => _350;
                                        debug right_val => _351;
                                        let _356: core::panicking::AssertKind;
                                        scope 78 {
                                            debug kind => _356;
                                        }
                                    }
                                    scope 79 {
                                        debug x => _359;
                                        let _364: &i64;
                                        let _365: &i64;
                                        let _373: u64;
                                        let mut _418: &i64;
                                        scope 80 {
                                            debug left_val => _364;
                                            debug right_val => _365;
                                            let _370: core::panicking::AssertKind;
                                            scope 81 {
                                                debug kind => _370;
                                            }
                                        }
                                        scope 82 {
                                            debug x => _373;
                                            let _378: &u64;
                                            let _379: &u64;
                                            let _387: i64;
                                            let mut _417: &u64;
                                            scope 83 {
                                                debug left_val => _378;
                                                debug right_val => _379;
                                                let _384: core::panicking::AssertKind;
                                                scope 84 {
                                                    debug kind => _384;
                                                }
                                            }
                                            scope 85 {
                                                debug x => _387;
                                                let _392: &i64;
                                                let _393: &i64;
                                                let _401: u64;
                                                let mut _416: &i64;
                                                scope 86 {
                                                    debug left_val => _392;
                                                    debug right_val => _393;
                                                    let _398: core::panicking::AssertKind;
                                                    scope 87 {
                                                        debug kind => _398;
                                                    }
                                                }
                                                scope 88 {
                                                    debug x => _401;
                                                    let _406: &u64;
                                                    let _407: &u64;
                                                    let mut _415: &u64;
                                                    scope 89 {
                                                        debug left_val => _406;
                                                        debug right_val => _407;
                                                        let _412: core::panicking::AssertKind;
                                                        scope 90 {
                                                            debug kind => _412;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = id::<i32>(const 0_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Shl(const 1_i8, move _2);
        _4 = &_1;
        _444 = const _;
        _3 = (move _4, _444);
        _5 = (_3.0: &i8);
        _6 = (_3.1: &i8);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<i8, i8>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb3: {
        _15 = id::<i32>(const 0_i32) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = Shl(const 1_u8, move _15);
        _17 = &_14;
        _443 = const _;
        _16 = (move _17, _443);
        _18 = (_16.0: &u8);
        _19 = (_16.1: &u8);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<u8, u8>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb6: {
        _28 = id::<i32>(const 7_i32) -> [return: bb7, unwind continue];
    }

    bb7: {
        _27 = Shl(const 1_i8, move _28);
        _30 = &_27;
        _442 = const _;
        _29 = (move _30, _442);
        _31 = (_29.0: &i8);
        _32 = (_29.1: &i8);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<i8, i8>(move _37, _31, _32, move _39) -> unwind continue;
    }

    bb9: {
        _41 = id::<i32>(const 7_i32) -> [return: bb10, unwind continue];
    }

    bb10: {
        _40 = Shl(const 1_u8, move _41);
        _43 = &_40;
        _441 = const _;
        _42 = (move _43, _441);
        _44 = (_42.0: &u8);
        _45 = (_42.1: &u8);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<u8, u8>(move _50, _44, _45, move _52) -> unwind continue;
    }

    bb12: {
        _54 = id::<i32>(const 7_i32) -> [return: bb13, unwind continue];
    }

    bb13: {
        _53 = Shl(const 3_i8, move _54);
        _56 = &_53;
        _440 = const _;
        _55 = (move _56, _440);
        _57 = (_55.0: &i8);
        _58 = (_55.1: &i8);
        _61 = (*_57);
        _62 = (*_58);
        _60 = Eq(move _61, move _62);
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _63 = core::panicking::AssertKind::Eq;
        _65 = Option::<Arguments<'_>>::None;
        _64 = core::panicking::assert_failed::<i8, i8>(move _63, _57, _58, move _65) -> unwind continue;
    }

    bb15: {
        _67 = id::<i32>(const 7_i32) -> [return: bb16, unwind continue];
    }

    bb16: {
        _66 = Shl(const 3_u8, move _67);
        _69 = &_66;
        _439 = const _;
        _68 = (move _69, _439);
        _70 = (_68.0: &u8);
        _71 = (_68.1: &u8);
        _74 = (*_70);
        _75 = (*_71);
        _73 = Eq(move _74, move _75);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<u8, u8>(move _76, _70, _71, move _78) -> unwind continue;
    }

    bb18: {
        _80 = const 1_i8;
        _81 = id::<i32>(const 0_i32) -> [return: bb19, unwind continue];
    }

    bb19: {
        _79 = Shl(move _80, move _81);
        _83 = &_79;
        _438 = const _;
        _82 = (move _83, _438);
        _84 = (_82.0: &i8);
        _85 = (_82.1: &i8);
        _88 = (*_84);
        _89 = (*_85);
        _87 = Eq(move _88, move _89);
        _86 = Not(move _87);
        switchInt(move _86) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _90 = core::panicking::AssertKind::Eq;
        _92 = Option::<Arguments<'_>>::None;
        _91 = core::panicking::assert_failed::<i8, i8>(move _90, _84, _85, move _92) -> unwind continue;
    }

    bb21: {
        _94 = const 1_u8;
        _95 = id::<i32>(const 0_i32) -> [return: bb22, unwind continue];
    }

    bb22: {
        _93 = Shl(move _94, move _95);
        _97 = &_93;
        _437 = const _;
        _96 = (move _97, _437);
        _98 = (_96.0: &u8);
        _99 = (_96.1: &u8);
        _102 = (*_98);
        _103 = (*_99);
        _101 = Eq(move _102, move _103);
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _104 = core::panicking::AssertKind::Eq;
        _106 = Option::<Arguments<'_>>::None;
        _105 = core::panicking::assert_failed::<u8, u8>(move _104, _98, _99, move _106) -> unwind continue;
    }

    bb24: {
        _108 = const 1_i8;
        _109 = id::<i32>(const 7_i32) -> [return: bb25, unwind continue];
    }

    bb25: {
        _107 = Shl(move _108, move _109);
        _111 = &_107;
        _436 = const _;
        _110 = (move _111, _436);
        _112 = (_110.0: &i8);
        _113 = (_110.1: &i8);
        _116 = (*_112);
        _117 = (*_113);
        _115 = Eq(move _116, move _117);
        _114 = Not(move _115);
        switchInt(move _114) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<i8, i8>(move _118, _112, _113, move _120) -> unwind continue;
    }

    bb27: {
        _122 = const 1_u8;
        _123 = id::<i32>(const 7_i32) -> [return: bb28, unwind continue];
    }

    bb28: {
        _121 = Shl(move _122, move _123);
        _125 = &_121;
        _435 = const _;
        _124 = (move _125, _435);
        _126 = (_124.0: &u8);
        _127 = (_124.1: &u8);
        _130 = (*_126);
        _131 = (*_127);
        _129 = Eq(move _130, move _131);
        _128 = Not(move _129);
        switchInt(move _128) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _132 = core::panicking::AssertKind::Eq;
        _134 = Option::<Arguments<'_>>::None;
        _133 = core::panicking::assert_failed::<u8, u8>(move _132, _126, _127, move _134) -> unwind continue;
    }

    bb30: {
        _136 = const 3_i8;
        _137 = id::<i32>(const 7_i32) -> [return: bb31, unwind continue];
    }

    bb31: {
        _135 = Shl(move _136, move _137);
        _139 = &_135;
        _434 = const _;
        _138 = (move _139, _434);
        _140 = (_138.0: &i8);
        _141 = (_138.1: &i8);
        _144 = (*_140);
        _145 = (*_141);
        _143 = Eq(move _144, move _145);
        _142 = Not(move _143);
        switchInt(move _142) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _146 = core::panicking::AssertKind::Eq;
        _148 = Option::<Arguments<'_>>::None;
        _147 = core::panicking::assert_failed::<i8, i8>(move _146, _140, _141, move _148) -> unwind continue;
    }

    bb33: {
        _150 = const 3_u8;
        _151 = id::<i32>(const 7_i32) -> [return: bb34, unwind continue];
    }

    bb34: {
        _149 = Shl(move _150, move _151);
        _153 = &_149;
        _433 = const _;
        _152 = (move _153, _433);
        _154 = (_152.0: &u8);
        _155 = (_152.1: &u8);
        _158 = (*_154);
        _159 = (*_155);
        _157 = Eq(move _158, move _159);
        _156 = Not(move _157);
        switchInt(move _156) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _160 = core::panicking::AssertKind::Eq;
        _162 = Option::<Arguments<'_>>::None;
        _161 = core::panicking::assert_failed::<u8, u8>(move _160, _154, _155, move _162) -> unwind continue;
    }

    bb36: {
        _164 = const 1_i16;
        _165 = id::<i32>(const 0_i32) -> [return: bb37, unwind continue];
    }

    bb37: {
        _163 = Shl(move _164, move _165);
        _167 = &_163;
        _432 = const _;
        _166 = (move _167, _432);
        _168 = (_166.0: &i16);
        _169 = (_166.1: &i16);
        _172 = (*_168);
        _173 = (*_169);
        _171 = Eq(move _172, move _173);
        _170 = Not(move _171);
        switchInt(move _170) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _174 = core::panicking::AssertKind::Eq;
        _176 = Option::<Arguments<'_>>::None;
        _175 = core::panicking::assert_failed::<i16, i16>(move _174, _168, _169, move _176) -> unwind continue;
    }

    bb39: {
        _178 = const 1_u16;
        _179 = id::<i32>(const 0_i32) -> [return: bb40, unwind continue];
    }

    bb40: {
        _177 = Shl(move _178, move _179);
        _181 = &_177;
        _431 = const _;
        _180 = (move _181, _431);
        _182 = (_180.0: &u16);
        _183 = (_180.1: &u16);
        _186 = (*_182);
        _187 = (*_183);
        _185 = Eq(move _186, move _187);
        _184 = Not(move _185);
        switchInt(move _184) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _188 = core::panicking::AssertKind::Eq;
        _190 = Option::<Arguments<'_>>::None;
        _189 = core::panicking::assert_failed::<u16, u16>(move _188, _182, _183, move _190) -> unwind continue;
    }

    bb42: {
        _192 = const 1_i16;
        _193 = id::<i32>(const 15_i32) -> [return: bb43, unwind continue];
    }

    bb43: {
        _191 = Shl(move _192, move _193);
        _195 = &_191;
        _430 = const _;
        _194 = (move _195, _430);
        _196 = (_194.0: &i16);
        _197 = (_194.1: &i16);
        _200 = (*_196);
        _201 = (*_197);
        _199 = Eq(move _200, move _201);
        _198 = Not(move _199);
        switchInt(move _198) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _202 = core::panicking::AssertKind::Eq;
        _204 = Option::<Arguments<'_>>::None;
        _203 = core::panicking::assert_failed::<i16, i16>(move _202, _196, _197, move _204) -> unwind continue;
    }

    bb45: {
        _206 = const 1_u16;
        _207 = id::<i32>(const 15_i32) -> [return: bb46, unwind continue];
    }

    bb46: {
        _205 = Shl(move _206, move _207);
        _209 = &_205;
        _429 = const _;
        _208 = (move _209, _429);
        _210 = (_208.0: &u16);
        _211 = (_208.1: &u16);
        _214 = (*_210);
        _215 = (*_211);
        _213 = Eq(move _214, move _215);
        _212 = Not(move _213);
        switchInt(move _212) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _216 = core::panicking::AssertKind::Eq;
        _218 = Option::<Arguments<'_>>::None;
        _217 = core::panicking::assert_failed::<u16, u16>(move _216, _210, _211, move _218) -> unwind continue;
    }

    bb48: {
        _220 = const 3_i16;
        _221 = id::<i32>(const 15_i32) -> [return: bb49, unwind continue];
    }

    bb49: {
        _219 = Shl(move _220, move _221);
        _223 = &_219;
        _428 = const _;
        _222 = (move _223, _428);
        _224 = (_222.0: &i16);
        _225 = (_222.1: &i16);
        _228 = (*_224);
        _229 = (*_225);
        _227 = Eq(move _228, move _229);
        _226 = Not(move _227);
        switchInt(move _226) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _230 = core::panicking::AssertKind::Eq;
        _232 = Option::<Arguments<'_>>::None;
        _231 = core::panicking::assert_failed::<i16, i16>(move _230, _224, _225, move _232) -> unwind continue;
    }

    bb51: {
        _234 = const 3_u16;
        _235 = id::<i32>(const 15_i32) -> [return: bb52, unwind continue];
    }

    bb52: {
        _233 = Shl(move _234, move _235);
        _237 = &_233;
        _427 = const _;
        _236 = (move _237, _427);
        _238 = (_236.0: &u16);
        _239 = (_236.1: &u16);
        _242 = (*_238);
        _243 = (*_239);
        _241 = Eq(move _242, move _243);
        _240 = Not(move _241);
        switchInt(move _240) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _244 = core::panicking::AssertKind::Eq;
        _246 = Option::<Arguments<'_>>::None;
        _245 = core::panicking::assert_failed::<u16, u16>(move _244, _238, _239, move _246) -> unwind continue;
    }

    bb54: {
        _248 = const 1_i32;
        _249 = id::<i32>(const 0_i32) -> [return: bb55, unwind continue];
    }

    bb55: {
        _247 = Shl(move _248, move _249);
        _251 = &_247;
        _426 = const _;
        _250 = (move _251, _426);
        _252 = (_250.0: &i32);
        _253 = (_250.1: &i32);
        _256 = (*_252);
        _257 = (*_253);
        _255 = Eq(move _256, move _257);
        _254 = Not(move _255);
        switchInt(move _254) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _258 = core::panicking::AssertKind::Eq;
        _260 = Option::<Arguments<'_>>::None;
        _259 = core::panicking::assert_failed::<i32, i32>(move _258, _252, _253, move _260) -> unwind continue;
    }

    bb57: {
        _262 = const 1_u32;
        _263 = id::<i32>(const 0_i32) -> [return: bb58, unwind continue];
    }

    bb58: {
        _261 = Shl(move _262, move _263);
        _265 = &_261;
        _425 = const _;
        _264 = (move _265, _425);
        _266 = (_264.0: &u32);
        _267 = (_264.1: &u32);
        _270 = (*_266);
        _271 = (*_267);
        _269 = Eq(move _270, move _271);
        _268 = Not(move _269);
        switchInt(move _268) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _272 = core::panicking::AssertKind::Eq;
        _274 = Option::<Arguments<'_>>::None;
        _273 = core::panicking::assert_failed::<u32, u32>(move _272, _266, _267, move _274) -> unwind continue;
    }

    bb60: {
        _276 = const 1_i32;
        _277 = id::<i32>(const 31_i32) -> [return: bb61, unwind continue];
    }

    bb61: {
        _275 = Shl(move _276, move _277);
        _279 = &_275;
        _424 = const _;
        _278 = (move _279, _424);
        _280 = (_278.0: &i32);
        _281 = (_278.1: &i32);
        _284 = (*_280);
        _285 = (*_281);
        _283 = Eq(move _284, move _285);
        _282 = Not(move _283);
        switchInt(move _282) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _286 = core::panicking::AssertKind::Eq;
        _288 = Option::<Arguments<'_>>::None;
        _287 = core::panicking::assert_failed::<i32, i32>(move _286, _280, _281, move _288) -> unwind continue;
    }

    bb63: {
        _290 = const 1_u32;
        _291 = id::<i32>(const 31_i32) -> [return: bb64, unwind continue];
    }

    bb64: {
        _289 = Shl(move _290, move _291);
        _293 = &_289;
        _423 = const _;
        _292 = (move _293, _423);
        _294 = (_292.0: &u32);
        _295 = (_292.1: &u32);
        _298 = (*_294);
        _299 = (*_295);
        _297 = Eq(move _298, move _299);
        _296 = Not(move _297);
        switchInt(move _296) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _300 = core::panicking::AssertKind::Eq;
        _302 = Option::<Arguments<'_>>::None;
        _301 = core::panicking::assert_failed::<u32, u32>(move _300, _294, _295, move _302) -> unwind continue;
    }

    bb66: {
        _304 = const 3_i32;
        _305 = id::<i32>(const 31_i32) -> [return: bb67, unwind continue];
    }

    bb67: {
        _303 = Shl(move _304, move _305);
        _307 = &_303;
        _422 = const _;
        _306 = (move _307, _422);
        _308 = (_306.0: &i32);
        _309 = (_306.1: &i32);
        _312 = (*_308);
        _313 = (*_309);
        _311 = Eq(move _312, move _313);
        _310 = Not(move _311);
        switchInt(move _310) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _314 = core::panicking::AssertKind::Eq;
        _316 = Option::<Arguments<'_>>::None;
        _315 = core::panicking::assert_failed::<i32, i32>(move _314, _308, _309, move _316) -> unwind continue;
    }

    bb69: {
        _318 = const 3_u32;
        _319 = id::<i32>(const 31_i32) -> [return: bb70, unwind continue];
    }

    bb70: {
        _317 = Shl(move _318, move _319);
        _321 = &_317;
        _421 = const _;
        _320 = (move _321, _421);
        _322 = (_320.0: &u32);
        _323 = (_320.1: &u32);
        _326 = (*_322);
        _327 = (*_323);
        _325 = Eq(move _326, move _327);
        _324 = Not(move _325);
        switchInt(move _324) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _328 = core::panicking::AssertKind::Eq;
        _330 = Option::<Arguments<'_>>::None;
        _329 = core::panicking::assert_failed::<u32, u32>(move _328, _322, _323, move _330) -> unwind continue;
    }

    bb72: {
        _332 = const 1_i64;
        _333 = id::<i32>(const 0_i32) -> [return: bb73, unwind continue];
    }

    bb73: {
        _331 = Shl(move _332, move _333);
        _335 = &_331;
        _420 = const _;
        _334 = (move _335, _420);
        _336 = (_334.0: &i64);
        _337 = (_334.1: &i64);
        _340 = (*_336);
        _341 = (*_337);
        _339 = Eq(move _340, move _341);
        _338 = Not(move _339);
        switchInt(move _338) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _342 = core::panicking::AssertKind::Eq;
        _344 = Option::<Arguments<'_>>::None;
        _343 = core::panicking::assert_failed::<i64, i64>(move _342, _336, _337, move _344) -> unwind continue;
    }

    bb75: {
        _346 = const 1_u64;
        _347 = id::<i32>(const 0_i32) -> [return: bb76, unwind continue];
    }

    bb76: {
        _345 = Shl(move _346, move _347);
        _349 = &_345;
        _419 = const _;
        _348 = (move _349, _419);
        _350 = (_348.0: &u64);
        _351 = (_348.1: &u64);
        _354 = (*_350);
        _355 = (*_351);
        _353 = Eq(move _354, move _355);
        _352 = Not(move _353);
        switchInt(move _352) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _356 = core::panicking::AssertKind::Eq;
        _358 = Option::<Arguments<'_>>::None;
        _357 = core::panicking::assert_failed::<u64, u64>(move _356, _350, _351, move _358) -> unwind continue;
    }

    bb78: {
        _360 = const 1_i64;
        _361 = id::<i32>(const 63_i32) -> [return: bb79, unwind continue];
    }

    bb79: {
        _359 = Shl(move _360, move _361);
        _363 = &_359;
        _418 = const _;
        _362 = (move _363, _418);
        _364 = (_362.0: &i64);
        _365 = (_362.1: &i64);
        _368 = (*_364);
        _369 = (*_365);
        _367 = Eq(move _368, move _369);
        _366 = Not(move _367);
        switchInt(move _366) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        _370 = core::panicking::AssertKind::Eq;
        _372 = Option::<Arguments<'_>>::None;
        _371 = core::panicking::assert_failed::<i64, i64>(move _370, _364, _365, move _372) -> unwind continue;
    }

    bb81: {
        _374 = const 1_u64;
        _375 = id::<i32>(const 63_i32) -> [return: bb82, unwind continue];
    }

    bb82: {
        _373 = Shl(move _374, move _375);
        _377 = &_373;
        _417 = const _;
        _376 = (move _377, _417);
        _378 = (_376.0: &u64);
        _379 = (_376.1: &u64);
        _382 = (*_378);
        _383 = (*_379);
        _381 = Eq(move _382, move _383);
        _380 = Not(move _381);
        switchInt(move _380) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _384 = core::panicking::AssertKind::Eq;
        _386 = Option::<Arguments<'_>>::None;
        _385 = core::panicking::assert_failed::<u64, u64>(move _384, _378, _379, move _386) -> unwind continue;
    }

    bb84: {
        _388 = const 3_i64;
        _389 = id::<i32>(const 63_i32) -> [return: bb85, unwind continue];
    }

    bb85: {
        _387 = Shl(move _388, move _389);
        _391 = &_387;
        _416 = const _;
        _390 = (move _391, _416);
        _392 = (_390.0: &i64);
        _393 = (_390.1: &i64);
        _396 = (*_392);
        _397 = (*_393);
        _395 = Eq(move _396, move _397);
        _394 = Not(move _395);
        switchInt(move _394) -> [0: bb87, otherwise: bb86];
    }

    bb86: {
        _398 = core::panicking::AssertKind::Eq;
        _400 = Option::<Arguments<'_>>::None;
        _399 = core::panicking::assert_failed::<i64, i64>(move _398, _392, _393, move _400) -> unwind continue;
    }

    bb87: {
        _402 = const 3_u64;
        _403 = id::<i32>(const 63_i32) -> [return: bb88, unwind continue];
    }

    bb88: {
        _401 = Shl(move _402, move _403);
        _405 = &_401;
        _415 = const _;
        _404 = (move _405, _415);
        _406 = (_404.0: &u64);
        _407 = (_404.1: &u64);
        _410 = (*_406);
        _411 = (*_407);
        _409 = Eq(move _410, move _411);
        _408 = Not(move _409);
        switchInt(move _408) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _412 = core::panicking::AssertKind::Eq;
        _414 = Option::<Arguments<'_>>::None;
        _413 = core::panicking::assert_failed::<u64, u64>(move _412, _406, _407, move _414) -> unwind continue;
    }

    bb90: {
        return;
    }
}

promoted[0] in test_left_shift: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 9223372036854775808_u64;
        _0 = &_1;
        return;
    }
}

promoted[1] in test_left_shift: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in test_left_shift: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 9223372036854775808_u64;
        _0 = &_1;
        return;
    }
}

promoted[3] in test_left_shift: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in test_left_shift: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 1_u64;
        _0 = &_1;
        return;
    }
}

promoted[5] in test_left_shift: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 1_i64;
        _0 = &_1;
        return;
    }
}

promoted[6] in test_left_shift: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 2147483648_u32;
        _0 = &_1;
        return;
    }
}

promoted[7] in test_left_shift: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[8] in test_left_shift: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 2147483648_u32;
        _0 = &_1;
        return;
    }
}

promoted[9] in test_left_shift: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[10] in test_left_shift: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 1_u32;
        _0 = &_1;
        return;
    }
}

promoted[11] in test_left_shift: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[12] in test_left_shift: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 32768_u16;
        _0 = &_1;
        return;
    }
}

promoted[13] in test_left_shift: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[14] in test_left_shift: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 32768_u16;
        _0 = &_1;
        return;
    }
}

promoted[15] in test_left_shift: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[16] in test_left_shift: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 1_u16;
        _0 = &_1;
        return;
    }
}

promoted[17] in test_left_shift: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const 1_i16;
        _0 = &_1;
        return;
    }
}

promoted[18] in test_left_shift: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 128_u8;
        _0 = &_1;
        return;
    }
}

promoted[19] in test_left_shift: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[20] in test_left_shift: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 128_u8;
        _0 = &_1;
        return;
    }
}

promoted[21] in test_left_shift: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[22] in test_left_shift: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[23] in test_left_shift: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 1_i8;
        _0 = &_1;
        return;
    }
}

promoted[24] in test_left_shift: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 128_u8;
        _0 = &_1;
        return;
    }
}

promoted[25] in test_left_shift: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[26] in test_left_shift: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 128_u8;
        _0 = &_1;
        return;
    }
}

promoted[27] in test_left_shift: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[28] in test_left_shift: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[29] in test_left_shift: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 1_i8;
        _0 = &_1;
        return;
    }
}

fn test_right_shift() -> () {
    let mut _0: ();
    let _1: i8;
    let mut _2: i8;
    let mut _3: i32;
    let mut _4: (&i8, &i8);
    let mut _5: &i8;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i8;
    let mut _11: i8;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: u8;
    let mut _17: i32;
    let mut _18: (&u8, &u8);
    let mut _19: &u8;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: u8;
    let mut _25: u8;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: i32;
    let mut _31: i32;
    let mut _32: (&i8, &i8);
    let mut _33: &i8;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: i8;
    let mut _39: i8;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _44: i32;
    let mut _45: (&u8, &u8);
    let mut _46: &u8;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: u8;
    let mut _52: u8;
    let _54: !;
    let mut _55: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: i32;
    let mut _58: (&i8, &i8);
    let mut _59: &i8;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: i8;
    let mut _65: i8;
    let _67: !;
    let mut _68: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _70: i8;
    let mut _71: i32;
    let mut _72: i32;
    let mut _73: (&i8, &i8);
    let mut _74: &i8;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: i8;
    let mut _80: i8;
    let _82: !;
    let mut _83: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: u8;
    let mut _86: i32;
    let mut _87: (&u8, &u8);
    let mut _88: &u8;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: u8;
    let mut _94: u8;
    let _96: !;
    let mut _97: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: i8;
    let mut _100: i32;
    let mut _101: (&i8, &i8);
    let mut _102: &i8;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: i8;
    let mut _108: i8;
    let _110: !;
    let mut _111: std::option::Option<std::fmt::Arguments<'_>>;
    let _112: i16;
    let mut _113: i16;
    let mut _114: i32;
    let mut _115: (&i16, &i16);
    let mut _116: &i16;
    let mut _119: bool;
    let mut _120: bool;
    let mut _121: i16;
    let mut _122: i16;
    let _124: !;
    let mut _125: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _127: u16;
    let mut _128: i32;
    let mut _129: (&u16, &u16);
    let mut _130: &u16;
    let mut _133: bool;
    let mut _134: bool;
    let mut _135: u16;
    let mut _136: u16;
    let _138: !;
    let mut _139: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _141: i32;
    let mut _142: i32;
    let mut _143: (&u16, &u16);
    let mut _144: &u16;
    let mut _147: bool;
    let mut _148: bool;
    let mut _149: u16;
    let mut _150: u16;
    let _152: !;
    let mut _153: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _155: i32;
    let mut _156: (&u16, &u16);
    let mut _157: &u16;
    let mut _160: bool;
    let mut _161: bool;
    let mut _162: u16;
    let mut _163: u16;
    let _165: !;
    let mut _166: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _168: i32;
    let mut _169: (&i16, &i16);
    let mut _170: &i16;
    let mut _173: bool;
    let mut _174: bool;
    let mut _175: i16;
    let mut _176: i16;
    let _178: !;
    let mut _179: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _181: u16;
    let mut _182: i32;
    let mut _183: i32;
    let mut _184: (&u16, &u16);
    let mut _185: &u16;
    let mut _188: bool;
    let mut _189: bool;
    let mut _190: u16;
    let mut _191: u16;
    let _193: !;
    let mut _194: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _196: u16;
    let mut _197: i32;
    let mut _198: (&u16, &u16);
    let mut _199: &u16;
    let mut _202: bool;
    let mut _203: bool;
    let mut _204: u16;
    let mut _205: u16;
    let _207: !;
    let mut _208: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _210: i16;
    let mut _211: i32;
    let mut _212: (&i16, &i16);
    let mut _213: &i16;
    let mut _216: bool;
    let mut _217: bool;
    let mut _218: i16;
    let mut _219: i16;
    let _221: !;
    let mut _222: std::option::Option<std::fmt::Arguments<'_>>;
    let _223: i32;
    let mut _224: i32;
    let mut _225: i32;
    let mut _226: (&i32, &i32);
    let mut _227: &i32;
    let mut _230: bool;
    let mut _231: bool;
    let mut _232: i32;
    let mut _233: i32;
    let _235: !;
    let mut _236: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _238: u32;
    let mut _239: i32;
    let mut _240: (&u32, &u32);
    let mut _241: &u32;
    let mut _244: bool;
    let mut _245: bool;
    let mut _246: u32;
    let mut _247: u32;
    let _249: !;
    let mut _250: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _252: i32;
    let mut _253: i32;
    let mut _254: (&u32, &u32);
    let mut _255: &u32;
    let mut _258: bool;
    let mut _259: bool;
    let mut _260: u32;
    let mut _261: u32;
    let _263: !;
    let mut _264: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _266: i32;
    let mut _267: (&u32, &u32);
    let mut _268: &u32;
    let mut _271: bool;
    let mut _272: bool;
    let mut _273: u32;
    let mut _274: u32;
    let _276: !;
    let mut _277: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _279: i32;
    let mut _280: (&i32, &i32);
    let mut _281: &i32;
    let mut _284: bool;
    let mut _285: bool;
    let mut _286: i32;
    let mut _287: i32;
    let _289: !;
    let mut _290: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _292: u32;
    let mut _293: i32;
    let mut _294: i32;
    let mut _295: (&u32, &u32);
    let mut _296: &u32;
    let mut _299: bool;
    let mut _300: bool;
    let mut _301: u32;
    let mut _302: u32;
    let _304: !;
    let mut _305: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _307: u32;
    let mut _308: i32;
    let mut _309: (&u32, &u32);
    let mut _310: &u32;
    let mut _313: bool;
    let mut _314: bool;
    let mut _315: u32;
    let mut _316: u32;
    let _318: !;
    let mut _319: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _321: i32;
    let mut _322: i32;
    let mut _323: (&i32, &i32);
    let mut _324: &i32;
    let mut _327: bool;
    let mut _328: bool;
    let mut _329: i32;
    let mut _330: i32;
    let _332: !;
    let mut _333: std::option::Option<std::fmt::Arguments<'_>>;
    let _334: i64;
    let mut _335: i64;
    let mut _336: i32;
    let mut _337: (&i64, &i64);
    let mut _338: &i64;
    let mut _341: bool;
    let mut _342: bool;
    let mut _343: i64;
    let mut _344: i64;
    let _346: !;
    let mut _347: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _349: u64;
    let mut _350: i32;
    let mut _351: (&u64, &u64);
    let mut _352: &u64;
    let mut _355: bool;
    let mut _356: bool;
    let mut _357: u64;
    let mut _358: u64;
    let _360: !;
    let mut _361: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _363: i32;
    let mut _364: i32;
    let mut _365: (&u64, &u64);
    let mut _366: &u64;
    let mut _369: bool;
    let mut _370: bool;
    let mut _371: u64;
    let mut _372: u64;
    let _374: !;
    let mut _375: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _377: i32;
    let mut _378: (&u64, &u64);
    let mut _379: &u64;
    let mut _382: bool;
    let mut _383: bool;
    let mut _384: u64;
    let mut _385: u64;
    let _387: !;
    let mut _388: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _390: i32;
    let mut _391: (&i64, &i64);
    let mut _392: &i64;
    let mut _395: bool;
    let mut _396: bool;
    let mut _397: i64;
    let mut _398: i64;
    let _400: !;
    let mut _401: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _403: u64;
    let mut _404: i32;
    let mut _405: i32;
    let mut _406: (&u64, &u64);
    let mut _407: &u64;
    let mut _410: bool;
    let mut _411: bool;
    let mut _412: u64;
    let mut _413: u64;
    let _415: !;
    let mut _416: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _418: u64;
    let mut _419: i32;
    let mut _420: (&u64, &u64);
    let mut _421: &u64;
    let mut _424: bool;
    let mut _425: bool;
    let mut _426: u64;
    let mut _427: u64;
    let _429: !;
    let mut _430: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _432: i64;
    let mut _433: i32;
    let mut _434: (&i64, &i64);
    let mut _435: &i64;
    let mut _438: bool;
    let mut _439: bool;
    let mut _440: i64;
    let mut _441: i64;
    let _443: !;
    let mut _444: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _6: &i8;
        let _7: &i8;
        let _15: u8;
        let mut _476: &i8;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug x => _15;
            let _20: &u8;
            let _21: &u8;
            let _29: i8;
            let mut _475: &u8;
            scope 5 {
                debug left_val => _20;
                debug right_val => _21;
                let _26: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _26;
                }
            }
            scope 7 {
                debug x => _29;
                let _34: &i8;
                let _35: &i8;
                let _43: u8;
                let mut _474: &i8;
                scope 8 {
                    debug left_val => _34;
                    debug right_val => _35;
                    let _40: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _40;
                    }
                }
                scope 10 {
                    debug x => _43;
                    let _47: &u8;
                    let _48: &u8;
                    let _56: i8;
                    let mut _473: &u8;
                    scope 11 {
                        debug left_val => _47;
                        debug right_val => _48;
                        let _53: core::panicking::AssertKind;
                        scope 12 {
                            debug kind => _53;
                        }
                    }
                    scope 13 {
                        debug x => _56;
                        let _60: &i8;
                        let _61: &i8;
                        let _69: i8;
                        let mut _472: &i8;
                        scope 14 {
                            debug left_val => _60;
                            debug right_val => _61;
                            let _66: core::panicking::AssertKind;
                            scope 15 {
                                debug kind => _66;
                            }
                        }
                        scope 16 {
                            debug x => _69;
                            let _75: &i8;
                            let _76: &i8;
                            let _84: u8;
                            let mut _471: &i8;
                            scope 17 {
                                debug left_val => _75;
                                debug right_val => _76;
                                let _81: core::panicking::AssertKind;
                                scope 18 {
                                    debug kind => _81;
                                }
                            }
                            scope 19 {
                                debug x => _84;
                                let _89: &u8;
                                let _90: &u8;
                                let _98: i8;
                                let mut _470: &u8;
                                scope 20 {
                                    debug left_val => _89;
                                    debug right_val => _90;
                                    let _95: core::panicking::AssertKind;
                                    scope 21 {
                                        debug kind => _95;
                                    }
                                }
                                scope 22 {
                                    debug x => _98;
                                    let _103: &i8;
                                    let _104: &i8;
                                    let mut _469: &i8;
                                    scope 23 {
                                        debug left_val => _103;
                                        debug right_val => _104;
                                        let _109: core::panicking::AssertKind;
                                        scope 24 {
                                            debug kind => _109;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    scope 25 {
        debug x => _112;
        let _117: &i16;
        let _118: &i16;
        let _126: u16;
        let mut _468: &i16;
        scope 26 {
            debug left_val => _117;
            debug right_val => _118;
            let _123: core::panicking::AssertKind;
            scope 27 {
                debug kind => _123;
            }
        }
        scope 28 {
            debug x => _126;
            let _131: &u16;
            let _132: &u16;
            let _140: u16;
            let mut _467: &u16;
            scope 29 {
                debug left_val => _131;
                debug right_val => _132;
                let _137: core::panicking::AssertKind;
                scope 30 {
                    debug kind => _137;
                }
            }
            scope 31 {
                debug x => _140;
                let _145: &u16;
                let _146: &u16;
                let _154: u16;
                let mut _466: &u16;
                scope 32 {
                    debug left_val => _145;
                    debug right_val => _146;
                    let _151: core::panicking::AssertKind;
                    scope 33 {
                        debug kind => _151;
                    }
                }
                scope 34 {
                    debug x => _154;
                    let _158: &u16;
                    let _159: &u16;
                    let _167: i16;
                    let mut _465: &u16;
                    scope 35 {
                        debug left_val => _158;
                        debug right_val => _159;
                        let _164: core::panicking::AssertKind;
                        scope 36 {
                            debug kind => _164;
                        }
                    }
                    scope 37 {
                        debug x => _167;
                        let _171: &i16;
                        let _172: &i16;
                        let _180: u16;
                        let mut _464: &i16;
                        scope 38 {
                            debug left_val => _171;
                            debug right_val => _172;
                            let _177: core::panicking::AssertKind;
                            scope 39 {
                                debug kind => _177;
                            }
                        }
                        scope 40 {
                            debug x => _180;
                            let _186: &u16;
                            let _187: &u16;
                            let _195: u16;
                            let mut _463: &u16;
                            scope 41 {
                                debug left_val => _186;
                                debug right_val => _187;
                                let _192: core::panicking::AssertKind;
                                scope 42 {
                                    debug kind => _192;
                                }
                            }
                            scope 43 {
                                debug x => _195;
                                let _200: &u16;
                                let _201: &u16;
                                let _209: i16;
                                let mut _462: &u16;
                                scope 44 {
                                    debug left_val => _200;
                                    debug right_val => _201;
                                    let _206: core::panicking::AssertKind;
                                    scope 45 {
                                        debug kind => _206;
                                    }
                                }
                                scope 46 {
                                    debug x => _209;
                                    let _214: &i16;
                                    let _215: &i16;
                                    let mut _461: &i16;
                                    scope 47 {
                                        debug left_val => _214;
                                        debug right_val => _215;
                                        let _220: core::panicking::AssertKind;
                                        scope 48 {
                                            debug kind => _220;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    scope 49 {
        debug x => _223;
        let _228: &i32;
        let _229: &i32;
        let _237: u32;
        let mut _460: &i32;
        scope 50 {
            debug left_val => _228;
            debug right_val => _229;
            let _234: core::panicking::AssertKind;
            scope 51 {
                debug kind => _234;
            }
        }
        scope 52 {
            debug x => _237;
            let _242: &u32;
            let _243: &u32;
            let _251: u32;
            let mut _459: &u32;
            scope 53 {
                debug left_val => _242;
                debug right_val => _243;
                let _248: core::panicking::AssertKind;
                scope 54 {
                    debug kind => _248;
                }
            }
            scope 55 {
                debug x => _251;
                let _256: &u32;
                let _257: &u32;
                let _265: u32;
                let mut _458: &u32;
                scope 56 {
                    debug left_val => _256;
                    debug right_val => _257;
                    let _262: core::panicking::AssertKind;
                    scope 57 {
                        debug kind => _262;
                    }
                }
                scope 58 {
                    debug x => _265;
                    let _269: &u32;
                    let _270: &u32;
                    let _278: i32;
                    let mut _457: &u32;
                    scope 59 {
                        debug left_val => _269;
                        debug right_val => _270;
                        let _275: core::panicking::AssertKind;
                        scope 60 {
                            debug kind => _275;
                        }
                    }
                    scope 61 {
                        debug x => _278;
                        let _282: &i32;
                        let _283: &i32;
                        let _291: u32;
                        let mut _456: &i32;
                        scope 62 {
                            debug left_val => _282;
                            debug right_val => _283;
                            let _288: core::panicking::AssertKind;
                            scope 63 {
                                debug kind => _288;
                            }
                        }
                        scope 64 {
                            debug x => _291;
                            let _297: &u32;
                            let _298: &u32;
                            let _306: u32;
                            let mut _455: &u32;
                            scope 65 {
                                debug left_val => _297;
                                debug right_val => _298;
                                let _303: core::panicking::AssertKind;
                                scope 66 {
                                    debug kind => _303;
                                }
                            }
                            scope 67 {
                                debug x => _306;
                                let _311: &u32;
                                let _312: &u32;
                                let _320: i32;
                                let mut _454: &u32;
                                scope 68 {
                                    debug left_val => _311;
                                    debug right_val => _312;
                                    let _317: core::panicking::AssertKind;
                                    scope 69 {
                                        debug kind => _317;
                                    }
                                }
                                scope 70 {
                                    debug x => _320;
                                    let _325: &i32;
                                    let _326: &i32;
                                    let mut _453: &i32;
                                    scope 71 {
                                        debug left_val => _325;
                                        debug right_val => _326;
                                        let _331: core::panicking::AssertKind;
                                        scope 72 {
                                            debug kind => _331;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    scope 73 {
        debug x => _334;
        let _339: &i64;
        let _340: &i64;
        let _348: u64;
        let mut _452: &i64;
        scope 74 {
            debug left_val => _339;
            debug right_val => _340;
            let _345: core::panicking::AssertKind;
            scope 75 {
                debug kind => _345;
            }
        }
        scope 76 {
            debug x => _348;
            let _353: &u64;
            let _354: &u64;
            let _362: u64;
            let mut _451: &u64;
            scope 77 {
                debug left_val => _353;
                debug right_val => _354;
                let _359: core::panicking::AssertKind;
                scope 78 {
                    debug kind => _359;
                }
            }
            scope 79 {
                debug x => _362;
                let _367: &u64;
                let _368: &u64;
                let _376: u64;
                let mut _450: &u64;
                scope 80 {
                    debug left_val => _367;
                    debug right_val => _368;
                    let _373: core::panicking::AssertKind;
                    scope 81 {
                        debug kind => _373;
                    }
                }
                scope 82 {
                    debug x => _376;
                    let _380: &u64;
                    let _381: &u64;
                    let _389: i64;
                    let mut _449: &u64;
                    scope 83 {
                        debug left_val => _380;
                        debug right_val => _381;
                        let _386: core::panicking::AssertKind;
                        scope 84 {
                            debug kind => _386;
                        }
                    }
                    scope 85 {
                        debug x => _389;
                        let _393: &i64;
                        let _394: &i64;
                        let _402: u64;
                        let mut _448: &i64;
                        scope 86 {
                            debug left_val => _393;
                            debug right_val => _394;
                            let _399: core::panicking::AssertKind;
                            scope 87 {
                                debug kind => _399;
                            }
                        }
                        scope 88 {
                            debug x => _402;
                            let _408: &u64;
                            let _409: &u64;
                            let _417: u64;
                            let mut _447: &u64;
                            scope 89 {
                                debug left_val => _408;
                                debug right_val => _409;
                                let _414: core::panicking::AssertKind;
                                scope 90 {
                                    debug kind => _414;
                                }
                            }
                            scope 91 {
                                debug x => _417;
                                let _422: &u64;
                                let _423: &u64;
                                let _431: i64;
                                let mut _446: &u64;
                                scope 92 {
                                    debug left_val => _422;
                                    debug right_val => _423;
                                    let _428: core::panicking::AssertKind;
                                    scope 93 {
                                        debug kind => _428;
                                    }
                                }
                                scope 94 {
                                    debug x => _431;
                                    let _436: &i64;
                                    let _437: &i64;
                                    let mut _445: &i64;
                                    scope 95 {
                                        debug left_val => _436;
                                        debug right_val => _437;
                                        let _442: core::panicking::AssertKind;
                                        scope 96 {
                                            debug kind => _442;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const 1_i8;
        _3 = id::<i32>(const 0_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Shr(move _2, move _3);
        _5 = &_1;
        _476 = const _;
        _4 = (move _5, _476);
        _6 = (_4.0: &i8);
        _7 = (_4.1: &i8);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i8, i8>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _16 = const 1_u8;
        _17 = id::<i32>(const 0_i32) -> [return: bb4, unwind continue];
    }

    bb4: {
        _15 = Shr(move _16, move _17);
        _19 = &_15;
        _475 = const _;
        _18 = (move _19, _475);
        _20 = (_18.0: &u8);
        _21 = (_18.1: &u8);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<u8, u8>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb6: {
        _31 = Sub(const 7_i32, const 1_i32);
        _30 = id::<i32>(move _31) -> [return: bb7, unwind continue];
    }

    bb7: {
        _29 = Shr(const 64_i8, move _30);
        _33 = &_29;
        _474 = const _;
        _32 = (move _33, _474);
        _34 = (_32.0: &i8);
        _35 = (_32.1: &i8);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<i8, i8>(move _40, _34, _35, move _42) -> unwind continue;
    }

    bb9: {
        _44 = id::<i32>(const 7_i32) -> [return: bb10, unwind continue];
    }

    bb10: {
        _43 = Shr(const 128_u8, move _44);
        _46 = &_43;
        _473 = const _;
        _45 = (move _46, _473);
        _47 = (_45.0: &u8);
        _48 = (_45.1: &u8);
        _51 = (*_47);
        _52 = (*_48);
        _50 = Eq(move _51, move _52);
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _53 = core::panicking::AssertKind::Eq;
        _55 = Option::<Arguments<'_>>::None;
        _54 = core::panicking::assert_failed::<u8, u8>(move _53, _47, _48, move _55) -> unwind continue;
    }

    bb12: {
        _57 = id::<i32>(const 7_i32) -> [return: bb13, unwind continue];
    }

    bb13: {
        _56 = Shr(const _, move _57);
        _59 = &_56;
        _472 = const _;
        _58 = (move _59, _472);
        _60 = (_58.0: &i8);
        _61 = (_58.1: &i8);
        _64 = (*_60);
        _65 = (*_61);
        _63 = Eq(move _64, move _65);
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _66 = core::panicking::AssertKind::Eq;
        _68 = Option::<Arguments<'_>>::None;
        _67 = core::panicking::assert_failed::<i8, i8>(move _66, _60, _61, move _68) -> unwind continue;
    }

    bb15: {
        _70 = Add(const 64_i8, const 1_i8);
        _72 = Sub(const 7_i32, const 1_i32);
        _71 = id::<i32>(move _72) -> [return: bb16, unwind continue];
    }

    bb16: {
        _69 = Shr(move _70, move _71);
        _74 = &_69;
        _471 = const _;
        _73 = (move _74, _471);
        _75 = (_73.0: &i8);
        _76 = (_73.1: &i8);
        _79 = (*_75);
        _80 = (*_76);
        _78 = Eq(move _79, move _80);
        _77 = Not(move _78);
        switchInt(move _77) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _81 = core::panicking::AssertKind::Eq;
        _83 = Option::<Arguments<'_>>::None;
        _82 = core::panicking::assert_failed::<i8, i8>(move _81, _75, _76, move _83) -> unwind continue;
    }

    bb18: {
        _85 = Add(const 128_u8, const 1_u8);
        _86 = id::<i32>(const 7_i32) -> [return: bb19, unwind continue];
    }

    bb19: {
        _84 = Shr(move _85, move _86);
        _88 = &_84;
        _470 = const _;
        _87 = (move _88, _470);
        _89 = (_87.0: &u8);
        _90 = (_87.1: &u8);
        _93 = (*_89);
        _94 = (*_90);
        _92 = Eq(move _93, move _94);
        _91 = Not(move _92);
        switchInt(move _91) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _95 = core::panicking::AssertKind::Eq;
        _97 = Option::<Arguments<'_>>::None;
        _96 = core::panicking::assert_failed::<u8, u8>(move _95, _89, _90, move _97) -> unwind continue;
    }

    bb21: {
        _99 = Add(const _, const 1_i8);
        _100 = id::<i32>(const 7_i32) -> [return: bb22, unwind continue];
    }

    bb22: {
        _98 = Shr(move _99, move _100);
        _102 = &_98;
        _469 = const _;
        _101 = (move _102, _469);
        _103 = (_101.0: &i8);
        _104 = (_101.1: &i8);
        _107 = (*_103);
        _108 = (*_104);
        _106 = Eq(move _107, move _108);
        _105 = Not(move _106);
        switchInt(move _105) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _109 = core::panicking::AssertKind::Eq;
        _111 = Option::<Arguments<'_>>::None;
        _110 = core::panicking::assert_failed::<i8, i8>(move _109, _103, _104, move _111) -> unwind continue;
    }

    bb24: {
        _113 = const 1_i16;
        _114 = id::<i32>(const 0_i32) -> [return: bb25, unwind continue];
    }

    bb25: {
        _112 = Shr(move _113, move _114);
        _116 = &_112;
        _468 = const _;
        _115 = (move _116, _468);
        _117 = (_115.0: &i16);
        _118 = (_115.1: &i16);
        _121 = (*_117);
        _122 = (*_118);
        _120 = Eq(move _121, move _122);
        _119 = Not(move _120);
        switchInt(move _119) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _123 = core::panicking::AssertKind::Eq;
        _125 = Option::<Arguments<'_>>::None;
        _124 = core::panicking::assert_failed::<i16, i16>(move _123, _117, _118, move _125) -> unwind continue;
    }

    bb27: {
        _127 = const 1_u16;
        _128 = id::<i32>(const 0_i32) -> [return: bb28, unwind continue];
    }

    bb28: {
        _126 = Shr(move _127, move _128);
        _130 = &_126;
        _467 = const _;
        _129 = (move _130, _467);
        _131 = (_129.0: &u16);
        _132 = (_129.1: &u16);
        _135 = (*_131);
        _136 = (*_132);
        _134 = Eq(move _135, move _136);
        _133 = Not(move _134);
        switchInt(move _133) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _137 = core::panicking::AssertKind::Eq;
        _139 = Option::<Arguments<'_>>::None;
        _138 = core::panicking::assert_failed::<u16, u16>(move _137, _131, _132, move _139) -> unwind continue;
    }

    bb30: {
        _142 = Sub(const 15_i32, const 1_i32);
        _141 = id::<i32>(move _142) -> [return: bb31, unwind continue];
    }

    bb31: {
        _140 = Shr(const 16384_u16, move _141);
        _144 = &_140;
        _466 = const _;
        _143 = (move _144, _466);
        _145 = (_143.0: &u16);
        _146 = (_143.1: &u16);
        _149 = (*_145);
        _150 = (*_146);
        _148 = Eq(move _149, move _150);
        _147 = Not(move _148);
        switchInt(move _147) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _151 = core::panicking::AssertKind::Eq;
        _153 = Option::<Arguments<'_>>::None;
        _152 = core::panicking::assert_failed::<u16, u16>(move _151, _145, _146, move _153) -> unwind continue;
    }

    bb33: {
        _155 = id::<i32>(const 15_i32) -> [return: bb34, unwind continue];
    }

    bb34: {
        _154 = Shr(const 32768_u16, move _155);
        _157 = &_154;
        _465 = const _;
        _156 = (move _157, _465);
        _158 = (_156.0: &u16);
        _159 = (_156.1: &u16);
        _162 = (*_158);
        _163 = (*_159);
        _161 = Eq(move _162, move _163);
        _160 = Not(move _161);
        switchInt(move _160) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _164 = core::panicking::AssertKind::Eq;
        _166 = Option::<Arguments<'_>>::None;
        _165 = core::panicking::assert_failed::<u16, u16>(move _164, _158, _159, move _166) -> unwind continue;
    }

    bb36: {
        _168 = id::<i32>(const 15_i32) -> [return: bb37, unwind continue];
    }

    bb37: {
        _167 = Shr(const _, move _168);
        _170 = &_167;
        _464 = const _;
        _169 = (move _170, _464);
        _171 = (_169.0: &i16);
        _172 = (_169.1: &i16);
        _175 = (*_171);
        _176 = (*_172);
        _174 = Eq(move _175, move _176);
        _173 = Not(move _174);
        switchInt(move _173) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _177 = core::panicking::AssertKind::Eq;
        _179 = Option::<Arguments<'_>>::None;
        _178 = core::panicking::assert_failed::<i16, i16>(move _177, _171, _172, move _179) -> unwind continue;
    }

    bb39: {
        _181 = Add(const 16384_u16, const 1_u16);
        _183 = Sub(const 15_i32, const 1_i32);
        _182 = id::<i32>(move _183) -> [return: bb40, unwind continue];
    }

    bb40: {
        _180 = Shr(move _181, move _182);
        _185 = &_180;
        _463 = const _;
        _184 = (move _185, _463);
        _186 = (_184.0: &u16);
        _187 = (_184.1: &u16);
        _190 = (*_186);
        _191 = (*_187);
        _189 = Eq(move _190, move _191);
        _188 = Not(move _189);
        switchInt(move _188) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _192 = core::panicking::AssertKind::Eq;
        _194 = Option::<Arguments<'_>>::None;
        _193 = core::panicking::assert_failed::<u16, u16>(move _192, _186, _187, move _194) -> unwind continue;
    }

    bb42: {
        _196 = Add(const 32768_u16, const 1_u16);
        _197 = id::<i32>(const 15_i32) -> [return: bb43, unwind continue];
    }

    bb43: {
        _195 = Shr(move _196, move _197);
        _199 = &_195;
        _462 = const _;
        _198 = (move _199, _462);
        _200 = (_198.0: &u16);
        _201 = (_198.1: &u16);
        _204 = (*_200);
        _205 = (*_201);
        _203 = Eq(move _204, move _205);
        _202 = Not(move _203);
        switchInt(move _202) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _206 = core::panicking::AssertKind::Eq;
        _208 = Option::<Arguments<'_>>::None;
        _207 = core::panicking::assert_failed::<u16, u16>(move _206, _200, _201, move _208) -> unwind continue;
    }

    bb45: {
        _210 = Add(const _, const 1_i16);
        _211 = id::<i32>(const 15_i32) -> [return: bb46, unwind continue];
    }

    bb46: {
        _209 = Shr(move _210, move _211);
        _213 = &_209;
        _461 = const _;
        _212 = (move _213, _461);
        _214 = (_212.0: &i16);
        _215 = (_212.1: &i16);
        _218 = (*_214);
        _219 = (*_215);
        _217 = Eq(move _218, move _219);
        _216 = Not(move _217);
        switchInt(move _216) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _220 = core::panicking::AssertKind::Eq;
        _222 = Option::<Arguments<'_>>::None;
        _221 = core::panicking::assert_failed::<i16, i16>(move _220, _214, _215, move _222) -> unwind continue;
    }

    bb48: {
        _224 = const 1_i32;
        _225 = id::<i32>(const 0_i32) -> [return: bb49, unwind continue];
    }

    bb49: {
        _223 = Shr(move _224, move _225);
        _227 = &_223;
        _460 = const _;
        _226 = (move _227, _460);
        _228 = (_226.0: &i32);
        _229 = (_226.1: &i32);
        _232 = (*_228);
        _233 = (*_229);
        _231 = Eq(move _232, move _233);
        _230 = Not(move _231);
        switchInt(move _230) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _234 = core::panicking::AssertKind::Eq;
        _236 = Option::<Arguments<'_>>::None;
        _235 = core::panicking::assert_failed::<i32, i32>(move _234, _228, _229, move _236) -> unwind continue;
    }

    bb51: {
        _238 = const 1_u32;
        _239 = id::<i32>(const 0_i32) -> [return: bb52, unwind continue];
    }

    bb52: {
        _237 = Shr(move _238, move _239);
        _241 = &_237;
        _459 = const _;
        _240 = (move _241, _459);
        _242 = (_240.0: &u32);
        _243 = (_240.1: &u32);
        _246 = (*_242);
        _247 = (*_243);
        _245 = Eq(move _246, move _247);
        _244 = Not(move _245);
        switchInt(move _244) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _248 = core::panicking::AssertKind::Eq;
        _250 = Option::<Arguments<'_>>::None;
        _249 = core::panicking::assert_failed::<u32, u32>(move _248, _242, _243, move _250) -> unwind continue;
    }

    bb54: {
        _253 = Sub(const 31_i32, const 1_i32);
        _252 = id::<i32>(move _253) -> [return: bb55, unwind continue];
    }

    bb55: {
        _251 = Shr(const 1073741824_u32, move _252);
        _255 = &_251;
        _458 = const _;
        _254 = (move _255, _458);
        _256 = (_254.0: &u32);
        _257 = (_254.1: &u32);
        _260 = (*_256);
        _261 = (*_257);
        _259 = Eq(move _260, move _261);
        _258 = Not(move _259);
        switchInt(move _258) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _262 = core::panicking::AssertKind::Eq;
        _264 = Option::<Arguments<'_>>::None;
        _263 = core::panicking::assert_failed::<u32, u32>(move _262, _256, _257, move _264) -> unwind continue;
    }

    bb57: {
        _266 = id::<i32>(const 31_i32) -> [return: bb58, unwind continue];
    }

    bb58: {
        _265 = Shr(const 2147483648_u32, move _266);
        _268 = &_265;
        _457 = const _;
        _267 = (move _268, _457);
        _269 = (_267.0: &u32);
        _270 = (_267.1: &u32);
        _273 = (*_269);
        _274 = (*_270);
        _272 = Eq(move _273, move _274);
        _271 = Not(move _272);
        switchInt(move _271) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _275 = core::panicking::AssertKind::Eq;
        _277 = Option::<Arguments<'_>>::None;
        _276 = core::panicking::assert_failed::<u32, u32>(move _275, _269, _270, move _277) -> unwind continue;
    }

    bb60: {
        _279 = id::<i32>(const 31_i32) -> [return: bb61, unwind continue];
    }

    bb61: {
        _278 = Shr(const _, move _279);
        _281 = &_278;
        _456 = const _;
        _280 = (move _281, _456);
        _282 = (_280.0: &i32);
        _283 = (_280.1: &i32);
        _286 = (*_282);
        _287 = (*_283);
        _285 = Eq(move _286, move _287);
        _284 = Not(move _285);
        switchInt(move _284) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _288 = core::panicking::AssertKind::Eq;
        _290 = Option::<Arguments<'_>>::None;
        _289 = core::panicking::assert_failed::<i32, i32>(move _288, _282, _283, move _290) -> unwind continue;
    }

    bb63: {
        _292 = Add(const 1073741824_u32, const 1_u32);
        _294 = Sub(const 31_i32, const 1_i32);
        _293 = id::<i32>(move _294) -> [return: bb64, unwind continue];
    }

    bb64: {
        _291 = Shr(move _292, move _293);
        _296 = &_291;
        _455 = const _;
        _295 = (move _296, _455);
        _297 = (_295.0: &u32);
        _298 = (_295.1: &u32);
        _301 = (*_297);
        _302 = (*_298);
        _300 = Eq(move _301, move _302);
        _299 = Not(move _300);
        switchInt(move _299) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _303 = core::panicking::AssertKind::Eq;
        _305 = Option::<Arguments<'_>>::None;
        _304 = core::panicking::assert_failed::<u32, u32>(move _303, _297, _298, move _305) -> unwind continue;
    }

    bb66: {
        _307 = Add(const 2147483648_u32, const 1_u32);
        _308 = id::<i32>(const 31_i32) -> [return: bb67, unwind continue];
    }

    bb67: {
        _306 = Shr(move _307, move _308);
        _310 = &_306;
        _454 = const _;
        _309 = (move _310, _454);
        _311 = (_309.0: &u32);
        _312 = (_309.1: &u32);
        _315 = (*_311);
        _316 = (*_312);
        _314 = Eq(move _315, move _316);
        _313 = Not(move _314);
        switchInt(move _313) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _317 = core::panicking::AssertKind::Eq;
        _319 = Option::<Arguments<'_>>::None;
        _318 = core::panicking::assert_failed::<u32, u32>(move _317, _311, _312, move _319) -> unwind continue;
    }

    bb69: {
        _321 = Add(const _, const 1_i32);
        _322 = id::<i32>(const 31_i32) -> [return: bb70, unwind continue];
    }

    bb70: {
        _320 = Shr(move _321, move _322);
        _324 = &_320;
        _453 = const _;
        _323 = (move _324, _453);
        _325 = (_323.0: &i32);
        _326 = (_323.1: &i32);
        _329 = (*_325);
        _330 = (*_326);
        _328 = Eq(move _329, move _330);
        _327 = Not(move _328);
        switchInt(move _327) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _331 = core::panicking::AssertKind::Eq;
        _333 = Option::<Arguments<'_>>::None;
        _332 = core::panicking::assert_failed::<i32, i32>(move _331, _325, _326, move _333) -> unwind continue;
    }

    bb72: {
        _335 = const 1_i64;
        _336 = id::<i32>(const 0_i32) -> [return: bb73, unwind continue];
    }

    bb73: {
        _334 = Shr(move _335, move _336);
        _338 = &_334;
        _452 = const _;
        _337 = (move _338, _452);
        _339 = (_337.0: &i64);
        _340 = (_337.1: &i64);
        _343 = (*_339);
        _344 = (*_340);
        _342 = Eq(move _343, move _344);
        _341 = Not(move _342);
        switchInt(move _341) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _345 = core::panicking::AssertKind::Eq;
        _347 = Option::<Arguments<'_>>::None;
        _346 = core::panicking::assert_failed::<i64, i64>(move _345, _339, _340, move _347) -> unwind continue;
    }

    bb75: {
        _349 = const 1_u64;
        _350 = id::<i32>(const 0_i32) -> [return: bb76, unwind continue];
    }

    bb76: {
        _348 = Shr(move _349, move _350);
        _352 = &_348;
        _451 = const _;
        _351 = (move _352, _451);
        _353 = (_351.0: &u64);
        _354 = (_351.1: &u64);
        _357 = (*_353);
        _358 = (*_354);
        _356 = Eq(move _357, move _358);
        _355 = Not(move _356);
        switchInt(move _355) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _359 = core::panicking::AssertKind::Eq;
        _361 = Option::<Arguments<'_>>::None;
        _360 = core::panicking::assert_failed::<u64, u64>(move _359, _353, _354, move _361) -> unwind continue;
    }

    bb78: {
        _364 = Sub(const 63_i32, const 1_i32);
        _363 = id::<i32>(move _364) -> [return: bb79, unwind continue];
    }

    bb79: {
        _362 = Shr(const 4611686018427387904_u64, move _363);
        _366 = &_362;
        _450 = const _;
        _365 = (move _366, _450);
        _367 = (_365.0: &u64);
        _368 = (_365.1: &u64);
        _371 = (*_367);
        _372 = (*_368);
        _370 = Eq(move _371, move _372);
        _369 = Not(move _370);
        switchInt(move _369) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        _373 = core::panicking::AssertKind::Eq;
        _375 = Option::<Arguments<'_>>::None;
        _374 = core::panicking::assert_failed::<u64, u64>(move _373, _367, _368, move _375) -> unwind continue;
    }

    bb81: {
        _377 = id::<i32>(const 63_i32) -> [return: bb82, unwind continue];
    }

    bb82: {
        _376 = Shr(const 9223372036854775808_u64, move _377);
        _379 = &_376;
        _449 = const _;
        _378 = (move _379, _449);
        _380 = (_378.0: &u64);
        _381 = (_378.1: &u64);
        _384 = (*_380);
        _385 = (*_381);
        _383 = Eq(move _384, move _385);
        _382 = Not(move _383);
        switchInt(move _382) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _386 = core::panicking::AssertKind::Eq;
        _388 = Option::<Arguments<'_>>::None;
        _387 = core::panicking::assert_failed::<u64, u64>(move _386, _380, _381, move _388) -> unwind continue;
    }

    bb84: {
        _390 = id::<i32>(const 63_i32) -> [return: bb85, unwind continue];
    }

    bb85: {
        _389 = Shr(const _, move _390);
        _392 = &_389;
        _448 = const _;
        _391 = (move _392, _448);
        _393 = (_391.0: &i64);
        _394 = (_391.1: &i64);
        _397 = (*_393);
        _398 = (*_394);
        _396 = Eq(move _397, move _398);
        _395 = Not(move _396);
        switchInt(move _395) -> [0: bb87, otherwise: bb86];
    }

    bb86: {
        _399 = core::panicking::AssertKind::Eq;
        _401 = Option::<Arguments<'_>>::None;
        _400 = core::panicking::assert_failed::<i64, i64>(move _399, _393, _394, move _401) -> unwind continue;
    }

    bb87: {
        _403 = Add(const 4611686018427387904_u64, const 1_u64);
        _405 = Sub(const 63_i32, const 1_i32);
        _404 = id::<i32>(move _405) -> [return: bb88, unwind continue];
    }

    bb88: {
        _402 = Shr(move _403, move _404);
        _407 = &_402;
        _447 = const _;
        _406 = (move _407, _447);
        _408 = (_406.0: &u64);
        _409 = (_406.1: &u64);
        _412 = (*_408);
        _413 = (*_409);
        _411 = Eq(move _412, move _413);
        _410 = Not(move _411);
        switchInt(move _410) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _414 = core::panicking::AssertKind::Eq;
        _416 = Option::<Arguments<'_>>::None;
        _415 = core::panicking::assert_failed::<u64, u64>(move _414, _408, _409, move _416) -> unwind continue;
    }

    bb90: {
        _418 = Add(const 9223372036854775808_u64, const 1_u64);
        _419 = id::<i32>(const 63_i32) -> [return: bb91, unwind continue];
    }

    bb91: {
        _417 = Shr(move _418, move _419);
        _421 = &_417;
        _446 = const _;
        _420 = (move _421, _446);
        _422 = (_420.0: &u64);
        _423 = (_420.1: &u64);
        _426 = (*_422);
        _427 = (*_423);
        _425 = Eq(move _426, move _427);
        _424 = Not(move _425);
        switchInt(move _424) -> [0: bb93, otherwise: bb92];
    }

    bb92: {
        _428 = core::panicking::AssertKind::Eq;
        _430 = Option::<Arguments<'_>>::None;
        _429 = core::panicking::assert_failed::<u64, u64>(move _428, _422, _423, move _430) -> unwind continue;
    }

    bb93: {
        _432 = Add(const _, const 1_i64);
        _433 = id::<i32>(const 63_i32) -> [return: bb94, unwind continue];
    }

    bb94: {
        _431 = Shr(move _432, move _433);
        _435 = &_431;
        _445 = const _;
        _434 = (move _435, _445);
        _436 = (_434.0: &i64);
        _437 = (_434.1: &i64);
        _440 = (*_436);
        _441 = (*_437);
        _439 = Eq(move _440, move _441);
        _438 = Not(move _439);
        switchInt(move _438) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        _442 = core::panicking::AssertKind::Eq;
        _444 = Option::<Arguments<'_>>::None;
        _443 = core::panicking::assert_failed::<i64, i64>(move _442, _436, _437, move _444) -> unwind continue;
    }

    bb96: {
        return;
    }
}

promoted[0] in test_right_shift: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const -1_i64;
        _0 = &_1;
        return;
    }
}

promoted[1] in test_right_shift: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 1_u64;
        _0 = &_1;
        return;
    }
}

promoted[2] in test_right_shift: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 1_u64;
        _0 = &_1;
        return;
    }
}

promoted[3] in test_right_shift: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const -1_i64;
        _0 = &_1;
        return;
    }
}

promoted[4] in test_right_shift: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 1_u64;
        _0 = &_1;
        return;
    }
}

promoted[5] in test_right_shift: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 1_u64;
        _0 = &_1;
        return;
    }
}

promoted[6] in test_right_shift: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 1_u64;
        _0 = &_1;
        return;
    }
}

promoted[7] in test_right_shift: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 1_i64;
        _0 = &_1;
        return;
    }
}

promoted[8] in test_right_shift: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const -1_i32;
        _0 = &_1;
        return;
    }
}

promoted[9] in test_right_shift: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 1_u32;
        _0 = &_1;
        return;
    }
}

promoted[10] in test_right_shift: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 1_u32;
        _0 = &_1;
        return;
    }
}

promoted[11] in test_right_shift: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const -1_i32;
        _0 = &_1;
        return;
    }
}

promoted[12] in test_right_shift: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 1_u32;
        _0 = &_1;
        return;
    }
}

promoted[13] in test_right_shift: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 1_u32;
        _0 = &_1;
        return;
    }
}

promoted[14] in test_right_shift: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 1_u32;
        _0 = &_1;
        return;
    }
}

promoted[15] in test_right_shift: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[16] in test_right_shift: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const -1_i16;
        _0 = &_1;
        return;
    }
}

promoted[17] in test_right_shift: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 1_u16;
        _0 = &_1;
        return;
    }
}

promoted[18] in test_right_shift: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 1_u16;
        _0 = &_1;
        return;
    }
}

promoted[19] in test_right_shift: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const -1_i16;
        _0 = &_1;
        return;
    }
}

promoted[20] in test_right_shift: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 1_u16;
        _0 = &_1;
        return;
    }
}

promoted[21] in test_right_shift: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 1_u16;
        _0 = &_1;
        return;
    }
}

promoted[22] in test_right_shift: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 1_u16;
        _0 = &_1;
        return;
    }
}

promoted[23] in test_right_shift: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const 1_i16;
        _0 = &_1;
        return;
    }
}

promoted[24] in test_right_shift: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const -1_i8;
        _0 = &_1;
        return;
    }
}

promoted[25] in test_right_shift: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[26] in test_right_shift: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 1_i8;
        _0 = &_1;
        return;
    }
}

promoted[27] in test_right_shift: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const -1_i8;
        _0 = &_1;
        return;
    }
}

promoted[28] in test_right_shift: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[29] in test_right_shift: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 1_i8;
        _0 = &_1;
        return;
    }
}

promoted[30] in test_right_shift: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[31] in test_right_shift: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 1_i8;
        _0 = &_1;
        return;
    }
}
