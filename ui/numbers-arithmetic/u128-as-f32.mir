// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&f32, &f32);
    let _2: &f32;
    let _3: &f32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: f32;
    let mut _7: f32;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 0];
    let _15: [core::fmt::rt::Argument<'_>; 0];
    let mut _16: (&f32, &f32);
    let mut _17: &f32;
    let _18: f32;
    let mut _19: u128;
    let _20: &f32;
    let _21: &f32;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: f32;
    let mut _25: f32;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: std::fmt::Arguments<'_>;
    let mut _30: &[&str];
    let mut _31: &[core::fmt::rt::Argument<'_>];
    let _32: &[core::fmt::rt::Argument<'_>; 0];
    let _33: [core::fmt::rt::Argument<'_>; 0];
    let mut _34: (&f32, &f32);
    let _35: &f32;
    let _36: &f32;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: f32;
    let mut _40: f32;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _44: std::fmt::Arguments<'_>;
    let mut _45: &[&str];
    let mut _46: &[core::fmt::rt::Argument<'_>];
    let _47: &[core::fmt::rt::Argument<'_>; 0];
    let _48: [core::fmt::rt::Argument<'_>; 0];
    let mut _49: (&f32, &f32);
    let mut _50: &f32;
    let _51: f32;
    let mut _52: u128;
    let _53: &f32;
    let _54: &f32;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: f32;
    let mut _58: f32;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _62: std::fmt::Arguments<'_>;
    let mut _63: &[&str];
    let mut _64: &[core::fmt::rt::Argument<'_>];
    let _65: &[core::fmt::rt::Argument<'_>; 0];
    let _66: [core::fmt::rt::Argument<'_>; 0];
    let mut _67: (&f32, &f32);
    let _68: &f32;
    let _69: &f32;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: f32;
    let mut _73: f32;
    let _75: !;
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: std::fmt::Arguments<'_>;
    let mut _78: &[&str];
    let mut _79: &[core::fmt::rt::Argument<'_>];
    let _80: &[core::fmt::rt::Argument<'_>; 0];
    let _81: [core::fmt::rt::Argument<'_>; 0];
    let mut _82: (&f32, &f32);
    let mut _83: &f32;
    let _84: f32;
    let mut _85: u128;
    let _86: &f32;
    let _87: &f32;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: f32;
    let mut _91: f32;
    let _93: !;
    let mut _94: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _95: std::fmt::Arguments<'_>;
    let mut _96: &[&str];
    let mut _97: &[core::fmt::rt::Argument<'_>];
    let _98: &[core::fmt::rt::Argument<'_>; 0];
    let _99: [core::fmt::rt::Argument<'_>; 0];
    let mut _100: (&f32, &f32);
    let _101: &f32;
    let _102: &f32;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: f32;
    let mut _106: f32;
    let _108: !;
    let mut _109: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _110: std::fmt::Arguments<'_>;
    let mut _111: &[&str];
    let mut _112: &[core::fmt::rt::Argument<'_>];
    let _113: &[core::fmt::rt::Argument<'_>; 0];
    let _114: [core::fmt::rt::Argument<'_>; 0];
    let mut _115: (&f32, &f32);
    let mut _116: &f32;
    let _117: f32;
    let mut _118: u128;
    let _119: &f32;
    let _120: &f32;
    let mut _121: bool;
    let mut _122: bool;
    let mut _123: f32;
    let mut _124: f32;
    let _126: !;
    let mut _127: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _128: std::fmt::Arguments<'_>;
    let mut _129: &[&str];
    let mut _130: &[core::fmt::rt::Argument<'_>];
    let _131: &[core::fmt::rt::Argument<'_>; 0];
    let _132: [core::fmt::rt::Argument<'_>; 0];
    let mut _133: (&f32, &f32);
    let _134: &f32;
    let _135: &f32;
    let mut _136: bool;
    let mut _137: bool;
    let mut _138: f32;
    let mut _139: f32;
    let _141: !;
    let mut _142: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _143: std::fmt::Arguments<'_>;
    let mut _144: &[&str];
    let mut _145: &[core::fmt::rt::Argument<'_>];
    let _146: &[core::fmt::rt::Argument<'_>; 0];
    let _147: [core::fmt::rt::Argument<'_>; 0];
    let mut _148: (&f32, &f32);
    let mut _149: &f32;
    let _150: f32;
    let mut _151: u128;
    let _152: &f32;
    let _153: &f32;
    let mut _154: bool;
    let mut _155: bool;
    let mut _156: f32;
    let mut _157: f32;
    let _159: !;
    let mut _160: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _161: std::fmt::Arguments<'_>;
    let mut _162: &[&str];
    let mut _163: &[core::fmt::rt::Argument<'_>];
    let _164: &[core::fmt::rt::Argument<'_>; 0];
    let _165: [core::fmt::rt::Argument<'_>; 0];
    let mut _166: (&f32, &f32);
    let _167: &f32;
    let _168: &f32;
    let mut _169: bool;
    let mut _170: bool;
    let mut _171: f32;
    let mut _172: f32;
    let _174: !;
    let mut _175: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _176: std::fmt::Arguments<'_>;
    let mut _177: &[&str];
    let mut _178: &[core::fmt::rt::Argument<'_>];
    let _179: &[core::fmt::rt::Argument<'_>; 0];
    let _180: [core::fmt::rt::Argument<'_>; 0];
    let mut _181: (&f32, &f32);
    let mut _182: &f32;
    let _183: f32;
    let mut _184: u128;
    let _185: &f32;
    let _186: &f32;
    let mut _187: bool;
    let mut _188: bool;
    let mut _189: f32;
    let mut _190: f32;
    let _192: !;
    let mut _193: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _194: std::fmt::Arguments<'_>;
    let mut _195: &[&str];
    let mut _196: &[core::fmt::rt::Argument<'_>];
    let _197: &[core::fmt::rt::Argument<'_>; 0];
    let _198: [core::fmt::rt::Argument<'_>; 0];
    let mut _199: (&f32, &f32);
    let _200: &f32;
    let _201: &f32;
    let mut _202: bool;
    let mut _203: bool;
    let mut _204: f32;
    let mut _205: f32;
    let _207: !;
    let mut _208: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _209: std::fmt::Arguments<'_>;
    let mut _210: &[&str];
    let mut _211: &[core::fmt::rt::Argument<'_>];
    let _212: &[core::fmt::rt::Argument<'_>; 0];
    let _213: [core::fmt::rt::Argument<'_>; 0];
    let mut _214: (&f32, &f32);
    let mut _215: &f32;
    let _216: f32;
    let mut _217: u128;
    let _218: &f32;
    let _219: &f32;
    let mut _220: bool;
    let mut _221: bool;
    let mut _222: f32;
    let mut _223: f32;
    let _225: !;
    let mut _226: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _227: std::fmt::Arguments<'_>;
    let mut _228: &[&str];
    let mut _229: &[core::fmt::rt::Argument<'_>];
    let _230: &[core::fmt::rt::Argument<'_>; 0];
    let _231: [core::fmt::rt::Argument<'_>; 0];
    let mut _232: (&f32, &f32);
    let _233: &f32;
    let _234: &f32;
    let mut _235: bool;
    let mut _236: bool;
    let mut _237: f32;
    let mut _238: f32;
    let _240: !;
    let mut _241: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _242: std::fmt::Arguments<'_>;
    let mut _243: &[&str];
    let mut _244: &[core::fmt::rt::Argument<'_>];
    let _245: &[core::fmt::rt::Argument<'_>; 0];
    let _246: [core::fmt::rt::Argument<'_>; 0];
    let mut _247: (&f32, &f32);
    let mut _248: &f32;
    let _249: f32;
    let mut _250: u128;
    let _251: &f32;
    let _252: &f32;
    let mut _253: bool;
    let mut _254: bool;
    let mut _255: f32;
    let mut _256: f32;
    let _258: !;
    let mut _259: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _260: std::fmt::Arguments<'_>;
    let mut _261: &[&str];
    let mut _262: &[core::fmt::rt::Argument<'_>];
    let _263: &[core::fmt::rt::Argument<'_>; 0];
    let _264: [core::fmt::rt::Argument<'_>; 0];
    let mut _265: (&f32, &f32);
    let _266: &f32;
    let _267: &f32;
    let mut _268: bool;
    let mut _269: bool;
    let mut _270: f32;
    let mut _271: f32;
    let _273: !;
    let mut _274: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _275: std::fmt::Arguments<'_>;
    let mut _276: &[&str];
    let mut _277: &[core::fmt::rt::Argument<'_>];
    let _278: &[core::fmt::rt::Argument<'_>; 0];
    let _279: [core::fmt::rt::Argument<'_>; 0];
    let mut _280: (&f32, &f32);
    let mut _281: &f32;
    let _282: f32;
    let mut _283: u128;
    let _284: &f32;
    let _285: &f32;
    let mut _286: bool;
    let mut _287: bool;
    let mut _288: f32;
    let mut _289: f32;
    let _291: !;
    let mut _292: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _293: std::fmt::Arguments<'_>;
    let mut _294: &[&str];
    let mut _295: &[core::fmt::rt::Argument<'_>];
    let _296: &[core::fmt::rt::Argument<'_>; 0];
    let _297: [core::fmt::rt::Argument<'_>; 0];
    let mut _298: (&f32, &f32);
    let _299: &f32;
    let _300: &f32;
    let mut _301: bool;
    let mut _302: bool;
    let mut _303: f32;
    let mut _304: f32;
    let _306: !;
    let mut _307: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _308: std::fmt::Arguments<'_>;
    let mut _309: &[&str];
    let mut _310: &[core::fmt::rt::Argument<'_>];
    let _311: &[core::fmt::rt::Argument<'_>; 0];
    let _312: [core::fmt::rt::Argument<'_>; 0];
    let mut _313: (&f32, &f32);
    let mut _314: &f32;
    let _315: f32;
    let mut _316: u128;
    let _317: &f32;
    let _318: &f32;
    let mut _319: bool;
    let mut _320: bool;
    let mut _321: f32;
    let mut _322: f32;
    let _324: !;
    let mut _325: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _326: std::fmt::Arguments<'_>;
    let mut _327: &[&str];
    let mut _328: &[core::fmt::rt::Argument<'_>];
    let _329: &[core::fmt::rt::Argument<'_>; 0];
    let _330: [core::fmt::rt::Argument<'_>; 0];
    let mut _331: (&f32, &f32);
    let _332: &f32;
    let _333: &f32;
    let mut _334: bool;
    let mut _335: bool;
    let mut _336: f32;
    let mut _337: f32;
    let _339: !;
    let mut _340: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _341: std::fmt::Arguments<'_>;
    let mut _342: &[&str];
    let mut _343: &[core::fmt::rt::Argument<'_>];
    let _344: &[core::fmt::rt::Argument<'_>; 0];
    let _345: [core::fmt::rt::Argument<'_>; 0];
    let mut _346: (&f32, &f32);
    let mut _347: &f32;
    let _348: f32;
    let mut _349: u128;
    let _350: &f32;
    let _351: &f32;
    let mut _352: bool;
    let mut _353: bool;
    let mut _354: f32;
    let mut _355: f32;
    let _357: !;
    let mut _358: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _359: std::fmt::Arguments<'_>;
    let mut _360: &[&str];
    let mut _361: &[core::fmt::rt::Argument<'_>];
    let _362: &[core::fmt::rt::Argument<'_>; 0];
    let _363: [core::fmt::rt::Argument<'_>; 0];
    let mut _364: (&f64, &f64);
    let _365: &f64;
    let _366: &f64;
    let mut _367: bool;
    let mut _368: bool;
    let mut _369: f64;
    let mut _370: f64;
    let _372: !;
    let mut _373: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _374: std::fmt::Arguments<'_>;
    let mut _375: &[&str];
    let mut _376: &[core::fmt::rt::Argument<'_>];
    let _377: &[core::fmt::rt::Argument<'_>; 0];
    let _378: [core::fmt::rt::Argument<'_>; 0];
    let mut _379: (&f64, &f64);
    let mut _380: &f64;
    let _381: f64;
    let mut _382: u128;
    let _383: &f64;
    let _384: &f64;
    let mut _385: bool;
    let mut _386: bool;
    let mut _387: f64;
    let mut _388: f64;
    let _390: !;
    let mut _391: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _392: std::fmt::Arguments<'_>;
    let mut _393: &[&str];
    let mut _394: &[core::fmt::rt::Argument<'_>];
    let _395: &[core::fmt::rt::Argument<'_>; 0];
    let _396: [core::fmt::rt::Argument<'_>; 0];
    let mut _397: (&f64, &f64);
    let _398: &f64;
    let _399: &f64;
    let mut _400: bool;
    let mut _401: bool;
    let mut _402: f64;
    let mut _403: f64;
    let _405: !;
    let mut _406: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _407: std::fmt::Arguments<'_>;
    let mut _408: &[&str];
    let mut _409: &[core::fmt::rt::Argument<'_>];
    let _410: &[core::fmt::rt::Argument<'_>; 0];
    let _411: [core::fmt::rt::Argument<'_>; 0];
    let mut _412: (&f64, &f64);
    let mut _413: &f64;
    let _414: f64;
    let mut _415: u128;
    let _416: &f64;
    let _417: &f64;
    let mut _418: bool;
    let mut _419: bool;
    let mut _420: f64;
    let mut _421: f64;
    let _423: !;
    let mut _424: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _425: std::fmt::Arguments<'_>;
    let mut _426: &[&str];
    let mut _427: &[core::fmt::rt::Argument<'_>];
    let _428: &[core::fmt::rt::Argument<'_>; 0];
    let _429: [core::fmt::rt::Argument<'_>; 0];
    let mut _456: &f64;
    let mut _457: &f64;
    let mut _458: &f64;
    let mut _459: &f64;
    let mut _460: &f64;
    let mut _461: &f64;
    let mut _462: &f32;
    let mut _463: &f32;
    let mut _464: &f32;
    let mut _465: &f32;
    let mut _466: &f32;
    let mut _467: &f32;
    let mut _468: &f32;
    let mut _469: &f32;
    let mut _470: &f32;
    let mut _471: &f32;
    let mut _472: &f32;
    let mut _473: &f32;
    let mut _474: &f32;
    let mut _475: &f32;
    let mut _476: &f32;
    let mut _477: &f32;
    let mut _478: &f32;
    let mut _479: &f32;
    let mut _480: &f32;
    let mut _481: &f32;
    let mut _482: &f32;
    let mut _483: &f32;
    let mut _484: &f32;
    let mut _485: &f32;
    let mut _486: &f32;
    let mut _487: &f32;
    let mut _488: &f32;
    let mut _489: &f32;
    let mut _490: &f32;
    let mut _491: &f32;
    let mut _492: &f32;
    let mut _493: &f32;
    let mut _494: &f32;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
            let mut _430: &[&str; 1];
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
            let mut _431: &[&str; 1];
        }
    }
    scope 5 {
        debug left_val => _35;
        debug right_val => _36;
        let _41: core::panicking::AssertKind;
        scope 6 {
            debug kind => _41;
            let mut _432: &[&str; 1];
        }
    }
    scope 7 {
        debug left_val => _53;
        debug right_val => _54;
        let _59: core::panicking::AssertKind;
        scope 8 {
            debug kind => _59;
            let mut _433: &[&str; 1];
        }
    }
    scope 9 {
        debug left_val => _68;
        debug right_val => _69;
        let _74: core::panicking::AssertKind;
        scope 10 {
            debug kind => _74;
            let mut _434: &[&str; 1];
        }
    }
    scope 11 {
        debug left_val => _86;
        debug right_val => _87;
        let _92: core::panicking::AssertKind;
        scope 12 {
            debug kind => _92;
            let mut _435: &[&str; 1];
        }
    }
    scope 13 {
        debug left_val => _101;
        debug right_val => _102;
        let _107: core::panicking::AssertKind;
        scope 14 {
            debug kind => _107;
            let mut _436: &[&str; 1];
        }
    }
    scope 15 {
        debug left_val => _119;
        debug right_val => _120;
        let _125: core::panicking::AssertKind;
        scope 16 {
            debug kind => _125;
            let mut _437: &[&str; 1];
        }
    }
    scope 17 {
        debug left_val => _134;
        debug right_val => _135;
        let _140: core::panicking::AssertKind;
        scope 18 {
            debug kind => _140;
            let mut _438: &[&str; 1];
        }
    }
    scope 19 {
        debug left_val => _152;
        debug right_val => _153;
        let _158: core::panicking::AssertKind;
        scope 20 {
            debug kind => _158;
            let mut _439: &[&str; 1];
        }
    }
    scope 21 {
        debug left_val => _167;
        debug right_val => _168;
        let _173: core::panicking::AssertKind;
        scope 22 {
            debug kind => _173;
            let mut _440: &[&str; 1];
        }
    }
    scope 23 {
        debug left_val => _185;
        debug right_val => _186;
        let _191: core::panicking::AssertKind;
        scope 24 {
            debug kind => _191;
            let mut _441: &[&str; 1];
        }
    }
    scope 25 {
        debug left_val => _200;
        debug right_val => _201;
        let _206: core::panicking::AssertKind;
        scope 26 {
            debug kind => _206;
            let mut _442: &[&str; 1];
        }
    }
    scope 27 {
        debug left_val => _218;
        debug right_val => _219;
        let _224: core::panicking::AssertKind;
        scope 28 {
            debug kind => _224;
            let mut _443: &[&str; 1];
        }
    }
    scope 29 {
        debug left_val => _233;
        debug right_val => _234;
        let _239: core::panicking::AssertKind;
        scope 30 {
            debug kind => _239;
            let mut _444: &[&str; 1];
        }
    }
    scope 31 {
        debug left_val => _251;
        debug right_val => _252;
        let _257: core::panicking::AssertKind;
        scope 32 {
            debug kind => _257;
            let mut _445: &[&str; 1];
        }
    }
    scope 33 {
        debug left_val => _266;
        debug right_val => _267;
        let _272: core::panicking::AssertKind;
        scope 34 {
            debug kind => _272;
            let mut _446: &[&str; 1];
        }
    }
    scope 35 {
        debug left_val => _284;
        debug right_val => _285;
        let _290: core::panicking::AssertKind;
        scope 36 {
            debug kind => _290;
            let mut _447: &[&str; 1];
        }
    }
    scope 37 {
        debug left_val => _299;
        debug right_val => _300;
        let _305: core::panicking::AssertKind;
        scope 38 {
            debug kind => _305;
            let mut _448: &[&str; 1];
        }
    }
    scope 39 {
        debug left_val => _317;
        debug right_val => _318;
        let _323: core::panicking::AssertKind;
        scope 40 {
            debug kind => _323;
            let mut _449: &[&str; 1];
        }
    }
    scope 41 {
        debug left_val => _332;
        debug right_val => _333;
        let _338: core::panicking::AssertKind;
        scope 42 {
            debug kind => _338;
            let mut _450: &[&str; 1];
        }
    }
    scope 43 {
        debug left_val => _350;
        debug right_val => _351;
        let _356: core::panicking::AssertKind;
        scope 44 {
            debug kind => _356;
            let mut _451: &[&str; 1];
        }
    }
    scope 45 {
        debug left_val => _365;
        debug right_val => _366;
        let _371: core::panicking::AssertKind;
        scope 46 {
            debug kind => _371;
            let mut _452: &[&str; 1];
        }
    }
    scope 47 {
        debug left_val => _383;
        debug right_val => _384;
        let _389: core::panicking::AssertKind;
        scope 48 {
            debug kind => _389;
            let mut _453: &[&str; 1];
        }
    }
    scope 49 {
        debug left_val => _398;
        debug right_val => _399;
        let _404: core::panicking::AssertKind;
        scope 50 {
            debug kind => _404;
            let mut _454: &[&str; 1];
        }
    }
    scope 51 {
        debug left_val => _416;
        debug right_val => _417;
        let _422: core::panicking::AssertKind;
        scope 52 {
            debug kind => _422;
            let mut _455: &[&str; 1];
        }
    }

    bb0: {
        _494 = const _;
        _493 = const _;
        _1 = (_494, _493);
        _2 = (_1.0: &f32);
        _3 = (_1.1: &f32);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _430 = const _;
        _12 = _430 as &[&str] (Pointer(Unsize));
        _15 = core::fmt::rt::Argument::<'_>::none() -> [return: bb2, unwind continue];
    }

    bb2: {
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        _10 = Option::<Arguments<'_>>::Some(move _11);
        _9 = core::panicking::assert_failed::<f32, f32>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb4: {
        _19 = test::black_box::<u128>(const 340282326356119256160033759537265639424_u128) -> [return: bb5, unwind continue];
    }

    bb5: {
        _18 = move _19 as f32 (IntToFloat);
        _17 = &_18;
        _492 = const _;
        _16 = (move _17, _492);
        _20 = (_16.0: &f32);
        _21 = (_16.1: &f32);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb9, otherwise: bb6];
    }

    bb6: {
        _26 = core::panicking::AssertKind::Eq;
        _431 = const _;
        _30 = _431 as &[&str] (Pointer(Unsize));
        _33 = core::fmt::rt::Argument::<'_>::none() -> [return: bb7, unwind continue];
    }

    bb7: {
        _32 = &_33;
        _31 = _32 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _29 = Arguments::<'_>::new_v1(move _30, move _31) -> [return: bb8, unwind continue];
    }

    bb8: {
        _28 = Option::<Arguments<'_>>::Some(move _29);
        _27 = core::panicking::assert_failed::<f32, f32>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb9: {
        _491 = const _;
        _490 = const _;
        _34 = (_491, _490);
        _35 = (_34.0: &f32);
        _36 = (_34.1: &f32);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _41 = core::panicking::AssertKind::Eq;
        _432 = const _;
        _45 = _432 as &[&str] (Pointer(Unsize));
        _48 = core::fmt::rt::Argument::<'_>::none() -> [return: bb12, unwind continue];
    }

    bb11: {
        _52 = test::black_box::<u128>(const 340282336497324057985868971510891282431_u128) -> [return: bb14, unwind continue];
    }

    bb12: {
        _47 = &_48;
        _46 = _47 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _44 = Arguments::<'_>::new_v1(move _45, move _46) -> [return: bb13, unwind continue];
    }

    bb13: {
        _43 = Option::<Arguments<'_>>::Some(move _44);
        _42 = core::panicking::assert_failed::<f32, f32>(move _41, _35, _36, move _43) -> unwind continue;
    }

    bb14: {
        _51 = move _52 as f32 (IntToFloat);
        _50 = &_51;
        _489 = const _;
        _49 = (move _50, _489);
        _53 = (_49.0: &f32);
        _54 = (_49.1: &f32);
        _57 = (*_53);
        _58 = (*_54);
        _56 = Eq(move _57, move _58);
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb18, otherwise: bb15];
    }

    bb15: {
        _59 = core::panicking::AssertKind::Eq;
        _433 = const _;
        _63 = _433 as &[&str] (Pointer(Unsize));
        _66 = core::fmt::rt::Argument::<'_>::none() -> [return: bb16, unwind continue];
    }

    bb16: {
        _65 = &_66;
        _64 = _65 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _62 = Arguments::<'_>::new_v1(move _63, move _64) -> [return: bb17, unwind continue];
    }

    bb17: {
        _61 = Option::<Arguments<'_>>::Some(move _62);
        _60 = core::panicking::assert_failed::<f32, f32>(move _59, _53, _54, move _61) -> unwind continue;
    }

    bb18: {
        _488 = const _;
        _487 = const _;
        _67 = (_488, _487);
        _68 = (_67.0: &f32);
        _69 = (_67.1: &f32);
        _72 = (*_68);
        _73 = (*_69);
        _71 = Eq(move _72, move _73);
        _70 = Not(move _71);
        switchInt(move _70) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _74 = core::panicking::AssertKind::Eq;
        _434 = const _;
        _78 = _434 as &[&str] (Pointer(Unsize));
        _81 = core::fmt::rt::Argument::<'_>::none() -> [return: bb21, unwind continue];
    }

    bb20: {
        _85 = test::black_box::<u128>(const 340282336497324057985868971510891282432_u128) -> [return: bb23, unwind continue];
    }

    bb21: {
        _80 = &_81;
        _79 = _80 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _77 = Arguments::<'_>::new_v1(move _78, move _79) -> [return: bb22, unwind continue];
    }

    bb22: {
        _76 = Option::<Arguments<'_>>::Some(move _77);
        _75 = core::panicking::assert_failed::<f32, f32>(move _74, _68, _69, move _76) -> unwind continue;
    }

    bb23: {
        _84 = move _85 as f32 (IntToFloat);
        _83 = &_84;
        _486 = const _;
        _82 = (move _83, _486);
        _86 = (_82.0: &f32);
        _87 = (_82.1: &f32);
        _90 = (*_86);
        _91 = (*_87);
        _89 = Eq(move _90, move _91);
        _88 = Not(move _89);
        switchInt(move _88) -> [0: bb27, otherwise: bb24];
    }

    bb24: {
        _92 = core::panicking::AssertKind::Eq;
        _435 = const _;
        _96 = _435 as &[&str] (Pointer(Unsize));
        _99 = core::fmt::rt::Argument::<'_>::none() -> [return: bb25, unwind continue];
    }

    bb25: {
        _98 = &_99;
        _97 = _98 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _95 = Arguments::<'_>::new_v1(move _96, move _97) -> [return: bb26, unwind continue];
    }

    bb26: {
        _94 = Option::<Arguments<'_>>::Some(move _95);
        _93 = core::panicking::assert_failed::<f32, f32>(move _92, _86, _87, move _94) -> unwind continue;
    }

    bb27: {
        _485 = const _;
        _484 = const _;
        _100 = (_485, _484);
        _101 = (_100.0: &f32);
        _102 = (_100.1: &f32);
        _105 = (*_101);
        _106 = (*_102);
        _104 = Eq(move _105, move _106);
        _103 = Not(move _104);
        switchInt(move _103) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _107 = core::panicking::AssertKind::Eq;
        _436 = const _;
        _111 = _436 as &[&str] (Pointer(Unsize));
        _114 = core::fmt::rt::Argument::<'_>::none() -> [return: bb30, unwind continue];
    }

    bb29: {
        _118 = test::black_box::<u128>(const 340282336497324057985868971510891282433_u128) -> [return: bb32, unwind continue];
    }

    bb30: {
        _113 = &_114;
        _112 = _113 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _110 = Arguments::<'_>::new_v1(move _111, move _112) -> [return: bb31, unwind continue];
    }

    bb31: {
        _109 = Option::<Arguments<'_>>::Some(move _110);
        _108 = core::panicking::assert_failed::<f32, f32>(move _107, _101, _102, move _109) -> unwind continue;
    }

    bb32: {
        _117 = move _118 as f32 (IntToFloat);
        _116 = &_117;
        _483 = const _;
        _115 = (move _116, _483);
        _119 = (_115.0: &f32);
        _120 = (_115.1: &f32);
        _123 = (*_119);
        _124 = (*_120);
        _122 = Eq(move _123, move _124);
        _121 = Not(move _122);
        switchInt(move _121) -> [0: bb36, otherwise: bb33];
    }

    bb33: {
        _125 = core::panicking::AssertKind::Eq;
        _437 = const _;
        _129 = _437 as &[&str] (Pointer(Unsize));
        _132 = core::fmt::rt::Argument::<'_>::none() -> [return: bb34, unwind continue];
    }

    bb34: {
        _131 = &_132;
        _130 = _131 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _128 = Arguments::<'_>::new_v1(move _129, move _130) -> [return: bb35, unwind continue];
    }

    bb35: {
        _127 = Option::<Arguments<'_>>::Some(move _128);
        _126 = core::panicking::assert_failed::<f32, f32>(move _125, _119, _120, move _127) -> unwind continue;
    }

    bb36: {
        _482 = const _;
        _481 = const _;
        _133 = (_482, _481);
        _134 = (_133.0: &f32);
        _135 = (_133.1: &f32);
        _138 = (*_134);
        _139 = (*_135);
        _137 = Eq(move _138, move _139);
        _136 = Not(move _137);
        switchInt(move _136) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _140 = core::panicking::AssertKind::Eq;
        _438 = const _;
        _144 = _438 as &[&str] (Pointer(Unsize));
        _147 = core::fmt::rt::Argument::<'_>::none() -> [return: bb39, unwind continue];
    }

    bb38: {
        _151 = test::black_box::<u128>(const 340282346638528859811704183484516925439_u128) -> [return: bb41, unwind continue];
    }

    bb39: {
        _146 = &_147;
        _145 = _146 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _143 = Arguments::<'_>::new_v1(move _144, move _145) -> [return: bb40, unwind continue];
    }

    bb40: {
        _142 = Option::<Arguments<'_>>::Some(move _143);
        _141 = core::panicking::assert_failed::<f32, f32>(move _140, _134, _135, move _142) -> unwind continue;
    }

    bb41: {
        _150 = move _151 as f32 (IntToFloat);
        _149 = &_150;
        _480 = const _;
        _148 = (move _149, _480);
        _152 = (_148.0: &f32);
        _153 = (_148.1: &f32);
        _156 = (*_152);
        _157 = (*_153);
        _155 = Eq(move _156, move _157);
        _154 = Not(move _155);
        switchInt(move _154) -> [0: bb45, otherwise: bb42];
    }

    bb42: {
        _158 = core::panicking::AssertKind::Eq;
        _439 = const _;
        _162 = _439 as &[&str] (Pointer(Unsize));
        _165 = core::fmt::rt::Argument::<'_>::none() -> [return: bb43, unwind continue];
    }

    bb43: {
        _164 = &_165;
        _163 = _164 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _161 = Arguments::<'_>::new_v1(move _162, move _163) -> [return: bb44, unwind continue];
    }

    bb44: {
        _160 = Option::<Arguments<'_>>::Some(move _161);
        _159 = core::panicking::assert_failed::<f32, f32>(move _158, _152, _153, move _160) -> unwind continue;
    }

    bb45: {
        _479 = const _;
        _478 = const _;
        _166 = (_479, _478);
        _167 = (_166.0: &f32);
        _168 = (_166.1: &f32);
        _171 = (*_167);
        _172 = (*_168);
        _170 = Eq(move _171, move _172);
        _169 = Not(move _170);
        switchInt(move _169) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _173 = core::panicking::AssertKind::Eq;
        _440 = const _;
        _177 = _440 as &[&str] (Pointer(Unsize));
        _180 = core::fmt::rt::Argument::<'_>::none() -> [return: bb48, unwind continue];
    }

    bb47: {
        _184 = test::black_box::<u128>(const 340282346638528859811704183484516925440_u128) -> [return: bb50, unwind continue];
    }

    bb48: {
        _179 = &_180;
        _178 = _179 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _176 = Arguments::<'_>::new_v1(move _177, move _178) -> [return: bb49, unwind continue];
    }

    bb49: {
        _175 = Option::<Arguments<'_>>::Some(move _176);
        _174 = core::panicking::assert_failed::<f32, f32>(move _173, _167, _168, move _175) -> unwind continue;
    }

    bb50: {
        _183 = move _184 as f32 (IntToFloat);
        _182 = &_183;
        _477 = const _;
        _181 = (move _182, _477);
        _185 = (_181.0: &f32);
        _186 = (_181.1: &f32);
        _189 = (*_185);
        _190 = (*_186);
        _188 = Eq(move _189, move _190);
        _187 = Not(move _188);
        switchInt(move _187) -> [0: bb54, otherwise: bb51];
    }

    bb51: {
        _191 = core::panicking::AssertKind::Eq;
        _441 = const _;
        _195 = _441 as &[&str] (Pointer(Unsize));
        _198 = core::fmt::rt::Argument::<'_>::none() -> [return: bb52, unwind continue];
    }

    bb52: {
        _197 = &_198;
        _196 = _197 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _194 = Arguments::<'_>::new_v1(move _195, move _196) -> [return: bb53, unwind continue];
    }

    bb53: {
        _193 = Option::<Arguments<'_>>::Some(move _194);
        _192 = core::panicking::assert_failed::<f32, f32>(move _191, _185, _186, move _193) -> unwind continue;
    }

    bb54: {
        _476 = const _;
        _475 = const _;
        _199 = (_476, _475);
        _200 = (_199.0: &f32);
        _201 = (_199.1: &f32);
        _204 = (*_200);
        _205 = (*_201);
        _203 = Eq(move _204, move _205);
        _202 = Not(move _203);
        switchInt(move _202) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _206 = core::panicking::AssertKind::Eq;
        _442 = const _;
        _210 = _442 as &[&str] (Pointer(Unsize));
        _213 = core::fmt::rt::Argument::<'_>::none() -> [return: bb57, unwind continue];
    }

    bb56: {
        _217 = test::black_box::<u128>(const 340282346638528859811704183484516925441_u128) -> [return: bb59, unwind continue];
    }

    bb57: {
        _212 = &_213;
        _211 = _212 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _209 = Arguments::<'_>::new_v1(move _210, move _211) -> [return: bb58, unwind continue];
    }

    bb58: {
        _208 = Option::<Arguments<'_>>::Some(move _209);
        _207 = core::panicking::assert_failed::<f32, f32>(move _206, _200, _201, move _208) -> unwind continue;
    }

    bb59: {
        _216 = move _217 as f32 (IntToFloat);
        _215 = &_216;
        _474 = const _;
        _214 = (move _215, _474);
        _218 = (_214.0: &f32);
        _219 = (_214.1: &f32);
        _222 = (*_218);
        _223 = (*_219);
        _221 = Eq(move _222, move _223);
        _220 = Not(move _221);
        switchInt(move _220) -> [0: bb63, otherwise: bb60];
    }

    bb60: {
        _224 = core::panicking::AssertKind::Eq;
        _443 = const _;
        _228 = _443 as &[&str] (Pointer(Unsize));
        _231 = core::fmt::rt::Argument::<'_>::none() -> [return: bb61, unwind continue];
    }

    bb61: {
        _230 = &_231;
        _229 = _230 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _227 = Arguments::<'_>::new_v1(move _228, move _229) -> [return: bb62, unwind continue];
    }

    bb62: {
        _226 = Option::<Arguments<'_>>::Some(move _227);
        _225 = core::panicking::assert_failed::<f32, f32>(move _224, _218, _219, move _226) -> unwind continue;
    }

    bb63: {
        _473 = const _;
        _472 = const _;
        _232 = (_473, _472);
        _233 = (_232.0: &f32);
        _234 = (_232.1: &f32);
        _237 = (*_233);
        _238 = (*_234);
        _236 = Eq(move _237, move _238);
        _235 = Not(move _236);
        switchInt(move _235) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        _239 = core::panicking::AssertKind::Eq;
        _444 = const _;
        _243 = _444 as &[&str] (Pointer(Unsize));
        _246 = core::fmt::rt::Argument::<'_>::none() -> [return: bb66, unwind continue];
    }

    bb65: {
        _250 = test::black_box::<u128>(const 340282356779733661637539395458142568447_u128) -> [return: bb68, unwind continue];
    }

    bb66: {
        _245 = &_246;
        _244 = _245 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _242 = Arguments::<'_>::new_v1(move _243, move _244) -> [return: bb67, unwind continue];
    }

    bb67: {
        _241 = Option::<Arguments<'_>>::Some(move _242);
        _240 = core::panicking::assert_failed::<f32, f32>(move _239, _233, _234, move _241) -> unwind continue;
    }

    bb68: {
        _249 = move _250 as f32 (IntToFloat);
        _248 = &_249;
        _471 = const _;
        _247 = (move _248, _471);
        _251 = (_247.0: &f32);
        _252 = (_247.1: &f32);
        _255 = (*_251);
        _256 = (*_252);
        _254 = Eq(move _255, move _256);
        _253 = Not(move _254);
        switchInt(move _253) -> [0: bb72, otherwise: bb69];
    }

    bb69: {
        _257 = core::panicking::AssertKind::Eq;
        _445 = const _;
        _261 = _445 as &[&str] (Pointer(Unsize));
        _264 = core::fmt::rt::Argument::<'_>::none() -> [return: bb70, unwind continue];
    }

    bb70: {
        _263 = &_264;
        _262 = _263 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _260 = Arguments::<'_>::new_v1(move _261, move _262) -> [return: bb71, unwind continue];
    }

    bb71: {
        _259 = Option::<Arguments<'_>>::Some(move _260);
        _258 = core::panicking::assert_failed::<f32, f32>(move _257, _251, _252, move _259) -> unwind continue;
    }

    bb72: {
        _470 = const _;
        _469 = const _;
        _265 = (_470, _469);
        _266 = (_265.0: &f32);
        _267 = (_265.1: &f32);
        _270 = (*_266);
        _271 = (*_267);
        _269 = Eq(move _270, move _271);
        _268 = Not(move _269);
        switchInt(move _268) -> [0: bb74, otherwise: bb73];
    }

    bb73: {
        _272 = core::panicking::AssertKind::Eq;
        _446 = const _;
        _276 = _446 as &[&str] (Pointer(Unsize));
        _279 = core::fmt::rt::Argument::<'_>::none() -> [return: bb75, unwind continue];
    }

    bb74: {
        _283 = test::black_box::<u128>(const 340282356779733661637539395458142568448_u128) -> [return: bb77, unwind continue];
    }

    bb75: {
        _278 = &_279;
        _277 = _278 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _275 = Arguments::<'_>::new_v1(move _276, move _277) -> [return: bb76, unwind continue];
    }

    bb76: {
        _274 = Option::<Arguments<'_>>::Some(move _275);
        _273 = core::panicking::assert_failed::<f32, f32>(move _272, _266, _267, move _274) -> unwind continue;
    }

    bb77: {
        _282 = move _283 as f32 (IntToFloat);
        _281 = &_282;
        _468 = const _;
        _280 = (move _281, _468);
        _284 = (_280.0: &f32);
        _285 = (_280.1: &f32);
        _288 = (*_284);
        _289 = (*_285);
        _287 = Eq(move _288, move _289);
        _286 = Not(move _287);
        switchInt(move _286) -> [0: bb81, otherwise: bb78];
    }

    bb78: {
        _290 = core::panicking::AssertKind::Eq;
        _447 = const _;
        _294 = _447 as &[&str] (Pointer(Unsize));
        _297 = core::fmt::rt::Argument::<'_>::none() -> [return: bb79, unwind continue];
    }

    bb79: {
        _296 = &_297;
        _295 = _296 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _293 = Arguments::<'_>::new_v1(move _294, move _295) -> [return: bb80, unwind continue];
    }

    bb80: {
        _292 = Option::<Arguments<'_>>::Some(move _293);
        _291 = core::panicking::assert_failed::<f32, f32>(move _290, _284, _285, move _292) -> unwind continue;
    }

    bb81: {
        _467 = const _;
        _466 = const _;
        _298 = (_467, _466);
        _299 = (_298.0: &f32);
        _300 = (_298.1: &f32);
        _303 = (*_299);
        _304 = (*_300);
        _302 = Eq(move _303, move _304);
        _301 = Not(move _302);
        switchInt(move _301) -> [0: bb83, otherwise: bb82];
    }

    bb82: {
        _305 = core::panicking::AssertKind::Eq;
        _448 = const _;
        _309 = _448 as &[&str] (Pointer(Unsize));
        _312 = core::fmt::rt::Argument::<'_>::none() -> [return: bb84, unwind continue];
    }

    bb83: {
        _316 = test::black_box::<u128>(const 340282356779733666064757973148434956288_u128) -> [return: bb86, unwind continue];
    }

    bb84: {
        _311 = &_312;
        _310 = _311 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _308 = Arguments::<'_>::new_v1(move _309, move _310) -> [return: bb85, unwind continue];
    }

    bb85: {
        _307 = Option::<Arguments<'_>>::Some(move _308);
        _306 = core::panicking::assert_failed::<f32, f32>(move _305, _299, _300, move _307) -> unwind continue;
    }

    bb86: {
        _315 = move _316 as f32 (IntToFloat);
        _314 = &_315;
        _465 = const _;
        _313 = (move _314, _465);
        _317 = (_313.0: &f32);
        _318 = (_313.1: &f32);
        _321 = (*_317);
        _322 = (*_318);
        _320 = Eq(move _321, move _322);
        _319 = Not(move _320);
        switchInt(move _319) -> [0: bb90, otherwise: bb87];
    }

    bb87: {
        _323 = core::panicking::AssertKind::Eq;
        _449 = const _;
        _327 = _449 as &[&str] (Pointer(Unsize));
        _330 = core::fmt::rt::Argument::<'_>::none() -> [return: bb88, unwind continue];
    }

    bb88: {
        _329 = &_330;
        _328 = _329 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _326 = Arguments::<'_>::new_v1(move _327, move _328) -> [return: bb89, unwind continue];
    }

    bb89: {
        _325 = Option::<Arguments<'_>>::Some(move _326);
        _324 = core::panicking::assert_failed::<f32, f32>(move _323, _317, _318, move _325) -> unwind continue;
    }

    bb90: {
        _464 = const _;
        _463 = const _;
        _331 = (_464, _463);
        _332 = (_331.0: &f32);
        _333 = (_331.1: &f32);
        _336 = (*_332);
        _337 = (*_333);
        _335 = Eq(move _336, move _337);
        _334 = Not(move _335);
        switchInt(move _334) -> [0: bb92, otherwise: bb91];
    }

    bb91: {
        _338 = core::panicking::AssertKind::Eq;
        _450 = const _;
        _342 = _450 as &[&str] (Pointer(Unsize));
        _345 = core::fmt::rt::Argument::<'_>::none() -> [return: bb93, unwind continue];
    }

    bb92: {
        _349 = test::black_box::<u128>(const 340282357413558961751654096202199203841_u128) -> [return: bb95, unwind continue];
    }

    bb93: {
        _344 = &_345;
        _343 = _344 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _341 = Arguments::<'_>::new_v1(move _342, move _343) -> [return: bb94, unwind continue];
    }

    bb94: {
        _340 = Option::<Arguments<'_>>::Some(move _341);
        _339 = core::panicking::assert_failed::<f32, f32>(move _338, _332, _333, move _340) -> unwind continue;
    }

    bb95: {
        _348 = move _349 as f32 (IntToFloat);
        _347 = &_348;
        _462 = const _;
        _346 = (move _347, _462);
        _350 = (_346.0: &f32);
        _351 = (_346.1: &f32);
        _354 = (*_350);
        _355 = (*_351);
        _353 = Eq(move _354, move _355);
        _352 = Not(move _353);
        switchInt(move _352) -> [0: bb99, otherwise: bb96];
    }

    bb96: {
        _356 = core::panicking::AssertKind::Eq;
        _451 = const _;
        _360 = _451 as &[&str] (Pointer(Unsize));
        _363 = core::fmt::rt::Argument::<'_>::none() -> [return: bb97, unwind continue];
    }

    bb97: {
        _362 = &_363;
        _361 = _362 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _359 = Arguments::<'_>::new_v1(move _360, move _361) -> [return: bb98, unwind continue];
    }

    bb98: {
        _358 = Option::<Arguments<'_>>::Some(move _359);
        _357 = core::panicking::assert_failed::<f32, f32>(move _356, _350, _351, move _358) -> unwind continue;
    }

    bb99: {
        _461 = const _;
        _460 = const _;
        _364 = (_461, _460);
        _365 = (_364.0: &f64);
        _366 = (_364.1: &f64);
        _369 = (*_365);
        _370 = (*_366);
        _368 = Eq(move _369, move _370);
        _367 = Not(move _368);
        switchInt(move _367) -> [0: bb101, otherwise: bb100];
    }

    bb100: {
        _371 = core::panicking::AssertKind::Eq;
        _452 = const _;
        _375 = _452 as &[&str] (Pointer(Unsize));
        _378 = core::fmt::rt::Argument::<'_>::none() -> [return: bb102, unwind continue];
    }

    bb101: {
        _382 = test::black_box::<u128>(const 340282356779733661637539395458142568448_u128) -> [return: bb104, unwind continue];
    }

    bb102: {
        _377 = &_378;
        _376 = _377 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _374 = Arguments::<'_>::new_v1(move _375, move _376) -> [return: bb103, unwind continue];
    }

    bb103: {
        _373 = Option::<Arguments<'_>>::Some(move _374);
        _372 = core::panicking::assert_failed::<f64, f64>(move _371, _365, _366, move _373) -> unwind continue;
    }

    bb104: {
        _381 = move _382 as f64 (IntToFloat);
        _380 = &_381;
        _459 = const _;
        _379 = (move _380, _459);
        _383 = (_379.0: &f64);
        _384 = (_379.1: &f64);
        _387 = (*_383);
        _388 = (*_384);
        _386 = Eq(move _387, move _388);
        _385 = Not(move _386);
        switchInt(move _385) -> [0: bb108, otherwise: bb105];
    }

    bb105: {
        _389 = core::panicking::AssertKind::Eq;
        _453 = const _;
        _393 = _453 as &[&str] (Pointer(Unsize));
        _396 = core::fmt::rt::Argument::<'_>::none() -> [return: bb106, unwind continue];
    }

    bb106: {
        _395 = &_396;
        _394 = _395 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _392 = Arguments::<'_>::new_v1(move _393, move _394) -> [return: bb107, unwind continue];
    }

    bb107: {
        _391 = Option::<Arguments<'_>>::Some(move _392);
        _390 = core::panicking::assert_failed::<f64, f64>(move _389, _383, _384, move _391) -> unwind continue;
    }

    bb108: {
        _458 = const _;
        _457 = const _;
        _397 = (_458, _457);
        _398 = (_397.0: &f64);
        _399 = (_397.1: &f64);
        _402 = (*_398);
        _403 = (*_399);
        _401 = Eq(move _402, move _403);
        _400 = Not(move _401);
        switchInt(move _400) -> [0: bb110, otherwise: bb109];
    }

    bb109: {
        _404 = core::panicking::AssertKind::Eq;
        _454 = const _;
        _408 = _454 as &[&str] (Pointer(Unsize));
        _411 = core::fmt::rt::Argument::<'_>::none() -> [return: bb111, unwind continue];
    }

    bb110: {
        _415 = test::black_box::<u128>(const _) -> [return: bb113, unwind continue];
    }

    bb111: {
        _410 = &_411;
        _409 = _410 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _407 = Arguments::<'_>::new_v1(move _408, move _409) -> [return: bb112, unwind continue];
    }

    bb112: {
        _406 = Option::<Arguments<'_>>::Some(move _407);
        _405 = core::panicking::assert_failed::<f64, f64>(move _404, _398, _399, move _406) -> unwind continue;
    }

    bb113: {
        _414 = move _415 as f64 (IntToFloat);
        _413 = &_414;
        _456 = const _;
        _412 = (move _413, _456);
        _416 = (_412.0: &f64);
        _417 = (_412.1: &f64);
        _420 = (*_416);
        _421 = (*_417);
        _419 = Eq(move _420, move _421);
        _418 = Not(move _419);
        switchInt(move _418) -> [0: bb117, otherwise: bb114];
    }

    bb114: {
        _422 = core::panicking::AssertKind::Eq;
        _455 = const _;
        _426 = _455 as &[&str] (Pointer(Unsize));
        _429 = core::fmt::rt::Argument::<'_>::none() -> [return: bb115, unwind continue];
    }

    bb115: {
        _428 = &_429;
        _427 = _428 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _425 = Arguments::<'_>::new_v1(move _426, move _427) -> [return: bb116, unwind continue];
    }

    bb116: {
        _424 = Option::<Arguments<'_>>::Some(move _425);
        _423 = core::panicking::assert_failed::<f64, f64>(move _422, _416, _417, move _424) -> unwind continue;
    }

    bb117: {
        return;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "const eval u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "run-time u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "const eval u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "run-time u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "const eval u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "run-time u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "const eval u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "run-time u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "const eval u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "run-time u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "const eval u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "run-time u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "const eval u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "run-time u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "const eval u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "run-time u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "const eval u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "run-time u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "const eval u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "run-time u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "const eval u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "run-time u128 -> f32"];
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "const eval u128 -> f64"];
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "run-time u128 -> f64"];
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "const eval u128 -> f64"];
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "run-time u128 -> f64"];
        _0 = &_1;
        return;
    }
}

promoted[26] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 3.4028236692093846E+38f64;
        _0 = &_1;
        return;
    }
}

promoted[27] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 3.4028236692093846E+38f64;
        _0 = &_1;
        return;
    }
}

promoted[28] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[29] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 3.4028235677973366E+38f64;
        _0 = &_1;
        return;
    }
}

promoted[30] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 3.4028235677973366E+38f64;
        _0 = &_1;
        return;
    }
}

promoted[31] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[32] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[33] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[34] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[35] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[36] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[37] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[38] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[39] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[40] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[41] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[42] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[43] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[44] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[45] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[46] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[47] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[48] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[49] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[50] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[51] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[52] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[53] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[54] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[55] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[56] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[57] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[58] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[59] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[60] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[61] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[62] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[63] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[64] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const SECOND_LARGEST_F32: f32 = {
    let mut _0: f32;

    bb0: {
        _0 = const 3.40282326E+38f32;
        return;
    }
}

const main::X: u128 = {
    let mut _0: u128;

    bb0: {
        _0 = const 340282326356119256160033759537265639424_u128;
        return;
    }
}

const main::Y: f32 = {
    let mut _0: f32;

    bb0: {
        _0 = const _ as f32 (IntToFloat);
        return;
    }
}

const main::X: u128 = {
    let mut _0: u128;

    bb0: {
        _0 = const 340282336497324057985868971510891282431_u128;
        return;
    }
}

const main::Y: f32 = {
    let mut _0: f32;

    bb0: {
        _0 = const _ as f32 (IntToFloat);
        return;
    }
}

const main::X: u128 = {
    let mut _0: u128;

    bb0: {
        _0 = const 340282336497324057985868971510891282432_u128;
        return;
    }
}

const main::Y: f32 = {
    let mut _0: f32;

    bb0: {
        _0 = const _ as f32 (IntToFloat);
        return;
    }
}

const main::X: u128 = {
    let mut _0: u128;

    bb0: {
        _0 = const 340282336497324057985868971510891282433_u128;
        return;
    }
}

const main::Y: f32 = {
    let mut _0: f32;

    bb0: {
        _0 = const _ as f32 (IntToFloat);
        return;
    }
}

const main::X: u128 = {
    let mut _0: u128;

    bb0: {
        _0 = const 340282346638528859811704183484516925439_u128;
        return;
    }
}

const main::Y: f32 = {
    let mut _0: f32;

    bb0: {
        _0 = const _ as f32 (IntToFloat);
        return;
    }
}

const main::X: u128 = {
    let mut _0: u128;

    bb0: {
        _0 = const 340282346638528859811704183484516925440_u128;
        return;
    }
}

const main::Y: f32 = {
    let mut _0: f32;

    bb0: {
        _0 = const _ as f32 (IntToFloat);
        return;
    }
}

const main::X: u128 = {
    let mut _0: u128;

    bb0: {
        _0 = const 340282346638528859811704183484516925441_u128;
        return;
    }
}

const main::Y: f32 = {
    let mut _0: f32;

    bb0: {
        _0 = const _ as f32 (IntToFloat);
        return;
    }
}

const main::X: u128 = {
    let mut _0: u128;

    bb0: {
        _0 = const 340282356779733661637539395458142568447_u128;
        return;
    }
}

const main::Y: f32 = {
    let mut _0: f32;

    bb0: {
        _0 = const _ as f32 (IntToFloat);
        return;
    }
}

const main::X: u128 = {
    let mut _0: u128;

    bb0: {
        _0 = const 340282356779733661637539395458142568448_u128;
        return;
    }
}

const main::Y: f32 = {
    let mut _0: f32;

    bb0: {
        _0 = const _ as f32 (IntToFloat);
        return;
    }
}

const main::X: u128 = {
    let mut _0: u128;

    bb0: {
        _0 = const 340282356779733666064757973148434956288_u128;
        return;
    }
}

const main::Y: f32 = {
    let mut _0: f32;

    bb0: {
        _0 = const _ as f32 (IntToFloat);
        return;
    }
}

const main::X: u128 = {
    let mut _0: u128;

    bb0: {
        _0 = const 340282357413558961751654096202199203841_u128;
        return;
    }
}

const main::Y: f32 = {
    let mut _0: f32;

    bb0: {
        _0 = const _ as f32 (IntToFloat);
        return;
    }
}

const main::X: u128 = {
    let mut _0: u128;

    bb0: {
        _0 = const 340282356779733661637539395458142568448_u128;
        return;
    }
}

const main::Y: f64 = {
    let mut _0: f64;

    bb0: {
        _0 = const _ as f64 (IntToFloat);
        return;
    }
}

const main::X: u128 = {
    let mut _0: u128;

    bb0: {
        _0 = const _;
        return;
    }
}

const main::Y: f64 = {
    let mut _0: f64;

    bb0: {
        _0 = const _ as f64 (IntToFloat);
        return;
    }
}
