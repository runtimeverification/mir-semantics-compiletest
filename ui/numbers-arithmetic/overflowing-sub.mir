// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/overflowing-sub.rs:8:11: 8:11
    let _1: u8;                          // in scope 0 at ui/numbers-arithmetic/overflowing-sub.rs:9:9: 9:11
    let mut _2: u8;                      // in scope 0 at ui/numbers-arithmetic/overflowing-sub.rs:9:21: 9:31
    let mut _3: (u8, bool);              // in scope 0 at ui/numbers-arithmetic/overflowing-sub.rs:9:14: 9:31
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/numbers-arithmetic/overflowing-sub.rs:9:9: 9:11
    }

    bb0: {
        _2 = const 43_u8;                // scope 0 at ui/numbers-arithmetic/overflowing-sub.rs:9:21: 9:31
        _3 = CheckedSub(const 42_u8, _2); // scope 0 at ui/numbers-arithmetic/overflowing-sub.rs:9:14: 9:31
        assert(!move (_3.1: bool), "attempt to compute `{} - {}`, which would overflow", const 42_u8, move _2) -> bb1; // scope 0 at ui/numbers-arithmetic/overflowing-sub.rs:9:14: 9:31
    }

    bb1: {
        _1 = move (_3.0: u8);            // scope 0 at ui/numbers-arithmetic/overflowing-sub.rs:9:14: 9:31
        return;                          // scope 0 at ui/numbers-arithmetic/overflowing-sub.rs:10:2: 10:2
    }
}
