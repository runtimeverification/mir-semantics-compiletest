// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/numbers-arithmetic/issue-8460.rs:14:26: 14:41>::zero() -> i8 {
    let mut _0: i8;                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:15:22: 15:26

    bb0: {
        _0 = const 0_i8;                 // scope 0 at ui/numbers-arithmetic/issue-8460.rs:15:29: 15:30
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:15:32: 15:32
    }
}

fn <impl at ui/numbers-arithmetic/issue-8460.rs:14:26: 14:41>::one() -> i8 {
    let mut _0: i8;                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:16:21: 16:25

    bb0: {
        _0 = const 1_i8;                 // scope 0 at ui/numbers-arithmetic/issue-8460.rs:16:28: 16:29
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:16:31: 16:31
    }
}

fn <impl at ui/numbers-arithmetic/issue-8460.rs:14:26: 14:41>::zero() -> i16 {
    let mut _0: i16;                     // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:15:22: 15:26

    bb0: {
        _0 = const 0_i16;                // scope 0 at ui/numbers-arithmetic/issue-8460.rs:15:29: 15:30
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:15:32: 15:32
    }
}

fn <impl at ui/numbers-arithmetic/issue-8460.rs:14:26: 14:41>::one() -> i16 {
    let mut _0: i16;                     // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:16:21: 16:25

    bb0: {
        _0 = const 1_i16;                // scope 0 at ui/numbers-arithmetic/issue-8460.rs:16:28: 16:29
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:16:31: 16:31
    }
}

fn <impl at ui/numbers-arithmetic/issue-8460.rs:14:26: 14:41>::zero() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:15:22: 15:26

    bb0: {
        _0 = const 0_i32;                // scope 0 at ui/numbers-arithmetic/issue-8460.rs:15:29: 15:30
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:15:32: 15:32
    }
}

fn <impl at ui/numbers-arithmetic/issue-8460.rs:14:26: 14:41>::one() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:16:21: 16:25

    bb0: {
        _0 = const 1_i32;                // scope 0 at ui/numbers-arithmetic/issue-8460.rs:16:28: 16:29
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:16:31: 16:31
    }
}

fn <impl at ui/numbers-arithmetic/issue-8460.rs:14:26: 14:41>::zero() -> i64 {
    let mut _0: i64;                     // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:15:22: 15:26

    bb0: {
        _0 = const 0_i64;                // scope 0 at ui/numbers-arithmetic/issue-8460.rs:15:29: 15:30
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:15:32: 15:32
    }
}

fn <impl at ui/numbers-arithmetic/issue-8460.rs:14:26: 14:41>::one() -> i64 {
    let mut _0: i64;                     // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:16:21: 16:25

    bb0: {
        _0 = const 1_i64;                // scope 0 at ui/numbers-arithmetic/issue-8460.rs:16:28: 16:29
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:16:31: 16:31
    }
}

fn <impl at ui/numbers-arithmetic/issue-8460.rs:14:26: 14:41>::zero() -> isize {
    let mut _0: isize;                   // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:15:22: 15:26

    bb0: {
        _0 = const 0_isize;              // scope 0 at ui/numbers-arithmetic/issue-8460.rs:15:29: 15:30
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:15:32: 15:32
    }
}

fn <impl at ui/numbers-arithmetic/issue-8460.rs:14:26: 14:41>::one() -> isize {
    let mut _0: isize;                   // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:16:21: 16:25

    bb0: {
        _0 = const 1_isize;              // scope 0 at ui/numbers-arithmetic/issue-8460.rs:16:28: 16:29
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:16:31: 16:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:29:11: 29:11
    let mut _1: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _2: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let mut _3: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let _4: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
    let mut _5: std::thread::JoinHandle<()>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
    let mut _6: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:33: 25:10
    let mut _7: !;                       // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _8: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _9: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let mut _10: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let _11: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
    let mut _12: std::thread::JoinHandle<()>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
    let mut _13: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:33: 25:10
    let mut _14: !;                      // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _15: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _16: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let mut _17: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let _18: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
    let mut _19: std::thread::JoinHandle<()>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
    let mut _20: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:33: 25:10
    let mut _21: !;                      // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _22: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _23: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let mut _24: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let _25: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
    let mut _26: std::thread::JoinHandle<()>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
    let mut _27: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:33: 25:10
    let mut _28: !;                      // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _29: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _30: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let mut _31: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let _32: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
    let mut _33: std::thread::JoinHandle<()>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
    let mut _34: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:33: 25:10
    let mut _35: !;                      // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _36: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _37: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let mut _38: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let _39: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
    let mut _40: std::thread::JoinHandle<()>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
    let mut _41: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:33: 25:10
    let mut _42: !;                      // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _43: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _44: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let mut _45: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let _46: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
    let mut _47: std::thread::JoinHandle<()>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
    let mut _48: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:33: 25:10
    let mut _49: !;                      // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _50: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _51: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let mut _52: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let _53: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
    let mut _54: std::thread::JoinHandle<()>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
    let mut _55: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:33: 25:10
    let mut _56: !;                      // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _57: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _58: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let mut _59: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let _60: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
    let mut _61: std::thread::JoinHandle<()>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
    let mut _62: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:33: 25:10
    let mut _63: !;                      // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _64: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _65: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let mut _66: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let _67: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
    let mut _68: std::thread::JoinHandle<()>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
    let mut _69: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:33: 25:10
    let mut _70: !;                      // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _71: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _72: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let mut _73: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let _74: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
    let mut _75: std::thread::JoinHandle<()>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
    let mut _76: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:33: 25:10
    let mut _77: !;                      // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _78: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _79: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let mut _80: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let _81: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
    let mut _82: std::thread::JoinHandle<()>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
    let mut _83: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:33: 25:10
    let mut _84: !;                      // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _85: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _86: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let mut _87: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let _88: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
    let mut _89: std::thread::JoinHandle<()>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
    let mut _90: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:33: 25:10
    let mut _91: !;                      // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _92: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _93: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let mut _94: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let _95: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
    let mut _96: std::thread::JoinHandle<()>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
    let mut _97: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:33: 25:10
    let mut _98: !;                      // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _99: bool;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _100: bool;                  // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let mut _101: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let _102: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
    let mut _103: std::thread::JoinHandle<()>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
    let mut _104: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:33: 25:10
    let mut _105: !;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _106: bool;                  // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _107: bool;                  // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let mut _108: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let _109: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
    let mut _110: std::thread::JoinHandle<()>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
    let mut _111: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:33: 25:10
    let mut _112: !;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _113: bool;                  // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _114: bool;                  // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let mut _115: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let _116: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
    let mut _117: std::thread::JoinHandle<()>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
    let mut _118: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:33: 25:10
    let mut _119: !;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _120: bool;                  // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _121: bool;                  // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let mut _122: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let _123: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
    let mut _124: std::thread::JoinHandle<()>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
    let mut _125: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:33: 25:10
    let mut _126: !;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _127: bool;                  // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _128: bool;                  // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let mut _129: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let _130: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
    let mut _131: std::thread::JoinHandle<()>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
    let mut _132: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:33: 25:10
    let mut _133: !;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _134: bool;                  // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    let mut _135: bool;                  // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let mut _136: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
    let _137: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
    let mut _138: std::thread::JoinHandle<()>; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
    let mut _139: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]; // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:33: 25:10
    let mut _140: !;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28

    bb0: {
        _5 = spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>(move _6) -> bb1; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:19: 23:32
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> JoinHandle<()> {spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = JoinHandle::<()>::join(move _5) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:12: 25:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &_4;                        // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
        _2 = Result::<(), Box<dyn Any + Send>>::is_err(move _3) -> [return: bb3, unwind: bb140]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:19: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = Not(move _2);               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
        drop(_4) -> bb4;                 // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb4: {
        switchInt(move _1) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    }

    bb5: {
        _7 = core::panicking::panic(const "assertion failed: thread::spawn({ move || { isize::MIN / -isize::one(); } }).join().is_err()"); // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _12 = spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>(move _13) -> bb7; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:19: 23:32
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> JoinHandle<()> {spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = JoinHandle::<()>::join(move _12) -> bb8; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:12: 25:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb8: {
        _10 = &_11;                      // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
        _9 = Result::<(), Box<dyn Any + Send>>::is_err(move _10) -> [return: bb9, unwind: bb139]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:19: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb9: {
        _8 = Not(move _9);               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
        drop(_11) -> bb10;               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb10: {
        switchInt(move _8) -> [0: bb12, otherwise: bb11]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    }

    bb11: {
        _14 = core::panicking::panic(const "assertion failed: thread::spawn({ move || { i8::MIN / -i8::one(); } }).join().is_err()"); // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _19 = spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>(move _20) -> bb13; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:19: 23:32
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> JoinHandle<()> {spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>}, val: Value(<ZST>) }
    }

    bb13: {
        _18 = JoinHandle::<()>::join(move _19) -> bb14; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:12: 25:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb14: {
        _17 = &_18;                      // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
        _16 = Result::<(), Box<dyn Any + Send>>::is_err(move _17) -> [return: bb15, unwind: bb138]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:19: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb15: {
        _15 = Not(move _16);             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
        drop(_18) -> bb16;               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb16: {
        switchInt(move _15) -> [0: bb18, otherwise: bb17]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    }

    bb17: {
        _21 = core::panicking::panic(const "assertion failed: thread::spawn({ move || { i16::MIN / -i16::one(); } }).join().is_err()"); // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _26 = spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>(move _27) -> bb19; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:19: 23:32
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> JoinHandle<()> {spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>}, val: Value(<ZST>) }
    }

    bb19: {
        _25 = JoinHandle::<()>::join(move _26) -> bb20; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:12: 25:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb20: {
        _24 = &_25;                      // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
        _23 = Result::<(), Box<dyn Any + Send>>::is_err(move _24) -> [return: bb21, unwind: bb137]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:19: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb21: {
        _22 = Not(move _23);             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
        drop(_25) -> bb22;               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb22: {
        switchInt(move _22) -> [0: bb24, otherwise: bb23]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    }

    bb23: {
        _28 = core::panicking::panic(const "assertion failed: thread::spawn({ move || { i32::MIN / -i32::one(); } }).join().is_err()"); // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb24: {
        _33 = spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>(move _34) -> bb25; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:19: 23:32
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> JoinHandle<()> {spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>}, val: Value(<ZST>) }
    }

    bb25: {
        _32 = JoinHandle::<()>::join(move _33) -> bb26; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:12: 25:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb26: {
        _31 = &_32;                      // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
        _30 = Result::<(), Box<dyn Any + Send>>::is_err(move _31) -> [return: bb27, unwind: bb136]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:19: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb27: {
        _29 = Not(move _30);             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
        drop(_32) -> bb28;               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb28: {
        switchInt(move _29) -> [0: bb30, otherwise: bb29]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    }

    bb29: {
        _35 = core::panicking::panic(const "assertion failed: thread::spawn({ move || { i64::MIN / -i64::one(); } }).join().is_err()"); // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb30: {
        _40 = spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>(move _41) -> bb31; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:19: 23:32
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> JoinHandle<()> {spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>}, val: Value(<ZST>) }
    }

    bb31: {
        _39 = JoinHandle::<()>::join(move _40) -> bb32; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:12: 25:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb32: {
        _38 = &_39;                      // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
        _37 = Result::<(), Box<dyn Any + Send>>::is_err(move _38) -> [return: bb33, unwind: bb135]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:19: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb33: {
        _36 = Not(move _37);             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
        drop(_39) -> bb34;               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb34: {
        switchInt(move _36) -> [0: bb36, otherwise: bb35]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    }

    bb35: {
        _42 = core::panicking::panic(const "assertion failed: thread::spawn({ move || { 1isize / isize::zero(); } }).join().is_err()"); // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb36: {
        _47 = spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>(move _48) -> bb37; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:19: 23:32
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> JoinHandle<()> {spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>}, val: Value(<ZST>) }
    }

    bb37: {
        _46 = JoinHandle::<()>::join(move _47) -> bb38; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:12: 25:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb38: {
        _45 = &_46;                      // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
        _44 = Result::<(), Box<dyn Any + Send>>::is_err(move _45) -> [return: bb39, unwind: bb134]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:19: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb39: {
        _43 = Not(move _44);             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
        drop(_46) -> bb40;               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb40: {
        switchInt(move _43) -> [0: bb42, otherwise: bb41]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    }

    bb41: {
        _49 = core::panicking::panic(const "assertion failed: thread::spawn({ move || { 1i8 / i8::zero(); } }).join().is_err()"); // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb42: {
        _54 = spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>(move _55) -> bb43; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:19: 23:32
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> JoinHandle<()> {spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>}, val: Value(<ZST>) }
    }

    bb43: {
        _53 = JoinHandle::<()>::join(move _54) -> bb44; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:12: 25:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb44: {
        _52 = &_53;                      // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
        _51 = Result::<(), Box<dyn Any + Send>>::is_err(move _52) -> [return: bb45, unwind: bb133]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:19: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb45: {
        _50 = Not(move _51);             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
        drop(_53) -> bb46;               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb46: {
        switchInt(move _50) -> [0: bb48, otherwise: bb47]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    }

    bb47: {
        _56 = core::panicking::panic(const "assertion failed: thread::spawn({ move || { 1i16 / i16::zero(); } }).join().is_err()"); // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb48: {
        _61 = spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>(move _62) -> bb49; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:19: 23:32
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> JoinHandle<()> {spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>}, val: Value(<ZST>) }
    }

    bb49: {
        _60 = JoinHandle::<()>::join(move _61) -> bb50; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:12: 25:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb50: {
        _59 = &_60;                      // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
        _58 = Result::<(), Box<dyn Any + Send>>::is_err(move _59) -> [return: bb51, unwind: bb132]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:19: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb51: {
        _57 = Not(move _58);             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
        drop(_60) -> bb52;               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb52: {
        switchInt(move _57) -> [0: bb54, otherwise: bb53]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    }

    bb53: {
        _63 = core::panicking::panic(const "assertion failed: thread::spawn({ move || { 1i32 / i32::zero(); } }).join().is_err()"); // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb54: {
        _68 = spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>(move _69) -> bb55; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:19: 23:32
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> JoinHandle<()> {spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>}, val: Value(<ZST>) }
    }

    bb55: {
        _67 = JoinHandle::<()>::join(move _68) -> bb56; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:12: 25:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb56: {
        _66 = &_67;                      // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
        _65 = Result::<(), Box<dyn Any + Send>>::is_err(move _66) -> [return: bb57, unwind: bb131]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:19: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb57: {
        _64 = Not(move _65);             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
        drop(_67) -> bb58;               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb58: {
        switchInt(move _64) -> [0: bb60, otherwise: bb59]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    }

    bb59: {
        _70 = core::panicking::panic(const "assertion failed: thread::spawn({ move || { 1i64 / i64::zero(); } }).join().is_err()"); // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb60: {
        _75 = spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>(move _76) -> bb61; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:19: 23:32
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> JoinHandle<()> {spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>}, val: Value(<ZST>) }
    }

    bb61: {
        _74 = JoinHandle::<()>::join(move _75) -> bb62; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:12: 25:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb62: {
        _73 = &_74;                      // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
        _72 = Result::<(), Box<dyn Any + Send>>::is_err(move _73) -> [return: bb63, unwind: bb130]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:19: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb63: {
        _71 = Not(move _72);             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
        drop(_74) -> bb64;               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb64: {
        switchInt(move _71) -> [0: bb66, otherwise: bb65]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    }

    bb65: {
        _77 = core::panicking::panic(const "assertion failed: thread::spawn({ move || { isize::MIN % -isize::one(); } }).join().is_err()"); // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb66: {
        _82 = spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>(move _83) -> bb67; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:19: 23:32
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> JoinHandle<()> {spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>}, val: Value(<ZST>) }
    }

    bb67: {
        _81 = JoinHandle::<()>::join(move _82) -> bb68; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:12: 25:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb68: {
        _80 = &_81;                      // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
        _79 = Result::<(), Box<dyn Any + Send>>::is_err(move _80) -> [return: bb69, unwind: bb129]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:19: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb69: {
        _78 = Not(move _79);             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
        drop(_81) -> bb70;               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb70: {
        switchInt(move _78) -> [0: bb72, otherwise: bb71]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    }

    bb71: {
        _84 = core::panicking::panic(const "assertion failed: thread::spawn({ move || { i8::MIN % -i8::one(); } }).join().is_err()"); // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb72: {
        _89 = spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>(move _90) -> bb73; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:19: 23:32
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> JoinHandle<()> {spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>}, val: Value(<ZST>) }
    }

    bb73: {
        _88 = JoinHandle::<()>::join(move _89) -> bb74; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:12: 25:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb74: {
        _87 = &_88;                      // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
        _86 = Result::<(), Box<dyn Any + Send>>::is_err(move _87) -> [return: bb75, unwind: bb128]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:19: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb75: {
        _85 = Not(move _86);             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
        drop(_88) -> bb76;               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb76: {
        switchInt(move _85) -> [0: bb78, otherwise: bb77]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    }

    bb77: {
        _91 = core::panicking::panic(const "assertion failed: thread::spawn({ move || { i16::MIN % -i16::one(); } }).join().is_err()"); // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb78: {
        _96 = spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>(move _97) -> bb79; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:19: 23:32
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> JoinHandle<()> {spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>}, val: Value(<ZST>) }
    }

    bb79: {
        _95 = JoinHandle::<()>::join(move _96) -> bb80; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:12: 25:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb80: {
        _94 = &_95;                      // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
        _93 = Result::<(), Box<dyn Any + Send>>::is_err(move _94) -> [return: bb81, unwind: bb127]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:19: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb81: {
        _92 = Not(move _93);             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
        drop(_95) -> bb82;               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb82: {
        switchInt(move _92) -> [0: bb84, otherwise: bb83]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    }

    bb83: {
        _98 = core::panicking::panic(const "assertion failed: thread::spawn({ move || { i32::MIN % -i32::one(); } }).join().is_err()"); // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb84: {
        _103 = spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>(move _104) -> bb85; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:19: 23:32
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> JoinHandle<()> {spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>}, val: Value(<ZST>) }
    }

    bb85: {
        _102 = JoinHandle::<()>::join(move _103) -> bb86; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:12: 25:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb86: {
        _101 = &_102;                    // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
        _100 = Result::<(), Box<dyn Any + Send>>::is_err(move _101) -> [return: bb87, unwind: bb126]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:19: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb87: {
        _99 = Not(move _100);            // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
        drop(_102) -> bb88;              // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb88: {
        switchInt(move _99) -> [0: bb90, otherwise: bb89]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    }

    bb89: {
        _105 = core::panicking::panic(const "assertion failed: thread::spawn({ move || { i64::MIN % -i64::one(); } }).join().is_err()"); // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb90: {
        _110 = spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>(move _111) -> bb91; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:19: 23:32
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> JoinHandle<()> {spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>}, val: Value(<ZST>) }
    }

    bb91: {
        _109 = JoinHandle::<()>::join(move _110) -> bb92; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:12: 25:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb92: {
        _108 = &_109;                    // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
        _107 = Result::<(), Box<dyn Any + Send>>::is_err(move _108) -> [return: bb93, unwind: bb125]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:19: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb93: {
        _106 = Not(move _107);           // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
        drop(_109) -> bb94;              // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb94: {
        switchInt(move _106) -> [0: bb96, otherwise: bb95]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    }

    bb95: {
        _112 = core::panicking::panic(const "assertion failed: thread::spawn({ move || { 1isize % isize::zero(); } }).join().is_err()"); // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb96: {
        _117 = spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>(move _118) -> bb97; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:19: 23:32
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> JoinHandle<()> {spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>}, val: Value(<ZST>) }
    }

    bb97: {
        _116 = JoinHandle::<()>::join(move _117) -> bb98; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:12: 25:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb98: {
        _115 = &_116;                    // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
        _114 = Result::<(), Box<dyn Any + Send>>::is_err(move _115) -> [return: bb99, unwind: bb124]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:19: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb99: {
        _113 = Not(move _114);           // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
        drop(_116) -> bb100;             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb100: {
        switchInt(move _113) -> [0: bb102, otherwise: bb101]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    }

    bb101: {
        _119 = core::panicking::panic(const "assertion failed: thread::spawn({ move || { 1i8 % i8::zero(); } }).join().is_err()"); // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb102: {
        _124 = spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>(move _125) -> bb103; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:19: 23:32
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> JoinHandle<()> {spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>}, val: Value(<ZST>) }
    }

    bb103: {
        _123 = JoinHandle::<()>::join(move _124) -> bb104; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:12: 25:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb104: {
        _122 = &_123;                    // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
        _121 = Result::<(), Box<dyn Any + Send>>::is_err(move _122) -> [return: bb105, unwind: bb123]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:19: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb105: {
        _120 = Not(move _121);           // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
        drop(_123) -> bb106;             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb106: {
        switchInt(move _120) -> [0: bb108, otherwise: bb107]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    }

    bb107: {
        _126 = core::panicking::panic(const "assertion failed: thread::spawn({ move || { 1i16 % i16::zero(); } }).join().is_err()"); // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb108: {
        _131 = spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>(move _132) -> bb109; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:19: 23:32
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> JoinHandle<()> {spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>}, val: Value(<ZST>) }
    }

    bb109: {
        _130 = JoinHandle::<()>::join(move _131) -> bb110; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:12: 25:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb110: {
        _129 = &_130;                    // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
        _128 = Result::<(), Box<dyn Any + Send>>::is_err(move _129) -> [return: bb111, unwind: bb122]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:19: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb111: {
        _127 = Not(move _128);           // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
        drop(_130) -> bb112;             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb112: {
        switchInt(move _127) -> [0: bb114, otherwise: bb113]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    }

    bb113: {
        _133 = core::panicking::panic(const "assertion failed: thread::spawn({ move || { 1i32 % i32::zero(); } }).join().is_err()"); // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb114: {
        _138 = spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>(move _139) -> bb115; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:11
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:19: 23:32
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> JoinHandle<()> {spawn::<[closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19], ()>}, val: Value(<ZST>) }
    }

    bb115: {
        _137 = JoinHandle::<()>::join(move _138) -> bb116; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:18
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:12: 25:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb116: {
        _136 = &_137;                    // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
        _135 = Result::<(), Box<dyn Any + Send>>::is_err(move _136) -> [return: bb117, unwind: bb121]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:19: 25:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:25:19: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb117: {
        _134 = Not(move _135);           // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
        drop(_137) -> bb118;             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb118: {
        switchInt(move _134) -> [0: bb120, otherwise: bb119]; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
    }

    bb119: {
        _140 = core::panicking::panic(const "assertion failed: thread::spawn({ move || { 1i64 % i64::zero(); } }).join().is_err()"); // scope 0 at ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:23:11: 25:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb120: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:52:2: 52:2
    }

    bb121 (cleanup): {
        drop(_137) -> bb141;             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb122 (cleanup): {
        drop(_130) -> bb141;             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb123 (cleanup): {
        drop(_123) -> bb141;             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb124 (cleanup): {
        drop(_116) -> bb141;             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb125 (cleanup): {
        drop(_109) -> bb141;             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb126 (cleanup): {
        drop(_102) -> bb141;             // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb127 (cleanup): {
        drop(_95) -> bb141;              // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb128 (cleanup): {
        drop(_88) -> bb141;              // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb129 (cleanup): {
        drop(_81) -> bb141;              // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb130 (cleanup): {
        drop(_74) -> bb141;              // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb131 (cleanup): {
        drop(_67) -> bb141;              // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb132 (cleanup): {
        drop(_60) -> bb141;              // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb133 (cleanup): {
        drop(_53) -> bb141;              // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb134 (cleanup): {
        drop(_46) -> bb141;              // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb135 (cleanup): {
        drop(_39) -> bb141;              // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb136 (cleanup): {
        drop(_32) -> bb141;              // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb137 (cleanup): {
        drop(_25) -> bb141;              // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb138 (cleanup): {
        drop(_18) -> bb141;              // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb139 (cleanup): {
        drop(_11) -> bb141;              // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb140 (cleanup): {
        drop(_4) -> bb141;               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:25:27: 25:28
    }

    bb141 (cleanup): {
        resume;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:29:1: 52:2
    }
}

fn main::{closure#0}(_1: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:20: 24:20
    let mut _2: isize;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:31:22: 31:35
    let mut _3: isize;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:31:23: 31:35
    let mut _4: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:31:22: 31:35
    let mut _5: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:31:9: 31:35
    let mut _6: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:31:9: 31:35
    let mut _7: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:31:9: 31:35
    let mut _8: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:31:9: 31:35

    bb0: {
        _3 = <isize as Int>::one() -> bb1; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:31:23: 31:35
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:31:23: 31:33
                                         // + literal: Const { ty: fn() -> isize {<isize as Int>::one}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Eq(_3, const isize::MIN);   // scope 0 at ui/numbers-arithmetic/issue-8460.rs:31:22: 31:35
        assert(!move _4, "attempt to negate `{}`, which would overflow", _3) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:31:22: 31:35
    }

    bb2: {
        _2 = Neg(move _3);               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:31:22: 31:35
        _5 = Eq(_2, const 0_isize);      // scope 0 at ui/numbers-arithmetic/issue-8460.rs:31:9: 31:35
        assert(!move _5, "attempt to divide `{}` by zero", const _) -> bb3; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:31:9: 31:35
    }

    bb3: {
        _6 = Eq(_2, const -1_isize);     // scope 0 at ui/numbers-arithmetic/issue-8460.rs:31:9: 31:35
        _7 = const true;                 // scope 0 at ui/numbers-arithmetic/issue-8460.rs:31:9: 31:35
        _8 = BitAnd(move _6, move _7);   // scope 0 at ui/numbers-arithmetic/issue-8460.rs:31:9: 31:35
        assert(!move _8, "attempt to compute `{} / {}`, which would overflow", const _, _2) -> bb4; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:31:9: 31:35
    }

    bb4: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:27: 24:27
    }
}

fn main::{closure#1}(_1: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:20: 24:20
    let mut _2: i8;                      // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:32:19: 32:29
    let mut _3: i8;                      // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:32:20: 32:29
    let mut _4: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:32:19: 32:29
    let mut _5: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:32:9: 32:29
    let mut _6: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:32:9: 32:29
    let mut _7: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:32:9: 32:29
    let mut _8: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:32:9: 32:29

    bb0: {
        _3 = <i8 as Int>::one() -> bb1;  // scope 0 at ui/numbers-arithmetic/issue-8460.rs:32:20: 32:29
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:32:20: 32:27
                                         // + literal: Const { ty: fn() -> i8 {<i8 as Int>::one}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Eq(_3, const i8::MIN);      // scope 0 at ui/numbers-arithmetic/issue-8460.rs:32:19: 32:29
        assert(!move _4, "attempt to negate `{}`, which would overflow", _3) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:32:19: 32:29
    }

    bb2: {
        _2 = Neg(move _3);               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:32:19: 32:29
        _5 = Eq(_2, const 0_i8);         // scope 0 at ui/numbers-arithmetic/issue-8460.rs:32:9: 32:29
        assert(!move _5, "attempt to divide `{}` by zero", const _) -> bb3; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:32:9: 32:29
    }

    bb3: {
        _6 = Eq(_2, const -1_i8);        // scope 0 at ui/numbers-arithmetic/issue-8460.rs:32:9: 32:29
        _7 = const true;                 // scope 0 at ui/numbers-arithmetic/issue-8460.rs:32:9: 32:29
        _8 = BitAnd(move _6, move _7);   // scope 0 at ui/numbers-arithmetic/issue-8460.rs:32:9: 32:29
        assert(!move _8, "attempt to compute `{} / {}`, which would overflow", const _, _2) -> bb4; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:32:9: 32:29
    }

    bb4: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:27: 24:27
    }
}

fn main::{closure#2}(_1: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:20: 24:20
    let mut _2: i16;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:33:20: 33:31
    let mut _3: i16;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:33:21: 33:31
    let mut _4: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:33:20: 33:31
    let mut _5: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:33:9: 33:31
    let mut _6: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:33:9: 33:31
    let mut _7: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:33:9: 33:31
    let mut _8: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:33:9: 33:31

    bb0: {
        _3 = <i16 as Int>::one() -> bb1; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:33:21: 33:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:33:21: 33:29
                                         // + literal: Const { ty: fn() -> i16 {<i16 as Int>::one}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Eq(_3, const i16::MIN);     // scope 0 at ui/numbers-arithmetic/issue-8460.rs:33:20: 33:31
        assert(!move _4, "attempt to negate `{}`, which would overflow", _3) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:33:20: 33:31
    }

    bb2: {
        _2 = Neg(move _3);               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:33:20: 33:31
        _5 = Eq(_2, const 0_i16);        // scope 0 at ui/numbers-arithmetic/issue-8460.rs:33:9: 33:31
        assert(!move _5, "attempt to divide `{}` by zero", const _) -> bb3; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:33:9: 33:31
    }

    bb3: {
        _6 = Eq(_2, const -1_i16);       // scope 0 at ui/numbers-arithmetic/issue-8460.rs:33:9: 33:31
        _7 = const true;                 // scope 0 at ui/numbers-arithmetic/issue-8460.rs:33:9: 33:31
        _8 = BitAnd(move _6, move _7);   // scope 0 at ui/numbers-arithmetic/issue-8460.rs:33:9: 33:31
        assert(!move _8, "attempt to compute `{} / {}`, which would overflow", const _, _2) -> bb4; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:33:9: 33:31
    }

    bb4: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:27: 24:27
    }
}

fn main::{closure#3}(_1: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:20: 24:20
    let mut _2: i32;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:34:20: 34:31
    let mut _3: i32;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:34:21: 34:31
    let mut _4: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:34:20: 34:31
    let mut _5: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:34:9: 34:31
    let mut _6: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:34:9: 34:31
    let mut _7: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:34:9: 34:31
    let mut _8: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:34:9: 34:31

    bb0: {
        _3 = <i32 as Int>::one() -> bb1; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:34:21: 34:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:34:21: 34:29
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Int>::one}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Eq(_3, const i32::MIN);     // scope 0 at ui/numbers-arithmetic/issue-8460.rs:34:20: 34:31
        assert(!move _4, "attempt to negate `{}`, which would overflow", _3) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:34:20: 34:31
    }

    bb2: {
        _2 = Neg(move _3);               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:34:20: 34:31
        _5 = Eq(_2, const 0_i32);        // scope 0 at ui/numbers-arithmetic/issue-8460.rs:34:9: 34:31
        assert(!move _5, "attempt to divide `{}` by zero", const _) -> bb3; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:34:9: 34:31
    }

    bb3: {
        _6 = Eq(_2, const -1_i32);       // scope 0 at ui/numbers-arithmetic/issue-8460.rs:34:9: 34:31
        _7 = const true;                 // scope 0 at ui/numbers-arithmetic/issue-8460.rs:34:9: 34:31
        _8 = BitAnd(move _6, move _7);   // scope 0 at ui/numbers-arithmetic/issue-8460.rs:34:9: 34:31
        assert(!move _8, "attempt to compute `{} / {}`, which would overflow", const _, _2) -> bb4; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:34:9: 34:31
    }

    bb4: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:27: 24:27
    }
}

fn main::{closure#4}(_1: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:20: 24:20
    let mut _2: i64;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:35:20: 35:31
    let mut _3: i64;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:35:21: 35:31
    let mut _4: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:35:20: 35:31
    let mut _5: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:35:9: 35:31
    let mut _6: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:35:9: 35:31
    let mut _7: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:35:9: 35:31
    let mut _8: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:35:9: 35:31

    bb0: {
        _3 = <i64 as Int>::one() -> bb1; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:35:21: 35:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:35:21: 35:29
                                         // + literal: Const { ty: fn() -> i64 {<i64 as Int>::one}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Eq(_3, const i64::MIN);     // scope 0 at ui/numbers-arithmetic/issue-8460.rs:35:20: 35:31
        assert(!move _4, "attempt to negate `{}`, which would overflow", _3) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:35:20: 35:31
    }

    bb2: {
        _2 = Neg(move _3);               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:35:20: 35:31
        _5 = Eq(_2, const 0_i64);        // scope 0 at ui/numbers-arithmetic/issue-8460.rs:35:9: 35:31
        assert(!move _5, "attempt to divide `{}` by zero", const _) -> bb3; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:35:9: 35:31
    }

    bb3: {
        _6 = Eq(_2, const -1_i64);       // scope 0 at ui/numbers-arithmetic/issue-8460.rs:35:9: 35:31
        _7 = const true;                 // scope 0 at ui/numbers-arithmetic/issue-8460.rs:35:9: 35:31
        _8 = BitAnd(move _6, move _7);   // scope 0 at ui/numbers-arithmetic/issue-8460.rs:35:9: 35:31
        assert(!move _8, "attempt to compute `{} / {}`, which would overflow", const _, _2) -> bb4; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:35:9: 35:31
    }

    bb4: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:27: 24:27
    }
}

fn main::{closure#5}(_1: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:20: 24:20
    let mut _2: isize;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:36:18: 36:31
    let mut _3: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:36:9: 36:31

    bb0: {
        _2 = <isize as Int>::zero() -> bb1; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:36:18: 36:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:36:18: 36:29
                                         // + literal: Const { ty: fn() -> isize {<isize as Int>::zero}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Eq(_2, const 0_isize);      // scope 0 at ui/numbers-arithmetic/issue-8460.rs:36:9: 36:31
        assert(!move _3, "attempt to divide `{}` by zero", const 1_isize) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:36:9: 36:31
    }

    bb2: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:27: 24:27
    }
}

fn main::{closure#6}(_1: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:20: 24:20
    let mut _2: i8;                      // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:37:15: 37:25
    let mut _3: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:37:9: 37:25

    bb0: {
        _2 = <i8 as Int>::zero() -> bb1; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:37:15: 37:25
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:37:15: 37:23
                                         // + literal: Const { ty: fn() -> i8 {<i8 as Int>::zero}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Eq(_2, const 0_i8);         // scope 0 at ui/numbers-arithmetic/issue-8460.rs:37:9: 37:25
        assert(!move _3, "attempt to divide `{}` by zero", const 1_i8) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:37:9: 37:25
    }

    bb2: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:27: 24:27
    }
}

fn main::{closure#7}(_1: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:20: 24:20
    let mut _2: i16;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:38:16: 38:27
    let mut _3: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:38:9: 38:27

    bb0: {
        _2 = <i16 as Int>::zero() -> bb1; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:38:16: 38:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:38:16: 38:25
                                         // + literal: Const { ty: fn() -> i16 {<i16 as Int>::zero}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Eq(_2, const 0_i16);        // scope 0 at ui/numbers-arithmetic/issue-8460.rs:38:9: 38:27
        assert(!move _3, "attempt to divide `{}` by zero", const 1_i16) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:38:9: 38:27
    }

    bb2: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:27: 24:27
    }
}

fn main::{closure#8}(_1: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:20: 24:20
    let mut _2: i32;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:39:16: 39:27
    let mut _3: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:39:9: 39:27

    bb0: {
        _2 = <i32 as Int>::zero() -> bb1; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:39:16: 39:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:39:16: 39:25
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Int>::zero}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Eq(_2, const 0_i32);        // scope 0 at ui/numbers-arithmetic/issue-8460.rs:39:9: 39:27
        assert(!move _3, "attempt to divide `{}` by zero", const 1_i32) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:39:9: 39:27
    }

    bb2: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:27: 24:27
    }
}

fn main::{closure#9}(_1: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:20: 24:20
    let mut _2: i64;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:40:16: 40:27
    let mut _3: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:40:9: 40:27

    bb0: {
        _2 = <i64 as Int>::zero() -> bb1; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:40:16: 40:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:40:16: 40:25
                                         // + literal: Const { ty: fn() -> i64 {<i64 as Int>::zero}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Eq(_2, const 0_i64);        // scope 0 at ui/numbers-arithmetic/issue-8460.rs:40:9: 40:27
        assert(!move _3, "attempt to divide `{}` by zero", const 1_i64) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:40:9: 40:27
    }

    bb2: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:27: 24:27
    }
}

fn main::{closure#10}(_1: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:20: 24:20
    let mut _2: isize;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:41:22: 41:35
    let mut _3: isize;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:41:23: 41:35
    let mut _4: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:41:22: 41:35
    let mut _5: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:41:9: 41:35
    let mut _6: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:41:9: 41:35
    let mut _7: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:41:9: 41:35
    let mut _8: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:41:9: 41:35

    bb0: {
        _3 = <isize as Int>::one() -> bb1; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:41:23: 41:35
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:41:23: 41:33
                                         // + literal: Const { ty: fn() -> isize {<isize as Int>::one}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Eq(_3, const isize::MIN);   // scope 0 at ui/numbers-arithmetic/issue-8460.rs:41:22: 41:35
        assert(!move _4, "attempt to negate `{}`, which would overflow", _3) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:41:22: 41:35
    }

    bb2: {
        _2 = Neg(move _3);               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:41:22: 41:35
        _5 = Eq(_2, const 0_isize);      // scope 0 at ui/numbers-arithmetic/issue-8460.rs:41:9: 41:35
        assert(!move _5, "attempt to calculate the remainder of `{}` with a divisor of zero", const _) -> bb3; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:41:9: 41:35
    }

    bb3: {
        _6 = Eq(_2, const -1_isize);     // scope 0 at ui/numbers-arithmetic/issue-8460.rs:41:9: 41:35
        _7 = const true;                 // scope 0 at ui/numbers-arithmetic/issue-8460.rs:41:9: 41:35
        _8 = BitAnd(move _6, move _7);   // scope 0 at ui/numbers-arithmetic/issue-8460.rs:41:9: 41:35
        assert(!move _8, "attempt to compute the remainder of `{} % {}`, which would overflow", const _, _2) -> bb4; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:41:9: 41:35
    }

    bb4: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:27: 24:27
    }
}

fn main::{closure#11}(_1: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:20: 24:20
    let mut _2: i8;                      // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:42:19: 42:29
    let mut _3: i8;                      // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:42:20: 42:29
    let mut _4: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:42:19: 42:29
    let mut _5: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:42:9: 42:29
    let mut _6: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:42:9: 42:29
    let mut _7: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:42:9: 42:29
    let mut _8: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:42:9: 42:29

    bb0: {
        _3 = <i8 as Int>::one() -> bb1;  // scope 0 at ui/numbers-arithmetic/issue-8460.rs:42:20: 42:29
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:42:20: 42:27
                                         // + literal: Const { ty: fn() -> i8 {<i8 as Int>::one}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Eq(_3, const i8::MIN);      // scope 0 at ui/numbers-arithmetic/issue-8460.rs:42:19: 42:29
        assert(!move _4, "attempt to negate `{}`, which would overflow", _3) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:42:19: 42:29
    }

    bb2: {
        _2 = Neg(move _3);               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:42:19: 42:29
        _5 = Eq(_2, const 0_i8);         // scope 0 at ui/numbers-arithmetic/issue-8460.rs:42:9: 42:29
        assert(!move _5, "attempt to calculate the remainder of `{}` with a divisor of zero", const _) -> bb3; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:42:9: 42:29
    }

    bb3: {
        _6 = Eq(_2, const -1_i8);        // scope 0 at ui/numbers-arithmetic/issue-8460.rs:42:9: 42:29
        _7 = const true;                 // scope 0 at ui/numbers-arithmetic/issue-8460.rs:42:9: 42:29
        _8 = BitAnd(move _6, move _7);   // scope 0 at ui/numbers-arithmetic/issue-8460.rs:42:9: 42:29
        assert(!move _8, "attempt to compute the remainder of `{} % {}`, which would overflow", const _, _2) -> bb4; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:42:9: 42:29
    }

    bb4: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:27: 24:27
    }
}

fn main::{closure#12}(_1: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:20: 24:20
    let mut _2: i16;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:43:20: 43:31
    let mut _3: i16;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:43:21: 43:31
    let mut _4: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:43:20: 43:31
    let mut _5: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:43:9: 43:31
    let mut _6: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:43:9: 43:31
    let mut _7: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:43:9: 43:31
    let mut _8: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:43:9: 43:31

    bb0: {
        _3 = <i16 as Int>::one() -> bb1; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:43:21: 43:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:43:21: 43:29
                                         // + literal: Const { ty: fn() -> i16 {<i16 as Int>::one}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Eq(_3, const i16::MIN);     // scope 0 at ui/numbers-arithmetic/issue-8460.rs:43:20: 43:31
        assert(!move _4, "attempt to negate `{}`, which would overflow", _3) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:43:20: 43:31
    }

    bb2: {
        _2 = Neg(move _3);               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:43:20: 43:31
        _5 = Eq(_2, const 0_i16);        // scope 0 at ui/numbers-arithmetic/issue-8460.rs:43:9: 43:31
        assert(!move _5, "attempt to calculate the remainder of `{}` with a divisor of zero", const _) -> bb3; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:43:9: 43:31
    }

    bb3: {
        _6 = Eq(_2, const -1_i16);       // scope 0 at ui/numbers-arithmetic/issue-8460.rs:43:9: 43:31
        _7 = const true;                 // scope 0 at ui/numbers-arithmetic/issue-8460.rs:43:9: 43:31
        _8 = BitAnd(move _6, move _7);   // scope 0 at ui/numbers-arithmetic/issue-8460.rs:43:9: 43:31
        assert(!move _8, "attempt to compute the remainder of `{} % {}`, which would overflow", const _, _2) -> bb4; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:43:9: 43:31
    }

    bb4: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:27: 24:27
    }
}

fn main::{closure#13}(_1: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:20: 24:20
    let mut _2: i32;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:44:20: 44:31
    let mut _3: i32;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:44:21: 44:31
    let mut _4: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:44:20: 44:31
    let mut _5: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:44:9: 44:31
    let mut _6: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:44:9: 44:31
    let mut _7: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:44:9: 44:31
    let mut _8: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:44:9: 44:31

    bb0: {
        _3 = <i32 as Int>::one() -> bb1; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:44:21: 44:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:44:21: 44:29
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Int>::one}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Eq(_3, const i32::MIN);     // scope 0 at ui/numbers-arithmetic/issue-8460.rs:44:20: 44:31
        assert(!move _4, "attempt to negate `{}`, which would overflow", _3) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:44:20: 44:31
    }

    bb2: {
        _2 = Neg(move _3);               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:44:20: 44:31
        _5 = Eq(_2, const 0_i32);        // scope 0 at ui/numbers-arithmetic/issue-8460.rs:44:9: 44:31
        assert(!move _5, "attempt to calculate the remainder of `{}` with a divisor of zero", const _) -> bb3; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:44:9: 44:31
    }

    bb3: {
        _6 = Eq(_2, const -1_i32);       // scope 0 at ui/numbers-arithmetic/issue-8460.rs:44:9: 44:31
        _7 = const true;                 // scope 0 at ui/numbers-arithmetic/issue-8460.rs:44:9: 44:31
        _8 = BitAnd(move _6, move _7);   // scope 0 at ui/numbers-arithmetic/issue-8460.rs:44:9: 44:31
        assert(!move _8, "attempt to compute the remainder of `{} % {}`, which would overflow", const _, _2) -> bb4; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:44:9: 44:31
    }

    bb4: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:27: 24:27
    }
}

fn main::{closure#14}(_1: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:20: 24:20
    let mut _2: i64;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:45:20: 45:31
    let mut _3: i64;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:45:21: 45:31
    let mut _4: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:45:20: 45:31
    let mut _5: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:45:9: 45:31
    let mut _6: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:45:9: 45:31
    let mut _7: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:45:9: 45:31
    let mut _8: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:45:9: 45:31

    bb0: {
        _3 = <i64 as Int>::one() -> bb1; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:45:21: 45:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:45:21: 45:29
                                         // + literal: Const { ty: fn() -> i64 {<i64 as Int>::one}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Eq(_3, const i64::MIN);     // scope 0 at ui/numbers-arithmetic/issue-8460.rs:45:20: 45:31
        assert(!move _4, "attempt to negate `{}`, which would overflow", _3) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:45:20: 45:31
    }

    bb2: {
        _2 = Neg(move _3);               // scope 0 at ui/numbers-arithmetic/issue-8460.rs:45:20: 45:31
        _5 = Eq(_2, const 0_i64);        // scope 0 at ui/numbers-arithmetic/issue-8460.rs:45:9: 45:31
        assert(!move _5, "attempt to calculate the remainder of `{}` with a divisor of zero", const _) -> bb3; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:45:9: 45:31
    }

    bb3: {
        _6 = Eq(_2, const -1_i64);       // scope 0 at ui/numbers-arithmetic/issue-8460.rs:45:9: 45:31
        _7 = const true;                 // scope 0 at ui/numbers-arithmetic/issue-8460.rs:45:9: 45:31
        _8 = BitAnd(move _6, move _7);   // scope 0 at ui/numbers-arithmetic/issue-8460.rs:45:9: 45:31
        assert(!move _8, "attempt to compute the remainder of `{} % {}`, which would overflow", const _, _2) -> bb4; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:45:9: 45:31
    }

    bb4: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:27: 24:27
    }
}

fn main::{closure#15}(_1: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:20: 24:20
    let mut _2: isize;                   // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:46:18: 46:31
    let mut _3: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:46:9: 46:31

    bb0: {
        _2 = <isize as Int>::zero() -> bb1; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:46:18: 46:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:46:18: 46:29
                                         // + literal: Const { ty: fn() -> isize {<isize as Int>::zero}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Eq(_2, const 0_isize);      // scope 0 at ui/numbers-arithmetic/issue-8460.rs:46:9: 46:31
        assert(!move _3, "attempt to calculate the remainder of `{}` with a divisor of zero", const 1_isize) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:46:9: 46:31
    }

    bb2: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:27: 24:27
    }
}

fn main::{closure#16}(_1: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:20: 24:20
    let mut _2: i8;                      // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:47:15: 47:25
    let mut _3: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:47:9: 47:25

    bb0: {
        _2 = <i8 as Int>::zero() -> bb1; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:47:15: 47:25
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:47:15: 47:23
                                         // + literal: Const { ty: fn() -> i8 {<i8 as Int>::zero}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Eq(_2, const 0_i8);         // scope 0 at ui/numbers-arithmetic/issue-8460.rs:47:9: 47:25
        assert(!move _3, "attempt to calculate the remainder of `{}` with a divisor of zero", const 1_i8) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:47:9: 47:25
    }

    bb2: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:27: 24:27
    }
}

fn main::{closure#17}(_1: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:20: 24:20
    let mut _2: i16;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:48:16: 48:27
    let mut _3: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:48:9: 48:27

    bb0: {
        _2 = <i16 as Int>::zero() -> bb1; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:48:16: 48:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:48:16: 48:25
                                         // + literal: Const { ty: fn() -> i16 {<i16 as Int>::zero}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Eq(_2, const 0_i16);        // scope 0 at ui/numbers-arithmetic/issue-8460.rs:48:9: 48:27
        assert(!move _3, "attempt to calculate the remainder of `{}` with a divisor of zero", const 1_i16) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:48:9: 48:27
    }

    bb2: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:27: 24:27
    }
}

fn main::{closure#18}(_1: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:20: 24:20
    let mut _2: i32;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:49:16: 49:27
    let mut _3: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:49:9: 49:27

    bb0: {
        _2 = <i32 as Int>::zero() -> bb1; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:49:16: 49:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:49:16: 49:25
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Int>::zero}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Eq(_2, const 0_i32);        // scope 0 at ui/numbers-arithmetic/issue-8460.rs:49:9: 49:27
        assert(!move _3, "attempt to calculate the remainder of `{}` with a divisor of zero", const 1_i32) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:49:9: 49:27
    }

    bb2: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:27: 24:27
    }
}

fn main::{closure#19}(_1: [closure@ui/numbers-arithmetic/issue-8460.rs:24:13: 24:19]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:20: 24:20
    let mut _2: i64;                     // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:50:16: 50:27
    let mut _3: bool;                    // in scope 0 at ui/numbers-arithmetic/issue-8460.rs:50:9: 50:27

    bb0: {
        _2 = <i64 as Int>::zero() -> bb1; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:50:16: 50:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/issue-8460.rs:50:16: 50:25
                                         // + literal: Const { ty: fn() -> i64 {<i64 as Int>::zero}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Eq(_2, const 0_i64);        // scope 0 at ui/numbers-arithmetic/issue-8460.rs:50:9: 50:27
        assert(!move _3, "attempt to calculate the remainder of `{}` with a divisor of zero", const 1_i64) -> bb2; // scope 0 at ui/numbers-arithmetic/issue-8460.rs:50:9: 50:27
    }

    bb2: {
        return;                          // scope 0 at ui/numbers-arithmetic/issue-8460.rs:24:27: 24:27
    }
}
