// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: u128;
    let mut _2: (&u128, &u128);
    let mut _3: &u128;
    let _4: u128;
    let mut _5: u128;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u128;
    let mut _11: u128;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&u128, &u128);
    let mut _16: &u128;
    let _17: u128;
    let mut _18: u128;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: u128;
    let mut _24: u128;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&u128, &u128);
    let mut _30: &u128;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: u128;
    let mut _36: u128;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&u128, &u128);
    let mut _41: &u128;
    let mut _42: &u128;
    let _43: u128;
    let mut _44: u128;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: u128;
    let mut _50: u128;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _54: (&u128, &u128);
    let mut _55: &u128;
    let _56: u128;
    let mut _57: u128;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: u128;
    let mut _63: u128;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _68: (&u128, &u128);
    let mut _69: &u128;
    let _70: u128;
    let mut _71: u128;
    let mut _72: u128;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: u128;
    let mut _78: u128;
    let _80: !;
    let mut _81: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _82: (&u128, &u128);
    let mut _83: &u128;
    let _84: u128;
    let mut _85: u128;
    let mut _86: u128;
    let mut _87: u128;
    let mut _88: u128;
    let mut _89: u128;
    let mut _90: u128;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: u128;
    let mut _96: u128;
    let _98: !;
    let mut _99: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _100: (&u128, &u128);
    let mut _101: &u128;
    let _102: u128;
    let mut _103: u128;
    let mut _104: u128;
    let mut _105: u128;
    let mut _106: u128;
    let mut _107: u128;
    let mut _108: u128;
    let mut _111: bool;
    let mut _112: bool;
    let mut _113: u128;
    let mut _114: u128;
    let _116: !;
    let mut _117: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _119: (&u128, &u128);
    let mut _120: &u128;
    let _121: u128;
    let mut _124: bool;
    let mut _125: bool;
    let mut _126: u128;
    let mut _127: u128;
    let _129: !;
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _131: (&u128, &u128);
    let mut _132: &u128;
    let _133: u128;
    let mut _136: bool;
    let mut _137: bool;
    let mut _138: u128;
    let mut _139: u128;
    let _141: !;
    let mut _142: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _143: (&u128, &u128);
    let mut _144: &u128;
    let _145: u128;
    let mut _146: u128;
    let mut _149: bool;
    let mut _150: bool;
    let mut _151: u128;
    let mut _152: u128;
    let _154: !;
    let mut _155: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _156: (&u128, &u128);
    let mut _157: &u128;
    let _158: u128;
    let mut _161: bool;
    let mut _162: bool;
    let mut _163: u128;
    let mut _164: u128;
    let _166: !;
    let mut _167: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _168: (&u128, &u128);
    let mut _169: &u128;
    let _170: u128;
    let mut _171: bool;
    let mut _174: bool;
    let mut _175: bool;
    let mut _176: u128;
    let mut _177: u128;
    let _179: !;
    let mut _180: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _181: (&u128, &u128);
    let mut _182: &u128;
    let _183: u128;
    let mut _184: bool;
    let mut _187: bool;
    let mut _188: bool;
    let mut _189: u128;
    let mut _190: u128;
    let _192: !;
    let mut _193: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _194: (&u128, &u128);
    let mut _195: &u128;
    let _196: u128;
    let mut _197: u128;
    let mut _198: bool;
    let mut _201: bool;
    let mut _202: bool;
    let mut _203: u128;
    let mut _204: u128;
    let _206: !;
    let mut _207: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _208: (&u128, &u128);
    let mut _209: &u128;
    let _210: u128;
    let mut _211: bool;
    let mut _214: bool;
    let mut _215: bool;
    let mut _216: u128;
    let mut _217: u128;
    let _219: !;
    let mut _220: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _221: (&u128, &u128);
    let mut _222: &u128;
    let _223: u128;
    let mut _226: bool;
    let mut _227: bool;
    let mut _228: u128;
    let mut _229: u128;
    let _231: !;
    let mut _232: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _233: (&u128, &u128);
    let mut _234: &u128;
    let _235: u128;
    let mut _238: bool;
    let mut _239: bool;
    let mut _240: u128;
    let mut _241: u128;
    let _243: !;
    let mut _244: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _245: bool;
    let mut _246: bool;
    let mut _247: u128;
    let mut _248: !;
    let mut _249: bool;
    let mut _250: bool;
    let mut _251: u128;
    let mut _252: !;
    let mut _253: bool;
    let mut _254: bool;
    let mut _255: u128;
    let mut _256: u128;
    let mut _257: !;
    let mut _258: (&u64, &u64);
    let mut _259: &u64;
    let _260: u64;
    let mut _261: u128;
    let mut _264: bool;
    let mut _265: bool;
    let mut _266: u64;
    let mut _267: u64;
    let _269: !;
    let mut _270: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _271: (&u64, &u64);
    let mut _272: &u64;
    let _273: u64;
    let mut _274: u128;
    let mut _277: bool;
    let mut _278: bool;
    let mut _279: u64;
    let mut _280: u64;
    let _282: !;
    let mut _283: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _284: (&u64, &u64);
    let mut _285: &u64;
    let _286: u64;
    let mut _289: bool;
    let mut _290: bool;
    let mut _291: u64;
    let mut _292: u64;
    let _294: !;
    let mut _295: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _296: (&i128, &i128);
    let mut _297: &i128;
    let _298: i128;
    let mut _301: bool;
    let mut _302: bool;
    let mut _303: i128;
    let mut _304: i128;
    let _306: !;
    let mut _307: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _308: (&u128, &u128);
    let mut _309: &u128;
    let _310: u128;
    let mut _311: f64;
    let mut _312: u128;
    let mut _313: &u128;
    let mut _316: bool;
    let mut _317: bool;
    let mut _318: u128;
    let mut _319: u128;
    let _321: !;
    let mut _322: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _323: (&u128, &u128);
    let mut _324: &u128;
    let _325: u128;
    let mut _326: f32;
    let mut _327: u128;
    let mut _328: &u128;
    let mut _331: bool;
    let mut _332: bool;
    let mut _333: u128;
    let mut _334: u128;
    let _336: !;
    let mut _337: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _338: (&u128, &u128);
    let mut _339: &u128;
    let _340: u128;
    let mut _341: f64;
    let mut _342: f64;
    let mut _343: u128;
    let mut _344: &u128;
    let _345: u128;
    let mut _346: u128;
    let mut _349: bool;
    let mut _350: bool;
    let mut _351: u128;
    let mut _352: u128;
    let _354: !;
    let mut _355: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _356: (&u128, &u128);
    let mut _357: &u128;
    let _358: u128;
    let mut _359: f32;
    let mut _360: f32;
    let mut _361: u128;
    let mut _362: &u128;
    let _363: u128;
    let mut _364: u128;
    let mut _367: bool;
    let mut _368: bool;
    let mut _369: u128;
    let mut _370: u128;
    let _372: !;
    let mut _373: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _375: (&u128, &u128);
    let mut _376: &u128;
    let _377: u128;
    let mut _378: f32;
    let mut _379: u128;
    let mut _380: &u128;
    let mut _383: bool;
    let mut _384: bool;
    let mut _385: u128;
    let mut _386: u128;
    let _388: !;
    let mut _389: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _390: (&u128, &u128);
    let mut _391: &u128;
    let _392: u128;
    let mut _393: f64;
    let mut _394: u128;
    let mut _395: &u128;
    let mut _398: bool;
    let mut _399: bool;
    let mut _400: u128;
    let mut _401: u128;
    let _403: !;
    let mut _404: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _406: (&&str, &std::string::String);
    let mut _407: &std::string::String;
    let _408: std::string::String;
    let mut _410: std::fmt::Arguments<'_>;
    let mut _411: &[&str];
    let mut _412: &[core::fmt::rt::Argument<'_>];
    let _413: &[core::fmt::rt::Argument<'_>; 1];
    let _414: [core::fmt::rt::Argument<'_>; 1];
    let mut _415: core::fmt::rt::Argument<'_>;
    let _416: &u128;
    let mut _419: bool;
    let mut _420: bool;
    let _422: !;
    let mut _423: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _424: (&&str, &std::string::String);
    let mut _425: &std::string::String;
    let _426: std::string::String;
    let mut _428: std::fmt::Arguments<'_>;
    let mut _429: &[&str];
    let mut _430: &[core::fmt::rt::Argument<'_>];
    let _431: &[core::fmt::rt::Argument<'_>; 1];
    let _432: [core::fmt::rt::Argument<'_>; 1];
    let mut _433: core::fmt::rt::Argument<'_>;
    let _434: &u128;
    let mut _437: bool;
    let mut _438: bool;
    let _440: !;
    let mut _441: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _442: (&&str, &std::string::String);
    let mut _443: &std::string::String;
    let _444: std::string::String;
    let mut _446: std::fmt::Arguments<'_>;
    let mut _447: &[&str];
    let mut _448: &[core::fmt::rt::Argument<'_>];
    let _449: &[core::fmt::rt::Argument<'_>; 1];
    let _450: [core::fmt::rt::Argument<'_>; 1];
    let mut _451: core::fmt::rt::Argument<'_>;
    let _452: &u128;
    let mut _455: bool;
    let mut _456: bool;
    let _458: !;
    let mut _459: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _460: (&&str, &std::string::String);
    let mut _461: &std::string::String;
    let _462: std::string::String;
    let mut _464: std::fmt::Arguments<'_>;
    let mut _465: &[&str];
    let mut _466: &[core::fmt::rt::Argument<'_>];
    let _467: &[core::fmt::rt::Argument<'_>; 1];
    let _468: [core::fmt::rt::Argument<'_>; 1];
    let mut _469: core::fmt::rt::Argument<'_>;
    let _470: &u128;
    let mut _473: bool;
    let mut _474: bool;
    let _476: !;
    let mut _477: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _478: (&&str, &std::string::String);
    let mut _479: &std::string::String;
    let _480: std::string::String;
    let mut _482: std::fmt::Arguments<'_>;
    let mut _483: &[&str];
    let mut _484: &[core::fmt::rt::Argument<'_>];
    let _485: &[core::fmt::rt::Argument<'_>; 1];
    let _486: [core::fmt::rt::Argument<'_>; 1];
    let mut _487: core::fmt::rt::Argument<'_>;
    let mut _490: bool;
    let mut _491: bool;
    let _493: !;
    let mut _494: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _495: (&&str, &std::string::String);
    let mut _496: &std::string::String;
    let _497: std::string::String;
    let mut _499: std::fmt::Arguments<'_>;
    let mut _500: &[&str];
    let mut _501: &[core::fmt::rt::Argument<'_>];
    let _502: &[core::fmt::rt::Argument<'_>; 1];
    let _503: [core::fmt::rt::Argument<'_>; 1];
    let mut _504: core::fmt::rt::Argument<'_>;
    let _505: &u128;
    let mut _508: bool;
    let mut _509: bool;
    let _511: !;
    let mut _512: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _513: (&u128, &u128);
    let mut _514: &u128;
    let mut _515: &u128;
    let _516: u128;
    let mut _517: u128;
    let mut _518: &u128;
    let mut _521: bool;
    let mut _522: bool;
    let mut _523: u128;
    let mut _524: u128;
    let _526: !;
    let mut _527: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _528: (&std::option::Option<u128>, &std::option::Option<u128>);
    let mut _529: &std::option::Option<u128>;
    let _530: std::option::Option<u128>;
    let mut _531: u128;
    let mut _532: u128;
    let mut _535: bool;
    let mut _536: bool;
    let _538: !;
    let mut _539: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _540: (&std::option::Option<u128>, &std::option::Option<u128>);
    let mut _541: &std::option::Option<u128>;
    let _542: std::option::Option<u128>;
    let mut _545: bool;
    let mut _546: bool;
    let _548: !;
    let mut _549: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _551: u128;
    let mut _553: (&std::option::Option<u128>, &std::option::Option<u128>);
    let mut _554: &std::option::Option<u128>;
    let _555: std::option::Option<u128>;
    let mut _556: u128;
    let mut _557: u128;
    let mut _560: bool;
    let mut _561: bool;
    let _563: !;
    let mut _564: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _565: (&std::option::Option<u128>, &std::option::Option<u128>);
    let mut _566: &std::option::Option<u128>;
    let _567: std::option::Option<u128>;
    let mut _568: u128;
    let mut _569: u128;
    let mut _572: bool;
    let mut _573: bool;
    let _575: !;
    let mut _576: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _577: (&std::option::Option<u128>, &std::option::Option<u128>);
    let mut _578: &std::option::Option<u128>;
    let _579: std::option::Option<u128>;
    let mut _580: u128;
    let mut _581: u128;
    let mut _584: bool;
    let mut _585: bool;
    let _587: !;
    let mut _588: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _589: (&std::option::Option<u128>, &std::option::Option<u128>);
    let mut _590: &std::option::Option<u128>;
    let _591: std::option::Option<u128>;
    let mut _592: u128;
    let mut _593: u32;
    let mut _596: bool;
    let mut _597: bool;
    let _599: !;
    let mut _600: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _601: (&std::option::Option<u128>, &std::option::Option<u128>);
    let mut _602: &std::option::Option<u128>;
    let _603: std::option::Option<u128>;
    let mut _604: u128;
    let mut _605: u32;
    let mut _608: bool;
    let mut _609: bool;
    let _611: !;
    let mut _612: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _613: (&u128, &u128);
    let mut _614: &u128;
    let _615: u128;
    let mut _616: u128;
    let mut _617: u128;
    let mut _618: bool;
    let mut _621: bool;
    let mut _622: bool;
    let mut _623: u128;
    let mut _624: u128;
    let _626: !;
    let mut _627: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _628: (&u128, &u128);
    let mut _629: &u128;
    let _630: u128;
    let mut _631: u128;
    let mut _632: u128;
    let mut _633: bool;
    let mut _636: bool;
    let mut _637: bool;
    let mut _638: u128;
    let mut _639: u128;
    let _641: !;
    let mut _642: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _643: (&u128, &u128);
    let mut _644: &u128;
    let _645: u128;
    let mut _646: u128;
    let mut _647: u128;
    let mut _648: u128;
    let mut _649: u128;
    let mut _650: bool;
    let mut _653: bool;
    let mut _654: bool;
    let mut _655: u128;
    let mut _656: u128;
    let _658: !;
    let mut _659: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _660: (&u128, &u128);
    let mut _661: &u128;
    let _662: u128;
    let mut _663: u128;
    let mut _664: u128;
    let mut _665: u128;
    let mut _666: bool;
    let mut _669: bool;
    let mut _670: bool;
    let mut _671: u128;
    let mut _672: u128;
    let _674: !;
    let mut _675: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _676: (&u128, &u128);
    let mut _677: &u128;
    let _678: u128;
    let mut _679: u128;
    let mut _680: u128;
    let mut _681: u128;
    let mut _682: bool;
    let mut _685: bool;
    let mut _686: bool;
    let mut _687: u128;
    let mut _688: u128;
    let _690: !;
    let mut _691: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _692: (&u128, &u128);
    let mut _693: &u128;
    let _694: u128;
    let mut _695: u128;
    let mut _696: u128;
    let mut _697: u128;
    let mut _698: u128;
    let mut _699: u128;
    let mut _700: bool;
    let mut _703: bool;
    let mut _704: bool;
    let mut _705: u128;
    let mut _706: u128;
    let _708: !;
    let mut _709: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _710: (&u128, &u128);
    let mut _711: &u128;
    let _712: u128;
    let mut _713: u128;
    let mut _714: u128;
    let mut _715: u128;
    let mut _716: bool;
    let mut _719: bool;
    let mut _720: bool;
    let mut _721: u128;
    let mut _722: u128;
    let _724: !;
    let mut _725: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _726: (&u128, &u128);
    let mut _727: &u128;
    let _728: u128;
    let mut _729: u128;
    let mut _730: u128;
    let mut _731: u128;
    let mut _732: bool;
    let mut _735: bool;
    let mut _736: bool;
    let mut _737: u128;
    let mut _738: u128;
    let _740: !;
    let mut _741: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _742: (&u128, &u128);
    let mut _743: &u128;
    let _744: u128;
    let mut _745: u128;
    let mut _746: u128;
    let mut _747: bool;
    let mut _750: bool;
    let mut _751: bool;
    let mut _752: u128;
    let mut _753: u128;
    let _755: !;
    let mut _756: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _757: (&u128, &u128);
    let mut _758: &u128;
    let _759: u128;
    let mut _760: u128;
    let mut _761: u128;
    let mut _762: bool;
    let mut _765: bool;
    let mut _766: bool;
    let mut _767: u128;
    let mut _768: u128;
    let _770: !;
    let mut _771: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _772: (&u128, &u128);
    let mut _773: &u128;
    let _774: u128;
    let mut _775: u128;
    let mut _776: u128;
    let mut _777: bool;
    let mut _780: bool;
    let mut _781: bool;
    let mut _782: u128;
    let mut _783: u128;
    let _785: !;
    let mut _786: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _787: (&u128, &u128);
    let mut _788: &u128;
    let _789: u128;
    let mut _790: std::slice::Iter<'_, u128>;
    let mut _791: &[u128];
    let mut _794: bool;
    let mut _795: bool;
    let mut _796: u128;
    let mut _797: u128;
    let _799: !;
    let mut _800: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _801: (&u128, &u128);
    let mut _802: &u128;
    let _803: u128;
    let mut _804: std::slice::Iter<'_, u128>;
    let mut _805: &[u128];
    let mut _808: bool;
    let mut _809: bool;
    let mut _810: u128;
    let mut _811: u128;
    let _813: !;
    let mut _814: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => const u128::MAX;
        let _6: &u128;
        let _7: &u128;
        let _19: &u128;
        let _20: &u128;
        let _28: u128;
        let mut _869: &u128;
        let mut _870: &u128;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug left_val => _19;
            debug right_val => _20;
            let _25: core::panicking::AssertKind;
            scope 5 {
                debug kind => _25;
            }
        }
        scope 6 {
            debug y => const 340282366920938463463374607431768211454_u128;
            let _31: &u128;
            let _32: &u128;
            let _45: &u128;
            let _46: &u128;
            let _58: &u128;
            let _59: &u128;
            let _67: u128;
            let mut _867: &u128;
            let mut _868: &u128;
            scope 7 {
                debug left_val => _31;
                debug right_val => _32;
                let _37: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _37;
                }
            }
            scope 9 {
                debug left_val => _45;
                debug right_val => _46;
                let _51: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _51;
                }
            }
            scope 11 {
                debug left_val => _58;
                debug right_val => _59;
                let _64: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _64;
                }
            }
            scope 13 {
                debug z => const 11259375_u128;
                let _73: &u128;
                let _74: &u128;
                let _91: &u128;
                let _92: &u128;
                let _109: &u128;
                let _110: &u128;
                let _118: u128;
                let mut _864: &u128;
                let mut _865: &u128;
                let mut _866: &u128;
                scope 14 {
                    debug left_val => _73;
                    debug right_val => _74;
                    let _79: core::panicking::AssertKind;
                    scope 15 {
                        debug kind => _79;
                    }
                }
                scope 16 {
                    debug left_val => _91;
                    debug right_val => _92;
                    let _97: core::panicking::AssertKind;
                    scope 17 {
                        debug kind => _97;
                    }
                }
                scope 18 {
                    debug left_val => _109;
                    debug right_val => _110;
                    let _115: core::panicking::AssertKind;
                    scope 19 {
                        debug kind => _115;
                    }
                }
                scope 20 {
                    debug k => const 1512366075204170947332355369683137040_u128;
                    let _122: &u128;
                    let _123: &u128;
                    let _134: &u128;
                    let _135: &u128;
                    let _147: &u128;
                    let _148: &u128;
                    let _159: &u128;
                    let _160: &u128;
                    let _172: &u128;
                    let _173: &u128;
                    let _185: &u128;
                    let _186: &u128;
                    let _199: &u128;
                    let _200: &u128;
                    let _212: &u128;
                    let _213: &u128;
                    let _224: &u128;
                    let _225: &u128;
                    let _236: &u128;
                    let _237: &u128;
                    let _262: &u64;
                    let _263: &u64;
                    let _275: &u64;
                    let _276: &u64;
                    let _287: &u64;
                    let _288: &u64;
                    let _299: &i128;
                    let _300: &i128;
                    let _314: &u128;
                    let _315: &u128;
                    let _329: &u128;
                    let _330: &u128;
                    let _347: &u128;
                    let _348: &u128;
                    let _365: &u128;
                    let _366: &u128;
                    let _374: u128;
                    let mut _850: &i128;
                    let mut _851: &u64;
                    let mut _852: &u64;
                    let mut _853: &u64;
                    let mut _854: &u128;
                    let mut _855: &u128;
                    let mut _856: &u128;
                    let mut _857: &u128;
                    let mut _858: &u128;
                    let mut _859: &u128;
                    let mut _860: &u128;
                    let mut _861: &u128;
                    let mut _862: &u128;
                    let mut _863: &u128;
                    scope 21 {
                        debug left_val => _122;
                        debug right_val => _123;
                        let _128: core::panicking::AssertKind;
                        scope 22 {
                            debug kind => _128;
                        }
                    }
                    scope 23 {
                        debug left_val => _134;
                        debug right_val => _135;
                        let _140: core::panicking::AssertKind;
                        scope 24 {
                            debug kind => _140;
                        }
                    }
                    scope 25 {
                        debug left_val => _147;
                        debug right_val => _148;
                        let _153: core::panicking::AssertKind;
                        scope 26 {
                            debug kind => _153;
                        }
                    }
                    scope 27 {
                        debug left_val => _159;
                        debug right_val => _160;
                        let _165: core::panicking::AssertKind;
                        scope 28 {
                            debug kind => _165;
                        }
                    }
                    scope 29 {
                        debug left_val => _172;
                        debug right_val => _173;
                        let _178: core::panicking::AssertKind;
                        scope 30 {
                            debug kind => _178;
                        }
                    }
                    scope 31 {
                        debug left_val => _185;
                        debug right_val => _186;
                        let _191: core::panicking::AssertKind;
                        scope 32 {
                            debug kind => _191;
                        }
                    }
                    scope 33 {
                        debug left_val => _199;
                        debug right_val => _200;
                        let _205: core::panicking::AssertKind;
                        scope 34 {
                            debug kind => _205;
                        }
                    }
                    scope 35 {
                        debug left_val => _212;
                        debug right_val => _213;
                        let _218: core::panicking::AssertKind;
                        scope 36 {
                            debug kind => _218;
                        }
                    }
                    scope 37 {
                        debug left_val => _224;
                        debug right_val => _225;
                        let _230: core::panicking::AssertKind;
                        scope 38 {
                            debug kind => _230;
                        }
                    }
                    scope 39 {
                        debug left_val => _236;
                        debug right_val => _237;
                        let _242: core::panicking::AssertKind;
                        scope 40 {
                            debug kind => _242;
                        }
                    }
                    scope 41 {
                        debug left_val => _262;
                        debug right_val => _263;
                        let _268: core::panicking::AssertKind;
                        scope 42 {
                            debug kind => _268;
                        }
                    }
                    scope 43 {
                        debug left_val => _275;
                        debug right_val => _276;
                        let _281: core::panicking::AssertKind;
                        scope 44 {
                            debug kind => _281;
                        }
                    }
                    scope 45 {
                        debug left_val => _287;
                        debug right_val => _288;
                        let _293: core::panicking::AssertKind;
                        scope 46 {
                            debug kind => _293;
                        }
                    }
                    scope 47 {
                        debug left_val => _299;
                        debug right_val => _300;
                        let _305: core::panicking::AssertKind;
                        scope 48 {
                            debug kind => _305;
                        }
                    }
                    scope 49 {
                        debug left_val => _314;
                        debug right_val => _315;
                        let _320: core::panicking::AssertKind;
                        scope 50 {
                            debug kind => _320;
                        }
                    }
                    scope 51 {
                        debug left_val => _329;
                        debug right_val => _330;
                        let _335: core::panicking::AssertKind;
                        scope 52 {
                            debug kind => _335;
                        }
                    }
                    scope 53 {
                        debug left_val => _347;
                        debug right_val => _348;
                        let _353: core::panicking::AssertKind;
                        scope 54 {
                            debug kind => _353;
                        }
                    }
                    scope 55 {
                        debug left_val => _365;
                        debug right_val => _366;
                        let _371: core::panicking::AssertKind;
                        scope 56 {
                            debug kind => _371;
                        }
                    }
                    scope 57 {
                        debug l => _374;
                        let _381: &u128;
                        let _382: &u128;
                        let _396: &u128;
                        let _397: &u128;
                        let _405: u128;
                        scope 58 {
                            debug left_val => _381;
                            debug right_val => _382;
                            let _387: core::panicking::AssertKind;
                            scope 59 {
                                debug kind => _387;
                            }
                        }
                        scope 60 {
                            debug left_val => _396;
                            debug right_val => _397;
                            let _402: core::panicking::AssertKind;
                            scope 61 {
                                debug kind => _402;
                            }
                        }
                        scope 62 {
                            debug j => _405;
                            let _409: std::string::String;
                            let _417: &&str;
                            let _418: &std::string::String;
                            let _427: std::string::String;
                            let _435: &&str;
                            let _436: &std::string::String;
                            let _445: std::string::String;
                            let _453: &&str;
                            let _454: &std::string::String;
                            let _463: std::string::String;
                            let _471: &&str;
                            let _472: &std::string::String;
                            let _481: std::string::String;
                            let _488: &&str;
                            let _489: &std::string::String;
                            let _498: std::string::String;
                            let _506: &&str;
                            let _507: &std::string::String;
                            let _519: &u128;
                            let _520: &u128;
                            let _533: &std::option::Option<u128>;
                            let _534: &std::option::Option<u128>;
                            let _543: &std::option::Option<u128>;
                            let _544: &std::option::Option<u128>;
                            let _550: u128;
                            let mut _835: &std::option::Option<u128>;
                            let mut _836: &std::option::Option<u128>;
                            let mut _837: &[&str; 1];
                            let mut _838: &&str;
                            let mut _839: &u128;
                            let mut _840: &[&str; 1];
                            let mut _841: &&str;
                            let mut _842: &[&str; 1];
                            let mut _843: &&str;
                            let mut _844: &[&str; 1];
                            let mut _845: &&str;
                            let mut _846: &[&str; 1];
                            let mut _847: &&str;
                            let mut _848: &[&str; 1];
                            let mut _849: &&str;
                            scope 63 {
                                debug res => _409;
                            }
                            scope 64 {
                                debug left_val => _417;
                                debug right_val => _418;
                                let _421: core::panicking::AssertKind;
                                scope 65 {
                                    debug kind => _421;
                                }
                            }
                            scope 66 {
                                debug res => _427;
                            }
                            scope 67 {
                                debug left_val => _435;
                                debug right_val => _436;
                                let _439: core::panicking::AssertKind;
                                scope 68 {
                                    debug kind => _439;
                                }
                            }
                            scope 69 {
                                debug res => _445;
                            }
                            scope 70 {
                                debug left_val => _453;
                                debug right_val => _454;
                                let _457: core::panicking::AssertKind;
                                scope 71 {
                                    debug kind => _457;
                                }
                            }
                            scope 72 {
                                debug res => _463;
                            }
                            scope 73 {
                                debug left_val => _471;
                                debug right_val => _472;
                                let _475: core::panicking::AssertKind;
                                scope 74 {
                                    debug kind => _475;
                                }
                            }
                            scope 75 {
                                debug res => _481;
                            }
                            scope 76 {
                                debug left_val => _488;
                                debug right_val => _489;
                                let _492: core::panicking::AssertKind;
                                scope 77 {
                                    debug kind => _492;
                                }
                            }
                            scope 78 {
                                debug res => _498;
                            }
                            scope 79 {
                                debug left_val => _506;
                                debug right_val => _507;
                                let _510: core::panicking::AssertKind;
                                scope 80 {
                                    debug kind => _510;
                                }
                            }
                            scope 81 {
                                debug left_val => _519;
                                debug right_val => _520;
                                let _525: core::panicking::AssertKind;
                                scope 82 {
                                    debug kind => _525;
                                }
                            }
                            scope 83 {
                                debug left_val => _533;
                                debug right_val => _534;
                                let _537: core::panicking::AssertKind;
                                scope 84 {
                                    debug kind => _537;
                                }
                            }
                            scope 85 {
                                debug left_val => _543;
                                debug right_val => _544;
                                let _547: core::panicking::AssertKind;
                                scope 86 {
                                    debug kind => _547;
                                }
                            }
                            scope 87 {
                                debug l => _550;
                                let _552: u128;
                                scope 88 {
                                    debug o => _552;
                                    let _558: &std::option::Option<u128>;
                                    let _559: &std::option::Option<u128>;
                                    let _570: &std::option::Option<u128>;
                                    let _571: &std::option::Option<u128>;
                                    let _582: &std::option::Option<u128>;
                                    let _583: &std::option::Option<u128>;
                                    let _594: &std::option::Option<u128>;
                                    let _595: &std::option::Option<u128>;
                                    let _606: &std::option::Option<u128>;
                                    let _607: &std::option::Option<u128>;
                                    let _619: &u128;
                                    let _620: &u128;
                                    let _634: &u128;
                                    let _635: &u128;
                                    let _651: &u128;
                                    let _652: &u128;
                                    let _667: &u128;
                                    let _668: &u128;
                                    let _683: &u128;
                                    let _684: &u128;
                                    let _701: &u128;
                                    let _702: &u128;
                                    let _717: &u128;
                                    let _718: &u128;
                                    let _733: &u128;
                                    let _734: &u128;
                                    let _748: &u128;
                                    let _749: &u128;
                                    let _763: &u128;
                                    let _764: &u128;
                                    let _778: &u128;
                                    let _779: &u128;
                                    let _792: &u128;
                                    let _793: &u128;
                                    let _806: &u128;
                                    let _807: &u128;
                                    let mut _815: &[u128; 4];
                                    let mut _816: &u128;
                                    let mut _817: &[u128; 4];
                                    let mut _818: &u128;
                                    let mut _819: &u128;
                                    let mut _820: &u128;
                                    let mut _821: &u128;
                                    let mut _822: &u128;
                                    let mut _823: &u128;
                                    let mut _824: &u128;
                                    let mut _825: &u128;
                                    let mut _826: &u128;
                                    let mut _827: &u128;
                                    let mut _828: &u128;
                                    let mut _829: &u128;
                                    let mut _830: &std::option::Option<u128>;
                                    let mut _831: &std::option::Option<u128>;
                                    let mut _832: &std::option::Option<u128>;
                                    let mut _833: &std::option::Option<u128>;
                                    let mut _834: &std::option::Option<u128>;
                                    scope 89 {
                                        debug left_val => _558;
                                        debug right_val => _559;
                                        let _562: core::panicking::AssertKind;
                                        scope 90 {
                                            debug kind => _562;
                                        }
                                    }
                                    scope 91 {
                                        debug left_val => _570;
                                        debug right_val => _571;
                                        let _574: core::panicking::AssertKind;
                                        scope 92 {
                                            debug kind => _574;
                                        }
                                    }
                                    scope 93 {
                                        debug left_val => _582;
                                        debug right_val => _583;
                                        let _586: core::panicking::AssertKind;
                                        scope 94 {
                                            debug kind => _586;
                                        }
                                    }
                                    scope 95 {
                                        debug left_val => _594;
                                        debug right_val => _595;
                                        let _598: core::panicking::AssertKind;
                                        scope 96 {
                                            debug kind => _598;
                                        }
                                    }
                                    scope 97 {
                                        debug left_val => _606;
                                        debug right_val => _607;
                                        let _610: core::panicking::AssertKind;
                                        scope 98 {
                                            debug kind => _610;
                                        }
                                    }
                                    scope 99 {
                                        debug left_val => _619;
                                        debug right_val => _620;
                                        let _625: core::panicking::AssertKind;
                                        scope 100 {
                                            debug kind => _625;
                                        }
                                    }
                                    scope 101 {
                                        debug left_val => _634;
                                        debug right_val => _635;
                                        let _640: core::panicking::AssertKind;
                                        scope 102 {
                                            debug kind => _640;
                                        }
                                    }
                                    scope 103 {
                                        debug left_val => _651;
                                        debug right_val => _652;
                                        let _657: core::panicking::AssertKind;
                                        scope 104 {
                                            debug kind => _657;
                                        }
                                    }
                                    scope 105 {
                                        debug left_val => _667;
                                        debug right_val => _668;
                                        let _673: core::panicking::AssertKind;
                                        scope 106 {
                                            debug kind => _673;
                                        }
                                    }
                                    scope 107 {
                                        debug left_val => _683;
                                        debug right_val => _684;
                                        let _689: core::panicking::AssertKind;
                                        scope 108 {
                                            debug kind => _689;
                                        }
                                    }
                                    scope 109 {
                                        debug left_val => _701;
                                        debug right_val => _702;
                                        let _707: core::panicking::AssertKind;
                                        scope 110 {
                                            debug kind => _707;
                                        }
                                    }
                                    scope 111 {
                                        debug left_val => _717;
                                        debug right_val => _718;
                                        let _723: core::panicking::AssertKind;
                                        scope 112 {
                                            debug kind => _723;
                                        }
                                    }
                                    scope 113 {
                                        debug left_val => _733;
                                        debug right_val => _734;
                                        let _739: core::panicking::AssertKind;
                                        scope 114 {
                                            debug kind => _739;
                                        }
                                    }
                                    scope 115 {
                                        debug left_val => _748;
                                        debug right_val => _749;
                                        let _754: core::panicking::AssertKind;
                                        scope 116 {
                                            debug kind => _754;
                                        }
                                    }
                                    scope 117 {
                                        debug left_val => _763;
                                        debug right_val => _764;
                                        let _769: core::panicking::AssertKind;
                                        scope 118 {
                                            debug kind => _769;
                                        }
                                    }
                                    scope 119 {
                                        debug left_val => _778;
                                        debug right_val => _779;
                                        let _784: core::panicking::AssertKind;
                                        scope 120 {
                                            debug kind => _784;
                                        }
                                    }
                                    scope 121 {
                                        debug left_val => _792;
                                        debug right_val => _793;
                                        let _798: core::panicking::AssertKind;
                                        scope 122 {
                                            debug kind => _798;
                                        }
                                    }
                                    scope 123 {
                                        debug left_val => _806;
                                        debug right_val => _807;
                                        let _812: core::panicking::AssertKind;
                                        scope 124 {
                                            debug kind => _812;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const u128::MAX;
        _870 = const _;
        _5 = _1;
        _4 = Not(move _5);
        _3 = &_4;
        _2 = (_870, move _3);
        _6 = (_2.0: &u128);
        _7 = (_2.1: &u128);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u128, u128>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb2: {
        _869 = const _;
        _18 = _1;
        _17 = Not(move _18);
        _16 = &_17;
        _15 = (_869, move _16);
        _19 = (_15.0: &u128);
        _20 = (_15.1: &u128);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<u128, u128>(move _25, _19, _20, move _27) -> unwind continue;
    }

    bb4: {
        _28 = const 340282366920938463463374607431768211454_u128;
        _868 = const _;
        _30 = &_28;
        _29 = (_868, move _30);
        _31 = (_29.0: &u128);
        _32 = (_29.1: &u128);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<u128, u128>(move _37, _31, _32, move _39) -> unwind continue;
    }

    bb6: {
        _41 = &_1;
        _44 = _28;
        _43 = BitOr(move _44, const 1_u128);
        _42 = &_43;
        _40 = (move _41, move _42);
        _45 = (_40.0: &u128);
        _46 = (_40.1: &u128);
        _49 = (*_45);
        _50 = (*_46);
        _48 = Eq(move _49, move _50);
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<u128, u128>(move _51, _45, _46, move _53) -> unwind continue;
    }

    bb8: {
        _867 = const _;
        _57 = _28;
        _56 = BitAnd(move _57, const 333631034724246903186321388733867229183_u128);
        _55 = &_56;
        _54 = (_867, move _55);
        _58 = (_54.0: &u128);
        _59 = (_54.1: &u128);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<u128, u128>(move _64, _58, _59, move _66) -> unwind continue;
    }

    bb10: {
        _67 = const 11259375_u128;
        _71 = _67;
        _72 = _67;
        _70 = Mul(move _71, move _72);
        _69 = &_70;
        _866 = const _;
        _68 = (move _69, _866);
        _73 = (_68.0: &u128);
        _74 = (_68.1: &u128);
        _77 = (*_73);
        _78 = (*_74);
        _76 = Eq(move _77, move _78);
        _75 = Not(move _76);
        switchInt(move _75) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _79 = core::panicking::AssertKind::Eq;
        _81 = Option::<Arguments<'_>>::None;
        _80 = core::panicking::assert_failed::<u128, u128>(move _79, _73, _74, move _81) -> unwind continue;
    }

    bb12: {
        _87 = _67;
        _88 = _67;
        _86 = Mul(move _87, move _88);
        _89 = _67;
        _85 = Mul(move _86, move _89);
        _90 = _67;
        _84 = Mul(move _85, move _90);
        _83 = &_84;
        _865 = const _;
        _82 = (move _83, _865);
        _91 = (_82.0: &u128);
        _92 = (_82.1: &u128);
        _95 = (*_91);
        _96 = (*_92);
        _94 = Eq(move _95, move _96);
        _93 = Not(move _94);
        switchInt(move _93) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _97 = core::panicking::AssertKind::Eq;
        _99 = Option::<Arguments<'_>>::None;
        _98 = core::panicking::assert_failed::<u128, u128>(move _97, _91, _92, move _99) -> unwind continue;
    }

    bb14: {
        _105 = _67;
        _106 = _67;
        _104 = Add(move _105, move _106);
        _107 = _67;
        _103 = Add(move _104, move _107);
        _108 = _67;
        _102 = Add(move _103, move _108);
        _101 = &_102;
        _864 = const _;
        _100 = (move _101, _864);
        _109 = (_100.0: &u128);
        _110 = (_100.1: &u128);
        _113 = (*_109);
        _114 = (*_110);
        _112 = Eq(move _113, move _114);
        _111 = Not(move _112);
        switchInt(move _111) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _115 = core::panicking::AssertKind::Eq;
        _117 = Option::<Arguments<'_>>::None;
        _116 = core::panicking::assert_failed::<u128, u128>(move _115, _109, _110, move _117) -> unwind continue;
    }

    bb16: {
        _118 = const 1512366075204170947332355369683137040_u128;
        _121 = Add(_118, _118);
        _120 = &_121;
        _863 = const _;
        _119 = (move _120, _863);
        _122 = (_119.0: &u128);
        _123 = (_119.1: &u128);
        _126 = (*_122);
        _127 = (*_123);
        _125 = Eq(move _126, move _127);
        _124 = Not(move _125);
        switchInt(move _124) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _128 = core::panicking::AssertKind::Eq;
        _130 = Option::<Arguments<'_>>::None;
        _129 = core::panicking::assert_failed::<u128, u128>(move _128, _122, _123, move _130) -> unwind continue;
    }

    bb18: {
        _862 = const _;
        _133 = Sub(_118, _118);
        _132 = &_133;
        _131 = (_862, move _132);
        _134 = (_131.0: &u128);
        _135 = (_131.1: &u128);
        _138 = (*_134);
        _139 = (*_135);
        _137 = Eq(move _138, move _139);
        _136 = Not(move _137);
        switchInt(move _136) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _140 = core::panicking::AssertKind::Eq;
        _142 = Option::<Arguments<'_>>::None;
        _141 = core::panicking::assert_failed::<u128, u128>(move _140, _134, _135, move _142) -> unwind continue;
    }

    bb20: {
        _861 = const _;
        _146 = _67;
        _145 = Sub(_118, move _146);
        _144 = &_145;
        _143 = (_861, move _144);
        _147 = (_143.0: &u128);
        _148 = (_143.1: &u128);
        _151 = (*_147);
        _152 = (*_148);
        _150 = Eq(move _151, move _152);
        _149 = Not(move _150);
        switchInt(move _149) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _153 = core::panicking::AssertKind::Eq;
        _155 = Option::<Arguments<'_>>::None;
        _154 = core::panicking::assert_failed::<u128, u128>(move _153, _147, _148, move _155) -> unwind continue;
    }

    bb22: {
        _860 = const _;
        _158 = Sub(_118, const 183138079419255074428548309402792464_u128);
        _157 = &_158;
        _156 = (_860, move _157);
        _159 = (_156.0: &u128);
        _160 = (_156.1: &u128);
        _163 = (*_159);
        _164 = (*_160);
        _162 = Eq(move _163, move _164);
        _161 = Not(move _162);
        switchInt(move _161) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _165 = core::panicking::AssertKind::Eq;
        _167 = Option::<Arguments<'_>>::None;
        _166 = core::panicking::assert_failed::<u128, u128>(move _165, _159, _160, move _167) -> unwind continue;
    }

    bb24: {
        _859 = const _;
        _171 = Eq(const 42_u128, const 0_u128);
        assert(!move _171, "attempt to divide `{}` by zero", _118) -> [success: bb25, unwind continue];
    }

    bb25: {
        _170 = Div(_118, const 42_u128);
        _169 = &_170;
        _168 = (_859, move _169);
        _172 = (_168.0: &u128);
        _173 = (_168.1: &u128);
        _176 = (*_172);
        _177 = (*_173);
        _175 = Eq(move _176, move _177);
        _174 = Not(move _175);
        switchInt(move _174) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _178 = core::panicking::AssertKind::Eq;
        _180 = Option::<Arguments<'_>>::None;
        _179 = core::panicking::assert_failed::<u128, u128>(move _178, _172, _173, move _180) -> unwind continue;
    }

    bb27: {
        _858 = const _;
        _184 = Eq(const 42_u128, const 0_u128);
        assert(!move _184, "attempt to calculate the remainder of `{}` with a divisor of zero", _118) -> [success: bb28, unwind continue];
    }

    bb28: {
        _183 = Rem(_118, const 42_u128);
        _182 = &_183;
        _181 = (_858, move _182);
        _185 = (_181.0: &u128);
        _186 = (_181.1: &u128);
        _189 = (*_185);
        _190 = (*_186);
        _188 = Eq(move _189, move _190);
        _187 = Not(move _188);
        switchInt(move _187) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _191 = core::panicking::AssertKind::Eq;
        _193 = Option::<Arguments<'_>>::None;
        _192 = core::panicking::assert_failed::<u128, u128>(move _191, _185, _186, move _193) -> unwind continue;
    }

    bb30: {
        _857 = const _;
        _197 = _67;
        _198 = Eq(const 42_u128, const 0_u128);
        assert(!move _198, "attempt to calculate the remainder of `{}` with a divisor of zero", _197) -> [success: bb31, unwind continue];
    }

    bb31: {
        _196 = Rem(move _197, const 42_u128);
        _195 = &_196;
        _194 = (_857, move _195);
        _199 = (_194.0: &u128);
        _200 = (_194.1: &u128);
        _203 = (*_199);
        _204 = (*_200);
        _202 = Eq(move _203, move _204);
        _201 = Not(move _202);
        switchInt(move _201) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _205 = core::panicking::AssertKind::Eq;
        _207 = Option::<Arguments<'_>>::None;
        _206 = core::panicking::assert_failed::<u128, u128>(move _205, _199, _200, move _207) -> unwind continue;
    }

    bb33: {
        _856 = const _;
        _211 = Eq(const 16549841672807596_u128, const 0_u128);
        assert(!move _211, "attempt to calculate the remainder of `{}` with a divisor of zero", _118) -> [success: bb34, unwind continue];
    }

    bb34: {
        _210 = Rem(_118, const 16549841672807596_u128);
        _209 = &_210;
        _208 = (_856, move _209);
        _212 = (_208.0: &u128);
        _213 = (_208.1: &u128);
        _216 = (*_212);
        _217 = (*_213);
        _215 = Eq(move _216, move _217);
        _214 = Not(move _215);
        switchInt(move _214) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _218 = core::panicking::AssertKind::Eq;
        _220 = Option::<Arguments<'_>>::None;
        _219 = core::panicking::assert_failed::<u128, u128>(move _218, _212, _213, move _220) -> unwind continue;
    }

    bb36: {
        _855 = const _;
        _223 = Shr(_118, const 65_i32);
        _222 = &_223;
        _221 = (_855, move _222);
        _224 = (_221.0: &u128);
        _225 = (_221.1: &u128);
        _228 = (*_224);
        _229 = (*_225);
        _227 = Eq(move _228, move _229);
        _226 = Not(move _227);
        switchInt(move _226) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _230 = core::panicking::AssertKind::Eq;
        _232 = Option::<Arguments<'_>>::None;
        _231 = core::panicking::assert_failed::<u128, u128>(move _230, _224, _225, move _232) -> unwind continue;
    }

    bb38: {
        _854 = const _;
        _235 = Shl(_118, const 65_i32);
        _234 = &_235;
        _233 = (_854, move _234);
        _236 = (_233.0: &u128);
        _237 = (_233.1: &u128);
        _240 = (*_236);
        _241 = (*_237);
        _239 = Eq(move _240, move _241);
        _238 = Not(move _239);
        switchInt(move _238) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _242 = core::panicking::AssertKind::Eq;
        _244 = Option::<Arguments<'_>>::None;
        _243 = core::panicking::assert_failed::<u128, u128>(move _242, _236, _237, move _244) -> unwind continue;
    }

    bb40: {
        _247 = _67;
        _246 = Gt(_118, move _247);
        _245 = Not(move _246);
        switchInt(move _245) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _248 = core::panicking::panic(const "assertion failed: k > z") -> unwind continue;
    }

    bb42: {
        _251 = _28;
        _250 = Gt(move _251, _118);
        _249 = Not(move _250);
        switchInt(move _249) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _252 = core::panicking::panic(const "assertion failed: y > k") -> unwind continue;
    }

    bb44: {
        _255 = _28;
        _256 = _1;
        _254 = Lt(move _255, move _256);
        _253 = Not(move _254);
        switchInt(move _253) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        _257 = core::panicking::panic(const "assertion failed: y < x") -> unwind continue;
    }

    bb46: {
        _261 = _1;
        _260 = move _261 as u64 (IntToInt);
        _259 = &_260;
        _853 = const _;
        _258 = (move _259, _853);
        _262 = (_258.0: &u64);
        _263 = (_258.1: &u64);
        _266 = (*_262);
        _267 = (*_263);
        _265 = Eq(move _266, move _267);
        _264 = Not(move _265);
        switchInt(move _264) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _268 = core::panicking::AssertKind::Eq;
        _270 = Option::<Arguments<'_>>::None;
        _269 = core::panicking::assert_failed::<u64, u64>(move _268, _262, _263, move _270) -> unwind continue;
    }

    bb48: {
        _274 = _67;
        _273 = move _274 as u64 (IntToInt);
        _272 = &_273;
        _852 = const _;
        _271 = (move _272, _852);
        _275 = (_271.0: &u64);
        _276 = (_271.1: &u64);
        _279 = (*_275);
        _280 = (*_276);
        _278 = Eq(move _279, move _280);
        _277 = Not(move _278);
        switchInt(move _277) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        _281 = core::panicking::AssertKind::Eq;
        _283 = Option::<Arguments<'_>>::None;
        _282 = core::panicking::assert_failed::<u64, u64>(move _281, _275, _276, move _283) -> unwind continue;
    }

    bb50: {
        _286 = _118 as u64 (IntToInt);
        _285 = &_286;
        _851 = const _;
        _284 = (move _285, _851);
        _287 = (_284.0: &u64);
        _288 = (_284.1: &u64);
        _291 = (*_287);
        _292 = (*_288);
        _290 = Eq(move _291, move _292);
        _289 = Not(move _290);
        switchInt(move _289) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _293 = core::panicking::AssertKind::Eq;
        _295 = Option::<Arguments<'_>>::None;
        _294 = core::panicking::assert_failed::<u64, u64>(move _293, _287, _288, move _295) -> unwind continue;
    }

    bb52: {
        _298 = _118 as i128 (IntToInt);
        _297 = &_298;
        _850 = const _;
        _296 = (move _297, _850);
        _299 = (_296.0: &i128);
        _300 = (_296.1: &i128);
        _303 = (*_299);
        _304 = (*_300);
        _302 = Eq(move _303, move _304);
        _301 = Not(move _302);
        switchInt(move _301) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _305 = core::panicking::AssertKind::Eq;
        _307 = Option::<Arguments<'_>>::None;
        _306 = core::panicking::assert_failed::<i128, i128>(move _305, _299, _300, move _307) -> unwind continue;
    }

    bb54: {
        _312 = _67;
        _311 = move _312 as f64 (IntToFloat);
        _310 = move _311 as u128 (FloatToInt);
        _309 = &_310;
        _313 = &_67;
        _308 = (move _309, move _313);
        _314 = (_308.0: &u128);
        _315 = (_308.1: &u128);
        _318 = (*_314);
        _319 = (*_315);
        _317 = Eq(move _318, move _319);
        _316 = Not(move _317);
        switchInt(move _316) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _320 = core::panicking::AssertKind::Eq;
        _322 = Option::<Arguments<'_>>::None;
        _321 = core::panicking::assert_failed::<u128, u128>(move _320, _314, _315, move _322) -> unwind continue;
    }

    bb56: {
        _327 = _67;
        _326 = move _327 as f32 (IntToFloat);
        _325 = move _326 as u128 (FloatToInt);
        _324 = &_325;
        _328 = &_67;
        _323 = (move _324, move _328);
        _329 = (_323.0: &u128);
        _330 = (_323.1: &u128);
        _333 = (*_329);
        _334 = (*_330);
        _332 = Eq(move _333, move _334);
        _331 = Not(move _332);
        switchInt(move _331) -> [0: bb58, otherwise: bb57];
    }

    bb57: {
        _335 = core::panicking::AssertKind::Eq;
        _337 = Option::<Arguments<'_>>::None;
        _336 = core::panicking::assert_failed::<u128, u128>(move _335, _329, _330, move _337) -> unwind continue;
    }

    bb58: {
        _343 = _67;
        _342 = move _343 as f64 (IntToFloat);
        _341 = Mul(move _342, const 16f64);
        _340 = move _341 as u128 (FloatToInt);
        _339 = &_340;
        _346 = _67;
        _345 = Mul(move _346, const 16_u128);
        _344 = &_345;
        _338 = (move _339, move _344);
        _347 = (_338.0: &u128);
        _348 = (_338.1: &u128);
        _351 = (*_347);
        _352 = (*_348);
        _350 = Eq(move _351, move _352);
        _349 = Not(move _350);
        switchInt(move _349) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _353 = core::panicking::AssertKind::Eq;
        _355 = Option::<Arguments<'_>>::None;
        _354 = core::panicking::assert_failed::<u128, u128>(move _353, _347, _348, move _355) -> unwind continue;
    }

    bb60: {
        _361 = _67;
        _360 = move _361 as f32 (IntToFloat);
        _359 = Mul(move _360, const 16f32);
        _358 = move _359 as u128 (FloatToInt);
        _357 = &_358;
        _364 = _67;
        _363 = Mul(move _364, const 16_u128);
        _362 = &_363;
        _356 = (move _357, move _362);
        _365 = (_356.0: &u128);
        _366 = (_356.1: &u128);
        _369 = (*_365);
        _370 = (*_366);
        _368 = Eq(move _369, move _370);
        _367 = Not(move _368);
        switchInt(move _367) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        _371 = core::panicking::AssertKind::Eq;
        _373 = Option::<Arguments<'_>>::None;
        _372 = core::panicking::assert_failed::<u128, u128>(move _371, _365, _366, move _373) -> unwind continue;
    }

    bb62: {
        _374 = Shl(const 432_u128, const 100_i32);
        _379 = _374;
        _378 = move _379 as f32 (IntToFloat);
        _377 = move _378 as u128 (FloatToInt);
        _376 = &_377;
        _380 = &_374;
        _375 = (move _376, move _380);
        _381 = (_375.0: &u128);
        _382 = (_375.1: &u128);
        _385 = (*_381);
        _386 = (*_382);
        _384 = Eq(move _385, move _386);
        _383 = Not(move _384);
        switchInt(move _383) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        _387 = core::panicking::AssertKind::Eq;
        _389 = Option::<Arguments<'_>>::None;
        _388 = core::panicking::assert_failed::<u128, u128>(move _387, _381, _382, move _389) -> unwind continue;
    }

    bb64: {
        _394 = _374;
        _393 = move _394 as f64 (IntToFloat);
        _392 = move _393 as u128 (FloatToInt);
        _391 = &_392;
        _395 = &_374;
        _390 = (move _391, move _395);
        _396 = (_390.0: &u128);
        _397 = (_390.1: &u128);
        _400 = (*_396);
        _401 = (*_397);
        _399 = Eq(move _400, move _401);
        _398 = Not(move _399);
        switchInt(move _398) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _402 = core::panicking::AssertKind::Eq;
        _404 = Option::<Arguments<'_>>::None;
        _403 = core::panicking::assert_failed::<u128, u128>(move _402, _396, _397, move _404) -> unwind continue;
    }

    bb66: {
        _405 = Shl(const 1_u128, const 67_i32);
        _849 = const _;
        _848 = const _;
        _411 = _848 as &[&str] (Pointer(Unsize));
        _416 = &_405;
        _415 = core::fmt::rt::Argument::<'_>::new_display::<u128>(_416) -> [return: bb67, unwind continue];
    }

    bb67: {
        _414 = [move _415];
        _413 = &_414;
        _412 = _413 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _410 = Arguments::<'_>::new_v1(move _411, move _412) -> [return: bb68, unwind continue];
    }

    bb68: {
        _409 = format(move _410) -> [return: bb69, unwind continue];
    }

    bb69: {
        _408 = move _409;
        _407 = &_408;
        _406 = (_849, move _407);
        _417 = (_406.0: &&str);
        _418 = (_406.1: &std::string::String);
        _420 = <&str as PartialEq<String>>::eq(_417, _418) -> [return: bb70, unwind: bb215];
    }

    bb70: {
        _419 = Not(move _420);
        switchInt(move _419) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _421 = core::panicking::AssertKind::Eq;
        _423 = Option::<Arguments<'_>>::None;
        _422 = core::panicking::assert_failed::<&str, String>(move _421, _417, _418, move _423) -> bb215;
    }

    bb72: {
        drop(_408) -> [return: bb73, unwind continue];
    }

    bb73: {
        _847 = const _;
        _846 = const _;
        _429 = _846 as &[&str] (Pointer(Unsize));
        _434 = &_405;
        _433 = core::fmt::rt::Argument::<'_>::new_lower_hex::<u128>(_434) -> [return: bb74, unwind continue];
    }

    bb74: {
        _432 = [move _433];
        _431 = &_432;
        _430 = _431 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _428 = Arguments::<'_>::new_v1(move _429, move _430) -> [return: bb75, unwind continue];
    }

    bb75: {
        _427 = format(move _428) -> [return: bb76, unwind continue];
    }

    bb76: {
        _426 = move _427;
        _425 = &_426;
        _424 = (_847, move _425);
        _435 = (_424.0: &&str);
        _436 = (_424.1: &std::string::String);
        _438 = <&str as PartialEq<String>>::eq(_435, _436) -> [return: bb77, unwind: bb214];
    }

    bb77: {
        _437 = Not(move _438);
        switchInt(move _437) -> [0: bb79, otherwise: bb78];
    }

    bb78: {
        _439 = core::panicking::AssertKind::Eq;
        _441 = Option::<Arguments<'_>>::None;
        _440 = core::panicking::assert_failed::<&str, String>(move _439, _435, _436, move _441) -> bb214;
    }

    bb79: {
        drop(_426) -> [return: bb80, unwind continue];
    }

    bb80: {
        _845 = const _;
        _844 = const _;
        _447 = _844 as &[&str] (Pointer(Unsize));
        _452 = &_405;
        _451 = core::fmt::rt::Argument::<'_>::new_octal::<u128>(_452) -> [return: bb81, unwind continue];
    }

    bb81: {
        _450 = [move _451];
        _449 = &_450;
        _448 = _449 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _446 = Arguments::<'_>::new_v1(move _447, move _448) -> [return: bb82, unwind continue];
    }

    bb82: {
        _445 = format(move _446) -> [return: bb83, unwind continue];
    }

    bb83: {
        _444 = move _445;
        _443 = &_444;
        _442 = (_845, move _443);
        _453 = (_442.0: &&str);
        _454 = (_442.1: &std::string::String);
        _456 = <&str as PartialEq<String>>::eq(_453, _454) -> [return: bb84, unwind: bb213];
    }

    bb84: {
        _455 = Not(move _456);
        switchInt(move _455) -> [0: bb86, otherwise: bb85];
    }

    bb85: {
        _457 = core::panicking::AssertKind::Eq;
        _459 = Option::<Arguments<'_>>::None;
        _458 = core::panicking::assert_failed::<&str, String>(move _457, _453, _454, move _459) -> bb213;
    }

    bb86: {
        drop(_444) -> [return: bb87, unwind continue];
    }

    bb87: {
        _843 = const _;
        _842 = const _;
        _465 = _842 as &[&str] (Pointer(Unsize));
        _470 = &_405;
        _469 = core::fmt::rt::Argument::<'_>::new_binary::<u128>(_470) -> [return: bb88, unwind continue];
    }

    bb88: {
        _468 = [move _469];
        _467 = &_468;
        _466 = _467 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _464 = Arguments::<'_>::new_v1(move _465, move _466) -> [return: bb89, unwind continue];
    }

    bb89: {
        _463 = format(move _464) -> [return: bb90, unwind continue];
    }

    bb90: {
        _462 = move _463;
        _461 = &_462;
        _460 = (_843, move _461);
        _471 = (_460.0: &&str);
        _472 = (_460.1: &std::string::String);
        _474 = <&str as PartialEq<String>>::eq(_471, _472) -> [return: bb91, unwind: bb212];
    }

    bb91: {
        _473 = Not(move _474);
        switchInt(move _473) -> [0: bb93, otherwise: bb92];
    }

    bb92: {
        _475 = core::panicking::AssertKind::Eq;
        _477 = Option::<Arguments<'_>>::None;
        _476 = core::panicking::assert_failed::<&str, String>(move _475, _471, _472, move _477) -> bb212;
    }

    bb93: {
        drop(_462) -> [return: bb94, unwind continue];
    }

    bb94: {
        _841 = const _;
        _840 = const _;
        _483 = _840 as &[&str] (Pointer(Unsize));
        _839 = const _;
        _487 = core::fmt::rt::Argument::<'_>::new_display::<u128>(_839) -> [return: bb95, unwind continue];
    }

    bb95: {
        _486 = [move _487];
        _485 = &_486;
        _484 = _485 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _482 = Arguments::<'_>::new_v1(move _483, move _484) -> [return: bb96, unwind continue];
    }

    bb96: {
        _481 = format(move _482) -> [return: bb97, unwind continue];
    }

    bb97: {
        _480 = move _481;
        _479 = &_480;
        _478 = (_841, move _479);
        _488 = (_478.0: &&str);
        _489 = (_478.1: &std::string::String);
        _491 = <&str as PartialEq<String>>::eq(_488, _489) -> [return: bb98, unwind: bb211];
    }

    bb98: {
        _490 = Not(move _491);
        switchInt(move _490) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        _492 = core::panicking::AssertKind::Eq;
        _494 = Option::<Arguments<'_>>::None;
        _493 = core::panicking::assert_failed::<&str, String>(move _492, _488, _489, move _494) -> bb211;
    }

    bb100: {
        drop(_480) -> [return: bb101, unwind continue];
    }

    bb101: {
        _838 = const _;
        _837 = const _;
        _500 = _837 as &[&str] (Pointer(Unsize));
        _505 = &_405;
        _504 = core::fmt::rt::Argument::<'_>::new_debug::<u128>(_505) -> [return: bb102, unwind continue];
    }

    bb102: {
        _503 = [move _504];
        _502 = &_503;
        _501 = _502 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _499 = Arguments::<'_>::new_v1(move _500, move _501) -> [return: bb103, unwind continue];
    }

    bb103: {
        _498 = format(move _499) -> [return: bb104, unwind continue];
    }

    bb104: {
        _497 = move _498;
        _496 = &_497;
        _495 = (_838, move _496);
        _506 = (_495.0: &&str);
        _507 = (_495.1: &std::string::String);
        _509 = <&str as PartialEq<String>>::eq(_506, _507) -> [return: bb105, unwind: bb210];
    }

    bb105: {
        _508 = Not(move _509);
        switchInt(move _508) -> [0: bb107, otherwise: bb106];
    }

    bb106: {
        _510 = core::panicking::AssertKind::Eq;
        _512 = Option::<Arguments<'_>>::None;
        _511 = core::panicking::assert_failed::<&str, String>(move _510, _506, _507, move _512) -> bb210;
    }

    bb107: {
        drop(_497) -> [return: bb108, unwind continue];
    }

    bb108: {
        _514 = &_1;
        _518 = &_1;
        _517 = (*_518);
        _516 = test::black_box::<u128>(move _517) -> [return: bb109, unwind continue];
    }

    bb109: {
        _515 = &_516;
        _513 = (move _514, move _515);
        _519 = (_513.0: &u128);
        _520 = (_513.1: &u128);
        _523 = (*_519);
        _524 = (*_520);
        _522 = Eq(move _523, move _524);
        _521 = Not(move _522);
        switchInt(move _521) -> [0: bb111, otherwise: bb110];
    }

    bb110: {
        _525 = core::panicking::AssertKind::Eq;
        _527 = Option::<Arguments<'_>>::None;
        _526 = core::panicking::assert_failed::<u128, u128>(move _525, _519, _520, move _527) -> unwind continue;
    }

    bb111: {
        _531 = _67;
        _532 = _67;
        _530 = core::num::<impl u128>::checked_mul(move _531, move _532) -> [return: bb112, unwind continue];
    }

    bb112: {
        _529 = &_530;
        _836 = const _;
        _528 = (move _529, _836);
        _533 = (_528.0: &std::option::Option<u128>);
        _534 = (_528.1: &std::option::Option<u128>);
        _536 = <Option<u128> as PartialEq>::eq(_533, _534) -> [return: bb113, unwind continue];
    }

    bb113: {
        _535 = Not(move _536);
        switchInt(move _535) -> [0: bb115, otherwise: bb114];
    }

    bb114: {
        _537 = core::panicking::AssertKind::Eq;
        _539 = Option::<Arguments<'_>>::None;
        _538 = core::panicking::assert_failed::<Option<u128>, Option<u128>>(move _537, _533, _534, move _539) -> unwind continue;
    }

    bb115: {
        _542 = core::num::<impl u128>::checked_mul(_118, _118) -> [return: bb116, unwind continue];
    }

    bb116: {
        _541 = &_542;
        _835 = const _;
        _540 = (move _541, _835);
        _543 = (_540.0: &std::option::Option<u128>);
        _544 = (_540.1: &std::option::Option<u128>);
        _546 = <Option<u128> as PartialEq>::eq(_543, _544) -> [return: bb117, unwind continue];
    }

    bb117: {
        _545 = Not(move _546);
        switchInt(move _545) -> [0: bb119, otherwise: bb118];
    }

    bb118: {
        _547 = core::panicking::AssertKind::Eq;
        _549 = Option::<Arguments<'_>>::None;
        _548 = core::panicking::assert_failed::<Option<u128>, Option<u128>>(move _547, _543, _544, move _549) -> unwind continue;
    }

    bb119: {
        _551 = Sub(const _, const 10_u128);
        _550 = test::black_box::<u128>(move _551) -> [return: bb120, unwind continue];
    }

    bb120: {
        _552 = test::black_box::<u128>(const 17_u128) -> [return: bb121, unwind continue];
    }

    bb121: {
        _556 = _550;
        _557 = test::black_box::<u128>(const 11_u128) -> [return: bb122, unwind continue];
    }

    bb122: {
        _555 = core::num::<impl u128>::checked_add(move _556, move _557) -> [return: bb123, unwind continue];
    }

    bb123: {
        _554 = &_555;
        _834 = const _;
        _553 = (move _554, _834);
        _558 = (_553.0: &std::option::Option<u128>);
        _559 = (_553.1: &std::option::Option<u128>);
        _561 = <Option<u128> as PartialEq>::eq(_558, _559) -> [return: bb124, unwind continue];
    }

    bb124: {
        _560 = Not(move _561);
        switchInt(move _560) -> [0: bb126, otherwise: bb125];
    }

    bb125: {
        _562 = core::panicking::AssertKind::Eq;
        _564 = Option::<Arguments<'_>>::None;
        _563 = core::panicking::assert_failed::<Option<u128>, Option<u128>>(move _562, _558, _559, move _564) -> unwind continue;
    }

    bb126: {
        _568 = _550;
        _569 = _550;
        _567 = core::num::<impl u128>::checked_sub(move _568, move _569) -> [return: bb127, unwind continue];
    }

    bb127: {
        _566 = &_567;
        _833 = const _;
        _565 = (move _566, _833);
        _570 = (_565.0: &std::option::Option<u128>);
        _571 = (_565.1: &std::option::Option<u128>);
        _573 = <Option<u128> as PartialEq>::eq(_570, _571) -> [return: bb128, unwind continue];
    }

    bb128: {
        _572 = Not(move _573);
        switchInt(move _572) -> [0: bb130, otherwise: bb129];
    }

    bb129: {
        _574 = core::panicking::AssertKind::Eq;
        _576 = Option::<Arguments<'_>>::None;
        _575 = core::panicking::assert_failed::<Option<u128>, Option<u128>>(move _574, _570, _571, move _576) -> unwind continue;
    }

    bb130: {
        _580 = _552;
        _581 = test::black_box::<u128>(const 18_u128) -> [return: bb131, unwind continue];
    }

    bb131: {
        _579 = core::num::<impl u128>::checked_sub(move _580, move _581) -> [return: bb132, unwind continue];
    }

    bb132: {
        _578 = &_579;
        _832 = const _;
        _577 = (move _578, _832);
        _582 = (_577.0: &std::option::Option<u128>);
        _583 = (_577.1: &std::option::Option<u128>);
        _585 = <Option<u128> as PartialEq>::eq(_582, _583) -> [return: bb133, unwind continue];
    }

    bb133: {
        _584 = Not(move _585);
        switchInt(move _584) -> [0: bb135, otherwise: bb134];
    }

    bb134: {
        _586 = core::panicking::AssertKind::Eq;
        _588 = Option::<Arguments<'_>>::None;
        _587 = core::panicking::assert_failed::<Option<u128>, Option<u128>>(move _586, _582, _583, move _588) -> unwind continue;
    }

    bb135: {
        _592 = test::black_box::<u128>(const 1_u128) -> [return: bb136, unwind continue];
    }

    bb136: {
        _593 = test::black_box::<u32>(const 127_u32) -> [return: bb137, unwind continue];
    }

    bb137: {
        _591 = core::num::<impl u128>::checked_shl(move _592, move _593) -> [return: bb138, unwind continue];
    }

    bb138: {
        _590 = &_591;
        _831 = const _;
        _589 = (move _590, _831);
        _594 = (_589.0: &std::option::Option<u128>);
        _595 = (_589.1: &std::option::Option<u128>);
        _597 = <Option<u128> as PartialEq>::eq(_594, _595) -> [return: bb139, unwind continue];
    }

    bb139: {
        _596 = Not(move _597);
        switchInt(move _596) -> [0: bb141, otherwise: bb140];
    }

    bb140: {
        _598 = core::panicking::AssertKind::Eq;
        _600 = Option::<Arguments<'_>>::None;
        _599 = core::panicking::assert_failed::<Option<u128>, Option<u128>>(move _598, _594, _595, move _600) -> unwind continue;
    }

    bb141: {
        _604 = _552;
        _605 = test::black_box::<u32>(const 128_u32) -> [return: bb142, unwind continue];
    }

    bb142: {
        _603 = core::num::<impl u128>::checked_shl(move _604, move _605) -> [return: bb143, unwind continue];
    }

    bb143: {
        _602 = &_603;
        _830 = const _;
        _601 = (move _602, _830);
        _606 = (_601.0: &std::option::Option<u128>);
        _607 = (_601.1: &std::option::Option<u128>);
        _609 = <Option<u128> as PartialEq>::eq(_606, _607) -> [return: bb144, unwind continue];
    }

    bb144: {
        _608 = Not(move _609);
        switchInt(move _608) -> [0: bb146, otherwise: bb145];
    }

    bb145: {
        _610 = core::panicking::AssertKind::Eq;
        _612 = Option::<Arguments<'_>>::None;
        _611 = core::panicking::assert_failed::<Option<u128>, Option<u128>>(move _610, _606, _607, move _612) -> unwind continue;
    }

    bb146: {
        _616 = test::black_box::<u128>(const 7589792244411383888_u128) -> [return: bb147, unwind continue];
    }

    bb147: {
        _617 = test::black_box::<u128>(const 3639843608645916812_u128) -> [return: bb148, unwind continue];
    }

    bb148: {
        _618 = Eq(_617, const 0_u128);
        assert(!move _618, "attempt to divide `{}` by zero", _616) -> [success: bb149, unwind continue];
    }

    bb149: {
        _615 = Div(move _616, move _617);
        _614 = &_615;
        _829 = const _;
        _613 = (move _614, _829);
        _619 = (_613.0: &u128);
        _620 = (_613.1: &u128);
        _623 = (*_619);
        _624 = (*_620);
        _622 = Eq(move _623, move _624);
        _621 = Not(move _622);
        switchInt(move _621) -> [0: bb151, otherwise: bb150];
    }

    bb150: {
        _625 = core::panicking::AssertKind::Eq;
        _627 = Option::<Arguments<'_>>::None;
        _626 = core::panicking::assert_failed::<u128, u128>(move _625, _619, _620, move _627) -> unwind continue;
    }

    bb151: {
        _631 = test::black_box::<u128>(const 9224438309919865574_u128) -> [return: bb152, unwind continue];
    }

    bb152: {
        _632 = test::black_box::<u128>(const 21346649061154859252_u128) -> [return: bb153, unwind continue];
    }

    bb153: {
        _633 = Eq(_632, const 0_u128);
        assert(!move _633, "attempt to divide `{}` by zero", _631) -> [success: bb154, unwind continue];
    }

    bb154: {
        _630 = Div(move _631, move _632);
        _629 = &_630;
        _828 = const _;
        _628 = (move _629, _828);
        _634 = (_628.0: &u128);
        _635 = (_628.1: &u128);
        _638 = (*_634);
        _639 = (*_635);
        _637 = Eq(move _638, move _639);
        _636 = Not(move _637);
        switchInt(move _636) -> [0: bb156, otherwise: bb155];
    }

    bb155: {
        _640 = core::panicking::AssertKind::Eq;
        _642 = Option::<Arguments<'_>>::None;
        _641 = core::panicking::assert_failed::<u128, u128>(move _640, _634, _635, move _642) -> unwind continue;
    }

    bb156: {
        _647 = Shl(const 14141094618646152992_u128, const 64_i32);
        _646 = test::black_box::<u128>(move _647) -> [return: bb157, unwind continue];
    }

    bb157: {
        _649 = Shl(const 688596332430216986_u128, const 64_i32);
        _648 = test::black_box::<u128>(move _649) -> [return: bb158, unwind continue];
    }

    bb158: {
        _650 = Eq(_648, const 0_u128);
        assert(!move _650, "attempt to divide `{}` by zero", _646) -> [success: bb159, unwind continue];
    }

    bb159: {
        _645 = Div(move _646, move _648);
        _644 = &_645;
        _827 = const _;
        _643 = (move _644, _827);
        _651 = (_643.0: &u128);
        _652 = (_643.1: &u128);
        _655 = (*_651);
        _656 = (*_652);
        _654 = Eq(move _655, move _656);
        _653 = Not(move _654);
        switchInt(move _653) -> [0: bb161, otherwise: bb160];
    }

    bb160: {
        _657 = core::panicking::AssertKind::Eq;
        _659 = Option::<Arguments<'_>>::None;
        _658 = core::panicking::assert_failed::<u128, u128>(move _657, _651, _652, move _659) -> unwind continue;
    }

    bb161: {
        _663 = test::black_box::<u128>(const 224642446154217440146349520696551801288_u128) -> [return: bb162, unwind continue];
    }

    bb162: {
        _665 = Shl(const 1_u128, const 120_i32);
        _664 = test::black_box::<u128>(move _665) -> [return: bb163, unwind continue];
    }

    bb163: {
        _666 = Eq(_664, const 0_u128);
        assert(!move _666, "attempt to divide `{}` by zero", _663) -> [success: bb164, unwind continue];
    }

    bb164: {
        _662 = Div(move _663, move _664);
        _661 = &_662;
        _826 = const _;
        _660 = (move _661, _826);
        _667 = (_660.0: &u128);
        _668 = (_660.1: &u128);
        _671 = (*_667);
        _672 = (*_668);
        _670 = Eq(move _671, move _672);
        _669 = Not(move _670);
        switchInt(move _669) -> [0: bb166, otherwise: bb165];
    }

    bb165: {
        _673 = core::panicking::AssertKind::Eq;
        _675 = Option::<Arguments<'_>>::None;
        _674 = core::panicking::assert_failed::<u128, u128>(move _673, _667, _668, move _675) -> unwind continue;
    }

    bb166: {
        _679 = test::black_box::<u128>(const 304156603570013308121879392159346997825_u128) -> [return: bb167, unwind continue];
    }

    bb167: {
        _681 = Shl(const 3679382634575971452_u128, const 64_i32);
        _680 = test::black_box::<u128>(move _681) -> [return: bb168, unwind continue];
    }

    bb168: {
        _682 = Eq(_680, const 0_u128);
        assert(!move _682, "attempt to divide `{}` by zero", _679) -> [success: bb169, unwind continue];
    }

    bb169: {
        _678 = Div(move _679, move _680);
        _677 = &_678;
        _825 = const _;
        _676 = (move _677, _825);
        _683 = (_676.0: &u128);
        _684 = (_676.1: &u128);
        _687 = (*_683);
        _688 = (*_684);
        _686 = Eq(move _687, move _688);
        _685 = Not(move _686);
        switchInt(move _685) -> [0: bb171, otherwise: bb170];
    }

    bb170: {
        _689 = core::panicking::AssertKind::Eq;
        _691 = Option::<Arguments<'_>>::None;
        _690 = core::panicking::assert_failed::<u128, u128>(move _689, _683, _684, move _691) -> unwind continue;
    }

    bb171: {
        _697 = Shl(const 3_u128, const 64_i32);
        _696 = BitOr(move _697, const 1_u128);
        _695 = test::black_box::<u128>(move _696) -> [return: bb172, unwind continue];
    }

    bb172: {
        _699 = Shl(const 3_u128, const 64_i32);
        _698 = test::black_box::<u128>(move _699) -> [return: bb173, unwind continue];
    }

    bb173: {
        _700 = Eq(_698, const 0_u128);
        assert(!move _700, "attempt to divide `{}` by zero", _695) -> [success: bb174, unwind continue];
    }

    bb174: {
        _694 = Div(move _695, move _698);
        _693 = &_694;
        _824 = const _;
        _692 = (move _693, _824);
        _701 = (_692.0: &u128);
        _702 = (_692.1: &u128);
        _705 = (*_701);
        _706 = (*_702);
        _704 = Eq(move _705, move _706);
        _703 = Not(move _704);
        switchInt(move _703) -> [0: bb176, otherwise: bb175];
    }

    bb175: {
        _707 = core::panicking::AssertKind::Eq;
        _709 = Option::<Arguments<'_>>::None;
        _708 = core::panicking::assert_failed::<u128, u128>(move _707, _701, _702, move _709) -> unwind continue;
    }

    bb176: {
        _713 = test::black_box::<u128>(const 136026697485447869814030336958517316706_u128) -> [return: bb177, unwind continue];
    }

    bb177: {
        _715 = Shl(const 12924036241308923227_u128, const 64_i32);
        _714 = test::black_box::<u128>(move _715) -> [return: bb178, unwind continue];
    }

    bb178: {
        _716 = Eq(_714, const 0_u128);
        assert(!move _716, "attempt to divide `{}` by zero", _713) -> [success: bb179, unwind continue];
    }

    bb179: {
        _712 = Div(move _713, move _714);
        _711 = &_712;
        _823 = const _;
        _710 = (move _711, _823);
        _717 = (_710.0: &u128);
        _718 = (_710.1: &u128);
        _721 = (*_717);
        _722 = (*_718);
        _720 = Eq(move _721, move _722);
        _719 = Not(move _720);
        switchInt(move _719) -> [0: bb181, otherwise: bb180];
    }

    bb180: {
        _723 = core::panicking::AssertKind::Eq;
        _725 = Option::<Arguments<'_>>::None;
        _724 = core::panicking::assert_failed::<u128, u128>(move _723, _717, _718, move _725) -> unwind continue;
    }

    bb181: {
        _729 = test::black_box::<u128>(const 82795666358803121467850452949784672617_u128) -> [return: bb182, unwind continue];
    }

    bb182: {
        _731 = Shl(const 1_u128, const 4_i32);
        _730 = test::black_box::<u128>(move _731) -> [return: bb183, unwind continue];
    }

    bb183: {
        _732 = Eq(_730, const 0_u128);
        assert(!move _732, "attempt to divide `{}` by zero", _729) -> [success: bb184, unwind continue];
    }

    bb184: {
        _728 = Div(move _729, move _730);
        _727 = &_728;
        _822 = const _;
        _726 = (move _727, _822);
        _733 = (_726.0: &u128);
        _734 = (_726.1: &u128);
        _737 = (*_733);
        _738 = (*_734);
        _736 = Eq(move _737, move _738);
        _735 = Not(move _736);
        switchInt(move _735) -> [0: bb186, otherwise: bb185];
    }

    bb185: {
        _739 = core::panicking::AssertKind::Eq;
        _741 = Option::<Arguments<'_>>::None;
        _740 = core::panicking::assert_failed::<u128, u128>(move _739, _733, _734, move _741) -> unwind continue;
    }

    bb186: {
        _745 = test::black_box::<u128>(const 55280167819696715455823166875922227726_u128) -> [return: bb187, unwind continue];
    }

    bb187: {
        _746 = test::black_box::<u128>(const 10379511822556452599_u128) -> [return: bb188, unwind continue];
    }

    bb188: {
        _747 = Eq(_746, const 0_u128);
        assert(!move _747, "attempt to divide `{}` by zero", _745) -> [success: bb189, unwind continue];
    }

    bb189: {
        _744 = Div(move _745, move _746);
        _743 = &_744;
        _821 = const _;
        _742 = (move _743, _821);
        _748 = (_742.0: &u128);
        _749 = (_742.1: &u128);
        _752 = (*_748);
        _753 = (*_749);
        _751 = Eq(move _752, move _753);
        _750 = Not(move _751);
        switchInt(move _750) -> [0: bb191, otherwise: bb190];
    }

    bb190: {
        _754 = core::panicking::AssertKind::Eq;
        _756 = Option::<Arguments<'_>>::None;
        _755 = core::panicking::assert_failed::<u128, u128>(move _754, _748, _749, move _756) -> unwind continue;
    }

    bb191: {
        _760 = test::black_box::<u128>(const 265474534378289955536052708756420375989_u128) -> [return: bb192, unwind continue];
    }

    bb192: {
        _761 = test::black_box::<u128>(const 39203990361127848189174454383306535492_u128) -> [return: bb193, unwind continue];
    }

    bb193: {
        _762 = Eq(_761, const 0_u128);
        assert(!move _762, "attempt to divide `{}` by zero", _760) -> [success: bb194, unwind continue];
    }

    bb194: {
        _759 = Div(move _760, move _761);
        _758 = &_759;
        _820 = const _;
        _757 = (move _758, _820);
        _763 = (_757.0: &u128);
        _764 = (_757.1: &u128);
        _767 = (*_763);
        _768 = (*_764);
        _766 = Eq(move _767, move _768);
        _765 = Not(move _766);
        switchInt(move _765) -> [0: bb196, otherwise: bb195];
    }

    bb195: {
        _769 = core::panicking::AssertKind::Eq;
        _771 = Option::<Arguments<'_>>::None;
        _770 = core::panicking::assert_failed::<u128, u128>(move _769, _763, _764, move _771) -> unwind continue;
    }

    bb196: {
        _775 = test::black_box::<u128>(const 137671351235610359249066962124074918258_u128) -> [return: bb197, unwind continue];
    }

    bb197: {
        _776 = test::black_box::<u128>(const 163552951931234411548053288428401067567_u128) -> [return: bb198, unwind continue];
    }

    bb198: {
        _777 = Eq(_776, const 0_u128);
        assert(!move _777, "attempt to divide `{}` by zero", _775) -> [success: bb199, unwind continue];
    }

    bb199: {
        _774 = Div(move _775, move _776);
        _773 = &_774;
        _819 = const _;
        _772 = (move _773, _819);
        _778 = (_772.0: &u128);
        _779 = (_772.1: &u128);
        _782 = (*_778);
        _783 = (*_779);
        _781 = Eq(move _782, move _783);
        _780 = Not(move _781);
        switchInt(move _780) -> [0: bb201, otherwise: bb200];
    }

    bb200: {
        _784 = core::panicking::AssertKind::Eq;
        _786 = Option::<Arguments<'_>>::None;
        _785 = core::panicking::assert_failed::<u128, u128>(move _784, _778, _779, move _786) -> unwind continue;
    }

    bb201: {
        _818 = const _;
        _817 = const _;
        _791 = _817 as &[u128] (Pointer(Unsize));
        _790 = core::slice::<impl [u128]>::iter(move _791) -> [return: bb202, unwind continue];
    }

    bb202: {
        _789 = <std::slice::Iter<'_, u128> as Iterator>::sum::<u128>(move _790) -> [return: bb203, unwind continue];
    }

    bb203: {
        _788 = &_789;
        _787 = (_818, move _788);
        _792 = (_787.0: &u128);
        _793 = (_787.1: &u128);
        _796 = (*_792);
        _797 = (*_793);
        _795 = Eq(move _796, move _797);
        _794 = Not(move _795);
        switchInt(move _794) -> [0: bb205, otherwise: bb204];
    }

    bb204: {
        _798 = core::panicking::AssertKind::Eq;
        _800 = Option::<Arguments<'_>>::None;
        _799 = core::panicking::assert_failed::<u128, u128>(move _798, _792, _793, move _800) -> unwind continue;
    }

    bb205: {
        _816 = const _;
        _815 = const _;
        _805 = _815 as &[u128] (Pointer(Unsize));
        _804 = core::slice::<impl [u128]>::iter(move _805) -> [return: bb206, unwind continue];
    }

    bb206: {
        _803 = <std::slice::Iter<'_, u128> as Iterator>::product::<u128>(move _804) -> [return: bb207, unwind continue];
    }

    bb207: {
        _802 = &_803;
        _801 = (_816, move _802);
        _806 = (_801.0: &u128);
        _807 = (_801.1: &u128);
        _810 = (*_806);
        _811 = (*_807);
        _809 = Eq(move _810, move _811);
        _808 = Not(move _809);
        switchInt(move _808) -> [0: bb209, otherwise: bb208];
    }

    bb208: {
        _812 = core::panicking::AssertKind::Eq;
        _814 = Option::<Arguments<'_>>::None;
        _813 = core::panicking::assert_failed::<u128, u128>(move _812, _806, _807, move _814) -> unwind continue;
    }

    bb209: {
        return;
    }

    bb210 (cleanup): {
        drop(_497) -> [return: bb216, unwind terminate];
    }

    bb211 (cleanup): {
        drop(_480) -> [return: bb216, unwind terminate];
    }

    bb212 (cleanup): {
        drop(_462) -> [return: bb216, unwind terminate];
    }

    bb213 (cleanup): {
        drop(_444) -> [return: bb216, unwind terminate];
    }

    bb214 (cleanup): {
        drop(_426) -> [return: bb216, unwind terminate];
    }

    bb215 (cleanup): {
        drop(_408) -> [return: bb216, unwind terminate];
    }

    bb216 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[u128; 4] = {
    let mut _0: &[u128; 4];
    let mut _1: [u128; 4];

    bb0: {
        _1 = [const 1_u128, const 2_u128, const 3_u128, const 4_u128];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 24_u128;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[u128; 4] = {
    let mut _0: &[u128; 4];
    let mut _1: [u128; 4];

    bb0: {
        _1 = [const 1_u128, const 2_u128, const 3_u128, const 4_u128];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 10_u128;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 0_u128;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 6_u128;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 5325892851681469816_u128;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 5174729147425195091740653309361542038_u128;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 0_u128;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 1_u128;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 4_u128;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 169_u128;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 20_u128;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 0_u128;
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 2_u128;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &Option<u128> = {
    let mut _0: &std::option::Option<u128>;
    let mut _1: std::option::Option<u128>;

    bb0: {
        _1 = Option::<u128>::None;
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &Option<u128> = {
    let mut _0: &std::option::Option<u128>;
    let mut _1: std::option::Option<u128>;
    let mut _2: u128;

    bb0: {
        _2 = Shl(const 1_u128, const 127_i32);
        _1 = Option::<u128>::Some(move _2);
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &Option<u128> = {
    let mut _0: &std::option::Option<u128>;
    let mut _1: std::option::Option<u128>;

    bb0: {
        _1 = Option::<u128>::None;
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &Option<u128> = {
    let mut _0: &std::option::Option<u128>;
    let mut _1: std::option::Option<u128>;

    bb0: {
        _1 = Option::<u128>::Some(const 0_u128);
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &Option<u128> = {
    let mut _0: &std::option::Option<u128>;
    let mut _1: std::option::Option<u128>;

    bb0: {
        _1 = Option::<u128>::None;
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &Option<u128> = {
    let mut _0: &std::option::Option<u128>;
    let mut _1: std::option::Option<u128>;

    bb0: {
        _1 = Option::<u128>::None;
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &Option<u128> = {
    let mut _0: &std::option::Option<u128>;
    let mut _1: std::option::Option<u128>;

    bb0: {
        _1 = Option::<u128>::Some(const 126773525390625_u128);
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "147573952589676412928";
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[26] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "340282366920938463463374607431768211455";
        _0 = &_1;
        return;
    }
}

promoted[27] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[28] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "10000000000000000000000000000000000000000000000000000000000000000000";
        _0 = &_1;
        return;
    }
}

promoted[29] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[30] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "20000000000000000000000";
        _0 = &_1;
        return;
    }
}

promoted[31] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[32] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "80000000000000000";
        _0 = &_1;
        return;
    }
}

promoted[33] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[34] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "147573952589676412928";
        _0 = &_1;
        return;
    }
}

promoted[35] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const 1512366075204170947332355369683137040_i128;
        _0 = &_1;
        return;
    }
}

promoted[36] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 18364758544493064720_u64;
        _0 = &_1;
        return;
    }
}

promoted[37] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 11259375_u64;
        _0 = &_1;
        return;
    }
}

promoted[38] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = Not(const 0_u64);
        _0 = &_1;
        return;
    }
}

promoted[39] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 337257634770530121568545925633968963584_u128;
        _0 = &_1;
        return;
    }
}

promoted[40] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 40992764608243447_u128;
        _0 = &_1;
        return;
    }
}

promoted[41] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 6365794402102296_u128;
        _0 = &_1;
        return;
    }
}

promoted[42] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 15_u128;
        _0 = &_1;
        return;
    }
}

promoted[43] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 0_u128;
        _0 = &_1;
        return;
    }
}

promoted[44] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 36008716076289784460294175468646120_u128;
        _0 = &_1;
        return;
    }
}

promoted[45] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 1329227995784915872903807060280344576_u128;
        _0 = &_1;
        return;
    }
}

promoted[46] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 1512366075204170947332355369671877665_u128;
        _0 = &_1;
        return;
    }
}

promoted[47] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 0_u128;
        _0 = &_1;
        return;
    }
}

promoted[48] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 3024732150408341894664710739366274080_u128;
        _0 = &_1;
        return;
    }
}

promoted[49] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 45037500_u128;
        _0 = &_1;
        return;
    }
}

promoted[50] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 16071526739967441558837890625_u128;
        _0 = &_1;
        return;
    }
}

promoted[51] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 126773525390625_u128;
        _0 = &_1;
        return;
    }
}

promoted[52] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 333631034724246903186321388733867229182_u128;
        _0 = &_1;
        return;
    }
}

promoted[53] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = Not(const 1_u128);
        _0 = &_1;
        return;
    }
}

promoted[54] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 0_u128;
        _0 = &_1;
        return;
    }
}

promoted[55] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 0_u128;
        _0 = &_1;
        return;
    }
}
