// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: !;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: !;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: !;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: !;
    let mut _13: (&u8, &u8);
    let mut _14: bool;
    let _15: &u8;
    let _16: &u8;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: u8;
    let mut _20: u8;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _24: (&u8, &u8);
    let mut _25: bool;
    let _26: &u8;
    let _27: &u8;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: u8;
    let mut _31: u8;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: !;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: !;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: !;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: !;
    let mut _47: (&u16, &u16);
    let mut _48: bool;
    let _49: &u16;
    let _50: &u16;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: u16;
    let mut _54: u16;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _58: (&u16, &u16);
    let mut _59: bool;
    let _60: &u16;
    let _61: &u16;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: u16;
    let mut _65: u16;
    let _67: !;
    let mut _68: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: !;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: !;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: !;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: !;
    let mut _81: (&u32, &u32);
    let mut _82: bool;
    let _83: &u32;
    let _84: &u32;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: u32;
    let mut _88: u32;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _92: (&u32, &u32);
    let mut _93: bool;
    let _94: &u32;
    let _95: &u32;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: u32;
    let mut _99: u32;
    let _101: !;
    let mut _102: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _103: &u32;
    let mut _104: &u32;
    let mut _105: &u32;
    let mut _106: &u32;
    let mut _107: &u16;
    let mut _108: &u16;
    let mut _109: &u16;
    let mut _110: &u16;
    let mut _111: &u8;
    let mut _112: &u8;
    let mut _113: &u8;
    let mut _114: &u8;
    scope 1 {
        debug left_val => _15;
        debug right_val => _16;
        let _21: core::panicking::AssertKind;
        scope 2 {
            debug kind => _21;
        }
    }
    scope 3 {
        debug left_val => _26;
        debug right_val => _27;
        let _32: core::panicking::AssertKind;
        scope 4 {
            debug kind => _32;
        }
    }
    scope 5 {
        debug left_val => _49;
        debug right_val => _50;
        let _55: core::panicking::AssertKind;
        scope 6 {
            debug kind => _55;
        }
    }
    scope 7 {
        debug left_val => _60;
        debug right_val => _61;
        let _66: core::panicking::AssertKind;
        scope 8 {
            debug kind => _66;
        }
    }
    scope 9 {
        debug left_val => _83;
        debug right_val => _84;
        let _89: core::panicking::AssertKind;
        scope 10 {
            debug kind => _89;
        }
    }
    scope 11 {
        debug left_val => _94;
        debug right_val => _95;
        let _100: core::panicking::AssertKind;
        scope 12 {
            debug kind => _100;
        }
    }

    bb0: {
        _2 = Lt(const 0_u8, const u8::MAX);
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = core::panicking::panic(const "assertion failed: (0u8 < 255u8)") -> unwind continue;
    }

    bb2: {
        _5 = Le(const 0_u8, const u8::MAX);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _6 = core::panicking::panic(const "assertion failed: (0u8 <= 255u8)") -> unwind continue;
    }

    bb4: {
        _8 = Gt(const u8::MAX, const 0_u8);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _9 = core::panicking::panic(const "assertion failed: (255u8 > 0u8)") -> unwind continue;
    }

    bb6: {
        _11 = Ge(const u8::MAX, const 0_u8);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _12 = core::panicking::panic(const "assertion failed: (255u8 >= 0u8)") -> unwind continue;
    }

    bb8: {
        _14 = Eq(const 10_u8, const 0_u8);
        assert(!move _14, "attempt to divide `{}` by zero", const 250_u8) -> [success: bb9, unwind continue];
    }

    bb9: {
        _114 = const _;
        _113 = const _;
        _13 = (_114, _113);
        _15 = (_13.0: &u8);
        _16 = (_13.1: &u8);
        _19 = (*_15);
        _20 = (*_16);
        _18 = Eq(move _19, move _20);
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<u8, u8>(move _21, _15, _16, move _23) -> unwind continue;
    }

    bb11: {
        _25 = Eq(const 10_u8, const 0_u8);
        assert(!move _25, "attempt to calculate the remainder of `{}` with a divisor of zero", const u8::MAX) -> [success: bb12, unwind continue];
    }

    bb12: {
        _112 = const _;
        _111 = const _;
        _24 = (_112, _111);
        _26 = (_24.0: &u8);
        _27 = (_24.1: &u8);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<u8, u8>(move _32, _26, _27, move _34) -> unwind continue;
    }

    bb14: {
        _36 = Lt(const 0_u16, const 60000_u16);
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _37 = core::panicking::panic(const "assertion failed: (0u16 < 60000u16)") -> unwind continue;
    }

    bb16: {
        _39 = Le(const 0_u16, const 60000_u16);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _40 = core::panicking::panic(const "assertion failed: (0u16 <= 60000u16)") -> unwind continue;
    }

    bb18: {
        _42 = Gt(const 60000_u16, const 0_u16);
        _41 = Not(move _42);
        switchInt(move _41) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _43 = core::panicking::panic(const "assertion failed: (60000u16 > 0u16)") -> unwind continue;
    }

    bb20: {
        _45 = Ge(const 60000_u16, const 0_u16);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _46 = core::panicking::panic(const "assertion failed: (60000u16 >= 0u16)") -> unwind continue;
    }

    bb22: {
        _48 = Eq(const 10_u16, const 0_u16);
        assert(!move _48, "attempt to divide `{}` by zero", const 60000_u16) -> [success: bb23, unwind continue];
    }

    bb23: {
        _110 = const _;
        _109 = const _;
        _47 = (_110, _109);
        _49 = (_47.0: &u16);
        _50 = (_47.1: &u16);
        _53 = (*_49);
        _54 = (*_50);
        _52 = Eq(move _53, move _54);
        _51 = Not(move _52);
        switchInt(move _51) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<u16, u16>(move _55, _49, _50, move _57) -> unwind continue;
    }

    bb25: {
        _59 = Eq(const 10_u16, const 0_u16);
        assert(!move _59, "attempt to calculate the remainder of `{}` with a divisor of zero", const 60005_u16) -> [success: bb26, unwind continue];
    }

    bb26: {
        _108 = const _;
        _107 = const _;
        _58 = (_108, _107);
        _60 = (_58.0: &u16);
        _61 = (_58.1: &u16);
        _64 = (*_60);
        _65 = (*_61);
        _63 = Eq(move _64, move _65);
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _66 = core::panicking::AssertKind::Eq;
        _68 = Option::<Arguments<'_>>::None;
        _67 = core::panicking::assert_failed::<u16, u16>(move _66, _60, _61, move _68) -> unwind continue;
    }

    bb28: {
        _70 = Lt(const 0_u32, const 4000000000_u32);
        _69 = Not(move _70);
        switchInt(move _69) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _71 = core::panicking::panic(const "assertion failed: (0u32 < 4000000000u32)") -> unwind continue;
    }

    bb30: {
        _73 = Le(const 0_u32, const 4000000000_u32);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _74 = core::panicking::panic(const "assertion failed: (0u32 <= 4000000000u32)") -> unwind continue;
    }

    bb32: {
        _76 = Gt(const 4000000000_u32, const 0_u32);
        _75 = Not(move _76);
        switchInt(move _75) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _77 = core::panicking::panic(const "assertion failed: (4000000000u32 > 0u32)") -> unwind continue;
    }

    bb34: {
        _79 = Ge(const 4000000000_u32, const 0_u32);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _80 = core::panicking::panic(const "assertion failed: (4000000000u32 >= 0u32)") -> unwind continue;
    }

    bb36: {
        _82 = Eq(const 10_u32, const 0_u32);
        assert(!move _82, "attempt to divide `{}` by zero", const 4000000000_u32) -> [success: bb37, unwind continue];
    }

    bb37: {
        _106 = const _;
        _105 = const _;
        _81 = (_106, _105);
        _83 = (_81.0: &u32);
        _84 = (_81.1: &u32);
        _87 = (*_83);
        _88 = (*_84);
        _86 = Eq(move _87, move _88);
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<u32, u32>(move _89, _83, _84, move _91) -> unwind continue;
    }

    bb39: {
        _93 = Eq(const 10_u32, const 0_u32);
        assert(!move _93, "attempt to calculate the remainder of `{}` with a divisor of zero", const 4000000005_u32) -> [success: bb40, unwind continue];
    }

    bb40: {
        _104 = const _;
        _103 = const _;
        _92 = (_104, _103);
        _94 = (_92.0: &u32);
        _95 = (_92.1: &u32);
        _98 = (*_94);
        _99 = (*_95);
        _97 = Eq(move _98, move _99);
        _96 = Not(move _97);
        switchInt(move _96) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _100 = core::panicking::AssertKind::Eq;
        _102 = Option::<Arguments<'_>>::None;
        _101 = core::panicking::assert_failed::<u32, u32>(move _100, _94, _95, move _102) -> unwind continue;
    }

    bb42: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 5_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = Rem(const 4000000005_u32, const 10_u32);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 400000000_u32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = Div(const 4000000000_u32, const 10_u32);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 5_u16;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = Rem(const 60005_u16, const 10_u16);
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 6000_u16;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = Div(const 60000_u16, const 10_u16);
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 5_u8;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = Rem(const u8::MAX, const 10_u8);
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 25_u8;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = Div(const 250_u8, const 10_u8);
        _0 = &_1;
        return;
    }
}
