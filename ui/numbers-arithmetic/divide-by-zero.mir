// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/divide-by-zero.rs:6:11: 6:11
    let _1: i32;                         // in scope 0 at ui/numbers-arithmetic/divide-by-zero.rs:7:9: 7:10
    let mut _3: i32;                     // in scope 0 at ui/numbers-arithmetic/divide-by-zero.rs:8:18: 8:19
    let mut _4: bool;                    // in scope 0 at ui/numbers-arithmetic/divide-by-zero.rs:8:14: 8:19
    scope 1 {
        debug y => _1;                   // in scope 1 at ui/numbers-arithmetic/divide-by-zero.rs:7:9: 7:10
        let _2: i32;                     // in scope 1 at ui/numbers-arithmetic/divide-by-zero.rs:8:9: 8:11
        scope 2 {
            debug _z => _2;              // in scope 2 at ui/numbers-arithmetic/divide-by-zero.rs:8:9: 8:11
        }
    }

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/numbers-arithmetic/divide-by-zero.rs:7:13: 7:14
        _3 = const 0_i32;                // scope 1 at ui/numbers-arithmetic/divide-by-zero.rs:8:18: 8:19
        _4 = const true;                 // scope 1 at ui/numbers-arithmetic/divide-by-zero.rs:8:14: 8:19
        assert(!move _4, "attempt to divide `{}` by zero", const 1_i32) -> bb1; // scope 1 at ui/numbers-arithmetic/divide-by-zero.rs:8:14: 8:19
    }

    bb1: {
        _2 = Div(const 1_i32, move _3);  // scope 1 at ui/numbers-arithmetic/divide-by-zero.rs:8:14: 8:19
        return;                          // scope 0 at ui/numbers-arithmetic/divide-by-zero.rs:9:2: 9:2
    }
}
