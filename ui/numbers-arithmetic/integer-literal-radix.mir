// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: isize;
    let mut _7: (&isize, &isize);
    let mut _8: &isize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: isize;
    let mut _14: isize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&isize, &isize);
    let mut _19: &isize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: isize;
    let mut _25: isize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&isize, &isize);
    let mut _30: &isize;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: isize;
    let mut _36: isize;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&isize, &isize);
    let mut _41: &isize;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: isize;
    let mut _47: isize;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&isize, &isize);
    let mut _52: &isize;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: isize;
    let mut _58: isize;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _62: (&isize, &isize);
    let mut _63: &isize;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: isize;
    let mut _69: isize;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => const 48879_isize;
        let _2: isize;
        scope 2 {
            debug b => const 493_isize;
            let _3: isize;
            scope 3 {
                debug c => const 21_isize;
                let _4: isize;
                scope 4 {
                    debug d => const -48879_isize;
                    let _5: isize;
                    scope 5 {
                        debug e => const -493_isize;
                        let _6: isize;
                        scope 6 {
                            debug f => const -21_isize;
                            let _9: &isize;
                            let _10: &isize;
                            let _20: &isize;
                            let _21: &isize;
                            let _31: &isize;
                            let _32: &isize;
                            let _42: &isize;
                            let _43: &isize;
                            let _53: &isize;
                            let _54: &isize;
                            let _64: &isize;
                            let _65: &isize;
                            let mut _73: &isize;
                            let mut _74: &isize;
                            let mut _75: &isize;
                            let mut _76: &isize;
                            let mut _77: &isize;
                            let mut _78: &isize;
                            scope 7 {
                                debug left_val => _9;
                                debug right_val => _10;
                                let _15: core::panicking::AssertKind;
                                scope 8 {
                                    debug kind => _15;
                                }
                            }
                            scope 9 {
                                debug left_val => _20;
                                debug right_val => _21;
                                let _26: core::panicking::AssertKind;
                                scope 10 {
                                    debug kind => _26;
                                }
                            }
                            scope 11 {
                                debug left_val => _31;
                                debug right_val => _32;
                                let _37: core::panicking::AssertKind;
                                scope 12 {
                                    debug kind => _37;
                                }
                            }
                            scope 13 {
                                debug left_val => _42;
                                debug right_val => _43;
                                let _48: core::panicking::AssertKind;
                                scope 14 {
                                    debug kind => _48;
                                }
                            }
                            scope 15 {
                                debug left_val => _53;
                                debug right_val => _54;
                                let _59: core::panicking::AssertKind;
                                scope 16 {
                                    debug kind => _59;
                                }
                            }
                            scope 17 {
                                debug left_val => _64;
                                debug right_val => _65;
                                let _70: core::panicking::AssertKind;
                                scope 18 {
                                    debug kind => _70;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 48879_isize;
        _2 = const 493_isize;
        _3 = const 21_isize;
        _4 = const -48879_isize;
        _5 = const -493_isize;
        _6 = const -21_isize;
        _8 = &_1;
        _78 = const _;
        _7 = (move _8, _78);
        _9 = (_7.0: &isize);
        _10 = (_7.1: &isize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<isize, isize>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb2: {
        _19 = &_2;
        _77 = const _;
        _18 = (move _19, _77);
        _20 = (_18.0: &isize);
        _21 = (_18.1: &isize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<isize, isize>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb4: {
        _30 = &_3;
        _76 = const _;
        _29 = (move _30, _76);
        _31 = (_29.0: &isize);
        _32 = (_29.1: &isize);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<isize, isize>(move _37, _31, _32, move _39) -> unwind continue;
    }

    bb6: {
        _41 = &_4;
        _75 = const _;
        _40 = (move _41, _75);
        _42 = (_40.0: &isize);
        _43 = (_40.1: &isize);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<isize, isize>(move _48, _42, _43, move _50) -> unwind continue;
    }

    bb8: {
        _52 = &_5;
        _74 = const _;
        _51 = (move _52, _74);
        _53 = (_51.0: &isize);
        _54 = (_51.1: &isize);
        _57 = (*_53);
        _58 = (*_54);
        _56 = Eq(move _57, move _58);
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _59 = core::panicking::AssertKind::Eq;
        _61 = Option::<Arguments<'_>>::None;
        _60 = core::panicking::assert_failed::<isize, isize>(move _59, _53, _54, move _61) -> unwind continue;
    }

    bb10: {
        _63 = &_6;
        _73 = const _;
        _62 = (move _63, _73);
        _64 = (_62.0: &isize);
        _65 = (_62.1: &isize);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<isize, isize>(move _70, _64, _65, move _72) -> unwind continue;
    }

    bb12: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const -21_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const -493_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const -48879_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 21_isize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 493_isize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 48879_isize;
        _0 = &_1;
        return;
    }
}
