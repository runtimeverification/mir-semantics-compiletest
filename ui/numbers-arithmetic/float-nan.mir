// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/float-nan.rs:3:15: 3:15
    let _1: f64;                         // in scope 0 at ui/numbers-arithmetic/float-nan.rs:4:7: 4:10
    let mut _2: bool;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:5:3: 5:26
    let mut _3: bool;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:5:11: 5:25
    let mut _4: f64;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:5:11: 5:16
    let mut _5: !;                       // in scope 0 at ui/numbers-arithmetic/float-nan.rs:5:3: 5:26
    let mut _8: (&f64, &f64);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _9: &f64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _10: f64;                        // in scope 0 at ui/numbers-arithmetic/float-nan.rs:9:14: 9:18
    let mut _11: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:9:15: 9:18
    let mut _12: &f64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _17: f64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _18: f64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _20: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _21: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _22: &f64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _23: &f64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _24: &f64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _25: &f64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _27: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:11:3: 11:24
    let mut _28: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:11:12: 11:23
    let mut _29: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:11:12: 11:15
    let mut _30: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:11:20: 11:23
    let mut _31: !;                      // in scope 0 at ui/numbers-arithmetic/float-nan.rs:11:3: 11:24
    let mut _32: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:12:3: 12:24
    let mut _33: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:12:12: 12:23
    let mut _34: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:12:12: 12:15
    let mut _35: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:12:19: 12:23
    let mut _36: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:12:20: 12:23
    let mut _37: !;                      // in scope 0 at ui/numbers-arithmetic/float-nan.rs:12:3: 12:24
    let mut _38: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:13:3: 13:24
    let mut _39: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:13:11: 13:23
    let mut _40: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:13:11: 13:15
    let mut _41: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:13:12: 13:15
    let mut _42: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:13:19: 13:23
    let mut _43: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:13:20: 13:23
    let mut _44: !;                      // in scope 0 at ui/numbers-arithmetic/float-nan.rs:13:3: 13:24
    let mut _45: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:14:3: 14:24
    let mut _46: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:14:11: 14:23
    let mut _47: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:14:11: 14:15
    let mut _48: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:14:12: 14:15
    let mut _49: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:14:20: 14:23
    let mut _50: !;                      // in scope 0 at ui/numbers-arithmetic/float-nan.rs:14:3: 14:24
    let mut _51: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:16:3: 16:24
    let mut _52: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:16:12: 16:23
    let mut _53: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:16:12: 16:15
    let mut _54: !;                      // in scope 0 at ui/numbers-arithmetic/float-nan.rs:16:3: 16:24
    let mut _55: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:17:3: 17:24
    let mut _56: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:17:12: 17:23
    let mut _57: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:17:12: 17:15
    let mut _58: !;                      // in scope 0 at ui/numbers-arithmetic/float-nan.rs:17:3: 17:24
    let mut _59: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:18:3: 18:24
    let mut _60: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:18:12: 18:23
    let mut _61: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:18:12: 18:15
    let mut _62: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:18:20: 18:23
    let mut _63: !;                      // in scope 0 at ui/numbers-arithmetic/float-nan.rs:18:3: 18:24
    let mut _64: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:19:3: 19:24
    let mut _65: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:19:12: 19:23
    let mut _66: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:19:12: 19:15
    let mut _67: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:19:19: 19:23
    let mut _68: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:19:20: 19:23
    let mut _69: !;                      // in scope 0 at ui/numbers-arithmetic/float-nan.rs:19:3: 19:24
    let mut _70: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:21:3: 21:24
    let mut _71: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:21:13: 21:23
    let mut _72: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:21:20: 21:23
    let mut _73: !;                      // in scope 0 at ui/numbers-arithmetic/float-nan.rs:21:3: 21:24
    let mut _74: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:22:3: 22:24
    let mut _75: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:22:13: 22:23
    let mut _76: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:22:20: 22:23
    let mut _77: !;                      // in scope 0 at ui/numbers-arithmetic/float-nan.rs:22:3: 22:24
    let mut _78: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:23:3: 23:24
    let mut _79: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:23:12: 23:23
    let mut _80: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:23:12: 23:15
    let mut _81: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:23:20: 23:23
    let mut _82: !;                      // in scope 0 at ui/numbers-arithmetic/float-nan.rs:23:3: 23:24
    let mut _83: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:24:3: 24:24
    let mut _84: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:24:11: 24:23
    let mut _85: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:24:11: 24:15
    let mut _86: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:24:12: 24:15
    let mut _87: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:24:20: 24:23
    let mut _88: !;                      // in scope 0 at ui/numbers-arithmetic/float-nan.rs:24:3: 24:24
    let mut _89: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:26:3: 26:26
    let mut _90: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:26:11: 26:25
    let mut _91: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:26:12: 26:25
    let mut _92: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:26:14: 26:17
    let mut _93: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:26:21: 26:24
    let mut _94: !;                      // in scope 0 at ui/numbers-arithmetic/float-nan.rs:26:3: 26:26
    let mut _95: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:27:3: 27:27
    let mut _96: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:27:11: 27:26
    let mut _97: bool;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:27:12: 27:26
    let mut _98: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:27:14: 27:17
    let mut _99: f64;                    // in scope 0 at ui/numbers-arithmetic/float-nan.rs:27:21: 27:25
    let mut _100: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:27:22: 27:25
    let mut _101: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:27:3: 27:27
    let mut _102: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:28:3: 28:25
    let mut _103: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:28:11: 28:24
    let mut _104: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:28:12: 28:24
    let mut _105: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:28:14: 28:17
    let mut _106: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:28:3: 28:25
    let mut _107: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:29:3: 29:25
    let mut _108: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:29:11: 29:24
    let mut _109: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:29:12: 29:24
    let mut _110: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:29:14: 29:17
    let mut _111: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:29:3: 29:25
    let mut _112: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:30:3: 30:26
    let mut _113: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:30:11: 30:25
    let mut _114: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:30:12: 30:25
    let mut _115: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:30:14: 30:17
    let mut _116: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:30:21: 30:24
    let mut _117: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:30:3: 30:26
    let mut _118: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:31:3: 31:27
    let mut _119: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:31:11: 31:26
    let mut _120: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:31:12: 31:26
    let mut _121: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:31:14: 31:17
    let mut _122: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:31:21: 31:25
    let mut _123: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:31:22: 31:25
    let mut _124: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:31:3: 31:27
    let mut _125: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:32:3: 32:26
    let mut _126: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:32:11: 32:25
    let mut _127: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:32:12: 32:25
    let mut _128: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:32:21: 32:24
    let mut _129: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:32:3: 32:26
    let mut _130: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:33:3: 33:26
    let mut _131: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:33:11: 33:25
    let mut _132: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:33:12: 33:25
    let mut _133: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:33:21: 33:24
    let mut _134: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:33:3: 33:26
    let mut _135: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:34:3: 34:26
    let mut _136: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:34:11: 34:25
    let mut _137: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:34:12: 34:25
    let mut _138: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:34:14: 34:17
    let mut _139: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:34:21: 34:24
    let mut _140: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:34:3: 34:26
    let mut _141: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:35:3: 35:26
    let mut _142: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:35:11: 35:25
    let mut _143: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:35:12: 35:25
    let mut _144: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:35:13: 35:17
    let mut _145: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:35:14: 35:17
    let mut _146: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:35:21: 35:24
    let mut _147: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:35:3: 35:26
    let mut _148: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:36:3: 36:26
    let mut _149: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:36:11: 36:25
    let mut _150: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:36:12: 36:25
    let mut _151: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:36:13: 36:17
    let mut _152: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:36:14: 36:17
    let mut _153: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:36:21: 36:24
    let mut _154: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:36:3: 36:26
    let mut _155: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:37:3: 37:27
    let mut _156: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:37:11: 37:26
    let mut _157: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:37:12: 37:26
    let mut _158: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:37:13: 37:17
    let mut _159: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:37:14: 37:17
    let mut _160: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:37:21: 37:25
    let mut _161: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:37:22: 37:25
    let mut _162: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:37:3: 37:27
    let mut _163: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:39:3: 39:26
    let mut _164: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:39:11: 39:25
    let mut _165: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:39:12: 39:25
    let mut _166: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:39:14: 39:17
    let mut _167: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:39:21: 39:24
    let mut _168: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:39:3: 39:26
    let mut _169: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:40:3: 40:26
    let mut _170: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:40:11: 40:25
    let mut _171: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:40:12: 40:25
    let mut _172: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:40:14: 40:17
    let mut _173: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:40:20: 40:24
    let mut _174: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:40:21: 40:24
    let mut _175: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:40:3: 40:26
    let mut _176: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:41:3: 41:26
    let mut _177: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:41:11: 41:25
    let mut _178: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:41:12: 41:25
    let mut _179: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:41:14: 41:17
    let mut _180: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:41:3: 41:26
    let mut _181: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:42:3: 42:26
    let mut _182: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:42:11: 42:25
    let mut _183: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:42:12: 42:25
    let mut _184: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:42:14: 42:17
    let mut _185: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:42:21: 42:24
    let mut _186: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:42:3: 42:26
    let mut _187: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:43:3: 43:26
    let mut _188: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:43:11: 43:25
    let mut _189: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:43:12: 43:25
    let mut _190: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:43:14: 43:17
    let mut _191: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:43:20: 43:24
    let mut _192: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:43:21: 43:24
    let mut _193: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:43:3: 43:26
    let mut _194: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:44:3: 44:26
    let mut _195: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:44:11: 44:25
    let mut _196: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:44:12: 44:25
    let mut _197: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:44:21: 44:24
    let mut _198: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:44:3: 44:26
    let mut _199: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:45:3: 45:26
    let mut _200: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:45:11: 45:25
    let mut _201: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:45:12: 45:25
    let mut _202: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:45:14: 45:17
    let mut _203: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:45:21: 45:24
    let mut _204: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:45:3: 45:26
    let mut _205: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:46:3: 46:26
    let mut _206: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:46:11: 46:25
    let mut _207: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:46:12: 46:25
    let mut _208: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:46:13: 46:17
    let mut _209: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:46:14: 46:17
    let mut _210: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:46:21: 46:24
    let mut _211: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:46:3: 46:26
    let mut _212: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:47:3: 47:26
    let mut _213: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:47:11: 47:25
    let mut _214: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:47:12: 47:25
    let mut _215: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:47:13: 47:17
    let mut _216: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:47:14: 47:17
    let mut _217: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:47:21: 47:24
    let mut _218: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:47:3: 47:26
    let mut _219: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:49:3: 49:25
    let mut _220: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:49:11: 49:24
    let mut _221: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:49:12: 49:24
    let mut _222: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:49:13: 49:16
    let mut _223: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:49:3: 49:25
    let mut _224: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:50:3: 50:25
    let mut _225: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:50:11: 50:24
    let mut _226: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:50:12: 50:24
    let mut _227: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:50:13: 50:16
    let mut _228: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:50:3: 50:25
    let mut _229: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:51:3: 51:25
    let mut _230: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:51:11: 51:24
    let mut _231: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:51:12: 51:24
    let mut _232: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:51:13: 51:16
    let mut _233: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:51:3: 51:25
    let mut _234: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:52:3: 52:25
    let mut _235: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:52:11: 52:24
    let mut _236: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:52:12: 52:24
    let mut _237: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:52:13: 52:16
    let mut _238: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:52:20: 52:23
    let mut _239: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:52:3: 52:25
    let mut _240: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:53:3: 53:25
    let mut _241: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:53:11: 53:24
    let mut _242: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:53:12: 53:24
    let mut _243: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:53:13: 53:16
    let mut _244: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:53:19: 53:23
    let mut _245: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:53:20: 53:23
    let mut _246: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:53:3: 53:25
    let mut _247: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:54:3: 54:25
    let mut _248: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:54:11: 54:24
    let mut _249: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:54:12: 54:24
    let mut _250: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:54:13: 54:16
    let mut _251: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:54:20: 54:23
    let mut _252: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:54:3: 54:25
    let mut _253: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:55:3: 55:25
    let mut _254: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:55:11: 55:24
    let mut _255: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:55:12: 55:24
    let mut _256: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:55:13: 55:16
    let mut _257: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:55:19: 55:23
    let mut _258: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:55:20: 55:23
    let mut _259: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:55:3: 55:25
    let mut _260: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:57:3: 57:25
    let mut _261: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:57:11: 57:24
    let mut _262: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:57:12: 57:24
    let mut _263: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:57:20: 57:23
    let mut _264: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:57:3: 57:25
    let mut _265: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:58:3: 58:25
    let mut _266: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:58:11: 58:24
    let mut _267: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:58:12: 58:24
    let mut _268: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:58:20: 58:23
    let mut _269: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:58:3: 58:25
    let mut _270: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:59:3: 59:25
    let mut _271: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:59:11: 59:24
    let mut _272: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:59:12: 59:24
    let mut _273: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:59:20: 59:23
    let mut _274: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:59:3: 59:25
    let mut _275: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:60:3: 60:25
    let mut _276: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:60:11: 60:24
    let mut _277: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:60:12: 60:24
    let mut _278: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:60:14: 60:17
    let mut _279: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:60:20: 60:23
    let mut _280: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:60:3: 60:25
    let mut _281: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:61:3: 61:25
    let mut _282: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:61:11: 61:24
    let mut _283: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:61:12: 61:24
    let mut _284: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:61:13: 61:17
    let mut _285: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:61:14: 61:17
    let mut _286: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:61:20: 61:23
    let mut _287: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:61:3: 61:25
    let mut _288: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:62:3: 62:25
    let mut _289: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:62:11: 62:24
    let mut _290: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:62:12: 62:24
    let mut _291: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:62:13: 62:17
    let mut _292: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:62:14: 62:17
    let mut _293: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:62:20: 62:23
    let mut _294: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:62:3: 62:25
    let mut _295: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:64:3: 64:32
    let mut _296: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:64:11: 64:31
    let mut _297: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:64:11: 64:22
    let mut _298: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:64:12: 64:15
    let mut _299: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:64:18: 64:21
    let mut _300: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:64:3: 64:32
    let mut _301: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:65:3: 65:33
    let mut _302: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:65:11: 65:32
    let mut _303: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:65:11: 65:23
    let mut _304: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:65:12: 65:15
    let mut _305: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:65:18: 65:22
    let mut _306: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:65:19: 65:22
    let mut _307: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:65:3: 65:33
    let mut _308: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:66:3: 66:31
    let mut _309: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:66:11: 66:30
    let mut _310: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:66:11: 66:21
    let mut _311: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:66:12: 66:15
    let mut _312: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:66:3: 66:31
    let mut _313: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:67:3: 67:31
    let mut _314: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:67:11: 67:30
    let mut _315: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:67:11: 67:21
    let mut _316: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:67:12: 67:15
    let mut _317: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:67:3: 67:31
    let mut _318: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:68:3: 68:31
    let mut _319: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:68:11: 68:30
    let mut _320: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:68:11: 68:21
    let mut _321: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:68:12: 68:15
    let mut _322: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:68:3: 68:31
    let mut _323: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:69:3: 69:31
    let mut _324: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:69:11: 69:30
    let mut _325: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:69:11: 69:21
    let mut _326: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:69:12: 69:15
    let mut _327: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:69:3: 69:31
    let mut _328: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:70:3: 70:31
    let mut _329: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:70:11: 70:30
    let mut _330: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:70:11: 70:21
    let mut _331: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:70:12: 70:15
    let mut _332: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:70:3: 70:31
    let mut _333: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:71:3: 71:33
    let mut _334: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:71:11: 71:32
    let mut _335: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:71:11: 71:23
    let mut _336: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:71:3: 71:33
    let mut _337: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:72:3: 72:33
    let mut _338: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:72:11: 72:32
    let mut _339: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:72:11: 72:23
    let mut _340: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:72:12: 72:16
    let mut _341: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:72:13: 72:16
    let mut _342: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:72:19: 72:22
    let mut _343: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:72:3: 72:33
    let mut _344: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:73:3: 73:32
    let mut _345: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:73:11: 73:31
    let mut _346: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:73:11: 73:22
    let mut _347: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:73:12: 73:15
    let mut _348: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:73:18: 73:21
    let mut _349: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:73:3: 73:32
    let mut _350: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:75:3: 75:31
    let mut _351: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:75:11: 75:30
    let mut _352: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:75:12: 75:30
    let mut _353: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:75:3: 75:31
    let mut _354: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:76:3: 76:30
    let mut _355: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:76:11: 76:29
    let mut _356: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:76:12: 76:29
    let mut _357: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:76:3: 76:30
    let mut _358: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:77:3: 77:30
    let mut _359: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:77:11: 77:29
    let mut _360: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:77:12: 77:29
    let mut _361: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:77:3: 77:30
    let mut _362: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:78:3: 78:30
    let mut _363: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:78:11: 78:29
    let mut _364: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:78:12: 78:29
    let mut _365: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:78:3: 78:30
    let mut _366: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:79:3: 79:27
    let mut _367: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:79:11: 79:26
    let mut _368: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:79:12: 79:26
    let mut _369: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:79:12: 79:17
    let mut _370: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:79:3: 79:27
    let mut _371: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:80:3: 80:28
    let mut _372: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:80:11: 80:27
    let mut _373: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:80:12: 80:27
    let mut _374: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:80:12: 80:18
    let mut _375: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:80:14: 80:17
    let mut _376: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:80:3: 80:28
    let mut _377: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:81:3: 81:31
    let mut _378: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:81:11: 81:30
    let mut _379: bool;                  // in scope 0 at ui/numbers-arithmetic/float-nan.rs:81:12: 81:30
    let mut _380: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:81:12: 81:21
    let mut _381: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:81:16: 81:20
    let mut _382: f64;                   // in scope 0 at ui/numbers-arithmetic/float-nan.rs:81:17: 81:20
    let mut _383: !;                     // in scope 0 at ui/numbers-arithmetic/float-nan.rs:81:3: 81:31
    scope 1 {
        debug nan => _1;                 // in scope 1 at ui/numbers-arithmetic/float-nan.rs:4:7: 4:10
        let _6: f64;                     // in scope 1 at ui/numbers-arithmetic/float-nan.rs:7:7: 7:10
        scope 2 {
            debug inf => _6;             // in scope 2 at ui/numbers-arithmetic/float-nan.rs:7:7: 7:10
            let _7: f64;                 // in scope 2 at ui/numbers-arithmetic/float-nan.rs:8:7: 8:14
            scope 3 {
                debug neg_inf => _7;     // in scope 3 at ui/numbers-arithmetic/float-nan.rs:8:7: 8:14
                let _13: &f64;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _14: &f64;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                scope 4 {
                    debug left_val => _13; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _14; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _19: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _19; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const _;                    // scope 0 at ui/numbers-arithmetic/float-nan.rs:4:18: 4:26
        _4 = const NaNf64;               // scope 1 at ui/numbers-arithmetic/float-nan.rs:5:11: 5:16
        _3 = core::f64::<impl f64>::is_nan(move _4) -> bb1; // scope 1 at ui/numbers-arithmetic/float-nan.rs:5:11: 5:25
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:5:17: 5:23
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Not(move _3);               // scope 1 at ui/numbers-arithmetic/float-nan.rs:5:3: 5:26
        switchInt(move _2) -> [0: bb3, otherwise: bb2]; // scope 1 at ui/numbers-arithmetic/float-nan.rs:5:3: 5:26
    }

    bb2: {
        _5 = core::panicking::panic(const "assertion failed: (nan).is_nan()"); // scope 1 at ui/numbers-arithmetic/float-nan.rs:5:3: 5:26
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:5:3: 5:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _6 = const _;                    // scope 1 at ui/numbers-arithmetic/float-nan.rs:7:18: 7:31
        _7 = Neg(const _);               // scope 2 at ui/numbers-arithmetic/float-nan.rs:8:22: 8:36
        _11 = const +Inff64;             // scope 3 at ui/numbers-arithmetic/float-nan.rs:9:15: 9:18
        _10 = Neg(move _11);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:9:14: 9:18
        _9 = &_10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _12 = &_7;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _8 = (move _9, move _12);        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _13 = (_8.0: &f64);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _14 = (_8.1: &f64);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _17 = (*_13);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _18 = (*_14);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _16 = Eq(move _17, move _18);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _15 = Not(move _16);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _15) -> [0: bb5, otherwise: bb4]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _19 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = _13;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _23;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _14;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = _25;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _20 = core::panicking::assert_failed::<f64, f64>(move _21, move _22, move _24, move _26); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f64, &'b f64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f64, f64>}, val: Value(<ZST>) }
    }

    bb5: {
        _29 = _1;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:11:12: 11:15
        _30 = _1;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:11:20: 11:23
        _28 = Ne(move _29, move _30);    // scope 3 at ui/numbers-arithmetic/float-nan.rs:11:12: 11:23
        _27 = Not(move _28);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:11:3: 11:24
        switchInt(move _27) -> [0: bb7, otherwise: bb6]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:11:3: 11:24
    }

    bb6: {
        _31 = core::panicking::panic(const "assertion failed: nan != nan"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:11:3: 11:24
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:11:3: 11:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _34 = _1;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:12:12: 12:15
        _36 = _1;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:12:20: 12:23
        _35 = Neg(move _36);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:12:19: 12:23
        _33 = Ne(move _34, move _35);    // scope 3 at ui/numbers-arithmetic/float-nan.rs:12:12: 12:23
        _32 = Not(move _33);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:12:3: 12:24
        switchInt(move _32) -> [0: bb9, otherwise: bb8]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:12:3: 12:24
    }

    bb8: {
        _37 = core::panicking::panic(const "assertion failed: nan != -nan"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:12:3: 12:24
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:12:3: 12:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _41 = _1;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:13:12: 13:15
        _40 = Neg(move _41);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:13:11: 13:15
        _43 = _1;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:13:20: 13:23
        _42 = Neg(move _43);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:13:19: 13:23
        _39 = Ne(move _40, move _42);    // scope 3 at ui/numbers-arithmetic/float-nan.rs:13:11: 13:23
        _38 = Not(move _39);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:13:3: 13:24
        switchInt(move _38) -> [0: bb11, otherwise: bb10]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:13:3: 13:24
    }

    bb10: {
        _44 = core::panicking::panic(const "assertion failed: -nan != -nan"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:13:3: 13:24
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:13:3: 13:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        _48 = _1;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:14:12: 14:15
        _47 = Neg(move _48);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:14:11: 14:15
        _49 = _1;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:14:20: 14:23
        _46 = Ne(move _47, move _49);    // scope 3 at ui/numbers-arithmetic/float-nan.rs:14:11: 14:23
        _45 = Not(move _46);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:14:3: 14:24
        switchInt(move _45) -> [0: bb13, otherwise: bb12]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:14:3: 14:24
    }

    bb12: {
        _50 = core::panicking::panic(const "assertion failed: -nan != nan"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:14:3: 14:24
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:14:3: 14:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        _53 = _1;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:16:12: 16:15
        _52 = Ne(move _53, const 1f64);  // scope 3 at ui/numbers-arithmetic/float-nan.rs:16:12: 16:23
        _51 = Not(move _52);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:16:3: 16:24
        switchInt(move _51) -> [0: bb15, otherwise: bb14]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:16:3: 16:24
    }

    bb14: {
        _54 = core::panicking::panic(const "assertion failed: nan != 1."); // scope 3 at ui/numbers-arithmetic/float-nan.rs:16:3: 16:24
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:16:3: 16:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _57 = _1;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:17:12: 17:15
        _56 = Ne(move _57, const 0f64);  // scope 3 at ui/numbers-arithmetic/float-nan.rs:17:12: 17:23
        _55 = Not(move _56);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:17:3: 17:24
        switchInt(move _55) -> [0: bb17, otherwise: bb16]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:17:3: 17:24
    }

    bb16: {
        _58 = core::panicking::panic(const "assertion failed: nan != 0."); // scope 3 at ui/numbers-arithmetic/float-nan.rs:17:3: 17:24
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:17:3: 17:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        _61 = _1;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:18:12: 18:15
        _62 = _6;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:18:20: 18:23
        _60 = Ne(move _61, move _62);    // scope 3 at ui/numbers-arithmetic/float-nan.rs:18:12: 18:23
        _59 = Not(move _60);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:18:3: 18:24
        switchInt(move _59) -> [0: bb19, otherwise: bb18]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:18:3: 18:24
    }

    bb18: {
        _63 = core::panicking::panic(const "assertion failed: nan != inf"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:18:3: 18:24
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:18:3: 18:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb19: {
        _66 = _1;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:19:12: 19:15
        _68 = _6;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:19:20: 19:23
        _67 = Neg(move _68);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:19:19: 19:23
        _65 = Ne(move _66, move _67);    // scope 3 at ui/numbers-arithmetic/float-nan.rs:19:12: 19:23
        _64 = Not(move _65);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:19:3: 19:24
        switchInt(move _64) -> [0: bb21, otherwise: bb20]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:19:3: 19:24
    }

    bb20: {
        _69 = core::panicking::panic(const "assertion failed: nan != -inf"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:19:3: 19:24
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:19:3: 19:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _72 = _1;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:21:20: 21:23
        _71 = Ne(const 1f64, move _72);  // scope 3 at ui/numbers-arithmetic/float-nan.rs:21:13: 21:23
        _70 = Not(move _71);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:21:3: 21:24
        switchInt(move _70) -> [0: bb23, otherwise: bb22]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:21:3: 21:24
    }

    bb22: {
        _73 = core::panicking::panic(const "assertion failed: 1. != nan"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:21:3: 21:24
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:21:3: 21:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb23: {
        _76 = _1;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:22:20: 22:23
        _75 = Ne(const 0f64, move _76);  // scope 3 at ui/numbers-arithmetic/float-nan.rs:22:13: 22:23
        _74 = Not(move _75);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:22:3: 22:24
        switchInt(move _74) -> [0: bb25, otherwise: bb24]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:22:3: 22:24
    }

    bb24: {
        _77 = core::panicking::panic(const "assertion failed: 0. != nan"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:22:3: 22:24
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:22:3: 22:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb25: {
        _80 = _6;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:23:12: 23:15
        _81 = _1;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:23:20: 23:23
        _79 = Ne(move _80, move _81);    // scope 3 at ui/numbers-arithmetic/float-nan.rs:23:12: 23:23
        _78 = Not(move _79);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:23:3: 23:24
        switchInt(move _78) -> [0: bb27, otherwise: bb26]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:23:3: 23:24
    }

    bb26: {
        _82 = core::panicking::panic(const "assertion failed: inf != nan"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:23:3: 23:24
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:23:3: 23:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb27: {
        _86 = _6;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:24:12: 24:15
        _85 = Neg(move _86);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:24:11: 24:15
        _87 = _1;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:24:20: 24:23
        _84 = Ne(move _85, move _87);    // scope 3 at ui/numbers-arithmetic/float-nan.rs:24:11: 24:23
        _83 = Not(move _84);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:24:3: 24:24
        switchInt(move _83) -> [0: bb29, otherwise: bb28]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:24:3: 24:24
    }

    bb28: {
        _88 = core::panicking::panic(const "assertion failed: -inf != nan"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:24:3: 24:24
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:24:3: 24:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb29: {
        _92 = _1;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:26:14: 26:17
        _93 = _1;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:26:21: 26:24
        _91 = Eq(move _92, move _93);    // scope 3 at ui/numbers-arithmetic/float-nan.rs:26:12: 26:25
        _90 = Not(move _91);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:26:11: 26:25
        _89 = Not(move _90);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:26:3: 26:26
        switchInt(move _89) -> [0: bb31, otherwise: bb30]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:26:3: 26:26
    }

    bb30: {
        _94 = core::panicking::panic(const "assertion failed: !(nan == nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:26:3: 26:26
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:26:3: 26:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb31: {
        _98 = _1;                        // scope 3 at ui/numbers-arithmetic/float-nan.rs:27:14: 27:17
        _100 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:27:22: 27:25
        _99 = Neg(move _100);            // scope 3 at ui/numbers-arithmetic/float-nan.rs:27:21: 27:25
        _97 = Eq(move _98, move _99);    // scope 3 at ui/numbers-arithmetic/float-nan.rs:27:12: 27:26
        _96 = Not(move _97);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:27:11: 27:26
        _95 = Not(move _96);             // scope 3 at ui/numbers-arithmetic/float-nan.rs:27:3: 27:27
        switchInt(move _95) -> [0: bb33, otherwise: bb32]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:27:3: 27:27
    }

    bb32: {
        _101 = core::panicking::panic(const "assertion failed: !(nan == -nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:27:3: 27:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:27:3: 27:27
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb33: {
        _105 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:28:14: 28:17
        _104 = Eq(move _105, const 1f64); // scope 3 at ui/numbers-arithmetic/float-nan.rs:28:12: 28:24
        _103 = Not(move _104);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:28:11: 28:24
        _102 = Not(move _103);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:28:3: 28:25
        switchInt(move _102) -> [0: bb35, otherwise: bb34]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:28:3: 28:25
    }

    bb34: {
        _106 = core::panicking::panic(const "assertion failed: !(nan == 1.)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:28:3: 28:25
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:28:3: 28:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb35: {
        _110 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:29:14: 29:17
        _109 = Eq(move _110, const 0f64); // scope 3 at ui/numbers-arithmetic/float-nan.rs:29:12: 29:24
        _108 = Not(move _109);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:29:11: 29:24
        _107 = Not(move _108);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:29:3: 29:25
        switchInt(move _107) -> [0: bb37, otherwise: bb36]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:29:3: 29:25
    }

    bb36: {
        _111 = core::panicking::panic(const "assertion failed: !(nan == 0.)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:29:3: 29:25
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:29:3: 29:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb37: {
        _115 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:30:14: 30:17
        _116 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:30:21: 30:24
        _114 = Eq(move _115, move _116); // scope 3 at ui/numbers-arithmetic/float-nan.rs:30:12: 30:25
        _113 = Not(move _114);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:30:11: 30:25
        _112 = Not(move _113);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:30:3: 30:26
        switchInt(move _112) -> [0: bb39, otherwise: bb38]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:30:3: 30:26
    }

    bb38: {
        _117 = core::panicking::panic(const "assertion failed: !(nan == inf)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:30:3: 30:26
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:30:3: 30:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb39: {
        _121 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:31:14: 31:17
        _123 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:31:22: 31:25
        _122 = Neg(move _123);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:31:21: 31:25
        _120 = Eq(move _121, move _122); // scope 3 at ui/numbers-arithmetic/float-nan.rs:31:12: 31:26
        _119 = Not(move _120);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:31:11: 31:26
        _118 = Not(move _119);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:31:3: 31:27
        switchInt(move _118) -> [0: bb41, otherwise: bb40]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:31:3: 31:27
    }

    bb40: {
        _124 = core::panicking::panic(const "assertion failed: !(nan == -inf)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:31:3: 31:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:31:3: 31:27
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb41: {
        _128 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:32:21: 32:24
        _127 = Eq(const 1f64, move _128); // scope 3 at ui/numbers-arithmetic/float-nan.rs:32:12: 32:25
        _126 = Not(move _127);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:32:11: 32:25
        _125 = Not(move _126);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:32:3: 32:26
        switchInt(move _125) -> [0: bb43, otherwise: bb42]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:32:3: 32:26
    }

    bb42: {
        _129 = core::panicking::panic(const "assertion failed: !(1. == nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:32:3: 32:26
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:32:3: 32:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb43: {
        _133 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:33:21: 33:24
        _132 = Eq(const 0f64, move _133); // scope 3 at ui/numbers-arithmetic/float-nan.rs:33:12: 33:25
        _131 = Not(move _132);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:33:11: 33:25
        _130 = Not(move _131);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:33:3: 33:26
        switchInt(move _130) -> [0: bb45, otherwise: bb44]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:33:3: 33:26
    }

    bb44: {
        _134 = core::panicking::panic(const "assertion failed: !(0. == nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:33:3: 33:26
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:33:3: 33:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb45: {
        _138 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:34:14: 34:17
        _139 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:34:21: 34:24
        _137 = Eq(move _138, move _139); // scope 3 at ui/numbers-arithmetic/float-nan.rs:34:12: 34:25
        _136 = Not(move _137);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:34:11: 34:25
        _135 = Not(move _136);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:34:3: 34:26
        switchInt(move _135) -> [0: bb47, otherwise: bb46]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:34:3: 34:26
    }

    bb46: {
        _140 = core::panicking::panic(const "assertion failed: !(inf == nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:34:3: 34:26
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:34:3: 34:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb47: {
        _145 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:35:14: 35:17
        _144 = Neg(move _145);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:35:13: 35:17
        _146 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:35:21: 35:24
        _143 = Eq(move _144, move _146); // scope 3 at ui/numbers-arithmetic/float-nan.rs:35:12: 35:25
        _142 = Not(move _143);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:35:11: 35:25
        _141 = Not(move _142);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:35:3: 35:26
        switchInt(move _141) -> [0: bb49, otherwise: bb48]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:35:3: 35:26
    }

    bb48: {
        _147 = core::panicking::panic(const "assertion failed: !(-inf == nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:35:3: 35:26
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:35:3: 35:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb49: {
        _152 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:36:14: 36:17
        _151 = Neg(move _152);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:36:13: 36:17
        _153 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:36:21: 36:24
        _150 = Eq(move _151, move _153); // scope 3 at ui/numbers-arithmetic/float-nan.rs:36:12: 36:25
        _149 = Not(move _150);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:36:11: 36:25
        _148 = Not(move _149);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:36:3: 36:26
        switchInt(move _148) -> [0: bb51, otherwise: bb50]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:36:3: 36:26
    }

    bb50: {
        _154 = core::panicking::panic(const "assertion failed: !(-nan == nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:36:3: 36:26
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:36:3: 36:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb51: {
        _159 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:37:14: 37:17
        _158 = Neg(move _159);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:37:13: 37:17
        _161 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:37:22: 37:25
        _160 = Neg(move _161);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:37:21: 37:25
        _157 = Eq(move _158, move _160); // scope 3 at ui/numbers-arithmetic/float-nan.rs:37:12: 37:26
        _156 = Not(move _157);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:37:11: 37:26
        _155 = Not(move _156);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:37:3: 37:27
        switchInt(move _155) -> [0: bb53, otherwise: bb52]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:37:3: 37:27
    }

    bb52: {
        _162 = core::panicking::panic(const "assertion failed: !(-nan == -nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:37:3: 37:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:37:3: 37:27
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb53: {
        _166 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:39:14: 39:17
        _167 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:39:21: 39:24
        _165 = Gt(move _166, move _167); // scope 3 at ui/numbers-arithmetic/float-nan.rs:39:12: 39:25
        _164 = Not(move _165);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:39:11: 39:25
        _163 = Not(move _164);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:39:3: 39:26
        switchInt(move _163) -> [0: bb55, otherwise: bb54]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:39:3: 39:26
    }

    bb54: {
        _168 = core::panicking::panic(const "assertion failed: !(nan > nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:39:3: 39:26
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:39:3: 39:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb55: {
        _172 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:40:14: 40:17
        _174 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:40:21: 40:24
        _173 = Neg(move _174);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:40:20: 40:24
        _171 = Gt(move _172, move _173); // scope 3 at ui/numbers-arithmetic/float-nan.rs:40:12: 40:25
        _170 = Not(move _171);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:40:11: 40:25
        _169 = Not(move _170);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:40:3: 40:26
        switchInt(move _169) -> [0: bb57, otherwise: bb56]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:40:3: 40:26
    }

    bb56: {
        _175 = core::panicking::panic(const "assertion failed: !(nan > -nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:40:3: 40:26
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:40:3: 40:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb57: {
        _179 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:41:14: 41:17
        _178 = Gt(move _179, const 0f64); // scope 3 at ui/numbers-arithmetic/float-nan.rs:41:12: 41:25
        _177 = Not(move _178);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:41:11: 41:25
        _176 = Not(move _177);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:41:3: 41:26
        switchInt(move _176) -> [0: bb59, otherwise: bb58]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:41:3: 41:26
    }

    bb58: {
        _180 = core::panicking::panic(const "assertion failed: !(nan > 0.)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:41:3: 41:26
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:41:3: 41:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb59: {
        _184 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:42:14: 42:17
        _185 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:42:21: 42:24
        _183 = Gt(move _184, move _185); // scope 3 at ui/numbers-arithmetic/float-nan.rs:42:12: 42:25
        _182 = Not(move _183);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:42:11: 42:25
        _181 = Not(move _182);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:42:3: 42:26
        switchInt(move _181) -> [0: bb61, otherwise: bb60]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:42:3: 42:26
    }

    bb60: {
        _186 = core::panicking::panic(const "assertion failed: !(nan > inf)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:42:3: 42:26
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:42:3: 42:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb61: {
        _190 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:43:14: 43:17
        _192 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:43:21: 43:24
        _191 = Neg(move _192);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:43:20: 43:24
        _189 = Gt(move _190, move _191); // scope 3 at ui/numbers-arithmetic/float-nan.rs:43:12: 43:25
        _188 = Not(move _189);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:43:11: 43:25
        _187 = Not(move _188);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:43:3: 43:26
        switchInt(move _187) -> [0: bb63, otherwise: bb62]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:43:3: 43:26
    }

    bb62: {
        _193 = core::panicking::panic(const "assertion failed: !(nan > -inf)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:43:3: 43:26
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:43:3: 43:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb63: {
        _197 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:44:21: 44:24
        _196 = Gt(const 0f64, move _197); // scope 3 at ui/numbers-arithmetic/float-nan.rs:44:12: 44:25
        _195 = Not(move _196);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:44:11: 44:25
        _194 = Not(move _195);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:44:3: 44:26
        switchInt(move _194) -> [0: bb65, otherwise: bb64]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:44:3: 44:26
    }

    bb64: {
        _198 = core::panicking::panic(const "assertion failed: !(0. > nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:44:3: 44:26
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:44:3: 44:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb65: {
        _202 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:45:14: 45:17
        _203 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:45:21: 45:24
        _201 = Gt(move _202, move _203); // scope 3 at ui/numbers-arithmetic/float-nan.rs:45:12: 45:25
        _200 = Not(move _201);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:45:11: 45:25
        _199 = Not(move _200);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:45:3: 45:26
        switchInt(move _199) -> [0: bb67, otherwise: bb66]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:45:3: 45:26
    }

    bb66: {
        _204 = core::panicking::panic(const "assertion failed: !(inf > nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:45:3: 45:26
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:45:3: 45:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb67: {
        _209 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:46:14: 46:17
        _208 = Neg(move _209);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:46:13: 46:17
        _210 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:46:21: 46:24
        _207 = Gt(move _208, move _210); // scope 3 at ui/numbers-arithmetic/float-nan.rs:46:12: 46:25
        _206 = Not(move _207);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:46:11: 46:25
        _205 = Not(move _206);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:46:3: 46:26
        switchInt(move _205) -> [0: bb69, otherwise: bb68]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:46:3: 46:26
    }

    bb68: {
        _211 = core::panicking::panic(const "assertion failed: !(-inf > nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:46:3: 46:26
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:46:3: 46:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb69: {
        _216 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:47:14: 47:17
        _215 = Neg(move _216);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:47:13: 47:17
        _217 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:47:21: 47:24
        _214 = Gt(move _215, move _217); // scope 3 at ui/numbers-arithmetic/float-nan.rs:47:12: 47:25
        _213 = Not(move _214);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:47:11: 47:25
        _212 = Not(move _213);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:47:3: 47:26
        switchInt(move _212) -> [0: bb71, otherwise: bb70]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:47:3: 47:26
    }

    bb70: {
        _218 = core::panicking::panic(const "assertion failed: !(-nan > nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:47:3: 47:26
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:47:3: 47:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb71: {
        _222 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:49:13: 49:16
        _221 = Lt(move _222, const 0f64); // scope 3 at ui/numbers-arithmetic/float-nan.rs:49:12: 49:24
        _220 = Not(move _221);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:49:11: 49:24
        _219 = Not(move _220);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:49:3: 49:25
        switchInt(move _219) -> [0: bb73, otherwise: bb72]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:49:3: 49:25
    }

    bb72: {
        _223 = core::panicking::panic(const "assertion failed: !(nan < 0.)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:49:3: 49:25
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:49:3: 49:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb73: {
        _227 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:50:13: 50:16
        _226 = Lt(move _227, const 1f64); // scope 3 at ui/numbers-arithmetic/float-nan.rs:50:12: 50:24
        _225 = Not(move _226);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:50:11: 50:24
        _224 = Not(move _225);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:50:3: 50:25
        switchInt(move _224) -> [0: bb75, otherwise: bb74]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:50:3: 50:25
    }

    bb74: {
        _228 = core::panicking::panic(const "assertion failed: !(nan < 1.)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:50:3: 50:25
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:50:3: 50:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb75: {
        _232 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:51:13: 51:16
        _231 = Lt(move _232, const -1f64); // scope 3 at ui/numbers-arithmetic/float-nan.rs:51:12: 51:24
        _230 = Not(move _231);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:51:11: 51:24
        _229 = Not(move _230);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:51:3: 51:25
        switchInt(move _229) -> [0: bb77, otherwise: bb76]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:51:3: 51:25
    }

    bb76: {
        _233 = core::panicking::panic(const "assertion failed: !(nan < -1.)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:51:3: 51:25
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:51:3: 51:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb77: {
        _237 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:52:13: 52:16
        _238 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:52:20: 52:23
        _236 = Lt(move _237, move _238); // scope 3 at ui/numbers-arithmetic/float-nan.rs:52:12: 52:24
        _235 = Not(move _236);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:52:11: 52:24
        _234 = Not(move _235);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:52:3: 52:25
        switchInt(move _234) -> [0: bb79, otherwise: bb78]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:52:3: 52:25
    }

    bb78: {
        _239 = core::panicking::panic(const "assertion failed: !(nan < inf)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:52:3: 52:25
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:52:3: 52:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb79: {
        _243 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:53:13: 53:16
        _245 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:53:20: 53:23
        _244 = Neg(move _245);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:53:19: 53:23
        _242 = Lt(move _243, move _244); // scope 3 at ui/numbers-arithmetic/float-nan.rs:53:12: 53:24
        _241 = Not(move _242);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:53:11: 53:24
        _240 = Not(move _241);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:53:3: 53:25
        switchInt(move _240) -> [0: bb81, otherwise: bb80]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:53:3: 53:25
    }

    bb80: {
        _246 = core::panicking::panic(const "assertion failed: !(nan < -inf)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:53:3: 53:25
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:53:3: 53:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb81: {
        _250 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:54:13: 54:16
        _251 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:54:20: 54:23
        _249 = Lt(move _250, move _251); // scope 3 at ui/numbers-arithmetic/float-nan.rs:54:12: 54:24
        _248 = Not(move _249);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:54:11: 54:24
        _247 = Not(move _248);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:54:3: 54:25
        switchInt(move _247) -> [0: bb83, otherwise: bb82]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:54:3: 54:25
    }

    bb82: {
        _252 = core::panicking::panic(const "assertion failed: !(nan < nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:54:3: 54:25
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:54:3: 54:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb83: {
        _256 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:55:13: 55:16
        _258 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:55:20: 55:23
        _257 = Neg(move _258);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:55:19: 55:23
        _255 = Lt(move _256, move _257); // scope 3 at ui/numbers-arithmetic/float-nan.rs:55:12: 55:24
        _254 = Not(move _255);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:55:11: 55:24
        _253 = Not(move _254);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:55:3: 55:25
        switchInt(move _253) -> [0: bb85, otherwise: bb84]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:55:3: 55:25
    }

    bb84: {
        _259 = core::panicking::panic(const "assertion failed: !(nan < -nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:55:3: 55:25
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:55:3: 55:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb85: {
        _263 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:57:20: 57:23
        _262 = Lt(const 0f64, move _263); // scope 3 at ui/numbers-arithmetic/float-nan.rs:57:12: 57:24
        _261 = Not(move _262);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:57:11: 57:24
        _260 = Not(move _261);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:57:3: 57:25
        switchInt(move _260) -> [0: bb87, otherwise: bb86]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:57:3: 57:25
    }

    bb86: {
        _264 = core::panicking::panic(const "assertion failed: !(0. < nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:57:3: 57:25
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:57:3: 57:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb87: {
        _268 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:58:20: 58:23
        _267 = Lt(const 1f64, move _268); // scope 3 at ui/numbers-arithmetic/float-nan.rs:58:12: 58:24
        _266 = Not(move _267);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:58:11: 58:24
        _265 = Not(move _266);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:58:3: 58:25
        switchInt(move _265) -> [0: bb89, otherwise: bb88]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:58:3: 58:25
    }

    bb88: {
        _269 = core::panicking::panic(const "assertion failed: !(1. < nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:58:3: 58:25
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:58:3: 58:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb89: {
        _273 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:59:20: 59:23
        _272 = Lt(const -1f64, move _273); // scope 3 at ui/numbers-arithmetic/float-nan.rs:59:12: 59:24
        _271 = Not(move _272);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:59:11: 59:24
        _270 = Not(move _271);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:59:3: 59:25
        switchInt(move _270) -> [0: bb91, otherwise: bb90]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:59:3: 59:25
    }

    bb90: {
        _274 = core::panicking::panic(const "assertion failed: !(-1. < nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:59:3: 59:25
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:59:3: 59:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb91: {
        _278 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:60:14: 60:17
        _279 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:60:20: 60:23
        _277 = Lt(move _278, move _279); // scope 3 at ui/numbers-arithmetic/float-nan.rs:60:12: 60:24
        _276 = Not(move _277);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:60:11: 60:24
        _275 = Not(move _276);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:60:3: 60:25
        switchInt(move _275) -> [0: bb93, otherwise: bb92]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:60:3: 60:25
    }

    bb92: {
        _280 = core::panicking::panic(const "assertion failed: !(inf < nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:60:3: 60:25
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:60:3: 60:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb93: {
        _285 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:61:14: 61:17
        _284 = Neg(move _285);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:61:13: 61:17
        _286 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:61:20: 61:23
        _283 = Lt(move _284, move _286); // scope 3 at ui/numbers-arithmetic/float-nan.rs:61:12: 61:24
        _282 = Not(move _283);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:61:11: 61:24
        _281 = Not(move _282);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:61:3: 61:25
        switchInt(move _281) -> [0: bb95, otherwise: bb94]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:61:3: 61:25
    }

    bb94: {
        _287 = core::panicking::panic(const "assertion failed: !(-inf < nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:61:3: 61:25
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:61:3: 61:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb95: {
        _292 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:62:14: 62:17
        _291 = Neg(move _292);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:62:13: 62:17
        _293 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:62:20: 62:23
        _290 = Lt(move _291, move _293); // scope 3 at ui/numbers-arithmetic/float-nan.rs:62:12: 62:24
        _289 = Not(move _290);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:62:11: 62:24
        _288 = Not(move _289);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:62:3: 62:25
        switchInt(move _288) -> [0: bb97, otherwise: bb96]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:62:3: 62:25
    }

    bb96: {
        _294 = core::panicking::panic(const "assertion failed: !(-nan < nan)"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:62:3: 62:25
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:62:3: 62:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb97: {
        _298 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:64:12: 64:15
        _299 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:64:18: 64:21
        _297 = Add(move _298, move _299); // scope 3 at ui/numbers-arithmetic/float-nan.rs:64:11: 64:22
        _296 = core::f64::<impl f64>::is_nan(move _297) -> bb98; // scope 3 at ui/numbers-arithmetic/float-nan.rs:64:11: 64:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:64:23: 64:29
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb98: {
        _295 = Not(move _296);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:64:3: 64:32
        switchInt(move _295) -> [0: bb100, otherwise: bb99]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:64:3: 64:32
    }

    bb99: {
        _300 = core::panicking::panic(const "assertion failed: (nan + inf).is_nan()"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:64:3: 64:32
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:64:3: 64:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb100: {
        _304 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:65:12: 65:15
        _306 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:65:19: 65:22
        _305 = Neg(move _306);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:65:18: 65:22
        _303 = Add(move _304, move _305); // scope 3 at ui/numbers-arithmetic/float-nan.rs:65:11: 65:23
        _302 = core::f64::<impl f64>::is_nan(move _303) -> bb101; // scope 3 at ui/numbers-arithmetic/float-nan.rs:65:11: 65:32
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:65:24: 65:30
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb101: {
        _301 = Not(move _302);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:65:3: 65:33
        switchInt(move _301) -> [0: bb103, otherwise: bb102]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:65:3: 65:33
    }

    bb102: {
        _307 = core::panicking::panic(const "assertion failed: (nan + -inf).is_nan()"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:65:3: 65:33
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:65:3: 65:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb103: {
        _311 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:66:12: 66:15
        _310 = Add(move _311, const 0f64); // scope 3 at ui/numbers-arithmetic/float-nan.rs:66:11: 66:21
        _309 = core::f64::<impl f64>::is_nan(move _310) -> bb104; // scope 3 at ui/numbers-arithmetic/float-nan.rs:66:11: 66:30
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:66:22: 66:28
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb104: {
        _308 = Not(move _309);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:66:3: 66:31
        switchInt(move _308) -> [0: bb106, otherwise: bb105]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:66:3: 66:31
    }

    bb105: {
        _312 = core::panicking::panic(const "assertion failed: (nan + 0.).is_nan()"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:66:3: 66:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:66:3: 66:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb106: {
        _316 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:67:12: 67:15
        _315 = Add(move _316, const 1f64); // scope 3 at ui/numbers-arithmetic/float-nan.rs:67:11: 67:21
        _314 = core::f64::<impl f64>::is_nan(move _315) -> bb107; // scope 3 at ui/numbers-arithmetic/float-nan.rs:67:11: 67:30
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:67:22: 67:28
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb107: {
        _313 = Not(move _314);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:67:3: 67:31
        switchInt(move _313) -> [0: bb109, otherwise: bb108]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:67:3: 67:31
    }

    bb108: {
        _317 = core::panicking::panic(const "assertion failed: (nan + 1.).is_nan()"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:67:3: 67:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:67:3: 67:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb109: {
        _321 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:68:12: 68:15
        _320 = Mul(move _321, const 1f64); // scope 3 at ui/numbers-arithmetic/float-nan.rs:68:11: 68:21
        _319 = core::f64::<impl f64>::is_nan(move _320) -> bb110; // scope 3 at ui/numbers-arithmetic/float-nan.rs:68:11: 68:30
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:68:22: 68:28
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb110: {
        _318 = Not(move _319);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:68:3: 68:31
        switchInt(move _318) -> [0: bb112, otherwise: bb111]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:68:3: 68:31
    }

    bb111: {
        _322 = core::panicking::panic(const "assertion failed: (nan * 1.).is_nan()"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:68:3: 68:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:68:3: 68:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb112: {
        _326 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:69:12: 69:15
        _325 = Div(move _326, const 1f64); // scope 3 at ui/numbers-arithmetic/float-nan.rs:69:11: 69:21
        _324 = core::f64::<impl f64>::is_nan(move _325) -> bb113; // scope 3 at ui/numbers-arithmetic/float-nan.rs:69:11: 69:30
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:69:22: 69:28
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb113: {
        _323 = Not(move _324);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:69:3: 69:31
        switchInt(move _323) -> [0: bb115, otherwise: bb114]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:69:3: 69:31
    }

    bb114: {
        _327 = core::panicking::panic(const "assertion failed: (nan / 1.).is_nan()"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:69:3: 69:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:69:3: 69:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb115: {
        _331 = _1;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:70:12: 70:15
        _330 = Div(move _331, const 0f64); // scope 3 at ui/numbers-arithmetic/float-nan.rs:70:11: 70:21
        _329 = core::f64::<impl f64>::is_nan(move _330) -> bb116; // scope 3 at ui/numbers-arithmetic/float-nan.rs:70:11: 70:30
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:70:22: 70:28
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb116: {
        _328 = Not(move _329);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:70:3: 70:31
        switchInt(move _328) -> [0: bb118, otherwise: bb117]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:70:3: 70:31
    }

    bb117: {
        _332 = core::panicking::panic(const "assertion failed: (nan / 0.).is_nan()"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:70:3: 70:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:70:3: 70:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb118: {
        _335 = const NaNf64;             // scope 3 at ui/numbers-arithmetic/float-nan.rs:71:11: 71:23
        _334 = core::f64::<impl f64>::is_nan(move _335) -> bb119; // scope 3 at ui/numbers-arithmetic/float-nan.rs:71:11: 71:32
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:71:24: 71:30
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb119: {
        _333 = Not(move _334);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:71:3: 71:33
        switchInt(move _333) -> [0: bb121, otherwise: bb120]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:71:3: 71:33
    }

    bb120: {
        _336 = core::panicking::panic(const "assertion failed: (0.0 / 0.0f64).is_nan()"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:71:3: 71:33
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:71:3: 71:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb121: {
        _341 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:72:13: 72:16
        _340 = Neg(move _341);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:72:12: 72:16
        _342 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:72:19: 72:22
        _339 = Add(move _340, move _342); // scope 3 at ui/numbers-arithmetic/float-nan.rs:72:11: 72:23
        _338 = core::f64::<impl f64>::is_nan(move _339) -> bb122; // scope 3 at ui/numbers-arithmetic/float-nan.rs:72:11: 72:32
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:72:24: 72:30
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb122: {
        _337 = Not(move _338);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:72:3: 72:33
        switchInt(move _337) -> [0: bb124, otherwise: bb123]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:72:3: 72:33
    }

    bb123: {
        _343 = core::panicking::panic(const "assertion failed: (-inf + inf).is_nan()"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:72:3: 72:33
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:72:3: 72:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb124: {
        _347 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:73:12: 73:15
        _348 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:73:18: 73:21
        _346 = Sub(move _347, move _348); // scope 3 at ui/numbers-arithmetic/float-nan.rs:73:11: 73:22
        _345 = core::f64::<impl f64>::is_nan(move _346) -> bb125; // scope 3 at ui/numbers-arithmetic/float-nan.rs:73:11: 73:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:73:23: 73:29
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb125: {
        _344 = Not(move _345);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:73:3: 73:32
        switchInt(move _344) -> [0: bb127, otherwise: bb126]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:73:3: 73:32
    }

    bb126: {
        _349 = core::panicking::panic(const "assertion failed: (inf - inf).is_nan()"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:73:3: 73:32
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:73:3: 73:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb127: {
        _352 = core::f64::<impl f64>::is_nan(const -1f64) -> bb128; // scope 3 at ui/numbers-arithmetic/float-nan.rs:75:12: 75:30
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:75:22: 75:28
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb128: {
        _351 = Not(move _352);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:75:11: 75:30
        _350 = Not(move _351);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:75:3: 75:31
        switchInt(move _350) -> [0: bb130, otherwise: bb129]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:75:3: 75:31
    }

    bb129: {
        _353 = core::panicking::panic(const "assertion failed: !(-1.0f64).is_nan()"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:75:3: 75:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:75:3: 75:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb130: {
        _356 = core::f64::<impl f64>::is_nan(const 0f64) -> bb131; // scope 3 at ui/numbers-arithmetic/float-nan.rs:76:12: 76:29
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:76:21: 76:27
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb131: {
        _355 = Not(move _356);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:76:11: 76:29
        _354 = Not(move _355);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:76:3: 76:30
        switchInt(move _354) -> [0: bb133, otherwise: bb132]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:76:3: 76:30
    }

    bb132: {
        _357 = core::panicking::panic(const "assertion failed: !(0.0f64).is_nan()"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:76:3: 76:30
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:76:3: 76:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb133: {
        _360 = core::f64::<impl f64>::is_nan(const 0.10000000000000001f64) -> bb134; // scope 3 at ui/numbers-arithmetic/float-nan.rs:77:12: 77:29
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:77:21: 77:27
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb134: {
        _359 = Not(move _360);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:77:11: 77:29
        _358 = Not(move _359);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:77:3: 77:30
        switchInt(move _358) -> [0: bb136, otherwise: bb135]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:77:3: 77:30
    }

    bb135: {
        _361 = core::panicking::panic(const "assertion failed: !(0.1f64).is_nan()"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:77:3: 77:30
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:77:3: 77:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb136: {
        _364 = core::f64::<impl f64>::is_nan(const 1f64) -> bb137; // scope 3 at ui/numbers-arithmetic/float-nan.rs:78:12: 78:29
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:78:21: 78:27
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb137: {
        _363 = Not(move _364);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:78:11: 78:29
        _362 = Not(move _363);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:78:3: 78:30
        switchInt(move _362) -> [0: bb139, otherwise: bb138]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:78:3: 78:30
    }

    bb138: {
        _365 = core::panicking::panic(const "assertion failed: !(1.0f64).is_nan()"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:78:3: 78:30
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:78:3: 78:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb139: {
        _369 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:79:12: 79:17
        _368 = core::f64::<impl f64>::is_nan(move _369) -> bb140; // scope 3 at ui/numbers-arithmetic/float-nan.rs:79:12: 79:26
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:79:18: 79:24
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb140: {
        _367 = Not(move _368);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:79:11: 79:26
        _366 = Not(move _367);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:79:3: 79:27
        switchInt(move _366) -> [0: bb142, otherwise: bb141]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:79:3: 79:27
    }

    bb141: {
        _370 = core::panicking::panic(const "assertion failed: !(inf).is_nan()"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:79:3: 79:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:79:3: 79:27
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb142: {
        _375 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:80:14: 80:17
        _374 = Neg(move _375);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:80:12: 80:18
        _373 = core::f64::<impl f64>::is_nan(move _374) -> bb143; // scope 3 at ui/numbers-arithmetic/float-nan.rs:80:12: 80:27
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:80:19: 80:25
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb143: {
        _372 = Not(move _373);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:80:11: 80:27
        _371 = Not(move _372);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:80:3: 80:28
        switchInt(move _371) -> [0: bb145, otherwise: bb144]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:80:3: 80:28
    }

    bb144: {
        _376 = core::panicking::panic(const "assertion failed: !(-inf).is_nan()"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:80:3: 80:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:80:3: 80:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb145: {
        _382 = _6;                       // scope 3 at ui/numbers-arithmetic/float-nan.rs:81:17: 81:20
        _381 = Neg(move _382);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:81:16: 81:20
        _380 = Div(const 1f64, move _381); // scope 3 at ui/numbers-arithmetic/float-nan.rs:81:12: 81:21
        _379 = core::f64::<impl f64>::is_nan(move _380) -> bb146; // scope 3 at ui/numbers-arithmetic/float-nan.rs:81:12: 81:30
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:81:22: 81:28
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb146: {
        _378 = Not(move _379);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:81:11: 81:30
        _377 = Not(move _378);           // scope 3 at ui/numbers-arithmetic/float-nan.rs:81:3: 81:31
        switchInt(move _377) -> [0: bb148, otherwise: bb147]; // scope 3 at ui/numbers-arithmetic/float-nan.rs:81:3: 81:31
    }

    bb147: {
        _383 = core::panicking::panic(const "assertion failed: !(1. / -inf).is_nan()"); // scope 3 at ui/numbers-arithmetic/float-nan.rs:81:3: 81:31
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-nan.rs:81:3: 81:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb148: {
        return;                          // scope 0 at ui/numbers-arithmetic/float-nan.rs:82:2: 82:2
    }
}
