// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/promoted_overflow.rs:11:11: 11:11
    let _1: &u32;                        // in scope 0 at ui/numbers-arithmetic/promoted_overflow.rs:12:9: 12:10
    let _2: &u32;                        // in scope 0 at ui/numbers-arithmetic/promoted_overflow.rs:12:27: 12:38
    let mut _3: (u32, bool);             // in scope 0 at ui/numbers-arithmetic/promoted_overflow.rs:12:28: 12:38
    let mut _4: &u32;                    // in scope 0 at ui/numbers-arithmetic/promoted_overflow.rs:12:27: 12:38
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/numbers-arithmetic/promoted_overflow.rs:12:9: 12:10
    }

    bb0: {
        _3 = CheckedSub(const 0_u32, const 1_u32); // scope 0 at ui/numbers-arithmetic/promoted_overflow.rs:12:28: 12:38
        assert(!move (_3.1: bool), "attempt to compute `{} - {}`, which would overflow", const 0_u32, const 1_u32) -> bb1; // scope 0 at ui/numbers-arithmetic/promoted_overflow.rs:12:28: 12:38
    }

    bb1: {
        _4 = const _;                    // scope 0 at ui/numbers-arithmetic/promoted_overflow.rs:12:27: 12:38
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/promoted_overflow.rs:12:27: 12:38
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[0])) }
        _2 = _4;                         // scope 0 at ui/numbers-arithmetic/promoted_overflow.rs:12:27: 12:38
        _1 = _2;                         // scope 0 at ui/numbers-arithmetic/promoted_overflow.rs:12:27: 12:38
        return;                          // scope 0 at ui/numbers-arithmetic/promoted_overflow.rs:13:2: 13:2
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/numbers-arithmetic/promoted_overflow.rs:12:27: 12:38
    let mut _1: u32;                     // in scope 0 at ui/numbers-arithmetic/promoted_overflow.rs:12:28: 12:38
    let mut _2: (u32, bool);             // in scope 0 at ui/numbers-arithmetic/promoted_overflow.rs:12:28: 12:38

    bb0: {
        _2 = CheckedSub(const 0_u32, const 1_u32); // scope 0 at ui/numbers-arithmetic/promoted_overflow.rs:12:28: 12:38
        _1 = move (_2.0: u32);           // scope 0 at ui/numbers-arithmetic/promoted_overflow.rs:12:28: 12:38
        _0 = &_1;                        // scope 0 at ui/numbers-arithmetic/promoted_overflow.rs:12:27: 12:38
        return;                          // scope 0 at ui/numbers-arithmetic/promoted_overflow.rs:12:27: 12:38
    }
}
