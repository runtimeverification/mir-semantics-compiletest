// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/overflowing-pow-signed.rs:6:11: 6:11
    let _1: i32;                         // in scope 0 at ui/numbers-arithmetic/overflowing-pow-signed.rs:7:9: 7:11
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/numbers-arithmetic/overflowing-pow-signed.rs:7:9: 7:11
    }

    bb0: {
        _1 = core::num::<impl i32>::pow(const 2_i32, const 1024_u32) -> bb1; // scope 0 at ui/numbers-arithmetic/overflowing-pow-signed.rs:7:14: 7:28
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/overflowing-pow-signed.rs:7:19: 7:22
                                         // + literal: Const { ty: fn(i32, u32) -> i32 {core::num::<impl i32>::pow}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/numbers-arithmetic/overflowing-pow-signed.rs:8:2: 8:2
    }
}
