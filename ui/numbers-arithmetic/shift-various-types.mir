// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &Panolpy) -> () {
    debug p => _1;
    let mut _0: ();
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let _4: i32;
    let mut _5: i8;
    let _6: &i32;
    let _7: &i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&i32, &i32);
    let mut _16: &i32;
    let _17: i32;
    let mut _18: i16;
    let _19: &i32;
    let _20: &i32;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: i32;
    let mut _24: i32;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&i32, &i32);
    let mut _29: &i32;
    let _30: i32;
    let mut _31: i32;
    let _32: &i32;
    let _33: &i32;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: i32;
    let mut _37: i32;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&i32, &i32);
    let mut _42: &i32;
    let _43: i32;
    let mut _44: i64;
    let _45: &i32;
    let _46: &i32;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: i32;
    let mut _50: i32;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _54: (&i32, &i32);
    let mut _55: &i32;
    let _56: i32;
    let mut _57: isize;
    let _58: &i32;
    let _59: &i32;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: i32;
    let mut _63: i32;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: (&i32, &i32);
    let mut _68: &i32;
    let _69: i32;
    let mut _70: u8;
    let _71: &i32;
    let _72: &i32;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: i32;
    let mut _76: i32;
    let _78: !;
    let mut _79: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _80: (&i32, &i32);
    let mut _81: &i32;
    let _82: i32;
    let mut _83: u16;
    let _84: &i32;
    let _85: &i32;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: i32;
    let mut _89: i32;
    let _91: !;
    let mut _92: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _93: (&i32, &i32);
    let mut _94: &i32;
    let _95: i32;
    let mut _96: u32;
    let _97: &i32;
    let _98: &i32;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: i32;
    let mut _102: i32;
    let _104: !;
    let mut _105: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _106: (&i32, &i32);
    let mut _107: &i32;
    let _108: i32;
    let mut _109: u64;
    let _110: &i32;
    let _111: &i32;
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: i32;
    let mut _115: i32;
    let _117: !;
    let mut _118: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _119: (&i32, &i32);
    let mut _120: &i32;
    let _121: i32;
    let mut _122: usize;
    let _123: &i32;
    let _124: &i32;
    let mut _125: bool;
    let mut _126: bool;
    let mut _127: i32;
    let mut _128: i32;
    let _130: !;
    let mut _131: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _132: &i32;
    let mut _133: &i32;
    let mut _134: &i32;
    let mut _135: &i32;
    let mut _136: &i32;
    let mut _137: &i32;
    let mut _138: &i32;
    let mut _139: &i32;
    let mut _140: &i32;
    let mut _141: &i32;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _19;
        debug right_val => _20;
        let _25: core::panicking::AssertKind;
        scope 4 {
            debug kind => _25;
        }
    }
    scope 5 {
        debug left_val => _32;
        debug right_val => _33;
        let _38: core::panicking::AssertKind;
        scope 6 {
            debug kind => _38;
        }
    }
    scope 7 {
        debug left_val => _45;
        debug right_val => _46;
        let _51: core::panicking::AssertKind;
        scope 8 {
            debug kind => _51;
        }
    }
    scope 9 {
        debug left_val => _58;
        debug right_val => _59;
        let _64: core::panicking::AssertKind;
        scope 10 {
            debug kind => _64;
        }
    }
    scope 11 {
        debug left_val => _71;
        debug right_val => _72;
        let _77: core::panicking::AssertKind;
        scope 12 {
            debug kind => _77;
        }
    }
    scope 13 {
        debug left_val => _84;
        debug right_val => _85;
        let _90: core::panicking::AssertKind;
        scope 14 {
            debug kind => _90;
        }
    }
    scope 15 {
        debug left_val => _97;
        debug right_val => _98;
        let _103: core::panicking::AssertKind;
        scope 16 {
            debug kind => _103;
        }
    }
    scope 17 {
        debug left_val => _110;
        debug right_val => _111;
        let _116: core::panicking::AssertKind;
        scope 18 {
            debug kind => _116;
        }
    }
    scope 19 {
        debug left_val => _123;
        debug right_val => _124;
        let _129: core::panicking::AssertKind;
        scope 20 {
            debug kind => _129;
        }
    }

    bb0: {
        _5 = ((*_1).0: i8);
        _4 = Shr(const 22_i32, move _5);
        _3 = &_4;
        _141 = const _;
        _2 = (move _3, _141);
        _6 = (_2.0: &i32);
        _7 = (_2.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb2: {
        _18 = ((*_1).1: i16);
        _17 = Shr(const 22_i32, move _18);
        _16 = &_17;
        _140 = const _;
        _15 = (move _16, _140);
        _19 = (_15.0: &i32);
        _20 = (_15.1: &i32);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<i32, i32>(move _25, _19, _20, move _27) -> unwind continue;
    }

    bb4: {
        _31 = ((*_1).2: i32);
        _30 = Shr(const 22_i32, move _31);
        _29 = &_30;
        _139 = const _;
        _28 = (move _29, _139);
        _32 = (_28.0: &i32);
        _33 = (_28.1: &i32);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<i32, i32>(move _38, _32, _33, move _40) -> unwind continue;
    }

    bb6: {
        _44 = ((*_1).3: i64);
        _43 = Shr(const 22_i32, move _44);
        _42 = &_43;
        _138 = const _;
        _41 = (move _42, _138);
        _45 = (_41.0: &i32);
        _46 = (_41.1: &i32);
        _49 = (*_45);
        _50 = (*_46);
        _48 = Eq(move _49, move _50);
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<i32, i32>(move _51, _45, _46, move _53) -> unwind continue;
    }

    bb8: {
        _57 = ((*_1).4: isize);
        _56 = Shr(const 22_i32, move _57);
        _55 = &_56;
        _137 = const _;
        _54 = (move _55, _137);
        _58 = (_54.0: &i32);
        _59 = (_54.1: &i32);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<i32, i32>(move _64, _58, _59, move _66) -> unwind continue;
    }

    bb10: {
        _70 = ((*_1).5: u8);
        _69 = Shr(const 22_i32, move _70);
        _68 = &_69;
        _136 = const _;
        _67 = (move _68, _136);
        _71 = (_67.0: &i32);
        _72 = (_67.1: &i32);
        _75 = (*_71);
        _76 = (*_72);
        _74 = Eq(move _75, move _76);
        _73 = Not(move _74);
        switchInt(move _73) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _77 = core::panicking::AssertKind::Eq;
        _79 = Option::<Arguments<'_>>::None;
        _78 = core::panicking::assert_failed::<i32, i32>(move _77, _71, _72, move _79) -> unwind continue;
    }

    bb12: {
        _83 = ((*_1).6: u16);
        _82 = Shr(const 22_i32, move _83);
        _81 = &_82;
        _135 = const _;
        _80 = (move _81, _135);
        _84 = (_80.0: &i32);
        _85 = (_80.1: &i32);
        _88 = (*_84);
        _89 = (*_85);
        _87 = Eq(move _88, move _89);
        _86 = Not(move _87);
        switchInt(move _86) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _90 = core::panicking::AssertKind::Eq;
        _92 = Option::<Arguments<'_>>::None;
        _91 = core::panicking::assert_failed::<i32, i32>(move _90, _84, _85, move _92) -> unwind continue;
    }

    bb14: {
        _96 = ((*_1).7: u32);
        _95 = Shr(const 22_i32, move _96);
        _94 = &_95;
        _134 = const _;
        _93 = (move _94, _134);
        _97 = (_93.0: &i32);
        _98 = (_93.1: &i32);
        _101 = (*_97);
        _102 = (*_98);
        _100 = Eq(move _101, move _102);
        _99 = Not(move _100);
        switchInt(move _99) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _103 = core::panicking::AssertKind::Eq;
        _105 = Option::<Arguments<'_>>::None;
        _104 = core::panicking::assert_failed::<i32, i32>(move _103, _97, _98, move _105) -> unwind continue;
    }

    bb16: {
        _109 = ((*_1).8: u64);
        _108 = Shr(const 22_i32, move _109);
        _107 = &_108;
        _133 = const _;
        _106 = (move _107, _133);
        _110 = (_106.0: &i32);
        _111 = (_106.1: &i32);
        _114 = (*_110);
        _115 = (*_111);
        _113 = Eq(move _114, move _115);
        _112 = Not(move _113);
        switchInt(move _112) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _116 = core::panicking::AssertKind::Eq;
        _118 = Option::<Arguments<'_>>::None;
        _117 = core::panicking::assert_failed::<i32, i32>(move _116, _110, _111, move _118) -> unwind continue;
    }

    bb18: {
        _122 = ((*_1).9: usize);
        _121 = Shr(const 22_i32, move _122);
        _120 = &_121;
        _132 = const _;
        _119 = (move _120, _132);
        _123 = (_119.0: &i32);
        _124 = (_119.1: &i32);
        _127 = (*_123);
        _128 = (*_124);
        _126 = Eq(move _127, move _128);
        _125 = Not(move _126);
        switchInt(move _125) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _129 = core::panicking::AssertKind::Eq;
        _131 = Option::<Arguments<'_>>::None;
        _130 = core::panicking::assert_failed::<i32, i32>(move _129, _123, _124, move _131) -> unwind continue;
    }

    bb20: {
        return;
    }
}

promoted[0] in foo: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 11_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in foo: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 11_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in foo: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 11_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in foo: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 11_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in foo: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 11_i32;
        _0 = &_1;
        return;
    }
}

promoted[5] in foo: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 11_i32;
        _0 = &_1;
        return;
    }
}

promoted[6] in foo: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 11_i32;
        _0 = &_1;
        return;
    }
}

promoted[7] in foo: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 11_i32;
        _0 = &_1;
        return;
    }
}

promoted[8] in foo: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 11_i32;
        _0 = &_1;
        return;
    }
}

promoted[9] in foo: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 11_i32;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Panolpy;
    let _2: &Panolpy;
    scope 1 {
        debug p => _1;
    }

    bb0: {
        _1 = Panolpy { i8: const 1_i8, i16: const 1_i16, i32: const 1_i32, i64: const 1_i64, isize: const 1_isize, u8: const 1_u8, u16: const 1_u16, u32: const 1_u32, u64: const 1_u64, usize: const 1_usize };
        _2 = &_1;
        _0 = foo(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
