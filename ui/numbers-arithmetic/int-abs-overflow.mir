// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:8:11: 8:11
    let mut _1: bool;                    // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:9:5: 9:61
    let mut _2: bool;                    // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:9:13: 9:60
    let mut _3: &std::result::Result<i8, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:9:13: 9:60
    let _4: std::result::Result<i8, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:9:13: 9:51
    let mut _5: std::thread::JoinHandle<i8>; // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:9:13: 9:44
    let mut _6: [closure@ui/numbers-arithmetic/int-abs-overflow.rs:9:27: 9:29]; // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:9:27: 9:43
    let mut _7: !;                       // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:9:5: 9:61
    let mut _8: bool;                    // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:10:5: 10:62
    let mut _9: bool;                    // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:10:13: 10:61
    let mut _10: &std::result::Result<i16, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:10:13: 10:61
    let _11: std::result::Result<i16, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:10:13: 10:52
    let mut _12: std::thread::JoinHandle<i16>; // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:10:13: 10:45
    let mut _13: [closure@ui/numbers-arithmetic/int-abs-overflow.rs:10:27: 10:29]; // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:10:27: 10:44
    let mut _14: !;                      // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:10:5: 10:62
    let mut _15: bool;                   // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:11:5: 11:62
    let mut _16: bool;                   // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:11:13: 11:61
    let mut _17: &std::result::Result<i32, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:11:13: 11:61
    let _18: std::result::Result<i32, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:11:13: 11:52
    let mut _19: std::thread::JoinHandle<i32>; // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:11:13: 11:45
    let mut _20: [closure@ui/numbers-arithmetic/int-abs-overflow.rs:11:27: 11:29]; // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:11:27: 11:44
    let mut _21: !;                      // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:11:5: 11:62
    let mut _22: bool;                   // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:12:5: 12:62
    let mut _23: bool;                   // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:12:13: 12:61
    let mut _24: &std::result::Result<i64, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:12:13: 12:61
    let _25: std::result::Result<i64, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:12:13: 12:52
    let mut _26: std::thread::JoinHandle<i64>; // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:12:13: 12:45
    let mut _27: [closure@ui/numbers-arithmetic/int-abs-overflow.rs:12:27: 12:29]; // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:12:27: 12:44
    let mut _28: !;                      // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:12:5: 12:62
    let mut _29: bool;                   // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:13:5: 13:64
    let mut _30: bool;                   // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:13:13: 13:63
    let mut _31: &std::result::Result<isize, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:13:13: 13:63
    let _32: std::result::Result<isize, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:13:13: 13:54
    let mut _33: std::thread::JoinHandle<isize>; // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:13:13: 13:47
    let mut _34: [closure@ui/numbers-arithmetic/int-abs-overflow.rs:13:27: 13:29]; // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:13:27: 13:46
    let mut _35: !;                      // in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:13:5: 13:64

    bb0: {
        _5 = spawn::<[closure@ui/numbers-arithmetic/int-abs-overflow.rs:9:27: 9:29], i8>(move _6) -> bb1; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:9:13: 9:44
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:9:13: 9:26
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/int-abs-overflow.rs:9:27: 9:29]) -> JoinHandle<i8> {spawn::<[closure@ui/numbers-arithmetic/int-abs-overflow.rs:9:27: 9:29], i8>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = JoinHandle::<i8>::join(move _5) -> bb2; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:9:13: 9:51
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:9:45: 9:49
                                         // + literal: Const { ty: fn(JoinHandle<i8>) -> Result<i8, Box<(dyn Any + Send + 'static)>> {JoinHandle::<i8>::join}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &_4;                        // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:9:13: 9:60
        _2 = Result::<i8, Box<dyn Any + Send>>::is_err(move _3) -> [return: bb3, unwind: bb35]; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:9:13: 9:60
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:9:52: 9:58
                                         // + literal: Const { ty: for<'a> fn(&'a Result<i8, Box<dyn Any + Send>>) -> bool {Result::<i8, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = Not(move _2);               // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:9:5: 9:61
        drop(_4) -> bb4;                 // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:9:60: 9:61
    }

    bb4: {
        switchInt(move _1) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:9:5: 9:61
    }

    bb5: {
        _7 = core::panicking::panic(const "assertion failed: thread::spawn(|| i8::MIN.abs()).join().is_err()"); // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:9:5: 9:61
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:9:5: 9:61
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _12 = spawn::<[closure@ui/numbers-arithmetic/int-abs-overflow.rs:10:27: 10:29], i16>(move _13) -> bb7; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:10:13: 10:45
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:10:13: 10:26
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/int-abs-overflow.rs:10:27: 10:29]) -> JoinHandle<i16> {spawn::<[closure@ui/numbers-arithmetic/int-abs-overflow.rs:10:27: 10:29], i16>}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = JoinHandle::<i16>::join(move _12) -> bb8; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:10:13: 10:52
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:10:46: 10:50
                                         // + literal: Const { ty: fn(JoinHandle<i16>) -> Result<i16, Box<(dyn Any + Send + 'static)>> {JoinHandle::<i16>::join}, val: Value(<ZST>) }
    }

    bb8: {
        _10 = &_11;                      // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:10:13: 10:61
        _9 = Result::<i16, Box<dyn Any + Send>>::is_err(move _10) -> [return: bb9, unwind: bb34]; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:10:13: 10:61
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:10:53: 10:59
                                         // + literal: Const { ty: for<'a> fn(&'a Result<i16, Box<dyn Any + Send>>) -> bool {Result::<i16, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb9: {
        _8 = Not(move _9);               // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:10:5: 10:62
        drop(_11) -> bb10;               // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:10:61: 10:62
    }

    bb10: {
        switchInt(move _8) -> [0: bb12, otherwise: bb11]; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:10:5: 10:62
    }

    bb11: {
        _14 = core::panicking::panic(const "assertion failed: thread::spawn(|| i16::MIN.abs()).join().is_err()"); // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:10:5: 10:62
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:10:5: 10:62
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _19 = spawn::<[closure@ui/numbers-arithmetic/int-abs-overflow.rs:11:27: 11:29], i32>(move _20) -> bb13; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:11:13: 11:45
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:11:13: 11:26
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/int-abs-overflow.rs:11:27: 11:29]) -> JoinHandle<i32> {spawn::<[closure@ui/numbers-arithmetic/int-abs-overflow.rs:11:27: 11:29], i32>}, val: Value(<ZST>) }
    }

    bb13: {
        _18 = JoinHandle::<i32>::join(move _19) -> bb14; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:11:13: 11:52
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:11:46: 11:50
                                         // + literal: Const { ty: fn(JoinHandle<i32>) -> Result<i32, Box<(dyn Any + Send + 'static)>> {JoinHandle::<i32>::join}, val: Value(<ZST>) }
    }

    bb14: {
        _17 = &_18;                      // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:11:13: 11:61
        _16 = Result::<i32, Box<dyn Any + Send>>::is_err(move _17) -> [return: bb15, unwind: bb33]; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:11:13: 11:61
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:11:53: 11:59
                                         // + literal: Const { ty: for<'a> fn(&'a Result<i32, Box<dyn Any + Send>>) -> bool {Result::<i32, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb15: {
        _15 = Not(move _16);             // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:11:5: 11:62
        drop(_18) -> bb16;               // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:11:61: 11:62
    }

    bb16: {
        switchInt(move _15) -> [0: bb18, otherwise: bb17]; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:11:5: 11:62
    }

    bb17: {
        _21 = core::panicking::panic(const "assertion failed: thread::spawn(|| i32::MIN.abs()).join().is_err()"); // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:11:5: 11:62
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:11:5: 11:62
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _26 = spawn::<[closure@ui/numbers-arithmetic/int-abs-overflow.rs:12:27: 12:29], i64>(move _27) -> bb19; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:12:13: 12:45
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:12:13: 12:26
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/int-abs-overflow.rs:12:27: 12:29]) -> JoinHandle<i64> {spawn::<[closure@ui/numbers-arithmetic/int-abs-overflow.rs:12:27: 12:29], i64>}, val: Value(<ZST>) }
    }

    bb19: {
        _25 = JoinHandle::<i64>::join(move _26) -> bb20; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:12:13: 12:52
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:12:46: 12:50
                                         // + literal: Const { ty: fn(JoinHandle<i64>) -> Result<i64, Box<(dyn Any + Send + 'static)>> {JoinHandle::<i64>::join}, val: Value(<ZST>) }
    }

    bb20: {
        _24 = &_25;                      // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:12:13: 12:61
        _23 = Result::<i64, Box<dyn Any + Send>>::is_err(move _24) -> [return: bb21, unwind: bb32]; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:12:13: 12:61
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:12:53: 12:59
                                         // + literal: Const { ty: for<'a> fn(&'a Result<i64, Box<dyn Any + Send>>) -> bool {Result::<i64, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb21: {
        _22 = Not(move _23);             // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:12:5: 12:62
        drop(_25) -> bb22;               // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:12:61: 12:62
    }

    bb22: {
        switchInt(move _22) -> [0: bb24, otherwise: bb23]; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:12:5: 12:62
    }

    bb23: {
        _28 = core::panicking::panic(const "assertion failed: thread::spawn(|| i64::MIN.abs()).join().is_err()"); // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:12:5: 12:62
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:12:5: 12:62
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb24: {
        _33 = spawn::<[closure@ui/numbers-arithmetic/int-abs-overflow.rs:13:27: 13:29], isize>(move _34) -> bb25; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:13:13: 13:47
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:13:13: 13:26
                                         // + literal: Const { ty: fn([closure@ui/numbers-arithmetic/int-abs-overflow.rs:13:27: 13:29]) -> JoinHandle<isize> {spawn::<[closure@ui/numbers-arithmetic/int-abs-overflow.rs:13:27: 13:29], isize>}, val: Value(<ZST>) }
    }

    bb25: {
        _32 = JoinHandle::<isize>::join(move _33) -> bb26; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:13:13: 13:54
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:13:48: 13:52
                                         // + literal: Const { ty: fn(JoinHandle<isize>) -> Result<isize, Box<(dyn Any + Send + 'static)>> {JoinHandle::<isize>::join}, val: Value(<ZST>) }
    }

    bb26: {
        _31 = &_32;                      // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:13:13: 13:63
        _30 = Result::<isize, Box<dyn Any + Send>>::is_err(move _31) -> [return: bb27, unwind: bb31]; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:13:13: 13:63
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:13:55: 13:61
                                         // + literal: Const { ty: for<'a> fn(&'a Result<isize, Box<dyn Any + Send>>) -> bool {Result::<isize, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb27: {
        _29 = Not(move _30);             // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:13:5: 13:64
        drop(_32) -> bb28;               // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:13:63: 13:64
    }

    bb28: {
        switchInt(move _29) -> [0: bb30, otherwise: bb29]; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:13:5: 13:64
    }

    bb29: {
        _35 = core::panicking::panic(const "assertion failed: thread::spawn(|| isize::MIN.abs()).join().is_err()"); // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:13:5: 13:64
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:13:5: 13:64
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb30: {
        return;                          // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:14:2: 14:2
    }

    bb31 (cleanup): {
        drop(_32) -> bb36;               // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:13:63: 13:64
    }

    bb32 (cleanup): {
        drop(_25) -> bb36;               // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:12:61: 12:62
    }

    bb33 (cleanup): {
        drop(_18) -> bb36;               // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:11:61: 11:62
    }

    bb34 (cleanup): {
        drop(_11) -> bb36;               // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:10:61: 10:62
    }

    bb35 (cleanup): {
        drop(_4) -> bb36;                // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:9:60: 9:61
    }

    bb36 (cleanup): {
        resume;                          // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:8:1: 14:2
    }
}

fn main::{closure#0}(_1: [closure@ui/numbers-arithmetic/int-abs-overflow.rs:9:27: 9:29]) -> i8 {
    let mut _0: i8;                      // return place in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:9:30: 9:30

    bb0: {
        _0 = core::num::<impl i8>::abs(const _) -> bb1; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:9:30: 9:43
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:9:38: 9:41
                                         // + literal: Const { ty: fn(i8) -> i8 {core::num::<impl i8>::abs}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:9:43: 9:43
    }
}

fn main::{closure#1}(_1: [closure@ui/numbers-arithmetic/int-abs-overflow.rs:10:27: 10:29]) -> i16 {
    let mut _0: i16;                     // return place in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:10:30: 10:30

    bb0: {
        _0 = core::num::<impl i16>::abs(const _) -> bb1; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:10:30: 10:44
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:10:39: 10:42
                                         // + literal: Const { ty: fn(i16) -> i16 {core::num::<impl i16>::abs}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:10:44: 10:44
    }
}

fn main::{closure#2}(_1: [closure@ui/numbers-arithmetic/int-abs-overflow.rs:11:27: 11:29]) -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:11:30: 11:30

    bb0: {
        _0 = core::num::<impl i32>::abs(const _) -> bb1; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:11:30: 11:44
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:11:39: 11:42
                                         // + literal: Const { ty: fn(i32) -> i32 {core::num::<impl i32>::abs}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:11:44: 11:44
    }
}

fn main::{closure#3}(_1: [closure@ui/numbers-arithmetic/int-abs-overflow.rs:12:27: 12:29]) -> i64 {
    let mut _0: i64;                     // return place in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:12:30: 12:30

    bb0: {
        _0 = core::num::<impl i64>::abs(const _) -> bb1; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:12:30: 12:44
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:12:39: 12:42
                                         // + literal: Const { ty: fn(i64) -> i64 {core::num::<impl i64>::abs}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:12:44: 12:44
    }
}

fn main::{closure#4}(_1: [closure@ui/numbers-arithmetic/int-abs-overflow.rs:13:27: 13:29]) -> isize {
    let mut _0: isize;                   // return place in scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:13:30: 13:30

    bb0: {
        _0 = core::num::<impl isize>::abs(const _) -> bb1; // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:13:30: 13:46
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/int-abs-overflow.rs:13:41: 13:44
                                         // + literal: Const { ty: fn(isize) -> isize {core::num::<impl isize>::abs}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/numbers-arithmetic/int-abs-overflow.rs:13:46: 13:46
    }
}
