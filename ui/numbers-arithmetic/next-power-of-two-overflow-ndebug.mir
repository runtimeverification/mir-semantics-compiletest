// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::ops::Range<i32>;
    let mut _2: std::ops::Range<i32>;
    let mut _3: std::ops::Range<i32>;
    let mut _4: std::option::Option<i32>;
    let mut _5: &mut std::ops::Range<i32>;
    let mut _6: isize;
    let mut _8: (&u8, &u8);
    let mut _9: &u8;
    let _10: u8;
    let mut _11: u8;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: u8;
    let mut _17: u8;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&u16, &u16);
    let mut _22: &u16;
    let _23: u16;
    let mut _24: u16;
    let mut _25: u16;
    let _26: &u16;
    let _27: &u16;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: u16;
    let mut _31: u16;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&u32, &u32);
    let mut _36: &u32;
    let _37: u32;
    let mut _38: u32;
    let mut _39: u32;
    let _40: &u32;
    let _41: &u32;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: u32;
    let mut _45: u32;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&u64, &u64);
    let mut _50: &u64;
    let _51: u64;
    let mut _52: u64;
    let mut _53: u64;
    let _54: &u64;
    let _55: &u64;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: u64;
    let mut _59: u64;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: (&u128, &u128);
    let mut _64: &u128;
    let _65: u128;
    let mut _66: u128;
    let mut _67: u128;
    let _68: &u128;
    let _69: &u128;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: u128;
    let mut _73: u128;
    let _75: !;
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _78: &u128;
    let mut _79: &u64;
    let mut _80: &u32;
    let mut _81: &u16;
    scope 1 {
        debug iter => _3;
        let _7: i32;
        scope 2 {
            debug i => _7;
            let _12: &u8;
            let _13: &u8;
            let mut _77: &u8;
            scope 3 {
                debug left_val => _12;
                debug right_val => _13;
                let _18: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _18;
                }
            }
        }
    }
    scope 5 {
        debug left_val => _26;
        debug right_val => _27;
        let _32: core::panicking::AssertKind;
        scope 6 {
            debug kind => _32;
        }
    }
    scope 7 {
        debug left_val => _40;
        debug right_val => _41;
        let _46: core::panicking::AssertKind;
        scope 8 {
            debug kind => _46;
        }
    }
    scope 9 {
        debug left_val => _54;
        debug right_val => _55;
        let _60: core::panicking::AssertKind;
        scope 10 {
            debug kind => _60;
        }
    }
    scope 11 {
        debug left_val => _68;
        debug right_val => _69;
        let _74: core::panicking::AssertKind;
        scope 12 {
            debug kind => _74;
        }
    }

    bb0: {
        _2 = std::ops::Range::<i32> { start: const 129_i32, end: const 256_i32 };
        _1 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = move _1;
        goto -> bb2;
    }

    bb2: {
        _5 = &mut _3;
        _4 = <std::ops::Range<i32> as Iterator>::next(_5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _7 = ((_4 as Some).0: i32);
        _11 = _7 as u8 (IntToInt);
        _10 = core::num::<impl u8>::next_power_of_two(move _11) -> [return: bb7, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _25 = Shl(const 1_u16, const 15_i32);
        _24 = Add(move _25, const 1_u16);
        _23 = core::num::<impl u16>::next_power_of_two(move _24) -> [return: bb9, unwind continue];
    }

    bb7: {
        _9 = &_10;
        _77 = const _;
        _8 = (move _9, _77);
        _12 = (_8.0: &u8);
        _13 = (_8.1: &u8);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb2, otherwise: bb8];
    }

    bb8: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<u8, u8>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb9: {
        _22 = &_23;
        _81 = const _;
        _21 = (move _22, _81);
        _26 = (_21.0: &u16);
        _27 = (_21.1: &u16);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<u16, u16>(move _32, _26, _27, move _34) -> unwind continue;
    }

    bb11: {
        _39 = Shl(const 1_u32, const 31_i32);
        _38 = Add(move _39, const 1_u32);
        _37 = core::num::<impl u32>::next_power_of_two(move _38) -> [return: bb12, unwind continue];
    }

    bb12: {
        _36 = &_37;
        _80 = const _;
        _35 = (move _36, _80);
        _40 = (_35.0: &u32);
        _41 = (_35.1: &u32);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<u32, u32>(move _46, _40, _41, move _48) -> unwind continue;
    }

    bb14: {
        _53 = Shl(const 1_u64, const 63_i32);
        _52 = Add(move _53, const 1_u64);
        _51 = core::num::<impl u64>::next_power_of_two(move _52) -> [return: bb15, unwind continue];
    }

    bb15: {
        _50 = &_51;
        _79 = const _;
        _49 = (move _50, _79);
        _54 = (_49.0: &u64);
        _55 = (_49.1: &u64);
        _58 = (*_54);
        _59 = (*_55);
        _57 = Eq(move _58, move _59);
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<u64, u64>(move _60, _54, _55, move _62) -> unwind continue;
    }

    bb17: {
        _67 = Shl(const 1_u128, const 127_i32);
        _66 = Add(move _67, const 1_u128);
        _65 = core::num::<impl u128>::next_power_of_two(move _66) -> [return: bb18, unwind continue];
    }

    bb18: {
        _64 = &_65;
        _78 = const _;
        _63 = (move _64, _78);
        _68 = (_63.0: &u128);
        _69 = (_63.1: &u128);
        _72 = (*_68);
        _73 = (*_69);
        _71 = Eq(move _72, move _73);
        _70 = Not(move _71);
        switchInt(move _70) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _74 = core::panicking::AssertKind::Eq;
        _76 = Option::<Arguments<'_>>::None;
        _75 = core::panicking::assert_failed::<u128, u128>(move _74, _68, _69, move _76) -> unwind continue;
    }

    bb20: {
        return;
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 0_u128;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 0_u64;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 0_u32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 0_u16;
        _0 = &_1;
        return;
    }
}
