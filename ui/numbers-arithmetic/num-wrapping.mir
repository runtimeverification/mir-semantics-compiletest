// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const i8::BITS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 8_usize;
        return;
    }
}

const i8::MAX: i8 = {
    let mut _0: i8;

    bb0: {
        _0 = const _;
        return;
    }
}

const i8::MIN: i8 = {
    let mut _0: i8;

    bb0: {
        _0 = const _;
        return;
    }
}

const i16::BITS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 16_usize;
        return;
    }
}

const i16::MAX: i16 = {
    let mut _0: i16;

    bb0: {
        _0 = const _;
        return;
    }
}

const i16::MIN: i16 = {
    let mut _0: i16;

    bb0: {
        _0 = const _;
        return;
    }
}

const i32::BITS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 32_usize;
        return;
    }
}

const i32::MAX: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const _;
        return;
    }
}

const i32::MIN: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const _;
        return;
    }
}

const i64::BITS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 64_usize;
        return;
    }
}

const i64::MAX: i64 = {
    let mut _0: i64;

    bb0: {
        _0 = const _;
        return;
    }
}

const i64::MIN: i64 = {
    let mut _0: i64;

    bb0: {
        _0 = const _;
        return;
    }
}

const u8::BITS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 8_usize;
        return;
    }
}

const u8::MAX: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const _;
        return;
    }
}

const u8::MIN: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const _;
        return;
    }
}

const u16::BITS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 16_usize;
        return;
    }
}

const u16::MAX: u16 = {
    let mut _0: u16;

    bb0: {
        _0 = const _;
        return;
    }
}

const u16::MIN: u16 = {
    let mut _0: u16;

    bb0: {
        _0 = const _;
        return;
    }
}

const u32::BITS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 32_usize;
        return;
    }
}

const u32::MAX: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const _;
        return;
    }
}

const u32::MIN: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const _;
        return;
    }
}

const u64::BITS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 64_usize;
        return;
    }
}

const u64::MAX: u64 = {
    let mut _0: u64;

    bb0: {
        _0 = const _;
        return;
    }
}

const u64::MIN: u64 = {
    let mut _0: u64;

    bb0: {
        _0 = const _;
        return;
    }
}

const isize::BITS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 64_usize;
        return;
    }
}

const isize::MAX: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const _;
        return;
    }
}

const isize::MIN: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const _;
        return;
    }
}

const usize::BITS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 64_usize;
        return;
    }
}

const usize::MAX: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const usize::MIN: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();

    bb0: {
        _1 = test_ops() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = test_op_assigns() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = test_sh_ops() -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = test_sh_op_assigns() -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn test_ops() -> () {
    let mut _0: ();
    let mut _1: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _2: &std::num::Wrapping<i8>;
    let _3: std::num::Wrapping<i8>;
    let mut _4: std::num::Wrapping<i8>;
    let mut _5: std::num::Wrapping<i8>;
    let mut _6: std::num::Wrapping<i8>;
    let _7: &std::num::Wrapping<i8>;
    let _8: &std::num::Wrapping<i8>;
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _15: &std::num::Wrapping<i16>;
    let _16: std::num::Wrapping<i16>;
    let mut _17: std::num::Wrapping<i16>;
    let mut _18: std::num::Wrapping<i16>;
    let mut _19: std::num::Wrapping<i16>;
    let _20: &std::num::Wrapping<i16>;
    let _21: &std::num::Wrapping<i16>;
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _28: &std::num::Wrapping<i32>;
    let _29: std::num::Wrapping<i32>;
    let mut _30: std::num::Wrapping<i32>;
    let mut _31: std::num::Wrapping<i32>;
    let mut _32: std::num::Wrapping<i32>;
    let _33: &std::num::Wrapping<i32>;
    let _34: &std::num::Wrapping<i32>;
    let mut _35: bool;
    let mut _36: bool;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _41: &std::num::Wrapping<i64>;
    let _42: std::num::Wrapping<i64>;
    let mut _43: std::num::Wrapping<i64>;
    let mut _44: std::num::Wrapping<i64>;
    let mut _45: std::num::Wrapping<i64>;
    let _46: &std::num::Wrapping<i64>;
    let _47: &std::num::Wrapping<i64>;
    let mut _48: bool;
    let mut _49: bool;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _54: &std::num::Wrapping<isize>;
    let _55: std::num::Wrapping<isize>;
    let mut _56: std::num::Wrapping<isize>;
    let mut _57: std::num::Wrapping<isize>;
    let mut _58: std::num::Wrapping<isize>;
    let _59: &std::num::Wrapping<isize>;
    let _60: &std::num::Wrapping<isize>;
    let mut _61: bool;
    let mut _62: bool;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _66: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _67: &std::num::Wrapping<u8>;
    let _68: std::num::Wrapping<u8>;
    let mut _69: std::num::Wrapping<u8>;
    let mut _70: std::num::Wrapping<u8>;
    let mut _71: std::num::Wrapping<u8>;
    let _72: &std::num::Wrapping<u8>;
    let _73: &std::num::Wrapping<u8>;
    let mut _74: bool;
    let mut _75: bool;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _79: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _80: &std::num::Wrapping<u16>;
    let _81: std::num::Wrapping<u16>;
    let mut _82: std::num::Wrapping<u16>;
    let mut _83: std::num::Wrapping<u16>;
    let mut _84: std::num::Wrapping<u16>;
    let _85: &std::num::Wrapping<u16>;
    let _86: &std::num::Wrapping<u16>;
    let mut _87: bool;
    let mut _88: bool;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _92: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _93: &std::num::Wrapping<u32>;
    let _94: std::num::Wrapping<u32>;
    let mut _95: std::num::Wrapping<u32>;
    let mut _96: std::num::Wrapping<u32>;
    let mut _97: std::num::Wrapping<u32>;
    let _98: &std::num::Wrapping<u32>;
    let _99: &std::num::Wrapping<u32>;
    let mut _100: bool;
    let mut _101: bool;
    let _103: !;
    let mut _104: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _105: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _106: &std::num::Wrapping<u64>;
    let _107: std::num::Wrapping<u64>;
    let mut _108: std::num::Wrapping<u64>;
    let mut _109: std::num::Wrapping<u64>;
    let mut _110: std::num::Wrapping<u64>;
    let _111: &std::num::Wrapping<u64>;
    let _112: &std::num::Wrapping<u64>;
    let mut _113: bool;
    let mut _114: bool;
    let _116: !;
    let mut _117: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _118: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _119: &std::num::Wrapping<usize>;
    let _120: std::num::Wrapping<usize>;
    let mut _121: std::num::Wrapping<usize>;
    let mut _122: std::num::Wrapping<usize>;
    let mut _123: std::num::Wrapping<usize>;
    let _124: &std::num::Wrapping<usize>;
    let _125: &std::num::Wrapping<usize>;
    let mut _126: bool;
    let mut _127: bool;
    let _129: !;
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _131: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _132: &std::num::Wrapping<i8>;
    let _133: std::num::Wrapping<i8>;
    let mut _134: std::num::Wrapping<i8>;
    let mut _135: std::num::Wrapping<i8>;
    let mut _136: std::num::Wrapping<i8>;
    let _137: &std::num::Wrapping<i8>;
    let _138: &std::num::Wrapping<i8>;
    let mut _139: bool;
    let mut _140: bool;
    let _142: !;
    let mut _143: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _144: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _145: &std::num::Wrapping<i16>;
    let _146: std::num::Wrapping<i16>;
    let mut _147: std::num::Wrapping<i16>;
    let mut _148: std::num::Wrapping<i16>;
    let mut _149: std::num::Wrapping<i16>;
    let _150: &std::num::Wrapping<i16>;
    let _151: &std::num::Wrapping<i16>;
    let mut _152: bool;
    let mut _153: bool;
    let _155: !;
    let mut _156: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _157: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _158: &std::num::Wrapping<i32>;
    let _159: std::num::Wrapping<i32>;
    let mut _160: std::num::Wrapping<i32>;
    let mut _161: std::num::Wrapping<i32>;
    let mut _162: std::num::Wrapping<i32>;
    let _163: &std::num::Wrapping<i32>;
    let _164: &std::num::Wrapping<i32>;
    let mut _165: bool;
    let mut _166: bool;
    let _168: !;
    let mut _169: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _170: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _171: &std::num::Wrapping<i64>;
    let _172: std::num::Wrapping<i64>;
    let mut _173: std::num::Wrapping<i64>;
    let mut _174: std::num::Wrapping<i64>;
    let mut _175: std::num::Wrapping<i64>;
    let _176: &std::num::Wrapping<i64>;
    let _177: &std::num::Wrapping<i64>;
    let mut _178: bool;
    let mut _179: bool;
    let _181: !;
    let mut _182: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _183: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _184: &std::num::Wrapping<isize>;
    let _185: std::num::Wrapping<isize>;
    let mut _186: std::num::Wrapping<isize>;
    let mut _187: std::num::Wrapping<isize>;
    let mut _188: std::num::Wrapping<isize>;
    let _189: &std::num::Wrapping<isize>;
    let _190: &std::num::Wrapping<isize>;
    let mut _191: bool;
    let mut _192: bool;
    let _194: !;
    let mut _195: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _196: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _197: &std::num::Wrapping<u8>;
    let _198: std::num::Wrapping<u8>;
    let mut _199: std::num::Wrapping<u8>;
    let mut _200: std::num::Wrapping<u8>;
    let mut _201: std::num::Wrapping<u8>;
    let _202: &std::num::Wrapping<u8>;
    let _203: &std::num::Wrapping<u8>;
    let mut _204: bool;
    let mut _205: bool;
    let _207: !;
    let mut _208: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _209: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _210: &std::num::Wrapping<u16>;
    let _211: std::num::Wrapping<u16>;
    let mut _212: std::num::Wrapping<u16>;
    let mut _213: std::num::Wrapping<u16>;
    let mut _214: std::num::Wrapping<u16>;
    let _215: &std::num::Wrapping<u16>;
    let _216: &std::num::Wrapping<u16>;
    let mut _217: bool;
    let mut _218: bool;
    let _220: !;
    let mut _221: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _222: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _223: &std::num::Wrapping<u32>;
    let _224: std::num::Wrapping<u32>;
    let mut _225: std::num::Wrapping<u32>;
    let mut _226: std::num::Wrapping<u32>;
    let mut _227: std::num::Wrapping<u32>;
    let _228: &std::num::Wrapping<u32>;
    let _229: &std::num::Wrapping<u32>;
    let mut _230: bool;
    let mut _231: bool;
    let _233: !;
    let mut _234: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _235: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _236: &std::num::Wrapping<u64>;
    let _237: std::num::Wrapping<u64>;
    let mut _238: std::num::Wrapping<u64>;
    let mut _239: std::num::Wrapping<u64>;
    let mut _240: std::num::Wrapping<u64>;
    let _241: &std::num::Wrapping<u64>;
    let _242: &std::num::Wrapping<u64>;
    let mut _243: bool;
    let mut _244: bool;
    let _246: !;
    let mut _247: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _248: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _249: &std::num::Wrapping<usize>;
    let _250: std::num::Wrapping<usize>;
    let mut _251: std::num::Wrapping<usize>;
    let mut _252: std::num::Wrapping<usize>;
    let mut _253: std::num::Wrapping<usize>;
    let _254: &std::num::Wrapping<usize>;
    let _255: &std::num::Wrapping<usize>;
    let mut _256: bool;
    let mut _257: bool;
    let _259: !;
    let mut _260: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _261: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _262: &std::num::Wrapping<i8>;
    let _263: std::num::Wrapping<i8>;
    let mut _264: std::num::Wrapping<i8>;
    let mut _265: std::num::Wrapping<i8>;
    let mut _266: std::num::Wrapping<i8>;
    let _267: &std::num::Wrapping<i8>;
    let _268: &std::num::Wrapping<i8>;
    let mut _269: bool;
    let mut _270: bool;
    let _272: !;
    let mut _273: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _274: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _275: &std::num::Wrapping<i16>;
    let _276: std::num::Wrapping<i16>;
    let mut _277: std::num::Wrapping<i16>;
    let mut _278: std::num::Wrapping<i16>;
    let mut _279: std::num::Wrapping<i16>;
    let _280: &std::num::Wrapping<i16>;
    let _281: &std::num::Wrapping<i16>;
    let mut _282: bool;
    let mut _283: bool;
    let _285: !;
    let mut _286: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _287: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _288: &std::num::Wrapping<i32>;
    let _289: std::num::Wrapping<i32>;
    let mut _290: std::num::Wrapping<i32>;
    let mut _291: std::num::Wrapping<i32>;
    let mut _292: std::num::Wrapping<i32>;
    let _293: &std::num::Wrapping<i32>;
    let _294: &std::num::Wrapping<i32>;
    let mut _295: bool;
    let mut _296: bool;
    let _298: !;
    let mut _299: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _300: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _301: &std::num::Wrapping<i64>;
    let _302: std::num::Wrapping<i64>;
    let mut _303: std::num::Wrapping<i64>;
    let mut _304: std::num::Wrapping<i64>;
    let mut _305: std::num::Wrapping<i64>;
    let _306: &std::num::Wrapping<i64>;
    let _307: &std::num::Wrapping<i64>;
    let mut _308: bool;
    let mut _309: bool;
    let _311: !;
    let mut _312: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _313: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _314: &std::num::Wrapping<isize>;
    let _315: std::num::Wrapping<isize>;
    let mut _316: std::num::Wrapping<isize>;
    let mut _317: std::num::Wrapping<isize>;
    let mut _318: std::num::Wrapping<isize>;
    let _319: &std::num::Wrapping<isize>;
    let _320: &std::num::Wrapping<isize>;
    let mut _321: bool;
    let mut _322: bool;
    let _324: !;
    let mut _325: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _326: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _327: &std::num::Wrapping<u8>;
    let _328: std::num::Wrapping<u8>;
    let mut _329: std::num::Wrapping<u8>;
    let mut _330: std::num::Wrapping<u8>;
    let mut _331: std::num::Wrapping<u8>;
    let _332: &std::num::Wrapping<u8>;
    let _333: &std::num::Wrapping<u8>;
    let mut _334: bool;
    let mut _335: bool;
    let _337: !;
    let mut _338: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _339: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _340: &std::num::Wrapping<u16>;
    let _341: std::num::Wrapping<u16>;
    let mut _342: std::num::Wrapping<u16>;
    let mut _343: std::num::Wrapping<u16>;
    let mut _344: std::num::Wrapping<u16>;
    let _345: &std::num::Wrapping<u16>;
    let _346: &std::num::Wrapping<u16>;
    let mut _347: bool;
    let mut _348: bool;
    let _350: !;
    let mut _351: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _352: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _353: &std::num::Wrapping<u32>;
    let _354: std::num::Wrapping<u32>;
    let mut _355: std::num::Wrapping<u32>;
    let mut _356: std::num::Wrapping<u32>;
    let mut _357: std::num::Wrapping<u32>;
    let _358: &std::num::Wrapping<u32>;
    let _359: &std::num::Wrapping<u32>;
    let mut _360: bool;
    let mut _361: bool;
    let _363: !;
    let mut _364: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _365: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _366: &std::num::Wrapping<u64>;
    let _367: std::num::Wrapping<u64>;
    let mut _368: std::num::Wrapping<u64>;
    let mut _369: std::num::Wrapping<u64>;
    let mut _370: std::num::Wrapping<u64>;
    let _371: &std::num::Wrapping<u64>;
    let _372: &std::num::Wrapping<u64>;
    let mut _373: bool;
    let mut _374: bool;
    let _376: !;
    let mut _377: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _378: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _379: &std::num::Wrapping<usize>;
    let _380: std::num::Wrapping<usize>;
    let mut _381: std::num::Wrapping<usize>;
    let mut _382: std::num::Wrapping<usize>;
    let mut _383: std::num::Wrapping<usize>;
    let _384: &std::num::Wrapping<usize>;
    let _385: &std::num::Wrapping<usize>;
    let mut _386: bool;
    let mut _387: bool;
    let _389: !;
    let mut _390: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _391: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _392: &std::num::Wrapping<i8>;
    let _393: std::num::Wrapping<i8>;
    let mut _394: std::num::Wrapping<i8>;
    let mut _395: std::num::Wrapping<i8>;
    let mut _396: std::num::Wrapping<i8>;
    let _397: &std::num::Wrapping<i8>;
    let _398: &std::num::Wrapping<i8>;
    let mut _399: bool;
    let mut _400: bool;
    let _402: !;
    let mut _403: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _404: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _405: &std::num::Wrapping<i16>;
    let _406: std::num::Wrapping<i16>;
    let mut _407: std::num::Wrapping<i16>;
    let mut _408: std::num::Wrapping<i16>;
    let mut _409: std::num::Wrapping<i16>;
    let _410: &std::num::Wrapping<i16>;
    let _411: &std::num::Wrapping<i16>;
    let mut _412: bool;
    let mut _413: bool;
    let _415: !;
    let mut _416: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _417: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _418: &std::num::Wrapping<i32>;
    let _419: std::num::Wrapping<i32>;
    let mut _420: std::num::Wrapping<i32>;
    let mut _421: std::num::Wrapping<i32>;
    let mut _422: std::num::Wrapping<i32>;
    let _423: &std::num::Wrapping<i32>;
    let _424: &std::num::Wrapping<i32>;
    let mut _425: bool;
    let mut _426: bool;
    let _428: !;
    let mut _429: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _430: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _431: &std::num::Wrapping<i64>;
    let _432: std::num::Wrapping<i64>;
    let mut _433: std::num::Wrapping<i64>;
    let mut _434: std::num::Wrapping<i64>;
    let mut _435: std::num::Wrapping<i64>;
    let _436: &std::num::Wrapping<i64>;
    let _437: &std::num::Wrapping<i64>;
    let mut _438: bool;
    let mut _439: bool;
    let _441: !;
    let mut _442: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _443: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _444: &std::num::Wrapping<isize>;
    let _445: std::num::Wrapping<isize>;
    let mut _446: std::num::Wrapping<isize>;
    let mut _447: std::num::Wrapping<isize>;
    let mut _448: std::num::Wrapping<isize>;
    let _449: &std::num::Wrapping<isize>;
    let _450: &std::num::Wrapping<isize>;
    let mut _451: bool;
    let mut _452: bool;
    let _454: !;
    let mut _455: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _456: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _457: &std::num::Wrapping<i8>;
    let _458: std::num::Wrapping<i8>;
    let mut _459: std::num::Wrapping<i8>;
    let mut _460: std::num::Wrapping<i8>;
    let mut _461: std::num::Wrapping<i8>;
    let _462: &std::num::Wrapping<i8>;
    let _463: &std::num::Wrapping<i8>;
    let mut _464: bool;
    let mut _465: bool;
    let _467: !;
    let mut _468: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _469: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _470: &std::num::Wrapping<i16>;
    let _471: std::num::Wrapping<i16>;
    let mut _472: std::num::Wrapping<i16>;
    let mut _473: std::num::Wrapping<i16>;
    let mut _474: std::num::Wrapping<i16>;
    let _475: &std::num::Wrapping<i16>;
    let _476: &std::num::Wrapping<i16>;
    let mut _477: bool;
    let mut _478: bool;
    let _480: !;
    let mut _481: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _482: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _483: &std::num::Wrapping<i32>;
    let _484: std::num::Wrapping<i32>;
    let mut _485: std::num::Wrapping<i32>;
    let mut _486: std::num::Wrapping<i32>;
    let mut _487: std::num::Wrapping<i32>;
    let _488: &std::num::Wrapping<i32>;
    let _489: &std::num::Wrapping<i32>;
    let mut _490: bool;
    let mut _491: bool;
    let _493: !;
    let mut _494: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _495: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _496: &std::num::Wrapping<i64>;
    let _497: std::num::Wrapping<i64>;
    let mut _498: std::num::Wrapping<i64>;
    let mut _499: std::num::Wrapping<i64>;
    let mut _500: std::num::Wrapping<i64>;
    let _501: &std::num::Wrapping<i64>;
    let _502: &std::num::Wrapping<i64>;
    let mut _503: bool;
    let mut _504: bool;
    let _506: !;
    let mut _507: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _508: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _509: &std::num::Wrapping<isize>;
    let _510: std::num::Wrapping<isize>;
    let mut _511: std::num::Wrapping<isize>;
    let mut _512: std::num::Wrapping<isize>;
    let mut _513: std::num::Wrapping<isize>;
    let _514: &std::num::Wrapping<isize>;
    let _515: &std::num::Wrapping<isize>;
    let mut _516: bool;
    let mut _517: bool;
    let _519: !;
    let mut _520: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _521: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _522: &std::num::Wrapping<i8>;
    let _523: std::num::Wrapping<i8>;
    let mut _524: std::num::Wrapping<i8>;
    let mut _525: std::num::Wrapping<i8>;
    let mut _526: std::num::Wrapping<i8>;
    let _527: &std::num::Wrapping<i8>;
    let _528: &std::num::Wrapping<i8>;
    let mut _529: bool;
    let mut _530: bool;
    let _532: !;
    let mut _533: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _534: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _535: &std::num::Wrapping<i16>;
    let _536: std::num::Wrapping<i16>;
    let mut _537: std::num::Wrapping<i16>;
    let mut _538: std::num::Wrapping<i16>;
    let mut _539: std::num::Wrapping<i16>;
    let _540: &std::num::Wrapping<i16>;
    let _541: &std::num::Wrapping<i16>;
    let mut _542: bool;
    let mut _543: bool;
    let _545: !;
    let mut _546: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _547: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _548: &std::num::Wrapping<i32>;
    let _549: std::num::Wrapping<i32>;
    let mut _550: std::num::Wrapping<i32>;
    let mut _551: std::num::Wrapping<i32>;
    let mut _552: std::num::Wrapping<i32>;
    let _553: &std::num::Wrapping<i32>;
    let _554: &std::num::Wrapping<i32>;
    let mut _555: bool;
    let mut _556: bool;
    let _558: !;
    let mut _559: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _560: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _561: &std::num::Wrapping<i64>;
    let _562: std::num::Wrapping<i64>;
    let mut _563: std::num::Wrapping<i64>;
    let mut _564: std::num::Wrapping<i64>;
    let mut _565: std::num::Wrapping<i64>;
    let _566: &std::num::Wrapping<i64>;
    let _567: &std::num::Wrapping<i64>;
    let mut _568: bool;
    let mut _569: bool;
    let _571: !;
    let mut _572: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _573: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _574: &std::num::Wrapping<isize>;
    let _575: std::num::Wrapping<isize>;
    let mut _576: std::num::Wrapping<isize>;
    let mut _577: std::num::Wrapping<isize>;
    let mut _578: std::num::Wrapping<isize>;
    let _579: &std::num::Wrapping<isize>;
    let _580: &std::num::Wrapping<isize>;
    let mut _581: bool;
    let mut _582: bool;
    let _584: !;
    let mut _585: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _586: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _587: &std::num::Wrapping<u8>;
    let _588: std::num::Wrapping<u8>;
    let mut _589: std::num::Wrapping<u8>;
    let mut _590: std::num::Wrapping<u8>;
    let mut _591: std::num::Wrapping<u8>;
    let _592: &std::num::Wrapping<u8>;
    let _593: &std::num::Wrapping<u8>;
    let mut _594: bool;
    let mut _595: bool;
    let _597: !;
    let mut _598: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _599: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _600: &std::num::Wrapping<u16>;
    let _601: std::num::Wrapping<u16>;
    let mut _602: std::num::Wrapping<u16>;
    let mut _603: std::num::Wrapping<u16>;
    let mut _604: std::num::Wrapping<u16>;
    let _605: &std::num::Wrapping<u16>;
    let _606: &std::num::Wrapping<u16>;
    let mut _607: bool;
    let mut _608: bool;
    let _610: !;
    let mut _611: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _612: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _613: &std::num::Wrapping<u32>;
    let _614: std::num::Wrapping<u32>;
    let mut _615: std::num::Wrapping<u32>;
    let mut _616: std::num::Wrapping<u32>;
    let mut _617: std::num::Wrapping<u32>;
    let _618: &std::num::Wrapping<u32>;
    let _619: &std::num::Wrapping<u32>;
    let mut _620: bool;
    let mut _621: bool;
    let _623: !;
    let mut _624: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _625: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _626: &std::num::Wrapping<u64>;
    let _627: std::num::Wrapping<u64>;
    let mut _628: std::num::Wrapping<u64>;
    let mut _629: std::num::Wrapping<u64>;
    let mut _630: std::num::Wrapping<u64>;
    let _631: &std::num::Wrapping<u64>;
    let _632: &std::num::Wrapping<u64>;
    let mut _633: bool;
    let mut _634: bool;
    let _636: !;
    let mut _637: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _638: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _639: &std::num::Wrapping<usize>;
    let _640: std::num::Wrapping<usize>;
    let mut _641: std::num::Wrapping<usize>;
    let mut _642: std::num::Wrapping<usize>;
    let mut _643: std::num::Wrapping<usize>;
    let _644: &std::num::Wrapping<usize>;
    let _645: &std::num::Wrapping<usize>;
    let mut _646: bool;
    let mut _647: bool;
    let _649: !;
    let mut _650: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _651: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _652: &std::num::Wrapping<i8>;
    let _653: std::num::Wrapping<i8>;
    let mut _654: std::num::Wrapping<i8>;
    let mut _655: std::num::Wrapping<i8>;
    let mut _656: std::num::Wrapping<i8>;
    let _657: &std::num::Wrapping<i8>;
    let _658: &std::num::Wrapping<i8>;
    let mut _659: bool;
    let mut _660: bool;
    let _662: !;
    let mut _663: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _664: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _665: &std::num::Wrapping<i16>;
    let _666: std::num::Wrapping<i16>;
    let mut _667: std::num::Wrapping<i16>;
    let mut _668: std::num::Wrapping<i16>;
    let mut _669: std::num::Wrapping<i16>;
    let _670: &std::num::Wrapping<i16>;
    let _671: &std::num::Wrapping<i16>;
    let mut _672: bool;
    let mut _673: bool;
    let _675: !;
    let mut _676: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _677: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _678: &std::num::Wrapping<i32>;
    let _679: std::num::Wrapping<i32>;
    let mut _680: std::num::Wrapping<i32>;
    let mut _681: std::num::Wrapping<i32>;
    let mut _682: std::num::Wrapping<i32>;
    let _683: &std::num::Wrapping<i32>;
    let _684: &std::num::Wrapping<i32>;
    let mut _685: bool;
    let mut _686: bool;
    let _688: !;
    let mut _689: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _690: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _691: &std::num::Wrapping<i64>;
    let _692: std::num::Wrapping<i64>;
    let mut _693: std::num::Wrapping<i64>;
    let mut _694: std::num::Wrapping<i64>;
    let mut _695: std::num::Wrapping<i64>;
    let _696: &std::num::Wrapping<i64>;
    let _697: &std::num::Wrapping<i64>;
    let mut _698: bool;
    let mut _699: bool;
    let _701: !;
    let mut _702: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _703: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _704: &std::num::Wrapping<isize>;
    let _705: std::num::Wrapping<isize>;
    let mut _706: std::num::Wrapping<isize>;
    let mut _707: std::num::Wrapping<isize>;
    let mut _708: std::num::Wrapping<isize>;
    let _709: &std::num::Wrapping<isize>;
    let _710: &std::num::Wrapping<isize>;
    let mut _711: bool;
    let mut _712: bool;
    let _714: !;
    let mut _715: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _716: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _717: &std::num::Wrapping<u8>;
    let _718: std::num::Wrapping<u8>;
    let mut _719: std::num::Wrapping<u8>;
    let mut _720: std::num::Wrapping<u8>;
    let mut _721: std::num::Wrapping<u8>;
    let _722: &std::num::Wrapping<u8>;
    let _723: &std::num::Wrapping<u8>;
    let mut _724: bool;
    let mut _725: bool;
    let _727: !;
    let mut _728: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _729: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _730: &std::num::Wrapping<u16>;
    let _731: std::num::Wrapping<u16>;
    let mut _732: std::num::Wrapping<u16>;
    let mut _733: std::num::Wrapping<u16>;
    let mut _734: std::num::Wrapping<u16>;
    let _735: &std::num::Wrapping<u16>;
    let _736: &std::num::Wrapping<u16>;
    let mut _737: bool;
    let mut _738: bool;
    let _740: !;
    let mut _741: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _742: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _743: &std::num::Wrapping<u32>;
    let _744: std::num::Wrapping<u32>;
    let mut _745: std::num::Wrapping<u32>;
    let mut _746: std::num::Wrapping<u32>;
    let mut _747: std::num::Wrapping<u32>;
    let _748: &std::num::Wrapping<u32>;
    let _749: &std::num::Wrapping<u32>;
    let mut _750: bool;
    let mut _751: bool;
    let _753: !;
    let mut _754: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _755: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _756: &std::num::Wrapping<u64>;
    let _757: std::num::Wrapping<u64>;
    let mut _758: std::num::Wrapping<u64>;
    let mut _759: std::num::Wrapping<u64>;
    let mut _760: std::num::Wrapping<u64>;
    let _761: &std::num::Wrapping<u64>;
    let _762: &std::num::Wrapping<u64>;
    let mut _763: bool;
    let mut _764: bool;
    let _766: !;
    let mut _767: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _768: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _769: &std::num::Wrapping<usize>;
    let _770: std::num::Wrapping<usize>;
    let mut _771: std::num::Wrapping<usize>;
    let mut _772: std::num::Wrapping<usize>;
    let mut _773: std::num::Wrapping<usize>;
    let _774: &std::num::Wrapping<usize>;
    let _775: &std::num::Wrapping<usize>;
    let mut _776: bool;
    let mut _777: bool;
    let _779: !;
    let mut _780: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _781: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _782: &std::num::Wrapping<i8>;
    let _783: std::num::Wrapping<i8>;
    let mut _784: std::num::Wrapping<i8>;
    let mut _785: std::num::Wrapping<i8>;
    let mut _786: std::num::Wrapping<i8>;
    let _787: &std::num::Wrapping<i8>;
    let _788: &std::num::Wrapping<i8>;
    let mut _789: bool;
    let mut _790: bool;
    let _792: !;
    let mut _793: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _794: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _795: &std::num::Wrapping<i16>;
    let _796: std::num::Wrapping<i16>;
    let mut _797: std::num::Wrapping<i16>;
    let mut _798: std::num::Wrapping<i16>;
    let mut _799: std::num::Wrapping<i16>;
    let _800: &std::num::Wrapping<i16>;
    let _801: &std::num::Wrapping<i16>;
    let mut _802: bool;
    let mut _803: bool;
    let _805: !;
    let mut _806: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _807: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _808: &std::num::Wrapping<i32>;
    let _809: std::num::Wrapping<i32>;
    let mut _810: std::num::Wrapping<i32>;
    let mut _811: std::num::Wrapping<i32>;
    let mut _812: std::num::Wrapping<i32>;
    let _813: &std::num::Wrapping<i32>;
    let _814: &std::num::Wrapping<i32>;
    let mut _815: bool;
    let mut _816: bool;
    let _818: !;
    let mut _819: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _820: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _821: &std::num::Wrapping<i64>;
    let _822: std::num::Wrapping<i64>;
    let mut _823: std::num::Wrapping<i64>;
    let mut _824: std::num::Wrapping<i64>;
    let mut _825: std::num::Wrapping<i64>;
    let _826: &std::num::Wrapping<i64>;
    let _827: &std::num::Wrapping<i64>;
    let mut _828: bool;
    let mut _829: bool;
    let _831: !;
    let mut _832: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _833: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _834: &std::num::Wrapping<isize>;
    let _835: std::num::Wrapping<isize>;
    let mut _836: std::num::Wrapping<isize>;
    let mut _837: std::num::Wrapping<isize>;
    let mut _838: std::num::Wrapping<isize>;
    let _839: &std::num::Wrapping<isize>;
    let _840: &std::num::Wrapping<isize>;
    let mut _841: bool;
    let mut _842: bool;
    let _844: !;
    let mut _845: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _846: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _847: &std::num::Wrapping<u8>;
    let _848: std::num::Wrapping<u8>;
    let mut _849: std::num::Wrapping<u8>;
    let mut _850: std::num::Wrapping<u8>;
    let mut _851: std::num::Wrapping<u8>;
    let _852: &std::num::Wrapping<u8>;
    let _853: &std::num::Wrapping<u8>;
    let mut _854: bool;
    let mut _855: bool;
    let _857: !;
    let mut _858: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _859: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _860: &std::num::Wrapping<u16>;
    let _861: std::num::Wrapping<u16>;
    let mut _862: std::num::Wrapping<u16>;
    let mut _863: std::num::Wrapping<u16>;
    let mut _864: std::num::Wrapping<u16>;
    let _865: &std::num::Wrapping<u16>;
    let _866: &std::num::Wrapping<u16>;
    let mut _867: bool;
    let mut _868: bool;
    let _870: !;
    let mut _871: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _872: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _873: &std::num::Wrapping<u32>;
    let _874: std::num::Wrapping<u32>;
    let mut _875: std::num::Wrapping<u32>;
    let mut _876: std::num::Wrapping<u32>;
    let mut _877: std::num::Wrapping<u32>;
    let _878: &std::num::Wrapping<u32>;
    let _879: &std::num::Wrapping<u32>;
    let mut _880: bool;
    let mut _881: bool;
    let _883: !;
    let mut _884: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _885: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _886: &std::num::Wrapping<u64>;
    let _887: std::num::Wrapping<u64>;
    let mut _888: std::num::Wrapping<u64>;
    let mut _889: std::num::Wrapping<u64>;
    let mut _890: std::num::Wrapping<u64>;
    let _891: &std::num::Wrapping<u64>;
    let _892: &std::num::Wrapping<u64>;
    let mut _893: bool;
    let mut _894: bool;
    let _896: !;
    let mut _897: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _898: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _899: &std::num::Wrapping<usize>;
    let _900: std::num::Wrapping<usize>;
    let mut _901: std::num::Wrapping<usize>;
    let mut _902: std::num::Wrapping<usize>;
    let mut _903: std::num::Wrapping<usize>;
    let _904: &std::num::Wrapping<usize>;
    let _905: &std::num::Wrapping<usize>;
    let mut _906: bool;
    let mut _907: bool;
    let _909: !;
    let mut _910: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _911: &std::num::Wrapping<usize>;
    let mut _912: &std::num::Wrapping<u64>;
    let mut _913: &std::num::Wrapping<u32>;
    let mut _914: &std::num::Wrapping<u16>;
    let mut _915: &std::num::Wrapping<u8>;
    let mut _916: &std::num::Wrapping<isize>;
    let mut _917: &std::num::Wrapping<i64>;
    let mut _918: &std::num::Wrapping<i32>;
    let mut _919: &std::num::Wrapping<i16>;
    let mut _920: &std::num::Wrapping<i8>;
    let mut _921: &std::num::Wrapping<usize>;
    let mut _922: &std::num::Wrapping<u64>;
    let mut _923: &std::num::Wrapping<u32>;
    let mut _924: &std::num::Wrapping<u16>;
    let mut _925: &std::num::Wrapping<u8>;
    let mut _926: &std::num::Wrapping<isize>;
    let mut _927: &std::num::Wrapping<i64>;
    let mut _928: &std::num::Wrapping<i32>;
    let mut _929: &std::num::Wrapping<i16>;
    let mut _930: &std::num::Wrapping<i8>;
    let mut _931: &std::num::Wrapping<usize>;
    let mut _932: &std::num::Wrapping<u64>;
    let mut _933: &std::num::Wrapping<u32>;
    let mut _934: &std::num::Wrapping<u16>;
    let mut _935: &std::num::Wrapping<u8>;
    let mut _936: &std::num::Wrapping<isize>;
    let mut _937: &std::num::Wrapping<i64>;
    let mut _938: &std::num::Wrapping<i32>;
    let mut _939: &std::num::Wrapping<i16>;
    let mut _940: &std::num::Wrapping<i8>;
    let mut _941: &std::num::Wrapping<isize>;
    let mut _942: &std::num::Wrapping<i64>;
    let mut _943: &std::num::Wrapping<i32>;
    let mut _944: &std::num::Wrapping<i16>;
    let mut _945: &std::num::Wrapping<i8>;
    let mut _946: &std::num::Wrapping<isize>;
    let mut _947: &std::num::Wrapping<i64>;
    let mut _948: &std::num::Wrapping<i32>;
    let mut _949: &std::num::Wrapping<i16>;
    let mut _950: &std::num::Wrapping<i8>;
    let mut _951: &std::num::Wrapping<usize>;
    let mut _952: &std::num::Wrapping<u64>;
    let mut _953: &std::num::Wrapping<u32>;
    let mut _954: &std::num::Wrapping<u16>;
    let mut _955: &std::num::Wrapping<u8>;
    let mut _956: &std::num::Wrapping<isize>;
    let mut _957: &std::num::Wrapping<i64>;
    let mut _958: &std::num::Wrapping<i32>;
    let mut _959: &std::num::Wrapping<i16>;
    let mut _960: &std::num::Wrapping<i8>;
    let mut _961: &std::num::Wrapping<usize>;
    let mut _962: &std::num::Wrapping<u64>;
    let mut _963: &std::num::Wrapping<u32>;
    let mut _964: &std::num::Wrapping<u16>;
    let mut _965: &std::num::Wrapping<u8>;
    let mut _966: &std::num::Wrapping<isize>;
    let mut _967: &std::num::Wrapping<i64>;
    let mut _968: &std::num::Wrapping<i32>;
    let mut _969: &std::num::Wrapping<i16>;
    let mut _970: &std::num::Wrapping<i8>;
    let mut _971: &std::num::Wrapping<usize>;
    let mut _972: &std::num::Wrapping<u64>;
    let mut _973: &std::num::Wrapping<u32>;
    let mut _974: &std::num::Wrapping<u16>;
    let mut _975: &std::num::Wrapping<u8>;
    let mut _976: &std::num::Wrapping<isize>;
    let mut _977: &std::num::Wrapping<i64>;
    let mut _978: &std::num::Wrapping<i32>;
    let mut _979: &std::num::Wrapping<i16>;
    let mut _980: &std::num::Wrapping<i8>;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }
    scope 5 {
        debug left_val => _33;
        debug right_val => _34;
        let _37: core::panicking::AssertKind;
        scope 6 {
            debug kind => _37;
        }
    }
    scope 7 {
        debug left_val => _46;
        debug right_val => _47;
        let _50: core::panicking::AssertKind;
        scope 8 {
            debug kind => _50;
        }
    }
    scope 9 {
        debug left_val => _59;
        debug right_val => _60;
        let _63: core::panicking::AssertKind;
        scope 10 {
            debug kind => _63;
        }
    }
    scope 11 {
        debug left_val => _72;
        debug right_val => _73;
        let _76: core::panicking::AssertKind;
        scope 12 {
            debug kind => _76;
        }
    }
    scope 13 {
        debug left_val => _85;
        debug right_val => _86;
        let _89: core::panicking::AssertKind;
        scope 14 {
            debug kind => _89;
        }
    }
    scope 15 {
        debug left_val => _98;
        debug right_val => _99;
        let _102: core::panicking::AssertKind;
        scope 16 {
            debug kind => _102;
        }
    }
    scope 17 {
        debug left_val => _111;
        debug right_val => _112;
        let _115: core::panicking::AssertKind;
        scope 18 {
            debug kind => _115;
        }
    }
    scope 19 {
        debug left_val => _124;
        debug right_val => _125;
        let _128: core::panicking::AssertKind;
        scope 20 {
            debug kind => _128;
        }
    }
    scope 21 {
        debug left_val => _137;
        debug right_val => _138;
        let _141: core::panicking::AssertKind;
        scope 22 {
            debug kind => _141;
        }
    }
    scope 23 {
        debug left_val => _150;
        debug right_val => _151;
        let _154: core::panicking::AssertKind;
        scope 24 {
            debug kind => _154;
        }
    }
    scope 25 {
        debug left_val => _163;
        debug right_val => _164;
        let _167: core::panicking::AssertKind;
        scope 26 {
            debug kind => _167;
        }
    }
    scope 27 {
        debug left_val => _176;
        debug right_val => _177;
        let _180: core::panicking::AssertKind;
        scope 28 {
            debug kind => _180;
        }
    }
    scope 29 {
        debug left_val => _189;
        debug right_val => _190;
        let _193: core::panicking::AssertKind;
        scope 30 {
            debug kind => _193;
        }
    }
    scope 31 {
        debug left_val => _202;
        debug right_val => _203;
        let _206: core::panicking::AssertKind;
        scope 32 {
            debug kind => _206;
        }
    }
    scope 33 {
        debug left_val => _215;
        debug right_val => _216;
        let _219: core::panicking::AssertKind;
        scope 34 {
            debug kind => _219;
        }
    }
    scope 35 {
        debug left_val => _228;
        debug right_val => _229;
        let _232: core::panicking::AssertKind;
        scope 36 {
            debug kind => _232;
        }
    }
    scope 37 {
        debug left_val => _241;
        debug right_val => _242;
        let _245: core::panicking::AssertKind;
        scope 38 {
            debug kind => _245;
        }
    }
    scope 39 {
        debug left_val => _254;
        debug right_val => _255;
        let _258: core::panicking::AssertKind;
        scope 40 {
            debug kind => _258;
        }
    }
    scope 41 {
        debug left_val => _267;
        debug right_val => _268;
        let _271: core::panicking::AssertKind;
        scope 42 {
            debug kind => _271;
        }
    }
    scope 43 {
        debug left_val => _280;
        debug right_val => _281;
        let _284: core::panicking::AssertKind;
        scope 44 {
            debug kind => _284;
        }
    }
    scope 45 {
        debug left_val => _293;
        debug right_val => _294;
        let _297: core::panicking::AssertKind;
        scope 46 {
            debug kind => _297;
        }
    }
    scope 47 {
        debug left_val => _306;
        debug right_val => _307;
        let _310: core::panicking::AssertKind;
        scope 48 {
            debug kind => _310;
        }
    }
    scope 49 {
        debug left_val => _319;
        debug right_val => _320;
        let _323: core::panicking::AssertKind;
        scope 50 {
            debug kind => _323;
        }
    }
    scope 51 {
        debug left_val => _332;
        debug right_val => _333;
        let _336: core::panicking::AssertKind;
        scope 52 {
            debug kind => _336;
        }
    }
    scope 53 {
        debug left_val => _345;
        debug right_val => _346;
        let _349: core::panicking::AssertKind;
        scope 54 {
            debug kind => _349;
        }
    }
    scope 55 {
        debug left_val => _358;
        debug right_val => _359;
        let _362: core::panicking::AssertKind;
        scope 56 {
            debug kind => _362;
        }
    }
    scope 57 {
        debug left_val => _371;
        debug right_val => _372;
        let _375: core::panicking::AssertKind;
        scope 58 {
            debug kind => _375;
        }
    }
    scope 59 {
        debug left_val => _384;
        debug right_val => _385;
        let _388: core::panicking::AssertKind;
        scope 60 {
            debug kind => _388;
        }
    }
    scope 61 {
        debug left_val => _397;
        debug right_val => _398;
        let _401: core::panicking::AssertKind;
        scope 62 {
            debug kind => _401;
        }
    }
    scope 63 {
        debug left_val => _410;
        debug right_val => _411;
        let _414: core::panicking::AssertKind;
        scope 64 {
            debug kind => _414;
        }
    }
    scope 65 {
        debug left_val => _423;
        debug right_val => _424;
        let _427: core::panicking::AssertKind;
        scope 66 {
            debug kind => _427;
        }
    }
    scope 67 {
        debug left_val => _436;
        debug right_val => _437;
        let _440: core::panicking::AssertKind;
        scope 68 {
            debug kind => _440;
        }
    }
    scope 69 {
        debug left_val => _449;
        debug right_val => _450;
        let _453: core::panicking::AssertKind;
        scope 70 {
            debug kind => _453;
        }
    }
    scope 71 {
        debug left_val => _462;
        debug right_val => _463;
        let _466: core::panicking::AssertKind;
        scope 72 {
            debug kind => _466;
        }
    }
    scope 73 {
        debug left_val => _475;
        debug right_val => _476;
        let _479: core::panicking::AssertKind;
        scope 74 {
            debug kind => _479;
        }
    }
    scope 75 {
        debug left_val => _488;
        debug right_val => _489;
        let _492: core::panicking::AssertKind;
        scope 76 {
            debug kind => _492;
        }
    }
    scope 77 {
        debug left_val => _501;
        debug right_val => _502;
        let _505: core::panicking::AssertKind;
        scope 78 {
            debug kind => _505;
        }
    }
    scope 79 {
        debug left_val => _514;
        debug right_val => _515;
        let _518: core::panicking::AssertKind;
        scope 80 {
            debug kind => _518;
        }
    }
    scope 81 {
        debug left_val => _527;
        debug right_val => _528;
        let _531: core::panicking::AssertKind;
        scope 82 {
            debug kind => _531;
        }
    }
    scope 83 {
        debug left_val => _540;
        debug right_val => _541;
        let _544: core::panicking::AssertKind;
        scope 84 {
            debug kind => _544;
        }
    }
    scope 85 {
        debug left_val => _553;
        debug right_val => _554;
        let _557: core::panicking::AssertKind;
        scope 86 {
            debug kind => _557;
        }
    }
    scope 87 {
        debug left_val => _566;
        debug right_val => _567;
        let _570: core::panicking::AssertKind;
        scope 88 {
            debug kind => _570;
        }
    }
    scope 89 {
        debug left_val => _579;
        debug right_val => _580;
        let _583: core::panicking::AssertKind;
        scope 90 {
            debug kind => _583;
        }
    }
    scope 91 {
        debug left_val => _592;
        debug right_val => _593;
        let _596: core::panicking::AssertKind;
        scope 92 {
            debug kind => _596;
        }
    }
    scope 93 {
        debug left_val => _605;
        debug right_val => _606;
        let _609: core::panicking::AssertKind;
        scope 94 {
            debug kind => _609;
        }
    }
    scope 95 {
        debug left_val => _618;
        debug right_val => _619;
        let _622: core::panicking::AssertKind;
        scope 96 {
            debug kind => _622;
        }
    }
    scope 97 {
        debug left_val => _631;
        debug right_val => _632;
        let _635: core::panicking::AssertKind;
        scope 98 {
            debug kind => _635;
        }
    }
    scope 99 {
        debug left_val => _644;
        debug right_val => _645;
        let _648: core::panicking::AssertKind;
        scope 100 {
            debug kind => _648;
        }
    }
    scope 101 {
        debug left_val => _657;
        debug right_val => _658;
        let _661: core::panicking::AssertKind;
        scope 102 {
            debug kind => _661;
        }
    }
    scope 103 {
        debug left_val => _670;
        debug right_val => _671;
        let _674: core::panicking::AssertKind;
        scope 104 {
            debug kind => _674;
        }
    }
    scope 105 {
        debug left_val => _683;
        debug right_val => _684;
        let _687: core::panicking::AssertKind;
        scope 106 {
            debug kind => _687;
        }
    }
    scope 107 {
        debug left_val => _696;
        debug right_val => _697;
        let _700: core::panicking::AssertKind;
        scope 108 {
            debug kind => _700;
        }
    }
    scope 109 {
        debug left_val => _709;
        debug right_val => _710;
        let _713: core::panicking::AssertKind;
        scope 110 {
            debug kind => _713;
        }
    }
    scope 111 {
        debug left_val => _722;
        debug right_val => _723;
        let _726: core::panicking::AssertKind;
        scope 112 {
            debug kind => _726;
        }
    }
    scope 113 {
        debug left_val => _735;
        debug right_val => _736;
        let _739: core::panicking::AssertKind;
        scope 114 {
            debug kind => _739;
        }
    }
    scope 115 {
        debug left_val => _748;
        debug right_val => _749;
        let _752: core::panicking::AssertKind;
        scope 116 {
            debug kind => _752;
        }
    }
    scope 117 {
        debug left_val => _761;
        debug right_val => _762;
        let _765: core::panicking::AssertKind;
        scope 118 {
            debug kind => _765;
        }
    }
    scope 119 {
        debug left_val => _774;
        debug right_val => _775;
        let _778: core::panicking::AssertKind;
        scope 120 {
            debug kind => _778;
        }
    }
    scope 121 {
        debug left_val => _787;
        debug right_val => _788;
        let _791: core::panicking::AssertKind;
        scope 122 {
            debug kind => _791;
        }
    }
    scope 123 {
        debug left_val => _800;
        debug right_val => _801;
        let _804: core::panicking::AssertKind;
        scope 124 {
            debug kind => _804;
        }
    }
    scope 125 {
        debug left_val => _813;
        debug right_val => _814;
        let _817: core::panicking::AssertKind;
        scope 126 {
            debug kind => _817;
        }
    }
    scope 127 {
        debug left_val => _826;
        debug right_val => _827;
        let _830: core::panicking::AssertKind;
        scope 128 {
            debug kind => _830;
        }
    }
    scope 129 {
        debug left_val => _839;
        debug right_val => _840;
        let _843: core::panicking::AssertKind;
        scope 130 {
            debug kind => _843;
        }
    }
    scope 131 {
        debug left_val => _852;
        debug right_val => _853;
        let _856: core::panicking::AssertKind;
        scope 132 {
            debug kind => _856;
        }
    }
    scope 133 {
        debug left_val => _865;
        debug right_val => _866;
        let _869: core::panicking::AssertKind;
        scope 134 {
            debug kind => _869;
        }
    }
    scope 135 {
        debug left_val => _878;
        debug right_val => _879;
        let _882: core::panicking::AssertKind;
        scope 136 {
            debug kind => _882;
        }
    }
    scope 137 {
        debug left_val => _891;
        debug right_val => _892;
        let _895: core::panicking::AssertKind;
        scope 138 {
            debug kind => _895;
        }
    }
    scope 139 {
        debug left_val => _904;
        debug right_val => _905;
        let _908: core::panicking::AssertKind;
        scope 140 {
            debug kind => _908;
        }
    }

    bb0: {
        _5 = Wrapping::<i8>(const _);
        _6 = Wrapping::<i8>(const 1_i8);
        _4 = <Wrapping<i8> as Add>::add(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = test::black_box::<Wrapping<i8>>(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = &_3;
        _980 = const _;
        _1 = (move _2, _980);
        _7 = (_1.0: &std::num::Wrapping<i8>);
        _8 = (_1.1: &std::num::Wrapping<i8>);
        _10 = <Wrapping<i8> as PartialEq>::eq(_7, _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _11, _7, _8, move _13) -> unwind continue;
    }

    bb5: {
        _18 = Wrapping::<i16>(const _);
        _19 = Wrapping::<i16>(const 1_i16);
        _17 = <Wrapping<i16> as Add>::add(move _18, move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        _16 = test::black_box::<Wrapping<i16>>(move _17) -> [return: bb7, unwind continue];
    }

    bb7: {
        _15 = &_16;
        _979 = const _;
        _14 = (move _15, _979);
        _20 = (_14.0: &std::num::Wrapping<i16>);
        _21 = (_14.1: &std::num::Wrapping<i16>);
        _23 = <Wrapping<i16> as PartialEq>::eq(_20, _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _24, _20, _21, move _26) -> unwind continue;
    }

    bb10: {
        _31 = Wrapping::<i32>(const _);
        _32 = Wrapping::<i32>(const 1_i32);
        _30 = <Wrapping<i32> as Add>::add(move _31, move _32) -> [return: bb11, unwind continue];
    }

    bb11: {
        _29 = test::black_box::<Wrapping<i32>>(move _30) -> [return: bb12, unwind continue];
    }

    bb12: {
        _28 = &_29;
        _978 = const _;
        _27 = (move _28, _978);
        _33 = (_27.0: &std::num::Wrapping<i32>);
        _34 = (_27.1: &std::num::Wrapping<i32>);
        _36 = <Wrapping<i32> as PartialEq>::eq(_33, _34) -> [return: bb13, unwind continue];
    }

    bb13: {
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _37, _33, _34, move _39) -> unwind continue;
    }

    bb15: {
        _44 = Wrapping::<i64>(const _);
        _45 = Wrapping::<i64>(const 1_i64);
        _43 = <Wrapping<i64> as Add>::add(move _44, move _45) -> [return: bb16, unwind continue];
    }

    bb16: {
        _42 = test::black_box::<Wrapping<i64>>(move _43) -> [return: bb17, unwind continue];
    }

    bb17: {
        _41 = &_42;
        _977 = const _;
        _40 = (move _41, _977);
        _46 = (_40.0: &std::num::Wrapping<i64>);
        _47 = (_40.1: &std::num::Wrapping<i64>);
        _49 = <Wrapping<i64> as PartialEq>::eq(_46, _47) -> [return: bb18, unwind continue];
    }

    bb18: {
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _50, _46, _47, move _52) -> unwind continue;
    }

    bb20: {
        _57 = Wrapping::<isize>(const _);
        _58 = Wrapping::<isize>(const 1_isize);
        _56 = <Wrapping<isize> as Add>::add(move _57, move _58) -> [return: bb21, unwind continue];
    }

    bb21: {
        _55 = test::black_box::<Wrapping<isize>>(move _56) -> [return: bb22, unwind continue];
    }

    bb22: {
        _54 = &_55;
        _976 = const _;
        _53 = (move _54, _976);
        _59 = (_53.0: &std::num::Wrapping<isize>);
        _60 = (_53.1: &std::num::Wrapping<isize>);
        _62 = <Wrapping<isize> as PartialEq>::eq(_59, _60) -> [return: bb23, unwind continue];
    }

    bb23: {
        _61 = Not(move _62);
        switchInt(move _61) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _63 = core::panicking::AssertKind::Eq;
        _65 = Option::<Arguments<'_>>::None;
        _64 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _63, _59, _60, move _65) -> unwind continue;
    }

    bb25: {
        _70 = Wrapping::<u8>(const _);
        _71 = Wrapping::<u8>(const 1_u8);
        _69 = <Wrapping<u8> as Add>::add(move _70, move _71) -> [return: bb26, unwind continue];
    }

    bb26: {
        _68 = test::black_box::<Wrapping<u8>>(move _69) -> [return: bb27, unwind continue];
    }

    bb27: {
        _67 = &_68;
        _975 = const _;
        _66 = (move _67, _975);
        _72 = (_66.0: &std::num::Wrapping<u8>);
        _73 = (_66.1: &std::num::Wrapping<u8>);
        _75 = <Wrapping<u8> as PartialEq>::eq(_72, _73) -> [return: bb28, unwind continue];
    }

    bb28: {
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _76, _72, _73, move _78) -> unwind continue;
    }

    bb30: {
        _83 = Wrapping::<u16>(const _);
        _84 = Wrapping::<u16>(const 1_u16);
        _82 = <Wrapping<u16> as Add>::add(move _83, move _84) -> [return: bb31, unwind continue];
    }

    bb31: {
        _81 = test::black_box::<Wrapping<u16>>(move _82) -> [return: bb32, unwind continue];
    }

    bb32: {
        _80 = &_81;
        _974 = const _;
        _79 = (move _80, _974);
        _85 = (_79.0: &std::num::Wrapping<u16>);
        _86 = (_79.1: &std::num::Wrapping<u16>);
        _88 = <Wrapping<u16> as PartialEq>::eq(_85, _86) -> [return: bb33, unwind continue];
    }

    bb33: {
        _87 = Not(move _88);
        switchInt(move _87) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _89, _85, _86, move _91) -> unwind continue;
    }

    bb35: {
        _96 = Wrapping::<u32>(const _);
        _97 = Wrapping::<u32>(const 1_u32);
        _95 = <Wrapping<u32> as Add>::add(move _96, move _97) -> [return: bb36, unwind continue];
    }

    bb36: {
        _94 = test::black_box::<Wrapping<u32>>(move _95) -> [return: bb37, unwind continue];
    }

    bb37: {
        _93 = &_94;
        _973 = const _;
        _92 = (move _93, _973);
        _98 = (_92.0: &std::num::Wrapping<u32>);
        _99 = (_92.1: &std::num::Wrapping<u32>);
        _101 = <Wrapping<u32> as PartialEq>::eq(_98, _99) -> [return: bb38, unwind continue];
    }

    bb38: {
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _102 = core::panicking::AssertKind::Eq;
        _104 = Option::<Arguments<'_>>::None;
        _103 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _102, _98, _99, move _104) -> unwind continue;
    }

    bb40: {
        _109 = Wrapping::<u64>(const _);
        _110 = Wrapping::<u64>(const 1_u64);
        _108 = <Wrapping<u64> as Add>::add(move _109, move _110) -> [return: bb41, unwind continue];
    }

    bb41: {
        _107 = test::black_box::<Wrapping<u64>>(move _108) -> [return: bb42, unwind continue];
    }

    bb42: {
        _106 = &_107;
        _972 = const _;
        _105 = (move _106, _972);
        _111 = (_105.0: &std::num::Wrapping<u64>);
        _112 = (_105.1: &std::num::Wrapping<u64>);
        _114 = <Wrapping<u64> as PartialEq>::eq(_111, _112) -> [return: bb43, unwind continue];
    }

    bb43: {
        _113 = Not(move _114);
        switchInt(move _113) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _115 = core::panicking::AssertKind::Eq;
        _117 = Option::<Arguments<'_>>::None;
        _116 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _115, _111, _112, move _117) -> unwind continue;
    }

    bb45: {
        _122 = Wrapping::<usize>(const _);
        _123 = Wrapping::<usize>(const 1_usize);
        _121 = <Wrapping<usize> as Add>::add(move _122, move _123) -> [return: bb46, unwind continue];
    }

    bb46: {
        _120 = test::black_box::<Wrapping<usize>>(move _121) -> [return: bb47, unwind continue];
    }

    bb47: {
        _119 = &_120;
        _971 = const _;
        _118 = (move _119, _971);
        _124 = (_118.0: &std::num::Wrapping<usize>);
        _125 = (_118.1: &std::num::Wrapping<usize>);
        _127 = <Wrapping<usize> as PartialEq>::eq(_124, _125) -> [return: bb48, unwind continue];
    }

    bb48: {
        _126 = Not(move _127);
        switchInt(move _126) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        _128 = core::panicking::AssertKind::Eq;
        _130 = Option::<Arguments<'_>>::None;
        _129 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _128, _124, _125, move _130) -> unwind continue;
    }

    bb50: {
        _135 = Wrapping::<i8>(const _);
        _136 = Wrapping::<i8>(const 1_i8);
        _134 = <Wrapping<i8> as Sub>::sub(move _135, move _136) -> [return: bb51, unwind continue];
    }

    bb51: {
        _133 = test::black_box::<Wrapping<i8>>(move _134) -> [return: bb52, unwind continue];
    }

    bb52: {
        _132 = &_133;
        _970 = const _;
        _131 = (move _132, _970);
        _137 = (_131.0: &std::num::Wrapping<i8>);
        _138 = (_131.1: &std::num::Wrapping<i8>);
        _140 = <Wrapping<i8> as PartialEq>::eq(_137, _138) -> [return: bb53, unwind continue];
    }

    bb53: {
        _139 = Not(move _140);
        switchInt(move _139) -> [0: bb55, otherwise: bb54];
    }

    bb54: {
        _141 = core::panicking::AssertKind::Eq;
        _143 = Option::<Arguments<'_>>::None;
        _142 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _141, _137, _138, move _143) -> unwind continue;
    }

    bb55: {
        _148 = Wrapping::<i16>(const _);
        _149 = Wrapping::<i16>(const 1_i16);
        _147 = <Wrapping<i16> as Sub>::sub(move _148, move _149) -> [return: bb56, unwind continue];
    }

    bb56: {
        _146 = test::black_box::<Wrapping<i16>>(move _147) -> [return: bb57, unwind continue];
    }

    bb57: {
        _145 = &_146;
        _969 = const _;
        _144 = (move _145, _969);
        _150 = (_144.0: &std::num::Wrapping<i16>);
        _151 = (_144.1: &std::num::Wrapping<i16>);
        _153 = <Wrapping<i16> as PartialEq>::eq(_150, _151) -> [return: bb58, unwind continue];
    }

    bb58: {
        _152 = Not(move _153);
        switchInt(move _152) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _154 = core::panicking::AssertKind::Eq;
        _156 = Option::<Arguments<'_>>::None;
        _155 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _154, _150, _151, move _156) -> unwind continue;
    }

    bb60: {
        _161 = Wrapping::<i32>(const _);
        _162 = Wrapping::<i32>(const 1_i32);
        _160 = <Wrapping<i32> as Sub>::sub(move _161, move _162) -> [return: bb61, unwind continue];
    }

    bb61: {
        _159 = test::black_box::<Wrapping<i32>>(move _160) -> [return: bb62, unwind continue];
    }

    bb62: {
        _158 = &_159;
        _968 = const _;
        _157 = (move _158, _968);
        _163 = (_157.0: &std::num::Wrapping<i32>);
        _164 = (_157.1: &std::num::Wrapping<i32>);
        _166 = <Wrapping<i32> as PartialEq>::eq(_163, _164) -> [return: bb63, unwind continue];
    }

    bb63: {
        _165 = Not(move _166);
        switchInt(move _165) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        _167 = core::panicking::AssertKind::Eq;
        _169 = Option::<Arguments<'_>>::None;
        _168 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _167, _163, _164, move _169) -> unwind continue;
    }

    bb65: {
        _174 = Wrapping::<i64>(const _);
        _175 = Wrapping::<i64>(const 1_i64);
        _173 = <Wrapping<i64> as Sub>::sub(move _174, move _175) -> [return: bb66, unwind continue];
    }

    bb66: {
        _172 = test::black_box::<Wrapping<i64>>(move _173) -> [return: bb67, unwind continue];
    }

    bb67: {
        _171 = &_172;
        _967 = const _;
        _170 = (move _171, _967);
        _176 = (_170.0: &std::num::Wrapping<i64>);
        _177 = (_170.1: &std::num::Wrapping<i64>);
        _179 = <Wrapping<i64> as PartialEq>::eq(_176, _177) -> [return: bb68, unwind continue];
    }

    bb68: {
        _178 = Not(move _179);
        switchInt(move _178) -> [0: bb70, otherwise: bb69];
    }

    bb69: {
        _180 = core::panicking::AssertKind::Eq;
        _182 = Option::<Arguments<'_>>::None;
        _181 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _180, _176, _177, move _182) -> unwind continue;
    }

    bb70: {
        _187 = Wrapping::<isize>(const _);
        _188 = Wrapping::<isize>(const 1_isize);
        _186 = <Wrapping<isize> as Sub>::sub(move _187, move _188) -> [return: bb71, unwind continue];
    }

    bb71: {
        _185 = test::black_box::<Wrapping<isize>>(move _186) -> [return: bb72, unwind continue];
    }

    bb72: {
        _184 = &_185;
        _966 = const _;
        _183 = (move _184, _966);
        _189 = (_183.0: &std::num::Wrapping<isize>);
        _190 = (_183.1: &std::num::Wrapping<isize>);
        _192 = <Wrapping<isize> as PartialEq>::eq(_189, _190) -> [return: bb73, unwind continue];
    }

    bb73: {
        _191 = Not(move _192);
        switchInt(move _191) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _193 = core::panicking::AssertKind::Eq;
        _195 = Option::<Arguments<'_>>::None;
        _194 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _193, _189, _190, move _195) -> unwind continue;
    }

    bb75: {
        _200 = Wrapping::<u8>(const 0_u8);
        _201 = Wrapping::<u8>(const 1_u8);
        _199 = <Wrapping<u8> as Sub>::sub(move _200, move _201) -> [return: bb76, unwind continue];
    }

    bb76: {
        _198 = test::black_box::<Wrapping<u8>>(move _199) -> [return: bb77, unwind continue];
    }

    bb77: {
        _197 = &_198;
        _965 = const _;
        _196 = (move _197, _965);
        _202 = (_196.0: &std::num::Wrapping<u8>);
        _203 = (_196.1: &std::num::Wrapping<u8>);
        _205 = <Wrapping<u8> as PartialEq>::eq(_202, _203) -> [return: bb78, unwind continue];
    }

    bb78: {
        _204 = Not(move _205);
        switchInt(move _204) -> [0: bb80, otherwise: bb79];
    }

    bb79: {
        _206 = core::panicking::AssertKind::Eq;
        _208 = Option::<Arguments<'_>>::None;
        _207 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _206, _202, _203, move _208) -> unwind continue;
    }

    bb80: {
        _213 = Wrapping::<u16>(const 0_u16);
        _214 = Wrapping::<u16>(const 1_u16);
        _212 = <Wrapping<u16> as Sub>::sub(move _213, move _214) -> [return: bb81, unwind continue];
    }

    bb81: {
        _211 = test::black_box::<Wrapping<u16>>(move _212) -> [return: bb82, unwind continue];
    }

    bb82: {
        _210 = &_211;
        _964 = const _;
        _209 = (move _210, _964);
        _215 = (_209.0: &std::num::Wrapping<u16>);
        _216 = (_209.1: &std::num::Wrapping<u16>);
        _218 = <Wrapping<u16> as PartialEq>::eq(_215, _216) -> [return: bb83, unwind continue];
    }

    bb83: {
        _217 = Not(move _218);
        switchInt(move _217) -> [0: bb85, otherwise: bb84];
    }

    bb84: {
        _219 = core::panicking::AssertKind::Eq;
        _221 = Option::<Arguments<'_>>::None;
        _220 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _219, _215, _216, move _221) -> unwind continue;
    }

    bb85: {
        _226 = Wrapping::<u32>(const 0_u32);
        _227 = Wrapping::<u32>(const 1_u32);
        _225 = <Wrapping<u32> as Sub>::sub(move _226, move _227) -> [return: bb86, unwind continue];
    }

    bb86: {
        _224 = test::black_box::<Wrapping<u32>>(move _225) -> [return: bb87, unwind continue];
    }

    bb87: {
        _223 = &_224;
        _963 = const _;
        _222 = (move _223, _963);
        _228 = (_222.0: &std::num::Wrapping<u32>);
        _229 = (_222.1: &std::num::Wrapping<u32>);
        _231 = <Wrapping<u32> as PartialEq>::eq(_228, _229) -> [return: bb88, unwind continue];
    }

    bb88: {
        _230 = Not(move _231);
        switchInt(move _230) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _232 = core::panicking::AssertKind::Eq;
        _234 = Option::<Arguments<'_>>::None;
        _233 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _232, _228, _229, move _234) -> unwind continue;
    }

    bb90: {
        _239 = Wrapping::<u64>(const 0_u64);
        _240 = Wrapping::<u64>(const 1_u64);
        _238 = <Wrapping<u64> as Sub>::sub(move _239, move _240) -> [return: bb91, unwind continue];
    }

    bb91: {
        _237 = test::black_box::<Wrapping<u64>>(move _238) -> [return: bb92, unwind continue];
    }

    bb92: {
        _236 = &_237;
        _962 = const _;
        _235 = (move _236, _962);
        _241 = (_235.0: &std::num::Wrapping<u64>);
        _242 = (_235.1: &std::num::Wrapping<u64>);
        _244 = <Wrapping<u64> as PartialEq>::eq(_241, _242) -> [return: bb93, unwind continue];
    }

    bb93: {
        _243 = Not(move _244);
        switchInt(move _243) -> [0: bb95, otherwise: bb94];
    }

    bb94: {
        _245 = core::panicking::AssertKind::Eq;
        _247 = Option::<Arguments<'_>>::None;
        _246 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _245, _241, _242, move _247) -> unwind continue;
    }

    bb95: {
        _252 = Wrapping::<usize>(const 0_usize);
        _253 = Wrapping::<usize>(const 1_usize);
        _251 = <Wrapping<usize> as Sub>::sub(move _252, move _253) -> [return: bb96, unwind continue];
    }

    bb96: {
        _250 = test::black_box::<Wrapping<usize>>(move _251) -> [return: bb97, unwind continue];
    }

    bb97: {
        _249 = &_250;
        _961 = const _;
        _248 = (move _249, _961);
        _254 = (_248.0: &std::num::Wrapping<usize>);
        _255 = (_248.1: &std::num::Wrapping<usize>);
        _257 = <Wrapping<usize> as PartialEq>::eq(_254, _255) -> [return: bb98, unwind continue];
    }

    bb98: {
        _256 = Not(move _257);
        switchInt(move _256) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        _258 = core::panicking::AssertKind::Eq;
        _260 = Option::<Arguments<'_>>::None;
        _259 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _258, _254, _255, move _260) -> unwind continue;
    }

    bb100: {
        _265 = Wrapping::<i8>(const _);
        _266 = Wrapping::<i8>(const 2_i8);
        _264 = <Wrapping<i8> as Mul>::mul(move _265, move _266) -> [return: bb101, unwind continue];
    }

    bb101: {
        _263 = test::black_box::<Wrapping<i8>>(move _264) -> [return: bb102, unwind continue];
    }

    bb102: {
        _262 = &_263;
        _960 = const _;
        _261 = (move _262, _960);
        _267 = (_261.0: &std::num::Wrapping<i8>);
        _268 = (_261.1: &std::num::Wrapping<i8>);
        _270 = <Wrapping<i8> as PartialEq>::eq(_267, _268) -> [return: bb103, unwind continue];
    }

    bb103: {
        _269 = Not(move _270);
        switchInt(move _269) -> [0: bb105, otherwise: bb104];
    }

    bb104: {
        _271 = core::panicking::AssertKind::Eq;
        _273 = Option::<Arguments<'_>>::None;
        _272 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _271, _267, _268, move _273) -> unwind continue;
    }

    bb105: {
        _278 = Wrapping::<i16>(const _);
        _279 = Wrapping::<i16>(const 2_i16);
        _277 = <Wrapping<i16> as Mul>::mul(move _278, move _279) -> [return: bb106, unwind continue];
    }

    bb106: {
        _276 = test::black_box::<Wrapping<i16>>(move _277) -> [return: bb107, unwind continue];
    }

    bb107: {
        _275 = &_276;
        _959 = const _;
        _274 = (move _275, _959);
        _280 = (_274.0: &std::num::Wrapping<i16>);
        _281 = (_274.1: &std::num::Wrapping<i16>);
        _283 = <Wrapping<i16> as PartialEq>::eq(_280, _281) -> [return: bb108, unwind continue];
    }

    bb108: {
        _282 = Not(move _283);
        switchInt(move _282) -> [0: bb110, otherwise: bb109];
    }

    bb109: {
        _284 = core::panicking::AssertKind::Eq;
        _286 = Option::<Arguments<'_>>::None;
        _285 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _284, _280, _281, move _286) -> unwind continue;
    }

    bb110: {
        _291 = Wrapping::<i32>(const _);
        _292 = Wrapping::<i32>(const 2_i32);
        _290 = <Wrapping<i32> as Mul>::mul(move _291, move _292) -> [return: bb111, unwind continue];
    }

    bb111: {
        _289 = test::black_box::<Wrapping<i32>>(move _290) -> [return: bb112, unwind continue];
    }

    bb112: {
        _288 = &_289;
        _958 = const _;
        _287 = (move _288, _958);
        _293 = (_287.0: &std::num::Wrapping<i32>);
        _294 = (_287.1: &std::num::Wrapping<i32>);
        _296 = <Wrapping<i32> as PartialEq>::eq(_293, _294) -> [return: bb113, unwind continue];
    }

    bb113: {
        _295 = Not(move _296);
        switchInt(move _295) -> [0: bb115, otherwise: bb114];
    }

    bb114: {
        _297 = core::panicking::AssertKind::Eq;
        _299 = Option::<Arguments<'_>>::None;
        _298 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _297, _293, _294, move _299) -> unwind continue;
    }

    bb115: {
        _304 = Wrapping::<i64>(const _);
        _305 = Wrapping::<i64>(const 2_i64);
        _303 = <Wrapping<i64> as Mul>::mul(move _304, move _305) -> [return: bb116, unwind continue];
    }

    bb116: {
        _302 = test::black_box::<Wrapping<i64>>(move _303) -> [return: bb117, unwind continue];
    }

    bb117: {
        _301 = &_302;
        _957 = const _;
        _300 = (move _301, _957);
        _306 = (_300.0: &std::num::Wrapping<i64>);
        _307 = (_300.1: &std::num::Wrapping<i64>);
        _309 = <Wrapping<i64> as PartialEq>::eq(_306, _307) -> [return: bb118, unwind continue];
    }

    bb118: {
        _308 = Not(move _309);
        switchInt(move _308) -> [0: bb120, otherwise: bb119];
    }

    bb119: {
        _310 = core::panicking::AssertKind::Eq;
        _312 = Option::<Arguments<'_>>::None;
        _311 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _310, _306, _307, move _312) -> unwind continue;
    }

    bb120: {
        _317 = Wrapping::<isize>(const _);
        _318 = Wrapping::<isize>(const 2_isize);
        _316 = <Wrapping<isize> as Mul>::mul(move _317, move _318) -> [return: bb121, unwind continue];
    }

    bb121: {
        _315 = test::black_box::<Wrapping<isize>>(move _316) -> [return: bb122, unwind continue];
    }

    bb122: {
        _314 = &_315;
        _956 = const _;
        _313 = (move _314, _956);
        _319 = (_313.0: &std::num::Wrapping<isize>);
        _320 = (_313.1: &std::num::Wrapping<isize>);
        _322 = <Wrapping<isize> as PartialEq>::eq(_319, _320) -> [return: bb123, unwind continue];
    }

    bb123: {
        _321 = Not(move _322);
        switchInt(move _321) -> [0: bb125, otherwise: bb124];
    }

    bb124: {
        _323 = core::panicking::AssertKind::Eq;
        _325 = Option::<Arguments<'_>>::None;
        _324 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _323, _319, _320, move _325) -> unwind continue;
    }

    bb125: {
        _330 = Wrapping::<u8>(const _);
        _331 = Wrapping::<u8>(const 2_u8);
        _329 = <Wrapping<u8> as Mul>::mul(move _330, move _331) -> [return: bb126, unwind continue];
    }

    bb126: {
        _328 = test::black_box::<Wrapping<u8>>(move _329) -> [return: bb127, unwind continue];
    }

    bb127: {
        _327 = &_328;
        _955 = const _;
        _326 = (move _327, _955);
        _332 = (_326.0: &std::num::Wrapping<u8>);
        _333 = (_326.1: &std::num::Wrapping<u8>);
        _335 = <Wrapping<u8> as PartialEq>::eq(_332, _333) -> [return: bb128, unwind continue];
    }

    bb128: {
        _334 = Not(move _335);
        switchInt(move _334) -> [0: bb130, otherwise: bb129];
    }

    bb129: {
        _336 = core::panicking::AssertKind::Eq;
        _338 = Option::<Arguments<'_>>::None;
        _337 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _336, _332, _333, move _338) -> unwind continue;
    }

    bb130: {
        _343 = Wrapping::<u16>(const _);
        _344 = Wrapping::<u16>(const 2_u16);
        _342 = <Wrapping<u16> as Mul>::mul(move _343, move _344) -> [return: bb131, unwind continue];
    }

    bb131: {
        _341 = test::black_box::<Wrapping<u16>>(move _342) -> [return: bb132, unwind continue];
    }

    bb132: {
        _340 = &_341;
        _954 = const _;
        _339 = (move _340, _954);
        _345 = (_339.0: &std::num::Wrapping<u16>);
        _346 = (_339.1: &std::num::Wrapping<u16>);
        _348 = <Wrapping<u16> as PartialEq>::eq(_345, _346) -> [return: bb133, unwind continue];
    }

    bb133: {
        _347 = Not(move _348);
        switchInt(move _347) -> [0: bb135, otherwise: bb134];
    }

    bb134: {
        _349 = core::panicking::AssertKind::Eq;
        _351 = Option::<Arguments<'_>>::None;
        _350 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _349, _345, _346, move _351) -> unwind continue;
    }

    bb135: {
        _356 = Wrapping::<u32>(const _);
        _357 = Wrapping::<u32>(const 2_u32);
        _355 = <Wrapping<u32> as Mul>::mul(move _356, move _357) -> [return: bb136, unwind continue];
    }

    bb136: {
        _354 = test::black_box::<Wrapping<u32>>(move _355) -> [return: bb137, unwind continue];
    }

    bb137: {
        _353 = &_354;
        _953 = const _;
        _352 = (move _353, _953);
        _358 = (_352.0: &std::num::Wrapping<u32>);
        _359 = (_352.1: &std::num::Wrapping<u32>);
        _361 = <Wrapping<u32> as PartialEq>::eq(_358, _359) -> [return: bb138, unwind continue];
    }

    bb138: {
        _360 = Not(move _361);
        switchInt(move _360) -> [0: bb140, otherwise: bb139];
    }

    bb139: {
        _362 = core::panicking::AssertKind::Eq;
        _364 = Option::<Arguments<'_>>::None;
        _363 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _362, _358, _359, move _364) -> unwind continue;
    }

    bb140: {
        _369 = Wrapping::<u64>(const _);
        _370 = Wrapping::<u64>(const 2_u64);
        _368 = <Wrapping<u64> as Mul>::mul(move _369, move _370) -> [return: bb141, unwind continue];
    }

    bb141: {
        _367 = test::black_box::<Wrapping<u64>>(move _368) -> [return: bb142, unwind continue];
    }

    bb142: {
        _366 = &_367;
        _952 = const _;
        _365 = (move _366, _952);
        _371 = (_365.0: &std::num::Wrapping<u64>);
        _372 = (_365.1: &std::num::Wrapping<u64>);
        _374 = <Wrapping<u64> as PartialEq>::eq(_371, _372) -> [return: bb143, unwind continue];
    }

    bb143: {
        _373 = Not(move _374);
        switchInt(move _373) -> [0: bb145, otherwise: bb144];
    }

    bb144: {
        _375 = core::panicking::AssertKind::Eq;
        _377 = Option::<Arguments<'_>>::None;
        _376 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _375, _371, _372, move _377) -> unwind continue;
    }

    bb145: {
        _382 = Wrapping::<usize>(const _);
        _383 = Wrapping::<usize>(const 2_usize);
        _381 = <Wrapping<usize> as Mul>::mul(move _382, move _383) -> [return: bb146, unwind continue];
    }

    bb146: {
        _380 = test::black_box::<Wrapping<usize>>(move _381) -> [return: bb147, unwind continue];
    }

    bb147: {
        _379 = &_380;
        _951 = const _;
        _378 = (move _379, _951);
        _384 = (_378.0: &std::num::Wrapping<usize>);
        _385 = (_378.1: &std::num::Wrapping<usize>);
        _387 = <Wrapping<usize> as PartialEq>::eq(_384, _385) -> [return: bb148, unwind continue];
    }

    bb148: {
        _386 = Not(move _387);
        switchInt(move _386) -> [0: bb150, otherwise: bb149];
    }

    bb149: {
        _388 = core::panicking::AssertKind::Eq;
        _390 = Option::<Arguments<'_>>::None;
        _389 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _388, _384, _385, move _390) -> unwind continue;
    }

    bb150: {
        _395 = Wrapping::<i8>(const _);
        _396 = Wrapping::<i8>(const -1_i8);
        _394 = <Wrapping<i8> as Div>::div(move _395, move _396) -> [return: bb151, unwind continue];
    }

    bb151: {
        _393 = test::black_box::<Wrapping<i8>>(move _394) -> [return: bb152, unwind continue];
    }

    bb152: {
        _392 = &_393;
        _950 = const _;
        _391 = (move _392, _950);
        _397 = (_391.0: &std::num::Wrapping<i8>);
        _398 = (_391.1: &std::num::Wrapping<i8>);
        _400 = <Wrapping<i8> as PartialEq>::eq(_397, _398) -> [return: bb153, unwind continue];
    }

    bb153: {
        _399 = Not(move _400);
        switchInt(move _399) -> [0: bb155, otherwise: bb154];
    }

    bb154: {
        _401 = core::panicking::AssertKind::Eq;
        _403 = Option::<Arguments<'_>>::None;
        _402 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _401, _397, _398, move _403) -> unwind continue;
    }

    bb155: {
        _408 = Wrapping::<i16>(const _);
        _409 = Wrapping::<i16>(const -1_i16);
        _407 = <Wrapping<i16> as Div>::div(move _408, move _409) -> [return: bb156, unwind continue];
    }

    bb156: {
        _406 = test::black_box::<Wrapping<i16>>(move _407) -> [return: bb157, unwind continue];
    }

    bb157: {
        _405 = &_406;
        _949 = const _;
        _404 = (move _405, _949);
        _410 = (_404.0: &std::num::Wrapping<i16>);
        _411 = (_404.1: &std::num::Wrapping<i16>);
        _413 = <Wrapping<i16> as PartialEq>::eq(_410, _411) -> [return: bb158, unwind continue];
    }

    bb158: {
        _412 = Not(move _413);
        switchInt(move _412) -> [0: bb160, otherwise: bb159];
    }

    bb159: {
        _414 = core::panicking::AssertKind::Eq;
        _416 = Option::<Arguments<'_>>::None;
        _415 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _414, _410, _411, move _416) -> unwind continue;
    }

    bb160: {
        _421 = Wrapping::<i32>(const _);
        _422 = Wrapping::<i32>(const -1_i32);
        _420 = <Wrapping<i32> as Div>::div(move _421, move _422) -> [return: bb161, unwind continue];
    }

    bb161: {
        _419 = test::black_box::<Wrapping<i32>>(move _420) -> [return: bb162, unwind continue];
    }

    bb162: {
        _418 = &_419;
        _948 = const _;
        _417 = (move _418, _948);
        _423 = (_417.0: &std::num::Wrapping<i32>);
        _424 = (_417.1: &std::num::Wrapping<i32>);
        _426 = <Wrapping<i32> as PartialEq>::eq(_423, _424) -> [return: bb163, unwind continue];
    }

    bb163: {
        _425 = Not(move _426);
        switchInt(move _425) -> [0: bb165, otherwise: bb164];
    }

    bb164: {
        _427 = core::panicking::AssertKind::Eq;
        _429 = Option::<Arguments<'_>>::None;
        _428 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _427, _423, _424, move _429) -> unwind continue;
    }

    bb165: {
        _434 = Wrapping::<i64>(const _);
        _435 = Wrapping::<i64>(const -1_i64);
        _433 = <Wrapping<i64> as Div>::div(move _434, move _435) -> [return: bb166, unwind continue];
    }

    bb166: {
        _432 = test::black_box::<Wrapping<i64>>(move _433) -> [return: bb167, unwind continue];
    }

    bb167: {
        _431 = &_432;
        _947 = const _;
        _430 = (move _431, _947);
        _436 = (_430.0: &std::num::Wrapping<i64>);
        _437 = (_430.1: &std::num::Wrapping<i64>);
        _439 = <Wrapping<i64> as PartialEq>::eq(_436, _437) -> [return: bb168, unwind continue];
    }

    bb168: {
        _438 = Not(move _439);
        switchInt(move _438) -> [0: bb170, otherwise: bb169];
    }

    bb169: {
        _440 = core::panicking::AssertKind::Eq;
        _442 = Option::<Arguments<'_>>::None;
        _441 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _440, _436, _437, move _442) -> unwind continue;
    }

    bb170: {
        _447 = Wrapping::<isize>(const _);
        _448 = Wrapping::<isize>(const -1_isize);
        _446 = <Wrapping<isize> as Div>::div(move _447, move _448) -> [return: bb171, unwind continue];
    }

    bb171: {
        _445 = test::black_box::<Wrapping<isize>>(move _446) -> [return: bb172, unwind continue];
    }

    bb172: {
        _444 = &_445;
        _946 = const _;
        _443 = (move _444, _946);
        _449 = (_443.0: &std::num::Wrapping<isize>);
        _450 = (_443.1: &std::num::Wrapping<isize>);
        _452 = <Wrapping<isize> as PartialEq>::eq(_449, _450) -> [return: bb173, unwind continue];
    }

    bb173: {
        _451 = Not(move _452);
        switchInt(move _451) -> [0: bb175, otherwise: bb174];
    }

    bb174: {
        _453 = core::panicking::AssertKind::Eq;
        _455 = Option::<Arguments<'_>>::None;
        _454 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _453, _449, _450, move _455) -> unwind continue;
    }

    bb175: {
        _460 = Wrapping::<i8>(const _);
        _461 = Wrapping::<i8>(const -1_i8);
        _459 = <Wrapping<i8> as Rem>::rem(move _460, move _461) -> [return: bb176, unwind continue];
    }

    bb176: {
        _458 = test::black_box::<Wrapping<i8>>(move _459) -> [return: bb177, unwind continue];
    }

    bb177: {
        _457 = &_458;
        _945 = const _;
        _456 = (move _457, _945);
        _462 = (_456.0: &std::num::Wrapping<i8>);
        _463 = (_456.1: &std::num::Wrapping<i8>);
        _465 = <Wrapping<i8> as PartialEq>::eq(_462, _463) -> [return: bb178, unwind continue];
    }

    bb178: {
        _464 = Not(move _465);
        switchInt(move _464) -> [0: bb180, otherwise: bb179];
    }

    bb179: {
        _466 = core::panicking::AssertKind::Eq;
        _468 = Option::<Arguments<'_>>::None;
        _467 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _466, _462, _463, move _468) -> unwind continue;
    }

    bb180: {
        _473 = Wrapping::<i16>(const _);
        _474 = Wrapping::<i16>(const -1_i16);
        _472 = <Wrapping<i16> as Rem>::rem(move _473, move _474) -> [return: bb181, unwind continue];
    }

    bb181: {
        _471 = test::black_box::<Wrapping<i16>>(move _472) -> [return: bb182, unwind continue];
    }

    bb182: {
        _470 = &_471;
        _944 = const _;
        _469 = (move _470, _944);
        _475 = (_469.0: &std::num::Wrapping<i16>);
        _476 = (_469.1: &std::num::Wrapping<i16>);
        _478 = <Wrapping<i16> as PartialEq>::eq(_475, _476) -> [return: bb183, unwind continue];
    }

    bb183: {
        _477 = Not(move _478);
        switchInt(move _477) -> [0: bb185, otherwise: bb184];
    }

    bb184: {
        _479 = core::panicking::AssertKind::Eq;
        _481 = Option::<Arguments<'_>>::None;
        _480 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _479, _475, _476, move _481) -> unwind continue;
    }

    bb185: {
        _486 = Wrapping::<i32>(const _);
        _487 = Wrapping::<i32>(const -1_i32);
        _485 = <Wrapping<i32> as Rem>::rem(move _486, move _487) -> [return: bb186, unwind continue];
    }

    bb186: {
        _484 = test::black_box::<Wrapping<i32>>(move _485) -> [return: bb187, unwind continue];
    }

    bb187: {
        _483 = &_484;
        _943 = const _;
        _482 = (move _483, _943);
        _488 = (_482.0: &std::num::Wrapping<i32>);
        _489 = (_482.1: &std::num::Wrapping<i32>);
        _491 = <Wrapping<i32> as PartialEq>::eq(_488, _489) -> [return: bb188, unwind continue];
    }

    bb188: {
        _490 = Not(move _491);
        switchInt(move _490) -> [0: bb190, otherwise: bb189];
    }

    bb189: {
        _492 = core::panicking::AssertKind::Eq;
        _494 = Option::<Arguments<'_>>::None;
        _493 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _492, _488, _489, move _494) -> unwind continue;
    }

    bb190: {
        _499 = Wrapping::<i64>(const _);
        _500 = Wrapping::<i64>(const -1_i64);
        _498 = <Wrapping<i64> as Rem>::rem(move _499, move _500) -> [return: bb191, unwind continue];
    }

    bb191: {
        _497 = test::black_box::<Wrapping<i64>>(move _498) -> [return: bb192, unwind continue];
    }

    bb192: {
        _496 = &_497;
        _942 = const _;
        _495 = (move _496, _942);
        _501 = (_495.0: &std::num::Wrapping<i64>);
        _502 = (_495.1: &std::num::Wrapping<i64>);
        _504 = <Wrapping<i64> as PartialEq>::eq(_501, _502) -> [return: bb193, unwind continue];
    }

    bb193: {
        _503 = Not(move _504);
        switchInt(move _503) -> [0: bb195, otherwise: bb194];
    }

    bb194: {
        _505 = core::panicking::AssertKind::Eq;
        _507 = Option::<Arguments<'_>>::None;
        _506 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _505, _501, _502, move _507) -> unwind continue;
    }

    bb195: {
        _512 = Wrapping::<isize>(const _);
        _513 = Wrapping::<isize>(const -1_isize);
        _511 = <Wrapping<isize> as Rem>::rem(move _512, move _513) -> [return: bb196, unwind continue];
    }

    bb196: {
        _510 = test::black_box::<Wrapping<isize>>(move _511) -> [return: bb197, unwind continue];
    }

    bb197: {
        _509 = &_510;
        _941 = const _;
        _508 = (move _509, _941);
        _514 = (_508.0: &std::num::Wrapping<isize>);
        _515 = (_508.1: &std::num::Wrapping<isize>);
        _517 = <Wrapping<isize> as PartialEq>::eq(_514, _515) -> [return: bb198, unwind continue];
    }

    bb198: {
        _516 = Not(move _517);
        switchInt(move _516) -> [0: bb200, otherwise: bb199];
    }

    bb199: {
        _518 = core::panicking::AssertKind::Eq;
        _520 = Option::<Arguments<'_>>::None;
        _519 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _518, _514, _515, move _520) -> unwind continue;
    }

    bb200: {
        _525 = Wrapping::<i8>(const 42_i8);
        _526 = Wrapping::<i8>(const 38_i8);
        _524 = <Wrapping<i8> as BitXor>::bitxor(move _525, move _526) -> [return: bb201, unwind continue];
    }

    bb201: {
        _523 = test::black_box::<Wrapping<i8>>(move _524) -> [return: bb202, unwind continue];
    }

    bb202: {
        _522 = &_523;
        _940 = const _;
        _521 = (move _522, _940);
        _527 = (_521.0: &std::num::Wrapping<i8>);
        _528 = (_521.1: &std::num::Wrapping<i8>);
        _530 = <Wrapping<i8> as PartialEq>::eq(_527, _528) -> [return: bb203, unwind continue];
    }

    bb203: {
        _529 = Not(move _530);
        switchInt(move _529) -> [0: bb205, otherwise: bb204];
    }

    bb204: {
        _531 = core::panicking::AssertKind::Eq;
        _533 = Option::<Arguments<'_>>::None;
        _532 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _531, _527, _528, move _533) -> unwind continue;
    }

    bb205: {
        _538 = Wrapping::<i16>(const 42_i16);
        _539 = Wrapping::<i16>(const 38_i16);
        _537 = <Wrapping<i16> as BitXor>::bitxor(move _538, move _539) -> [return: bb206, unwind continue];
    }

    bb206: {
        _536 = test::black_box::<Wrapping<i16>>(move _537) -> [return: bb207, unwind continue];
    }

    bb207: {
        _535 = &_536;
        _939 = const _;
        _534 = (move _535, _939);
        _540 = (_534.0: &std::num::Wrapping<i16>);
        _541 = (_534.1: &std::num::Wrapping<i16>);
        _543 = <Wrapping<i16> as PartialEq>::eq(_540, _541) -> [return: bb208, unwind continue];
    }

    bb208: {
        _542 = Not(move _543);
        switchInt(move _542) -> [0: bb210, otherwise: bb209];
    }

    bb209: {
        _544 = core::panicking::AssertKind::Eq;
        _546 = Option::<Arguments<'_>>::None;
        _545 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _544, _540, _541, move _546) -> unwind continue;
    }

    bb210: {
        _551 = Wrapping::<i32>(const 42_i32);
        _552 = Wrapping::<i32>(const 38_i32);
        _550 = <Wrapping<i32> as BitXor>::bitxor(move _551, move _552) -> [return: bb211, unwind continue];
    }

    bb211: {
        _549 = test::black_box::<Wrapping<i32>>(move _550) -> [return: bb212, unwind continue];
    }

    bb212: {
        _548 = &_549;
        _938 = const _;
        _547 = (move _548, _938);
        _553 = (_547.0: &std::num::Wrapping<i32>);
        _554 = (_547.1: &std::num::Wrapping<i32>);
        _556 = <Wrapping<i32> as PartialEq>::eq(_553, _554) -> [return: bb213, unwind continue];
    }

    bb213: {
        _555 = Not(move _556);
        switchInt(move _555) -> [0: bb215, otherwise: bb214];
    }

    bb214: {
        _557 = core::panicking::AssertKind::Eq;
        _559 = Option::<Arguments<'_>>::None;
        _558 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _557, _553, _554, move _559) -> unwind continue;
    }

    bb215: {
        _564 = Wrapping::<i64>(const 42_i64);
        _565 = Wrapping::<i64>(const 38_i64);
        _563 = <Wrapping<i64> as BitXor>::bitxor(move _564, move _565) -> [return: bb216, unwind continue];
    }

    bb216: {
        _562 = test::black_box::<Wrapping<i64>>(move _563) -> [return: bb217, unwind continue];
    }

    bb217: {
        _561 = &_562;
        _937 = const _;
        _560 = (move _561, _937);
        _566 = (_560.0: &std::num::Wrapping<i64>);
        _567 = (_560.1: &std::num::Wrapping<i64>);
        _569 = <Wrapping<i64> as PartialEq>::eq(_566, _567) -> [return: bb218, unwind continue];
    }

    bb218: {
        _568 = Not(move _569);
        switchInt(move _568) -> [0: bb220, otherwise: bb219];
    }

    bb219: {
        _570 = core::panicking::AssertKind::Eq;
        _572 = Option::<Arguments<'_>>::None;
        _571 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _570, _566, _567, move _572) -> unwind continue;
    }

    bb220: {
        _577 = Wrapping::<isize>(const 42_isize);
        _578 = Wrapping::<isize>(const 38_isize);
        _576 = <Wrapping<isize> as BitXor>::bitxor(move _577, move _578) -> [return: bb221, unwind continue];
    }

    bb221: {
        _575 = test::black_box::<Wrapping<isize>>(move _576) -> [return: bb222, unwind continue];
    }

    bb222: {
        _574 = &_575;
        _936 = const _;
        _573 = (move _574, _936);
        _579 = (_573.0: &std::num::Wrapping<isize>);
        _580 = (_573.1: &std::num::Wrapping<isize>);
        _582 = <Wrapping<isize> as PartialEq>::eq(_579, _580) -> [return: bb223, unwind continue];
    }

    bb223: {
        _581 = Not(move _582);
        switchInt(move _581) -> [0: bb225, otherwise: bb224];
    }

    bb224: {
        _583 = core::panicking::AssertKind::Eq;
        _585 = Option::<Arguments<'_>>::None;
        _584 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _583, _579, _580, move _585) -> unwind continue;
    }

    bb225: {
        _590 = Wrapping::<u8>(const 42_u8);
        _591 = Wrapping::<u8>(const 38_u8);
        _589 = <Wrapping<u8> as BitXor>::bitxor(move _590, move _591) -> [return: bb226, unwind continue];
    }

    bb226: {
        _588 = test::black_box::<Wrapping<u8>>(move _589) -> [return: bb227, unwind continue];
    }

    bb227: {
        _587 = &_588;
        _935 = const _;
        _586 = (move _587, _935);
        _592 = (_586.0: &std::num::Wrapping<u8>);
        _593 = (_586.1: &std::num::Wrapping<u8>);
        _595 = <Wrapping<u8> as PartialEq>::eq(_592, _593) -> [return: bb228, unwind continue];
    }

    bb228: {
        _594 = Not(move _595);
        switchInt(move _594) -> [0: bb230, otherwise: bb229];
    }

    bb229: {
        _596 = core::panicking::AssertKind::Eq;
        _598 = Option::<Arguments<'_>>::None;
        _597 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _596, _592, _593, move _598) -> unwind continue;
    }

    bb230: {
        _603 = Wrapping::<u16>(const 42_u16);
        _604 = Wrapping::<u16>(const 38_u16);
        _602 = <Wrapping<u16> as BitXor>::bitxor(move _603, move _604) -> [return: bb231, unwind continue];
    }

    bb231: {
        _601 = test::black_box::<Wrapping<u16>>(move _602) -> [return: bb232, unwind continue];
    }

    bb232: {
        _600 = &_601;
        _934 = const _;
        _599 = (move _600, _934);
        _605 = (_599.0: &std::num::Wrapping<u16>);
        _606 = (_599.1: &std::num::Wrapping<u16>);
        _608 = <Wrapping<u16> as PartialEq>::eq(_605, _606) -> [return: bb233, unwind continue];
    }

    bb233: {
        _607 = Not(move _608);
        switchInt(move _607) -> [0: bb235, otherwise: bb234];
    }

    bb234: {
        _609 = core::panicking::AssertKind::Eq;
        _611 = Option::<Arguments<'_>>::None;
        _610 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _609, _605, _606, move _611) -> unwind continue;
    }

    bb235: {
        _616 = Wrapping::<u32>(const 42_u32);
        _617 = Wrapping::<u32>(const 38_u32);
        _615 = <Wrapping<u32> as BitXor>::bitxor(move _616, move _617) -> [return: bb236, unwind continue];
    }

    bb236: {
        _614 = test::black_box::<Wrapping<u32>>(move _615) -> [return: bb237, unwind continue];
    }

    bb237: {
        _613 = &_614;
        _933 = const _;
        _612 = (move _613, _933);
        _618 = (_612.0: &std::num::Wrapping<u32>);
        _619 = (_612.1: &std::num::Wrapping<u32>);
        _621 = <Wrapping<u32> as PartialEq>::eq(_618, _619) -> [return: bb238, unwind continue];
    }

    bb238: {
        _620 = Not(move _621);
        switchInt(move _620) -> [0: bb240, otherwise: bb239];
    }

    bb239: {
        _622 = core::panicking::AssertKind::Eq;
        _624 = Option::<Arguments<'_>>::None;
        _623 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _622, _618, _619, move _624) -> unwind continue;
    }

    bb240: {
        _629 = Wrapping::<u64>(const 42_u64);
        _630 = Wrapping::<u64>(const 38_u64);
        _628 = <Wrapping<u64> as BitXor>::bitxor(move _629, move _630) -> [return: bb241, unwind continue];
    }

    bb241: {
        _627 = test::black_box::<Wrapping<u64>>(move _628) -> [return: bb242, unwind continue];
    }

    bb242: {
        _626 = &_627;
        _932 = const _;
        _625 = (move _626, _932);
        _631 = (_625.0: &std::num::Wrapping<u64>);
        _632 = (_625.1: &std::num::Wrapping<u64>);
        _634 = <Wrapping<u64> as PartialEq>::eq(_631, _632) -> [return: bb243, unwind continue];
    }

    bb243: {
        _633 = Not(move _634);
        switchInt(move _633) -> [0: bb245, otherwise: bb244];
    }

    bb244: {
        _635 = core::panicking::AssertKind::Eq;
        _637 = Option::<Arguments<'_>>::None;
        _636 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _635, _631, _632, move _637) -> unwind continue;
    }

    bb245: {
        _642 = Wrapping::<usize>(const 42_usize);
        _643 = Wrapping::<usize>(const 38_usize);
        _641 = <Wrapping<usize> as BitXor>::bitxor(move _642, move _643) -> [return: bb246, unwind continue];
    }

    bb246: {
        _640 = test::black_box::<Wrapping<usize>>(move _641) -> [return: bb247, unwind continue];
    }

    bb247: {
        _639 = &_640;
        _931 = const _;
        _638 = (move _639, _931);
        _644 = (_638.0: &std::num::Wrapping<usize>);
        _645 = (_638.1: &std::num::Wrapping<usize>);
        _647 = <Wrapping<usize> as PartialEq>::eq(_644, _645) -> [return: bb248, unwind continue];
    }

    bb248: {
        _646 = Not(move _647);
        switchInt(move _646) -> [0: bb250, otherwise: bb249];
    }

    bb249: {
        _648 = core::panicking::AssertKind::Eq;
        _650 = Option::<Arguments<'_>>::None;
        _649 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _648, _644, _645, move _650) -> unwind continue;
    }

    bb250: {
        _655 = Wrapping::<i8>(const 42_i8);
        _656 = Wrapping::<i8>(const 38_i8);
        _654 = <Wrapping<i8> as BitOr>::bitor(move _655, move _656) -> [return: bb251, unwind continue];
    }

    bb251: {
        _653 = test::black_box::<Wrapping<i8>>(move _654) -> [return: bb252, unwind continue];
    }

    bb252: {
        _652 = &_653;
        _930 = const _;
        _651 = (move _652, _930);
        _657 = (_651.0: &std::num::Wrapping<i8>);
        _658 = (_651.1: &std::num::Wrapping<i8>);
        _660 = <Wrapping<i8> as PartialEq>::eq(_657, _658) -> [return: bb253, unwind continue];
    }

    bb253: {
        _659 = Not(move _660);
        switchInt(move _659) -> [0: bb255, otherwise: bb254];
    }

    bb254: {
        _661 = core::panicking::AssertKind::Eq;
        _663 = Option::<Arguments<'_>>::None;
        _662 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _661, _657, _658, move _663) -> unwind continue;
    }

    bb255: {
        _668 = Wrapping::<i16>(const 42_i16);
        _669 = Wrapping::<i16>(const 38_i16);
        _667 = <Wrapping<i16> as BitOr>::bitor(move _668, move _669) -> [return: bb256, unwind continue];
    }

    bb256: {
        _666 = test::black_box::<Wrapping<i16>>(move _667) -> [return: bb257, unwind continue];
    }

    bb257: {
        _665 = &_666;
        _929 = const _;
        _664 = (move _665, _929);
        _670 = (_664.0: &std::num::Wrapping<i16>);
        _671 = (_664.1: &std::num::Wrapping<i16>);
        _673 = <Wrapping<i16> as PartialEq>::eq(_670, _671) -> [return: bb258, unwind continue];
    }

    bb258: {
        _672 = Not(move _673);
        switchInt(move _672) -> [0: bb260, otherwise: bb259];
    }

    bb259: {
        _674 = core::panicking::AssertKind::Eq;
        _676 = Option::<Arguments<'_>>::None;
        _675 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _674, _670, _671, move _676) -> unwind continue;
    }

    bb260: {
        _681 = Wrapping::<i32>(const 42_i32);
        _682 = Wrapping::<i32>(const 38_i32);
        _680 = <Wrapping<i32> as BitOr>::bitor(move _681, move _682) -> [return: bb261, unwind continue];
    }

    bb261: {
        _679 = test::black_box::<Wrapping<i32>>(move _680) -> [return: bb262, unwind continue];
    }

    bb262: {
        _678 = &_679;
        _928 = const _;
        _677 = (move _678, _928);
        _683 = (_677.0: &std::num::Wrapping<i32>);
        _684 = (_677.1: &std::num::Wrapping<i32>);
        _686 = <Wrapping<i32> as PartialEq>::eq(_683, _684) -> [return: bb263, unwind continue];
    }

    bb263: {
        _685 = Not(move _686);
        switchInt(move _685) -> [0: bb265, otherwise: bb264];
    }

    bb264: {
        _687 = core::panicking::AssertKind::Eq;
        _689 = Option::<Arguments<'_>>::None;
        _688 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _687, _683, _684, move _689) -> unwind continue;
    }

    bb265: {
        _694 = Wrapping::<i64>(const 42_i64);
        _695 = Wrapping::<i64>(const 38_i64);
        _693 = <Wrapping<i64> as BitOr>::bitor(move _694, move _695) -> [return: bb266, unwind continue];
    }

    bb266: {
        _692 = test::black_box::<Wrapping<i64>>(move _693) -> [return: bb267, unwind continue];
    }

    bb267: {
        _691 = &_692;
        _927 = const _;
        _690 = (move _691, _927);
        _696 = (_690.0: &std::num::Wrapping<i64>);
        _697 = (_690.1: &std::num::Wrapping<i64>);
        _699 = <Wrapping<i64> as PartialEq>::eq(_696, _697) -> [return: bb268, unwind continue];
    }

    bb268: {
        _698 = Not(move _699);
        switchInt(move _698) -> [0: bb270, otherwise: bb269];
    }

    bb269: {
        _700 = core::panicking::AssertKind::Eq;
        _702 = Option::<Arguments<'_>>::None;
        _701 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _700, _696, _697, move _702) -> unwind continue;
    }

    bb270: {
        _707 = Wrapping::<isize>(const 42_isize);
        _708 = Wrapping::<isize>(const 38_isize);
        _706 = <Wrapping<isize> as BitOr>::bitor(move _707, move _708) -> [return: bb271, unwind continue];
    }

    bb271: {
        _705 = test::black_box::<Wrapping<isize>>(move _706) -> [return: bb272, unwind continue];
    }

    bb272: {
        _704 = &_705;
        _926 = const _;
        _703 = (move _704, _926);
        _709 = (_703.0: &std::num::Wrapping<isize>);
        _710 = (_703.1: &std::num::Wrapping<isize>);
        _712 = <Wrapping<isize> as PartialEq>::eq(_709, _710) -> [return: bb273, unwind continue];
    }

    bb273: {
        _711 = Not(move _712);
        switchInt(move _711) -> [0: bb275, otherwise: bb274];
    }

    bb274: {
        _713 = core::panicking::AssertKind::Eq;
        _715 = Option::<Arguments<'_>>::None;
        _714 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _713, _709, _710, move _715) -> unwind continue;
    }

    bb275: {
        _720 = Wrapping::<u8>(const 42_u8);
        _721 = Wrapping::<u8>(const 38_u8);
        _719 = <Wrapping<u8> as BitOr>::bitor(move _720, move _721) -> [return: bb276, unwind continue];
    }

    bb276: {
        _718 = test::black_box::<Wrapping<u8>>(move _719) -> [return: bb277, unwind continue];
    }

    bb277: {
        _717 = &_718;
        _925 = const _;
        _716 = (move _717, _925);
        _722 = (_716.0: &std::num::Wrapping<u8>);
        _723 = (_716.1: &std::num::Wrapping<u8>);
        _725 = <Wrapping<u8> as PartialEq>::eq(_722, _723) -> [return: bb278, unwind continue];
    }

    bb278: {
        _724 = Not(move _725);
        switchInt(move _724) -> [0: bb280, otherwise: bb279];
    }

    bb279: {
        _726 = core::panicking::AssertKind::Eq;
        _728 = Option::<Arguments<'_>>::None;
        _727 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _726, _722, _723, move _728) -> unwind continue;
    }

    bb280: {
        _733 = Wrapping::<u16>(const 42_u16);
        _734 = Wrapping::<u16>(const 38_u16);
        _732 = <Wrapping<u16> as BitOr>::bitor(move _733, move _734) -> [return: bb281, unwind continue];
    }

    bb281: {
        _731 = test::black_box::<Wrapping<u16>>(move _732) -> [return: bb282, unwind continue];
    }

    bb282: {
        _730 = &_731;
        _924 = const _;
        _729 = (move _730, _924);
        _735 = (_729.0: &std::num::Wrapping<u16>);
        _736 = (_729.1: &std::num::Wrapping<u16>);
        _738 = <Wrapping<u16> as PartialEq>::eq(_735, _736) -> [return: bb283, unwind continue];
    }

    bb283: {
        _737 = Not(move _738);
        switchInt(move _737) -> [0: bb285, otherwise: bb284];
    }

    bb284: {
        _739 = core::panicking::AssertKind::Eq;
        _741 = Option::<Arguments<'_>>::None;
        _740 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _739, _735, _736, move _741) -> unwind continue;
    }

    bb285: {
        _746 = Wrapping::<u32>(const 42_u32);
        _747 = Wrapping::<u32>(const 38_u32);
        _745 = <Wrapping<u32> as BitOr>::bitor(move _746, move _747) -> [return: bb286, unwind continue];
    }

    bb286: {
        _744 = test::black_box::<Wrapping<u32>>(move _745) -> [return: bb287, unwind continue];
    }

    bb287: {
        _743 = &_744;
        _923 = const _;
        _742 = (move _743, _923);
        _748 = (_742.0: &std::num::Wrapping<u32>);
        _749 = (_742.1: &std::num::Wrapping<u32>);
        _751 = <Wrapping<u32> as PartialEq>::eq(_748, _749) -> [return: bb288, unwind continue];
    }

    bb288: {
        _750 = Not(move _751);
        switchInt(move _750) -> [0: bb290, otherwise: bb289];
    }

    bb289: {
        _752 = core::panicking::AssertKind::Eq;
        _754 = Option::<Arguments<'_>>::None;
        _753 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _752, _748, _749, move _754) -> unwind continue;
    }

    bb290: {
        _759 = Wrapping::<u64>(const 42_u64);
        _760 = Wrapping::<u64>(const 38_u64);
        _758 = <Wrapping<u64> as BitOr>::bitor(move _759, move _760) -> [return: bb291, unwind continue];
    }

    bb291: {
        _757 = test::black_box::<Wrapping<u64>>(move _758) -> [return: bb292, unwind continue];
    }

    bb292: {
        _756 = &_757;
        _922 = const _;
        _755 = (move _756, _922);
        _761 = (_755.0: &std::num::Wrapping<u64>);
        _762 = (_755.1: &std::num::Wrapping<u64>);
        _764 = <Wrapping<u64> as PartialEq>::eq(_761, _762) -> [return: bb293, unwind continue];
    }

    bb293: {
        _763 = Not(move _764);
        switchInt(move _763) -> [0: bb295, otherwise: bb294];
    }

    bb294: {
        _765 = core::panicking::AssertKind::Eq;
        _767 = Option::<Arguments<'_>>::None;
        _766 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _765, _761, _762, move _767) -> unwind continue;
    }

    bb295: {
        _772 = Wrapping::<usize>(const 42_usize);
        _773 = Wrapping::<usize>(const 38_usize);
        _771 = <Wrapping<usize> as BitOr>::bitor(move _772, move _773) -> [return: bb296, unwind continue];
    }

    bb296: {
        _770 = test::black_box::<Wrapping<usize>>(move _771) -> [return: bb297, unwind continue];
    }

    bb297: {
        _769 = &_770;
        _921 = const _;
        _768 = (move _769, _921);
        _774 = (_768.0: &std::num::Wrapping<usize>);
        _775 = (_768.1: &std::num::Wrapping<usize>);
        _777 = <Wrapping<usize> as PartialEq>::eq(_774, _775) -> [return: bb298, unwind continue];
    }

    bb298: {
        _776 = Not(move _777);
        switchInt(move _776) -> [0: bb300, otherwise: bb299];
    }

    bb299: {
        _778 = core::panicking::AssertKind::Eq;
        _780 = Option::<Arguments<'_>>::None;
        _779 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _778, _774, _775, move _780) -> unwind continue;
    }

    bb300: {
        _785 = Wrapping::<i8>(const 42_i8);
        _786 = Wrapping::<i8>(const 38_i8);
        _784 = <Wrapping<i8> as BitAnd>::bitand(move _785, move _786) -> [return: bb301, unwind continue];
    }

    bb301: {
        _783 = test::black_box::<Wrapping<i8>>(move _784) -> [return: bb302, unwind continue];
    }

    bb302: {
        _782 = &_783;
        _920 = const _;
        _781 = (move _782, _920);
        _787 = (_781.0: &std::num::Wrapping<i8>);
        _788 = (_781.1: &std::num::Wrapping<i8>);
        _790 = <Wrapping<i8> as PartialEq>::eq(_787, _788) -> [return: bb303, unwind continue];
    }

    bb303: {
        _789 = Not(move _790);
        switchInt(move _789) -> [0: bb305, otherwise: bb304];
    }

    bb304: {
        _791 = core::panicking::AssertKind::Eq;
        _793 = Option::<Arguments<'_>>::None;
        _792 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _791, _787, _788, move _793) -> unwind continue;
    }

    bb305: {
        _798 = Wrapping::<i16>(const 42_i16);
        _799 = Wrapping::<i16>(const 38_i16);
        _797 = <Wrapping<i16> as BitAnd>::bitand(move _798, move _799) -> [return: bb306, unwind continue];
    }

    bb306: {
        _796 = test::black_box::<Wrapping<i16>>(move _797) -> [return: bb307, unwind continue];
    }

    bb307: {
        _795 = &_796;
        _919 = const _;
        _794 = (move _795, _919);
        _800 = (_794.0: &std::num::Wrapping<i16>);
        _801 = (_794.1: &std::num::Wrapping<i16>);
        _803 = <Wrapping<i16> as PartialEq>::eq(_800, _801) -> [return: bb308, unwind continue];
    }

    bb308: {
        _802 = Not(move _803);
        switchInt(move _802) -> [0: bb310, otherwise: bb309];
    }

    bb309: {
        _804 = core::panicking::AssertKind::Eq;
        _806 = Option::<Arguments<'_>>::None;
        _805 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _804, _800, _801, move _806) -> unwind continue;
    }

    bb310: {
        _811 = Wrapping::<i32>(const 42_i32);
        _812 = Wrapping::<i32>(const 38_i32);
        _810 = <Wrapping<i32> as BitAnd>::bitand(move _811, move _812) -> [return: bb311, unwind continue];
    }

    bb311: {
        _809 = test::black_box::<Wrapping<i32>>(move _810) -> [return: bb312, unwind continue];
    }

    bb312: {
        _808 = &_809;
        _918 = const _;
        _807 = (move _808, _918);
        _813 = (_807.0: &std::num::Wrapping<i32>);
        _814 = (_807.1: &std::num::Wrapping<i32>);
        _816 = <Wrapping<i32> as PartialEq>::eq(_813, _814) -> [return: bb313, unwind continue];
    }

    bb313: {
        _815 = Not(move _816);
        switchInt(move _815) -> [0: bb315, otherwise: bb314];
    }

    bb314: {
        _817 = core::panicking::AssertKind::Eq;
        _819 = Option::<Arguments<'_>>::None;
        _818 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _817, _813, _814, move _819) -> unwind continue;
    }

    bb315: {
        _824 = Wrapping::<i64>(const 42_i64);
        _825 = Wrapping::<i64>(const 38_i64);
        _823 = <Wrapping<i64> as BitAnd>::bitand(move _824, move _825) -> [return: bb316, unwind continue];
    }

    bb316: {
        _822 = test::black_box::<Wrapping<i64>>(move _823) -> [return: bb317, unwind continue];
    }

    bb317: {
        _821 = &_822;
        _917 = const _;
        _820 = (move _821, _917);
        _826 = (_820.0: &std::num::Wrapping<i64>);
        _827 = (_820.1: &std::num::Wrapping<i64>);
        _829 = <Wrapping<i64> as PartialEq>::eq(_826, _827) -> [return: bb318, unwind continue];
    }

    bb318: {
        _828 = Not(move _829);
        switchInt(move _828) -> [0: bb320, otherwise: bb319];
    }

    bb319: {
        _830 = core::panicking::AssertKind::Eq;
        _832 = Option::<Arguments<'_>>::None;
        _831 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _830, _826, _827, move _832) -> unwind continue;
    }

    bb320: {
        _837 = Wrapping::<isize>(const 42_isize);
        _838 = Wrapping::<isize>(const 38_isize);
        _836 = <Wrapping<isize> as BitAnd>::bitand(move _837, move _838) -> [return: bb321, unwind continue];
    }

    bb321: {
        _835 = test::black_box::<Wrapping<isize>>(move _836) -> [return: bb322, unwind continue];
    }

    bb322: {
        _834 = &_835;
        _916 = const _;
        _833 = (move _834, _916);
        _839 = (_833.0: &std::num::Wrapping<isize>);
        _840 = (_833.1: &std::num::Wrapping<isize>);
        _842 = <Wrapping<isize> as PartialEq>::eq(_839, _840) -> [return: bb323, unwind continue];
    }

    bb323: {
        _841 = Not(move _842);
        switchInt(move _841) -> [0: bb325, otherwise: bb324];
    }

    bb324: {
        _843 = core::panicking::AssertKind::Eq;
        _845 = Option::<Arguments<'_>>::None;
        _844 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _843, _839, _840, move _845) -> unwind continue;
    }

    bb325: {
        _850 = Wrapping::<u8>(const 42_u8);
        _851 = Wrapping::<u8>(const 38_u8);
        _849 = <Wrapping<u8> as BitAnd>::bitand(move _850, move _851) -> [return: bb326, unwind continue];
    }

    bb326: {
        _848 = test::black_box::<Wrapping<u8>>(move _849) -> [return: bb327, unwind continue];
    }

    bb327: {
        _847 = &_848;
        _915 = const _;
        _846 = (move _847, _915);
        _852 = (_846.0: &std::num::Wrapping<u8>);
        _853 = (_846.1: &std::num::Wrapping<u8>);
        _855 = <Wrapping<u8> as PartialEq>::eq(_852, _853) -> [return: bb328, unwind continue];
    }

    bb328: {
        _854 = Not(move _855);
        switchInt(move _854) -> [0: bb330, otherwise: bb329];
    }

    bb329: {
        _856 = core::panicking::AssertKind::Eq;
        _858 = Option::<Arguments<'_>>::None;
        _857 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _856, _852, _853, move _858) -> unwind continue;
    }

    bb330: {
        _863 = Wrapping::<u16>(const 42_u16);
        _864 = Wrapping::<u16>(const 38_u16);
        _862 = <Wrapping<u16> as BitAnd>::bitand(move _863, move _864) -> [return: bb331, unwind continue];
    }

    bb331: {
        _861 = test::black_box::<Wrapping<u16>>(move _862) -> [return: bb332, unwind continue];
    }

    bb332: {
        _860 = &_861;
        _914 = const _;
        _859 = (move _860, _914);
        _865 = (_859.0: &std::num::Wrapping<u16>);
        _866 = (_859.1: &std::num::Wrapping<u16>);
        _868 = <Wrapping<u16> as PartialEq>::eq(_865, _866) -> [return: bb333, unwind continue];
    }

    bb333: {
        _867 = Not(move _868);
        switchInt(move _867) -> [0: bb335, otherwise: bb334];
    }

    bb334: {
        _869 = core::panicking::AssertKind::Eq;
        _871 = Option::<Arguments<'_>>::None;
        _870 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _869, _865, _866, move _871) -> unwind continue;
    }

    bb335: {
        _876 = Wrapping::<u32>(const 42_u32);
        _877 = Wrapping::<u32>(const 38_u32);
        _875 = <Wrapping<u32> as BitAnd>::bitand(move _876, move _877) -> [return: bb336, unwind continue];
    }

    bb336: {
        _874 = test::black_box::<Wrapping<u32>>(move _875) -> [return: bb337, unwind continue];
    }

    bb337: {
        _873 = &_874;
        _913 = const _;
        _872 = (move _873, _913);
        _878 = (_872.0: &std::num::Wrapping<u32>);
        _879 = (_872.1: &std::num::Wrapping<u32>);
        _881 = <Wrapping<u32> as PartialEq>::eq(_878, _879) -> [return: bb338, unwind continue];
    }

    bb338: {
        _880 = Not(move _881);
        switchInt(move _880) -> [0: bb340, otherwise: bb339];
    }

    bb339: {
        _882 = core::panicking::AssertKind::Eq;
        _884 = Option::<Arguments<'_>>::None;
        _883 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _882, _878, _879, move _884) -> unwind continue;
    }

    bb340: {
        _889 = Wrapping::<u64>(const 42_u64);
        _890 = Wrapping::<u64>(const 38_u64);
        _888 = <Wrapping<u64> as BitAnd>::bitand(move _889, move _890) -> [return: bb341, unwind continue];
    }

    bb341: {
        _887 = test::black_box::<Wrapping<u64>>(move _888) -> [return: bb342, unwind continue];
    }

    bb342: {
        _886 = &_887;
        _912 = const _;
        _885 = (move _886, _912);
        _891 = (_885.0: &std::num::Wrapping<u64>);
        _892 = (_885.1: &std::num::Wrapping<u64>);
        _894 = <Wrapping<u64> as PartialEq>::eq(_891, _892) -> [return: bb343, unwind continue];
    }

    bb343: {
        _893 = Not(move _894);
        switchInt(move _893) -> [0: bb345, otherwise: bb344];
    }

    bb344: {
        _895 = core::panicking::AssertKind::Eq;
        _897 = Option::<Arguments<'_>>::None;
        _896 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _895, _891, _892, move _897) -> unwind continue;
    }

    bb345: {
        _902 = Wrapping::<usize>(const 42_usize);
        _903 = Wrapping::<usize>(const 38_usize);
        _901 = <Wrapping<usize> as BitAnd>::bitand(move _902, move _903) -> [return: bb346, unwind continue];
    }

    bb346: {
        _900 = test::black_box::<Wrapping<usize>>(move _901) -> [return: bb347, unwind continue];
    }

    bb347: {
        _899 = &_900;
        _911 = const _;
        _898 = (move _899, _911);
        _904 = (_898.0: &std::num::Wrapping<usize>);
        _905 = (_898.1: &std::num::Wrapping<usize>);
        _907 = <Wrapping<usize> as PartialEq>::eq(_904, _905) -> [return: bb348, unwind continue];
    }

    bb348: {
        _906 = Not(move _907);
        switchInt(move _906) -> [0: bb350, otherwise: bb349];
    }

    bb349: {
        _908 = core::panicking::AssertKind::Eq;
        _910 = Option::<Arguments<'_>>::None;
        _909 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _908, _904, _905, move _910) -> unwind continue;
    }

    bb350: {
        return;
    }
}

promoted[0] in test_ops: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const 34_usize);
        _0 = &_1;
        return;
    }
}

promoted[1] in test_ops: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const 34_u64);
        _0 = &_1;
        return;
    }
}

promoted[2] in test_ops: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const 34_u32);
        _0 = &_1;
        return;
    }
}

promoted[3] in test_ops: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const 34_u16);
        _0 = &_1;
        return;
    }
}

promoted[4] in test_ops: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const 34_u8);
        _0 = &_1;
        return;
    }
}

promoted[5] in test_ops: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const 34_isize);
        _0 = &_1;
        return;
    }
}

promoted[6] in test_ops: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const 34_i64);
        _0 = &_1;
        return;
    }
}

promoted[7] in test_ops: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const 34_i32);
        _0 = &_1;
        return;
    }
}

promoted[8] in test_ops: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const 34_i16);
        _0 = &_1;
        return;
    }
}

promoted[9] in test_ops: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const 34_i8);
        _0 = &_1;
        return;
    }
}

promoted[10] in test_ops: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const 46_usize);
        _0 = &_1;
        return;
    }
}

promoted[11] in test_ops: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const 46_u64);
        _0 = &_1;
        return;
    }
}

promoted[12] in test_ops: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const 46_u32);
        _0 = &_1;
        return;
    }
}

promoted[13] in test_ops: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const 46_u16);
        _0 = &_1;
        return;
    }
}

promoted[14] in test_ops: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const 46_u8);
        _0 = &_1;
        return;
    }
}

promoted[15] in test_ops: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const 46_isize);
        _0 = &_1;
        return;
    }
}

promoted[16] in test_ops: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const 46_i64);
        _0 = &_1;
        return;
    }
}

promoted[17] in test_ops: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const 46_i32);
        _0 = &_1;
        return;
    }
}

promoted[18] in test_ops: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const 46_i16);
        _0 = &_1;
        return;
    }
}

promoted[19] in test_ops: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const 46_i8);
        _0 = &_1;
        return;
    }
}

promoted[20] in test_ops: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const 12_usize);
        _0 = &_1;
        return;
    }
}

promoted[21] in test_ops: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const 12_u64);
        _0 = &_1;
        return;
    }
}

promoted[22] in test_ops: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const 12_u32);
        _0 = &_1;
        return;
    }
}

promoted[23] in test_ops: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const 12_u16);
        _0 = &_1;
        return;
    }
}

promoted[24] in test_ops: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const 12_u8);
        _0 = &_1;
        return;
    }
}

promoted[25] in test_ops: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const 12_isize);
        _0 = &_1;
        return;
    }
}

promoted[26] in test_ops: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const 12_i64);
        _0 = &_1;
        return;
    }
}

promoted[27] in test_ops: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const 12_i32);
        _0 = &_1;
        return;
    }
}

promoted[28] in test_ops: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const 12_i16);
        _0 = &_1;
        return;
    }
}

promoted[29] in test_ops: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const 12_i8);
        _0 = &_1;
        return;
    }
}

promoted[30] in test_ops: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const 0_isize);
        _0 = &_1;
        return;
    }
}

promoted[31] in test_ops: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const 0_i64);
        _0 = &_1;
        return;
    }
}

promoted[32] in test_ops: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const 0_i32);
        _0 = &_1;
        return;
    }
}

promoted[33] in test_ops: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const 0_i16);
        _0 = &_1;
        return;
    }
}

promoted[34] in test_ops: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const 0_i8);
        _0 = &_1;
        return;
    }
}

promoted[35] in test_ops: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const _);
        _0 = &_1;
        return;
    }
}

promoted[36] in test_ops: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const _);
        _0 = &_1;
        return;
    }
}

promoted[37] in test_ops: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const _);
        _0 = &_1;
        return;
    }
}

promoted[38] in test_ops: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const _);
        _0 = &_1;
        return;
    }
}

promoted[39] in test_ops: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const _);
        _0 = &_1;
        return;
    }
}

promoted[40] in test_ops: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;
    let mut _2: usize;

    bb0: {
        _2 = Sub(const _, const 1_usize);
        _1 = Wrapping::<usize>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[41] in test_ops: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;
    let mut _2: u64;

    bb0: {
        _2 = Sub(const _, const 1_u64);
        _1 = Wrapping::<u64>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[42] in test_ops: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;
    let mut _2: u32;

    bb0: {
        _2 = Sub(const _, const 1_u32);
        _1 = Wrapping::<u32>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[43] in test_ops: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;
    let mut _2: u16;

    bb0: {
        _2 = Sub(const _, const 1_u16);
        _1 = Wrapping::<u16>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[44] in test_ops: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;
    let mut _2: u8;

    bb0: {
        _2 = Sub(const _, const 1_u8);
        _1 = Wrapping::<u8>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[45] in test_ops: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const -2_isize);
        _0 = &_1;
        return;
    }
}

promoted[46] in test_ops: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const -2_i64);
        _0 = &_1;
        return;
    }
}

promoted[47] in test_ops: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const -2_i32);
        _0 = &_1;
        return;
    }
}

promoted[48] in test_ops: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const -2_i16);
        _0 = &_1;
        return;
    }
}

promoted[49] in test_ops: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const -2_i8);
        _0 = &_1;
        return;
    }
}

promoted[50] in test_ops: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const _);
        _0 = &_1;
        return;
    }
}

promoted[51] in test_ops: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const _);
        _0 = &_1;
        return;
    }
}

promoted[52] in test_ops: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const _);
        _0 = &_1;
        return;
    }
}

promoted[53] in test_ops: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const _);
        _0 = &_1;
        return;
    }
}

promoted[54] in test_ops: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const _);
        _0 = &_1;
        return;
    }
}

promoted[55] in test_ops: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const _);
        _0 = &_1;
        return;
    }
}

promoted[56] in test_ops: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const _);
        _0 = &_1;
        return;
    }
}

promoted[57] in test_ops: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const _);
        _0 = &_1;
        return;
    }
}

promoted[58] in test_ops: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const _);
        _0 = &_1;
        return;
    }
}

promoted[59] in test_ops: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const _);
        _0 = &_1;
        return;
    }
}

promoted[60] in test_ops: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const 0_usize);
        _0 = &_1;
        return;
    }
}

promoted[61] in test_ops: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const 0_u64);
        _0 = &_1;
        return;
    }
}

promoted[62] in test_ops: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const 0_u32);
        _0 = &_1;
        return;
    }
}

promoted[63] in test_ops: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const 0_u16);
        _0 = &_1;
        return;
    }
}

promoted[64] in test_ops: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const 0_u8);
        _0 = &_1;
        return;
    }
}

promoted[65] in test_ops: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const _);
        _0 = &_1;
        return;
    }
}

promoted[66] in test_ops: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const _);
        _0 = &_1;
        return;
    }
}

promoted[67] in test_ops: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const _);
        _0 = &_1;
        return;
    }
}

promoted[68] in test_ops: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const _);
        _0 = &_1;
        return;
    }
}

promoted[69] in test_ops: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const _);
        _0 = &_1;
        return;
    }
}

fn test_op_assigns() -> () {
    let mut _0: ();
    let mut _1: std::num::Wrapping<i8>;
    let mut _2: std::num::Wrapping<i8>;
    let mut _3: std::num::Wrapping<i8>;
    let _4: ();
    let mut _5: &mut std::num::Wrapping<i8>;
    let mut _6: std::num::Wrapping<i8>;
    let mut _7: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _8: &std::num::Wrapping<i8>;
    let _9: std::num::Wrapping<i8>;
    let mut _10: std::num::Wrapping<i8>;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: std::num::Wrapping<i8>;
    let mut _19: std::num::Wrapping<i8>;
    let mut _20: std::num::Wrapping<i8>;
    let _21: ();
    let mut _22: &mut std::num::Wrapping<i8>;
    let mut _23: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _24: &std::num::Wrapping<i8>;
    let _25: std::num::Wrapping<i8>;
    let mut _26: std::num::Wrapping<i8>;
    let mut _29: bool;
    let mut _30: bool;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: std::num::Wrapping<i16>;
    let mut _35: std::num::Wrapping<i16>;
    let mut _36: std::num::Wrapping<i16>;
    let _37: ();
    let mut _38: &mut std::num::Wrapping<i16>;
    let mut _39: std::num::Wrapping<i16>;
    let mut _40: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _41: &std::num::Wrapping<i16>;
    let _42: std::num::Wrapping<i16>;
    let mut _43: std::num::Wrapping<i16>;
    let mut _46: bool;
    let mut _47: bool;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: std::num::Wrapping<i16>;
    let mut _52: std::num::Wrapping<i16>;
    let mut _53: std::num::Wrapping<i16>;
    let _54: ();
    let mut _55: &mut std::num::Wrapping<i16>;
    let mut _56: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _57: &std::num::Wrapping<i16>;
    let _58: std::num::Wrapping<i16>;
    let mut _59: std::num::Wrapping<i16>;
    let mut _62: bool;
    let mut _63: bool;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: std::num::Wrapping<i32>;
    let mut _68: std::num::Wrapping<i32>;
    let mut _69: std::num::Wrapping<i32>;
    let _70: ();
    let mut _71: &mut std::num::Wrapping<i32>;
    let mut _72: std::num::Wrapping<i32>;
    let mut _73: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _74: &std::num::Wrapping<i32>;
    let _75: std::num::Wrapping<i32>;
    let mut _76: std::num::Wrapping<i32>;
    let mut _79: bool;
    let mut _80: bool;
    let _82: !;
    let mut _83: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _84: std::num::Wrapping<i32>;
    let mut _85: std::num::Wrapping<i32>;
    let mut _86: std::num::Wrapping<i32>;
    let _87: ();
    let mut _88: &mut std::num::Wrapping<i32>;
    let mut _89: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _90: &std::num::Wrapping<i32>;
    let _91: std::num::Wrapping<i32>;
    let mut _92: std::num::Wrapping<i32>;
    let mut _95: bool;
    let mut _96: bool;
    let _98: !;
    let mut _99: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _100: std::num::Wrapping<i64>;
    let mut _101: std::num::Wrapping<i64>;
    let mut _102: std::num::Wrapping<i64>;
    let _103: ();
    let mut _104: &mut std::num::Wrapping<i64>;
    let mut _105: std::num::Wrapping<i64>;
    let mut _106: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _107: &std::num::Wrapping<i64>;
    let _108: std::num::Wrapping<i64>;
    let mut _109: std::num::Wrapping<i64>;
    let mut _112: bool;
    let mut _113: bool;
    let _115: !;
    let mut _116: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _117: std::num::Wrapping<i64>;
    let mut _118: std::num::Wrapping<i64>;
    let mut _119: std::num::Wrapping<i64>;
    let _120: ();
    let mut _121: &mut std::num::Wrapping<i64>;
    let mut _122: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _123: &std::num::Wrapping<i64>;
    let _124: std::num::Wrapping<i64>;
    let mut _125: std::num::Wrapping<i64>;
    let mut _128: bool;
    let mut _129: bool;
    let _131: !;
    let mut _132: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _133: std::num::Wrapping<isize>;
    let mut _134: std::num::Wrapping<isize>;
    let mut _135: std::num::Wrapping<isize>;
    let _136: ();
    let mut _137: &mut std::num::Wrapping<isize>;
    let mut _138: std::num::Wrapping<isize>;
    let mut _139: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _140: &std::num::Wrapping<isize>;
    let _141: std::num::Wrapping<isize>;
    let mut _142: std::num::Wrapping<isize>;
    let mut _145: bool;
    let mut _146: bool;
    let _148: !;
    let mut _149: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _150: std::num::Wrapping<isize>;
    let mut _151: std::num::Wrapping<isize>;
    let mut _152: std::num::Wrapping<isize>;
    let _153: ();
    let mut _154: &mut std::num::Wrapping<isize>;
    let mut _155: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _156: &std::num::Wrapping<isize>;
    let _157: std::num::Wrapping<isize>;
    let mut _158: std::num::Wrapping<isize>;
    let mut _161: bool;
    let mut _162: bool;
    let _164: !;
    let mut _165: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _166: std::num::Wrapping<u8>;
    let mut _167: std::num::Wrapping<u8>;
    let mut _168: std::num::Wrapping<u8>;
    let _169: ();
    let mut _170: &mut std::num::Wrapping<u8>;
    let mut _171: std::num::Wrapping<u8>;
    let mut _172: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _173: &std::num::Wrapping<u8>;
    let _174: std::num::Wrapping<u8>;
    let mut _175: std::num::Wrapping<u8>;
    let mut _178: bool;
    let mut _179: bool;
    let _181: !;
    let mut _182: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _183: std::num::Wrapping<u8>;
    let mut _184: std::num::Wrapping<u8>;
    let mut _185: std::num::Wrapping<u8>;
    let _186: ();
    let mut _187: &mut std::num::Wrapping<u8>;
    let mut _188: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _189: &std::num::Wrapping<u8>;
    let _190: std::num::Wrapping<u8>;
    let mut _191: std::num::Wrapping<u8>;
    let mut _194: bool;
    let mut _195: bool;
    let _197: !;
    let mut _198: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _199: std::num::Wrapping<u16>;
    let mut _200: std::num::Wrapping<u16>;
    let mut _201: std::num::Wrapping<u16>;
    let _202: ();
    let mut _203: &mut std::num::Wrapping<u16>;
    let mut _204: std::num::Wrapping<u16>;
    let mut _205: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _206: &std::num::Wrapping<u16>;
    let _207: std::num::Wrapping<u16>;
    let mut _208: std::num::Wrapping<u16>;
    let mut _211: bool;
    let mut _212: bool;
    let _214: !;
    let mut _215: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _216: std::num::Wrapping<u16>;
    let mut _217: std::num::Wrapping<u16>;
    let mut _218: std::num::Wrapping<u16>;
    let _219: ();
    let mut _220: &mut std::num::Wrapping<u16>;
    let mut _221: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _222: &std::num::Wrapping<u16>;
    let _223: std::num::Wrapping<u16>;
    let mut _224: std::num::Wrapping<u16>;
    let mut _227: bool;
    let mut _228: bool;
    let _230: !;
    let mut _231: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _232: std::num::Wrapping<u32>;
    let mut _233: std::num::Wrapping<u32>;
    let mut _234: std::num::Wrapping<u32>;
    let _235: ();
    let mut _236: &mut std::num::Wrapping<u32>;
    let mut _237: std::num::Wrapping<u32>;
    let mut _238: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _239: &std::num::Wrapping<u32>;
    let _240: std::num::Wrapping<u32>;
    let mut _241: std::num::Wrapping<u32>;
    let mut _244: bool;
    let mut _245: bool;
    let _247: !;
    let mut _248: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _249: std::num::Wrapping<u32>;
    let mut _250: std::num::Wrapping<u32>;
    let mut _251: std::num::Wrapping<u32>;
    let _252: ();
    let mut _253: &mut std::num::Wrapping<u32>;
    let mut _254: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _255: &std::num::Wrapping<u32>;
    let _256: std::num::Wrapping<u32>;
    let mut _257: std::num::Wrapping<u32>;
    let mut _260: bool;
    let mut _261: bool;
    let _263: !;
    let mut _264: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _265: std::num::Wrapping<u64>;
    let mut _266: std::num::Wrapping<u64>;
    let mut _267: std::num::Wrapping<u64>;
    let _268: ();
    let mut _269: &mut std::num::Wrapping<u64>;
    let mut _270: std::num::Wrapping<u64>;
    let mut _271: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _272: &std::num::Wrapping<u64>;
    let _273: std::num::Wrapping<u64>;
    let mut _274: std::num::Wrapping<u64>;
    let mut _277: bool;
    let mut _278: bool;
    let _280: !;
    let mut _281: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _282: std::num::Wrapping<u64>;
    let mut _283: std::num::Wrapping<u64>;
    let mut _284: std::num::Wrapping<u64>;
    let _285: ();
    let mut _286: &mut std::num::Wrapping<u64>;
    let mut _287: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _288: &std::num::Wrapping<u64>;
    let _289: std::num::Wrapping<u64>;
    let mut _290: std::num::Wrapping<u64>;
    let mut _293: bool;
    let mut _294: bool;
    let _296: !;
    let mut _297: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _298: std::num::Wrapping<usize>;
    let mut _299: std::num::Wrapping<usize>;
    let mut _300: std::num::Wrapping<usize>;
    let _301: ();
    let mut _302: &mut std::num::Wrapping<usize>;
    let mut _303: std::num::Wrapping<usize>;
    let mut _304: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _305: &std::num::Wrapping<usize>;
    let _306: std::num::Wrapping<usize>;
    let mut _307: std::num::Wrapping<usize>;
    let mut _310: bool;
    let mut _311: bool;
    let _313: !;
    let mut _314: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _315: std::num::Wrapping<usize>;
    let mut _316: std::num::Wrapping<usize>;
    let mut _317: std::num::Wrapping<usize>;
    let _318: ();
    let mut _319: &mut std::num::Wrapping<usize>;
    let mut _320: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _321: &std::num::Wrapping<usize>;
    let _322: std::num::Wrapping<usize>;
    let mut _323: std::num::Wrapping<usize>;
    let mut _326: bool;
    let mut _327: bool;
    let _329: !;
    let mut _330: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _331: std::num::Wrapping<i8>;
    let mut _332: std::num::Wrapping<i8>;
    let mut _333: std::num::Wrapping<i8>;
    let _334: ();
    let mut _335: &mut std::num::Wrapping<i8>;
    let mut _336: std::num::Wrapping<i8>;
    let mut _337: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _338: &std::num::Wrapping<i8>;
    let _339: std::num::Wrapping<i8>;
    let mut _340: std::num::Wrapping<i8>;
    let mut _343: bool;
    let mut _344: bool;
    let _346: !;
    let mut _347: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _348: std::num::Wrapping<i8>;
    let mut _349: std::num::Wrapping<i8>;
    let mut _350: std::num::Wrapping<i8>;
    let _351: ();
    let mut _352: &mut std::num::Wrapping<i8>;
    let mut _353: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _354: &std::num::Wrapping<i8>;
    let _355: std::num::Wrapping<i8>;
    let mut _356: std::num::Wrapping<i8>;
    let mut _359: bool;
    let mut _360: bool;
    let _362: !;
    let mut _363: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _364: std::num::Wrapping<i16>;
    let mut _365: std::num::Wrapping<i16>;
    let mut _366: std::num::Wrapping<i16>;
    let _367: ();
    let mut _368: &mut std::num::Wrapping<i16>;
    let mut _369: std::num::Wrapping<i16>;
    let mut _370: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _371: &std::num::Wrapping<i16>;
    let _372: std::num::Wrapping<i16>;
    let mut _373: std::num::Wrapping<i16>;
    let mut _376: bool;
    let mut _377: bool;
    let _379: !;
    let mut _380: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _381: std::num::Wrapping<i16>;
    let mut _382: std::num::Wrapping<i16>;
    let mut _383: std::num::Wrapping<i16>;
    let _384: ();
    let mut _385: &mut std::num::Wrapping<i16>;
    let mut _386: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _387: &std::num::Wrapping<i16>;
    let _388: std::num::Wrapping<i16>;
    let mut _389: std::num::Wrapping<i16>;
    let mut _392: bool;
    let mut _393: bool;
    let _395: !;
    let mut _396: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _397: std::num::Wrapping<i32>;
    let mut _398: std::num::Wrapping<i32>;
    let mut _399: std::num::Wrapping<i32>;
    let _400: ();
    let mut _401: &mut std::num::Wrapping<i32>;
    let mut _402: std::num::Wrapping<i32>;
    let mut _403: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _404: &std::num::Wrapping<i32>;
    let _405: std::num::Wrapping<i32>;
    let mut _406: std::num::Wrapping<i32>;
    let mut _409: bool;
    let mut _410: bool;
    let _412: !;
    let mut _413: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _414: std::num::Wrapping<i32>;
    let mut _415: std::num::Wrapping<i32>;
    let mut _416: std::num::Wrapping<i32>;
    let _417: ();
    let mut _418: &mut std::num::Wrapping<i32>;
    let mut _419: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _420: &std::num::Wrapping<i32>;
    let _421: std::num::Wrapping<i32>;
    let mut _422: std::num::Wrapping<i32>;
    let mut _425: bool;
    let mut _426: bool;
    let _428: !;
    let mut _429: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _430: std::num::Wrapping<i64>;
    let mut _431: std::num::Wrapping<i64>;
    let mut _432: std::num::Wrapping<i64>;
    let _433: ();
    let mut _434: &mut std::num::Wrapping<i64>;
    let mut _435: std::num::Wrapping<i64>;
    let mut _436: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _437: &std::num::Wrapping<i64>;
    let _438: std::num::Wrapping<i64>;
    let mut _439: std::num::Wrapping<i64>;
    let mut _442: bool;
    let mut _443: bool;
    let _445: !;
    let mut _446: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _447: std::num::Wrapping<i64>;
    let mut _448: std::num::Wrapping<i64>;
    let mut _449: std::num::Wrapping<i64>;
    let _450: ();
    let mut _451: &mut std::num::Wrapping<i64>;
    let mut _452: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _453: &std::num::Wrapping<i64>;
    let _454: std::num::Wrapping<i64>;
    let mut _455: std::num::Wrapping<i64>;
    let mut _458: bool;
    let mut _459: bool;
    let _461: !;
    let mut _462: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _463: std::num::Wrapping<isize>;
    let mut _464: std::num::Wrapping<isize>;
    let mut _465: std::num::Wrapping<isize>;
    let _466: ();
    let mut _467: &mut std::num::Wrapping<isize>;
    let mut _468: std::num::Wrapping<isize>;
    let mut _469: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _470: &std::num::Wrapping<isize>;
    let _471: std::num::Wrapping<isize>;
    let mut _472: std::num::Wrapping<isize>;
    let mut _475: bool;
    let mut _476: bool;
    let _478: !;
    let mut _479: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _480: std::num::Wrapping<isize>;
    let mut _481: std::num::Wrapping<isize>;
    let mut _482: std::num::Wrapping<isize>;
    let _483: ();
    let mut _484: &mut std::num::Wrapping<isize>;
    let mut _485: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _486: &std::num::Wrapping<isize>;
    let _487: std::num::Wrapping<isize>;
    let mut _488: std::num::Wrapping<isize>;
    let mut _491: bool;
    let mut _492: bool;
    let _494: !;
    let mut _495: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _496: std::num::Wrapping<u8>;
    let mut _497: std::num::Wrapping<u8>;
    let mut _498: std::num::Wrapping<u8>;
    let _499: ();
    let mut _500: &mut std::num::Wrapping<u8>;
    let mut _501: std::num::Wrapping<u8>;
    let mut _502: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _503: &std::num::Wrapping<u8>;
    let _504: std::num::Wrapping<u8>;
    let mut _505: std::num::Wrapping<u8>;
    let mut _508: bool;
    let mut _509: bool;
    let _511: !;
    let mut _512: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _513: std::num::Wrapping<u8>;
    let mut _514: std::num::Wrapping<u8>;
    let mut _515: std::num::Wrapping<u8>;
    let _516: ();
    let mut _517: &mut std::num::Wrapping<u8>;
    let mut _518: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _519: &std::num::Wrapping<u8>;
    let _520: std::num::Wrapping<u8>;
    let mut _521: std::num::Wrapping<u8>;
    let mut _524: bool;
    let mut _525: bool;
    let _527: !;
    let mut _528: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _529: std::num::Wrapping<u16>;
    let mut _530: std::num::Wrapping<u16>;
    let mut _531: std::num::Wrapping<u16>;
    let _532: ();
    let mut _533: &mut std::num::Wrapping<u16>;
    let mut _534: std::num::Wrapping<u16>;
    let mut _535: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _536: &std::num::Wrapping<u16>;
    let _537: std::num::Wrapping<u16>;
    let mut _538: std::num::Wrapping<u16>;
    let mut _541: bool;
    let mut _542: bool;
    let _544: !;
    let mut _545: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _546: std::num::Wrapping<u16>;
    let mut _547: std::num::Wrapping<u16>;
    let mut _548: std::num::Wrapping<u16>;
    let _549: ();
    let mut _550: &mut std::num::Wrapping<u16>;
    let mut _551: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _552: &std::num::Wrapping<u16>;
    let _553: std::num::Wrapping<u16>;
    let mut _554: std::num::Wrapping<u16>;
    let mut _557: bool;
    let mut _558: bool;
    let _560: !;
    let mut _561: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _562: std::num::Wrapping<u32>;
    let mut _563: std::num::Wrapping<u32>;
    let mut _564: std::num::Wrapping<u32>;
    let _565: ();
    let mut _566: &mut std::num::Wrapping<u32>;
    let mut _567: std::num::Wrapping<u32>;
    let mut _568: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _569: &std::num::Wrapping<u32>;
    let _570: std::num::Wrapping<u32>;
    let mut _571: std::num::Wrapping<u32>;
    let mut _574: bool;
    let mut _575: bool;
    let _577: !;
    let mut _578: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _579: std::num::Wrapping<u32>;
    let mut _580: std::num::Wrapping<u32>;
    let mut _581: std::num::Wrapping<u32>;
    let _582: ();
    let mut _583: &mut std::num::Wrapping<u32>;
    let mut _584: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _585: &std::num::Wrapping<u32>;
    let _586: std::num::Wrapping<u32>;
    let mut _587: std::num::Wrapping<u32>;
    let mut _590: bool;
    let mut _591: bool;
    let _593: !;
    let mut _594: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _595: std::num::Wrapping<u64>;
    let mut _596: std::num::Wrapping<u64>;
    let mut _597: std::num::Wrapping<u64>;
    let _598: ();
    let mut _599: &mut std::num::Wrapping<u64>;
    let mut _600: std::num::Wrapping<u64>;
    let mut _601: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _602: &std::num::Wrapping<u64>;
    let _603: std::num::Wrapping<u64>;
    let mut _604: std::num::Wrapping<u64>;
    let mut _607: bool;
    let mut _608: bool;
    let _610: !;
    let mut _611: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _612: std::num::Wrapping<u64>;
    let mut _613: std::num::Wrapping<u64>;
    let mut _614: std::num::Wrapping<u64>;
    let _615: ();
    let mut _616: &mut std::num::Wrapping<u64>;
    let mut _617: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _618: &std::num::Wrapping<u64>;
    let _619: std::num::Wrapping<u64>;
    let mut _620: std::num::Wrapping<u64>;
    let mut _623: bool;
    let mut _624: bool;
    let _626: !;
    let mut _627: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _628: std::num::Wrapping<usize>;
    let mut _629: std::num::Wrapping<usize>;
    let mut _630: std::num::Wrapping<usize>;
    let _631: ();
    let mut _632: &mut std::num::Wrapping<usize>;
    let mut _633: std::num::Wrapping<usize>;
    let mut _634: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _635: &std::num::Wrapping<usize>;
    let _636: std::num::Wrapping<usize>;
    let mut _637: std::num::Wrapping<usize>;
    let mut _640: bool;
    let mut _641: bool;
    let _643: !;
    let mut _644: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _645: std::num::Wrapping<usize>;
    let mut _646: std::num::Wrapping<usize>;
    let mut _647: std::num::Wrapping<usize>;
    let _648: ();
    let mut _649: &mut std::num::Wrapping<usize>;
    let mut _650: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _651: &std::num::Wrapping<usize>;
    let _652: std::num::Wrapping<usize>;
    let mut _653: std::num::Wrapping<usize>;
    let mut _656: bool;
    let mut _657: bool;
    let _659: !;
    let mut _660: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _661: std::num::Wrapping<i8>;
    let mut _662: std::num::Wrapping<i8>;
    let mut _663: std::num::Wrapping<i8>;
    let _664: ();
    let mut _665: &mut std::num::Wrapping<i8>;
    let mut _666: std::num::Wrapping<i8>;
    let mut _667: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _668: &std::num::Wrapping<i8>;
    let _669: std::num::Wrapping<i8>;
    let mut _670: std::num::Wrapping<i8>;
    let mut _673: bool;
    let mut _674: bool;
    let _676: !;
    let mut _677: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _678: std::num::Wrapping<i8>;
    let mut _679: std::num::Wrapping<i8>;
    let mut _680: std::num::Wrapping<i8>;
    let _681: ();
    let mut _682: &mut std::num::Wrapping<i8>;
    let mut _683: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _684: &std::num::Wrapping<i8>;
    let _685: std::num::Wrapping<i8>;
    let mut _686: std::num::Wrapping<i8>;
    let mut _689: bool;
    let mut _690: bool;
    let _692: !;
    let mut _693: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _694: std::num::Wrapping<i16>;
    let mut _695: std::num::Wrapping<i16>;
    let mut _696: std::num::Wrapping<i16>;
    let _697: ();
    let mut _698: &mut std::num::Wrapping<i16>;
    let mut _699: std::num::Wrapping<i16>;
    let mut _700: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _701: &std::num::Wrapping<i16>;
    let _702: std::num::Wrapping<i16>;
    let mut _703: std::num::Wrapping<i16>;
    let mut _706: bool;
    let mut _707: bool;
    let _709: !;
    let mut _710: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _711: std::num::Wrapping<i16>;
    let mut _712: std::num::Wrapping<i16>;
    let mut _713: std::num::Wrapping<i16>;
    let _714: ();
    let mut _715: &mut std::num::Wrapping<i16>;
    let mut _716: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _717: &std::num::Wrapping<i16>;
    let _718: std::num::Wrapping<i16>;
    let mut _719: std::num::Wrapping<i16>;
    let mut _722: bool;
    let mut _723: bool;
    let _725: !;
    let mut _726: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _727: std::num::Wrapping<i32>;
    let mut _728: std::num::Wrapping<i32>;
    let mut _729: std::num::Wrapping<i32>;
    let _730: ();
    let mut _731: &mut std::num::Wrapping<i32>;
    let mut _732: std::num::Wrapping<i32>;
    let mut _733: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _734: &std::num::Wrapping<i32>;
    let _735: std::num::Wrapping<i32>;
    let mut _736: std::num::Wrapping<i32>;
    let mut _739: bool;
    let mut _740: bool;
    let _742: !;
    let mut _743: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _744: std::num::Wrapping<i32>;
    let mut _745: std::num::Wrapping<i32>;
    let mut _746: std::num::Wrapping<i32>;
    let _747: ();
    let mut _748: &mut std::num::Wrapping<i32>;
    let mut _749: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _750: &std::num::Wrapping<i32>;
    let _751: std::num::Wrapping<i32>;
    let mut _752: std::num::Wrapping<i32>;
    let mut _755: bool;
    let mut _756: bool;
    let _758: !;
    let mut _759: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _760: std::num::Wrapping<i64>;
    let mut _761: std::num::Wrapping<i64>;
    let mut _762: std::num::Wrapping<i64>;
    let _763: ();
    let mut _764: &mut std::num::Wrapping<i64>;
    let mut _765: std::num::Wrapping<i64>;
    let mut _766: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _767: &std::num::Wrapping<i64>;
    let _768: std::num::Wrapping<i64>;
    let mut _769: std::num::Wrapping<i64>;
    let mut _772: bool;
    let mut _773: bool;
    let _775: !;
    let mut _776: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _777: std::num::Wrapping<i64>;
    let mut _778: std::num::Wrapping<i64>;
    let mut _779: std::num::Wrapping<i64>;
    let _780: ();
    let mut _781: &mut std::num::Wrapping<i64>;
    let mut _782: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _783: &std::num::Wrapping<i64>;
    let _784: std::num::Wrapping<i64>;
    let mut _785: std::num::Wrapping<i64>;
    let mut _788: bool;
    let mut _789: bool;
    let _791: !;
    let mut _792: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _793: std::num::Wrapping<isize>;
    let mut _794: std::num::Wrapping<isize>;
    let mut _795: std::num::Wrapping<isize>;
    let _796: ();
    let mut _797: &mut std::num::Wrapping<isize>;
    let mut _798: std::num::Wrapping<isize>;
    let mut _799: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _800: &std::num::Wrapping<isize>;
    let _801: std::num::Wrapping<isize>;
    let mut _802: std::num::Wrapping<isize>;
    let mut _805: bool;
    let mut _806: bool;
    let _808: !;
    let mut _809: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _810: std::num::Wrapping<isize>;
    let mut _811: std::num::Wrapping<isize>;
    let mut _812: std::num::Wrapping<isize>;
    let _813: ();
    let mut _814: &mut std::num::Wrapping<isize>;
    let mut _815: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _816: &std::num::Wrapping<isize>;
    let _817: std::num::Wrapping<isize>;
    let mut _818: std::num::Wrapping<isize>;
    let mut _821: bool;
    let mut _822: bool;
    let _824: !;
    let mut _825: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _826: std::num::Wrapping<u8>;
    let mut _827: std::num::Wrapping<u8>;
    let mut _828: std::num::Wrapping<u8>;
    let _829: ();
    let mut _830: &mut std::num::Wrapping<u8>;
    let mut _831: std::num::Wrapping<u8>;
    let mut _832: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _833: &std::num::Wrapping<u8>;
    let _834: std::num::Wrapping<u8>;
    let mut _835: std::num::Wrapping<u8>;
    let mut _838: bool;
    let mut _839: bool;
    let _841: !;
    let mut _842: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _843: std::num::Wrapping<u8>;
    let mut _844: std::num::Wrapping<u8>;
    let mut _845: std::num::Wrapping<u8>;
    let _846: ();
    let mut _847: &mut std::num::Wrapping<u8>;
    let mut _848: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _849: &std::num::Wrapping<u8>;
    let _850: std::num::Wrapping<u8>;
    let mut _851: std::num::Wrapping<u8>;
    let mut _854: bool;
    let mut _855: bool;
    let _857: !;
    let mut _858: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _859: std::num::Wrapping<u16>;
    let mut _860: std::num::Wrapping<u16>;
    let mut _861: std::num::Wrapping<u16>;
    let _862: ();
    let mut _863: &mut std::num::Wrapping<u16>;
    let mut _864: std::num::Wrapping<u16>;
    let mut _865: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _866: &std::num::Wrapping<u16>;
    let _867: std::num::Wrapping<u16>;
    let mut _868: std::num::Wrapping<u16>;
    let mut _871: bool;
    let mut _872: bool;
    let _874: !;
    let mut _875: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _876: std::num::Wrapping<u16>;
    let mut _877: std::num::Wrapping<u16>;
    let mut _878: std::num::Wrapping<u16>;
    let _879: ();
    let mut _880: &mut std::num::Wrapping<u16>;
    let mut _881: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _882: &std::num::Wrapping<u16>;
    let _883: std::num::Wrapping<u16>;
    let mut _884: std::num::Wrapping<u16>;
    let mut _887: bool;
    let mut _888: bool;
    let _890: !;
    let mut _891: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _892: std::num::Wrapping<u32>;
    let mut _893: std::num::Wrapping<u32>;
    let mut _894: std::num::Wrapping<u32>;
    let _895: ();
    let mut _896: &mut std::num::Wrapping<u32>;
    let mut _897: std::num::Wrapping<u32>;
    let mut _898: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _899: &std::num::Wrapping<u32>;
    let _900: std::num::Wrapping<u32>;
    let mut _901: std::num::Wrapping<u32>;
    let mut _904: bool;
    let mut _905: bool;
    let _907: !;
    let mut _908: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _909: std::num::Wrapping<u32>;
    let mut _910: std::num::Wrapping<u32>;
    let mut _911: std::num::Wrapping<u32>;
    let _912: ();
    let mut _913: &mut std::num::Wrapping<u32>;
    let mut _914: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _915: &std::num::Wrapping<u32>;
    let _916: std::num::Wrapping<u32>;
    let mut _917: std::num::Wrapping<u32>;
    let mut _920: bool;
    let mut _921: bool;
    let _923: !;
    let mut _924: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _925: std::num::Wrapping<u64>;
    let mut _926: std::num::Wrapping<u64>;
    let mut _927: std::num::Wrapping<u64>;
    let _928: ();
    let mut _929: &mut std::num::Wrapping<u64>;
    let mut _930: std::num::Wrapping<u64>;
    let mut _931: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _932: &std::num::Wrapping<u64>;
    let _933: std::num::Wrapping<u64>;
    let mut _934: std::num::Wrapping<u64>;
    let mut _937: bool;
    let mut _938: bool;
    let _940: !;
    let mut _941: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _942: std::num::Wrapping<u64>;
    let mut _943: std::num::Wrapping<u64>;
    let mut _944: std::num::Wrapping<u64>;
    let _945: ();
    let mut _946: &mut std::num::Wrapping<u64>;
    let mut _947: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _948: &std::num::Wrapping<u64>;
    let _949: std::num::Wrapping<u64>;
    let mut _950: std::num::Wrapping<u64>;
    let mut _953: bool;
    let mut _954: bool;
    let _956: !;
    let mut _957: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _958: std::num::Wrapping<usize>;
    let mut _959: std::num::Wrapping<usize>;
    let mut _960: std::num::Wrapping<usize>;
    let _961: ();
    let mut _962: &mut std::num::Wrapping<usize>;
    let mut _963: std::num::Wrapping<usize>;
    let mut _964: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _965: &std::num::Wrapping<usize>;
    let _966: std::num::Wrapping<usize>;
    let mut _967: std::num::Wrapping<usize>;
    let mut _970: bool;
    let mut _971: bool;
    let _973: !;
    let mut _974: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _975: std::num::Wrapping<usize>;
    let mut _976: std::num::Wrapping<usize>;
    let mut _977: std::num::Wrapping<usize>;
    let _978: ();
    let mut _979: &mut std::num::Wrapping<usize>;
    let mut _980: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _981: &std::num::Wrapping<usize>;
    let _982: std::num::Wrapping<usize>;
    let mut _983: std::num::Wrapping<usize>;
    let mut _986: bool;
    let mut _987: bool;
    let _989: !;
    let mut _990: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _991: std::num::Wrapping<i8>;
    let mut _992: std::num::Wrapping<i8>;
    let mut _993: std::num::Wrapping<i8>;
    let _994: ();
    let mut _995: &mut std::num::Wrapping<i8>;
    let mut _996: std::num::Wrapping<i8>;
    let mut _997: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _998: &std::num::Wrapping<i8>;
    let _999: std::num::Wrapping<i8>;
    let mut _1000: std::num::Wrapping<i8>;
    let mut _1003: bool;
    let mut _1004: bool;
    let _1006: !;
    let mut _1007: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1008: std::num::Wrapping<i8>;
    let mut _1009: std::num::Wrapping<i8>;
    let mut _1010: std::num::Wrapping<i8>;
    let _1011: ();
    let mut _1012: &mut std::num::Wrapping<i8>;
    let mut _1013: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _1014: &std::num::Wrapping<i8>;
    let _1015: std::num::Wrapping<i8>;
    let mut _1016: std::num::Wrapping<i8>;
    let mut _1019: bool;
    let mut _1020: bool;
    let _1022: !;
    let mut _1023: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1024: std::num::Wrapping<i16>;
    let mut _1025: std::num::Wrapping<i16>;
    let mut _1026: std::num::Wrapping<i16>;
    let _1027: ();
    let mut _1028: &mut std::num::Wrapping<i16>;
    let mut _1029: std::num::Wrapping<i16>;
    let mut _1030: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _1031: &std::num::Wrapping<i16>;
    let _1032: std::num::Wrapping<i16>;
    let mut _1033: std::num::Wrapping<i16>;
    let mut _1036: bool;
    let mut _1037: bool;
    let _1039: !;
    let mut _1040: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1041: std::num::Wrapping<i16>;
    let mut _1042: std::num::Wrapping<i16>;
    let mut _1043: std::num::Wrapping<i16>;
    let _1044: ();
    let mut _1045: &mut std::num::Wrapping<i16>;
    let mut _1046: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _1047: &std::num::Wrapping<i16>;
    let _1048: std::num::Wrapping<i16>;
    let mut _1049: std::num::Wrapping<i16>;
    let mut _1052: bool;
    let mut _1053: bool;
    let _1055: !;
    let mut _1056: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1057: std::num::Wrapping<i32>;
    let mut _1058: std::num::Wrapping<i32>;
    let mut _1059: std::num::Wrapping<i32>;
    let _1060: ();
    let mut _1061: &mut std::num::Wrapping<i32>;
    let mut _1062: std::num::Wrapping<i32>;
    let mut _1063: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _1064: &std::num::Wrapping<i32>;
    let _1065: std::num::Wrapping<i32>;
    let mut _1066: std::num::Wrapping<i32>;
    let mut _1069: bool;
    let mut _1070: bool;
    let _1072: !;
    let mut _1073: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1074: std::num::Wrapping<i32>;
    let mut _1075: std::num::Wrapping<i32>;
    let mut _1076: std::num::Wrapping<i32>;
    let _1077: ();
    let mut _1078: &mut std::num::Wrapping<i32>;
    let mut _1079: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _1080: &std::num::Wrapping<i32>;
    let _1081: std::num::Wrapping<i32>;
    let mut _1082: std::num::Wrapping<i32>;
    let mut _1085: bool;
    let mut _1086: bool;
    let _1088: !;
    let mut _1089: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1090: std::num::Wrapping<i64>;
    let mut _1091: std::num::Wrapping<i64>;
    let mut _1092: std::num::Wrapping<i64>;
    let _1093: ();
    let mut _1094: &mut std::num::Wrapping<i64>;
    let mut _1095: std::num::Wrapping<i64>;
    let mut _1096: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _1097: &std::num::Wrapping<i64>;
    let _1098: std::num::Wrapping<i64>;
    let mut _1099: std::num::Wrapping<i64>;
    let mut _1102: bool;
    let mut _1103: bool;
    let _1105: !;
    let mut _1106: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1107: std::num::Wrapping<i64>;
    let mut _1108: std::num::Wrapping<i64>;
    let mut _1109: std::num::Wrapping<i64>;
    let _1110: ();
    let mut _1111: &mut std::num::Wrapping<i64>;
    let mut _1112: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _1113: &std::num::Wrapping<i64>;
    let _1114: std::num::Wrapping<i64>;
    let mut _1115: std::num::Wrapping<i64>;
    let mut _1118: bool;
    let mut _1119: bool;
    let _1121: !;
    let mut _1122: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1123: std::num::Wrapping<isize>;
    let mut _1124: std::num::Wrapping<isize>;
    let mut _1125: std::num::Wrapping<isize>;
    let _1126: ();
    let mut _1127: &mut std::num::Wrapping<isize>;
    let mut _1128: std::num::Wrapping<isize>;
    let mut _1129: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _1130: &std::num::Wrapping<isize>;
    let _1131: std::num::Wrapping<isize>;
    let mut _1132: std::num::Wrapping<isize>;
    let mut _1135: bool;
    let mut _1136: bool;
    let _1138: !;
    let mut _1139: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1140: std::num::Wrapping<isize>;
    let mut _1141: std::num::Wrapping<isize>;
    let mut _1142: std::num::Wrapping<isize>;
    let _1143: ();
    let mut _1144: &mut std::num::Wrapping<isize>;
    let mut _1145: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _1146: &std::num::Wrapping<isize>;
    let _1147: std::num::Wrapping<isize>;
    let mut _1148: std::num::Wrapping<isize>;
    let mut _1151: bool;
    let mut _1152: bool;
    let _1154: !;
    let mut _1155: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1156: std::num::Wrapping<i8>;
    let mut _1157: std::num::Wrapping<i8>;
    let mut _1158: std::num::Wrapping<i8>;
    let _1159: ();
    let mut _1160: &mut std::num::Wrapping<i8>;
    let mut _1161: std::num::Wrapping<i8>;
    let mut _1162: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _1163: &std::num::Wrapping<i8>;
    let _1164: std::num::Wrapping<i8>;
    let mut _1165: std::num::Wrapping<i8>;
    let mut _1168: bool;
    let mut _1169: bool;
    let _1171: !;
    let mut _1172: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1173: std::num::Wrapping<i8>;
    let mut _1174: std::num::Wrapping<i8>;
    let mut _1175: std::num::Wrapping<i8>;
    let _1176: ();
    let mut _1177: &mut std::num::Wrapping<i8>;
    let mut _1178: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _1179: &std::num::Wrapping<i8>;
    let _1180: std::num::Wrapping<i8>;
    let mut _1181: std::num::Wrapping<i8>;
    let mut _1184: bool;
    let mut _1185: bool;
    let _1187: !;
    let mut _1188: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1189: std::num::Wrapping<i16>;
    let mut _1190: std::num::Wrapping<i16>;
    let mut _1191: std::num::Wrapping<i16>;
    let _1192: ();
    let mut _1193: &mut std::num::Wrapping<i16>;
    let mut _1194: std::num::Wrapping<i16>;
    let mut _1195: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _1196: &std::num::Wrapping<i16>;
    let _1197: std::num::Wrapping<i16>;
    let mut _1198: std::num::Wrapping<i16>;
    let mut _1201: bool;
    let mut _1202: bool;
    let _1204: !;
    let mut _1205: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1206: std::num::Wrapping<i16>;
    let mut _1207: std::num::Wrapping<i16>;
    let mut _1208: std::num::Wrapping<i16>;
    let _1209: ();
    let mut _1210: &mut std::num::Wrapping<i16>;
    let mut _1211: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _1212: &std::num::Wrapping<i16>;
    let _1213: std::num::Wrapping<i16>;
    let mut _1214: std::num::Wrapping<i16>;
    let mut _1217: bool;
    let mut _1218: bool;
    let _1220: !;
    let mut _1221: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1222: std::num::Wrapping<i32>;
    let mut _1223: std::num::Wrapping<i32>;
    let mut _1224: std::num::Wrapping<i32>;
    let _1225: ();
    let mut _1226: &mut std::num::Wrapping<i32>;
    let mut _1227: std::num::Wrapping<i32>;
    let mut _1228: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _1229: &std::num::Wrapping<i32>;
    let _1230: std::num::Wrapping<i32>;
    let mut _1231: std::num::Wrapping<i32>;
    let mut _1234: bool;
    let mut _1235: bool;
    let _1237: !;
    let mut _1238: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1239: std::num::Wrapping<i32>;
    let mut _1240: std::num::Wrapping<i32>;
    let mut _1241: std::num::Wrapping<i32>;
    let _1242: ();
    let mut _1243: &mut std::num::Wrapping<i32>;
    let mut _1244: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _1245: &std::num::Wrapping<i32>;
    let _1246: std::num::Wrapping<i32>;
    let mut _1247: std::num::Wrapping<i32>;
    let mut _1250: bool;
    let mut _1251: bool;
    let _1253: !;
    let mut _1254: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1255: std::num::Wrapping<i64>;
    let mut _1256: std::num::Wrapping<i64>;
    let mut _1257: std::num::Wrapping<i64>;
    let _1258: ();
    let mut _1259: &mut std::num::Wrapping<i64>;
    let mut _1260: std::num::Wrapping<i64>;
    let mut _1261: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _1262: &std::num::Wrapping<i64>;
    let _1263: std::num::Wrapping<i64>;
    let mut _1264: std::num::Wrapping<i64>;
    let mut _1267: bool;
    let mut _1268: bool;
    let _1270: !;
    let mut _1271: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1272: std::num::Wrapping<i64>;
    let mut _1273: std::num::Wrapping<i64>;
    let mut _1274: std::num::Wrapping<i64>;
    let _1275: ();
    let mut _1276: &mut std::num::Wrapping<i64>;
    let mut _1277: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _1278: &std::num::Wrapping<i64>;
    let _1279: std::num::Wrapping<i64>;
    let mut _1280: std::num::Wrapping<i64>;
    let mut _1283: bool;
    let mut _1284: bool;
    let _1286: !;
    let mut _1287: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1288: std::num::Wrapping<isize>;
    let mut _1289: std::num::Wrapping<isize>;
    let mut _1290: std::num::Wrapping<isize>;
    let _1291: ();
    let mut _1292: &mut std::num::Wrapping<isize>;
    let mut _1293: std::num::Wrapping<isize>;
    let mut _1294: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _1295: &std::num::Wrapping<isize>;
    let _1296: std::num::Wrapping<isize>;
    let mut _1297: std::num::Wrapping<isize>;
    let mut _1300: bool;
    let mut _1301: bool;
    let _1303: !;
    let mut _1304: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1305: std::num::Wrapping<isize>;
    let mut _1306: std::num::Wrapping<isize>;
    let mut _1307: std::num::Wrapping<isize>;
    let _1308: ();
    let mut _1309: &mut std::num::Wrapping<isize>;
    let mut _1310: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _1311: &std::num::Wrapping<isize>;
    let _1312: std::num::Wrapping<isize>;
    let mut _1313: std::num::Wrapping<isize>;
    let mut _1316: bool;
    let mut _1317: bool;
    let _1319: !;
    let mut _1320: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1321: std::num::Wrapping<i8>;
    let mut _1322: std::num::Wrapping<i8>;
    let mut _1323: std::num::Wrapping<i8>;
    let _1324: ();
    let mut _1325: &mut std::num::Wrapping<i8>;
    let mut _1326: std::num::Wrapping<i8>;
    let mut _1327: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _1328: &std::num::Wrapping<i8>;
    let _1329: std::num::Wrapping<i8>;
    let mut _1330: std::num::Wrapping<i8>;
    let mut _1333: bool;
    let mut _1334: bool;
    let _1336: !;
    let mut _1337: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1338: std::num::Wrapping<i8>;
    let mut _1339: std::num::Wrapping<i8>;
    let mut _1340: std::num::Wrapping<i8>;
    let _1341: ();
    let mut _1342: &mut std::num::Wrapping<i8>;
    let mut _1343: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _1344: &std::num::Wrapping<i8>;
    let _1345: std::num::Wrapping<i8>;
    let mut _1346: std::num::Wrapping<i8>;
    let mut _1349: bool;
    let mut _1350: bool;
    let _1352: !;
    let mut _1353: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1354: std::num::Wrapping<i16>;
    let mut _1355: std::num::Wrapping<i16>;
    let mut _1356: std::num::Wrapping<i16>;
    let _1357: ();
    let mut _1358: &mut std::num::Wrapping<i16>;
    let mut _1359: std::num::Wrapping<i16>;
    let mut _1360: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _1361: &std::num::Wrapping<i16>;
    let _1362: std::num::Wrapping<i16>;
    let mut _1363: std::num::Wrapping<i16>;
    let mut _1366: bool;
    let mut _1367: bool;
    let _1369: !;
    let mut _1370: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1371: std::num::Wrapping<i16>;
    let mut _1372: std::num::Wrapping<i16>;
    let mut _1373: std::num::Wrapping<i16>;
    let _1374: ();
    let mut _1375: &mut std::num::Wrapping<i16>;
    let mut _1376: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _1377: &std::num::Wrapping<i16>;
    let _1378: std::num::Wrapping<i16>;
    let mut _1379: std::num::Wrapping<i16>;
    let mut _1382: bool;
    let mut _1383: bool;
    let _1385: !;
    let mut _1386: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1387: std::num::Wrapping<i32>;
    let mut _1388: std::num::Wrapping<i32>;
    let mut _1389: std::num::Wrapping<i32>;
    let _1390: ();
    let mut _1391: &mut std::num::Wrapping<i32>;
    let mut _1392: std::num::Wrapping<i32>;
    let mut _1393: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _1394: &std::num::Wrapping<i32>;
    let _1395: std::num::Wrapping<i32>;
    let mut _1396: std::num::Wrapping<i32>;
    let mut _1399: bool;
    let mut _1400: bool;
    let _1402: !;
    let mut _1403: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1404: std::num::Wrapping<i32>;
    let mut _1405: std::num::Wrapping<i32>;
    let mut _1406: std::num::Wrapping<i32>;
    let _1407: ();
    let mut _1408: &mut std::num::Wrapping<i32>;
    let mut _1409: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _1410: &std::num::Wrapping<i32>;
    let _1411: std::num::Wrapping<i32>;
    let mut _1412: std::num::Wrapping<i32>;
    let mut _1415: bool;
    let mut _1416: bool;
    let _1418: !;
    let mut _1419: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1420: std::num::Wrapping<i64>;
    let mut _1421: std::num::Wrapping<i64>;
    let mut _1422: std::num::Wrapping<i64>;
    let _1423: ();
    let mut _1424: &mut std::num::Wrapping<i64>;
    let mut _1425: std::num::Wrapping<i64>;
    let mut _1426: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _1427: &std::num::Wrapping<i64>;
    let _1428: std::num::Wrapping<i64>;
    let mut _1429: std::num::Wrapping<i64>;
    let mut _1432: bool;
    let mut _1433: bool;
    let _1435: !;
    let mut _1436: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1437: std::num::Wrapping<i64>;
    let mut _1438: std::num::Wrapping<i64>;
    let mut _1439: std::num::Wrapping<i64>;
    let _1440: ();
    let mut _1441: &mut std::num::Wrapping<i64>;
    let mut _1442: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _1443: &std::num::Wrapping<i64>;
    let _1444: std::num::Wrapping<i64>;
    let mut _1445: std::num::Wrapping<i64>;
    let mut _1448: bool;
    let mut _1449: bool;
    let _1451: !;
    let mut _1452: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1453: std::num::Wrapping<isize>;
    let mut _1454: std::num::Wrapping<isize>;
    let mut _1455: std::num::Wrapping<isize>;
    let _1456: ();
    let mut _1457: &mut std::num::Wrapping<isize>;
    let mut _1458: std::num::Wrapping<isize>;
    let mut _1459: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _1460: &std::num::Wrapping<isize>;
    let _1461: std::num::Wrapping<isize>;
    let mut _1462: std::num::Wrapping<isize>;
    let mut _1465: bool;
    let mut _1466: bool;
    let _1468: !;
    let mut _1469: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1470: std::num::Wrapping<isize>;
    let mut _1471: std::num::Wrapping<isize>;
    let mut _1472: std::num::Wrapping<isize>;
    let _1473: ();
    let mut _1474: &mut std::num::Wrapping<isize>;
    let mut _1475: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _1476: &std::num::Wrapping<isize>;
    let _1477: std::num::Wrapping<isize>;
    let mut _1478: std::num::Wrapping<isize>;
    let mut _1481: bool;
    let mut _1482: bool;
    let _1484: !;
    let mut _1485: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1486: std::num::Wrapping<u8>;
    let mut _1487: std::num::Wrapping<u8>;
    let mut _1488: std::num::Wrapping<u8>;
    let _1489: ();
    let mut _1490: &mut std::num::Wrapping<u8>;
    let mut _1491: std::num::Wrapping<u8>;
    let mut _1492: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _1493: &std::num::Wrapping<u8>;
    let _1494: std::num::Wrapping<u8>;
    let mut _1495: std::num::Wrapping<u8>;
    let mut _1498: bool;
    let mut _1499: bool;
    let _1501: !;
    let mut _1502: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1503: std::num::Wrapping<u8>;
    let mut _1504: std::num::Wrapping<u8>;
    let mut _1505: std::num::Wrapping<u8>;
    let _1506: ();
    let mut _1507: &mut std::num::Wrapping<u8>;
    let mut _1508: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _1509: &std::num::Wrapping<u8>;
    let _1510: std::num::Wrapping<u8>;
    let mut _1511: std::num::Wrapping<u8>;
    let mut _1514: bool;
    let mut _1515: bool;
    let _1517: !;
    let mut _1518: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1519: std::num::Wrapping<u16>;
    let mut _1520: std::num::Wrapping<u16>;
    let mut _1521: std::num::Wrapping<u16>;
    let _1522: ();
    let mut _1523: &mut std::num::Wrapping<u16>;
    let mut _1524: std::num::Wrapping<u16>;
    let mut _1525: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _1526: &std::num::Wrapping<u16>;
    let _1527: std::num::Wrapping<u16>;
    let mut _1528: std::num::Wrapping<u16>;
    let mut _1531: bool;
    let mut _1532: bool;
    let _1534: !;
    let mut _1535: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1536: std::num::Wrapping<u16>;
    let mut _1537: std::num::Wrapping<u16>;
    let mut _1538: std::num::Wrapping<u16>;
    let _1539: ();
    let mut _1540: &mut std::num::Wrapping<u16>;
    let mut _1541: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _1542: &std::num::Wrapping<u16>;
    let _1543: std::num::Wrapping<u16>;
    let mut _1544: std::num::Wrapping<u16>;
    let mut _1547: bool;
    let mut _1548: bool;
    let _1550: !;
    let mut _1551: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1552: std::num::Wrapping<u32>;
    let mut _1553: std::num::Wrapping<u32>;
    let mut _1554: std::num::Wrapping<u32>;
    let _1555: ();
    let mut _1556: &mut std::num::Wrapping<u32>;
    let mut _1557: std::num::Wrapping<u32>;
    let mut _1558: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _1559: &std::num::Wrapping<u32>;
    let _1560: std::num::Wrapping<u32>;
    let mut _1561: std::num::Wrapping<u32>;
    let mut _1564: bool;
    let mut _1565: bool;
    let _1567: !;
    let mut _1568: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1569: std::num::Wrapping<u32>;
    let mut _1570: std::num::Wrapping<u32>;
    let mut _1571: std::num::Wrapping<u32>;
    let _1572: ();
    let mut _1573: &mut std::num::Wrapping<u32>;
    let mut _1574: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _1575: &std::num::Wrapping<u32>;
    let _1576: std::num::Wrapping<u32>;
    let mut _1577: std::num::Wrapping<u32>;
    let mut _1580: bool;
    let mut _1581: bool;
    let _1583: !;
    let mut _1584: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1585: std::num::Wrapping<u64>;
    let mut _1586: std::num::Wrapping<u64>;
    let mut _1587: std::num::Wrapping<u64>;
    let _1588: ();
    let mut _1589: &mut std::num::Wrapping<u64>;
    let mut _1590: std::num::Wrapping<u64>;
    let mut _1591: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _1592: &std::num::Wrapping<u64>;
    let _1593: std::num::Wrapping<u64>;
    let mut _1594: std::num::Wrapping<u64>;
    let mut _1597: bool;
    let mut _1598: bool;
    let _1600: !;
    let mut _1601: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1602: std::num::Wrapping<u64>;
    let mut _1603: std::num::Wrapping<u64>;
    let mut _1604: std::num::Wrapping<u64>;
    let _1605: ();
    let mut _1606: &mut std::num::Wrapping<u64>;
    let mut _1607: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _1608: &std::num::Wrapping<u64>;
    let _1609: std::num::Wrapping<u64>;
    let mut _1610: std::num::Wrapping<u64>;
    let mut _1613: bool;
    let mut _1614: bool;
    let _1616: !;
    let mut _1617: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1618: std::num::Wrapping<usize>;
    let mut _1619: std::num::Wrapping<usize>;
    let mut _1620: std::num::Wrapping<usize>;
    let _1621: ();
    let mut _1622: &mut std::num::Wrapping<usize>;
    let mut _1623: std::num::Wrapping<usize>;
    let mut _1624: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _1625: &std::num::Wrapping<usize>;
    let _1626: std::num::Wrapping<usize>;
    let mut _1627: std::num::Wrapping<usize>;
    let mut _1630: bool;
    let mut _1631: bool;
    let _1633: !;
    let mut _1634: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1635: std::num::Wrapping<usize>;
    let mut _1636: std::num::Wrapping<usize>;
    let mut _1637: std::num::Wrapping<usize>;
    let _1638: ();
    let mut _1639: &mut std::num::Wrapping<usize>;
    let mut _1640: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _1641: &std::num::Wrapping<usize>;
    let _1642: std::num::Wrapping<usize>;
    let mut _1643: std::num::Wrapping<usize>;
    let mut _1646: bool;
    let mut _1647: bool;
    let _1649: !;
    let mut _1650: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1651: std::num::Wrapping<i8>;
    let mut _1652: std::num::Wrapping<i8>;
    let mut _1653: std::num::Wrapping<i8>;
    let _1654: ();
    let mut _1655: &mut std::num::Wrapping<i8>;
    let mut _1656: std::num::Wrapping<i8>;
    let mut _1657: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _1658: &std::num::Wrapping<i8>;
    let _1659: std::num::Wrapping<i8>;
    let mut _1660: std::num::Wrapping<i8>;
    let mut _1663: bool;
    let mut _1664: bool;
    let _1666: !;
    let mut _1667: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1668: std::num::Wrapping<i8>;
    let mut _1669: std::num::Wrapping<i8>;
    let mut _1670: std::num::Wrapping<i8>;
    let _1671: ();
    let mut _1672: &mut std::num::Wrapping<i8>;
    let mut _1673: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _1674: &std::num::Wrapping<i8>;
    let _1675: std::num::Wrapping<i8>;
    let mut _1676: std::num::Wrapping<i8>;
    let mut _1679: bool;
    let mut _1680: bool;
    let _1682: !;
    let mut _1683: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1684: std::num::Wrapping<i16>;
    let mut _1685: std::num::Wrapping<i16>;
    let mut _1686: std::num::Wrapping<i16>;
    let _1687: ();
    let mut _1688: &mut std::num::Wrapping<i16>;
    let mut _1689: std::num::Wrapping<i16>;
    let mut _1690: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _1691: &std::num::Wrapping<i16>;
    let _1692: std::num::Wrapping<i16>;
    let mut _1693: std::num::Wrapping<i16>;
    let mut _1696: bool;
    let mut _1697: bool;
    let _1699: !;
    let mut _1700: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1701: std::num::Wrapping<i16>;
    let mut _1702: std::num::Wrapping<i16>;
    let mut _1703: std::num::Wrapping<i16>;
    let _1704: ();
    let mut _1705: &mut std::num::Wrapping<i16>;
    let mut _1706: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _1707: &std::num::Wrapping<i16>;
    let _1708: std::num::Wrapping<i16>;
    let mut _1709: std::num::Wrapping<i16>;
    let mut _1712: bool;
    let mut _1713: bool;
    let _1715: !;
    let mut _1716: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1717: std::num::Wrapping<i32>;
    let mut _1718: std::num::Wrapping<i32>;
    let mut _1719: std::num::Wrapping<i32>;
    let _1720: ();
    let mut _1721: &mut std::num::Wrapping<i32>;
    let mut _1722: std::num::Wrapping<i32>;
    let mut _1723: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _1724: &std::num::Wrapping<i32>;
    let _1725: std::num::Wrapping<i32>;
    let mut _1726: std::num::Wrapping<i32>;
    let mut _1729: bool;
    let mut _1730: bool;
    let _1732: !;
    let mut _1733: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1734: std::num::Wrapping<i32>;
    let mut _1735: std::num::Wrapping<i32>;
    let mut _1736: std::num::Wrapping<i32>;
    let _1737: ();
    let mut _1738: &mut std::num::Wrapping<i32>;
    let mut _1739: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _1740: &std::num::Wrapping<i32>;
    let _1741: std::num::Wrapping<i32>;
    let mut _1742: std::num::Wrapping<i32>;
    let mut _1745: bool;
    let mut _1746: bool;
    let _1748: !;
    let mut _1749: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1750: std::num::Wrapping<i64>;
    let mut _1751: std::num::Wrapping<i64>;
    let mut _1752: std::num::Wrapping<i64>;
    let _1753: ();
    let mut _1754: &mut std::num::Wrapping<i64>;
    let mut _1755: std::num::Wrapping<i64>;
    let mut _1756: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _1757: &std::num::Wrapping<i64>;
    let _1758: std::num::Wrapping<i64>;
    let mut _1759: std::num::Wrapping<i64>;
    let mut _1762: bool;
    let mut _1763: bool;
    let _1765: !;
    let mut _1766: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1767: std::num::Wrapping<i64>;
    let mut _1768: std::num::Wrapping<i64>;
    let mut _1769: std::num::Wrapping<i64>;
    let _1770: ();
    let mut _1771: &mut std::num::Wrapping<i64>;
    let mut _1772: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _1773: &std::num::Wrapping<i64>;
    let _1774: std::num::Wrapping<i64>;
    let mut _1775: std::num::Wrapping<i64>;
    let mut _1778: bool;
    let mut _1779: bool;
    let _1781: !;
    let mut _1782: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1783: std::num::Wrapping<isize>;
    let mut _1784: std::num::Wrapping<isize>;
    let mut _1785: std::num::Wrapping<isize>;
    let _1786: ();
    let mut _1787: &mut std::num::Wrapping<isize>;
    let mut _1788: std::num::Wrapping<isize>;
    let mut _1789: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _1790: &std::num::Wrapping<isize>;
    let _1791: std::num::Wrapping<isize>;
    let mut _1792: std::num::Wrapping<isize>;
    let mut _1795: bool;
    let mut _1796: bool;
    let _1798: !;
    let mut _1799: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1800: std::num::Wrapping<isize>;
    let mut _1801: std::num::Wrapping<isize>;
    let mut _1802: std::num::Wrapping<isize>;
    let _1803: ();
    let mut _1804: &mut std::num::Wrapping<isize>;
    let mut _1805: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _1806: &std::num::Wrapping<isize>;
    let _1807: std::num::Wrapping<isize>;
    let mut _1808: std::num::Wrapping<isize>;
    let mut _1811: bool;
    let mut _1812: bool;
    let _1814: !;
    let mut _1815: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1816: std::num::Wrapping<u8>;
    let mut _1817: std::num::Wrapping<u8>;
    let mut _1818: std::num::Wrapping<u8>;
    let _1819: ();
    let mut _1820: &mut std::num::Wrapping<u8>;
    let mut _1821: std::num::Wrapping<u8>;
    let mut _1822: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _1823: &std::num::Wrapping<u8>;
    let _1824: std::num::Wrapping<u8>;
    let mut _1825: std::num::Wrapping<u8>;
    let mut _1828: bool;
    let mut _1829: bool;
    let _1831: !;
    let mut _1832: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1833: std::num::Wrapping<u8>;
    let mut _1834: std::num::Wrapping<u8>;
    let mut _1835: std::num::Wrapping<u8>;
    let _1836: ();
    let mut _1837: &mut std::num::Wrapping<u8>;
    let mut _1838: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _1839: &std::num::Wrapping<u8>;
    let _1840: std::num::Wrapping<u8>;
    let mut _1841: std::num::Wrapping<u8>;
    let mut _1844: bool;
    let mut _1845: bool;
    let _1847: !;
    let mut _1848: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1849: std::num::Wrapping<u16>;
    let mut _1850: std::num::Wrapping<u16>;
    let mut _1851: std::num::Wrapping<u16>;
    let _1852: ();
    let mut _1853: &mut std::num::Wrapping<u16>;
    let mut _1854: std::num::Wrapping<u16>;
    let mut _1855: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _1856: &std::num::Wrapping<u16>;
    let _1857: std::num::Wrapping<u16>;
    let mut _1858: std::num::Wrapping<u16>;
    let mut _1861: bool;
    let mut _1862: bool;
    let _1864: !;
    let mut _1865: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1866: std::num::Wrapping<u16>;
    let mut _1867: std::num::Wrapping<u16>;
    let mut _1868: std::num::Wrapping<u16>;
    let _1869: ();
    let mut _1870: &mut std::num::Wrapping<u16>;
    let mut _1871: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _1872: &std::num::Wrapping<u16>;
    let _1873: std::num::Wrapping<u16>;
    let mut _1874: std::num::Wrapping<u16>;
    let mut _1877: bool;
    let mut _1878: bool;
    let _1880: !;
    let mut _1881: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1882: std::num::Wrapping<u32>;
    let mut _1883: std::num::Wrapping<u32>;
    let mut _1884: std::num::Wrapping<u32>;
    let _1885: ();
    let mut _1886: &mut std::num::Wrapping<u32>;
    let mut _1887: std::num::Wrapping<u32>;
    let mut _1888: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _1889: &std::num::Wrapping<u32>;
    let _1890: std::num::Wrapping<u32>;
    let mut _1891: std::num::Wrapping<u32>;
    let mut _1894: bool;
    let mut _1895: bool;
    let _1897: !;
    let mut _1898: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1899: std::num::Wrapping<u32>;
    let mut _1900: std::num::Wrapping<u32>;
    let mut _1901: std::num::Wrapping<u32>;
    let _1902: ();
    let mut _1903: &mut std::num::Wrapping<u32>;
    let mut _1904: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _1905: &std::num::Wrapping<u32>;
    let _1906: std::num::Wrapping<u32>;
    let mut _1907: std::num::Wrapping<u32>;
    let mut _1910: bool;
    let mut _1911: bool;
    let _1913: !;
    let mut _1914: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1915: std::num::Wrapping<u64>;
    let mut _1916: std::num::Wrapping<u64>;
    let mut _1917: std::num::Wrapping<u64>;
    let _1918: ();
    let mut _1919: &mut std::num::Wrapping<u64>;
    let mut _1920: std::num::Wrapping<u64>;
    let mut _1921: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _1922: &std::num::Wrapping<u64>;
    let _1923: std::num::Wrapping<u64>;
    let mut _1924: std::num::Wrapping<u64>;
    let mut _1927: bool;
    let mut _1928: bool;
    let _1930: !;
    let mut _1931: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1932: std::num::Wrapping<u64>;
    let mut _1933: std::num::Wrapping<u64>;
    let mut _1934: std::num::Wrapping<u64>;
    let _1935: ();
    let mut _1936: &mut std::num::Wrapping<u64>;
    let mut _1937: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _1938: &std::num::Wrapping<u64>;
    let _1939: std::num::Wrapping<u64>;
    let mut _1940: std::num::Wrapping<u64>;
    let mut _1943: bool;
    let mut _1944: bool;
    let _1946: !;
    let mut _1947: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1948: std::num::Wrapping<usize>;
    let mut _1949: std::num::Wrapping<usize>;
    let mut _1950: std::num::Wrapping<usize>;
    let _1951: ();
    let mut _1952: &mut std::num::Wrapping<usize>;
    let mut _1953: std::num::Wrapping<usize>;
    let mut _1954: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _1955: &std::num::Wrapping<usize>;
    let _1956: std::num::Wrapping<usize>;
    let mut _1957: std::num::Wrapping<usize>;
    let mut _1960: bool;
    let mut _1961: bool;
    let _1963: !;
    let mut _1964: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1965: std::num::Wrapping<usize>;
    let mut _1966: std::num::Wrapping<usize>;
    let mut _1967: std::num::Wrapping<usize>;
    let _1968: ();
    let mut _1969: &mut std::num::Wrapping<usize>;
    let mut _1970: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _1971: &std::num::Wrapping<usize>;
    let _1972: std::num::Wrapping<usize>;
    let mut _1973: std::num::Wrapping<usize>;
    let mut _1976: bool;
    let mut _1977: bool;
    let _1979: !;
    let mut _1980: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1981: std::num::Wrapping<i8>;
    let mut _1982: std::num::Wrapping<i8>;
    let mut _1983: std::num::Wrapping<i8>;
    let _1984: ();
    let mut _1985: &mut std::num::Wrapping<i8>;
    let mut _1986: std::num::Wrapping<i8>;
    let mut _1987: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _1988: &std::num::Wrapping<i8>;
    let _1989: std::num::Wrapping<i8>;
    let mut _1990: std::num::Wrapping<i8>;
    let mut _1993: bool;
    let mut _1994: bool;
    let _1996: !;
    let mut _1997: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _1998: std::num::Wrapping<i8>;
    let mut _1999: std::num::Wrapping<i8>;
    let mut _2000: std::num::Wrapping<i8>;
    let _2001: ();
    let mut _2002: &mut std::num::Wrapping<i8>;
    let mut _2003: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _2004: &std::num::Wrapping<i8>;
    let _2005: std::num::Wrapping<i8>;
    let mut _2006: std::num::Wrapping<i8>;
    let mut _2009: bool;
    let mut _2010: bool;
    let _2012: !;
    let mut _2013: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2014: std::num::Wrapping<i16>;
    let mut _2015: std::num::Wrapping<i16>;
    let mut _2016: std::num::Wrapping<i16>;
    let _2017: ();
    let mut _2018: &mut std::num::Wrapping<i16>;
    let mut _2019: std::num::Wrapping<i16>;
    let mut _2020: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _2021: &std::num::Wrapping<i16>;
    let _2022: std::num::Wrapping<i16>;
    let mut _2023: std::num::Wrapping<i16>;
    let mut _2026: bool;
    let mut _2027: bool;
    let _2029: !;
    let mut _2030: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2031: std::num::Wrapping<i16>;
    let mut _2032: std::num::Wrapping<i16>;
    let mut _2033: std::num::Wrapping<i16>;
    let _2034: ();
    let mut _2035: &mut std::num::Wrapping<i16>;
    let mut _2036: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _2037: &std::num::Wrapping<i16>;
    let _2038: std::num::Wrapping<i16>;
    let mut _2039: std::num::Wrapping<i16>;
    let mut _2042: bool;
    let mut _2043: bool;
    let _2045: !;
    let mut _2046: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2047: std::num::Wrapping<i32>;
    let mut _2048: std::num::Wrapping<i32>;
    let mut _2049: std::num::Wrapping<i32>;
    let _2050: ();
    let mut _2051: &mut std::num::Wrapping<i32>;
    let mut _2052: std::num::Wrapping<i32>;
    let mut _2053: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _2054: &std::num::Wrapping<i32>;
    let _2055: std::num::Wrapping<i32>;
    let mut _2056: std::num::Wrapping<i32>;
    let mut _2059: bool;
    let mut _2060: bool;
    let _2062: !;
    let mut _2063: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2064: std::num::Wrapping<i32>;
    let mut _2065: std::num::Wrapping<i32>;
    let mut _2066: std::num::Wrapping<i32>;
    let _2067: ();
    let mut _2068: &mut std::num::Wrapping<i32>;
    let mut _2069: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _2070: &std::num::Wrapping<i32>;
    let _2071: std::num::Wrapping<i32>;
    let mut _2072: std::num::Wrapping<i32>;
    let mut _2075: bool;
    let mut _2076: bool;
    let _2078: !;
    let mut _2079: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2080: std::num::Wrapping<i64>;
    let mut _2081: std::num::Wrapping<i64>;
    let mut _2082: std::num::Wrapping<i64>;
    let _2083: ();
    let mut _2084: &mut std::num::Wrapping<i64>;
    let mut _2085: std::num::Wrapping<i64>;
    let mut _2086: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _2087: &std::num::Wrapping<i64>;
    let _2088: std::num::Wrapping<i64>;
    let mut _2089: std::num::Wrapping<i64>;
    let mut _2092: bool;
    let mut _2093: bool;
    let _2095: !;
    let mut _2096: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2097: std::num::Wrapping<i64>;
    let mut _2098: std::num::Wrapping<i64>;
    let mut _2099: std::num::Wrapping<i64>;
    let _2100: ();
    let mut _2101: &mut std::num::Wrapping<i64>;
    let mut _2102: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _2103: &std::num::Wrapping<i64>;
    let _2104: std::num::Wrapping<i64>;
    let mut _2105: std::num::Wrapping<i64>;
    let mut _2108: bool;
    let mut _2109: bool;
    let _2111: !;
    let mut _2112: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2113: std::num::Wrapping<isize>;
    let mut _2114: std::num::Wrapping<isize>;
    let mut _2115: std::num::Wrapping<isize>;
    let _2116: ();
    let mut _2117: &mut std::num::Wrapping<isize>;
    let mut _2118: std::num::Wrapping<isize>;
    let mut _2119: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _2120: &std::num::Wrapping<isize>;
    let _2121: std::num::Wrapping<isize>;
    let mut _2122: std::num::Wrapping<isize>;
    let mut _2125: bool;
    let mut _2126: bool;
    let _2128: !;
    let mut _2129: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2130: std::num::Wrapping<isize>;
    let mut _2131: std::num::Wrapping<isize>;
    let mut _2132: std::num::Wrapping<isize>;
    let _2133: ();
    let mut _2134: &mut std::num::Wrapping<isize>;
    let mut _2135: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _2136: &std::num::Wrapping<isize>;
    let _2137: std::num::Wrapping<isize>;
    let mut _2138: std::num::Wrapping<isize>;
    let mut _2141: bool;
    let mut _2142: bool;
    let _2144: !;
    let mut _2145: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2146: std::num::Wrapping<u8>;
    let mut _2147: std::num::Wrapping<u8>;
    let mut _2148: std::num::Wrapping<u8>;
    let _2149: ();
    let mut _2150: &mut std::num::Wrapping<u8>;
    let mut _2151: std::num::Wrapping<u8>;
    let mut _2152: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _2153: &std::num::Wrapping<u8>;
    let _2154: std::num::Wrapping<u8>;
    let mut _2155: std::num::Wrapping<u8>;
    let mut _2158: bool;
    let mut _2159: bool;
    let _2161: !;
    let mut _2162: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2163: std::num::Wrapping<u8>;
    let mut _2164: std::num::Wrapping<u8>;
    let mut _2165: std::num::Wrapping<u8>;
    let _2166: ();
    let mut _2167: &mut std::num::Wrapping<u8>;
    let mut _2168: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _2169: &std::num::Wrapping<u8>;
    let _2170: std::num::Wrapping<u8>;
    let mut _2171: std::num::Wrapping<u8>;
    let mut _2174: bool;
    let mut _2175: bool;
    let _2177: !;
    let mut _2178: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2179: std::num::Wrapping<u16>;
    let mut _2180: std::num::Wrapping<u16>;
    let mut _2181: std::num::Wrapping<u16>;
    let _2182: ();
    let mut _2183: &mut std::num::Wrapping<u16>;
    let mut _2184: std::num::Wrapping<u16>;
    let mut _2185: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _2186: &std::num::Wrapping<u16>;
    let _2187: std::num::Wrapping<u16>;
    let mut _2188: std::num::Wrapping<u16>;
    let mut _2191: bool;
    let mut _2192: bool;
    let _2194: !;
    let mut _2195: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2196: std::num::Wrapping<u16>;
    let mut _2197: std::num::Wrapping<u16>;
    let mut _2198: std::num::Wrapping<u16>;
    let _2199: ();
    let mut _2200: &mut std::num::Wrapping<u16>;
    let mut _2201: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _2202: &std::num::Wrapping<u16>;
    let _2203: std::num::Wrapping<u16>;
    let mut _2204: std::num::Wrapping<u16>;
    let mut _2207: bool;
    let mut _2208: bool;
    let _2210: !;
    let mut _2211: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2212: std::num::Wrapping<u32>;
    let mut _2213: std::num::Wrapping<u32>;
    let mut _2214: std::num::Wrapping<u32>;
    let _2215: ();
    let mut _2216: &mut std::num::Wrapping<u32>;
    let mut _2217: std::num::Wrapping<u32>;
    let mut _2218: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _2219: &std::num::Wrapping<u32>;
    let _2220: std::num::Wrapping<u32>;
    let mut _2221: std::num::Wrapping<u32>;
    let mut _2224: bool;
    let mut _2225: bool;
    let _2227: !;
    let mut _2228: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2229: std::num::Wrapping<u32>;
    let mut _2230: std::num::Wrapping<u32>;
    let mut _2231: std::num::Wrapping<u32>;
    let _2232: ();
    let mut _2233: &mut std::num::Wrapping<u32>;
    let mut _2234: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _2235: &std::num::Wrapping<u32>;
    let _2236: std::num::Wrapping<u32>;
    let mut _2237: std::num::Wrapping<u32>;
    let mut _2240: bool;
    let mut _2241: bool;
    let _2243: !;
    let mut _2244: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2245: std::num::Wrapping<u64>;
    let mut _2246: std::num::Wrapping<u64>;
    let mut _2247: std::num::Wrapping<u64>;
    let _2248: ();
    let mut _2249: &mut std::num::Wrapping<u64>;
    let mut _2250: std::num::Wrapping<u64>;
    let mut _2251: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _2252: &std::num::Wrapping<u64>;
    let _2253: std::num::Wrapping<u64>;
    let mut _2254: std::num::Wrapping<u64>;
    let mut _2257: bool;
    let mut _2258: bool;
    let _2260: !;
    let mut _2261: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2262: std::num::Wrapping<u64>;
    let mut _2263: std::num::Wrapping<u64>;
    let mut _2264: std::num::Wrapping<u64>;
    let _2265: ();
    let mut _2266: &mut std::num::Wrapping<u64>;
    let mut _2267: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _2268: &std::num::Wrapping<u64>;
    let _2269: std::num::Wrapping<u64>;
    let mut _2270: std::num::Wrapping<u64>;
    let mut _2273: bool;
    let mut _2274: bool;
    let _2276: !;
    let mut _2277: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2278: std::num::Wrapping<usize>;
    let mut _2279: std::num::Wrapping<usize>;
    let mut _2280: std::num::Wrapping<usize>;
    let _2281: ();
    let mut _2282: &mut std::num::Wrapping<usize>;
    let mut _2283: std::num::Wrapping<usize>;
    let mut _2284: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _2285: &std::num::Wrapping<usize>;
    let _2286: std::num::Wrapping<usize>;
    let mut _2287: std::num::Wrapping<usize>;
    let mut _2290: bool;
    let mut _2291: bool;
    let _2293: !;
    let mut _2294: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _2295: std::num::Wrapping<usize>;
    let mut _2296: std::num::Wrapping<usize>;
    let mut _2297: std::num::Wrapping<usize>;
    let _2298: ();
    let mut _2299: &mut std::num::Wrapping<usize>;
    let mut _2300: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _2301: &std::num::Wrapping<usize>;
    let _2302: std::num::Wrapping<usize>;
    let mut _2303: std::num::Wrapping<usize>;
    let mut _2306: bool;
    let mut _2307: bool;
    let _2309: !;
    let mut _2310: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug tmp => _1;
        let _11: &std::num::Wrapping<i8>;
        let _12: &std::num::Wrapping<i8>;
        let mut _2520: &std::num::Wrapping<i8>;
        scope 2 {
            debug left_val => _11;
            debug right_val => _12;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
    }
    scope 4 {
        debug tmp => _18;
        let _27: &std::num::Wrapping<i8>;
        let _28: &std::num::Wrapping<i8>;
        let mut _2518: &std::num::Wrapping<i8>;
        let mut _2519: &std::num::Wrapping<i8>;
        scope 5 {
            debug left_val => _27;
            debug right_val => _28;
            let _31: core::panicking::AssertKind;
            scope 6 {
                debug kind => _31;
            }
        }
    }
    scope 7 {
        debug tmp => _34;
        let _44: &std::num::Wrapping<i16>;
        let _45: &std::num::Wrapping<i16>;
        let mut _2517: &std::num::Wrapping<i16>;
        scope 8 {
            debug left_val => _44;
            debug right_val => _45;
            let _48: core::panicking::AssertKind;
            scope 9 {
                debug kind => _48;
            }
        }
    }
    scope 10 {
        debug tmp => _51;
        let _60: &std::num::Wrapping<i16>;
        let _61: &std::num::Wrapping<i16>;
        let mut _2515: &std::num::Wrapping<i16>;
        let mut _2516: &std::num::Wrapping<i16>;
        scope 11 {
            debug left_val => _60;
            debug right_val => _61;
            let _64: core::panicking::AssertKind;
            scope 12 {
                debug kind => _64;
            }
        }
    }
    scope 13 {
        debug tmp => _67;
        let _77: &std::num::Wrapping<i32>;
        let _78: &std::num::Wrapping<i32>;
        let mut _2514: &std::num::Wrapping<i32>;
        scope 14 {
            debug left_val => _77;
            debug right_val => _78;
            let _81: core::panicking::AssertKind;
            scope 15 {
                debug kind => _81;
            }
        }
    }
    scope 16 {
        debug tmp => _84;
        let _93: &std::num::Wrapping<i32>;
        let _94: &std::num::Wrapping<i32>;
        let mut _2512: &std::num::Wrapping<i32>;
        let mut _2513: &std::num::Wrapping<i32>;
        scope 17 {
            debug left_val => _93;
            debug right_val => _94;
            let _97: core::panicking::AssertKind;
            scope 18 {
                debug kind => _97;
            }
        }
    }
    scope 19 {
        debug tmp => _100;
        let _110: &std::num::Wrapping<i64>;
        let _111: &std::num::Wrapping<i64>;
        let mut _2511: &std::num::Wrapping<i64>;
        scope 20 {
            debug left_val => _110;
            debug right_val => _111;
            let _114: core::panicking::AssertKind;
            scope 21 {
                debug kind => _114;
            }
        }
    }
    scope 22 {
        debug tmp => _117;
        let _126: &std::num::Wrapping<i64>;
        let _127: &std::num::Wrapping<i64>;
        let mut _2509: &std::num::Wrapping<i64>;
        let mut _2510: &std::num::Wrapping<i64>;
        scope 23 {
            debug left_val => _126;
            debug right_val => _127;
            let _130: core::panicking::AssertKind;
            scope 24 {
                debug kind => _130;
            }
        }
    }
    scope 25 {
        debug tmp => _133;
        let _143: &std::num::Wrapping<isize>;
        let _144: &std::num::Wrapping<isize>;
        let mut _2508: &std::num::Wrapping<isize>;
        scope 26 {
            debug left_val => _143;
            debug right_val => _144;
            let _147: core::panicking::AssertKind;
            scope 27 {
                debug kind => _147;
            }
        }
    }
    scope 28 {
        debug tmp => _150;
        let _159: &std::num::Wrapping<isize>;
        let _160: &std::num::Wrapping<isize>;
        let mut _2506: &std::num::Wrapping<isize>;
        let mut _2507: &std::num::Wrapping<isize>;
        scope 29 {
            debug left_val => _159;
            debug right_val => _160;
            let _163: core::panicking::AssertKind;
            scope 30 {
                debug kind => _163;
            }
        }
    }
    scope 31 {
        debug tmp => _166;
        let _176: &std::num::Wrapping<u8>;
        let _177: &std::num::Wrapping<u8>;
        let mut _2505: &std::num::Wrapping<u8>;
        scope 32 {
            debug left_val => _176;
            debug right_val => _177;
            let _180: core::panicking::AssertKind;
            scope 33 {
                debug kind => _180;
            }
        }
    }
    scope 34 {
        debug tmp => _183;
        let _192: &std::num::Wrapping<u8>;
        let _193: &std::num::Wrapping<u8>;
        let mut _2503: &std::num::Wrapping<u8>;
        let mut _2504: &std::num::Wrapping<u8>;
        scope 35 {
            debug left_val => _192;
            debug right_val => _193;
            let _196: core::panicking::AssertKind;
            scope 36 {
                debug kind => _196;
            }
        }
    }
    scope 37 {
        debug tmp => _199;
        let _209: &std::num::Wrapping<u16>;
        let _210: &std::num::Wrapping<u16>;
        let mut _2502: &std::num::Wrapping<u16>;
        scope 38 {
            debug left_val => _209;
            debug right_val => _210;
            let _213: core::panicking::AssertKind;
            scope 39 {
                debug kind => _213;
            }
        }
    }
    scope 40 {
        debug tmp => _216;
        let _225: &std::num::Wrapping<u16>;
        let _226: &std::num::Wrapping<u16>;
        let mut _2500: &std::num::Wrapping<u16>;
        let mut _2501: &std::num::Wrapping<u16>;
        scope 41 {
            debug left_val => _225;
            debug right_val => _226;
            let _229: core::panicking::AssertKind;
            scope 42 {
                debug kind => _229;
            }
        }
    }
    scope 43 {
        debug tmp => _232;
        let _242: &std::num::Wrapping<u32>;
        let _243: &std::num::Wrapping<u32>;
        let mut _2499: &std::num::Wrapping<u32>;
        scope 44 {
            debug left_val => _242;
            debug right_val => _243;
            let _246: core::panicking::AssertKind;
            scope 45 {
                debug kind => _246;
            }
        }
    }
    scope 46 {
        debug tmp => _249;
        let _258: &std::num::Wrapping<u32>;
        let _259: &std::num::Wrapping<u32>;
        let mut _2497: &std::num::Wrapping<u32>;
        let mut _2498: &std::num::Wrapping<u32>;
        scope 47 {
            debug left_val => _258;
            debug right_val => _259;
            let _262: core::panicking::AssertKind;
            scope 48 {
                debug kind => _262;
            }
        }
    }
    scope 49 {
        debug tmp => _265;
        let _275: &std::num::Wrapping<u64>;
        let _276: &std::num::Wrapping<u64>;
        let mut _2496: &std::num::Wrapping<u64>;
        scope 50 {
            debug left_val => _275;
            debug right_val => _276;
            let _279: core::panicking::AssertKind;
            scope 51 {
                debug kind => _279;
            }
        }
    }
    scope 52 {
        debug tmp => _282;
        let _291: &std::num::Wrapping<u64>;
        let _292: &std::num::Wrapping<u64>;
        let mut _2494: &std::num::Wrapping<u64>;
        let mut _2495: &std::num::Wrapping<u64>;
        scope 53 {
            debug left_val => _291;
            debug right_val => _292;
            let _295: core::panicking::AssertKind;
            scope 54 {
                debug kind => _295;
            }
        }
    }
    scope 55 {
        debug tmp => _298;
        let _308: &std::num::Wrapping<usize>;
        let _309: &std::num::Wrapping<usize>;
        let mut _2493: &std::num::Wrapping<usize>;
        scope 56 {
            debug left_val => _308;
            debug right_val => _309;
            let _312: core::panicking::AssertKind;
            scope 57 {
                debug kind => _312;
            }
        }
    }
    scope 58 {
        debug tmp => _315;
        let _324: &std::num::Wrapping<usize>;
        let _325: &std::num::Wrapping<usize>;
        let mut _2491: &std::num::Wrapping<usize>;
        let mut _2492: &std::num::Wrapping<usize>;
        scope 59 {
            debug left_val => _324;
            debug right_val => _325;
            let _328: core::panicking::AssertKind;
            scope 60 {
                debug kind => _328;
            }
        }
    }
    scope 61 {
        debug tmp => _331;
        let _341: &std::num::Wrapping<i8>;
        let _342: &std::num::Wrapping<i8>;
        let mut _2490: &std::num::Wrapping<i8>;
        scope 62 {
            debug left_val => _341;
            debug right_val => _342;
            let _345: core::panicking::AssertKind;
            scope 63 {
                debug kind => _345;
            }
        }
    }
    scope 64 {
        debug tmp => _348;
        let _357: &std::num::Wrapping<i8>;
        let _358: &std::num::Wrapping<i8>;
        let mut _2488: &std::num::Wrapping<i8>;
        let mut _2489: &std::num::Wrapping<i8>;
        scope 65 {
            debug left_val => _357;
            debug right_val => _358;
            let _361: core::panicking::AssertKind;
            scope 66 {
                debug kind => _361;
            }
        }
    }
    scope 67 {
        debug tmp => _364;
        let _374: &std::num::Wrapping<i16>;
        let _375: &std::num::Wrapping<i16>;
        let mut _2487: &std::num::Wrapping<i16>;
        scope 68 {
            debug left_val => _374;
            debug right_val => _375;
            let _378: core::panicking::AssertKind;
            scope 69 {
                debug kind => _378;
            }
        }
    }
    scope 70 {
        debug tmp => _381;
        let _390: &std::num::Wrapping<i16>;
        let _391: &std::num::Wrapping<i16>;
        let mut _2485: &std::num::Wrapping<i16>;
        let mut _2486: &std::num::Wrapping<i16>;
        scope 71 {
            debug left_val => _390;
            debug right_val => _391;
            let _394: core::panicking::AssertKind;
            scope 72 {
                debug kind => _394;
            }
        }
    }
    scope 73 {
        debug tmp => _397;
        let _407: &std::num::Wrapping<i32>;
        let _408: &std::num::Wrapping<i32>;
        let mut _2484: &std::num::Wrapping<i32>;
        scope 74 {
            debug left_val => _407;
            debug right_val => _408;
            let _411: core::panicking::AssertKind;
            scope 75 {
                debug kind => _411;
            }
        }
    }
    scope 76 {
        debug tmp => _414;
        let _423: &std::num::Wrapping<i32>;
        let _424: &std::num::Wrapping<i32>;
        let mut _2482: &std::num::Wrapping<i32>;
        let mut _2483: &std::num::Wrapping<i32>;
        scope 77 {
            debug left_val => _423;
            debug right_val => _424;
            let _427: core::panicking::AssertKind;
            scope 78 {
                debug kind => _427;
            }
        }
    }
    scope 79 {
        debug tmp => _430;
        let _440: &std::num::Wrapping<i64>;
        let _441: &std::num::Wrapping<i64>;
        let mut _2481: &std::num::Wrapping<i64>;
        scope 80 {
            debug left_val => _440;
            debug right_val => _441;
            let _444: core::panicking::AssertKind;
            scope 81 {
                debug kind => _444;
            }
        }
    }
    scope 82 {
        debug tmp => _447;
        let _456: &std::num::Wrapping<i64>;
        let _457: &std::num::Wrapping<i64>;
        let mut _2479: &std::num::Wrapping<i64>;
        let mut _2480: &std::num::Wrapping<i64>;
        scope 83 {
            debug left_val => _456;
            debug right_val => _457;
            let _460: core::panicking::AssertKind;
            scope 84 {
                debug kind => _460;
            }
        }
    }
    scope 85 {
        debug tmp => _463;
        let _473: &std::num::Wrapping<isize>;
        let _474: &std::num::Wrapping<isize>;
        let mut _2478: &std::num::Wrapping<isize>;
        scope 86 {
            debug left_val => _473;
            debug right_val => _474;
            let _477: core::panicking::AssertKind;
            scope 87 {
                debug kind => _477;
            }
        }
    }
    scope 88 {
        debug tmp => _480;
        let _489: &std::num::Wrapping<isize>;
        let _490: &std::num::Wrapping<isize>;
        let mut _2476: &std::num::Wrapping<isize>;
        let mut _2477: &std::num::Wrapping<isize>;
        scope 89 {
            debug left_val => _489;
            debug right_val => _490;
            let _493: core::panicking::AssertKind;
            scope 90 {
                debug kind => _493;
            }
        }
    }
    scope 91 {
        debug tmp => _496;
        let _506: &std::num::Wrapping<u8>;
        let _507: &std::num::Wrapping<u8>;
        let mut _2475: &std::num::Wrapping<u8>;
        scope 92 {
            debug left_val => _506;
            debug right_val => _507;
            let _510: core::panicking::AssertKind;
            scope 93 {
                debug kind => _510;
            }
        }
    }
    scope 94 {
        debug tmp => _513;
        let _522: &std::num::Wrapping<u8>;
        let _523: &std::num::Wrapping<u8>;
        let mut _2473: &std::num::Wrapping<u8>;
        let mut _2474: &std::num::Wrapping<u8>;
        scope 95 {
            debug left_val => _522;
            debug right_val => _523;
            let _526: core::panicking::AssertKind;
            scope 96 {
                debug kind => _526;
            }
        }
    }
    scope 97 {
        debug tmp => _529;
        let _539: &std::num::Wrapping<u16>;
        let _540: &std::num::Wrapping<u16>;
        let mut _2472: &std::num::Wrapping<u16>;
        scope 98 {
            debug left_val => _539;
            debug right_val => _540;
            let _543: core::panicking::AssertKind;
            scope 99 {
                debug kind => _543;
            }
        }
    }
    scope 100 {
        debug tmp => _546;
        let _555: &std::num::Wrapping<u16>;
        let _556: &std::num::Wrapping<u16>;
        let mut _2470: &std::num::Wrapping<u16>;
        let mut _2471: &std::num::Wrapping<u16>;
        scope 101 {
            debug left_val => _555;
            debug right_val => _556;
            let _559: core::panicking::AssertKind;
            scope 102 {
                debug kind => _559;
            }
        }
    }
    scope 103 {
        debug tmp => _562;
        let _572: &std::num::Wrapping<u32>;
        let _573: &std::num::Wrapping<u32>;
        let mut _2469: &std::num::Wrapping<u32>;
        scope 104 {
            debug left_val => _572;
            debug right_val => _573;
            let _576: core::panicking::AssertKind;
            scope 105 {
                debug kind => _576;
            }
        }
    }
    scope 106 {
        debug tmp => _579;
        let _588: &std::num::Wrapping<u32>;
        let _589: &std::num::Wrapping<u32>;
        let mut _2467: &std::num::Wrapping<u32>;
        let mut _2468: &std::num::Wrapping<u32>;
        scope 107 {
            debug left_val => _588;
            debug right_val => _589;
            let _592: core::panicking::AssertKind;
            scope 108 {
                debug kind => _592;
            }
        }
    }
    scope 109 {
        debug tmp => _595;
        let _605: &std::num::Wrapping<u64>;
        let _606: &std::num::Wrapping<u64>;
        let mut _2466: &std::num::Wrapping<u64>;
        scope 110 {
            debug left_val => _605;
            debug right_val => _606;
            let _609: core::panicking::AssertKind;
            scope 111 {
                debug kind => _609;
            }
        }
    }
    scope 112 {
        debug tmp => _612;
        let _621: &std::num::Wrapping<u64>;
        let _622: &std::num::Wrapping<u64>;
        let mut _2464: &std::num::Wrapping<u64>;
        let mut _2465: &std::num::Wrapping<u64>;
        scope 113 {
            debug left_val => _621;
            debug right_val => _622;
            let _625: core::panicking::AssertKind;
            scope 114 {
                debug kind => _625;
            }
        }
    }
    scope 115 {
        debug tmp => _628;
        let _638: &std::num::Wrapping<usize>;
        let _639: &std::num::Wrapping<usize>;
        let mut _2463: &std::num::Wrapping<usize>;
        scope 116 {
            debug left_val => _638;
            debug right_val => _639;
            let _642: core::panicking::AssertKind;
            scope 117 {
                debug kind => _642;
            }
        }
    }
    scope 118 {
        debug tmp => _645;
        let _654: &std::num::Wrapping<usize>;
        let _655: &std::num::Wrapping<usize>;
        let mut _2461: &std::num::Wrapping<usize>;
        let mut _2462: &std::num::Wrapping<usize>;
        scope 119 {
            debug left_val => _654;
            debug right_val => _655;
            let _658: core::panicking::AssertKind;
            scope 120 {
                debug kind => _658;
            }
        }
    }
    scope 121 {
        debug tmp => _661;
        let _671: &std::num::Wrapping<i8>;
        let _672: &std::num::Wrapping<i8>;
        let mut _2460: &std::num::Wrapping<i8>;
        scope 122 {
            debug left_val => _671;
            debug right_val => _672;
            let _675: core::panicking::AssertKind;
            scope 123 {
                debug kind => _675;
            }
        }
    }
    scope 124 {
        debug tmp => _678;
        let _687: &std::num::Wrapping<i8>;
        let _688: &std::num::Wrapping<i8>;
        let mut _2458: &std::num::Wrapping<i8>;
        let mut _2459: &std::num::Wrapping<i8>;
        scope 125 {
            debug left_val => _687;
            debug right_val => _688;
            let _691: core::panicking::AssertKind;
            scope 126 {
                debug kind => _691;
            }
        }
    }
    scope 127 {
        debug tmp => _694;
        let _704: &std::num::Wrapping<i16>;
        let _705: &std::num::Wrapping<i16>;
        let mut _2457: &std::num::Wrapping<i16>;
        scope 128 {
            debug left_val => _704;
            debug right_val => _705;
            let _708: core::panicking::AssertKind;
            scope 129 {
                debug kind => _708;
            }
        }
    }
    scope 130 {
        debug tmp => _711;
        let _720: &std::num::Wrapping<i16>;
        let _721: &std::num::Wrapping<i16>;
        let mut _2455: &std::num::Wrapping<i16>;
        let mut _2456: &std::num::Wrapping<i16>;
        scope 131 {
            debug left_val => _720;
            debug right_val => _721;
            let _724: core::panicking::AssertKind;
            scope 132 {
                debug kind => _724;
            }
        }
    }
    scope 133 {
        debug tmp => _727;
        let _737: &std::num::Wrapping<i32>;
        let _738: &std::num::Wrapping<i32>;
        let mut _2454: &std::num::Wrapping<i32>;
        scope 134 {
            debug left_val => _737;
            debug right_val => _738;
            let _741: core::panicking::AssertKind;
            scope 135 {
                debug kind => _741;
            }
        }
    }
    scope 136 {
        debug tmp => _744;
        let _753: &std::num::Wrapping<i32>;
        let _754: &std::num::Wrapping<i32>;
        let mut _2452: &std::num::Wrapping<i32>;
        let mut _2453: &std::num::Wrapping<i32>;
        scope 137 {
            debug left_val => _753;
            debug right_val => _754;
            let _757: core::panicking::AssertKind;
            scope 138 {
                debug kind => _757;
            }
        }
    }
    scope 139 {
        debug tmp => _760;
        let _770: &std::num::Wrapping<i64>;
        let _771: &std::num::Wrapping<i64>;
        let mut _2451: &std::num::Wrapping<i64>;
        scope 140 {
            debug left_val => _770;
            debug right_val => _771;
            let _774: core::panicking::AssertKind;
            scope 141 {
                debug kind => _774;
            }
        }
    }
    scope 142 {
        debug tmp => _777;
        let _786: &std::num::Wrapping<i64>;
        let _787: &std::num::Wrapping<i64>;
        let mut _2449: &std::num::Wrapping<i64>;
        let mut _2450: &std::num::Wrapping<i64>;
        scope 143 {
            debug left_val => _786;
            debug right_val => _787;
            let _790: core::panicking::AssertKind;
            scope 144 {
                debug kind => _790;
            }
        }
    }
    scope 145 {
        debug tmp => _793;
        let _803: &std::num::Wrapping<isize>;
        let _804: &std::num::Wrapping<isize>;
        let mut _2448: &std::num::Wrapping<isize>;
        scope 146 {
            debug left_val => _803;
            debug right_val => _804;
            let _807: core::panicking::AssertKind;
            scope 147 {
                debug kind => _807;
            }
        }
    }
    scope 148 {
        debug tmp => _810;
        let _819: &std::num::Wrapping<isize>;
        let _820: &std::num::Wrapping<isize>;
        let mut _2446: &std::num::Wrapping<isize>;
        let mut _2447: &std::num::Wrapping<isize>;
        scope 149 {
            debug left_val => _819;
            debug right_val => _820;
            let _823: core::panicking::AssertKind;
            scope 150 {
                debug kind => _823;
            }
        }
    }
    scope 151 {
        debug tmp => _826;
        let _836: &std::num::Wrapping<u8>;
        let _837: &std::num::Wrapping<u8>;
        let mut _2445: &std::num::Wrapping<u8>;
        scope 152 {
            debug left_val => _836;
            debug right_val => _837;
            let _840: core::panicking::AssertKind;
            scope 153 {
                debug kind => _840;
            }
        }
    }
    scope 154 {
        debug tmp => _843;
        let _852: &std::num::Wrapping<u8>;
        let _853: &std::num::Wrapping<u8>;
        let mut _2443: &std::num::Wrapping<u8>;
        let mut _2444: &std::num::Wrapping<u8>;
        scope 155 {
            debug left_val => _852;
            debug right_val => _853;
            let _856: core::panicking::AssertKind;
            scope 156 {
                debug kind => _856;
            }
        }
    }
    scope 157 {
        debug tmp => _859;
        let _869: &std::num::Wrapping<u16>;
        let _870: &std::num::Wrapping<u16>;
        let mut _2442: &std::num::Wrapping<u16>;
        scope 158 {
            debug left_val => _869;
            debug right_val => _870;
            let _873: core::panicking::AssertKind;
            scope 159 {
                debug kind => _873;
            }
        }
    }
    scope 160 {
        debug tmp => _876;
        let _885: &std::num::Wrapping<u16>;
        let _886: &std::num::Wrapping<u16>;
        let mut _2440: &std::num::Wrapping<u16>;
        let mut _2441: &std::num::Wrapping<u16>;
        scope 161 {
            debug left_val => _885;
            debug right_val => _886;
            let _889: core::panicking::AssertKind;
            scope 162 {
                debug kind => _889;
            }
        }
    }
    scope 163 {
        debug tmp => _892;
        let _902: &std::num::Wrapping<u32>;
        let _903: &std::num::Wrapping<u32>;
        let mut _2439: &std::num::Wrapping<u32>;
        scope 164 {
            debug left_val => _902;
            debug right_val => _903;
            let _906: core::panicking::AssertKind;
            scope 165 {
                debug kind => _906;
            }
        }
    }
    scope 166 {
        debug tmp => _909;
        let _918: &std::num::Wrapping<u32>;
        let _919: &std::num::Wrapping<u32>;
        let mut _2437: &std::num::Wrapping<u32>;
        let mut _2438: &std::num::Wrapping<u32>;
        scope 167 {
            debug left_val => _918;
            debug right_val => _919;
            let _922: core::panicking::AssertKind;
            scope 168 {
                debug kind => _922;
            }
        }
    }
    scope 169 {
        debug tmp => _925;
        let _935: &std::num::Wrapping<u64>;
        let _936: &std::num::Wrapping<u64>;
        let mut _2436: &std::num::Wrapping<u64>;
        scope 170 {
            debug left_val => _935;
            debug right_val => _936;
            let _939: core::panicking::AssertKind;
            scope 171 {
                debug kind => _939;
            }
        }
    }
    scope 172 {
        debug tmp => _942;
        let _951: &std::num::Wrapping<u64>;
        let _952: &std::num::Wrapping<u64>;
        let mut _2434: &std::num::Wrapping<u64>;
        let mut _2435: &std::num::Wrapping<u64>;
        scope 173 {
            debug left_val => _951;
            debug right_val => _952;
            let _955: core::panicking::AssertKind;
            scope 174 {
                debug kind => _955;
            }
        }
    }
    scope 175 {
        debug tmp => _958;
        let _968: &std::num::Wrapping<usize>;
        let _969: &std::num::Wrapping<usize>;
        let mut _2433: &std::num::Wrapping<usize>;
        scope 176 {
            debug left_val => _968;
            debug right_val => _969;
            let _972: core::panicking::AssertKind;
            scope 177 {
                debug kind => _972;
            }
        }
    }
    scope 178 {
        debug tmp => _975;
        let _984: &std::num::Wrapping<usize>;
        let _985: &std::num::Wrapping<usize>;
        let mut _2431: &std::num::Wrapping<usize>;
        let mut _2432: &std::num::Wrapping<usize>;
        scope 179 {
            debug left_val => _984;
            debug right_val => _985;
            let _988: core::panicking::AssertKind;
            scope 180 {
                debug kind => _988;
            }
        }
    }
    scope 181 {
        debug tmp => _991;
        let _1001: &std::num::Wrapping<i8>;
        let _1002: &std::num::Wrapping<i8>;
        let mut _2430: &std::num::Wrapping<i8>;
        scope 182 {
            debug left_val => _1001;
            debug right_val => _1002;
            let _1005: core::panicking::AssertKind;
            scope 183 {
                debug kind => _1005;
            }
        }
    }
    scope 184 {
        debug tmp => _1008;
        let _1017: &std::num::Wrapping<i8>;
        let _1018: &std::num::Wrapping<i8>;
        let mut _2428: &std::num::Wrapping<i8>;
        let mut _2429: &std::num::Wrapping<i8>;
        scope 185 {
            debug left_val => _1017;
            debug right_val => _1018;
            let _1021: core::panicking::AssertKind;
            scope 186 {
                debug kind => _1021;
            }
        }
    }
    scope 187 {
        debug tmp => _1024;
        let _1034: &std::num::Wrapping<i16>;
        let _1035: &std::num::Wrapping<i16>;
        let mut _2427: &std::num::Wrapping<i16>;
        scope 188 {
            debug left_val => _1034;
            debug right_val => _1035;
            let _1038: core::panicking::AssertKind;
            scope 189 {
                debug kind => _1038;
            }
        }
    }
    scope 190 {
        debug tmp => _1041;
        let _1050: &std::num::Wrapping<i16>;
        let _1051: &std::num::Wrapping<i16>;
        let mut _2425: &std::num::Wrapping<i16>;
        let mut _2426: &std::num::Wrapping<i16>;
        scope 191 {
            debug left_val => _1050;
            debug right_val => _1051;
            let _1054: core::panicking::AssertKind;
            scope 192 {
                debug kind => _1054;
            }
        }
    }
    scope 193 {
        debug tmp => _1057;
        let _1067: &std::num::Wrapping<i32>;
        let _1068: &std::num::Wrapping<i32>;
        let mut _2424: &std::num::Wrapping<i32>;
        scope 194 {
            debug left_val => _1067;
            debug right_val => _1068;
            let _1071: core::panicking::AssertKind;
            scope 195 {
                debug kind => _1071;
            }
        }
    }
    scope 196 {
        debug tmp => _1074;
        let _1083: &std::num::Wrapping<i32>;
        let _1084: &std::num::Wrapping<i32>;
        let mut _2422: &std::num::Wrapping<i32>;
        let mut _2423: &std::num::Wrapping<i32>;
        scope 197 {
            debug left_val => _1083;
            debug right_val => _1084;
            let _1087: core::panicking::AssertKind;
            scope 198 {
                debug kind => _1087;
            }
        }
    }
    scope 199 {
        debug tmp => _1090;
        let _1100: &std::num::Wrapping<i64>;
        let _1101: &std::num::Wrapping<i64>;
        let mut _2421: &std::num::Wrapping<i64>;
        scope 200 {
            debug left_val => _1100;
            debug right_val => _1101;
            let _1104: core::panicking::AssertKind;
            scope 201 {
                debug kind => _1104;
            }
        }
    }
    scope 202 {
        debug tmp => _1107;
        let _1116: &std::num::Wrapping<i64>;
        let _1117: &std::num::Wrapping<i64>;
        let mut _2419: &std::num::Wrapping<i64>;
        let mut _2420: &std::num::Wrapping<i64>;
        scope 203 {
            debug left_val => _1116;
            debug right_val => _1117;
            let _1120: core::panicking::AssertKind;
            scope 204 {
                debug kind => _1120;
            }
        }
    }
    scope 205 {
        debug tmp => _1123;
        let _1133: &std::num::Wrapping<isize>;
        let _1134: &std::num::Wrapping<isize>;
        let mut _2418: &std::num::Wrapping<isize>;
        scope 206 {
            debug left_val => _1133;
            debug right_val => _1134;
            let _1137: core::panicking::AssertKind;
            scope 207 {
                debug kind => _1137;
            }
        }
    }
    scope 208 {
        debug tmp => _1140;
        let _1149: &std::num::Wrapping<isize>;
        let _1150: &std::num::Wrapping<isize>;
        let mut _2416: &std::num::Wrapping<isize>;
        let mut _2417: &std::num::Wrapping<isize>;
        scope 209 {
            debug left_val => _1149;
            debug right_val => _1150;
            let _1153: core::panicking::AssertKind;
            scope 210 {
                debug kind => _1153;
            }
        }
    }
    scope 211 {
        debug tmp => _1156;
        let _1166: &std::num::Wrapping<i8>;
        let _1167: &std::num::Wrapping<i8>;
        let mut _2415: &std::num::Wrapping<i8>;
        scope 212 {
            debug left_val => _1166;
            debug right_val => _1167;
            let _1170: core::panicking::AssertKind;
            scope 213 {
                debug kind => _1170;
            }
        }
    }
    scope 214 {
        debug tmp => _1173;
        let _1182: &std::num::Wrapping<i8>;
        let _1183: &std::num::Wrapping<i8>;
        let mut _2413: &std::num::Wrapping<i8>;
        let mut _2414: &std::num::Wrapping<i8>;
        scope 215 {
            debug left_val => _1182;
            debug right_val => _1183;
            let _1186: core::panicking::AssertKind;
            scope 216 {
                debug kind => _1186;
            }
        }
    }
    scope 217 {
        debug tmp => _1189;
        let _1199: &std::num::Wrapping<i16>;
        let _1200: &std::num::Wrapping<i16>;
        let mut _2412: &std::num::Wrapping<i16>;
        scope 218 {
            debug left_val => _1199;
            debug right_val => _1200;
            let _1203: core::panicking::AssertKind;
            scope 219 {
                debug kind => _1203;
            }
        }
    }
    scope 220 {
        debug tmp => _1206;
        let _1215: &std::num::Wrapping<i16>;
        let _1216: &std::num::Wrapping<i16>;
        let mut _2410: &std::num::Wrapping<i16>;
        let mut _2411: &std::num::Wrapping<i16>;
        scope 221 {
            debug left_val => _1215;
            debug right_val => _1216;
            let _1219: core::panicking::AssertKind;
            scope 222 {
                debug kind => _1219;
            }
        }
    }
    scope 223 {
        debug tmp => _1222;
        let _1232: &std::num::Wrapping<i32>;
        let _1233: &std::num::Wrapping<i32>;
        let mut _2409: &std::num::Wrapping<i32>;
        scope 224 {
            debug left_val => _1232;
            debug right_val => _1233;
            let _1236: core::panicking::AssertKind;
            scope 225 {
                debug kind => _1236;
            }
        }
    }
    scope 226 {
        debug tmp => _1239;
        let _1248: &std::num::Wrapping<i32>;
        let _1249: &std::num::Wrapping<i32>;
        let mut _2407: &std::num::Wrapping<i32>;
        let mut _2408: &std::num::Wrapping<i32>;
        scope 227 {
            debug left_val => _1248;
            debug right_val => _1249;
            let _1252: core::panicking::AssertKind;
            scope 228 {
                debug kind => _1252;
            }
        }
    }
    scope 229 {
        debug tmp => _1255;
        let _1265: &std::num::Wrapping<i64>;
        let _1266: &std::num::Wrapping<i64>;
        let mut _2406: &std::num::Wrapping<i64>;
        scope 230 {
            debug left_val => _1265;
            debug right_val => _1266;
            let _1269: core::panicking::AssertKind;
            scope 231 {
                debug kind => _1269;
            }
        }
    }
    scope 232 {
        debug tmp => _1272;
        let _1281: &std::num::Wrapping<i64>;
        let _1282: &std::num::Wrapping<i64>;
        let mut _2404: &std::num::Wrapping<i64>;
        let mut _2405: &std::num::Wrapping<i64>;
        scope 233 {
            debug left_val => _1281;
            debug right_val => _1282;
            let _1285: core::panicking::AssertKind;
            scope 234 {
                debug kind => _1285;
            }
        }
    }
    scope 235 {
        debug tmp => _1288;
        let _1298: &std::num::Wrapping<isize>;
        let _1299: &std::num::Wrapping<isize>;
        let mut _2403: &std::num::Wrapping<isize>;
        scope 236 {
            debug left_val => _1298;
            debug right_val => _1299;
            let _1302: core::panicking::AssertKind;
            scope 237 {
                debug kind => _1302;
            }
        }
    }
    scope 238 {
        debug tmp => _1305;
        let _1314: &std::num::Wrapping<isize>;
        let _1315: &std::num::Wrapping<isize>;
        let mut _2401: &std::num::Wrapping<isize>;
        let mut _2402: &std::num::Wrapping<isize>;
        scope 239 {
            debug left_val => _1314;
            debug right_val => _1315;
            let _1318: core::panicking::AssertKind;
            scope 240 {
                debug kind => _1318;
            }
        }
    }
    scope 241 {
        debug tmp => _1321;
        let _1331: &std::num::Wrapping<i8>;
        let _1332: &std::num::Wrapping<i8>;
        let mut _2400: &std::num::Wrapping<i8>;
        scope 242 {
            debug left_val => _1331;
            debug right_val => _1332;
            let _1335: core::panicking::AssertKind;
            scope 243 {
                debug kind => _1335;
            }
        }
    }
    scope 244 {
        debug tmp => _1338;
        let _1347: &std::num::Wrapping<i8>;
        let _1348: &std::num::Wrapping<i8>;
        let mut _2398: &std::num::Wrapping<i8>;
        let mut _2399: &std::num::Wrapping<i8>;
        scope 245 {
            debug left_val => _1347;
            debug right_val => _1348;
            let _1351: core::panicking::AssertKind;
            scope 246 {
                debug kind => _1351;
            }
        }
    }
    scope 247 {
        debug tmp => _1354;
        let _1364: &std::num::Wrapping<i16>;
        let _1365: &std::num::Wrapping<i16>;
        let mut _2397: &std::num::Wrapping<i16>;
        scope 248 {
            debug left_val => _1364;
            debug right_val => _1365;
            let _1368: core::panicking::AssertKind;
            scope 249 {
                debug kind => _1368;
            }
        }
    }
    scope 250 {
        debug tmp => _1371;
        let _1380: &std::num::Wrapping<i16>;
        let _1381: &std::num::Wrapping<i16>;
        let mut _2395: &std::num::Wrapping<i16>;
        let mut _2396: &std::num::Wrapping<i16>;
        scope 251 {
            debug left_val => _1380;
            debug right_val => _1381;
            let _1384: core::panicking::AssertKind;
            scope 252 {
                debug kind => _1384;
            }
        }
    }
    scope 253 {
        debug tmp => _1387;
        let _1397: &std::num::Wrapping<i32>;
        let _1398: &std::num::Wrapping<i32>;
        let mut _2394: &std::num::Wrapping<i32>;
        scope 254 {
            debug left_val => _1397;
            debug right_val => _1398;
            let _1401: core::panicking::AssertKind;
            scope 255 {
                debug kind => _1401;
            }
        }
    }
    scope 256 {
        debug tmp => _1404;
        let _1413: &std::num::Wrapping<i32>;
        let _1414: &std::num::Wrapping<i32>;
        let mut _2392: &std::num::Wrapping<i32>;
        let mut _2393: &std::num::Wrapping<i32>;
        scope 257 {
            debug left_val => _1413;
            debug right_val => _1414;
            let _1417: core::panicking::AssertKind;
            scope 258 {
                debug kind => _1417;
            }
        }
    }
    scope 259 {
        debug tmp => _1420;
        let _1430: &std::num::Wrapping<i64>;
        let _1431: &std::num::Wrapping<i64>;
        let mut _2391: &std::num::Wrapping<i64>;
        scope 260 {
            debug left_val => _1430;
            debug right_val => _1431;
            let _1434: core::panicking::AssertKind;
            scope 261 {
                debug kind => _1434;
            }
        }
    }
    scope 262 {
        debug tmp => _1437;
        let _1446: &std::num::Wrapping<i64>;
        let _1447: &std::num::Wrapping<i64>;
        let mut _2389: &std::num::Wrapping<i64>;
        let mut _2390: &std::num::Wrapping<i64>;
        scope 263 {
            debug left_val => _1446;
            debug right_val => _1447;
            let _1450: core::panicking::AssertKind;
            scope 264 {
                debug kind => _1450;
            }
        }
    }
    scope 265 {
        debug tmp => _1453;
        let _1463: &std::num::Wrapping<isize>;
        let _1464: &std::num::Wrapping<isize>;
        let mut _2388: &std::num::Wrapping<isize>;
        scope 266 {
            debug left_val => _1463;
            debug right_val => _1464;
            let _1467: core::panicking::AssertKind;
            scope 267 {
                debug kind => _1467;
            }
        }
    }
    scope 268 {
        debug tmp => _1470;
        let _1479: &std::num::Wrapping<isize>;
        let _1480: &std::num::Wrapping<isize>;
        let mut _2386: &std::num::Wrapping<isize>;
        let mut _2387: &std::num::Wrapping<isize>;
        scope 269 {
            debug left_val => _1479;
            debug right_val => _1480;
            let _1483: core::panicking::AssertKind;
            scope 270 {
                debug kind => _1483;
            }
        }
    }
    scope 271 {
        debug tmp => _1486;
        let _1496: &std::num::Wrapping<u8>;
        let _1497: &std::num::Wrapping<u8>;
        let mut _2385: &std::num::Wrapping<u8>;
        scope 272 {
            debug left_val => _1496;
            debug right_val => _1497;
            let _1500: core::panicking::AssertKind;
            scope 273 {
                debug kind => _1500;
            }
        }
    }
    scope 274 {
        debug tmp => _1503;
        let _1512: &std::num::Wrapping<u8>;
        let _1513: &std::num::Wrapping<u8>;
        let mut _2383: &std::num::Wrapping<u8>;
        let mut _2384: &std::num::Wrapping<u8>;
        scope 275 {
            debug left_val => _1512;
            debug right_val => _1513;
            let _1516: core::panicking::AssertKind;
            scope 276 {
                debug kind => _1516;
            }
        }
    }
    scope 277 {
        debug tmp => _1519;
        let _1529: &std::num::Wrapping<u16>;
        let _1530: &std::num::Wrapping<u16>;
        let mut _2382: &std::num::Wrapping<u16>;
        scope 278 {
            debug left_val => _1529;
            debug right_val => _1530;
            let _1533: core::panicking::AssertKind;
            scope 279 {
                debug kind => _1533;
            }
        }
    }
    scope 280 {
        debug tmp => _1536;
        let _1545: &std::num::Wrapping<u16>;
        let _1546: &std::num::Wrapping<u16>;
        let mut _2380: &std::num::Wrapping<u16>;
        let mut _2381: &std::num::Wrapping<u16>;
        scope 281 {
            debug left_val => _1545;
            debug right_val => _1546;
            let _1549: core::panicking::AssertKind;
            scope 282 {
                debug kind => _1549;
            }
        }
    }
    scope 283 {
        debug tmp => _1552;
        let _1562: &std::num::Wrapping<u32>;
        let _1563: &std::num::Wrapping<u32>;
        let mut _2379: &std::num::Wrapping<u32>;
        scope 284 {
            debug left_val => _1562;
            debug right_val => _1563;
            let _1566: core::panicking::AssertKind;
            scope 285 {
                debug kind => _1566;
            }
        }
    }
    scope 286 {
        debug tmp => _1569;
        let _1578: &std::num::Wrapping<u32>;
        let _1579: &std::num::Wrapping<u32>;
        let mut _2377: &std::num::Wrapping<u32>;
        let mut _2378: &std::num::Wrapping<u32>;
        scope 287 {
            debug left_val => _1578;
            debug right_val => _1579;
            let _1582: core::panicking::AssertKind;
            scope 288 {
                debug kind => _1582;
            }
        }
    }
    scope 289 {
        debug tmp => _1585;
        let _1595: &std::num::Wrapping<u64>;
        let _1596: &std::num::Wrapping<u64>;
        let mut _2376: &std::num::Wrapping<u64>;
        scope 290 {
            debug left_val => _1595;
            debug right_val => _1596;
            let _1599: core::panicking::AssertKind;
            scope 291 {
                debug kind => _1599;
            }
        }
    }
    scope 292 {
        debug tmp => _1602;
        let _1611: &std::num::Wrapping<u64>;
        let _1612: &std::num::Wrapping<u64>;
        let mut _2374: &std::num::Wrapping<u64>;
        let mut _2375: &std::num::Wrapping<u64>;
        scope 293 {
            debug left_val => _1611;
            debug right_val => _1612;
            let _1615: core::panicking::AssertKind;
            scope 294 {
                debug kind => _1615;
            }
        }
    }
    scope 295 {
        debug tmp => _1618;
        let _1628: &std::num::Wrapping<usize>;
        let _1629: &std::num::Wrapping<usize>;
        let mut _2373: &std::num::Wrapping<usize>;
        scope 296 {
            debug left_val => _1628;
            debug right_val => _1629;
            let _1632: core::panicking::AssertKind;
            scope 297 {
                debug kind => _1632;
            }
        }
    }
    scope 298 {
        debug tmp => _1635;
        let _1644: &std::num::Wrapping<usize>;
        let _1645: &std::num::Wrapping<usize>;
        let mut _2371: &std::num::Wrapping<usize>;
        let mut _2372: &std::num::Wrapping<usize>;
        scope 299 {
            debug left_val => _1644;
            debug right_val => _1645;
            let _1648: core::panicking::AssertKind;
            scope 300 {
                debug kind => _1648;
            }
        }
    }
    scope 301 {
        debug tmp => _1651;
        let _1661: &std::num::Wrapping<i8>;
        let _1662: &std::num::Wrapping<i8>;
        let mut _2370: &std::num::Wrapping<i8>;
        scope 302 {
            debug left_val => _1661;
            debug right_val => _1662;
            let _1665: core::panicking::AssertKind;
            scope 303 {
                debug kind => _1665;
            }
        }
    }
    scope 304 {
        debug tmp => _1668;
        let _1677: &std::num::Wrapping<i8>;
        let _1678: &std::num::Wrapping<i8>;
        let mut _2368: &std::num::Wrapping<i8>;
        let mut _2369: &std::num::Wrapping<i8>;
        scope 305 {
            debug left_val => _1677;
            debug right_val => _1678;
            let _1681: core::panicking::AssertKind;
            scope 306 {
                debug kind => _1681;
            }
        }
    }
    scope 307 {
        debug tmp => _1684;
        let _1694: &std::num::Wrapping<i16>;
        let _1695: &std::num::Wrapping<i16>;
        let mut _2367: &std::num::Wrapping<i16>;
        scope 308 {
            debug left_val => _1694;
            debug right_val => _1695;
            let _1698: core::panicking::AssertKind;
            scope 309 {
                debug kind => _1698;
            }
        }
    }
    scope 310 {
        debug tmp => _1701;
        let _1710: &std::num::Wrapping<i16>;
        let _1711: &std::num::Wrapping<i16>;
        let mut _2365: &std::num::Wrapping<i16>;
        let mut _2366: &std::num::Wrapping<i16>;
        scope 311 {
            debug left_val => _1710;
            debug right_val => _1711;
            let _1714: core::panicking::AssertKind;
            scope 312 {
                debug kind => _1714;
            }
        }
    }
    scope 313 {
        debug tmp => _1717;
        let _1727: &std::num::Wrapping<i32>;
        let _1728: &std::num::Wrapping<i32>;
        let mut _2364: &std::num::Wrapping<i32>;
        scope 314 {
            debug left_val => _1727;
            debug right_val => _1728;
            let _1731: core::panicking::AssertKind;
            scope 315 {
                debug kind => _1731;
            }
        }
    }
    scope 316 {
        debug tmp => _1734;
        let _1743: &std::num::Wrapping<i32>;
        let _1744: &std::num::Wrapping<i32>;
        let mut _2362: &std::num::Wrapping<i32>;
        let mut _2363: &std::num::Wrapping<i32>;
        scope 317 {
            debug left_val => _1743;
            debug right_val => _1744;
            let _1747: core::panicking::AssertKind;
            scope 318 {
                debug kind => _1747;
            }
        }
    }
    scope 319 {
        debug tmp => _1750;
        let _1760: &std::num::Wrapping<i64>;
        let _1761: &std::num::Wrapping<i64>;
        let mut _2361: &std::num::Wrapping<i64>;
        scope 320 {
            debug left_val => _1760;
            debug right_val => _1761;
            let _1764: core::panicking::AssertKind;
            scope 321 {
                debug kind => _1764;
            }
        }
    }
    scope 322 {
        debug tmp => _1767;
        let _1776: &std::num::Wrapping<i64>;
        let _1777: &std::num::Wrapping<i64>;
        let mut _2359: &std::num::Wrapping<i64>;
        let mut _2360: &std::num::Wrapping<i64>;
        scope 323 {
            debug left_val => _1776;
            debug right_val => _1777;
            let _1780: core::panicking::AssertKind;
            scope 324 {
                debug kind => _1780;
            }
        }
    }
    scope 325 {
        debug tmp => _1783;
        let _1793: &std::num::Wrapping<isize>;
        let _1794: &std::num::Wrapping<isize>;
        let mut _2358: &std::num::Wrapping<isize>;
        scope 326 {
            debug left_val => _1793;
            debug right_val => _1794;
            let _1797: core::panicking::AssertKind;
            scope 327 {
                debug kind => _1797;
            }
        }
    }
    scope 328 {
        debug tmp => _1800;
        let _1809: &std::num::Wrapping<isize>;
        let _1810: &std::num::Wrapping<isize>;
        let mut _2356: &std::num::Wrapping<isize>;
        let mut _2357: &std::num::Wrapping<isize>;
        scope 329 {
            debug left_val => _1809;
            debug right_val => _1810;
            let _1813: core::panicking::AssertKind;
            scope 330 {
                debug kind => _1813;
            }
        }
    }
    scope 331 {
        debug tmp => _1816;
        let _1826: &std::num::Wrapping<u8>;
        let _1827: &std::num::Wrapping<u8>;
        let mut _2355: &std::num::Wrapping<u8>;
        scope 332 {
            debug left_val => _1826;
            debug right_val => _1827;
            let _1830: core::panicking::AssertKind;
            scope 333 {
                debug kind => _1830;
            }
        }
    }
    scope 334 {
        debug tmp => _1833;
        let _1842: &std::num::Wrapping<u8>;
        let _1843: &std::num::Wrapping<u8>;
        let mut _2353: &std::num::Wrapping<u8>;
        let mut _2354: &std::num::Wrapping<u8>;
        scope 335 {
            debug left_val => _1842;
            debug right_val => _1843;
            let _1846: core::panicking::AssertKind;
            scope 336 {
                debug kind => _1846;
            }
        }
    }
    scope 337 {
        debug tmp => _1849;
        let _1859: &std::num::Wrapping<u16>;
        let _1860: &std::num::Wrapping<u16>;
        let mut _2352: &std::num::Wrapping<u16>;
        scope 338 {
            debug left_val => _1859;
            debug right_val => _1860;
            let _1863: core::panicking::AssertKind;
            scope 339 {
                debug kind => _1863;
            }
        }
    }
    scope 340 {
        debug tmp => _1866;
        let _1875: &std::num::Wrapping<u16>;
        let _1876: &std::num::Wrapping<u16>;
        let mut _2350: &std::num::Wrapping<u16>;
        let mut _2351: &std::num::Wrapping<u16>;
        scope 341 {
            debug left_val => _1875;
            debug right_val => _1876;
            let _1879: core::panicking::AssertKind;
            scope 342 {
                debug kind => _1879;
            }
        }
    }
    scope 343 {
        debug tmp => _1882;
        let _1892: &std::num::Wrapping<u32>;
        let _1893: &std::num::Wrapping<u32>;
        let mut _2349: &std::num::Wrapping<u32>;
        scope 344 {
            debug left_val => _1892;
            debug right_val => _1893;
            let _1896: core::panicking::AssertKind;
            scope 345 {
                debug kind => _1896;
            }
        }
    }
    scope 346 {
        debug tmp => _1899;
        let _1908: &std::num::Wrapping<u32>;
        let _1909: &std::num::Wrapping<u32>;
        let mut _2347: &std::num::Wrapping<u32>;
        let mut _2348: &std::num::Wrapping<u32>;
        scope 347 {
            debug left_val => _1908;
            debug right_val => _1909;
            let _1912: core::panicking::AssertKind;
            scope 348 {
                debug kind => _1912;
            }
        }
    }
    scope 349 {
        debug tmp => _1915;
        let _1925: &std::num::Wrapping<u64>;
        let _1926: &std::num::Wrapping<u64>;
        let mut _2346: &std::num::Wrapping<u64>;
        scope 350 {
            debug left_val => _1925;
            debug right_val => _1926;
            let _1929: core::panicking::AssertKind;
            scope 351 {
                debug kind => _1929;
            }
        }
    }
    scope 352 {
        debug tmp => _1932;
        let _1941: &std::num::Wrapping<u64>;
        let _1942: &std::num::Wrapping<u64>;
        let mut _2344: &std::num::Wrapping<u64>;
        let mut _2345: &std::num::Wrapping<u64>;
        scope 353 {
            debug left_val => _1941;
            debug right_val => _1942;
            let _1945: core::panicking::AssertKind;
            scope 354 {
                debug kind => _1945;
            }
        }
    }
    scope 355 {
        debug tmp => _1948;
        let _1958: &std::num::Wrapping<usize>;
        let _1959: &std::num::Wrapping<usize>;
        let mut _2343: &std::num::Wrapping<usize>;
        scope 356 {
            debug left_val => _1958;
            debug right_val => _1959;
            let _1962: core::panicking::AssertKind;
            scope 357 {
                debug kind => _1962;
            }
        }
    }
    scope 358 {
        debug tmp => _1965;
        let _1974: &std::num::Wrapping<usize>;
        let _1975: &std::num::Wrapping<usize>;
        let mut _2341: &std::num::Wrapping<usize>;
        let mut _2342: &std::num::Wrapping<usize>;
        scope 359 {
            debug left_val => _1974;
            debug right_val => _1975;
            let _1978: core::panicking::AssertKind;
            scope 360 {
                debug kind => _1978;
            }
        }
    }
    scope 361 {
        debug tmp => _1981;
        let _1991: &std::num::Wrapping<i8>;
        let _1992: &std::num::Wrapping<i8>;
        let mut _2340: &std::num::Wrapping<i8>;
        scope 362 {
            debug left_val => _1991;
            debug right_val => _1992;
            let _1995: core::panicking::AssertKind;
            scope 363 {
                debug kind => _1995;
            }
        }
    }
    scope 364 {
        debug tmp => _1998;
        let _2007: &std::num::Wrapping<i8>;
        let _2008: &std::num::Wrapping<i8>;
        let mut _2338: &std::num::Wrapping<i8>;
        let mut _2339: &std::num::Wrapping<i8>;
        scope 365 {
            debug left_val => _2007;
            debug right_val => _2008;
            let _2011: core::panicking::AssertKind;
            scope 366 {
                debug kind => _2011;
            }
        }
    }
    scope 367 {
        debug tmp => _2014;
        let _2024: &std::num::Wrapping<i16>;
        let _2025: &std::num::Wrapping<i16>;
        let mut _2337: &std::num::Wrapping<i16>;
        scope 368 {
            debug left_val => _2024;
            debug right_val => _2025;
            let _2028: core::panicking::AssertKind;
            scope 369 {
                debug kind => _2028;
            }
        }
    }
    scope 370 {
        debug tmp => _2031;
        let _2040: &std::num::Wrapping<i16>;
        let _2041: &std::num::Wrapping<i16>;
        let mut _2335: &std::num::Wrapping<i16>;
        let mut _2336: &std::num::Wrapping<i16>;
        scope 371 {
            debug left_val => _2040;
            debug right_val => _2041;
            let _2044: core::panicking::AssertKind;
            scope 372 {
                debug kind => _2044;
            }
        }
    }
    scope 373 {
        debug tmp => _2047;
        let _2057: &std::num::Wrapping<i32>;
        let _2058: &std::num::Wrapping<i32>;
        let mut _2334: &std::num::Wrapping<i32>;
        scope 374 {
            debug left_val => _2057;
            debug right_val => _2058;
            let _2061: core::panicking::AssertKind;
            scope 375 {
                debug kind => _2061;
            }
        }
    }
    scope 376 {
        debug tmp => _2064;
        let _2073: &std::num::Wrapping<i32>;
        let _2074: &std::num::Wrapping<i32>;
        let mut _2332: &std::num::Wrapping<i32>;
        let mut _2333: &std::num::Wrapping<i32>;
        scope 377 {
            debug left_val => _2073;
            debug right_val => _2074;
            let _2077: core::panicking::AssertKind;
            scope 378 {
                debug kind => _2077;
            }
        }
    }
    scope 379 {
        debug tmp => _2080;
        let _2090: &std::num::Wrapping<i64>;
        let _2091: &std::num::Wrapping<i64>;
        let mut _2331: &std::num::Wrapping<i64>;
        scope 380 {
            debug left_val => _2090;
            debug right_val => _2091;
            let _2094: core::panicking::AssertKind;
            scope 381 {
                debug kind => _2094;
            }
        }
    }
    scope 382 {
        debug tmp => _2097;
        let _2106: &std::num::Wrapping<i64>;
        let _2107: &std::num::Wrapping<i64>;
        let mut _2329: &std::num::Wrapping<i64>;
        let mut _2330: &std::num::Wrapping<i64>;
        scope 383 {
            debug left_val => _2106;
            debug right_val => _2107;
            let _2110: core::panicking::AssertKind;
            scope 384 {
                debug kind => _2110;
            }
        }
    }
    scope 385 {
        debug tmp => _2113;
        let _2123: &std::num::Wrapping<isize>;
        let _2124: &std::num::Wrapping<isize>;
        let mut _2328: &std::num::Wrapping<isize>;
        scope 386 {
            debug left_val => _2123;
            debug right_val => _2124;
            let _2127: core::panicking::AssertKind;
            scope 387 {
                debug kind => _2127;
            }
        }
    }
    scope 388 {
        debug tmp => _2130;
        let _2139: &std::num::Wrapping<isize>;
        let _2140: &std::num::Wrapping<isize>;
        let mut _2326: &std::num::Wrapping<isize>;
        let mut _2327: &std::num::Wrapping<isize>;
        scope 389 {
            debug left_val => _2139;
            debug right_val => _2140;
            let _2143: core::panicking::AssertKind;
            scope 390 {
                debug kind => _2143;
            }
        }
    }
    scope 391 {
        debug tmp => _2146;
        let _2156: &std::num::Wrapping<u8>;
        let _2157: &std::num::Wrapping<u8>;
        let mut _2325: &std::num::Wrapping<u8>;
        scope 392 {
            debug left_val => _2156;
            debug right_val => _2157;
            let _2160: core::panicking::AssertKind;
            scope 393 {
                debug kind => _2160;
            }
        }
    }
    scope 394 {
        debug tmp => _2163;
        let _2172: &std::num::Wrapping<u8>;
        let _2173: &std::num::Wrapping<u8>;
        let mut _2323: &std::num::Wrapping<u8>;
        let mut _2324: &std::num::Wrapping<u8>;
        scope 395 {
            debug left_val => _2172;
            debug right_val => _2173;
            let _2176: core::panicking::AssertKind;
            scope 396 {
                debug kind => _2176;
            }
        }
    }
    scope 397 {
        debug tmp => _2179;
        let _2189: &std::num::Wrapping<u16>;
        let _2190: &std::num::Wrapping<u16>;
        let mut _2322: &std::num::Wrapping<u16>;
        scope 398 {
            debug left_val => _2189;
            debug right_val => _2190;
            let _2193: core::panicking::AssertKind;
            scope 399 {
                debug kind => _2193;
            }
        }
    }
    scope 400 {
        debug tmp => _2196;
        let _2205: &std::num::Wrapping<u16>;
        let _2206: &std::num::Wrapping<u16>;
        let mut _2320: &std::num::Wrapping<u16>;
        let mut _2321: &std::num::Wrapping<u16>;
        scope 401 {
            debug left_val => _2205;
            debug right_val => _2206;
            let _2209: core::panicking::AssertKind;
            scope 402 {
                debug kind => _2209;
            }
        }
    }
    scope 403 {
        debug tmp => _2212;
        let _2222: &std::num::Wrapping<u32>;
        let _2223: &std::num::Wrapping<u32>;
        let mut _2319: &std::num::Wrapping<u32>;
        scope 404 {
            debug left_val => _2222;
            debug right_val => _2223;
            let _2226: core::panicking::AssertKind;
            scope 405 {
                debug kind => _2226;
            }
        }
    }
    scope 406 {
        debug tmp => _2229;
        let _2238: &std::num::Wrapping<u32>;
        let _2239: &std::num::Wrapping<u32>;
        let mut _2317: &std::num::Wrapping<u32>;
        let mut _2318: &std::num::Wrapping<u32>;
        scope 407 {
            debug left_val => _2238;
            debug right_val => _2239;
            let _2242: core::panicking::AssertKind;
            scope 408 {
                debug kind => _2242;
            }
        }
    }
    scope 409 {
        debug tmp => _2245;
        let _2255: &std::num::Wrapping<u64>;
        let _2256: &std::num::Wrapping<u64>;
        let mut _2316: &std::num::Wrapping<u64>;
        scope 410 {
            debug left_val => _2255;
            debug right_val => _2256;
            let _2259: core::panicking::AssertKind;
            scope 411 {
                debug kind => _2259;
            }
        }
    }
    scope 412 {
        debug tmp => _2262;
        let _2271: &std::num::Wrapping<u64>;
        let _2272: &std::num::Wrapping<u64>;
        let mut _2314: &std::num::Wrapping<u64>;
        let mut _2315: &std::num::Wrapping<u64>;
        scope 413 {
            debug left_val => _2271;
            debug right_val => _2272;
            let _2275: core::panicking::AssertKind;
            scope 414 {
                debug kind => _2275;
            }
        }
    }
    scope 415 {
        debug tmp => _2278;
        let _2288: &std::num::Wrapping<usize>;
        let _2289: &std::num::Wrapping<usize>;
        let mut _2313: &std::num::Wrapping<usize>;
        scope 416 {
            debug left_val => _2288;
            debug right_val => _2289;
            let _2292: core::panicking::AssertKind;
            scope 417 {
                debug kind => _2292;
            }
        }
    }
    scope 418 {
        debug tmp => _2295;
        let _2304: &std::num::Wrapping<usize>;
        let _2305: &std::num::Wrapping<usize>;
        let mut _2311: &std::num::Wrapping<usize>;
        let mut _2312: &std::num::Wrapping<usize>;
        scope 419 {
            debug left_val => _2304;
            debug right_val => _2305;
            let _2308: core::panicking::AssertKind;
            scope 420 {
                debug kind => _2308;
            }
        }
    }

    bb0: {
        _1 = Wrapping::<i8>(const _);
        _3 = _1;
        _2 = test::black_box::<Wrapping<i8>>(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = move _2;
        _5 = &mut _1;
        _6 = Wrapping::<i8>(const 1_i8);
        _4 = <Wrapping<i8> as AddAssign>::add_assign(move _5, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = _1;
        _9 = test::black_box::<Wrapping<i8>>(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = &_9;
        _2520 = const _;
        _7 = (move _8, _2520);
        _11 = (_7.0: &std::num::Wrapping<i8>);
        _12 = (_7.1: &std::num::Wrapping<i8>);
        _14 = <Wrapping<i8> as PartialEq>::eq(_11, _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _15, _11, _12, move _17) -> unwind continue;
    }

    bb6: {
        _18 = Wrapping::<i8>(const _);
        _20 = _18;
        _19 = test::black_box::<Wrapping<i8>>(move _20) -> [return: bb7, unwind continue];
    }

    bb7: {
        _18 = move _19;
        _22 = &mut _18;
        _2519 = const _;
        _21 = <Wrapping<i8> as AddAssign<&Wrapping<i8>>>::add_assign(move _22, _2519) -> [return: bb8, unwind continue];
    }

    bb8: {
        _26 = _18;
        _25 = test::black_box::<Wrapping<i8>>(move _26) -> [return: bb9, unwind continue];
    }

    bb9: {
        _24 = &_25;
        _2518 = const _;
        _23 = (move _24, _2518);
        _27 = (_23.0: &std::num::Wrapping<i8>);
        _28 = (_23.1: &std::num::Wrapping<i8>);
        _30 = <Wrapping<i8> as PartialEq>::eq(_27, _28) -> [return: bb10, unwind continue];
    }

    bb10: {
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _31, _27, _28, move _33) -> unwind continue;
    }

    bb12: {
        _34 = Wrapping::<i16>(const _);
        _36 = _34;
        _35 = test::black_box::<Wrapping<i16>>(move _36) -> [return: bb13, unwind continue];
    }

    bb13: {
        _34 = move _35;
        _38 = &mut _34;
        _39 = Wrapping::<i16>(const 1_i16);
        _37 = <Wrapping<i16> as AddAssign>::add_assign(move _38, move _39) -> [return: bb14, unwind continue];
    }

    bb14: {
        _43 = _34;
        _42 = test::black_box::<Wrapping<i16>>(move _43) -> [return: bb15, unwind continue];
    }

    bb15: {
        _41 = &_42;
        _2517 = const _;
        _40 = (move _41, _2517);
        _44 = (_40.0: &std::num::Wrapping<i16>);
        _45 = (_40.1: &std::num::Wrapping<i16>);
        _47 = <Wrapping<i16> as PartialEq>::eq(_44, _45) -> [return: bb16, unwind continue];
    }

    bb16: {
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _48, _44, _45, move _50) -> unwind continue;
    }

    bb18: {
        _51 = Wrapping::<i16>(const _);
        _53 = _51;
        _52 = test::black_box::<Wrapping<i16>>(move _53) -> [return: bb19, unwind continue];
    }

    bb19: {
        _51 = move _52;
        _55 = &mut _51;
        _2516 = const _;
        _54 = <Wrapping<i16> as AddAssign<&Wrapping<i16>>>::add_assign(move _55, _2516) -> [return: bb20, unwind continue];
    }

    bb20: {
        _59 = _51;
        _58 = test::black_box::<Wrapping<i16>>(move _59) -> [return: bb21, unwind continue];
    }

    bb21: {
        _57 = &_58;
        _2515 = const _;
        _56 = (move _57, _2515);
        _60 = (_56.0: &std::num::Wrapping<i16>);
        _61 = (_56.1: &std::num::Wrapping<i16>);
        _63 = <Wrapping<i16> as PartialEq>::eq(_60, _61) -> [return: bb22, unwind continue];
    }

    bb22: {
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _64, _60, _61, move _66) -> unwind continue;
    }

    bb24: {
        _67 = Wrapping::<i32>(const _);
        _69 = _67;
        _68 = test::black_box::<Wrapping<i32>>(move _69) -> [return: bb25, unwind continue];
    }

    bb25: {
        _67 = move _68;
        _71 = &mut _67;
        _72 = Wrapping::<i32>(const 1_i32);
        _70 = <Wrapping<i32> as AddAssign>::add_assign(move _71, move _72) -> [return: bb26, unwind continue];
    }

    bb26: {
        _76 = _67;
        _75 = test::black_box::<Wrapping<i32>>(move _76) -> [return: bb27, unwind continue];
    }

    bb27: {
        _74 = &_75;
        _2514 = const _;
        _73 = (move _74, _2514);
        _77 = (_73.0: &std::num::Wrapping<i32>);
        _78 = (_73.1: &std::num::Wrapping<i32>);
        _80 = <Wrapping<i32> as PartialEq>::eq(_77, _78) -> [return: bb28, unwind continue];
    }

    bb28: {
        _79 = Not(move _80);
        switchInt(move _79) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _81 = core::panicking::AssertKind::Eq;
        _83 = Option::<Arguments<'_>>::None;
        _82 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _81, _77, _78, move _83) -> unwind continue;
    }

    bb30: {
        _84 = Wrapping::<i32>(const _);
        _86 = _84;
        _85 = test::black_box::<Wrapping<i32>>(move _86) -> [return: bb31, unwind continue];
    }

    bb31: {
        _84 = move _85;
        _88 = &mut _84;
        _2513 = const _;
        _87 = <Wrapping<i32> as AddAssign<&Wrapping<i32>>>::add_assign(move _88, _2513) -> [return: bb32, unwind continue];
    }

    bb32: {
        _92 = _84;
        _91 = test::black_box::<Wrapping<i32>>(move _92) -> [return: bb33, unwind continue];
    }

    bb33: {
        _90 = &_91;
        _2512 = const _;
        _89 = (move _90, _2512);
        _93 = (_89.0: &std::num::Wrapping<i32>);
        _94 = (_89.1: &std::num::Wrapping<i32>);
        _96 = <Wrapping<i32> as PartialEq>::eq(_93, _94) -> [return: bb34, unwind continue];
    }

    bb34: {
        _95 = Not(move _96);
        switchInt(move _95) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _97 = core::panicking::AssertKind::Eq;
        _99 = Option::<Arguments<'_>>::None;
        _98 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _97, _93, _94, move _99) -> unwind continue;
    }

    bb36: {
        _100 = Wrapping::<i64>(const _);
        _102 = _100;
        _101 = test::black_box::<Wrapping<i64>>(move _102) -> [return: bb37, unwind continue];
    }

    bb37: {
        _100 = move _101;
        _104 = &mut _100;
        _105 = Wrapping::<i64>(const 1_i64);
        _103 = <Wrapping<i64> as AddAssign>::add_assign(move _104, move _105) -> [return: bb38, unwind continue];
    }

    bb38: {
        _109 = _100;
        _108 = test::black_box::<Wrapping<i64>>(move _109) -> [return: bb39, unwind continue];
    }

    bb39: {
        _107 = &_108;
        _2511 = const _;
        _106 = (move _107, _2511);
        _110 = (_106.0: &std::num::Wrapping<i64>);
        _111 = (_106.1: &std::num::Wrapping<i64>);
        _113 = <Wrapping<i64> as PartialEq>::eq(_110, _111) -> [return: bb40, unwind continue];
    }

    bb40: {
        _112 = Not(move _113);
        switchInt(move _112) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _114 = core::panicking::AssertKind::Eq;
        _116 = Option::<Arguments<'_>>::None;
        _115 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _114, _110, _111, move _116) -> unwind continue;
    }

    bb42: {
        _117 = Wrapping::<i64>(const _);
        _119 = _117;
        _118 = test::black_box::<Wrapping<i64>>(move _119) -> [return: bb43, unwind continue];
    }

    bb43: {
        _117 = move _118;
        _121 = &mut _117;
        _2510 = const _;
        _120 = <Wrapping<i64> as AddAssign<&Wrapping<i64>>>::add_assign(move _121, _2510) -> [return: bb44, unwind continue];
    }

    bb44: {
        _125 = _117;
        _124 = test::black_box::<Wrapping<i64>>(move _125) -> [return: bb45, unwind continue];
    }

    bb45: {
        _123 = &_124;
        _2509 = const _;
        _122 = (move _123, _2509);
        _126 = (_122.0: &std::num::Wrapping<i64>);
        _127 = (_122.1: &std::num::Wrapping<i64>);
        _129 = <Wrapping<i64> as PartialEq>::eq(_126, _127) -> [return: bb46, unwind continue];
    }

    bb46: {
        _128 = Not(move _129);
        switchInt(move _128) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _130 = core::panicking::AssertKind::Eq;
        _132 = Option::<Arguments<'_>>::None;
        _131 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _130, _126, _127, move _132) -> unwind continue;
    }

    bb48: {
        _133 = Wrapping::<isize>(const _);
        _135 = _133;
        _134 = test::black_box::<Wrapping<isize>>(move _135) -> [return: bb49, unwind continue];
    }

    bb49: {
        _133 = move _134;
        _137 = &mut _133;
        _138 = Wrapping::<isize>(const 1_isize);
        _136 = <Wrapping<isize> as AddAssign>::add_assign(move _137, move _138) -> [return: bb50, unwind continue];
    }

    bb50: {
        _142 = _133;
        _141 = test::black_box::<Wrapping<isize>>(move _142) -> [return: bb51, unwind continue];
    }

    bb51: {
        _140 = &_141;
        _2508 = const _;
        _139 = (move _140, _2508);
        _143 = (_139.0: &std::num::Wrapping<isize>);
        _144 = (_139.1: &std::num::Wrapping<isize>);
        _146 = <Wrapping<isize> as PartialEq>::eq(_143, _144) -> [return: bb52, unwind continue];
    }

    bb52: {
        _145 = Not(move _146);
        switchInt(move _145) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _147 = core::panicking::AssertKind::Eq;
        _149 = Option::<Arguments<'_>>::None;
        _148 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _147, _143, _144, move _149) -> unwind continue;
    }

    bb54: {
        _150 = Wrapping::<isize>(const _);
        _152 = _150;
        _151 = test::black_box::<Wrapping<isize>>(move _152) -> [return: bb55, unwind continue];
    }

    bb55: {
        _150 = move _151;
        _154 = &mut _150;
        _2507 = const _;
        _153 = <Wrapping<isize> as AddAssign<&Wrapping<isize>>>::add_assign(move _154, _2507) -> [return: bb56, unwind continue];
    }

    bb56: {
        _158 = _150;
        _157 = test::black_box::<Wrapping<isize>>(move _158) -> [return: bb57, unwind continue];
    }

    bb57: {
        _156 = &_157;
        _2506 = const _;
        _155 = (move _156, _2506);
        _159 = (_155.0: &std::num::Wrapping<isize>);
        _160 = (_155.1: &std::num::Wrapping<isize>);
        _162 = <Wrapping<isize> as PartialEq>::eq(_159, _160) -> [return: bb58, unwind continue];
    }

    bb58: {
        _161 = Not(move _162);
        switchInt(move _161) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _163 = core::panicking::AssertKind::Eq;
        _165 = Option::<Arguments<'_>>::None;
        _164 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _163, _159, _160, move _165) -> unwind continue;
    }

    bb60: {
        _166 = Wrapping::<u8>(const _);
        _168 = _166;
        _167 = test::black_box::<Wrapping<u8>>(move _168) -> [return: bb61, unwind continue];
    }

    bb61: {
        _166 = move _167;
        _170 = &mut _166;
        _171 = Wrapping::<u8>(const 1_u8);
        _169 = <Wrapping<u8> as AddAssign>::add_assign(move _170, move _171) -> [return: bb62, unwind continue];
    }

    bb62: {
        _175 = _166;
        _174 = test::black_box::<Wrapping<u8>>(move _175) -> [return: bb63, unwind continue];
    }

    bb63: {
        _173 = &_174;
        _2505 = const _;
        _172 = (move _173, _2505);
        _176 = (_172.0: &std::num::Wrapping<u8>);
        _177 = (_172.1: &std::num::Wrapping<u8>);
        _179 = <Wrapping<u8> as PartialEq>::eq(_176, _177) -> [return: bb64, unwind continue];
    }

    bb64: {
        _178 = Not(move _179);
        switchInt(move _178) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _180 = core::panicking::AssertKind::Eq;
        _182 = Option::<Arguments<'_>>::None;
        _181 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _180, _176, _177, move _182) -> unwind continue;
    }

    bb66: {
        _183 = Wrapping::<u8>(const _);
        _185 = _183;
        _184 = test::black_box::<Wrapping<u8>>(move _185) -> [return: bb67, unwind continue];
    }

    bb67: {
        _183 = move _184;
        _187 = &mut _183;
        _2504 = const _;
        _186 = <Wrapping<u8> as AddAssign<&Wrapping<u8>>>::add_assign(move _187, _2504) -> [return: bb68, unwind continue];
    }

    bb68: {
        _191 = _183;
        _190 = test::black_box::<Wrapping<u8>>(move _191) -> [return: bb69, unwind continue];
    }

    bb69: {
        _189 = &_190;
        _2503 = const _;
        _188 = (move _189, _2503);
        _192 = (_188.0: &std::num::Wrapping<u8>);
        _193 = (_188.1: &std::num::Wrapping<u8>);
        _195 = <Wrapping<u8> as PartialEq>::eq(_192, _193) -> [return: bb70, unwind continue];
    }

    bb70: {
        _194 = Not(move _195);
        switchInt(move _194) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _196 = core::panicking::AssertKind::Eq;
        _198 = Option::<Arguments<'_>>::None;
        _197 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _196, _192, _193, move _198) -> unwind continue;
    }

    bb72: {
        _199 = Wrapping::<u16>(const _);
        _201 = _199;
        _200 = test::black_box::<Wrapping<u16>>(move _201) -> [return: bb73, unwind continue];
    }

    bb73: {
        _199 = move _200;
        _203 = &mut _199;
        _204 = Wrapping::<u16>(const 1_u16);
        _202 = <Wrapping<u16> as AddAssign>::add_assign(move _203, move _204) -> [return: bb74, unwind continue];
    }

    bb74: {
        _208 = _199;
        _207 = test::black_box::<Wrapping<u16>>(move _208) -> [return: bb75, unwind continue];
    }

    bb75: {
        _206 = &_207;
        _2502 = const _;
        _205 = (move _206, _2502);
        _209 = (_205.0: &std::num::Wrapping<u16>);
        _210 = (_205.1: &std::num::Wrapping<u16>);
        _212 = <Wrapping<u16> as PartialEq>::eq(_209, _210) -> [return: bb76, unwind continue];
    }

    bb76: {
        _211 = Not(move _212);
        switchInt(move _211) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _213 = core::panicking::AssertKind::Eq;
        _215 = Option::<Arguments<'_>>::None;
        _214 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _213, _209, _210, move _215) -> unwind continue;
    }

    bb78: {
        _216 = Wrapping::<u16>(const _);
        _218 = _216;
        _217 = test::black_box::<Wrapping<u16>>(move _218) -> [return: bb79, unwind continue];
    }

    bb79: {
        _216 = move _217;
        _220 = &mut _216;
        _2501 = const _;
        _219 = <Wrapping<u16> as AddAssign<&Wrapping<u16>>>::add_assign(move _220, _2501) -> [return: bb80, unwind continue];
    }

    bb80: {
        _224 = _216;
        _223 = test::black_box::<Wrapping<u16>>(move _224) -> [return: bb81, unwind continue];
    }

    bb81: {
        _222 = &_223;
        _2500 = const _;
        _221 = (move _222, _2500);
        _225 = (_221.0: &std::num::Wrapping<u16>);
        _226 = (_221.1: &std::num::Wrapping<u16>);
        _228 = <Wrapping<u16> as PartialEq>::eq(_225, _226) -> [return: bb82, unwind continue];
    }

    bb82: {
        _227 = Not(move _228);
        switchInt(move _227) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _229 = core::panicking::AssertKind::Eq;
        _231 = Option::<Arguments<'_>>::None;
        _230 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _229, _225, _226, move _231) -> unwind continue;
    }

    bb84: {
        _232 = Wrapping::<u32>(const _);
        _234 = _232;
        _233 = test::black_box::<Wrapping<u32>>(move _234) -> [return: bb85, unwind continue];
    }

    bb85: {
        _232 = move _233;
        _236 = &mut _232;
        _237 = Wrapping::<u32>(const 1_u32);
        _235 = <Wrapping<u32> as AddAssign>::add_assign(move _236, move _237) -> [return: bb86, unwind continue];
    }

    bb86: {
        _241 = _232;
        _240 = test::black_box::<Wrapping<u32>>(move _241) -> [return: bb87, unwind continue];
    }

    bb87: {
        _239 = &_240;
        _2499 = const _;
        _238 = (move _239, _2499);
        _242 = (_238.0: &std::num::Wrapping<u32>);
        _243 = (_238.1: &std::num::Wrapping<u32>);
        _245 = <Wrapping<u32> as PartialEq>::eq(_242, _243) -> [return: bb88, unwind continue];
    }

    bb88: {
        _244 = Not(move _245);
        switchInt(move _244) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _246 = core::panicking::AssertKind::Eq;
        _248 = Option::<Arguments<'_>>::None;
        _247 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _246, _242, _243, move _248) -> unwind continue;
    }

    bb90: {
        _249 = Wrapping::<u32>(const _);
        _251 = _249;
        _250 = test::black_box::<Wrapping<u32>>(move _251) -> [return: bb91, unwind continue];
    }

    bb91: {
        _249 = move _250;
        _253 = &mut _249;
        _2498 = const _;
        _252 = <Wrapping<u32> as AddAssign<&Wrapping<u32>>>::add_assign(move _253, _2498) -> [return: bb92, unwind continue];
    }

    bb92: {
        _257 = _249;
        _256 = test::black_box::<Wrapping<u32>>(move _257) -> [return: bb93, unwind continue];
    }

    bb93: {
        _255 = &_256;
        _2497 = const _;
        _254 = (move _255, _2497);
        _258 = (_254.0: &std::num::Wrapping<u32>);
        _259 = (_254.1: &std::num::Wrapping<u32>);
        _261 = <Wrapping<u32> as PartialEq>::eq(_258, _259) -> [return: bb94, unwind continue];
    }

    bb94: {
        _260 = Not(move _261);
        switchInt(move _260) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        _262 = core::panicking::AssertKind::Eq;
        _264 = Option::<Arguments<'_>>::None;
        _263 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _262, _258, _259, move _264) -> unwind continue;
    }

    bb96: {
        _265 = Wrapping::<u64>(const _);
        _267 = _265;
        _266 = test::black_box::<Wrapping<u64>>(move _267) -> [return: bb97, unwind continue];
    }

    bb97: {
        _265 = move _266;
        _269 = &mut _265;
        _270 = Wrapping::<u64>(const 1_u64);
        _268 = <Wrapping<u64> as AddAssign>::add_assign(move _269, move _270) -> [return: bb98, unwind continue];
    }

    bb98: {
        _274 = _265;
        _273 = test::black_box::<Wrapping<u64>>(move _274) -> [return: bb99, unwind continue];
    }

    bb99: {
        _272 = &_273;
        _2496 = const _;
        _271 = (move _272, _2496);
        _275 = (_271.0: &std::num::Wrapping<u64>);
        _276 = (_271.1: &std::num::Wrapping<u64>);
        _278 = <Wrapping<u64> as PartialEq>::eq(_275, _276) -> [return: bb100, unwind continue];
    }

    bb100: {
        _277 = Not(move _278);
        switchInt(move _277) -> [0: bb102, otherwise: bb101];
    }

    bb101: {
        _279 = core::panicking::AssertKind::Eq;
        _281 = Option::<Arguments<'_>>::None;
        _280 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _279, _275, _276, move _281) -> unwind continue;
    }

    bb102: {
        _282 = Wrapping::<u64>(const _);
        _284 = _282;
        _283 = test::black_box::<Wrapping<u64>>(move _284) -> [return: bb103, unwind continue];
    }

    bb103: {
        _282 = move _283;
        _286 = &mut _282;
        _2495 = const _;
        _285 = <Wrapping<u64> as AddAssign<&Wrapping<u64>>>::add_assign(move _286, _2495) -> [return: bb104, unwind continue];
    }

    bb104: {
        _290 = _282;
        _289 = test::black_box::<Wrapping<u64>>(move _290) -> [return: bb105, unwind continue];
    }

    bb105: {
        _288 = &_289;
        _2494 = const _;
        _287 = (move _288, _2494);
        _291 = (_287.0: &std::num::Wrapping<u64>);
        _292 = (_287.1: &std::num::Wrapping<u64>);
        _294 = <Wrapping<u64> as PartialEq>::eq(_291, _292) -> [return: bb106, unwind continue];
    }

    bb106: {
        _293 = Not(move _294);
        switchInt(move _293) -> [0: bb108, otherwise: bb107];
    }

    bb107: {
        _295 = core::panicking::AssertKind::Eq;
        _297 = Option::<Arguments<'_>>::None;
        _296 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _295, _291, _292, move _297) -> unwind continue;
    }

    bb108: {
        _298 = Wrapping::<usize>(const _);
        _300 = _298;
        _299 = test::black_box::<Wrapping<usize>>(move _300) -> [return: bb109, unwind continue];
    }

    bb109: {
        _298 = move _299;
        _302 = &mut _298;
        _303 = Wrapping::<usize>(const 1_usize);
        _301 = <Wrapping<usize> as AddAssign>::add_assign(move _302, move _303) -> [return: bb110, unwind continue];
    }

    bb110: {
        _307 = _298;
        _306 = test::black_box::<Wrapping<usize>>(move _307) -> [return: bb111, unwind continue];
    }

    bb111: {
        _305 = &_306;
        _2493 = const _;
        _304 = (move _305, _2493);
        _308 = (_304.0: &std::num::Wrapping<usize>);
        _309 = (_304.1: &std::num::Wrapping<usize>);
        _311 = <Wrapping<usize> as PartialEq>::eq(_308, _309) -> [return: bb112, unwind continue];
    }

    bb112: {
        _310 = Not(move _311);
        switchInt(move _310) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        _312 = core::panicking::AssertKind::Eq;
        _314 = Option::<Arguments<'_>>::None;
        _313 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _312, _308, _309, move _314) -> unwind continue;
    }

    bb114: {
        _315 = Wrapping::<usize>(const _);
        _317 = _315;
        _316 = test::black_box::<Wrapping<usize>>(move _317) -> [return: bb115, unwind continue];
    }

    bb115: {
        _315 = move _316;
        _319 = &mut _315;
        _2492 = const _;
        _318 = <Wrapping<usize> as AddAssign<&Wrapping<usize>>>::add_assign(move _319, _2492) -> [return: bb116, unwind continue];
    }

    bb116: {
        _323 = _315;
        _322 = test::black_box::<Wrapping<usize>>(move _323) -> [return: bb117, unwind continue];
    }

    bb117: {
        _321 = &_322;
        _2491 = const _;
        _320 = (move _321, _2491);
        _324 = (_320.0: &std::num::Wrapping<usize>);
        _325 = (_320.1: &std::num::Wrapping<usize>);
        _327 = <Wrapping<usize> as PartialEq>::eq(_324, _325) -> [return: bb118, unwind continue];
    }

    bb118: {
        _326 = Not(move _327);
        switchInt(move _326) -> [0: bb120, otherwise: bb119];
    }

    bb119: {
        _328 = core::panicking::AssertKind::Eq;
        _330 = Option::<Arguments<'_>>::None;
        _329 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _328, _324, _325, move _330) -> unwind continue;
    }

    bb120: {
        _331 = Wrapping::<i8>(const _);
        _333 = _331;
        _332 = test::black_box::<Wrapping<i8>>(move _333) -> [return: bb121, unwind continue];
    }

    bb121: {
        _331 = move _332;
        _335 = &mut _331;
        _336 = Wrapping::<i8>(const 1_i8);
        _334 = <Wrapping<i8> as SubAssign>::sub_assign(move _335, move _336) -> [return: bb122, unwind continue];
    }

    bb122: {
        _340 = _331;
        _339 = test::black_box::<Wrapping<i8>>(move _340) -> [return: bb123, unwind continue];
    }

    bb123: {
        _338 = &_339;
        _2490 = const _;
        _337 = (move _338, _2490);
        _341 = (_337.0: &std::num::Wrapping<i8>);
        _342 = (_337.1: &std::num::Wrapping<i8>);
        _344 = <Wrapping<i8> as PartialEq>::eq(_341, _342) -> [return: bb124, unwind continue];
    }

    bb124: {
        _343 = Not(move _344);
        switchInt(move _343) -> [0: bb126, otherwise: bb125];
    }

    bb125: {
        _345 = core::panicking::AssertKind::Eq;
        _347 = Option::<Arguments<'_>>::None;
        _346 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _345, _341, _342, move _347) -> unwind continue;
    }

    bb126: {
        _348 = Wrapping::<i8>(const _);
        _350 = _348;
        _349 = test::black_box::<Wrapping<i8>>(move _350) -> [return: bb127, unwind continue];
    }

    bb127: {
        _348 = move _349;
        _352 = &mut _348;
        _2489 = const _;
        _351 = <Wrapping<i8> as SubAssign<&Wrapping<i8>>>::sub_assign(move _352, _2489) -> [return: bb128, unwind continue];
    }

    bb128: {
        _356 = _348;
        _355 = test::black_box::<Wrapping<i8>>(move _356) -> [return: bb129, unwind continue];
    }

    bb129: {
        _354 = &_355;
        _2488 = const _;
        _353 = (move _354, _2488);
        _357 = (_353.0: &std::num::Wrapping<i8>);
        _358 = (_353.1: &std::num::Wrapping<i8>);
        _360 = <Wrapping<i8> as PartialEq>::eq(_357, _358) -> [return: bb130, unwind continue];
    }

    bb130: {
        _359 = Not(move _360);
        switchInt(move _359) -> [0: bb132, otherwise: bb131];
    }

    bb131: {
        _361 = core::panicking::AssertKind::Eq;
        _363 = Option::<Arguments<'_>>::None;
        _362 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _361, _357, _358, move _363) -> unwind continue;
    }

    bb132: {
        _364 = Wrapping::<i16>(const _);
        _366 = _364;
        _365 = test::black_box::<Wrapping<i16>>(move _366) -> [return: bb133, unwind continue];
    }

    bb133: {
        _364 = move _365;
        _368 = &mut _364;
        _369 = Wrapping::<i16>(const 1_i16);
        _367 = <Wrapping<i16> as SubAssign>::sub_assign(move _368, move _369) -> [return: bb134, unwind continue];
    }

    bb134: {
        _373 = _364;
        _372 = test::black_box::<Wrapping<i16>>(move _373) -> [return: bb135, unwind continue];
    }

    bb135: {
        _371 = &_372;
        _2487 = const _;
        _370 = (move _371, _2487);
        _374 = (_370.0: &std::num::Wrapping<i16>);
        _375 = (_370.1: &std::num::Wrapping<i16>);
        _377 = <Wrapping<i16> as PartialEq>::eq(_374, _375) -> [return: bb136, unwind continue];
    }

    bb136: {
        _376 = Not(move _377);
        switchInt(move _376) -> [0: bb138, otherwise: bb137];
    }

    bb137: {
        _378 = core::panicking::AssertKind::Eq;
        _380 = Option::<Arguments<'_>>::None;
        _379 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _378, _374, _375, move _380) -> unwind continue;
    }

    bb138: {
        _381 = Wrapping::<i16>(const _);
        _383 = _381;
        _382 = test::black_box::<Wrapping<i16>>(move _383) -> [return: bb139, unwind continue];
    }

    bb139: {
        _381 = move _382;
        _385 = &mut _381;
        _2486 = const _;
        _384 = <Wrapping<i16> as SubAssign<&Wrapping<i16>>>::sub_assign(move _385, _2486) -> [return: bb140, unwind continue];
    }

    bb140: {
        _389 = _381;
        _388 = test::black_box::<Wrapping<i16>>(move _389) -> [return: bb141, unwind continue];
    }

    bb141: {
        _387 = &_388;
        _2485 = const _;
        _386 = (move _387, _2485);
        _390 = (_386.0: &std::num::Wrapping<i16>);
        _391 = (_386.1: &std::num::Wrapping<i16>);
        _393 = <Wrapping<i16> as PartialEq>::eq(_390, _391) -> [return: bb142, unwind continue];
    }

    bb142: {
        _392 = Not(move _393);
        switchInt(move _392) -> [0: bb144, otherwise: bb143];
    }

    bb143: {
        _394 = core::panicking::AssertKind::Eq;
        _396 = Option::<Arguments<'_>>::None;
        _395 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _394, _390, _391, move _396) -> unwind continue;
    }

    bb144: {
        _397 = Wrapping::<i32>(const _);
        _399 = _397;
        _398 = test::black_box::<Wrapping<i32>>(move _399) -> [return: bb145, unwind continue];
    }

    bb145: {
        _397 = move _398;
        _401 = &mut _397;
        _402 = Wrapping::<i32>(const 1_i32);
        _400 = <Wrapping<i32> as SubAssign>::sub_assign(move _401, move _402) -> [return: bb146, unwind continue];
    }

    bb146: {
        _406 = _397;
        _405 = test::black_box::<Wrapping<i32>>(move _406) -> [return: bb147, unwind continue];
    }

    bb147: {
        _404 = &_405;
        _2484 = const _;
        _403 = (move _404, _2484);
        _407 = (_403.0: &std::num::Wrapping<i32>);
        _408 = (_403.1: &std::num::Wrapping<i32>);
        _410 = <Wrapping<i32> as PartialEq>::eq(_407, _408) -> [return: bb148, unwind continue];
    }

    bb148: {
        _409 = Not(move _410);
        switchInt(move _409) -> [0: bb150, otherwise: bb149];
    }

    bb149: {
        _411 = core::panicking::AssertKind::Eq;
        _413 = Option::<Arguments<'_>>::None;
        _412 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _411, _407, _408, move _413) -> unwind continue;
    }

    bb150: {
        _414 = Wrapping::<i32>(const _);
        _416 = _414;
        _415 = test::black_box::<Wrapping<i32>>(move _416) -> [return: bb151, unwind continue];
    }

    bb151: {
        _414 = move _415;
        _418 = &mut _414;
        _2483 = const _;
        _417 = <Wrapping<i32> as SubAssign<&Wrapping<i32>>>::sub_assign(move _418, _2483) -> [return: bb152, unwind continue];
    }

    bb152: {
        _422 = _414;
        _421 = test::black_box::<Wrapping<i32>>(move _422) -> [return: bb153, unwind continue];
    }

    bb153: {
        _420 = &_421;
        _2482 = const _;
        _419 = (move _420, _2482);
        _423 = (_419.0: &std::num::Wrapping<i32>);
        _424 = (_419.1: &std::num::Wrapping<i32>);
        _426 = <Wrapping<i32> as PartialEq>::eq(_423, _424) -> [return: bb154, unwind continue];
    }

    bb154: {
        _425 = Not(move _426);
        switchInt(move _425) -> [0: bb156, otherwise: bb155];
    }

    bb155: {
        _427 = core::panicking::AssertKind::Eq;
        _429 = Option::<Arguments<'_>>::None;
        _428 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _427, _423, _424, move _429) -> unwind continue;
    }

    bb156: {
        _430 = Wrapping::<i64>(const _);
        _432 = _430;
        _431 = test::black_box::<Wrapping<i64>>(move _432) -> [return: bb157, unwind continue];
    }

    bb157: {
        _430 = move _431;
        _434 = &mut _430;
        _435 = Wrapping::<i64>(const 1_i64);
        _433 = <Wrapping<i64> as SubAssign>::sub_assign(move _434, move _435) -> [return: bb158, unwind continue];
    }

    bb158: {
        _439 = _430;
        _438 = test::black_box::<Wrapping<i64>>(move _439) -> [return: bb159, unwind continue];
    }

    bb159: {
        _437 = &_438;
        _2481 = const _;
        _436 = (move _437, _2481);
        _440 = (_436.0: &std::num::Wrapping<i64>);
        _441 = (_436.1: &std::num::Wrapping<i64>);
        _443 = <Wrapping<i64> as PartialEq>::eq(_440, _441) -> [return: bb160, unwind continue];
    }

    bb160: {
        _442 = Not(move _443);
        switchInt(move _442) -> [0: bb162, otherwise: bb161];
    }

    bb161: {
        _444 = core::panicking::AssertKind::Eq;
        _446 = Option::<Arguments<'_>>::None;
        _445 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _444, _440, _441, move _446) -> unwind continue;
    }

    bb162: {
        _447 = Wrapping::<i64>(const _);
        _449 = _447;
        _448 = test::black_box::<Wrapping<i64>>(move _449) -> [return: bb163, unwind continue];
    }

    bb163: {
        _447 = move _448;
        _451 = &mut _447;
        _2480 = const _;
        _450 = <Wrapping<i64> as SubAssign<&Wrapping<i64>>>::sub_assign(move _451, _2480) -> [return: bb164, unwind continue];
    }

    bb164: {
        _455 = _447;
        _454 = test::black_box::<Wrapping<i64>>(move _455) -> [return: bb165, unwind continue];
    }

    bb165: {
        _453 = &_454;
        _2479 = const _;
        _452 = (move _453, _2479);
        _456 = (_452.0: &std::num::Wrapping<i64>);
        _457 = (_452.1: &std::num::Wrapping<i64>);
        _459 = <Wrapping<i64> as PartialEq>::eq(_456, _457) -> [return: bb166, unwind continue];
    }

    bb166: {
        _458 = Not(move _459);
        switchInt(move _458) -> [0: bb168, otherwise: bb167];
    }

    bb167: {
        _460 = core::panicking::AssertKind::Eq;
        _462 = Option::<Arguments<'_>>::None;
        _461 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _460, _456, _457, move _462) -> unwind continue;
    }

    bb168: {
        _463 = Wrapping::<isize>(const _);
        _465 = _463;
        _464 = test::black_box::<Wrapping<isize>>(move _465) -> [return: bb169, unwind continue];
    }

    bb169: {
        _463 = move _464;
        _467 = &mut _463;
        _468 = Wrapping::<isize>(const 1_isize);
        _466 = <Wrapping<isize> as SubAssign>::sub_assign(move _467, move _468) -> [return: bb170, unwind continue];
    }

    bb170: {
        _472 = _463;
        _471 = test::black_box::<Wrapping<isize>>(move _472) -> [return: bb171, unwind continue];
    }

    bb171: {
        _470 = &_471;
        _2478 = const _;
        _469 = (move _470, _2478);
        _473 = (_469.0: &std::num::Wrapping<isize>);
        _474 = (_469.1: &std::num::Wrapping<isize>);
        _476 = <Wrapping<isize> as PartialEq>::eq(_473, _474) -> [return: bb172, unwind continue];
    }

    bb172: {
        _475 = Not(move _476);
        switchInt(move _475) -> [0: bb174, otherwise: bb173];
    }

    bb173: {
        _477 = core::panicking::AssertKind::Eq;
        _479 = Option::<Arguments<'_>>::None;
        _478 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _477, _473, _474, move _479) -> unwind continue;
    }

    bb174: {
        _480 = Wrapping::<isize>(const _);
        _482 = _480;
        _481 = test::black_box::<Wrapping<isize>>(move _482) -> [return: bb175, unwind continue];
    }

    bb175: {
        _480 = move _481;
        _484 = &mut _480;
        _2477 = const _;
        _483 = <Wrapping<isize> as SubAssign<&Wrapping<isize>>>::sub_assign(move _484, _2477) -> [return: bb176, unwind continue];
    }

    bb176: {
        _488 = _480;
        _487 = test::black_box::<Wrapping<isize>>(move _488) -> [return: bb177, unwind continue];
    }

    bb177: {
        _486 = &_487;
        _2476 = const _;
        _485 = (move _486, _2476);
        _489 = (_485.0: &std::num::Wrapping<isize>);
        _490 = (_485.1: &std::num::Wrapping<isize>);
        _492 = <Wrapping<isize> as PartialEq>::eq(_489, _490) -> [return: bb178, unwind continue];
    }

    bb178: {
        _491 = Not(move _492);
        switchInt(move _491) -> [0: bb180, otherwise: bb179];
    }

    bb179: {
        _493 = core::panicking::AssertKind::Eq;
        _495 = Option::<Arguments<'_>>::None;
        _494 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _493, _489, _490, move _495) -> unwind continue;
    }

    bb180: {
        _496 = Wrapping::<u8>(const _);
        _498 = _496;
        _497 = test::black_box::<Wrapping<u8>>(move _498) -> [return: bb181, unwind continue];
    }

    bb181: {
        _496 = move _497;
        _500 = &mut _496;
        _501 = Wrapping::<u8>(const 1_u8);
        _499 = <Wrapping<u8> as SubAssign>::sub_assign(move _500, move _501) -> [return: bb182, unwind continue];
    }

    bb182: {
        _505 = _496;
        _504 = test::black_box::<Wrapping<u8>>(move _505) -> [return: bb183, unwind continue];
    }

    bb183: {
        _503 = &_504;
        _2475 = const _;
        _502 = (move _503, _2475);
        _506 = (_502.0: &std::num::Wrapping<u8>);
        _507 = (_502.1: &std::num::Wrapping<u8>);
        _509 = <Wrapping<u8> as PartialEq>::eq(_506, _507) -> [return: bb184, unwind continue];
    }

    bb184: {
        _508 = Not(move _509);
        switchInt(move _508) -> [0: bb186, otherwise: bb185];
    }

    bb185: {
        _510 = core::panicking::AssertKind::Eq;
        _512 = Option::<Arguments<'_>>::None;
        _511 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _510, _506, _507, move _512) -> unwind continue;
    }

    bb186: {
        _513 = Wrapping::<u8>(const _);
        _515 = _513;
        _514 = test::black_box::<Wrapping<u8>>(move _515) -> [return: bb187, unwind continue];
    }

    bb187: {
        _513 = move _514;
        _517 = &mut _513;
        _2474 = const _;
        _516 = <Wrapping<u8> as SubAssign<&Wrapping<u8>>>::sub_assign(move _517, _2474) -> [return: bb188, unwind continue];
    }

    bb188: {
        _521 = _513;
        _520 = test::black_box::<Wrapping<u8>>(move _521) -> [return: bb189, unwind continue];
    }

    bb189: {
        _519 = &_520;
        _2473 = const _;
        _518 = (move _519, _2473);
        _522 = (_518.0: &std::num::Wrapping<u8>);
        _523 = (_518.1: &std::num::Wrapping<u8>);
        _525 = <Wrapping<u8> as PartialEq>::eq(_522, _523) -> [return: bb190, unwind continue];
    }

    bb190: {
        _524 = Not(move _525);
        switchInt(move _524) -> [0: bb192, otherwise: bb191];
    }

    bb191: {
        _526 = core::panicking::AssertKind::Eq;
        _528 = Option::<Arguments<'_>>::None;
        _527 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _526, _522, _523, move _528) -> unwind continue;
    }

    bb192: {
        _529 = Wrapping::<u16>(const _);
        _531 = _529;
        _530 = test::black_box::<Wrapping<u16>>(move _531) -> [return: bb193, unwind continue];
    }

    bb193: {
        _529 = move _530;
        _533 = &mut _529;
        _534 = Wrapping::<u16>(const 1_u16);
        _532 = <Wrapping<u16> as SubAssign>::sub_assign(move _533, move _534) -> [return: bb194, unwind continue];
    }

    bb194: {
        _538 = _529;
        _537 = test::black_box::<Wrapping<u16>>(move _538) -> [return: bb195, unwind continue];
    }

    bb195: {
        _536 = &_537;
        _2472 = const _;
        _535 = (move _536, _2472);
        _539 = (_535.0: &std::num::Wrapping<u16>);
        _540 = (_535.1: &std::num::Wrapping<u16>);
        _542 = <Wrapping<u16> as PartialEq>::eq(_539, _540) -> [return: bb196, unwind continue];
    }

    bb196: {
        _541 = Not(move _542);
        switchInt(move _541) -> [0: bb198, otherwise: bb197];
    }

    bb197: {
        _543 = core::panicking::AssertKind::Eq;
        _545 = Option::<Arguments<'_>>::None;
        _544 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _543, _539, _540, move _545) -> unwind continue;
    }

    bb198: {
        _546 = Wrapping::<u16>(const _);
        _548 = _546;
        _547 = test::black_box::<Wrapping<u16>>(move _548) -> [return: bb199, unwind continue];
    }

    bb199: {
        _546 = move _547;
        _550 = &mut _546;
        _2471 = const _;
        _549 = <Wrapping<u16> as SubAssign<&Wrapping<u16>>>::sub_assign(move _550, _2471) -> [return: bb200, unwind continue];
    }

    bb200: {
        _554 = _546;
        _553 = test::black_box::<Wrapping<u16>>(move _554) -> [return: bb201, unwind continue];
    }

    bb201: {
        _552 = &_553;
        _2470 = const _;
        _551 = (move _552, _2470);
        _555 = (_551.0: &std::num::Wrapping<u16>);
        _556 = (_551.1: &std::num::Wrapping<u16>);
        _558 = <Wrapping<u16> as PartialEq>::eq(_555, _556) -> [return: bb202, unwind continue];
    }

    bb202: {
        _557 = Not(move _558);
        switchInt(move _557) -> [0: bb204, otherwise: bb203];
    }

    bb203: {
        _559 = core::panicking::AssertKind::Eq;
        _561 = Option::<Arguments<'_>>::None;
        _560 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _559, _555, _556, move _561) -> unwind continue;
    }

    bb204: {
        _562 = Wrapping::<u32>(const _);
        _564 = _562;
        _563 = test::black_box::<Wrapping<u32>>(move _564) -> [return: bb205, unwind continue];
    }

    bb205: {
        _562 = move _563;
        _566 = &mut _562;
        _567 = Wrapping::<u32>(const 1_u32);
        _565 = <Wrapping<u32> as SubAssign>::sub_assign(move _566, move _567) -> [return: bb206, unwind continue];
    }

    bb206: {
        _571 = _562;
        _570 = test::black_box::<Wrapping<u32>>(move _571) -> [return: bb207, unwind continue];
    }

    bb207: {
        _569 = &_570;
        _2469 = const _;
        _568 = (move _569, _2469);
        _572 = (_568.0: &std::num::Wrapping<u32>);
        _573 = (_568.1: &std::num::Wrapping<u32>);
        _575 = <Wrapping<u32> as PartialEq>::eq(_572, _573) -> [return: bb208, unwind continue];
    }

    bb208: {
        _574 = Not(move _575);
        switchInt(move _574) -> [0: bb210, otherwise: bb209];
    }

    bb209: {
        _576 = core::panicking::AssertKind::Eq;
        _578 = Option::<Arguments<'_>>::None;
        _577 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _576, _572, _573, move _578) -> unwind continue;
    }

    bb210: {
        _579 = Wrapping::<u32>(const _);
        _581 = _579;
        _580 = test::black_box::<Wrapping<u32>>(move _581) -> [return: bb211, unwind continue];
    }

    bb211: {
        _579 = move _580;
        _583 = &mut _579;
        _2468 = const _;
        _582 = <Wrapping<u32> as SubAssign<&Wrapping<u32>>>::sub_assign(move _583, _2468) -> [return: bb212, unwind continue];
    }

    bb212: {
        _587 = _579;
        _586 = test::black_box::<Wrapping<u32>>(move _587) -> [return: bb213, unwind continue];
    }

    bb213: {
        _585 = &_586;
        _2467 = const _;
        _584 = (move _585, _2467);
        _588 = (_584.0: &std::num::Wrapping<u32>);
        _589 = (_584.1: &std::num::Wrapping<u32>);
        _591 = <Wrapping<u32> as PartialEq>::eq(_588, _589) -> [return: bb214, unwind continue];
    }

    bb214: {
        _590 = Not(move _591);
        switchInt(move _590) -> [0: bb216, otherwise: bb215];
    }

    bb215: {
        _592 = core::panicking::AssertKind::Eq;
        _594 = Option::<Arguments<'_>>::None;
        _593 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _592, _588, _589, move _594) -> unwind continue;
    }

    bb216: {
        _595 = Wrapping::<u64>(const _);
        _597 = _595;
        _596 = test::black_box::<Wrapping<u64>>(move _597) -> [return: bb217, unwind continue];
    }

    bb217: {
        _595 = move _596;
        _599 = &mut _595;
        _600 = Wrapping::<u64>(const 1_u64);
        _598 = <Wrapping<u64> as SubAssign>::sub_assign(move _599, move _600) -> [return: bb218, unwind continue];
    }

    bb218: {
        _604 = _595;
        _603 = test::black_box::<Wrapping<u64>>(move _604) -> [return: bb219, unwind continue];
    }

    bb219: {
        _602 = &_603;
        _2466 = const _;
        _601 = (move _602, _2466);
        _605 = (_601.0: &std::num::Wrapping<u64>);
        _606 = (_601.1: &std::num::Wrapping<u64>);
        _608 = <Wrapping<u64> as PartialEq>::eq(_605, _606) -> [return: bb220, unwind continue];
    }

    bb220: {
        _607 = Not(move _608);
        switchInt(move _607) -> [0: bb222, otherwise: bb221];
    }

    bb221: {
        _609 = core::panicking::AssertKind::Eq;
        _611 = Option::<Arguments<'_>>::None;
        _610 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _609, _605, _606, move _611) -> unwind continue;
    }

    bb222: {
        _612 = Wrapping::<u64>(const _);
        _614 = _612;
        _613 = test::black_box::<Wrapping<u64>>(move _614) -> [return: bb223, unwind continue];
    }

    bb223: {
        _612 = move _613;
        _616 = &mut _612;
        _2465 = const _;
        _615 = <Wrapping<u64> as SubAssign<&Wrapping<u64>>>::sub_assign(move _616, _2465) -> [return: bb224, unwind continue];
    }

    bb224: {
        _620 = _612;
        _619 = test::black_box::<Wrapping<u64>>(move _620) -> [return: bb225, unwind continue];
    }

    bb225: {
        _618 = &_619;
        _2464 = const _;
        _617 = (move _618, _2464);
        _621 = (_617.0: &std::num::Wrapping<u64>);
        _622 = (_617.1: &std::num::Wrapping<u64>);
        _624 = <Wrapping<u64> as PartialEq>::eq(_621, _622) -> [return: bb226, unwind continue];
    }

    bb226: {
        _623 = Not(move _624);
        switchInt(move _623) -> [0: bb228, otherwise: bb227];
    }

    bb227: {
        _625 = core::panicking::AssertKind::Eq;
        _627 = Option::<Arguments<'_>>::None;
        _626 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _625, _621, _622, move _627) -> unwind continue;
    }

    bb228: {
        _628 = Wrapping::<usize>(const _);
        _630 = _628;
        _629 = test::black_box::<Wrapping<usize>>(move _630) -> [return: bb229, unwind continue];
    }

    bb229: {
        _628 = move _629;
        _632 = &mut _628;
        _633 = Wrapping::<usize>(const 1_usize);
        _631 = <Wrapping<usize> as SubAssign>::sub_assign(move _632, move _633) -> [return: bb230, unwind continue];
    }

    bb230: {
        _637 = _628;
        _636 = test::black_box::<Wrapping<usize>>(move _637) -> [return: bb231, unwind continue];
    }

    bb231: {
        _635 = &_636;
        _2463 = const _;
        _634 = (move _635, _2463);
        _638 = (_634.0: &std::num::Wrapping<usize>);
        _639 = (_634.1: &std::num::Wrapping<usize>);
        _641 = <Wrapping<usize> as PartialEq>::eq(_638, _639) -> [return: bb232, unwind continue];
    }

    bb232: {
        _640 = Not(move _641);
        switchInt(move _640) -> [0: bb234, otherwise: bb233];
    }

    bb233: {
        _642 = core::panicking::AssertKind::Eq;
        _644 = Option::<Arguments<'_>>::None;
        _643 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _642, _638, _639, move _644) -> unwind continue;
    }

    bb234: {
        _645 = Wrapping::<usize>(const _);
        _647 = _645;
        _646 = test::black_box::<Wrapping<usize>>(move _647) -> [return: bb235, unwind continue];
    }

    bb235: {
        _645 = move _646;
        _649 = &mut _645;
        _2462 = const _;
        _648 = <Wrapping<usize> as SubAssign<&Wrapping<usize>>>::sub_assign(move _649, _2462) -> [return: bb236, unwind continue];
    }

    bb236: {
        _653 = _645;
        _652 = test::black_box::<Wrapping<usize>>(move _653) -> [return: bb237, unwind continue];
    }

    bb237: {
        _651 = &_652;
        _2461 = const _;
        _650 = (move _651, _2461);
        _654 = (_650.0: &std::num::Wrapping<usize>);
        _655 = (_650.1: &std::num::Wrapping<usize>);
        _657 = <Wrapping<usize> as PartialEq>::eq(_654, _655) -> [return: bb238, unwind continue];
    }

    bb238: {
        _656 = Not(move _657);
        switchInt(move _656) -> [0: bb240, otherwise: bb239];
    }

    bb239: {
        _658 = core::panicking::AssertKind::Eq;
        _660 = Option::<Arguments<'_>>::None;
        _659 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _658, _654, _655, move _660) -> unwind continue;
    }

    bb240: {
        _661 = Wrapping::<i8>(const _);
        _663 = _661;
        _662 = test::black_box::<Wrapping<i8>>(move _663) -> [return: bb241, unwind continue];
    }

    bb241: {
        _661 = move _662;
        _665 = &mut _661;
        _666 = Wrapping::<i8>(const 2_i8);
        _664 = <Wrapping<i8> as MulAssign>::mul_assign(move _665, move _666) -> [return: bb242, unwind continue];
    }

    bb242: {
        _670 = _661;
        _669 = test::black_box::<Wrapping<i8>>(move _670) -> [return: bb243, unwind continue];
    }

    bb243: {
        _668 = &_669;
        _2460 = const _;
        _667 = (move _668, _2460);
        _671 = (_667.0: &std::num::Wrapping<i8>);
        _672 = (_667.1: &std::num::Wrapping<i8>);
        _674 = <Wrapping<i8> as PartialEq>::eq(_671, _672) -> [return: bb244, unwind continue];
    }

    bb244: {
        _673 = Not(move _674);
        switchInt(move _673) -> [0: bb246, otherwise: bb245];
    }

    bb245: {
        _675 = core::panicking::AssertKind::Eq;
        _677 = Option::<Arguments<'_>>::None;
        _676 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _675, _671, _672, move _677) -> unwind continue;
    }

    bb246: {
        _678 = Wrapping::<i8>(const _);
        _680 = _678;
        _679 = test::black_box::<Wrapping<i8>>(move _680) -> [return: bb247, unwind continue];
    }

    bb247: {
        _678 = move _679;
        _682 = &mut _678;
        _2459 = const _;
        _681 = <Wrapping<i8> as MulAssign<&Wrapping<i8>>>::mul_assign(move _682, _2459) -> [return: bb248, unwind continue];
    }

    bb248: {
        _686 = _678;
        _685 = test::black_box::<Wrapping<i8>>(move _686) -> [return: bb249, unwind continue];
    }

    bb249: {
        _684 = &_685;
        _2458 = const _;
        _683 = (move _684, _2458);
        _687 = (_683.0: &std::num::Wrapping<i8>);
        _688 = (_683.1: &std::num::Wrapping<i8>);
        _690 = <Wrapping<i8> as PartialEq>::eq(_687, _688) -> [return: bb250, unwind continue];
    }

    bb250: {
        _689 = Not(move _690);
        switchInt(move _689) -> [0: bb252, otherwise: bb251];
    }

    bb251: {
        _691 = core::panicking::AssertKind::Eq;
        _693 = Option::<Arguments<'_>>::None;
        _692 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _691, _687, _688, move _693) -> unwind continue;
    }

    bb252: {
        _694 = Wrapping::<i16>(const _);
        _696 = _694;
        _695 = test::black_box::<Wrapping<i16>>(move _696) -> [return: bb253, unwind continue];
    }

    bb253: {
        _694 = move _695;
        _698 = &mut _694;
        _699 = Wrapping::<i16>(const 2_i16);
        _697 = <Wrapping<i16> as MulAssign>::mul_assign(move _698, move _699) -> [return: bb254, unwind continue];
    }

    bb254: {
        _703 = _694;
        _702 = test::black_box::<Wrapping<i16>>(move _703) -> [return: bb255, unwind continue];
    }

    bb255: {
        _701 = &_702;
        _2457 = const _;
        _700 = (move _701, _2457);
        _704 = (_700.0: &std::num::Wrapping<i16>);
        _705 = (_700.1: &std::num::Wrapping<i16>);
        _707 = <Wrapping<i16> as PartialEq>::eq(_704, _705) -> [return: bb256, unwind continue];
    }

    bb256: {
        _706 = Not(move _707);
        switchInt(move _706) -> [0: bb258, otherwise: bb257];
    }

    bb257: {
        _708 = core::panicking::AssertKind::Eq;
        _710 = Option::<Arguments<'_>>::None;
        _709 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _708, _704, _705, move _710) -> unwind continue;
    }

    bb258: {
        _711 = Wrapping::<i16>(const _);
        _713 = _711;
        _712 = test::black_box::<Wrapping<i16>>(move _713) -> [return: bb259, unwind continue];
    }

    bb259: {
        _711 = move _712;
        _715 = &mut _711;
        _2456 = const _;
        _714 = <Wrapping<i16> as MulAssign<&Wrapping<i16>>>::mul_assign(move _715, _2456) -> [return: bb260, unwind continue];
    }

    bb260: {
        _719 = _711;
        _718 = test::black_box::<Wrapping<i16>>(move _719) -> [return: bb261, unwind continue];
    }

    bb261: {
        _717 = &_718;
        _2455 = const _;
        _716 = (move _717, _2455);
        _720 = (_716.0: &std::num::Wrapping<i16>);
        _721 = (_716.1: &std::num::Wrapping<i16>);
        _723 = <Wrapping<i16> as PartialEq>::eq(_720, _721) -> [return: bb262, unwind continue];
    }

    bb262: {
        _722 = Not(move _723);
        switchInt(move _722) -> [0: bb264, otherwise: bb263];
    }

    bb263: {
        _724 = core::panicking::AssertKind::Eq;
        _726 = Option::<Arguments<'_>>::None;
        _725 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _724, _720, _721, move _726) -> unwind continue;
    }

    bb264: {
        _727 = Wrapping::<i32>(const _);
        _729 = _727;
        _728 = test::black_box::<Wrapping<i32>>(move _729) -> [return: bb265, unwind continue];
    }

    bb265: {
        _727 = move _728;
        _731 = &mut _727;
        _732 = Wrapping::<i32>(const 2_i32);
        _730 = <Wrapping<i32> as MulAssign>::mul_assign(move _731, move _732) -> [return: bb266, unwind continue];
    }

    bb266: {
        _736 = _727;
        _735 = test::black_box::<Wrapping<i32>>(move _736) -> [return: bb267, unwind continue];
    }

    bb267: {
        _734 = &_735;
        _2454 = const _;
        _733 = (move _734, _2454);
        _737 = (_733.0: &std::num::Wrapping<i32>);
        _738 = (_733.1: &std::num::Wrapping<i32>);
        _740 = <Wrapping<i32> as PartialEq>::eq(_737, _738) -> [return: bb268, unwind continue];
    }

    bb268: {
        _739 = Not(move _740);
        switchInt(move _739) -> [0: bb270, otherwise: bb269];
    }

    bb269: {
        _741 = core::panicking::AssertKind::Eq;
        _743 = Option::<Arguments<'_>>::None;
        _742 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _741, _737, _738, move _743) -> unwind continue;
    }

    bb270: {
        _744 = Wrapping::<i32>(const _);
        _746 = _744;
        _745 = test::black_box::<Wrapping<i32>>(move _746) -> [return: bb271, unwind continue];
    }

    bb271: {
        _744 = move _745;
        _748 = &mut _744;
        _2453 = const _;
        _747 = <Wrapping<i32> as MulAssign<&Wrapping<i32>>>::mul_assign(move _748, _2453) -> [return: bb272, unwind continue];
    }

    bb272: {
        _752 = _744;
        _751 = test::black_box::<Wrapping<i32>>(move _752) -> [return: bb273, unwind continue];
    }

    bb273: {
        _750 = &_751;
        _2452 = const _;
        _749 = (move _750, _2452);
        _753 = (_749.0: &std::num::Wrapping<i32>);
        _754 = (_749.1: &std::num::Wrapping<i32>);
        _756 = <Wrapping<i32> as PartialEq>::eq(_753, _754) -> [return: bb274, unwind continue];
    }

    bb274: {
        _755 = Not(move _756);
        switchInt(move _755) -> [0: bb276, otherwise: bb275];
    }

    bb275: {
        _757 = core::panicking::AssertKind::Eq;
        _759 = Option::<Arguments<'_>>::None;
        _758 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _757, _753, _754, move _759) -> unwind continue;
    }

    bb276: {
        _760 = Wrapping::<i64>(const _);
        _762 = _760;
        _761 = test::black_box::<Wrapping<i64>>(move _762) -> [return: bb277, unwind continue];
    }

    bb277: {
        _760 = move _761;
        _764 = &mut _760;
        _765 = Wrapping::<i64>(const 2_i64);
        _763 = <Wrapping<i64> as MulAssign>::mul_assign(move _764, move _765) -> [return: bb278, unwind continue];
    }

    bb278: {
        _769 = _760;
        _768 = test::black_box::<Wrapping<i64>>(move _769) -> [return: bb279, unwind continue];
    }

    bb279: {
        _767 = &_768;
        _2451 = const _;
        _766 = (move _767, _2451);
        _770 = (_766.0: &std::num::Wrapping<i64>);
        _771 = (_766.1: &std::num::Wrapping<i64>);
        _773 = <Wrapping<i64> as PartialEq>::eq(_770, _771) -> [return: bb280, unwind continue];
    }

    bb280: {
        _772 = Not(move _773);
        switchInt(move _772) -> [0: bb282, otherwise: bb281];
    }

    bb281: {
        _774 = core::panicking::AssertKind::Eq;
        _776 = Option::<Arguments<'_>>::None;
        _775 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _774, _770, _771, move _776) -> unwind continue;
    }

    bb282: {
        _777 = Wrapping::<i64>(const _);
        _779 = _777;
        _778 = test::black_box::<Wrapping<i64>>(move _779) -> [return: bb283, unwind continue];
    }

    bb283: {
        _777 = move _778;
        _781 = &mut _777;
        _2450 = const _;
        _780 = <Wrapping<i64> as MulAssign<&Wrapping<i64>>>::mul_assign(move _781, _2450) -> [return: bb284, unwind continue];
    }

    bb284: {
        _785 = _777;
        _784 = test::black_box::<Wrapping<i64>>(move _785) -> [return: bb285, unwind continue];
    }

    bb285: {
        _783 = &_784;
        _2449 = const _;
        _782 = (move _783, _2449);
        _786 = (_782.0: &std::num::Wrapping<i64>);
        _787 = (_782.1: &std::num::Wrapping<i64>);
        _789 = <Wrapping<i64> as PartialEq>::eq(_786, _787) -> [return: bb286, unwind continue];
    }

    bb286: {
        _788 = Not(move _789);
        switchInt(move _788) -> [0: bb288, otherwise: bb287];
    }

    bb287: {
        _790 = core::panicking::AssertKind::Eq;
        _792 = Option::<Arguments<'_>>::None;
        _791 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _790, _786, _787, move _792) -> unwind continue;
    }

    bb288: {
        _793 = Wrapping::<isize>(const _);
        _795 = _793;
        _794 = test::black_box::<Wrapping<isize>>(move _795) -> [return: bb289, unwind continue];
    }

    bb289: {
        _793 = move _794;
        _797 = &mut _793;
        _798 = Wrapping::<isize>(const 2_isize);
        _796 = <Wrapping<isize> as MulAssign>::mul_assign(move _797, move _798) -> [return: bb290, unwind continue];
    }

    bb290: {
        _802 = _793;
        _801 = test::black_box::<Wrapping<isize>>(move _802) -> [return: bb291, unwind continue];
    }

    bb291: {
        _800 = &_801;
        _2448 = const _;
        _799 = (move _800, _2448);
        _803 = (_799.0: &std::num::Wrapping<isize>);
        _804 = (_799.1: &std::num::Wrapping<isize>);
        _806 = <Wrapping<isize> as PartialEq>::eq(_803, _804) -> [return: bb292, unwind continue];
    }

    bb292: {
        _805 = Not(move _806);
        switchInt(move _805) -> [0: bb294, otherwise: bb293];
    }

    bb293: {
        _807 = core::panicking::AssertKind::Eq;
        _809 = Option::<Arguments<'_>>::None;
        _808 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _807, _803, _804, move _809) -> unwind continue;
    }

    bb294: {
        _810 = Wrapping::<isize>(const _);
        _812 = _810;
        _811 = test::black_box::<Wrapping<isize>>(move _812) -> [return: bb295, unwind continue];
    }

    bb295: {
        _810 = move _811;
        _814 = &mut _810;
        _2447 = const _;
        _813 = <Wrapping<isize> as MulAssign<&Wrapping<isize>>>::mul_assign(move _814, _2447) -> [return: bb296, unwind continue];
    }

    bb296: {
        _818 = _810;
        _817 = test::black_box::<Wrapping<isize>>(move _818) -> [return: bb297, unwind continue];
    }

    bb297: {
        _816 = &_817;
        _2446 = const _;
        _815 = (move _816, _2446);
        _819 = (_815.0: &std::num::Wrapping<isize>);
        _820 = (_815.1: &std::num::Wrapping<isize>);
        _822 = <Wrapping<isize> as PartialEq>::eq(_819, _820) -> [return: bb298, unwind continue];
    }

    bb298: {
        _821 = Not(move _822);
        switchInt(move _821) -> [0: bb300, otherwise: bb299];
    }

    bb299: {
        _823 = core::panicking::AssertKind::Eq;
        _825 = Option::<Arguments<'_>>::None;
        _824 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _823, _819, _820, move _825) -> unwind continue;
    }

    bb300: {
        _826 = Wrapping::<u8>(const _);
        _828 = _826;
        _827 = test::black_box::<Wrapping<u8>>(move _828) -> [return: bb301, unwind continue];
    }

    bb301: {
        _826 = move _827;
        _830 = &mut _826;
        _831 = Wrapping::<u8>(const 2_u8);
        _829 = <Wrapping<u8> as MulAssign>::mul_assign(move _830, move _831) -> [return: bb302, unwind continue];
    }

    bb302: {
        _835 = _826;
        _834 = test::black_box::<Wrapping<u8>>(move _835) -> [return: bb303, unwind continue];
    }

    bb303: {
        _833 = &_834;
        _2445 = const _;
        _832 = (move _833, _2445);
        _836 = (_832.0: &std::num::Wrapping<u8>);
        _837 = (_832.1: &std::num::Wrapping<u8>);
        _839 = <Wrapping<u8> as PartialEq>::eq(_836, _837) -> [return: bb304, unwind continue];
    }

    bb304: {
        _838 = Not(move _839);
        switchInt(move _838) -> [0: bb306, otherwise: bb305];
    }

    bb305: {
        _840 = core::panicking::AssertKind::Eq;
        _842 = Option::<Arguments<'_>>::None;
        _841 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _840, _836, _837, move _842) -> unwind continue;
    }

    bb306: {
        _843 = Wrapping::<u8>(const _);
        _845 = _843;
        _844 = test::black_box::<Wrapping<u8>>(move _845) -> [return: bb307, unwind continue];
    }

    bb307: {
        _843 = move _844;
        _847 = &mut _843;
        _2444 = const _;
        _846 = <Wrapping<u8> as MulAssign<&Wrapping<u8>>>::mul_assign(move _847, _2444) -> [return: bb308, unwind continue];
    }

    bb308: {
        _851 = _843;
        _850 = test::black_box::<Wrapping<u8>>(move _851) -> [return: bb309, unwind continue];
    }

    bb309: {
        _849 = &_850;
        _2443 = const _;
        _848 = (move _849, _2443);
        _852 = (_848.0: &std::num::Wrapping<u8>);
        _853 = (_848.1: &std::num::Wrapping<u8>);
        _855 = <Wrapping<u8> as PartialEq>::eq(_852, _853) -> [return: bb310, unwind continue];
    }

    bb310: {
        _854 = Not(move _855);
        switchInt(move _854) -> [0: bb312, otherwise: bb311];
    }

    bb311: {
        _856 = core::panicking::AssertKind::Eq;
        _858 = Option::<Arguments<'_>>::None;
        _857 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _856, _852, _853, move _858) -> unwind continue;
    }

    bb312: {
        _859 = Wrapping::<u16>(const _);
        _861 = _859;
        _860 = test::black_box::<Wrapping<u16>>(move _861) -> [return: bb313, unwind continue];
    }

    bb313: {
        _859 = move _860;
        _863 = &mut _859;
        _864 = Wrapping::<u16>(const 2_u16);
        _862 = <Wrapping<u16> as MulAssign>::mul_assign(move _863, move _864) -> [return: bb314, unwind continue];
    }

    bb314: {
        _868 = _859;
        _867 = test::black_box::<Wrapping<u16>>(move _868) -> [return: bb315, unwind continue];
    }

    bb315: {
        _866 = &_867;
        _2442 = const _;
        _865 = (move _866, _2442);
        _869 = (_865.0: &std::num::Wrapping<u16>);
        _870 = (_865.1: &std::num::Wrapping<u16>);
        _872 = <Wrapping<u16> as PartialEq>::eq(_869, _870) -> [return: bb316, unwind continue];
    }

    bb316: {
        _871 = Not(move _872);
        switchInt(move _871) -> [0: bb318, otherwise: bb317];
    }

    bb317: {
        _873 = core::panicking::AssertKind::Eq;
        _875 = Option::<Arguments<'_>>::None;
        _874 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _873, _869, _870, move _875) -> unwind continue;
    }

    bb318: {
        _876 = Wrapping::<u16>(const _);
        _878 = _876;
        _877 = test::black_box::<Wrapping<u16>>(move _878) -> [return: bb319, unwind continue];
    }

    bb319: {
        _876 = move _877;
        _880 = &mut _876;
        _2441 = const _;
        _879 = <Wrapping<u16> as MulAssign<&Wrapping<u16>>>::mul_assign(move _880, _2441) -> [return: bb320, unwind continue];
    }

    bb320: {
        _884 = _876;
        _883 = test::black_box::<Wrapping<u16>>(move _884) -> [return: bb321, unwind continue];
    }

    bb321: {
        _882 = &_883;
        _2440 = const _;
        _881 = (move _882, _2440);
        _885 = (_881.0: &std::num::Wrapping<u16>);
        _886 = (_881.1: &std::num::Wrapping<u16>);
        _888 = <Wrapping<u16> as PartialEq>::eq(_885, _886) -> [return: bb322, unwind continue];
    }

    bb322: {
        _887 = Not(move _888);
        switchInt(move _887) -> [0: bb324, otherwise: bb323];
    }

    bb323: {
        _889 = core::panicking::AssertKind::Eq;
        _891 = Option::<Arguments<'_>>::None;
        _890 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _889, _885, _886, move _891) -> unwind continue;
    }

    bb324: {
        _892 = Wrapping::<u32>(const _);
        _894 = _892;
        _893 = test::black_box::<Wrapping<u32>>(move _894) -> [return: bb325, unwind continue];
    }

    bb325: {
        _892 = move _893;
        _896 = &mut _892;
        _897 = Wrapping::<u32>(const 2_u32);
        _895 = <Wrapping<u32> as MulAssign>::mul_assign(move _896, move _897) -> [return: bb326, unwind continue];
    }

    bb326: {
        _901 = _892;
        _900 = test::black_box::<Wrapping<u32>>(move _901) -> [return: bb327, unwind continue];
    }

    bb327: {
        _899 = &_900;
        _2439 = const _;
        _898 = (move _899, _2439);
        _902 = (_898.0: &std::num::Wrapping<u32>);
        _903 = (_898.1: &std::num::Wrapping<u32>);
        _905 = <Wrapping<u32> as PartialEq>::eq(_902, _903) -> [return: bb328, unwind continue];
    }

    bb328: {
        _904 = Not(move _905);
        switchInt(move _904) -> [0: bb330, otherwise: bb329];
    }

    bb329: {
        _906 = core::panicking::AssertKind::Eq;
        _908 = Option::<Arguments<'_>>::None;
        _907 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _906, _902, _903, move _908) -> unwind continue;
    }

    bb330: {
        _909 = Wrapping::<u32>(const _);
        _911 = _909;
        _910 = test::black_box::<Wrapping<u32>>(move _911) -> [return: bb331, unwind continue];
    }

    bb331: {
        _909 = move _910;
        _913 = &mut _909;
        _2438 = const _;
        _912 = <Wrapping<u32> as MulAssign<&Wrapping<u32>>>::mul_assign(move _913, _2438) -> [return: bb332, unwind continue];
    }

    bb332: {
        _917 = _909;
        _916 = test::black_box::<Wrapping<u32>>(move _917) -> [return: bb333, unwind continue];
    }

    bb333: {
        _915 = &_916;
        _2437 = const _;
        _914 = (move _915, _2437);
        _918 = (_914.0: &std::num::Wrapping<u32>);
        _919 = (_914.1: &std::num::Wrapping<u32>);
        _921 = <Wrapping<u32> as PartialEq>::eq(_918, _919) -> [return: bb334, unwind continue];
    }

    bb334: {
        _920 = Not(move _921);
        switchInt(move _920) -> [0: bb336, otherwise: bb335];
    }

    bb335: {
        _922 = core::panicking::AssertKind::Eq;
        _924 = Option::<Arguments<'_>>::None;
        _923 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _922, _918, _919, move _924) -> unwind continue;
    }

    bb336: {
        _925 = Wrapping::<u64>(const _);
        _927 = _925;
        _926 = test::black_box::<Wrapping<u64>>(move _927) -> [return: bb337, unwind continue];
    }

    bb337: {
        _925 = move _926;
        _929 = &mut _925;
        _930 = Wrapping::<u64>(const 2_u64);
        _928 = <Wrapping<u64> as MulAssign>::mul_assign(move _929, move _930) -> [return: bb338, unwind continue];
    }

    bb338: {
        _934 = _925;
        _933 = test::black_box::<Wrapping<u64>>(move _934) -> [return: bb339, unwind continue];
    }

    bb339: {
        _932 = &_933;
        _2436 = const _;
        _931 = (move _932, _2436);
        _935 = (_931.0: &std::num::Wrapping<u64>);
        _936 = (_931.1: &std::num::Wrapping<u64>);
        _938 = <Wrapping<u64> as PartialEq>::eq(_935, _936) -> [return: bb340, unwind continue];
    }

    bb340: {
        _937 = Not(move _938);
        switchInt(move _937) -> [0: bb342, otherwise: bb341];
    }

    bb341: {
        _939 = core::panicking::AssertKind::Eq;
        _941 = Option::<Arguments<'_>>::None;
        _940 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _939, _935, _936, move _941) -> unwind continue;
    }

    bb342: {
        _942 = Wrapping::<u64>(const _);
        _944 = _942;
        _943 = test::black_box::<Wrapping<u64>>(move _944) -> [return: bb343, unwind continue];
    }

    bb343: {
        _942 = move _943;
        _946 = &mut _942;
        _2435 = const _;
        _945 = <Wrapping<u64> as MulAssign<&Wrapping<u64>>>::mul_assign(move _946, _2435) -> [return: bb344, unwind continue];
    }

    bb344: {
        _950 = _942;
        _949 = test::black_box::<Wrapping<u64>>(move _950) -> [return: bb345, unwind continue];
    }

    bb345: {
        _948 = &_949;
        _2434 = const _;
        _947 = (move _948, _2434);
        _951 = (_947.0: &std::num::Wrapping<u64>);
        _952 = (_947.1: &std::num::Wrapping<u64>);
        _954 = <Wrapping<u64> as PartialEq>::eq(_951, _952) -> [return: bb346, unwind continue];
    }

    bb346: {
        _953 = Not(move _954);
        switchInt(move _953) -> [0: bb348, otherwise: bb347];
    }

    bb347: {
        _955 = core::panicking::AssertKind::Eq;
        _957 = Option::<Arguments<'_>>::None;
        _956 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _955, _951, _952, move _957) -> unwind continue;
    }

    bb348: {
        _958 = Wrapping::<usize>(const _);
        _960 = _958;
        _959 = test::black_box::<Wrapping<usize>>(move _960) -> [return: bb349, unwind continue];
    }

    bb349: {
        _958 = move _959;
        _962 = &mut _958;
        _963 = Wrapping::<usize>(const 2_usize);
        _961 = <Wrapping<usize> as MulAssign>::mul_assign(move _962, move _963) -> [return: bb350, unwind continue];
    }

    bb350: {
        _967 = _958;
        _966 = test::black_box::<Wrapping<usize>>(move _967) -> [return: bb351, unwind continue];
    }

    bb351: {
        _965 = &_966;
        _2433 = const _;
        _964 = (move _965, _2433);
        _968 = (_964.0: &std::num::Wrapping<usize>);
        _969 = (_964.1: &std::num::Wrapping<usize>);
        _971 = <Wrapping<usize> as PartialEq>::eq(_968, _969) -> [return: bb352, unwind continue];
    }

    bb352: {
        _970 = Not(move _971);
        switchInt(move _970) -> [0: bb354, otherwise: bb353];
    }

    bb353: {
        _972 = core::panicking::AssertKind::Eq;
        _974 = Option::<Arguments<'_>>::None;
        _973 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _972, _968, _969, move _974) -> unwind continue;
    }

    bb354: {
        _975 = Wrapping::<usize>(const _);
        _977 = _975;
        _976 = test::black_box::<Wrapping<usize>>(move _977) -> [return: bb355, unwind continue];
    }

    bb355: {
        _975 = move _976;
        _979 = &mut _975;
        _2432 = const _;
        _978 = <Wrapping<usize> as MulAssign<&Wrapping<usize>>>::mul_assign(move _979, _2432) -> [return: bb356, unwind continue];
    }

    bb356: {
        _983 = _975;
        _982 = test::black_box::<Wrapping<usize>>(move _983) -> [return: bb357, unwind continue];
    }

    bb357: {
        _981 = &_982;
        _2431 = const _;
        _980 = (move _981, _2431);
        _984 = (_980.0: &std::num::Wrapping<usize>);
        _985 = (_980.1: &std::num::Wrapping<usize>);
        _987 = <Wrapping<usize> as PartialEq>::eq(_984, _985) -> [return: bb358, unwind continue];
    }

    bb358: {
        _986 = Not(move _987);
        switchInt(move _986) -> [0: bb360, otherwise: bb359];
    }

    bb359: {
        _988 = core::panicking::AssertKind::Eq;
        _990 = Option::<Arguments<'_>>::None;
        _989 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _988, _984, _985, move _990) -> unwind continue;
    }

    bb360: {
        _991 = Wrapping::<i8>(const _);
        _993 = _991;
        _992 = test::black_box::<Wrapping<i8>>(move _993) -> [return: bb361, unwind continue];
    }

    bb361: {
        _991 = move _992;
        _995 = &mut _991;
        _996 = Wrapping::<i8>(const -1_i8);
        _994 = <Wrapping<i8> as DivAssign>::div_assign(move _995, move _996) -> [return: bb362, unwind continue];
    }

    bb362: {
        _1000 = _991;
        _999 = test::black_box::<Wrapping<i8>>(move _1000) -> [return: bb363, unwind continue];
    }

    bb363: {
        _998 = &_999;
        _2430 = const _;
        _997 = (move _998, _2430);
        _1001 = (_997.0: &std::num::Wrapping<i8>);
        _1002 = (_997.1: &std::num::Wrapping<i8>);
        _1004 = <Wrapping<i8> as PartialEq>::eq(_1001, _1002) -> [return: bb364, unwind continue];
    }

    bb364: {
        _1003 = Not(move _1004);
        switchInt(move _1003) -> [0: bb366, otherwise: bb365];
    }

    bb365: {
        _1005 = core::panicking::AssertKind::Eq;
        _1007 = Option::<Arguments<'_>>::None;
        _1006 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _1005, _1001, _1002, move _1007) -> unwind continue;
    }

    bb366: {
        _1008 = Wrapping::<i8>(const _);
        _1010 = _1008;
        _1009 = test::black_box::<Wrapping<i8>>(move _1010) -> [return: bb367, unwind continue];
    }

    bb367: {
        _1008 = move _1009;
        _1012 = &mut _1008;
        _2429 = const _;
        _1011 = <Wrapping<i8> as DivAssign<&Wrapping<i8>>>::div_assign(move _1012, _2429) -> [return: bb368, unwind continue];
    }

    bb368: {
        _1016 = _1008;
        _1015 = test::black_box::<Wrapping<i8>>(move _1016) -> [return: bb369, unwind continue];
    }

    bb369: {
        _1014 = &_1015;
        _2428 = const _;
        _1013 = (move _1014, _2428);
        _1017 = (_1013.0: &std::num::Wrapping<i8>);
        _1018 = (_1013.1: &std::num::Wrapping<i8>);
        _1020 = <Wrapping<i8> as PartialEq>::eq(_1017, _1018) -> [return: bb370, unwind continue];
    }

    bb370: {
        _1019 = Not(move _1020);
        switchInt(move _1019) -> [0: bb372, otherwise: bb371];
    }

    bb371: {
        _1021 = core::panicking::AssertKind::Eq;
        _1023 = Option::<Arguments<'_>>::None;
        _1022 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _1021, _1017, _1018, move _1023) -> unwind continue;
    }

    bb372: {
        _1024 = Wrapping::<i16>(const _);
        _1026 = _1024;
        _1025 = test::black_box::<Wrapping<i16>>(move _1026) -> [return: bb373, unwind continue];
    }

    bb373: {
        _1024 = move _1025;
        _1028 = &mut _1024;
        _1029 = Wrapping::<i16>(const -1_i16);
        _1027 = <Wrapping<i16> as DivAssign>::div_assign(move _1028, move _1029) -> [return: bb374, unwind continue];
    }

    bb374: {
        _1033 = _1024;
        _1032 = test::black_box::<Wrapping<i16>>(move _1033) -> [return: bb375, unwind continue];
    }

    bb375: {
        _1031 = &_1032;
        _2427 = const _;
        _1030 = (move _1031, _2427);
        _1034 = (_1030.0: &std::num::Wrapping<i16>);
        _1035 = (_1030.1: &std::num::Wrapping<i16>);
        _1037 = <Wrapping<i16> as PartialEq>::eq(_1034, _1035) -> [return: bb376, unwind continue];
    }

    bb376: {
        _1036 = Not(move _1037);
        switchInt(move _1036) -> [0: bb378, otherwise: bb377];
    }

    bb377: {
        _1038 = core::panicking::AssertKind::Eq;
        _1040 = Option::<Arguments<'_>>::None;
        _1039 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _1038, _1034, _1035, move _1040) -> unwind continue;
    }

    bb378: {
        _1041 = Wrapping::<i16>(const _);
        _1043 = _1041;
        _1042 = test::black_box::<Wrapping<i16>>(move _1043) -> [return: bb379, unwind continue];
    }

    bb379: {
        _1041 = move _1042;
        _1045 = &mut _1041;
        _2426 = const _;
        _1044 = <Wrapping<i16> as DivAssign<&Wrapping<i16>>>::div_assign(move _1045, _2426) -> [return: bb380, unwind continue];
    }

    bb380: {
        _1049 = _1041;
        _1048 = test::black_box::<Wrapping<i16>>(move _1049) -> [return: bb381, unwind continue];
    }

    bb381: {
        _1047 = &_1048;
        _2425 = const _;
        _1046 = (move _1047, _2425);
        _1050 = (_1046.0: &std::num::Wrapping<i16>);
        _1051 = (_1046.1: &std::num::Wrapping<i16>);
        _1053 = <Wrapping<i16> as PartialEq>::eq(_1050, _1051) -> [return: bb382, unwind continue];
    }

    bb382: {
        _1052 = Not(move _1053);
        switchInt(move _1052) -> [0: bb384, otherwise: bb383];
    }

    bb383: {
        _1054 = core::panicking::AssertKind::Eq;
        _1056 = Option::<Arguments<'_>>::None;
        _1055 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _1054, _1050, _1051, move _1056) -> unwind continue;
    }

    bb384: {
        _1057 = Wrapping::<i32>(const _);
        _1059 = _1057;
        _1058 = test::black_box::<Wrapping<i32>>(move _1059) -> [return: bb385, unwind continue];
    }

    bb385: {
        _1057 = move _1058;
        _1061 = &mut _1057;
        _1062 = Wrapping::<i32>(const -1_i32);
        _1060 = <Wrapping<i32> as DivAssign>::div_assign(move _1061, move _1062) -> [return: bb386, unwind continue];
    }

    bb386: {
        _1066 = _1057;
        _1065 = test::black_box::<Wrapping<i32>>(move _1066) -> [return: bb387, unwind continue];
    }

    bb387: {
        _1064 = &_1065;
        _2424 = const _;
        _1063 = (move _1064, _2424);
        _1067 = (_1063.0: &std::num::Wrapping<i32>);
        _1068 = (_1063.1: &std::num::Wrapping<i32>);
        _1070 = <Wrapping<i32> as PartialEq>::eq(_1067, _1068) -> [return: bb388, unwind continue];
    }

    bb388: {
        _1069 = Not(move _1070);
        switchInt(move _1069) -> [0: bb390, otherwise: bb389];
    }

    bb389: {
        _1071 = core::panicking::AssertKind::Eq;
        _1073 = Option::<Arguments<'_>>::None;
        _1072 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _1071, _1067, _1068, move _1073) -> unwind continue;
    }

    bb390: {
        _1074 = Wrapping::<i32>(const _);
        _1076 = _1074;
        _1075 = test::black_box::<Wrapping<i32>>(move _1076) -> [return: bb391, unwind continue];
    }

    bb391: {
        _1074 = move _1075;
        _1078 = &mut _1074;
        _2423 = const _;
        _1077 = <Wrapping<i32> as DivAssign<&Wrapping<i32>>>::div_assign(move _1078, _2423) -> [return: bb392, unwind continue];
    }

    bb392: {
        _1082 = _1074;
        _1081 = test::black_box::<Wrapping<i32>>(move _1082) -> [return: bb393, unwind continue];
    }

    bb393: {
        _1080 = &_1081;
        _2422 = const _;
        _1079 = (move _1080, _2422);
        _1083 = (_1079.0: &std::num::Wrapping<i32>);
        _1084 = (_1079.1: &std::num::Wrapping<i32>);
        _1086 = <Wrapping<i32> as PartialEq>::eq(_1083, _1084) -> [return: bb394, unwind continue];
    }

    bb394: {
        _1085 = Not(move _1086);
        switchInt(move _1085) -> [0: bb396, otherwise: bb395];
    }

    bb395: {
        _1087 = core::panicking::AssertKind::Eq;
        _1089 = Option::<Arguments<'_>>::None;
        _1088 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _1087, _1083, _1084, move _1089) -> unwind continue;
    }

    bb396: {
        _1090 = Wrapping::<i64>(const _);
        _1092 = _1090;
        _1091 = test::black_box::<Wrapping<i64>>(move _1092) -> [return: bb397, unwind continue];
    }

    bb397: {
        _1090 = move _1091;
        _1094 = &mut _1090;
        _1095 = Wrapping::<i64>(const -1_i64);
        _1093 = <Wrapping<i64> as DivAssign>::div_assign(move _1094, move _1095) -> [return: bb398, unwind continue];
    }

    bb398: {
        _1099 = _1090;
        _1098 = test::black_box::<Wrapping<i64>>(move _1099) -> [return: bb399, unwind continue];
    }

    bb399: {
        _1097 = &_1098;
        _2421 = const _;
        _1096 = (move _1097, _2421);
        _1100 = (_1096.0: &std::num::Wrapping<i64>);
        _1101 = (_1096.1: &std::num::Wrapping<i64>);
        _1103 = <Wrapping<i64> as PartialEq>::eq(_1100, _1101) -> [return: bb400, unwind continue];
    }

    bb400: {
        _1102 = Not(move _1103);
        switchInt(move _1102) -> [0: bb402, otherwise: bb401];
    }

    bb401: {
        _1104 = core::panicking::AssertKind::Eq;
        _1106 = Option::<Arguments<'_>>::None;
        _1105 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _1104, _1100, _1101, move _1106) -> unwind continue;
    }

    bb402: {
        _1107 = Wrapping::<i64>(const _);
        _1109 = _1107;
        _1108 = test::black_box::<Wrapping<i64>>(move _1109) -> [return: bb403, unwind continue];
    }

    bb403: {
        _1107 = move _1108;
        _1111 = &mut _1107;
        _2420 = const _;
        _1110 = <Wrapping<i64> as DivAssign<&Wrapping<i64>>>::div_assign(move _1111, _2420) -> [return: bb404, unwind continue];
    }

    bb404: {
        _1115 = _1107;
        _1114 = test::black_box::<Wrapping<i64>>(move _1115) -> [return: bb405, unwind continue];
    }

    bb405: {
        _1113 = &_1114;
        _2419 = const _;
        _1112 = (move _1113, _2419);
        _1116 = (_1112.0: &std::num::Wrapping<i64>);
        _1117 = (_1112.1: &std::num::Wrapping<i64>);
        _1119 = <Wrapping<i64> as PartialEq>::eq(_1116, _1117) -> [return: bb406, unwind continue];
    }

    bb406: {
        _1118 = Not(move _1119);
        switchInt(move _1118) -> [0: bb408, otherwise: bb407];
    }

    bb407: {
        _1120 = core::panicking::AssertKind::Eq;
        _1122 = Option::<Arguments<'_>>::None;
        _1121 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _1120, _1116, _1117, move _1122) -> unwind continue;
    }

    bb408: {
        _1123 = Wrapping::<isize>(const _);
        _1125 = _1123;
        _1124 = test::black_box::<Wrapping<isize>>(move _1125) -> [return: bb409, unwind continue];
    }

    bb409: {
        _1123 = move _1124;
        _1127 = &mut _1123;
        _1128 = Wrapping::<isize>(const -1_isize);
        _1126 = <Wrapping<isize> as DivAssign>::div_assign(move _1127, move _1128) -> [return: bb410, unwind continue];
    }

    bb410: {
        _1132 = _1123;
        _1131 = test::black_box::<Wrapping<isize>>(move _1132) -> [return: bb411, unwind continue];
    }

    bb411: {
        _1130 = &_1131;
        _2418 = const _;
        _1129 = (move _1130, _2418);
        _1133 = (_1129.0: &std::num::Wrapping<isize>);
        _1134 = (_1129.1: &std::num::Wrapping<isize>);
        _1136 = <Wrapping<isize> as PartialEq>::eq(_1133, _1134) -> [return: bb412, unwind continue];
    }

    bb412: {
        _1135 = Not(move _1136);
        switchInt(move _1135) -> [0: bb414, otherwise: bb413];
    }

    bb413: {
        _1137 = core::panicking::AssertKind::Eq;
        _1139 = Option::<Arguments<'_>>::None;
        _1138 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _1137, _1133, _1134, move _1139) -> unwind continue;
    }

    bb414: {
        _1140 = Wrapping::<isize>(const _);
        _1142 = _1140;
        _1141 = test::black_box::<Wrapping<isize>>(move _1142) -> [return: bb415, unwind continue];
    }

    bb415: {
        _1140 = move _1141;
        _1144 = &mut _1140;
        _2417 = const _;
        _1143 = <Wrapping<isize> as DivAssign<&Wrapping<isize>>>::div_assign(move _1144, _2417) -> [return: bb416, unwind continue];
    }

    bb416: {
        _1148 = _1140;
        _1147 = test::black_box::<Wrapping<isize>>(move _1148) -> [return: bb417, unwind continue];
    }

    bb417: {
        _1146 = &_1147;
        _2416 = const _;
        _1145 = (move _1146, _2416);
        _1149 = (_1145.0: &std::num::Wrapping<isize>);
        _1150 = (_1145.1: &std::num::Wrapping<isize>);
        _1152 = <Wrapping<isize> as PartialEq>::eq(_1149, _1150) -> [return: bb418, unwind continue];
    }

    bb418: {
        _1151 = Not(move _1152);
        switchInt(move _1151) -> [0: bb420, otherwise: bb419];
    }

    bb419: {
        _1153 = core::panicking::AssertKind::Eq;
        _1155 = Option::<Arguments<'_>>::None;
        _1154 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _1153, _1149, _1150, move _1155) -> unwind continue;
    }

    bb420: {
        _1156 = Wrapping::<i8>(const _);
        _1158 = _1156;
        _1157 = test::black_box::<Wrapping<i8>>(move _1158) -> [return: bb421, unwind continue];
    }

    bb421: {
        _1156 = move _1157;
        _1160 = &mut _1156;
        _1161 = Wrapping::<i8>(const -1_i8);
        _1159 = <Wrapping<i8> as RemAssign>::rem_assign(move _1160, move _1161) -> [return: bb422, unwind continue];
    }

    bb422: {
        _1165 = _1156;
        _1164 = test::black_box::<Wrapping<i8>>(move _1165) -> [return: bb423, unwind continue];
    }

    bb423: {
        _1163 = &_1164;
        _2415 = const _;
        _1162 = (move _1163, _2415);
        _1166 = (_1162.0: &std::num::Wrapping<i8>);
        _1167 = (_1162.1: &std::num::Wrapping<i8>);
        _1169 = <Wrapping<i8> as PartialEq>::eq(_1166, _1167) -> [return: bb424, unwind continue];
    }

    bb424: {
        _1168 = Not(move _1169);
        switchInt(move _1168) -> [0: bb426, otherwise: bb425];
    }

    bb425: {
        _1170 = core::panicking::AssertKind::Eq;
        _1172 = Option::<Arguments<'_>>::None;
        _1171 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _1170, _1166, _1167, move _1172) -> unwind continue;
    }

    bb426: {
        _1173 = Wrapping::<i8>(const _);
        _1175 = _1173;
        _1174 = test::black_box::<Wrapping<i8>>(move _1175) -> [return: bb427, unwind continue];
    }

    bb427: {
        _1173 = move _1174;
        _1177 = &mut _1173;
        _2414 = const _;
        _1176 = <Wrapping<i8> as RemAssign<&Wrapping<i8>>>::rem_assign(move _1177, _2414) -> [return: bb428, unwind continue];
    }

    bb428: {
        _1181 = _1173;
        _1180 = test::black_box::<Wrapping<i8>>(move _1181) -> [return: bb429, unwind continue];
    }

    bb429: {
        _1179 = &_1180;
        _2413 = const _;
        _1178 = (move _1179, _2413);
        _1182 = (_1178.0: &std::num::Wrapping<i8>);
        _1183 = (_1178.1: &std::num::Wrapping<i8>);
        _1185 = <Wrapping<i8> as PartialEq>::eq(_1182, _1183) -> [return: bb430, unwind continue];
    }

    bb430: {
        _1184 = Not(move _1185);
        switchInt(move _1184) -> [0: bb432, otherwise: bb431];
    }

    bb431: {
        _1186 = core::panicking::AssertKind::Eq;
        _1188 = Option::<Arguments<'_>>::None;
        _1187 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _1186, _1182, _1183, move _1188) -> unwind continue;
    }

    bb432: {
        _1189 = Wrapping::<i16>(const _);
        _1191 = _1189;
        _1190 = test::black_box::<Wrapping<i16>>(move _1191) -> [return: bb433, unwind continue];
    }

    bb433: {
        _1189 = move _1190;
        _1193 = &mut _1189;
        _1194 = Wrapping::<i16>(const -1_i16);
        _1192 = <Wrapping<i16> as RemAssign>::rem_assign(move _1193, move _1194) -> [return: bb434, unwind continue];
    }

    bb434: {
        _1198 = _1189;
        _1197 = test::black_box::<Wrapping<i16>>(move _1198) -> [return: bb435, unwind continue];
    }

    bb435: {
        _1196 = &_1197;
        _2412 = const _;
        _1195 = (move _1196, _2412);
        _1199 = (_1195.0: &std::num::Wrapping<i16>);
        _1200 = (_1195.1: &std::num::Wrapping<i16>);
        _1202 = <Wrapping<i16> as PartialEq>::eq(_1199, _1200) -> [return: bb436, unwind continue];
    }

    bb436: {
        _1201 = Not(move _1202);
        switchInt(move _1201) -> [0: bb438, otherwise: bb437];
    }

    bb437: {
        _1203 = core::panicking::AssertKind::Eq;
        _1205 = Option::<Arguments<'_>>::None;
        _1204 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _1203, _1199, _1200, move _1205) -> unwind continue;
    }

    bb438: {
        _1206 = Wrapping::<i16>(const _);
        _1208 = _1206;
        _1207 = test::black_box::<Wrapping<i16>>(move _1208) -> [return: bb439, unwind continue];
    }

    bb439: {
        _1206 = move _1207;
        _1210 = &mut _1206;
        _2411 = const _;
        _1209 = <Wrapping<i16> as RemAssign<&Wrapping<i16>>>::rem_assign(move _1210, _2411) -> [return: bb440, unwind continue];
    }

    bb440: {
        _1214 = _1206;
        _1213 = test::black_box::<Wrapping<i16>>(move _1214) -> [return: bb441, unwind continue];
    }

    bb441: {
        _1212 = &_1213;
        _2410 = const _;
        _1211 = (move _1212, _2410);
        _1215 = (_1211.0: &std::num::Wrapping<i16>);
        _1216 = (_1211.1: &std::num::Wrapping<i16>);
        _1218 = <Wrapping<i16> as PartialEq>::eq(_1215, _1216) -> [return: bb442, unwind continue];
    }

    bb442: {
        _1217 = Not(move _1218);
        switchInt(move _1217) -> [0: bb444, otherwise: bb443];
    }

    bb443: {
        _1219 = core::panicking::AssertKind::Eq;
        _1221 = Option::<Arguments<'_>>::None;
        _1220 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _1219, _1215, _1216, move _1221) -> unwind continue;
    }

    bb444: {
        _1222 = Wrapping::<i32>(const _);
        _1224 = _1222;
        _1223 = test::black_box::<Wrapping<i32>>(move _1224) -> [return: bb445, unwind continue];
    }

    bb445: {
        _1222 = move _1223;
        _1226 = &mut _1222;
        _1227 = Wrapping::<i32>(const -1_i32);
        _1225 = <Wrapping<i32> as RemAssign>::rem_assign(move _1226, move _1227) -> [return: bb446, unwind continue];
    }

    bb446: {
        _1231 = _1222;
        _1230 = test::black_box::<Wrapping<i32>>(move _1231) -> [return: bb447, unwind continue];
    }

    bb447: {
        _1229 = &_1230;
        _2409 = const _;
        _1228 = (move _1229, _2409);
        _1232 = (_1228.0: &std::num::Wrapping<i32>);
        _1233 = (_1228.1: &std::num::Wrapping<i32>);
        _1235 = <Wrapping<i32> as PartialEq>::eq(_1232, _1233) -> [return: bb448, unwind continue];
    }

    bb448: {
        _1234 = Not(move _1235);
        switchInt(move _1234) -> [0: bb450, otherwise: bb449];
    }

    bb449: {
        _1236 = core::panicking::AssertKind::Eq;
        _1238 = Option::<Arguments<'_>>::None;
        _1237 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _1236, _1232, _1233, move _1238) -> unwind continue;
    }

    bb450: {
        _1239 = Wrapping::<i32>(const _);
        _1241 = _1239;
        _1240 = test::black_box::<Wrapping<i32>>(move _1241) -> [return: bb451, unwind continue];
    }

    bb451: {
        _1239 = move _1240;
        _1243 = &mut _1239;
        _2408 = const _;
        _1242 = <Wrapping<i32> as RemAssign<&Wrapping<i32>>>::rem_assign(move _1243, _2408) -> [return: bb452, unwind continue];
    }

    bb452: {
        _1247 = _1239;
        _1246 = test::black_box::<Wrapping<i32>>(move _1247) -> [return: bb453, unwind continue];
    }

    bb453: {
        _1245 = &_1246;
        _2407 = const _;
        _1244 = (move _1245, _2407);
        _1248 = (_1244.0: &std::num::Wrapping<i32>);
        _1249 = (_1244.1: &std::num::Wrapping<i32>);
        _1251 = <Wrapping<i32> as PartialEq>::eq(_1248, _1249) -> [return: bb454, unwind continue];
    }

    bb454: {
        _1250 = Not(move _1251);
        switchInt(move _1250) -> [0: bb456, otherwise: bb455];
    }

    bb455: {
        _1252 = core::panicking::AssertKind::Eq;
        _1254 = Option::<Arguments<'_>>::None;
        _1253 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _1252, _1248, _1249, move _1254) -> unwind continue;
    }

    bb456: {
        _1255 = Wrapping::<i64>(const _);
        _1257 = _1255;
        _1256 = test::black_box::<Wrapping<i64>>(move _1257) -> [return: bb457, unwind continue];
    }

    bb457: {
        _1255 = move _1256;
        _1259 = &mut _1255;
        _1260 = Wrapping::<i64>(const -1_i64);
        _1258 = <Wrapping<i64> as RemAssign>::rem_assign(move _1259, move _1260) -> [return: bb458, unwind continue];
    }

    bb458: {
        _1264 = _1255;
        _1263 = test::black_box::<Wrapping<i64>>(move _1264) -> [return: bb459, unwind continue];
    }

    bb459: {
        _1262 = &_1263;
        _2406 = const _;
        _1261 = (move _1262, _2406);
        _1265 = (_1261.0: &std::num::Wrapping<i64>);
        _1266 = (_1261.1: &std::num::Wrapping<i64>);
        _1268 = <Wrapping<i64> as PartialEq>::eq(_1265, _1266) -> [return: bb460, unwind continue];
    }

    bb460: {
        _1267 = Not(move _1268);
        switchInt(move _1267) -> [0: bb462, otherwise: bb461];
    }

    bb461: {
        _1269 = core::panicking::AssertKind::Eq;
        _1271 = Option::<Arguments<'_>>::None;
        _1270 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _1269, _1265, _1266, move _1271) -> unwind continue;
    }

    bb462: {
        _1272 = Wrapping::<i64>(const _);
        _1274 = _1272;
        _1273 = test::black_box::<Wrapping<i64>>(move _1274) -> [return: bb463, unwind continue];
    }

    bb463: {
        _1272 = move _1273;
        _1276 = &mut _1272;
        _2405 = const _;
        _1275 = <Wrapping<i64> as RemAssign<&Wrapping<i64>>>::rem_assign(move _1276, _2405) -> [return: bb464, unwind continue];
    }

    bb464: {
        _1280 = _1272;
        _1279 = test::black_box::<Wrapping<i64>>(move _1280) -> [return: bb465, unwind continue];
    }

    bb465: {
        _1278 = &_1279;
        _2404 = const _;
        _1277 = (move _1278, _2404);
        _1281 = (_1277.0: &std::num::Wrapping<i64>);
        _1282 = (_1277.1: &std::num::Wrapping<i64>);
        _1284 = <Wrapping<i64> as PartialEq>::eq(_1281, _1282) -> [return: bb466, unwind continue];
    }

    bb466: {
        _1283 = Not(move _1284);
        switchInt(move _1283) -> [0: bb468, otherwise: bb467];
    }

    bb467: {
        _1285 = core::panicking::AssertKind::Eq;
        _1287 = Option::<Arguments<'_>>::None;
        _1286 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _1285, _1281, _1282, move _1287) -> unwind continue;
    }

    bb468: {
        _1288 = Wrapping::<isize>(const _);
        _1290 = _1288;
        _1289 = test::black_box::<Wrapping<isize>>(move _1290) -> [return: bb469, unwind continue];
    }

    bb469: {
        _1288 = move _1289;
        _1292 = &mut _1288;
        _1293 = Wrapping::<isize>(const -1_isize);
        _1291 = <Wrapping<isize> as RemAssign>::rem_assign(move _1292, move _1293) -> [return: bb470, unwind continue];
    }

    bb470: {
        _1297 = _1288;
        _1296 = test::black_box::<Wrapping<isize>>(move _1297) -> [return: bb471, unwind continue];
    }

    bb471: {
        _1295 = &_1296;
        _2403 = const _;
        _1294 = (move _1295, _2403);
        _1298 = (_1294.0: &std::num::Wrapping<isize>);
        _1299 = (_1294.1: &std::num::Wrapping<isize>);
        _1301 = <Wrapping<isize> as PartialEq>::eq(_1298, _1299) -> [return: bb472, unwind continue];
    }

    bb472: {
        _1300 = Not(move _1301);
        switchInt(move _1300) -> [0: bb474, otherwise: bb473];
    }

    bb473: {
        _1302 = core::panicking::AssertKind::Eq;
        _1304 = Option::<Arguments<'_>>::None;
        _1303 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _1302, _1298, _1299, move _1304) -> unwind continue;
    }

    bb474: {
        _1305 = Wrapping::<isize>(const _);
        _1307 = _1305;
        _1306 = test::black_box::<Wrapping<isize>>(move _1307) -> [return: bb475, unwind continue];
    }

    bb475: {
        _1305 = move _1306;
        _1309 = &mut _1305;
        _2402 = const _;
        _1308 = <Wrapping<isize> as RemAssign<&Wrapping<isize>>>::rem_assign(move _1309, _2402) -> [return: bb476, unwind continue];
    }

    bb476: {
        _1313 = _1305;
        _1312 = test::black_box::<Wrapping<isize>>(move _1313) -> [return: bb477, unwind continue];
    }

    bb477: {
        _1311 = &_1312;
        _2401 = const _;
        _1310 = (move _1311, _2401);
        _1314 = (_1310.0: &std::num::Wrapping<isize>);
        _1315 = (_1310.1: &std::num::Wrapping<isize>);
        _1317 = <Wrapping<isize> as PartialEq>::eq(_1314, _1315) -> [return: bb478, unwind continue];
    }

    bb478: {
        _1316 = Not(move _1317);
        switchInt(move _1316) -> [0: bb480, otherwise: bb479];
    }

    bb479: {
        _1318 = core::panicking::AssertKind::Eq;
        _1320 = Option::<Arguments<'_>>::None;
        _1319 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _1318, _1314, _1315, move _1320) -> unwind continue;
    }

    bb480: {
        _1321 = Wrapping::<i8>(const 42_i8);
        _1323 = _1321;
        _1322 = test::black_box::<Wrapping<i8>>(move _1323) -> [return: bb481, unwind continue];
    }

    bb481: {
        _1321 = move _1322;
        _1325 = &mut _1321;
        _1326 = Wrapping::<i8>(const 38_i8);
        _1324 = <Wrapping<i8> as BitXorAssign>::bitxor_assign(move _1325, move _1326) -> [return: bb482, unwind continue];
    }

    bb482: {
        _1330 = _1321;
        _1329 = test::black_box::<Wrapping<i8>>(move _1330) -> [return: bb483, unwind continue];
    }

    bb483: {
        _1328 = &_1329;
        _2400 = const _;
        _1327 = (move _1328, _2400);
        _1331 = (_1327.0: &std::num::Wrapping<i8>);
        _1332 = (_1327.1: &std::num::Wrapping<i8>);
        _1334 = <Wrapping<i8> as PartialEq>::eq(_1331, _1332) -> [return: bb484, unwind continue];
    }

    bb484: {
        _1333 = Not(move _1334);
        switchInt(move _1333) -> [0: bb486, otherwise: bb485];
    }

    bb485: {
        _1335 = core::panicking::AssertKind::Eq;
        _1337 = Option::<Arguments<'_>>::None;
        _1336 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _1335, _1331, _1332, move _1337) -> unwind continue;
    }

    bb486: {
        _1338 = Wrapping::<i8>(const 42_i8);
        _1340 = _1338;
        _1339 = test::black_box::<Wrapping<i8>>(move _1340) -> [return: bb487, unwind continue];
    }

    bb487: {
        _1338 = move _1339;
        _1342 = &mut _1338;
        _2399 = const _;
        _1341 = <Wrapping<i8> as BitXorAssign<&Wrapping<i8>>>::bitxor_assign(move _1342, _2399) -> [return: bb488, unwind continue];
    }

    bb488: {
        _1346 = _1338;
        _1345 = test::black_box::<Wrapping<i8>>(move _1346) -> [return: bb489, unwind continue];
    }

    bb489: {
        _1344 = &_1345;
        _2398 = const _;
        _1343 = (move _1344, _2398);
        _1347 = (_1343.0: &std::num::Wrapping<i8>);
        _1348 = (_1343.1: &std::num::Wrapping<i8>);
        _1350 = <Wrapping<i8> as PartialEq>::eq(_1347, _1348) -> [return: bb490, unwind continue];
    }

    bb490: {
        _1349 = Not(move _1350);
        switchInt(move _1349) -> [0: bb492, otherwise: bb491];
    }

    bb491: {
        _1351 = core::panicking::AssertKind::Eq;
        _1353 = Option::<Arguments<'_>>::None;
        _1352 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _1351, _1347, _1348, move _1353) -> unwind continue;
    }

    bb492: {
        _1354 = Wrapping::<i16>(const 42_i16);
        _1356 = _1354;
        _1355 = test::black_box::<Wrapping<i16>>(move _1356) -> [return: bb493, unwind continue];
    }

    bb493: {
        _1354 = move _1355;
        _1358 = &mut _1354;
        _1359 = Wrapping::<i16>(const 38_i16);
        _1357 = <Wrapping<i16> as BitXorAssign>::bitxor_assign(move _1358, move _1359) -> [return: bb494, unwind continue];
    }

    bb494: {
        _1363 = _1354;
        _1362 = test::black_box::<Wrapping<i16>>(move _1363) -> [return: bb495, unwind continue];
    }

    bb495: {
        _1361 = &_1362;
        _2397 = const _;
        _1360 = (move _1361, _2397);
        _1364 = (_1360.0: &std::num::Wrapping<i16>);
        _1365 = (_1360.1: &std::num::Wrapping<i16>);
        _1367 = <Wrapping<i16> as PartialEq>::eq(_1364, _1365) -> [return: bb496, unwind continue];
    }

    bb496: {
        _1366 = Not(move _1367);
        switchInt(move _1366) -> [0: bb498, otherwise: bb497];
    }

    bb497: {
        _1368 = core::panicking::AssertKind::Eq;
        _1370 = Option::<Arguments<'_>>::None;
        _1369 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _1368, _1364, _1365, move _1370) -> unwind continue;
    }

    bb498: {
        _1371 = Wrapping::<i16>(const 42_i16);
        _1373 = _1371;
        _1372 = test::black_box::<Wrapping<i16>>(move _1373) -> [return: bb499, unwind continue];
    }

    bb499: {
        _1371 = move _1372;
        _1375 = &mut _1371;
        _2396 = const _;
        _1374 = <Wrapping<i16> as BitXorAssign<&Wrapping<i16>>>::bitxor_assign(move _1375, _2396) -> [return: bb500, unwind continue];
    }

    bb500: {
        _1379 = _1371;
        _1378 = test::black_box::<Wrapping<i16>>(move _1379) -> [return: bb501, unwind continue];
    }

    bb501: {
        _1377 = &_1378;
        _2395 = const _;
        _1376 = (move _1377, _2395);
        _1380 = (_1376.0: &std::num::Wrapping<i16>);
        _1381 = (_1376.1: &std::num::Wrapping<i16>);
        _1383 = <Wrapping<i16> as PartialEq>::eq(_1380, _1381) -> [return: bb502, unwind continue];
    }

    bb502: {
        _1382 = Not(move _1383);
        switchInt(move _1382) -> [0: bb504, otherwise: bb503];
    }

    bb503: {
        _1384 = core::panicking::AssertKind::Eq;
        _1386 = Option::<Arguments<'_>>::None;
        _1385 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _1384, _1380, _1381, move _1386) -> unwind continue;
    }

    bb504: {
        _1387 = Wrapping::<i32>(const 42_i32);
        _1389 = _1387;
        _1388 = test::black_box::<Wrapping<i32>>(move _1389) -> [return: bb505, unwind continue];
    }

    bb505: {
        _1387 = move _1388;
        _1391 = &mut _1387;
        _1392 = Wrapping::<i32>(const 38_i32);
        _1390 = <Wrapping<i32> as BitXorAssign>::bitxor_assign(move _1391, move _1392) -> [return: bb506, unwind continue];
    }

    bb506: {
        _1396 = _1387;
        _1395 = test::black_box::<Wrapping<i32>>(move _1396) -> [return: bb507, unwind continue];
    }

    bb507: {
        _1394 = &_1395;
        _2394 = const _;
        _1393 = (move _1394, _2394);
        _1397 = (_1393.0: &std::num::Wrapping<i32>);
        _1398 = (_1393.1: &std::num::Wrapping<i32>);
        _1400 = <Wrapping<i32> as PartialEq>::eq(_1397, _1398) -> [return: bb508, unwind continue];
    }

    bb508: {
        _1399 = Not(move _1400);
        switchInt(move _1399) -> [0: bb510, otherwise: bb509];
    }

    bb509: {
        _1401 = core::panicking::AssertKind::Eq;
        _1403 = Option::<Arguments<'_>>::None;
        _1402 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _1401, _1397, _1398, move _1403) -> unwind continue;
    }

    bb510: {
        _1404 = Wrapping::<i32>(const 42_i32);
        _1406 = _1404;
        _1405 = test::black_box::<Wrapping<i32>>(move _1406) -> [return: bb511, unwind continue];
    }

    bb511: {
        _1404 = move _1405;
        _1408 = &mut _1404;
        _2393 = const _;
        _1407 = <Wrapping<i32> as BitXorAssign<&Wrapping<i32>>>::bitxor_assign(move _1408, _2393) -> [return: bb512, unwind continue];
    }

    bb512: {
        _1412 = _1404;
        _1411 = test::black_box::<Wrapping<i32>>(move _1412) -> [return: bb513, unwind continue];
    }

    bb513: {
        _1410 = &_1411;
        _2392 = const _;
        _1409 = (move _1410, _2392);
        _1413 = (_1409.0: &std::num::Wrapping<i32>);
        _1414 = (_1409.1: &std::num::Wrapping<i32>);
        _1416 = <Wrapping<i32> as PartialEq>::eq(_1413, _1414) -> [return: bb514, unwind continue];
    }

    bb514: {
        _1415 = Not(move _1416);
        switchInt(move _1415) -> [0: bb516, otherwise: bb515];
    }

    bb515: {
        _1417 = core::panicking::AssertKind::Eq;
        _1419 = Option::<Arguments<'_>>::None;
        _1418 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _1417, _1413, _1414, move _1419) -> unwind continue;
    }

    bb516: {
        _1420 = Wrapping::<i64>(const 42_i64);
        _1422 = _1420;
        _1421 = test::black_box::<Wrapping<i64>>(move _1422) -> [return: bb517, unwind continue];
    }

    bb517: {
        _1420 = move _1421;
        _1424 = &mut _1420;
        _1425 = Wrapping::<i64>(const 38_i64);
        _1423 = <Wrapping<i64> as BitXorAssign>::bitxor_assign(move _1424, move _1425) -> [return: bb518, unwind continue];
    }

    bb518: {
        _1429 = _1420;
        _1428 = test::black_box::<Wrapping<i64>>(move _1429) -> [return: bb519, unwind continue];
    }

    bb519: {
        _1427 = &_1428;
        _2391 = const _;
        _1426 = (move _1427, _2391);
        _1430 = (_1426.0: &std::num::Wrapping<i64>);
        _1431 = (_1426.1: &std::num::Wrapping<i64>);
        _1433 = <Wrapping<i64> as PartialEq>::eq(_1430, _1431) -> [return: bb520, unwind continue];
    }

    bb520: {
        _1432 = Not(move _1433);
        switchInt(move _1432) -> [0: bb522, otherwise: bb521];
    }

    bb521: {
        _1434 = core::panicking::AssertKind::Eq;
        _1436 = Option::<Arguments<'_>>::None;
        _1435 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _1434, _1430, _1431, move _1436) -> unwind continue;
    }

    bb522: {
        _1437 = Wrapping::<i64>(const 42_i64);
        _1439 = _1437;
        _1438 = test::black_box::<Wrapping<i64>>(move _1439) -> [return: bb523, unwind continue];
    }

    bb523: {
        _1437 = move _1438;
        _1441 = &mut _1437;
        _2390 = const _;
        _1440 = <Wrapping<i64> as BitXorAssign<&Wrapping<i64>>>::bitxor_assign(move _1441, _2390) -> [return: bb524, unwind continue];
    }

    bb524: {
        _1445 = _1437;
        _1444 = test::black_box::<Wrapping<i64>>(move _1445) -> [return: bb525, unwind continue];
    }

    bb525: {
        _1443 = &_1444;
        _2389 = const _;
        _1442 = (move _1443, _2389);
        _1446 = (_1442.0: &std::num::Wrapping<i64>);
        _1447 = (_1442.1: &std::num::Wrapping<i64>);
        _1449 = <Wrapping<i64> as PartialEq>::eq(_1446, _1447) -> [return: bb526, unwind continue];
    }

    bb526: {
        _1448 = Not(move _1449);
        switchInt(move _1448) -> [0: bb528, otherwise: bb527];
    }

    bb527: {
        _1450 = core::panicking::AssertKind::Eq;
        _1452 = Option::<Arguments<'_>>::None;
        _1451 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _1450, _1446, _1447, move _1452) -> unwind continue;
    }

    bb528: {
        _1453 = Wrapping::<isize>(const 42_isize);
        _1455 = _1453;
        _1454 = test::black_box::<Wrapping<isize>>(move _1455) -> [return: bb529, unwind continue];
    }

    bb529: {
        _1453 = move _1454;
        _1457 = &mut _1453;
        _1458 = Wrapping::<isize>(const 38_isize);
        _1456 = <Wrapping<isize> as BitXorAssign>::bitxor_assign(move _1457, move _1458) -> [return: bb530, unwind continue];
    }

    bb530: {
        _1462 = _1453;
        _1461 = test::black_box::<Wrapping<isize>>(move _1462) -> [return: bb531, unwind continue];
    }

    bb531: {
        _1460 = &_1461;
        _2388 = const _;
        _1459 = (move _1460, _2388);
        _1463 = (_1459.0: &std::num::Wrapping<isize>);
        _1464 = (_1459.1: &std::num::Wrapping<isize>);
        _1466 = <Wrapping<isize> as PartialEq>::eq(_1463, _1464) -> [return: bb532, unwind continue];
    }

    bb532: {
        _1465 = Not(move _1466);
        switchInt(move _1465) -> [0: bb534, otherwise: bb533];
    }

    bb533: {
        _1467 = core::panicking::AssertKind::Eq;
        _1469 = Option::<Arguments<'_>>::None;
        _1468 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _1467, _1463, _1464, move _1469) -> unwind continue;
    }

    bb534: {
        _1470 = Wrapping::<isize>(const 42_isize);
        _1472 = _1470;
        _1471 = test::black_box::<Wrapping<isize>>(move _1472) -> [return: bb535, unwind continue];
    }

    bb535: {
        _1470 = move _1471;
        _1474 = &mut _1470;
        _2387 = const _;
        _1473 = <Wrapping<isize> as BitXorAssign<&Wrapping<isize>>>::bitxor_assign(move _1474, _2387) -> [return: bb536, unwind continue];
    }

    bb536: {
        _1478 = _1470;
        _1477 = test::black_box::<Wrapping<isize>>(move _1478) -> [return: bb537, unwind continue];
    }

    bb537: {
        _1476 = &_1477;
        _2386 = const _;
        _1475 = (move _1476, _2386);
        _1479 = (_1475.0: &std::num::Wrapping<isize>);
        _1480 = (_1475.1: &std::num::Wrapping<isize>);
        _1482 = <Wrapping<isize> as PartialEq>::eq(_1479, _1480) -> [return: bb538, unwind continue];
    }

    bb538: {
        _1481 = Not(move _1482);
        switchInt(move _1481) -> [0: bb540, otherwise: bb539];
    }

    bb539: {
        _1483 = core::panicking::AssertKind::Eq;
        _1485 = Option::<Arguments<'_>>::None;
        _1484 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _1483, _1479, _1480, move _1485) -> unwind continue;
    }

    bb540: {
        _1486 = Wrapping::<u8>(const 42_u8);
        _1488 = _1486;
        _1487 = test::black_box::<Wrapping<u8>>(move _1488) -> [return: bb541, unwind continue];
    }

    bb541: {
        _1486 = move _1487;
        _1490 = &mut _1486;
        _1491 = Wrapping::<u8>(const 38_u8);
        _1489 = <Wrapping<u8> as BitXorAssign>::bitxor_assign(move _1490, move _1491) -> [return: bb542, unwind continue];
    }

    bb542: {
        _1495 = _1486;
        _1494 = test::black_box::<Wrapping<u8>>(move _1495) -> [return: bb543, unwind continue];
    }

    bb543: {
        _1493 = &_1494;
        _2385 = const _;
        _1492 = (move _1493, _2385);
        _1496 = (_1492.0: &std::num::Wrapping<u8>);
        _1497 = (_1492.1: &std::num::Wrapping<u8>);
        _1499 = <Wrapping<u8> as PartialEq>::eq(_1496, _1497) -> [return: bb544, unwind continue];
    }

    bb544: {
        _1498 = Not(move _1499);
        switchInt(move _1498) -> [0: bb546, otherwise: bb545];
    }

    bb545: {
        _1500 = core::panicking::AssertKind::Eq;
        _1502 = Option::<Arguments<'_>>::None;
        _1501 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _1500, _1496, _1497, move _1502) -> unwind continue;
    }

    bb546: {
        _1503 = Wrapping::<u8>(const 42_u8);
        _1505 = _1503;
        _1504 = test::black_box::<Wrapping<u8>>(move _1505) -> [return: bb547, unwind continue];
    }

    bb547: {
        _1503 = move _1504;
        _1507 = &mut _1503;
        _2384 = const _;
        _1506 = <Wrapping<u8> as BitXorAssign<&Wrapping<u8>>>::bitxor_assign(move _1507, _2384) -> [return: bb548, unwind continue];
    }

    bb548: {
        _1511 = _1503;
        _1510 = test::black_box::<Wrapping<u8>>(move _1511) -> [return: bb549, unwind continue];
    }

    bb549: {
        _1509 = &_1510;
        _2383 = const _;
        _1508 = (move _1509, _2383);
        _1512 = (_1508.0: &std::num::Wrapping<u8>);
        _1513 = (_1508.1: &std::num::Wrapping<u8>);
        _1515 = <Wrapping<u8> as PartialEq>::eq(_1512, _1513) -> [return: bb550, unwind continue];
    }

    bb550: {
        _1514 = Not(move _1515);
        switchInt(move _1514) -> [0: bb552, otherwise: bb551];
    }

    bb551: {
        _1516 = core::panicking::AssertKind::Eq;
        _1518 = Option::<Arguments<'_>>::None;
        _1517 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _1516, _1512, _1513, move _1518) -> unwind continue;
    }

    bb552: {
        _1519 = Wrapping::<u16>(const 42_u16);
        _1521 = _1519;
        _1520 = test::black_box::<Wrapping<u16>>(move _1521) -> [return: bb553, unwind continue];
    }

    bb553: {
        _1519 = move _1520;
        _1523 = &mut _1519;
        _1524 = Wrapping::<u16>(const 38_u16);
        _1522 = <Wrapping<u16> as BitXorAssign>::bitxor_assign(move _1523, move _1524) -> [return: bb554, unwind continue];
    }

    bb554: {
        _1528 = _1519;
        _1527 = test::black_box::<Wrapping<u16>>(move _1528) -> [return: bb555, unwind continue];
    }

    bb555: {
        _1526 = &_1527;
        _2382 = const _;
        _1525 = (move _1526, _2382);
        _1529 = (_1525.0: &std::num::Wrapping<u16>);
        _1530 = (_1525.1: &std::num::Wrapping<u16>);
        _1532 = <Wrapping<u16> as PartialEq>::eq(_1529, _1530) -> [return: bb556, unwind continue];
    }

    bb556: {
        _1531 = Not(move _1532);
        switchInt(move _1531) -> [0: bb558, otherwise: bb557];
    }

    bb557: {
        _1533 = core::panicking::AssertKind::Eq;
        _1535 = Option::<Arguments<'_>>::None;
        _1534 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _1533, _1529, _1530, move _1535) -> unwind continue;
    }

    bb558: {
        _1536 = Wrapping::<u16>(const 42_u16);
        _1538 = _1536;
        _1537 = test::black_box::<Wrapping<u16>>(move _1538) -> [return: bb559, unwind continue];
    }

    bb559: {
        _1536 = move _1537;
        _1540 = &mut _1536;
        _2381 = const _;
        _1539 = <Wrapping<u16> as BitXorAssign<&Wrapping<u16>>>::bitxor_assign(move _1540, _2381) -> [return: bb560, unwind continue];
    }

    bb560: {
        _1544 = _1536;
        _1543 = test::black_box::<Wrapping<u16>>(move _1544) -> [return: bb561, unwind continue];
    }

    bb561: {
        _1542 = &_1543;
        _2380 = const _;
        _1541 = (move _1542, _2380);
        _1545 = (_1541.0: &std::num::Wrapping<u16>);
        _1546 = (_1541.1: &std::num::Wrapping<u16>);
        _1548 = <Wrapping<u16> as PartialEq>::eq(_1545, _1546) -> [return: bb562, unwind continue];
    }

    bb562: {
        _1547 = Not(move _1548);
        switchInt(move _1547) -> [0: bb564, otherwise: bb563];
    }

    bb563: {
        _1549 = core::panicking::AssertKind::Eq;
        _1551 = Option::<Arguments<'_>>::None;
        _1550 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _1549, _1545, _1546, move _1551) -> unwind continue;
    }

    bb564: {
        _1552 = Wrapping::<u32>(const 42_u32);
        _1554 = _1552;
        _1553 = test::black_box::<Wrapping<u32>>(move _1554) -> [return: bb565, unwind continue];
    }

    bb565: {
        _1552 = move _1553;
        _1556 = &mut _1552;
        _1557 = Wrapping::<u32>(const 38_u32);
        _1555 = <Wrapping<u32> as BitXorAssign>::bitxor_assign(move _1556, move _1557) -> [return: bb566, unwind continue];
    }

    bb566: {
        _1561 = _1552;
        _1560 = test::black_box::<Wrapping<u32>>(move _1561) -> [return: bb567, unwind continue];
    }

    bb567: {
        _1559 = &_1560;
        _2379 = const _;
        _1558 = (move _1559, _2379);
        _1562 = (_1558.0: &std::num::Wrapping<u32>);
        _1563 = (_1558.1: &std::num::Wrapping<u32>);
        _1565 = <Wrapping<u32> as PartialEq>::eq(_1562, _1563) -> [return: bb568, unwind continue];
    }

    bb568: {
        _1564 = Not(move _1565);
        switchInt(move _1564) -> [0: bb570, otherwise: bb569];
    }

    bb569: {
        _1566 = core::panicking::AssertKind::Eq;
        _1568 = Option::<Arguments<'_>>::None;
        _1567 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _1566, _1562, _1563, move _1568) -> unwind continue;
    }

    bb570: {
        _1569 = Wrapping::<u32>(const 42_u32);
        _1571 = _1569;
        _1570 = test::black_box::<Wrapping<u32>>(move _1571) -> [return: bb571, unwind continue];
    }

    bb571: {
        _1569 = move _1570;
        _1573 = &mut _1569;
        _2378 = const _;
        _1572 = <Wrapping<u32> as BitXorAssign<&Wrapping<u32>>>::bitxor_assign(move _1573, _2378) -> [return: bb572, unwind continue];
    }

    bb572: {
        _1577 = _1569;
        _1576 = test::black_box::<Wrapping<u32>>(move _1577) -> [return: bb573, unwind continue];
    }

    bb573: {
        _1575 = &_1576;
        _2377 = const _;
        _1574 = (move _1575, _2377);
        _1578 = (_1574.0: &std::num::Wrapping<u32>);
        _1579 = (_1574.1: &std::num::Wrapping<u32>);
        _1581 = <Wrapping<u32> as PartialEq>::eq(_1578, _1579) -> [return: bb574, unwind continue];
    }

    bb574: {
        _1580 = Not(move _1581);
        switchInt(move _1580) -> [0: bb576, otherwise: bb575];
    }

    bb575: {
        _1582 = core::panicking::AssertKind::Eq;
        _1584 = Option::<Arguments<'_>>::None;
        _1583 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _1582, _1578, _1579, move _1584) -> unwind continue;
    }

    bb576: {
        _1585 = Wrapping::<u64>(const 42_u64);
        _1587 = _1585;
        _1586 = test::black_box::<Wrapping<u64>>(move _1587) -> [return: bb577, unwind continue];
    }

    bb577: {
        _1585 = move _1586;
        _1589 = &mut _1585;
        _1590 = Wrapping::<u64>(const 38_u64);
        _1588 = <Wrapping<u64> as BitXorAssign>::bitxor_assign(move _1589, move _1590) -> [return: bb578, unwind continue];
    }

    bb578: {
        _1594 = _1585;
        _1593 = test::black_box::<Wrapping<u64>>(move _1594) -> [return: bb579, unwind continue];
    }

    bb579: {
        _1592 = &_1593;
        _2376 = const _;
        _1591 = (move _1592, _2376);
        _1595 = (_1591.0: &std::num::Wrapping<u64>);
        _1596 = (_1591.1: &std::num::Wrapping<u64>);
        _1598 = <Wrapping<u64> as PartialEq>::eq(_1595, _1596) -> [return: bb580, unwind continue];
    }

    bb580: {
        _1597 = Not(move _1598);
        switchInt(move _1597) -> [0: bb582, otherwise: bb581];
    }

    bb581: {
        _1599 = core::panicking::AssertKind::Eq;
        _1601 = Option::<Arguments<'_>>::None;
        _1600 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _1599, _1595, _1596, move _1601) -> unwind continue;
    }

    bb582: {
        _1602 = Wrapping::<u64>(const 42_u64);
        _1604 = _1602;
        _1603 = test::black_box::<Wrapping<u64>>(move _1604) -> [return: bb583, unwind continue];
    }

    bb583: {
        _1602 = move _1603;
        _1606 = &mut _1602;
        _2375 = const _;
        _1605 = <Wrapping<u64> as BitXorAssign<&Wrapping<u64>>>::bitxor_assign(move _1606, _2375) -> [return: bb584, unwind continue];
    }

    bb584: {
        _1610 = _1602;
        _1609 = test::black_box::<Wrapping<u64>>(move _1610) -> [return: bb585, unwind continue];
    }

    bb585: {
        _1608 = &_1609;
        _2374 = const _;
        _1607 = (move _1608, _2374);
        _1611 = (_1607.0: &std::num::Wrapping<u64>);
        _1612 = (_1607.1: &std::num::Wrapping<u64>);
        _1614 = <Wrapping<u64> as PartialEq>::eq(_1611, _1612) -> [return: bb586, unwind continue];
    }

    bb586: {
        _1613 = Not(move _1614);
        switchInt(move _1613) -> [0: bb588, otherwise: bb587];
    }

    bb587: {
        _1615 = core::panicking::AssertKind::Eq;
        _1617 = Option::<Arguments<'_>>::None;
        _1616 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _1615, _1611, _1612, move _1617) -> unwind continue;
    }

    bb588: {
        _1618 = Wrapping::<usize>(const 42_usize);
        _1620 = _1618;
        _1619 = test::black_box::<Wrapping<usize>>(move _1620) -> [return: bb589, unwind continue];
    }

    bb589: {
        _1618 = move _1619;
        _1622 = &mut _1618;
        _1623 = Wrapping::<usize>(const 38_usize);
        _1621 = <Wrapping<usize> as BitXorAssign>::bitxor_assign(move _1622, move _1623) -> [return: bb590, unwind continue];
    }

    bb590: {
        _1627 = _1618;
        _1626 = test::black_box::<Wrapping<usize>>(move _1627) -> [return: bb591, unwind continue];
    }

    bb591: {
        _1625 = &_1626;
        _2373 = const _;
        _1624 = (move _1625, _2373);
        _1628 = (_1624.0: &std::num::Wrapping<usize>);
        _1629 = (_1624.1: &std::num::Wrapping<usize>);
        _1631 = <Wrapping<usize> as PartialEq>::eq(_1628, _1629) -> [return: bb592, unwind continue];
    }

    bb592: {
        _1630 = Not(move _1631);
        switchInt(move _1630) -> [0: bb594, otherwise: bb593];
    }

    bb593: {
        _1632 = core::panicking::AssertKind::Eq;
        _1634 = Option::<Arguments<'_>>::None;
        _1633 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _1632, _1628, _1629, move _1634) -> unwind continue;
    }

    bb594: {
        _1635 = Wrapping::<usize>(const 42_usize);
        _1637 = _1635;
        _1636 = test::black_box::<Wrapping<usize>>(move _1637) -> [return: bb595, unwind continue];
    }

    bb595: {
        _1635 = move _1636;
        _1639 = &mut _1635;
        _2372 = const _;
        _1638 = <Wrapping<usize> as BitXorAssign<&Wrapping<usize>>>::bitxor_assign(move _1639, _2372) -> [return: bb596, unwind continue];
    }

    bb596: {
        _1643 = _1635;
        _1642 = test::black_box::<Wrapping<usize>>(move _1643) -> [return: bb597, unwind continue];
    }

    bb597: {
        _1641 = &_1642;
        _2371 = const _;
        _1640 = (move _1641, _2371);
        _1644 = (_1640.0: &std::num::Wrapping<usize>);
        _1645 = (_1640.1: &std::num::Wrapping<usize>);
        _1647 = <Wrapping<usize> as PartialEq>::eq(_1644, _1645) -> [return: bb598, unwind continue];
    }

    bb598: {
        _1646 = Not(move _1647);
        switchInt(move _1646) -> [0: bb600, otherwise: bb599];
    }

    bb599: {
        _1648 = core::panicking::AssertKind::Eq;
        _1650 = Option::<Arguments<'_>>::None;
        _1649 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _1648, _1644, _1645, move _1650) -> unwind continue;
    }

    bb600: {
        _1651 = Wrapping::<i8>(const 42_i8);
        _1653 = _1651;
        _1652 = test::black_box::<Wrapping<i8>>(move _1653) -> [return: bb601, unwind continue];
    }

    bb601: {
        _1651 = move _1652;
        _1655 = &mut _1651;
        _1656 = Wrapping::<i8>(const 38_i8);
        _1654 = <Wrapping<i8> as BitOrAssign>::bitor_assign(move _1655, move _1656) -> [return: bb602, unwind continue];
    }

    bb602: {
        _1660 = _1651;
        _1659 = test::black_box::<Wrapping<i8>>(move _1660) -> [return: bb603, unwind continue];
    }

    bb603: {
        _1658 = &_1659;
        _2370 = const _;
        _1657 = (move _1658, _2370);
        _1661 = (_1657.0: &std::num::Wrapping<i8>);
        _1662 = (_1657.1: &std::num::Wrapping<i8>);
        _1664 = <Wrapping<i8> as PartialEq>::eq(_1661, _1662) -> [return: bb604, unwind continue];
    }

    bb604: {
        _1663 = Not(move _1664);
        switchInt(move _1663) -> [0: bb606, otherwise: bb605];
    }

    bb605: {
        _1665 = core::panicking::AssertKind::Eq;
        _1667 = Option::<Arguments<'_>>::None;
        _1666 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _1665, _1661, _1662, move _1667) -> unwind continue;
    }

    bb606: {
        _1668 = Wrapping::<i8>(const 42_i8);
        _1670 = _1668;
        _1669 = test::black_box::<Wrapping<i8>>(move _1670) -> [return: bb607, unwind continue];
    }

    bb607: {
        _1668 = move _1669;
        _1672 = &mut _1668;
        _2369 = const _;
        _1671 = <Wrapping<i8> as BitOrAssign<&Wrapping<i8>>>::bitor_assign(move _1672, _2369) -> [return: bb608, unwind continue];
    }

    bb608: {
        _1676 = _1668;
        _1675 = test::black_box::<Wrapping<i8>>(move _1676) -> [return: bb609, unwind continue];
    }

    bb609: {
        _1674 = &_1675;
        _2368 = const _;
        _1673 = (move _1674, _2368);
        _1677 = (_1673.0: &std::num::Wrapping<i8>);
        _1678 = (_1673.1: &std::num::Wrapping<i8>);
        _1680 = <Wrapping<i8> as PartialEq>::eq(_1677, _1678) -> [return: bb610, unwind continue];
    }

    bb610: {
        _1679 = Not(move _1680);
        switchInt(move _1679) -> [0: bb612, otherwise: bb611];
    }

    bb611: {
        _1681 = core::panicking::AssertKind::Eq;
        _1683 = Option::<Arguments<'_>>::None;
        _1682 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _1681, _1677, _1678, move _1683) -> unwind continue;
    }

    bb612: {
        _1684 = Wrapping::<i16>(const 42_i16);
        _1686 = _1684;
        _1685 = test::black_box::<Wrapping<i16>>(move _1686) -> [return: bb613, unwind continue];
    }

    bb613: {
        _1684 = move _1685;
        _1688 = &mut _1684;
        _1689 = Wrapping::<i16>(const 38_i16);
        _1687 = <Wrapping<i16> as BitOrAssign>::bitor_assign(move _1688, move _1689) -> [return: bb614, unwind continue];
    }

    bb614: {
        _1693 = _1684;
        _1692 = test::black_box::<Wrapping<i16>>(move _1693) -> [return: bb615, unwind continue];
    }

    bb615: {
        _1691 = &_1692;
        _2367 = const _;
        _1690 = (move _1691, _2367);
        _1694 = (_1690.0: &std::num::Wrapping<i16>);
        _1695 = (_1690.1: &std::num::Wrapping<i16>);
        _1697 = <Wrapping<i16> as PartialEq>::eq(_1694, _1695) -> [return: bb616, unwind continue];
    }

    bb616: {
        _1696 = Not(move _1697);
        switchInt(move _1696) -> [0: bb618, otherwise: bb617];
    }

    bb617: {
        _1698 = core::panicking::AssertKind::Eq;
        _1700 = Option::<Arguments<'_>>::None;
        _1699 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _1698, _1694, _1695, move _1700) -> unwind continue;
    }

    bb618: {
        _1701 = Wrapping::<i16>(const 42_i16);
        _1703 = _1701;
        _1702 = test::black_box::<Wrapping<i16>>(move _1703) -> [return: bb619, unwind continue];
    }

    bb619: {
        _1701 = move _1702;
        _1705 = &mut _1701;
        _2366 = const _;
        _1704 = <Wrapping<i16> as BitOrAssign<&Wrapping<i16>>>::bitor_assign(move _1705, _2366) -> [return: bb620, unwind continue];
    }

    bb620: {
        _1709 = _1701;
        _1708 = test::black_box::<Wrapping<i16>>(move _1709) -> [return: bb621, unwind continue];
    }

    bb621: {
        _1707 = &_1708;
        _2365 = const _;
        _1706 = (move _1707, _2365);
        _1710 = (_1706.0: &std::num::Wrapping<i16>);
        _1711 = (_1706.1: &std::num::Wrapping<i16>);
        _1713 = <Wrapping<i16> as PartialEq>::eq(_1710, _1711) -> [return: bb622, unwind continue];
    }

    bb622: {
        _1712 = Not(move _1713);
        switchInt(move _1712) -> [0: bb624, otherwise: bb623];
    }

    bb623: {
        _1714 = core::panicking::AssertKind::Eq;
        _1716 = Option::<Arguments<'_>>::None;
        _1715 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _1714, _1710, _1711, move _1716) -> unwind continue;
    }

    bb624: {
        _1717 = Wrapping::<i32>(const 42_i32);
        _1719 = _1717;
        _1718 = test::black_box::<Wrapping<i32>>(move _1719) -> [return: bb625, unwind continue];
    }

    bb625: {
        _1717 = move _1718;
        _1721 = &mut _1717;
        _1722 = Wrapping::<i32>(const 38_i32);
        _1720 = <Wrapping<i32> as BitOrAssign>::bitor_assign(move _1721, move _1722) -> [return: bb626, unwind continue];
    }

    bb626: {
        _1726 = _1717;
        _1725 = test::black_box::<Wrapping<i32>>(move _1726) -> [return: bb627, unwind continue];
    }

    bb627: {
        _1724 = &_1725;
        _2364 = const _;
        _1723 = (move _1724, _2364);
        _1727 = (_1723.0: &std::num::Wrapping<i32>);
        _1728 = (_1723.1: &std::num::Wrapping<i32>);
        _1730 = <Wrapping<i32> as PartialEq>::eq(_1727, _1728) -> [return: bb628, unwind continue];
    }

    bb628: {
        _1729 = Not(move _1730);
        switchInt(move _1729) -> [0: bb630, otherwise: bb629];
    }

    bb629: {
        _1731 = core::panicking::AssertKind::Eq;
        _1733 = Option::<Arguments<'_>>::None;
        _1732 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _1731, _1727, _1728, move _1733) -> unwind continue;
    }

    bb630: {
        _1734 = Wrapping::<i32>(const 42_i32);
        _1736 = _1734;
        _1735 = test::black_box::<Wrapping<i32>>(move _1736) -> [return: bb631, unwind continue];
    }

    bb631: {
        _1734 = move _1735;
        _1738 = &mut _1734;
        _2363 = const _;
        _1737 = <Wrapping<i32> as BitOrAssign<&Wrapping<i32>>>::bitor_assign(move _1738, _2363) -> [return: bb632, unwind continue];
    }

    bb632: {
        _1742 = _1734;
        _1741 = test::black_box::<Wrapping<i32>>(move _1742) -> [return: bb633, unwind continue];
    }

    bb633: {
        _1740 = &_1741;
        _2362 = const _;
        _1739 = (move _1740, _2362);
        _1743 = (_1739.0: &std::num::Wrapping<i32>);
        _1744 = (_1739.1: &std::num::Wrapping<i32>);
        _1746 = <Wrapping<i32> as PartialEq>::eq(_1743, _1744) -> [return: bb634, unwind continue];
    }

    bb634: {
        _1745 = Not(move _1746);
        switchInt(move _1745) -> [0: bb636, otherwise: bb635];
    }

    bb635: {
        _1747 = core::panicking::AssertKind::Eq;
        _1749 = Option::<Arguments<'_>>::None;
        _1748 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _1747, _1743, _1744, move _1749) -> unwind continue;
    }

    bb636: {
        _1750 = Wrapping::<i64>(const 42_i64);
        _1752 = _1750;
        _1751 = test::black_box::<Wrapping<i64>>(move _1752) -> [return: bb637, unwind continue];
    }

    bb637: {
        _1750 = move _1751;
        _1754 = &mut _1750;
        _1755 = Wrapping::<i64>(const 38_i64);
        _1753 = <Wrapping<i64> as BitOrAssign>::bitor_assign(move _1754, move _1755) -> [return: bb638, unwind continue];
    }

    bb638: {
        _1759 = _1750;
        _1758 = test::black_box::<Wrapping<i64>>(move _1759) -> [return: bb639, unwind continue];
    }

    bb639: {
        _1757 = &_1758;
        _2361 = const _;
        _1756 = (move _1757, _2361);
        _1760 = (_1756.0: &std::num::Wrapping<i64>);
        _1761 = (_1756.1: &std::num::Wrapping<i64>);
        _1763 = <Wrapping<i64> as PartialEq>::eq(_1760, _1761) -> [return: bb640, unwind continue];
    }

    bb640: {
        _1762 = Not(move _1763);
        switchInt(move _1762) -> [0: bb642, otherwise: bb641];
    }

    bb641: {
        _1764 = core::panicking::AssertKind::Eq;
        _1766 = Option::<Arguments<'_>>::None;
        _1765 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _1764, _1760, _1761, move _1766) -> unwind continue;
    }

    bb642: {
        _1767 = Wrapping::<i64>(const 42_i64);
        _1769 = _1767;
        _1768 = test::black_box::<Wrapping<i64>>(move _1769) -> [return: bb643, unwind continue];
    }

    bb643: {
        _1767 = move _1768;
        _1771 = &mut _1767;
        _2360 = const _;
        _1770 = <Wrapping<i64> as BitOrAssign<&Wrapping<i64>>>::bitor_assign(move _1771, _2360) -> [return: bb644, unwind continue];
    }

    bb644: {
        _1775 = _1767;
        _1774 = test::black_box::<Wrapping<i64>>(move _1775) -> [return: bb645, unwind continue];
    }

    bb645: {
        _1773 = &_1774;
        _2359 = const _;
        _1772 = (move _1773, _2359);
        _1776 = (_1772.0: &std::num::Wrapping<i64>);
        _1777 = (_1772.1: &std::num::Wrapping<i64>);
        _1779 = <Wrapping<i64> as PartialEq>::eq(_1776, _1777) -> [return: bb646, unwind continue];
    }

    bb646: {
        _1778 = Not(move _1779);
        switchInt(move _1778) -> [0: bb648, otherwise: bb647];
    }

    bb647: {
        _1780 = core::panicking::AssertKind::Eq;
        _1782 = Option::<Arguments<'_>>::None;
        _1781 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _1780, _1776, _1777, move _1782) -> unwind continue;
    }

    bb648: {
        _1783 = Wrapping::<isize>(const 42_isize);
        _1785 = _1783;
        _1784 = test::black_box::<Wrapping<isize>>(move _1785) -> [return: bb649, unwind continue];
    }

    bb649: {
        _1783 = move _1784;
        _1787 = &mut _1783;
        _1788 = Wrapping::<isize>(const 38_isize);
        _1786 = <Wrapping<isize> as BitOrAssign>::bitor_assign(move _1787, move _1788) -> [return: bb650, unwind continue];
    }

    bb650: {
        _1792 = _1783;
        _1791 = test::black_box::<Wrapping<isize>>(move _1792) -> [return: bb651, unwind continue];
    }

    bb651: {
        _1790 = &_1791;
        _2358 = const _;
        _1789 = (move _1790, _2358);
        _1793 = (_1789.0: &std::num::Wrapping<isize>);
        _1794 = (_1789.1: &std::num::Wrapping<isize>);
        _1796 = <Wrapping<isize> as PartialEq>::eq(_1793, _1794) -> [return: bb652, unwind continue];
    }

    bb652: {
        _1795 = Not(move _1796);
        switchInt(move _1795) -> [0: bb654, otherwise: bb653];
    }

    bb653: {
        _1797 = core::panicking::AssertKind::Eq;
        _1799 = Option::<Arguments<'_>>::None;
        _1798 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _1797, _1793, _1794, move _1799) -> unwind continue;
    }

    bb654: {
        _1800 = Wrapping::<isize>(const 42_isize);
        _1802 = _1800;
        _1801 = test::black_box::<Wrapping<isize>>(move _1802) -> [return: bb655, unwind continue];
    }

    bb655: {
        _1800 = move _1801;
        _1804 = &mut _1800;
        _2357 = const _;
        _1803 = <Wrapping<isize> as BitOrAssign<&Wrapping<isize>>>::bitor_assign(move _1804, _2357) -> [return: bb656, unwind continue];
    }

    bb656: {
        _1808 = _1800;
        _1807 = test::black_box::<Wrapping<isize>>(move _1808) -> [return: bb657, unwind continue];
    }

    bb657: {
        _1806 = &_1807;
        _2356 = const _;
        _1805 = (move _1806, _2356);
        _1809 = (_1805.0: &std::num::Wrapping<isize>);
        _1810 = (_1805.1: &std::num::Wrapping<isize>);
        _1812 = <Wrapping<isize> as PartialEq>::eq(_1809, _1810) -> [return: bb658, unwind continue];
    }

    bb658: {
        _1811 = Not(move _1812);
        switchInt(move _1811) -> [0: bb660, otherwise: bb659];
    }

    bb659: {
        _1813 = core::panicking::AssertKind::Eq;
        _1815 = Option::<Arguments<'_>>::None;
        _1814 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _1813, _1809, _1810, move _1815) -> unwind continue;
    }

    bb660: {
        _1816 = Wrapping::<u8>(const 42_u8);
        _1818 = _1816;
        _1817 = test::black_box::<Wrapping<u8>>(move _1818) -> [return: bb661, unwind continue];
    }

    bb661: {
        _1816 = move _1817;
        _1820 = &mut _1816;
        _1821 = Wrapping::<u8>(const 38_u8);
        _1819 = <Wrapping<u8> as BitOrAssign>::bitor_assign(move _1820, move _1821) -> [return: bb662, unwind continue];
    }

    bb662: {
        _1825 = _1816;
        _1824 = test::black_box::<Wrapping<u8>>(move _1825) -> [return: bb663, unwind continue];
    }

    bb663: {
        _1823 = &_1824;
        _2355 = const _;
        _1822 = (move _1823, _2355);
        _1826 = (_1822.0: &std::num::Wrapping<u8>);
        _1827 = (_1822.1: &std::num::Wrapping<u8>);
        _1829 = <Wrapping<u8> as PartialEq>::eq(_1826, _1827) -> [return: bb664, unwind continue];
    }

    bb664: {
        _1828 = Not(move _1829);
        switchInt(move _1828) -> [0: bb666, otherwise: bb665];
    }

    bb665: {
        _1830 = core::panicking::AssertKind::Eq;
        _1832 = Option::<Arguments<'_>>::None;
        _1831 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _1830, _1826, _1827, move _1832) -> unwind continue;
    }

    bb666: {
        _1833 = Wrapping::<u8>(const 42_u8);
        _1835 = _1833;
        _1834 = test::black_box::<Wrapping<u8>>(move _1835) -> [return: bb667, unwind continue];
    }

    bb667: {
        _1833 = move _1834;
        _1837 = &mut _1833;
        _2354 = const _;
        _1836 = <Wrapping<u8> as BitOrAssign<&Wrapping<u8>>>::bitor_assign(move _1837, _2354) -> [return: bb668, unwind continue];
    }

    bb668: {
        _1841 = _1833;
        _1840 = test::black_box::<Wrapping<u8>>(move _1841) -> [return: bb669, unwind continue];
    }

    bb669: {
        _1839 = &_1840;
        _2353 = const _;
        _1838 = (move _1839, _2353);
        _1842 = (_1838.0: &std::num::Wrapping<u8>);
        _1843 = (_1838.1: &std::num::Wrapping<u8>);
        _1845 = <Wrapping<u8> as PartialEq>::eq(_1842, _1843) -> [return: bb670, unwind continue];
    }

    bb670: {
        _1844 = Not(move _1845);
        switchInt(move _1844) -> [0: bb672, otherwise: bb671];
    }

    bb671: {
        _1846 = core::panicking::AssertKind::Eq;
        _1848 = Option::<Arguments<'_>>::None;
        _1847 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _1846, _1842, _1843, move _1848) -> unwind continue;
    }

    bb672: {
        _1849 = Wrapping::<u16>(const 42_u16);
        _1851 = _1849;
        _1850 = test::black_box::<Wrapping<u16>>(move _1851) -> [return: bb673, unwind continue];
    }

    bb673: {
        _1849 = move _1850;
        _1853 = &mut _1849;
        _1854 = Wrapping::<u16>(const 38_u16);
        _1852 = <Wrapping<u16> as BitOrAssign>::bitor_assign(move _1853, move _1854) -> [return: bb674, unwind continue];
    }

    bb674: {
        _1858 = _1849;
        _1857 = test::black_box::<Wrapping<u16>>(move _1858) -> [return: bb675, unwind continue];
    }

    bb675: {
        _1856 = &_1857;
        _2352 = const _;
        _1855 = (move _1856, _2352);
        _1859 = (_1855.0: &std::num::Wrapping<u16>);
        _1860 = (_1855.1: &std::num::Wrapping<u16>);
        _1862 = <Wrapping<u16> as PartialEq>::eq(_1859, _1860) -> [return: bb676, unwind continue];
    }

    bb676: {
        _1861 = Not(move _1862);
        switchInt(move _1861) -> [0: bb678, otherwise: bb677];
    }

    bb677: {
        _1863 = core::panicking::AssertKind::Eq;
        _1865 = Option::<Arguments<'_>>::None;
        _1864 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _1863, _1859, _1860, move _1865) -> unwind continue;
    }

    bb678: {
        _1866 = Wrapping::<u16>(const 42_u16);
        _1868 = _1866;
        _1867 = test::black_box::<Wrapping<u16>>(move _1868) -> [return: bb679, unwind continue];
    }

    bb679: {
        _1866 = move _1867;
        _1870 = &mut _1866;
        _2351 = const _;
        _1869 = <Wrapping<u16> as BitOrAssign<&Wrapping<u16>>>::bitor_assign(move _1870, _2351) -> [return: bb680, unwind continue];
    }

    bb680: {
        _1874 = _1866;
        _1873 = test::black_box::<Wrapping<u16>>(move _1874) -> [return: bb681, unwind continue];
    }

    bb681: {
        _1872 = &_1873;
        _2350 = const _;
        _1871 = (move _1872, _2350);
        _1875 = (_1871.0: &std::num::Wrapping<u16>);
        _1876 = (_1871.1: &std::num::Wrapping<u16>);
        _1878 = <Wrapping<u16> as PartialEq>::eq(_1875, _1876) -> [return: bb682, unwind continue];
    }

    bb682: {
        _1877 = Not(move _1878);
        switchInt(move _1877) -> [0: bb684, otherwise: bb683];
    }

    bb683: {
        _1879 = core::panicking::AssertKind::Eq;
        _1881 = Option::<Arguments<'_>>::None;
        _1880 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _1879, _1875, _1876, move _1881) -> unwind continue;
    }

    bb684: {
        _1882 = Wrapping::<u32>(const 42_u32);
        _1884 = _1882;
        _1883 = test::black_box::<Wrapping<u32>>(move _1884) -> [return: bb685, unwind continue];
    }

    bb685: {
        _1882 = move _1883;
        _1886 = &mut _1882;
        _1887 = Wrapping::<u32>(const 38_u32);
        _1885 = <Wrapping<u32> as BitOrAssign>::bitor_assign(move _1886, move _1887) -> [return: bb686, unwind continue];
    }

    bb686: {
        _1891 = _1882;
        _1890 = test::black_box::<Wrapping<u32>>(move _1891) -> [return: bb687, unwind continue];
    }

    bb687: {
        _1889 = &_1890;
        _2349 = const _;
        _1888 = (move _1889, _2349);
        _1892 = (_1888.0: &std::num::Wrapping<u32>);
        _1893 = (_1888.1: &std::num::Wrapping<u32>);
        _1895 = <Wrapping<u32> as PartialEq>::eq(_1892, _1893) -> [return: bb688, unwind continue];
    }

    bb688: {
        _1894 = Not(move _1895);
        switchInt(move _1894) -> [0: bb690, otherwise: bb689];
    }

    bb689: {
        _1896 = core::panicking::AssertKind::Eq;
        _1898 = Option::<Arguments<'_>>::None;
        _1897 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _1896, _1892, _1893, move _1898) -> unwind continue;
    }

    bb690: {
        _1899 = Wrapping::<u32>(const 42_u32);
        _1901 = _1899;
        _1900 = test::black_box::<Wrapping<u32>>(move _1901) -> [return: bb691, unwind continue];
    }

    bb691: {
        _1899 = move _1900;
        _1903 = &mut _1899;
        _2348 = const _;
        _1902 = <Wrapping<u32> as BitOrAssign<&Wrapping<u32>>>::bitor_assign(move _1903, _2348) -> [return: bb692, unwind continue];
    }

    bb692: {
        _1907 = _1899;
        _1906 = test::black_box::<Wrapping<u32>>(move _1907) -> [return: bb693, unwind continue];
    }

    bb693: {
        _1905 = &_1906;
        _2347 = const _;
        _1904 = (move _1905, _2347);
        _1908 = (_1904.0: &std::num::Wrapping<u32>);
        _1909 = (_1904.1: &std::num::Wrapping<u32>);
        _1911 = <Wrapping<u32> as PartialEq>::eq(_1908, _1909) -> [return: bb694, unwind continue];
    }

    bb694: {
        _1910 = Not(move _1911);
        switchInt(move _1910) -> [0: bb696, otherwise: bb695];
    }

    bb695: {
        _1912 = core::panicking::AssertKind::Eq;
        _1914 = Option::<Arguments<'_>>::None;
        _1913 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _1912, _1908, _1909, move _1914) -> unwind continue;
    }

    bb696: {
        _1915 = Wrapping::<u64>(const 42_u64);
        _1917 = _1915;
        _1916 = test::black_box::<Wrapping<u64>>(move _1917) -> [return: bb697, unwind continue];
    }

    bb697: {
        _1915 = move _1916;
        _1919 = &mut _1915;
        _1920 = Wrapping::<u64>(const 38_u64);
        _1918 = <Wrapping<u64> as BitOrAssign>::bitor_assign(move _1919, move _1920) -> [return: bb698, unwind continue];
    }

    bb698: {
        _1924 = _1915;
        _1923 = test::black_box::<Wrapping<u64>>(move _1924) -> [return: bb699, unwind continue];
    }

    bb699: {
        _1922 = &_1923;
        _2346 = const _;
        _1921 = (move _1922, _2346);
        _1925 = (_1921.0: &std::num::Wrapping<u64>);
        _1926 = (_1921.1: &std::num::Wrapping<u64>);
        _1928 = <Wrapping<u64> as PartialEq>::eq(_1925, _1926) -> [return: bb700, unwind continue];
    }

    bb700: {
        _1927 = Not(move _1928);
        switchInt(move _1927) -> [0: bb702, otherwise: bb701];
    }

    bb701: {
        _1929 = core::panicking::AssertKind::Eq;
        _1931 = Option::<Arguments<'_>>::None;
        _1930 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _1929, _1925, _1926, move _1931) -> unwind continue;
    }

    bb702: {
        _1932 = Wrapping::<u64>(const 42_u64);
        _1934 = _1932;
        _1933 = test::black_box::<Wrapping<u64>>(move _1934) -> [return: bb703, unwind continue];
    }

    bb703: {
        _1932 = move _1933;
        _1936 = &mut _1932;
        _2345 = const _;
        _1935 = <Wrapping<u64> as BitOrAssign<&Wrapping<u64>>>::bitor_assign(move _1936, _2345) -> [return: bb704, unwind continue];
    }

    bb704: {
        _1940 = _1932;
        _1939 = test::black_box::<Wrapping<u64>>(move _1940) -> [return: bb705, unwind continue];
    }

    bb705: {
        _1938 = &_1939;
        _2344 = const _;
        _1937 = (move _1938, _2344);
        _1941 = (_1937.0: &std::num::Wrapping<u64>);
        _1942 = (_1937.1: &std::num::Wrapping<u64>);
        _1944 = <Wrapping<u64> as PartialEq>::eq(_1941, _1942) -> [return: bb706, unwind continue];
    }

    bb706: {
        _1943 = Not(move _1944);
        switchInt(move _1943) -> [0: bb708, otherwise: bb707];
    }

    bb707: {
        _1945 = core::panicking::AssertKind::Eq;
        _1947 = Option::<Arguments<'_>>::None;
        _1946 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _1945, _1941, _1942, move _1947) -> unwind continue;
    }

    bb708: {
        _1948 = Wrapping::<usize>(const 42_usize);
        _1950 = _1948;
        _1949 = test::black_box::<Wrapping<usize>>(move _1950) -> [return: bb709, unwind continue];
    }

    bb709: {
        _1948 = move _1949;
        _1952 = &mut _1948;
        _1953 = Wrapping::<usize>(const 38_usize);
        _1951 = <Wrapping<usize> as BitOrAssign>::bitor_assign(move _1952, move _1953) -> [return: bb710, unwind continue];
    }

    bb710: {
        _1957 = _1948;
        _1956 = test::black_box::<Wrapping<usize>>(move _1957) -> [return: bb711, unwind continue];
    }

    bb711: {
        _1955 = &_1956;
        _2343 = const _;
        _1954 = (move _1955, _2343);
        _1958 = (_1954.0: &std::num::Wrapping<usize>);
        _1959 = (_1954.1: &std::num::Wrapping<usize>);
        _1961 = <Wrapping<usize> as PartialEq>::eq(_1958, _1959) -> [return: bb712, unwind continue];
    }

    bb712: {
        _1960 = Not(move _1961);
        switchInt(move _1960) -> [0: bb714, otherwise: bb713];
    }

    bb713: {
        _1962 = core::panicking::AssertKind::Eq;
        _1964 = Option::<Arguments<'_>>::None;
        _1963 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _1962, _1958, _1959, move _1964) -> unwind continue;
    }

    bb714: {
        _1965 = Wrapping::<usize>(const 42_usize);
        _1967 = _1965;
        _1966 = test::black_box::<Wrapping<usize>>(move _1967) -> [return: bb715, unwind continue];
    }

    bb715: {
        _1965 = move _1966;
        _1969 = &mut _1965;
        _2342 = const _;
        _1968 = <Wrapping<usize> as BitOrAssign<&Wrapping<usize>>>::bitor_assign(move _1969, _2342) -> [return: bb716, unwind continue];
    }

    bb716: {
        _1973 = _1965;
        _1972 = test::black_box::<Wrapping<usize>>(move _1973) -> [return: bb717, unwind continue];
    }

    bb717: {
        _1971 = &_1972;
        _2341 = const _;
        _1970 = (move _1971, _2341);
        _1974 = (_1970.0: &std::num::Wrapping<usize>);
        _1975 = (_1970.1: &std::num::Wrapping<usize>);
        _1977 = <Wrapping<usize> as PartialEq>::eq(_1974, _1975) -> [return: bb718, unwind continue];
    }

    bb718: {
        _1976 = Not(move _1977);
        switchInt(move _1976) -> [0: bb720, otherwise: bb719];
    }

    bb719: {
        _1978 = core::panicking::AssertKind::Eq;
        _1980 = Option::<Arguments<'_>>::None;
        _1979 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _1978, _1974, _1975, move _1980) -> unwind continue;
    }

    bb720: {
        _1981 = Wrapping::<i8>(const 42_i8);
        _1983 = _1981;
        _1982 = test::black_box::<Wrapping<i8>>(move _1983) -> [return: bb721, unwind continue];
    }

    bb721: {
        _1981 = move _1982;
        _1985 = &mut _1981;
        _1986 = Wrapping::<i8>(const 38_i8);
        _1984 = <Wrapping<i8> as BitAndAssign>::bitand_assign(move _1985, move _1986) -> [return: bb722, unwind continue];
    }

    bb722: {
        _1990 = _1981;
        _1989 = test::black_box::<Wrapping<i8>>(move _1990) -> [return: bb723, unwind continue];
    }

    bb723: {
        _1988 = &_1989;
        _2340 = const _;
        _1987 = (move _1988, _2340);
        _1991 = (_1987.0: &std::num::Wrapping<i8>);
        _1992 = (_1987.1: &std::num::Wrapping<i8>);
        _1994 = <Wrapping<i8> as PartialEq>::eq(_1991, _1992) -> [return: bb724, unwind continue];
    }

    bb724: {
        _1993 = Not(move _1994);
        switchInt(move _1993) -> [0: bb726, otherwise: bb725];
    }

    bb725: {
        _1995 = core::panicking::AssertKind::Eq;
        _1997 = Option::<Arguments<'_>>::None;
        _1996 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _1995, _1991, _1992, move _1997) -> unwind continue;
    }

    bb726: {
        _1998 = Wrapping::<i8>(const 42_i8);
        _2000 = _1998;
        _1999 = test::black_box::<Wrapping<i8>>(move _2000) -> [return: bb727, unwind continue];
    }

    bb727: {
        _1998 = move _1999;
        _2002 = &mut _1998;
        _2339 = const _;
        _2001 = <Wrapping<i8> as BitAndAssign<&Wrapping<i8>>>::bitand_assign(move _2002, _2339) -> [return: bb728, unwind continue];
    }

    bb728: {
        _2006 = _1998;
        _2005 = test::black_box::<Wrapping<i8>>(move _2006) -> [return: bb729, unwind continue];
    }

    bb729: {
        _2004 = &_2005;
        _2338 = const _;
        _2003 = (move _2004, _2338);
        _2007 = (_2003.0: &std::num::Wrapping<i8>);
        _2008 = (_2003.1: &std::num::Wrapping<i8>);
        _2010 = <Wrapping<i8> as PartialEq>::eq(_2007, _2008) -> [return: bb730, unwind continue];
    }

    bb730: {
        _2009 = Not(move _2010);
        switchInt(move _2009) -> [0: bb732, otherwise: bb731];
    }

    bb731: {
        _2011 = core::panicking::AssertKind::Eq;
        _2013 = Option::<Arguments<'_>>::None;
        _2012 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _2011, _2007, _2008, move _2013) -> unwind continue;
    }

    bb732: {
        _2014 = Wrapping::<i16>(const 42_i16);
        _2016 = _2014;
        _2015 = test::black_box::<Wrapping<i16>>(move _2016) -> [return: bb733, unwind continue];
    }

    bb733: {
        _2014 = move _2015;
        _2018 = &mut _2014;
        _2019 = Wrapping::<i16>(const 38_i16);
        _2017 = <Wrapping<i16> as BitAndAssign>::bitand_assign(move _2018, move _2019) -> [return: bb734, unwind continue];
    }

    bb734: {
        _2023 = _2014;
        _2022 = test::black_box::<Wrapping<i16>>(move _2023) -> [return: bb735, unwind continue];
    }

    bb735: {
        _2021 = &_2022;
        _2337 = const _;
        _2020 = (move _2021, _2337);
        _2024 = (_2020.0: &std::num::Wrapping<i16>);
        _2025 = (_2020.1: &std::num::Wrapping<i16>);
        _2027 = <Wrapping<i16> as PartialEq>::eq(_2024, _2025) -> [return: bb736, unwind continue];
    }

    bb736: {
        _2026 = Not(move _2027);
        switchInt(move _2026) -> [0: bb738, otherwise: bb737];
    }

    bb737: {
        _2028 = core::panicking::AssertKind::Eq;
        _2030 = Option::<Arguments<'_>>::None;
        _2029 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _2028, _2024, _2025, move _2030) -> unwind continue;
    }

    bb738: {
        _2031 = Wrapping::<i16>(const 42_i16);
        _2033 = _2031;
        _2032 = test::black_box::<Wrapping<i16>>(move _2033) -> [return: bb739, unwind continue];
    }

    bb739: {
        _2031 = move _2032;
        _2035 = &mut _2031;
        _2336 = const _;
        _2034 = <Wrapping<i16> as BitAndAssign<&Wrapping<i16>>>::bitand_assign(move _2035, _2336) -> [return: bb740, unwind continue];
    }

    bb740: {
        _2039 = _2031;
        _2038 = test::black_box::<Wrapping<i16>>(move _2039) -> [return: bb741, unwind continue];
    }

    bb741: {
        _2037 = &_2038;
        _2335 = const _;
        _2036 = (move _2037, _2335);
        _2040 = (_2036.0: &std::num::Wrapping<i16>);
        _2041 = (_2036.1: &std::num::Wrapping<i16>);
        _2043 = <Wrapping<i16> as PartialEq>::eq(_2040, _2041) -> [return: bb742, unwind continue];
    }

    bb742: {
        _2042 = Not(move _2043);
        switchInt(move _2042) -> [0: bb744, otherwise: bb743];
    }

    bb743: {
        _2044 = core::panicking::AssertKind::Eq;
        _2046 = Option::<Arguments<'_>>::None;
        _2045 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _2044, _2040, _2041, move _2046) -> unwind continue;
    }

    bb744: {
        _2047 = Wrapping::<i32>(const 42_i32);
        _2049 = _2047;
        _2048 = test::black_box::<Wrapping<i32>>(move _2049) -> [return: bb745, unwind continue];
    }

    bb745: {
        _2047 = move _2048;
        _2051 = &mut _2047;
        _2052 = Wrapping::<i32>(const 38_i32);
        _2050 = <Wrapping<i32> as BitAndAssign>::bitand_assign(move _2051, move _2052) -> [return: bb746, unwind continue];
    }

    bb746: {
        _2056 = _2047;
        _2055 = test::black_box::<Wrapping<i32>>(move _2056) -> [return: bb747, unwind continue];
    }

    bb747: {
        _2054 = &_2055;
        _2334 = const _;
        _2053 = (move _2054, _2334);
        _2057 = (_2053.0: &std::num::Wrapping<i32>);
        _2058 = (_2053.1: &std::num::Wrapping<i32>);
        _2060 = <Wrapping<i32> as PartialEq>::eq(_2057, _2058) -> [return: bb748, unwind continue];
    }

    bb748: {
        _2059 = Not(move _2060);
        switchInt(move _2059) -> [0: bb750, otherwise: bb749];
    }

    bb749: {
        _2061 = core::panicking::AssertKind::Eq;
        _2063 = Option::<Arguments<'_>>::None;
        _2062 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _2061, _2057, _2058, move _2063) -> unwind continue;
    }

    bb750: {
        _2064 = Wrapping::<i32>(const 42_i32);
        _2066 = _2064;
        _2065 = test::black_box::<Wrapping<i32>>(move _2066) -> [return: bb751, unwind continue];
    }

    bb751: {
        _2064 = move _2065;
        _2068 = &mut _2064;
        _2333 = const _;
        _2067 = <Wrapping<i32> as BitAndAssign<&Wrapping<i32>>>::bitand_assign(move _2068, _2333) -> [return: bb752, unwind continue];
    }

    bb752: {
        _2072 = _2064;
        _2071 = test::black_box::<Wrapping<i32>>(move _2072) -> [return: bb753, unwind continue];
    }

    bb753: {
        _2070 = &_2071;
        _2332 = const _;
        _2069 = (move _2070, _2332);
        _2073 = (_2069.0: &std::num::Wrapping<i32>);
        _2074 = (_2069.1: &std::num::Wrapping<i32>);
        _2076 = <Wrapping<i32> as PartialEq>::eq(_2073, _2074) -> [return: bb754, unwind continue];
    }

    bb754: {
        _2075 = Not(move _2076);
        switchInt(move _2075) -> [0: bb756, otherwise: bb755];
    }

    bb755: {
        _2077 = core::panicking::AssertKind::Eq;
        _2079 = Option::<Arguments<'_>>::None;
        _2078 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _2077, _2073, _2074, move _2079) -> unwind continue;
    }

    bb756: {
        _2080 = Wrapping::<i64>(const 42_i64);
        _2082 = _2080;
        _2081 = test::black_box::<Wrapping<i64>>(move _2082) -> [return: bb757, unwind continue];
    }

    bb757: {
        _2080 = move _2081;
        _2084 = &mut _2080;
        _2085 = Wrapping::<i64>(const 38_i64);
        _2083 = <Wrapping<i64> as BitAndAssign>::bitand_assign(move _2084, move _2085) -> [return: bb758, unwind continue];
    }

    bb758: {
        _2089 = _2080;
        _2088 = test::black_box::<Wrapping<i64>>(move _2089) -> [return: bb759, unwind continue];
    }

    bb759: {
        _2087 = &_2088;
        _2331 = const _;
        _2086 = (move _2087, _2331);
        _2090 = (_2086.0: &std::num::Wrapping<i64>);
        _2091 = (_2086.1: &std::num::Wrapping<i64>);
        _2093 = <Wrapping<i64> as PartialEq>::eq(_2090, _2091) -> [return: bb760, unwind continue];
    }

    bb760: {
        _2092 = Not(move _2093);
        switchInt(move _2092) -> [0: bb762, otherwise: bb761];
    }

    bb761: {
        _2094 = core::panicking::AssertKind::Eq;
        _2096 = Option::<Arguments<'_>>::None;
        _2095 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _2094, _2090, _2091, move _2096) -> unwind continue;
    }

    bb762: {
        _2097 = Wrapping::<i64>(const 42_i64);
        _2099 = _2097;
        _2098 = test::black_box::<Wrapping<i64>>(move _2099) -> [return: bb763, unwind continue];
    }

    bb763: {
        _2097 = move _2098;
        _2101 = &mut _2097;
        _2330 = const _;
        _2100 = <Wrapping<i64> as BitAndAssign<&Wrapping<i64>>>::bitand_assign(move _2101, _2330) -> [return: bb764, unwind continue];
    }

    bb764: {
        _2105 = _2097;
        _2104 = test::black_box::<Wrapping<i64>>(move _2105) -> [return: bb765, unwind continue];
    }

    bb765: {
        _2103 = &_2104;
        _2329 = const _;
        _2102 = (move _2103, _2329);
        _2106 = (_2102.0: &std::num::Wrapping<i64>);
        _2107 = (_2102.1: &std::num::Wrapping<i64>);
        _2109 = <Wrapping<i64> as PartialEq>::eq(_2106, _2107) -> [return: bb766, unwind continue];
    }

    bb766: {
        _2108 = Not(move _2109);
        switchInt(move _2108) -> [0: bb768, otherwise: bb767];
    }

    bb767: {
        _2110 = core::panicking::AssertKind::Eq;
        _2112 = Option::<Arguments<'_>>::None;
        _2111 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _2110, _2106, _2107, move _2112) -> unwind continue;
    }

    bb768: {
        _2113 = Wrapping::<isize>(const 42_isize);
        _2115 = _2113;
        _2114 = test::black_box::<Wrapping<isize>>(move _2115) -> [return: bb769, unwind continue];
    }

    bb769: {
        _2113 = move _2114;
        _2117 = &mut _2113;
        _2118 = Wrapping::<isize>(const 38_isize);
        _2116 = <Wrapping<isize> as BitAndAssign>::bitand_assign(move _2117, move _2118) -> [return: bb770, unwind continue];
    }

    bb770: {
        _2122 = _2113;
        _2121 = test::black_box::<Wrapping<isize>>(move _2122) -> [return: bb771, unwind continue];
    }

    bb771: {
        _2120 = &_2121;
        _2328 = const _;
        _2119 = (move _2120, _2328);
        _2123 = (_2119.0: &std::num::Wrapping<isize>);
        _2124 = (_2119.1: &std::num::Wrapping<isize>);
        _2126 = <Wrapping<isize> as PartialEq>::eq(_2123, _2124) -> [return: bb772, unwind continue];
    }

    bb772: {
        _2125 = Not(move _2126);
        switchInt(move _2125) -> [0: bb774, otherwise: bb773];
    }

    bb773: {
        _2127 = core::panicking::AssertKind::Eq;
        _2129 = Option::<Arguments<'_>>::None;
        _2128 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _2127, _2123, _2124, move _2129) -> unwind continue;
    }

    bb774: {
        _2130 = Wrapping::<isize>(const 42_isize);
        _2132 = _2130;
        _2131 = test::black_box::<Wrapping<isize>>(move _2132) -> [return: bb775, unwind continue];
    }

    bb775: {
        _2130 = move _2131;
        _2134 = &mut _2130;
        _2327 = const _;
        _2133 = <Wrapping<isize> as BitAndAssign<&Wrapping<isize>>>::bitand_assign(move _2134, _2327) -> [return: bb776, unwind continue];
    }

    bb776: {
        _2138 = _2130;
        _2137 = test::black_box::<Wrapping<isize>>(move _2138) -> [return: bb777, unwind continue];
    }

    bb777: {
        _2136 = &_2137;
        _2326 = const _;
        _2135 = (move _2136, _2326);
        _2139 = (_2135.0: &std::num::Wrapping<isize>);
        _2140 = (_2135.1: &std::num::Wrapping<isize>);
        _2142 = <Wrapping<isize> as PartialEq>::eq(_2139, _2140) -> [return: bb778, unwind continue];
    }

    bb778: {
        _2141 = Not(move _2142);
        switchInt(move _2141) -> [0: bb780, otherwise: bb779];
    }

    bb779: {
        _2143 = core::panicking::AssertKind::Eq;
        _2145 = Option::<Arguments<'_>>::None;
        _2144 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _2143, _2139, _2140, move _2145) -> unwind continue;
    }

    bb780: {
        _2146 = Wrapping::<u8>(const 42_u8);
        _2148 = _2146;
        _2147 = test::black_box::<Wrapping<u8>>(move _2148) -> [return: bb781, unwind continue];
    }

    bb781: {
        _2146 = move _2147;
        _2150 = &mut _2146;
        _2151 = Wrapping::<u8>(const 38_u8);
        _2149 = <Wrapping<u8> as BitAndAssign>::bitand_assign(move _2150, move _2151) -> [return: bb782, unwind continue];
    }

    bb782: {
        _2155 = _2146;
        _2154 = test::black_box::<Wrapping<u8>>(move _2155) -> [return: bb783, unwind continue];
    }

    bb783: {
        _2153 = &_2154;
        _2325 = const _;
        _2152 = (move _2153, _2325);
        _2156 = (_2152.0: &std::num::Wrapping<u8>);
        _2157 = (_2152.1: &std::num::Wrapping<u8>);
        _2159 = <Wrapping<u8> as PartialEq>::eq(_2156, _2157) -> [return: bb784, unwind continue];
    }

    bb784: {
        _2158 = Not(move _2159);
        switchInt(move _2158) -> [0: bb786, otherwise: bb785];
    }

    bb785: {
        _2160 = core::panicking::AssertKind::Eq;
        _2162 = Option::<Arguments<'_>>::None;
        _2161 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _2160, _2156, _2157, move _2162) -> unwind continue;
    }

    bb786: {
        _2163 = Wrapping::<u8>(const 42_u8);
        _2165 = _2163;
        _2164 = test::black_box::<Wrapping<u8>>(move _2165) -> [return: bb787, unwind continue];
    }

    bb787: {
        _2163 = move _2164;
        _2167 = &mut _2163;
        _2324 = const _;
        _2166 = <Wrapping<u8> as BitAndAssign<&Wrapping<u8>>>::bitand_assign(move _2167, _2324) -> [return: bb788, unwind continue];
    }

    bb788: {
        _2171 = _2163;
        _2170 = test::black_box::<Wrapping<u8>>(move _2171) -> [return: bb789, unwind continue];
    }

    bb789: {
        _2169 = &_2170;
        _2323 = const _;
        _2168 = (move _2169, _2323);
        _2172 = (_2168.0: &std::num::Wrapping<u8>);
        _2173 = (_2168.1: &std::num::Wrapping<u8>);
        _2175 = <Wrapping<u8> as PartialEq>::eq(_2172, _2173) -> [return: bb790, unwind continue];
    }

    bb790: {
        _2174 = Not(move _2175);
        switchInt(move _2174) -> [0: bb792, otherwise: bb791];
    }

    bb791: {
        _2176 = core::panicking::AssertKind::Eq;
        _2178 = Option::<Arguments<'_>>::None;
        _2177 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _2176, _2172, _2173, move _2178) -> unwind continue;
    }

    bb792: {
        _2179 = Wrapping::<u16>(const 42_u16);
        _2181 = _2179;
        _2180 = test::black_box::<Wrapping<u16>>(move _2181) -> [return: bb793, unwind continue];
    }

    bb793: {
        _2179 = move _2180;
        _2183 = &mut _2179;
        _2184 = Wrapping::<u16>(const 38_u16);
        _2182 = <Wrapping<u16> as BitAndAssign>::bitand_assign(move _2183, move _2184) -> [return: bb794, unwind continue];
    }

    bb794: {
        _2188 = _2179;
        _2187 = test::black_box::<Wrapping<u16>>(move _2188) -> [return: bb795, unwind continue];
    }

    bb795: {
        _2186 = &_2187;
        _2322 = const _;
        _2185 = (move _2186, _2322);
        _2189 = (_2185.0: &std::num::Wrapping<u16>);
        _2190 = (_2185.1: &std::num::Wrapping<u16>);
        _2192 = <Wrapping<u16> as PartialEq>::eq(_2189, _2190) -> [return: bb796, unwind continue];
    }

    bb796: {
        _2191 = Not(move _2192);
        switchInt(move _2191) -> [0: bb798, otherwise: bb797];
    }

    bb797: {
        _2193 = core::panicking::AssertKind::Eq;
        _2195 = Option::<Arguments<'_>>::None;
        _2194 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _2193, _2189, _2190, move _2195) -> unwind continue;
    }

    bb798: {
        _2196 = Wrapping::<u16>(const 42_u16);
        _2198 = _2196;
        _2197 = test::black_box::<Wrapping<u16>>(move _2198) -> [return: bb799, unwind continue];
    }

    bb799: {
        _2196 = move _2197;
        _2200 = &mut _2196;
        _2321 = const _;
        _2199 = <Wrapping<u16> as BitAndAssign<&Wrapping<u16>>>::bitand_assign(move _2200, _2321) -> [return: bb800, unwind continue];
    }

    bb800: {
        _2204 = _2196;
        _2203 = test::black_box::<Wrapping<u16>>(move _2204) -> [return: bb801, unwind continue];
    }

    bb801: {
        _2202 = &_2203;
        _2320 = const _;
        _2201 = (move _2202, _2320);
        _2205 = (_2201.0: &std::num::Wrapping<u16>);
        _2206 = (_2201.1: &std::num::Wrapping<u16>);
        _2208 = <Wrapping<u16> as PartialEq>::eq(_2205, _2206) -> [return: bb802, unwind continue];
    }

    bb802: {
        _2207 = Not(move _2208);
        switchInt(move _2207) -> [0: bb804, otherwise: bb803];
    }

    bb803: {
        _2209 = core::panicking::AssertKind::Eq;
        _2211 = Option::<Arguments<'_>>::None;
        _2210 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _2209, _2205, _2206, move _2211) -> unwind continue;
    }

    bb804: {
        _2212 = Wrapping::<u32>(const 42_u32);
        _2214 = _2212;
        _2213 = test::black_box::<Wrapping<u32>>(move _2214) -> [return: bb805, unwind continue];
    }

    bb805: {
        _2212 = move _2213;
        _2216 = &mut _2212;
        _2217 = Wrapping::<u32>(const 38_u32);
        _2215 = <Wrapping<u32> as BitAndAssign>::bitand_assign(move _2216, move _2217) -> [return: bb806, unwind continue];
    }

    bb806: {
        _2221 = _2212;
        _2220 = test::black_box::<Wrapping<u32>>(move _2221) -> [return: bb807, unwind continue];
    }

    bb807: {
        _2219 = &_2220;
        _2319 = const _;
        _2218 = (move _2219, _2319);
        _2222 = (_2218.0: &std::num::Wrapping<u32>);
        _2223 = (_2218.1: &std::num::Wrapping<u32>);
        _2225 = <Wrapping<u32> as PartialEq>::eq(_2222, _2223) -> [return: bb808, unwind continue];
    }

    bb808: {
        _2224 = Not(move _2225);
        switchInt(move _2224) -> [0: bb810, otherwise: bb809];
    }

    bb809: {
        _2226 = core::panicking::AssertKind::Eq;
        _2228 = Option::<Arguments<'_>>::None;
        _2227 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _2226, _2222, _2223, move _2228) -> unwind continue;
    }

    bb810: {
        _2229 = Wrapping::<u32>(const 42_u32);
        _2231 = _2229;
        _2230 = test::black_box::<Wrapping<u32>>(move _2231) -> [return: bb811, unwind continue];
    }

    bb811: {
        _2229 = move _2230;
        _2233 = &mut _2229;
        _2318 = const _;
        _2232 = <Wrapping<u32> as BitAndAssign<&Wrapping<u32>>>::bitand_assign(move _2233, _2318) -> [return: bb812, unwind continue];
    }

    bb812: {
        _2237 = _2229;
        _2236 = test::black_box::<Wrapping<u32>>(move _2237) -> [return: bb813, unwind continue];
    }

    bb813: {
        _2235 = &_2236;
        _2317 = const _;
        _2234 = (move _2235, _2317);
        _2238 = (_2234.0: &std::num::Wrapping<u32>);
        _2239 = (_2234.1: &std::num::Wrapping<u32>);
        _2241 = <Wrapping<u32> as PartialEq>::eq(_2238, _2239) -> [return: bb814, unwind continue];
    }

    bb814: {
        _2240 = Not(move _2241);
        switchInt(move _2240) -> [0: bb816, otherwise: bb815];
    }

    bb815: {
        _2242 = core::panicking::AssertKind::Eq;
        _2244 = Option::<Arguments<'_>>::None;
        _2243 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _2242, _2238, _2239, move _2244) -> unwind continue;
    }

    bb816: {
        _2245 = Wrapping::<u64>(const 42_u64);
        _2247 = _2245;
        _2246 = test::black_box::<Wrapping<u64>>(move _2247) -> [return: bb817, unwind continue];
    }

    bb817: {
        _2245 = move _2246;
        _2249 = &mut _2245;
        _2250 = Wrapping::<u64>(const 38_u64);
        _2248 = <Wrapping<u64> as BitAndAssign>::bitand_assign(move _2249, move _2250) -> [return: bb818, unwind continue];
    }

    bb818: {
        _2254 = _2245;
        _2253 = test::black_box::<Wrapping<u64>>(move _2254) -> [return: bb819, unwind continue];
    }

    bb819: {
        _2252 = &_2253;
        _2316 = const _;
        _2251 = (move _2252, _2316);
        _2255 = (_2251.0: &std::num::Wrapping<u64>);
        _2256 = (_2251.1: &std::num::Wrapping<u64>);
        _2258 = <Wrapping<u64> as PartialEq>::eq(_2255, _2256) -> [return: bb820, unwind continue];
    }

    bb820: {
        _2257 = Not(move _2258);
        switchInt(move _2257) -> [0: bb822, otherwise: bb821];
    }

    bb821: {
        _2259 = core::panicking::AssertKind::Eq;
        _2261 = Option::<Arguments<'_>>::None;
        _2260 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _2259, _2255, _2256, move _2261) -> unwind continue;
    }

    bb822: {
        _2262 = Wrapping::<u64>(const 42_u64);
        _2264 = _2262;
        _2263 = test::black_box::<Wrapping<u64>>(move _2264) -> [return: bb823, unwind continue];
    }

    bb823: {
        _2262 = move _2263;
        _2266 = &mut _2262;
        _2315 = const _;
        _2265 = <Wrapping<u64> as BitAndAssign<&Wrapping<u64>>>::bitand_assign(move _2266, _2315) -> [return: bb824, unwind continue];
    }

    bb824: {
        _2270 = _2262;
        _2269 = test::black_box::<Wrapping<u64>>(move _2270) -> [return: bb825, unwind continue];
    }

    bb825: {
        _2268 = &_2269;
        _2314 = const _;
        _2267 = (move _2268, _2314);
        _2271 = (_2267.0: &std::num::Wrapping<u64>);
        _2272 = (_2267.1: &std::num::Wrapping<u64>);
        _2274 = <Wrapping<u64> as PartialEq>::eq(_2271, _2272) -> [return: bb826, unwind continue];
    }

    bb826: {
        _2273 = Not(move _2274);
        switchInt(move _2273) -> [0: bb828, otherwise: bb827];
    }

    bb827: {
        _2275 = core::panicking::AssertKind::Eq;
        _2277 = Option::<Arguments<'_>>::None;
        _2276 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _2275, _2271, _2272, move _2277) -> unwind continue;
    }

    bb828: {
        _2278 = Wrapping::<usize>(const 42_usize);
        _2280 = _2278;
        _2279 = test::black_box::<Wrapping<usize>>(move _2280) -> [return: bb829, unwind continue];
    }

    bb829: {
        _2278 = move _2279;
        _2282 = &mut _2278;
        _2283 = Wrapping::<usize>(const 38_usize);
        _2281 = <Wrapping<usize> as BitAndAssign>::bitand_assign(move _2282, move _2283) -> [return: bb830, unwind continue];
    }

    bb830: {
        _2287 = _2278;
        _2286 = test::black_box::<Wrapping<usize>>(move _2287) -> [return: bb831, unwind continue];
    }

    bb831: {
        _2285 = &_2286;
        _2313 = const _;
        _2284 = (move _2285, _2313);
        _2288 = (_2284.0: &std::num::Wrapping<usize>);
        _2289 = (_2284.1: &std::num::Wrapping<usize>);
        _2291 = <Wrapping<usize> as PartialEq>::eq(_2288, _2289) -> [return: bb832, unwind continue];
    }

    bb832: {
        _2290 = Not(move _2291);
        switchInt(move _2290) -> [0: bb834, otherwise: bb833];
    }

    bb833: {
        _2292 = core::panicking::AssertKind::Eq;
        _2294 = Option::<Arguments<'_>>::None;
        _2293 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _2292, _2288, _2289, move _2294) -> unwind continue;
    }

    bb834: {
        _2295 = Wrapping::<usize>(const 42_usize);
        _2297 = _2295;
        _2296 = test::black_box::<Wrapping<usize>>(move _2297) -> [return: bb835, unwind continue];
    }

    bb835: {
        _2295 = move _2296;
        _2299 = &mut _2295;
        _2312 = const _;
        _2298 = <Wrapping<usize> as BitAndAssign<&Wrapping<usize>>>::bitand_assign(move _2299, _2312) -> [return: bb836, unwind continue];
    }

    bb836: {
        _2303 = _2295;
        _2302 = test::black_box::<Wrapping<usize>>(move _2303) -> [return: bb837, unwind continue];
    }

    bb837: {
        _2301 = &_2302;
        _2311 = const _;
        _2300 = (move _2301, _2311);
        _2304 = (_2300.0: &std::num::Wrapping<usize>);
        _2305 = (_2300.1: &std::num::Wrapping<usize>);
        _2307 = <Wrapping<usize> as PartialEq>::eq(_2304, _2305) -> [return: bb838, unwind continue];
    }

    bb838: {
        _2306 = Not(move _2307);
        switchInt(move _2306) -> [0: bb840, otherwise: bb839];
    }

    bb839: {
        _2308 = core::panicking::AssertKind::Eq;
        _2310 = Option::<Arguments<'_>>::None;
        _2309 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _2308, _2304, _2305, move _2310) -> unwind continue;
    }

    bb840: {
        return;
    }
}

promoted[0] in test_op_assigns: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const 34_usize);
        _0 = &_1;
        return;
    }
}

promoted[1] in test_op_assigns: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const 38_usize);
        _0 = &_1;
        return;
    }
}

promoted[2] in test_op_assigns: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const 34_usize);
        _0 = &_1;
        return;
    }
}

promoted[3] in test_op_assigns: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const 34_u64);
        _0 = &_1;
        return;
    }
}

promoted[4] in test_op_assigns: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const 38_u64);
        _0 = &_1;
        return;
    }
}

promoted[5] in test_op_assigns: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const 34_u64);
        _0 = &_1;
        return;
    }
}

promoted[6] in test_op_assigns: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const 34_u32);
        _0 = &_1;
        return;
    }
}

promoted[7] in test_op_assigns: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const 38_u32);
        _0 = &_1;
        return;
    }
}

promoted[8] in test_op_assigns: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const 34_u32);
        _0 = &_1;
        return;
    }
}

promoted[9] in test_op_assigns: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const 34_u16);
        _0 = &_1;
        return;
    }
}

promoted[10] in test_op_assigns: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const 38_u16);
        _0 = &_1;
        return;
    }
}

promoted[11] in test_op_assigns: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const 34_u16);
        _0 = &_1;
        return;
    }
}

promoted[12] in test_op_assigns: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const 34_u8);
        _0 = &_1;
        return;
    }
}

promoted[13] in test_op_assigns: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const 38_u8);
        _0 = &_1;
        return;
    }
}

promoted[14] in test_op_assigns: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const 34_u8);
        _0 = &_1;
        return;
    }
}

promoted[15] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const 34_isize);
        _0 = &_1;
        return;
    }
}

promoted[16] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const 38_isize);
        _0 = &_1;
        return;
    }
}

promoted[17] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const 34_isize);
        _0 = &_1;
        return;
    }
}

promoted[18] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const 34_i64);
        _0 = &_1;
        return;
    }
}

promoted[19] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const 38_i64);
        _0 = &_1;
        return;
    }
}

promoted[20] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const 34_i64);
        _0 = &_1;
        return;
    }
}

promoted[21] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const 34_i32);
        _0 = &_1;
        return;
    }
}

promoted[22] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const 38_i32);
        _0 = &_1;
        return;
    }
}

promoted[23] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const 34_i32);
        _0 = &_1;
        return;
    }
}

promoted[24] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const 34_i16);
        _0 = &_1;
        return;
    }
}

promoted[25] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const 38_i16);
        _0 = &_1;
        return;
    }
}

promoted[26] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const 34_i16);
        _0 = &_1;
        return;
    }
}

promoted[27] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const 34_i8);
        _0 = &_1;
        return;
    }
}

promoted[28] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const 38_i8);
        _0 = &_1;
        return;
    }
}

promoted[29] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const 34_i8);
        _0 = &_1;
        return;
    }
}

promoted[30] in test_op_assigns: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const 46_usize);
        _0 = &_1;
        return;
    }
}

promoted[31] in test_op_assigns: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const 38_usize);
        _0 = &_1;
        return;
    }
}

promoted[32] in test_op_assigns: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const 46_usize);
        _0 = &_1;
        return;
    }
}

promoted[33] in test_op_assigns: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const 46_u64);
        _0 = &_1;
        return;
    }
}

promoted[34] in test_op_assigns: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const 38_u64);
        _0 = &_1;
        return;
    }
}

promoted[35] in test_op_assigns: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const 46_u64);
        _0 = &_1;
        return;
    }
}

promoted[36] in test_op_assigns: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const 46_u32);
        _0 = &_1;
        return;
    }
}

promoted[37] in test_op_assigns: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const 38_u32);
        _0 = &_1;
        return;
    }
}

promoted[38] in test_op_assigns: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const 46_u32);
        _0 = &_1;
        return;
    }
}

promoted[39] in test_op_assigns: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const 46_u16);
        _0 = &_1;
        return;
    }
}

promoted[40] in test_op_assigns: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const 38_u16);
        _0 = &_1;
        return;
    }
}

promoted[41] in test_op_assigns: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const 46_u16);
        _0 = &_1;
        return;
    }
}

promoted[42] in test_op_assigns: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const 46_u8);
        _0 = &_1;
        return;
    }
}

promoted[43] in test_op_assigns: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const 38_u8);
        _0 = &_1;
        return;
    }
}

promoted[44] in test_op_assigns: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const 46_u8);
        _0 = &_1;
        return;
    }
}

promoted[45] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const 46_isize);
        _0 = &_1;
        return;
    }
}

promoted[46] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const 38_isize);
        _0 = &_1;
        return;
    }
}

promoted[47] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const 46_isize);
        _0 = &_1;
        return;
    }
}

promoted[48] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const 46_i64);
        _0 = &_1;
        return;
    }
}

promoted[49] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const 38_i64);
        _0 = &_1;
        return;
    }
}

promoted[50] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const 46_i64);
        _0 = &_1;
        return;
    }
}

promoted[51] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const 46_i32);
        _0 = &_1;
        return;
    }
}

promoted[52] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const 38_i32);
        _0 = &_1;
        return;
    }
}

promoted[53] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const 46_i32);
        _0 = &_1;
        return;
    }
}

promoted[54] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const 46_i16);
        _0 = &_1;
        return;
    }
}

promoted[55] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const 38_i16);
        _0 = &_1;
        return;
    }
}

promoted[56] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const 46_i16);
        _0 = &_1;
        return;
    }
}

promoted[57] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const 46_i8);
        _0 = &_1;
        return;
    }
}

promoted[58] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const 38_i8);
        _0 = &_1;
        return;
    }
}

promoted[59] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const 46_i8);
        _0 = &_1;
        return;
    }
}

promoted[60] in test_op_assigns: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const 12_usize);
        _0 = &_1;
        return;
    }
}

promoted[61] in test_op_assigns: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const 38_usize);
        _0 = &_1;
        return;
    }
}

promoted[62] in test_op_assigns: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const 12_usize);
        _0 = &_1;
        return;
    }
}

promoted[63] in test_op_assigns: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const 12_u64);
        _0 = &_1;
        return;
    }
}

promoted[64] in test_op_assigns: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const 38_u64);
        _0 = &_1;
        return;
    }
}

promoted[65] in test_op_assigns: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const 12_u64);
        _0 = &_1;
        return;
    }
}

promoted[66] in test_op_assigns: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const 12_u32);
        _0 = &_1;
        return;
    }
}

promoted[67] in test_op_assigns: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const 38_u32);
        _0 = &_1;
        return;
    }
}

promoted[68] in test_op_assigns: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const 12_u32);
        _0 = &_1;
        return;
    }
}

promoted[69] in test_op_assigns: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const 12_u16);
        _0 = &_1;
        return;
    }
}

promoted[70] in test_op_assigns: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const 38_u16);
        _0 = &_1;
        return;
    }
}

promoted[71] in test_op_assigns: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const 12_u16);
        _0 = &_1;
        return;
    }
}

promoted[72] in test_op_assigns: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const 12_u8);
        _0 = &_1;
        return;
    }
}

promoted[73] in test_op_assigns: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const 38_u8);
        _0 = &_1;
        return;
    }
}

promoted[74] in test_op_assigns: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const 12_u8);
        _0 = &_1;
        return;
    }
}

promoted[75] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const 12_isize);
        _0 = &_1;
        return;
    }
}

promoted[76] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const 38_isize);
        _0 = &_1;
        return;
    }
}

promoted[77] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const 12_isize);
        _0 = &_1;
        return;
    }
}

promoted[78] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const 12_i64);
        _0 = &_1;
        return;
    }
}

promoted[79] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const 38_i64);
        _0 = &_1;
        return;
    }
}

promoted[80] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const 12_i64);
        _0 = &_1;
        return;
    }
}

promoted[81] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const 12_i32);
        _0 = &_1;
        return;
    }
}

promoted[82] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const 38_i32);
        _0 = &_1;
        return;
    }
}

promoted[83] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const 12_i32);
        _0 = &_1;
        return;
    }
}

promoted[84] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const 12_i16);
        _0 = &_1;
        return;
    }
}

promoted[85] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const 38_i16);
        _0 = &_1;
        return;
    }
}

promoted[86] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const 12_i16);
        _0 = &_1;
        return;
    }
}

promoted[87] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const 12_i8);
        _0 = &_1;
        return;
    }
}

promoted[88] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const 38_i8);
        _0 = &_1;
        return;
    }
}

promoted[89] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const 12_i8);
        _0 = &_1;
        return;
    }
}

promoted[90] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const 0_isize);
        _0 = &_1;
        return;
    }
}

promoted[91] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const -1_isize);
        _0 = &_1;
        return;
    }
}

promoted[92] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const 0_isize);
        _0 = &_1;
        return;
    }
}

promoted[93] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const 0_i64);
        _0 = &_1;
        return;
    }
}

promoted[94] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const -1_i64);
        _0 = &_1;
        return;
    }
}

promoted[95] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const 0_i64);
        _0 = &_1;
        return;
    }
}

promoted[96] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const 0_i32);
        _0 = &_1;
        return;
    }
}

promoted[97] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const -1_i32);
        _0 = &_1;
        return;
    }
}

promoted[98] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const 0_i32);
        _0 = &_1;
        return;
    }
}

promoted[99] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const 0_i16);
        _0 = &_1;
        return;
    }
}

promoted[100] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const -1_i16);
        _0 = &_1;
        return;
    }
}

promoted[101] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const 0_i16);
        _0 = &_1;
        return;
    }
}

promoted[102] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const 0_i8);
        _0 = &_1;
        return;
    }
}

promoted[103] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const -1_i8);
        _0 = &_1;
        return;
    }
}

promoted[104] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const 0_i8);
        _0 = &_1;
        return;
    }
}

promoted[105] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const _);
        _0 = &_1;
        return;
    }
}

promoted[106] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const -1_isize);
        _0 = &_1;
        return;
    }
}

promoted[107] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const _);
        _0 = &_1;
        return;
    }
}

promoted[108] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const _);
        _0 = &_1;
        return;
    }
}

promoted[109] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const -1_i64);
        _0 = &_1;
        return;
    }
}

promoted[110] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const _);
        _0 = &_1;
        return;
    }
}

promoted[111] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const _);
        _0 = &_1;
        return;
    }
}

promoted[112] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const -1_i32);
        _0 = &_1;
        return;
    }
}

promoted[113] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const _);
        _0 = &_1;
        return;
    }
}

promoted[114] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const _);
        _0 = &_1;
        return;
    }
}

promoted[115] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const -1_i16);
        _0 = &_1;
        return;
    }
}

promoted[116] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const _);
        _0 = &_1;
        return;
    }
}

promoted[117] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const _);
        _0 = &_1;
        return;
    }
}

promoted[118] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const -1_i8);
        _0 = &_1;
        return;
    }
}

promoted[119] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const _);
        _0 = &_1;
        return;
    }
}

promoted[120] in test_op_assigns: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;
    let mut _2: usize;

    bb0: {
        _2 = Sub(const _, const 1_usize);
        _1 = Wrapping::<usize>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[121] in test_op_assigns: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const 2_usize);
        _0 = &_1;
        return;
    }
}

promoted[122] in test_op_assigns: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;
    let mut _2: usize;

    bb0: {
        _2 = Sub(const _, const 1_usize);
        _1 = Wrapping::<usize>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[123] in test_op_assigns: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;
    let mut _2: u64;

    bb0: {
        _2 = Sub(const _, const 1_u64);
        _1 = Wrapping::<u64>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[124] in test_op_assigns: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const 2_u64);
        _0 = &_1;
        return;
    }
}

promoted[125] in test_op_assigns: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;
    let mut _2: u64;

    bb0: {
        _2 = Sub(const _, const 1_u64);
        _1 = Wrapping::<u64>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[126] in test_op_assigns: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;
    let mut _2: u32;

    bb0: {
        _2 = Sub(const _, const 1_u32);
        _1 = Wrapping::<u32>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[127] in test_op_assigns: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const 2_u32);
        _0 = &_1;
        return;
    }
}

promoted[128] in test_op_assigns: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;
    let mut _2: u32;

    bb0: {
        _2 = Sub(const _, const 1_u32);
        _1 = Wrapping::<u32>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[129] in test_op_assigns: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;
    let mut _2: u16;

    bb0: {
        _2 = Sub(const _, const 1_u16);
        _1 = Wrapping::<u16>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[130] in test_op_assigns: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const 2_u16);
        _0 = &_1;
        return;
    }
}

promoted[131] in test_op_assigns: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;
    let mut _2: u16;

    bb0: {
        _2 = Sub(const _, const 1_u16);
        _1 = Wrapping::<u16>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[132] in test_op_assigns: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;
    let mut _2: u8;

    bb0: {
        _2 = Sub(const _, const 1_u8);
        _1 = Wrapping::<u8>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[133] in test_op_assigns: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const 2_u8);
        _0 = &_1;
        return;
    }
}

promoted[134] in test_op_assigns: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;
    let mut _2: u8;

    bb0: {
        _2 = Sub(const _, const 1_u8);
        _1 = Wrapping::<u8>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[135] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const -2_isize);
        _0 = &_1;
        return;
    }
}

promoted[136] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const 2_isize);
        _0 = &_1;
        return;
    }
}

promoted[137] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const -2_isize);
        _0 = &_1;
        return;
    }
}

promoted[138] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const -2_i64);
        _0 = &_1;
        return;
    }
}

promoted[139] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const 2_i64);
        _0 = &_1;
        return;
    }
}

promoted[140] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const -2_i64);
        _0 = &_1;
        return;
    }
}

promoted[141] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const -2_i32);
        _0 = &_1;
        return;
    }
}

promoted[142] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const 2_i32);
        _0 = &_1;
        return;
    }
}

promoted[143] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const -2_i32);
        _0 = &_1;
        return;
    }
}

promoted[144] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const -2_i16);
        _0 = &_1;
        return;
    }
}

promoted[145] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const 2_i16);
        _0 = &_1;
        return;
    }
}

promoted[146] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const -2_i16);
        _0 = &_1;
        return;
    }
}

promoted[147] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const -2_i8);
        _0 = &_1;
        return;
    }
}

promoted[148] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const 2_i8);
        _0 = &_1;
        return;
    }
}

promoted[149] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const -2_i8);
        _0 = &_1;
        return;
    }
}

promoted[150] in test_op_assigns: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const _);
        _0 = &_1;
        return;
    }
}

promoted[151] in test_op_assigns: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const 1_usize);
        _0 = &_1;
        return;
    }
}

promoted[152] in test_op_assigns: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const _);
        _0 = &_1;
        return;
    }
}

promoted[153] in test_op_assigns: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const _);
        _0 = &_1;
        return;
    }
}

promoted[154] in test_op_assigns: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const 1_u64);
        _0 = &_1;
        return;
    }
}

promoted[155] in test_op_assigns: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const _);
        _0 = &_1;
        return;
    }
}

promoted[156] in test_op_assigns: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const _);
        _0 = &_1;
        return;
    }
}

promoted[157] in test_op_assigns: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const 1_u32);
        _0 = &_1;
        return;
    }
}

promoted[158] in test_op_assigns: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const _);
        _0 = &_1;
        return;
    }
}

promoted[159] in test_op_assigns: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const _);
        _0 = &_1;
        return;
    }
}

promoted[160] in test_op_assigns: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const 1_u16);
        _0 = &_1;
        return;
    }
}

promoted[161] in test_op_assigns: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const _);
        _0 = &_1;
        return;
    }
}

promoted[162] in test_op_assigns: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const _);
        _0 = &_1;
        return;
    }
}

promoted[163] in test_op_assigns: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const 1_u8);
        _0 = &_1;
        return;
    }
}

promoted[164] in test_op_assigns: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const _);
        _0 = &_1;
        return;
    }
}

promoted[165] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const _);
        _0 = &_1;
        return;
    }
}

promoted[166] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const 1_isize);
        _0 = &_1;
        return;
    }
}

promoted[167] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const _);
        _0 = &_1;
        return;
    }
}

promoted[168] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const _);
        _0 = &_1;
        return;
    }
}

promoted[169] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const 1_i64);
        _0 = &_1;
        return;
    }
}

promoted[170] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const _);
        _0 = &_1;
        return;
    }
}

promoted[171] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const _);
        _0 = &_1;
        return;
    }
}

promoted[172] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const 1_i32);
        _0 = &_1;
        return;
    }
}

promoted[173] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const _);
        _0 = &_1;
        return;
    }
}

promoted[174] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const _);
        _0 = &_1;
        return;
    }
}

promoted[175] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const 1_i16);
        _0 = &_1;
        return;
    }
}

promoted[176] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const _);
        _0 = &_1;
        return;
    }
}

promoted[177] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const _);
        _0 = &_1;
        return;
    }
}

promoted[178] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const 1_i8);
        _0 = &_1;
        return;
    }
}

promoted[179] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const _);
        _0 = &_1;
        return;
    }
}

promoted[180] in test_op_assigns: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const _);
        _0 = &_1;
        return;
    }
}

promoted[181] in test_op_assigns: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const 1_usize);
        _0 = &_1;
        return;
    }
}

promoted[182] in test_op_assigns: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;

    bb0: {
        _1 = Wrapping::<usize>(const _);
        _0 = &_1;
        return;
    }
}

promoted[183] in test_op_assigns: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const _);
        _0 = &_1;
        return;
    }
}

promoted[184] in test_op_assigns: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const 1_u64);
        _0 = &_1;
        return;
    }
}

promoted[185] in test_op_assigns: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;

    bb0: {
        _1 = Wrapping::<u64>(const _);
        _0 = &_1;
        return;
    }
}

promoted[186] in test_op_assigns: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const _);
        _0 = &_1;
        return;
    }
}

promoted[187] in test_op_assigns: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const 1_u32);
        _0 = &_1;
        return;
    }
}

promoted[188] in test_op_assigns: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;

    bb0: {
        _1 = Wrapping::<u32>(const _);
        _0 = &_1;
        return;
    }
}

promoted[189] in test_op_assigns: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const _);
        _0 = &_1;
        return;
    }
}

promoted[190] in test_op_assigns: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const 1_u16);
        _0 = &_1;
        return;
    }
}

promoted[191] in test_op_assigns: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;

    bb0: {
        _1 = Wrapping::<u16>(const _);
        _0 = &_1;
        return;
    }
}

promoted[192] in test_op_assigns: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const _);
        _0 = &_1;
        return;
    }
}

promoted[193] in test_op_assigns: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const 1_u8);
        _0 = &_1;
        return;
    }
}

promoted[194] in test_op_assigns: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;

    bb0: {
        _1 = Wrapping::<u8>(const _);
        _0 = &_1;
        return;
    }
}

promoted[195] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const _);
        _0 = &_1;
        return;
    }
}

promoted[196] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const 1_isize);
        _0 = &_1;
        return;
    }
}

promoted[197] in test_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const _);
        _0 = &_1;
        return;
    }
}

promoted[198] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const _);
        _0 = &_1;
        return;
    }
}

promoted[199] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const 1_i64);
        _0 = &_1;
        return;
    }
}

promoted[200] in test_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const _);
        _0 = &_1;
        return;
    }
}

promoted[201] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const _);
        _0 = &_1;
        return;
    }
}

promoted[202] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const 1_i32);
        _0 = &_1;
        return;
    }
}

promoted[203] in test_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const _);
        _0 = &_1;
        return;
    }
}

promoted[204] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const _);
        _0 = &_1;
        return;
    }
}

promoted[205] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const 1_i16);
        _0 = &_1;
        return;
    }
}

promoted[206] in test_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const _);
        _0 = &_1;
        return;
    }
}

promoted[207] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const _);
        _0 = &_1;
        return;
    }
}

promoted[208] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const 1_i8);
        _0 = &_1;
        return;
    }
}

promoted[209] in test_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const _);
        _0 = &_1;
        return;
    }
}

fn test_sh_ops() -> () {
    let mut _0: ();
    let mut _1: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _2: &std::num::Wrapping<i8>;
    let _3: std::num::Wrapping<i8>;
    let mut _4: std::num::Wrapping<i8>;
    let mut _5: std::num::Wrapping<i8>;
    let mut _6: usize;
    let _7: &std::num::Wrapping<i8>;
    let _8: &std::num::Wrapping<i8>;
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _15: &std::num::Wrapping<i16>;
    let _16: std::num::Wrapping<i16>;
    let mut _17: std::num::Wrapping<i16>;
    let mut _18: std::num::Wrapping<i16>;
    let mut _19: usize;
    let _20: &std::num::Wrapping<i16>;
    let _21: &std::num::Wrapping<i16>;
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _28: &std::num::Wrapping<i32>;
    let _29: std::num::Wrapping<i32>;
    let mut _30: std::num::Wrapping<i32>;
    let mut _31: std::num::Wrapping<i32>;
    let mut _32: usize;
    let _33: &std::num::Wrapping<i32>;
    let _34: &std::num::Wrapping<i32>;
    let mut _35: bool;
    let mut _36: bool;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _41: &std::num::Wrapping<i64>;
    let _42: std::num::Wrapping<i64>;
    let mut _43: std::num::Wrapping<i64>;
    let mut _44: std::num::Wrapping<i64>;
    let mut _45: usize;
    let _46: &std::num::Wrapping<i64>;
    let _47: &std::num::Wrapping<i64>;
    let mut _48: bool;
    let mut _49: bool;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _54: &std::num::Wrapping<isize>;
    let _55: std::num::Wrapping<isize>;
    let mut _56: std::num::Wrapping<isize>;
    let mut _57: std::num::Wrapping<isize>;
    let mut _58: usize;
    let _59: &std::num::Wrapping<isize>;
    let _60: &std::num::Wrapping<isize>;
    let mut _61: bool;
    let mut _62: bool;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _66: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _67: &std::num::Wrapping<u8>;
    let _68: std::num::Wrapping<u8>;
    let mut _69: std::num::Wrapping<u8>;
    let mut _70: std::num::Wrapping<u8>;
    let mut _71: usize;
    let _72: &std::num::Wrapping<u8>;
    let _73: &std::num::Wrapping<u8>;
    let mut _74: bool;
    let mut _75: bool;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _79: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _80: &std::num::Wrapping<u16>;
    let _81: std::num::Wrapping<u16>;
    let mut _82: std::num::Wrapping<u16>;
    let mut _83: std::num::Wrapping<u16>;
    let mut _84: usize;
    let _85: &std::num::Wrapping<u16>;
    let _86: &std::num::Wrapping<u16>;
    let mut _87: bool;
    let mut _88: bool;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _92: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _93: &std::num::Wrapping<u32>;
    let _94: std::num::Wrapping<u32>;
    let mut _95: std::num::Wrapping<u32>;
    let mut _96: std::num::Wrapping<u32>;
    let mut _97: usize;
    let _98: &std::num::Wrapping<u32>;
    let _99: &std::num::Wrapping<u32>;
    let mut _100: bool;
    let mut _101: bool;
    let _103: !;
    let mut _104: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _105: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _106: &std::num::Wrapping<u64>;
    let _107: std::num::Wrapping<u64>;
    let mut _108: std::num::Wrapping<u64>;
    let mut _109: std::num::Wrapping<u64>;
    let mut _110: usize;
    let _111: &std::num::Wrapping<u64>;
    let _112: &std::num::Wrapping<u64>;
    let mut _113: bool;
    let mut _114: bool;
    let _116: !;
    let mut _117: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _118: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _119: &std::num::Wrapping<usize>;
    let _120: std::num::Wrapping<usize>;
    let mut _121: std::num::Wrapping<usize>;
    let mut _122: std::num::Wrapping<usize>;
    let mut _123: usize;
    let _124: &std::num::Wrapping<usize>;
    let _125: &std::num::Wrapping<usize>;
    let mut _126: bool;
    let mut _127: bool;
    let _129: !;
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _131: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _132: &std::num::Wrapping<i8>;
    let _133: std::num::Wrapping<i8>;
    let mut _134: std::num::Wrapping<i8>;
    let mut _135: std::num::Wrapping<i8>;
    let mut _136: usize;
    let mut _137: bool;
    let mut _138: bool;
    let mut _139: bool;
    let mut _140: bool;
    let _141: &std::num::Wrapping<i8>;
    let _142: &std::num::Wrapping<i8>;
    let mut _143: bool;
    let mut _144: bool;
    let _146: !;
    let mut _147: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _148: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _149: &std::num::Wrapping<i16>;
    let _150: std::num::Wrapping<i16>;
    let mut _151: std::num::Wrapping<i16>;
    let mut _152: std::num::Wrapping<i16>;
    let mut _153: usize;
    let mut _154: bool;
    let mut _155: bool;
    let mut _156: bool;
    let mut _157: bool;
    let _158: &std::num::Wrapping<i16>;
    let _159: &std::num::Wrapping<i16>;
    let mut _160: bool;
    let mut _161: bool;
    let _163: !;
    let mut _164: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _165: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _166: &std::num::Wrapping<i32>;
    let _167: std::num::Wrapping<i32>;
    let mut _168: std::num::Wrapping<i32>;
    let mut _169: std::num::Wrapping<i32>;
    let mut _170: usize;
    let mut _171: bool;
    let mut _172: bool;
    let mut _173: bool;
    let mut _174: bool;
    let _175: &std::num::Wrapping<i32>;
    let _176: &std::num::Wrapping<i32>;
    let mut _177: bool;
    let mut _178: bool;
    let _180: !;
    let mut _181: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _182: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _183: &std::num::Wrapping<i64>;
    let _184: std::num::Wrapping<i64>;
    let mut _185: std::num::Wrapping<i64>;
    let mut _186: std::num::Wrapping<i64>;
    let mut _187: usize;
    let mut _188: bool;
    let mut _189: bool;
    let mut _190: bool;
    let mut _191: bool;
    let _192: &std::num::Wrapping<i64>;
    let _193: &std::num::Wrapping<i64>;
    let mut _194: bool;
    let mut _195: bool;
    let _197: !;
    let mut _198: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _199: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _200: &std::num::Wrapping<isize>;
    let _201: std::num::Wrapping<isize>;
    let mut _202: std::num::Wrapping<isize>;
    let mut _203: std::num::Wrapping<isize>;
    let mut _204: usize;
    let mut _205: bool;
    let mut _206: bool;
    let mut _207: bool;
    let mut _208: bool;
    let _209: &std::num::Wrapping<isize>;
    let _210: &std::num::Wrapping<isize>;
    let mut _211: bool;
    let mut _212: bool;
    let _214: !;
    let mut _215: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _216: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _217: &std::num::Wrapping<u8>;
    let _218: std::num::Wrapping<u8>;
    let mut _219: std::num::Wrapping<u8>;
    let mut _220: std::num::Wrapping<u8>;
    let mut _221: usize;
    let mut _222: bool;
    let _223: &std::num::Wrapping<u8>;
    let _224: &std::num::Wrapping<u8>;
    let mut _225: bool;
    let mut _226: bool;
    let _228: !;
    let mut _229: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _230: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _231: &std::num::Wrapping<u16>;
    let _232: std::num::Wrapping<u16>;
    let mut _233: std::num::Wrapping<u16>;
    let mut _234: std::num::Wrapping<u16>;
    let mut _235: usize;
    let mut _236: bool;
    let _237: &std::num::Wrapping<u16>;
    let _238: &std::num::Wrapping<u16>;
    let mut _239: bool;
    let mut _240: bool;
    let _242: !;
    let mut _243: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _244: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _245: &std::num::Wrapping<u32>;
    let _246: std::num::Wrapping<u32>;
    let mut _247: std::num::Wrapping<u32>;
    let mut _248: std::num::Wrapping<u32>;
    let mut _249: usize;
    let mut _250: bool;
    let _251: &std::num::Wrapping<u32>;
    let _252: &std::num::Wrapping<u32>;
    let mut _253: bool;
    let mut _254: bool;
    let _256: !;
    let mut _257: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _258: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _259: &std::num::Wrapping<u64>;
    let _260: std::num::Wrapping<u64>;
    let mut _261: std::num::Wrapping<u64>;
    let mut _262: std::num::Wrapping<u64>;
    let mut _263: usize;
    let mut _264: bool;
    let _265: &std::num::Wrapping<u64>;
    let _266: &std::num::Wrapping<u64>;
    let mut _267: bool;
    let mut _268: bool;
    let _270: !;
    let mut _271: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _272: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _273: &std::num::Wrapping<usize>;
    let _274: std::num::Wrapping<usize>;
    let mut _275: std::num::Wrapping<usize>;
    let mut _276: std::num::Wrapping<usize>;
    let mut _277: usize;
    let mut _278: bool;
    let _279: &std::num::Wrapping<usize>;
    let _280: &std::num::Wrapping<usize>;
    let mut _281: bool;
    let mut _282: bool;
    let _284: !;
    let mut _285: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _286: &std::num::Wrapping<usize>;
    let mut _287: &std::num::Wrapping<u64>;
    let mut _288: &std::num::Wrapping<u32>;
    let mut _289: &std::num::Wrapping<u16>;
    let mut _290: &std::num::Wrapping<u8>;
    let mut _291: &std::num::Wrapping<isize>;
    let mut _292: &std::num::Wrapping<i64>;
    let mut _293: &std::num::Wrapping<i32>;
    let mut _294: &std::num::Wrapping<i16>;
    let mut _295: &std::num::Wrapping<i8>;
    let mut _296: &std::num::Wrapping<usize>;
    let mut _297: &std::num::Wrapping<u64>;
    let mut _298: &std::num::Wrapping<u32>;
    let mut _299: &std::num::Wrapping<u16>;
    let mut _300: &std::num::Wrapping<u8>;
    let mut _301: &std::num::Wrapping<isize>;
    let mut _302: &std::num::Wrapping<i64>;
    let mut _303: &std::num::Wrapping<i32>;
    let mut _304: &std::num::Wrapping<i16>;
    let mut _305: &std::num::Wrapping<i8>;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }
    scope 5 {
        debug left_val => _33;
        debug right_val => _34;
        let _37: core::panicking::AssertKind;
        scope 6 {
            debug kind => _37;
        }
    }
    scope 7 {
        debug left_val => _46;
        debug right_val => _47;
        let _50: core::panicking::AssertKind;
        scope 8 {
            debug kind => _50;
        }
    }
    scope 9 {
        debug left_val => _59;
        debug right_val => _60;
        let _63: core::panicking::AssertKind;
        scope 10 {
            debug kind => _63;
        }
    }
    scope 11 {
        debug left_val => _72;
        debug right_val => _73;
        let _76: core::panicking::AssertKind;
        scope 12 {
            debug kind => _76;
        }
    }
    scope 13 {
        debug left_val => _85;
        debug right_val => _86;
        let _89: core::panicking::AssertKind;
        scope 14 {
            debug kind => _89;
        }
    }
    scope 15 {
        debug left_val => _98;
        debug right_val => _99;
        let _102: core::panicking::AssertKind;
        scope 16 {
            debug kind => _102;
        }
    }
    scope 17 {
        debug left_val => _111;
        debug right_val => _112;
        let _115: core::panicking::AssertKind;
        scope 18 {
            debug kind => _115;
        }
    }
    scope 19 {
        debug left_val => _124;
        debug right_val => _125;
        let _128: core::panicking::AssertKind;
        scope 20 {
            debug kind => _128;
        }
    }
    scope 21 {
        debug left_val => _141;
        debug right_val => _142;
        let _145: core::panicking::AssertKind;
        scope 22 {
            debug kind => _145;
        }
    }
    scope 23 {
        debug left_val => _158;
        debug right_val => _159;
        let _162: core::panicking::AssertKind;
        scope 24 {
            debug kind => _162;
        }
    }
    scope 25 {
        debug left_val => _175;
        debug right_val => _176;
        let _179: core::panicking::AssertKind;
        scope 26 {
            debug kind => _179;
        }
    }
    scope 27 {
        debug left_val => _192;
        debug right_val => _193;
        let _196: core::panicking::AssertKind;
        scope 28 {
            debug kind => _196;
        }
    }
    scope 29 {
        debug left_val => _209;
        debug right_val => _210;
        let _213: core::panicking::AssertKind;
        scope 30 {
            debug kind => _213;
        }
    }
    scope 31 {
        debug left_val => _223;
        debug right_val => _224;
        let _227: core::panicking::AssertKind;
        scope 32 {
            debug kind => _227;
        }
    }
    scope 33 {
        debug left_val => _237;
        debug right_val => _238;
        let _241: core::panicking::AssertKind;
        scope 34 {
            debug kind => _241;
        }
    }
    scope 35 {
        debug left_val => _251;
        debug right_val => _252;
        let _255: core::panicking::AssertKind;
        scope 36 {
            debug kind => _255;
        }
    }
    scope 37 {
        debug left_val => _265;
        debug right_val => _266;
        let _269: core::panicking::AssertKind;
        scope 38 {
            debug kind => _269;
        }
    }
    scope 39 {
        debug left_val => _279;
        debug right_val => _280;
        let _283: core::panicking::AssertKind;
        scope 40 {
            debug kind => _283;
        }
    }

    bb0: {
        _5 = Wrapping::<i8>(const _);
        _6 = Add(const _, const 1_usize);
        _4 = <Wrapping<i8> as Shl<usize>>::shl(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = test::black_box::<Wrapping<i8>>(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = &_3;
        _305 = const _;
        _1 = (move _2, _305);
        _7 = (_1.0: &std::num::Wrapping<i8>);
        _8 = (_1.1: &std::num::Wrapping<i8>);
        _10 = <Wrapping<i8> as PartialEq>::eq(_7, _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _11, _7, _8, move _13) -> unwind continue;
    }

    bb5: {
        _18 = Wrapping::<i16>(const _);
        _19 = Add(const _, const 1_usize);
        _17 = <Wrapping<i16> as Shl<usize>>::shl(move _18, move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        _16 = test::black_box::<Wrapping<i16>>(move _17) -> [return: bb7, unwind continue];
    }

    bb7: {
        _15 = &_16;
        _304 = const _;
        _14 = (move _15, _304);
        _20 = (_14.0: &std::num::Wrapping<i16>);
        _21 = (_14.1: &std::num::Wrapping<i16>);
        _23 = <Wrapping<i16> as PartialEq>::eq(_20, _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _24, _20, _21, move _26) -> unwind continue;
    }

    bb10: {
        _31 = Wrapping::<i32>(const _);
        _32 = Add(const _, const 1_usize);
        _30 = <Wrapping<i32> as Shl<usize>>::shl(move _31, move _32) -> [return: bb11, unwind continue];
    }

    bb11: {
        _29 = test::black_box::<Wrapping<i32>>(move _30) -> [return: bb12, unwind continue];
    }

    bb12: {
        _28 = &_29;
        _303 = const _;
        _27 = (move _28, _303);
        _33 = (_27.0: &std::num::Wrapping<i32>);
        _34 = (_27.1: &std::num::Wrapping<i32>);
        _36 = <Wrapping<i32> as PartialEq>::eq(_33, _34) -> [return: bb13, unwind continue];
    }

    bb13: {
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _37, _33, _34, move _39) -> unwind continue;
    }

    bb15: {
        _44 = Wrapping::<i64>(const _);
        _45 = Add(const _, const 1_usize);
        _43 = <Wrapping<i64> as Shl<usize>>::shl(move _44, move _45) -> [return: bb16, unwind continue];
    }

    bb16: {
        _42 = test::black_box::<Wrapping<i64>>(move _43) -> [return: bb17, unwind continue];
    }

    bb17: {
        _41 = &_42;
        _302 = const _;
        _40 = (move _41, _302);
        _46 = (_40.0: &std::num::Wrapping<i64>);
        _47 = (_40.1: &std::num::Wrapping<i64>);
        _49 = <Wrapping<i64> as PartialEq>::eq(_46, _47) -> [return: bb18, unwind continue];
    }

    bb18: {
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _50, _46, _47, move _52) -> unwind continue;
    }

    bb20: {
        _57 = Wrapping::<isize>(const _);
        _58 = Add(const _, const 1_usize);
        _56 = <Wrapping<isize> as Shl<usize>>::shl(move _57, move _58) -> [return: bb21, unwind continue];
    }

    bb21: {
        _55 = test::black_box::<Wrapping<isize>>(move _56) -> [return: bb22, unwind continue];
    }

    bb22: {
        _54 = &_55;
        _301 = const _;
        _53 = (move _54, _301);
        _59 = (_53.0: &std::num::Wrapping<isize>);
        _60 = (_53.1: &std::num::Wrapping<isize>);
        _62 = <Wrapping<isize> as PartialEq>::eq(_59, _60) -> [return: bb23, unwind continue];
    }

    bb23: {
        _61 = Not(move _62);
        switchInt(move _61) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _63 = core::panicking::AssertKind::Eq;
        _65 = Option::<Arguments<'_>>::None;
        _64 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _63, _59, _60, move _65) -> unwind continue;
    }

    bb25: {
        _70 = Wrapping::<u8>(const _);
        _71 = Add(const _, const 1_usize);
        _69 = <Wrapping<u8> as Shl<usize>>::shl(move _70, move _71) -> [return: bb26, unwind continue];
    }

    bb26: {
        _68 = test::black_box::<Wrapping<u8>>(move _69) -> [return: bb27, unwind continue];
    }

    bb27: {
        _67 = &_68;
        _300 = const _;
        _66 = (move _67, _300);
        _72 = (_66.0: &std::num::Wrapping<u8>);
        _73 = (_66.1: &std::num::Wrapping<u8>);
        _75 = <Wrapping<u8> as PartialEq>::eq(_72, _73) -> [return: bb28, unwind continue];
    }

    bb28: {
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _76, _72, _73, move _78) -> unwind continue;
    }

    bb30: {
        _83 = Wrapping::<u16>(const _);
        _84 = Add(const _, const 1_usize);
        _82 = <Wrapping<u16> as Shl<usize>>::shl(move _83, move _84) -> [return: bb31, unwind continue];
    }

    bb31: {
        _81 = test::black_box::<Wrapping<u16>>(move _82) -> [return: bb32, unwind continue];
    }

    bb32: {
        _80 = &_81;
        _299 = const _;
        _79 = (move _80, _299);
        _85 = (_79.0: &std::num::Wrapping<u16>);
        _86 = (_79.1: &std::num::Wrapping<u16>);
        _88 = <Wrapping<u16> as PartialEq>::eq(_85, _86) -> [return: bb33, unwind continue];
    }

    bb33: {
        _87 = Not(move _88);
        switchInt(move _87) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _89, _85, _86, move _91) -> unwind continue;
    }

    bb35: {
        _96 = Wrapping::<u32>(const _);
        _97 = Add(const _, const 1_usize);
        _95 = <Wrapping<u32> as Shl<usize>>::shl(move _96, move _97) -> [return: bb36, unwind continue];
    }

    bb36: {
        _94 = test::black_box::<Wrapping<u32>>(move _95) -> [return: bb37, unwind continue];
    }

    bb37: {
        _93 = &_94;
        _298 = const _;
        _92 = (move _93, _298);
        _98 = (_92.0: &std::num::Wrapping<u32>);
        _99 = (_92.1: &std::num::Wrapping<u32>);
        _101 = <Wrapping<u32> as PartialEq>::eq(_98, _99) -> [return: bb38, unwind continue];
    }

    bb38: {
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _102 = core::panicking::AssertKind::Eq;
        _104 = Option::<Arguments<'_>>::None;
        _103 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _102, _98, _99, move _104) -> unwind continue;
    }

    bb40: {
        _109 = Wrapping::<u64>(const _);
        _110 = Add(const _, const 1_usize);
        _108 = <Wrapping<u64> as Shl<usize>>::shl(move _109, move _110) -> [return: bb41, unwind continue];
    }

    bb41: {
        _107 = test::black_box::<Wrapping<u64>>(move _108) -> [return: bb42, unwind continue];
    }

    bb42: {
        _106 = &_107;
        _297 = const _;
        _105 = (move _106, _297);
        _111 = (_105.0: &std::num::Wrapping<u64>);
        _112 = (_105.1: &std::num::Wrapping<u64>);
        _114 = <Wrapping<u64> as PartialEq>::eq(_111, _112) -> [return: bb43, unwind continue];
    }

    bb43: {
        _113 = Not(move _114);
        switchInt(move _113) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _115 = core::panicking::AssertKind::Eq;
        _117 = Option::<Arguments<'_>>::None;
        _116 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _115, _111, _112, move _117) -> unwind continue;
    }

    bb45: {
        _122 = Wrapping::<usize>(const _);
        _123 = Add(const _, const 1_usize);
        _121 = <Wrapping<usize> as Shl<usize>>::shl(move _122, move _123) -> [return: bb46, unwind continue];
    }

    bb46: {
        _120 = test::black_box::<Wrapping<usize>>(move _121) -> [return: bb47, unwind continue];
    }

    bb47: {
        _119 = &_120;
        _296 = const _;
        _118 = (move _119, _296);
        _124 = (_118.0: &std::num::Wrapping<usize>);
        _125 = (_118.1: &std::num::Wrapping<usize>);
        _127 = <Wrapping<usize> as PartialEq>::eq(_124, _125) -> [return: bb48, unwind continue];
    }

    bb48: {
        _126 = Not(move _127);
        switchInt(move _126) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        _128 = core::panicking::AssertKind::Eq;
        _130 = Option::<Arguments<'_>>::None;
        _129 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _128, _124, _125, move _130) -> unwind continue;
    }

    bb50: {
        _135 = Wrapping::<i8>(const _);
        _136 = Add(const _, const 1_usize);
        _134 = <Wrapping<i8> as Shr<usize>>::shr(move _135, move _136) -> [return: bb51, unwind continue];
    }

    bb51: {
        _133 = test::black_box::<Wrapping<i8>>(move _134) -> [return: bb52, unwind continue];
    }

    bb52: {
        _132 = &_133;
        _137 = Eq(const 2_i8, const 0_i8);
        assert(!move _137, "attempt to divide `{}` by zero", const _) -> [success: bb53, unwind continue];
    }

    bb53: {
        _138 = Eq(const 2_i8, const -1_i8);
        _139 = Eq(const _, const i8::MIN);
        _140 = BitAnd(move _138, move _139);
        assert(!move _140, "attempt to compute `{} / {}`, which would overflow", const _, const 2_i8) -> [success: bb54, unwind continue];
    }

    bb54: {
        _295 = const _;
        _131 = (move _132, _295);
        _141 = (_131.0: &std::num::Wrapping<i8>);
        _142 = (_131.1: &std::num::Wrapping<i8>);
        _144 = <Wrapping<i8> as PartialEq>::eq(_141, _142) -> [return: bb55, unwind continue];
    }

    bb55: {
        _143 = Not(move _144);
        switchInt(move _143) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _145 = core::panicking::AssertKind::Eq;
        _147 = Option::<Arguments<'_>>::None;
        _146 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _145, _141, _142, move _147) -> unwind continue;
    }

    bb57: {
        _152 = Wrapping::<i16>(const _);
        _153 = Add(const _, const 1_usize);
        _151 = <Wrapping<i16> as Shr<usize>>::shr(move _152, move _153) -> [return: bb58, unwind continue];
    }

    bb58: {
        _150 = test::black_box::<Wrapping<i16>>(move _151) -> [return: bb59, unwind continue];
    }

    bb59: {
        _149 = &_150;
        _154 = Eq(const 2_i16, const 0_i16);
        assert(!move _154, "attempt to divide `{}` by zero", const _) -> [success: bb60, unwind continue];
    }

    bb60: {
        _155 = Eq(const 2_i16, const -1_i16);
        _156 = Eq(const _, const i16::MIN);
        _157 = BitAnd(move _155, move _156);
        assert(!move _157, "attempt to compute `{} / {}`, which would overflow", const _, const 2_i16) -> [success: bb61, unwind continue];
    }

    bb61: {
        _294 = const _;
        _148 = (move _149, _294);
        _158 = (_148.0: &std::num::Wrapping<i16>);
        _159 = (_148.1: &std::num::Wrapping<i16>);
        _161 = <Wrapping<i16> as PartialEq>::eq(_158, _159) -> [return: bb62, unwind continue];
    }

    bb62: {
        _160 = Not(move _161);
        switchInt(move _160) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        _162 = core::panicking::AssertKind::Eq;
        _164 = Option::<Arguments<'_>>::None;
        _163 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _162, _158, _159, move _164) -> unwind continue;
    }

    bb64: {
        _169 = Wrapping::<i32>(const _);
        _170 = Add(const _, const 1_usize);
        _168 = <Wrapping<i32> as Shr<usize>>::shr(move _169, move _170) -> [return: bb65, unwind continue];
    }

    bb65: {
        _167 = test::black_box::<Wrapping<i32>>(move _168) -> [return: bb66, unwind continue];
    }

    bb66: {
        _166 = &_167;
        _171 = Eq(const 2_i32, const 0_i32);
        assert(!move _171, "attempt to divide `{}` by zero", const _) -> [success: bb67, unwind continue];
    }

    bb67: {
        _172 = Eq(const 2_i32, const -1_i32);
        _173 = Eq(const _, const i32::MIN);
        _174 = BitAnd(move _172, move _173);
        assert(!move _174, "attempt to compute `{} / {}`, which would overflow", const _, const 2_i32) -> [success: bb68, unwind continue];
    }

    bb68: {
        _293 = const _;
        _165 = (move _166, _293);
        _175 = (_165.0: &std::num::Wrapping<i32>);
        _176 = (_165.1: &std::num::Wrapping<i32>);
        _178 = <Wrapping<i32> as PartialEq>::eq(_175, _176) -> [return: bb69, unwind continue];
    }

    bb69: {
        _177 = Not(move _178);
        switchInt(move _177) -> [0: bb71, otherwise: bb70];
    }

    bb70: {
        _179 = core::panicking::AssertKind::Eq;
        _181 = Option::<Arguments<'_>>::None;
        _180 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _179, _175, _176, move _181) -> unwind continue;
    }

    bb71: {
        _186 = Wrapping::<i64>(const _);
        _187 = Add(const _, const 1_usize);
        _185 = <Wrapping<i64> as Shr<usize>>::shr(move _186, move _187) -> [return: bb72, unwind continue];
    }

    bb72: {
        _184 = test::black_box::<Wrapping<i64>>(move _185) -> [return: bb73, unwind continue];
    }

    bb73: {
        _183 = &_184;
        _188 = Eq(const 2_i64, const 0_i64);
        assert(!move _188, "attempt to divide `{}` by zero", const _) -> [success: bb74, unwind continue];
    }

    bb74: {
        _189 = Eq(const 2_i64, const -1_i64);
        _190 = Eq(const _, const i64::MIN);
        _191 = BitAnd(move _189, move _190);
        assert(!move _191, "attempt to compute `{} / {}`, which would overflow", const _, const 2_i64) -> [success: bb75, unwind continue];
    }

    bb75: {
        _292 = const _;
        _182 = (move _183, _292);
        _192 = (_182.0: &std::num::Wrapping<i64>);
        _193 = (_182.1: &std::num::Wrapping<i64>);
        _195 = <Wrapping<i64> as PartialEq>::eq(_192, _193) -> [return: bb76, unwind continue];
    }

    bb76: {
        _194 = Not(move _195);
        switchInt(move _194) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _196 = core::panicking::AssertKind::Eq;
        _198 = Option::<Arguments<'_>>::None;
        _197 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _196, _192, _193, move _198) -> unwind continue;
    }

    bb78: {
        _203 = Wrapping::<isize>(const _);
        _204 = Add(const _, const 1_usize);
        _202 = <Wrapping<isize> as Shr<usize>>::shr(move _203, move _204) -> [return: bb79, unwind continue];
    }

    bb79: {
        _201 = test::black_box::<Wrapping<isize>>(move _202) -> [return: bb80, unwind continue];
    }

    bb80: {
        _200 = &_201;
        _205 = Eq(const 2_isize, const 0_isize);
        assert(!move _205, "attempt to divide `{}` by zero", const _) -> [success: bb81, unwind continue];
    }

    bb81: {
        _206 = Eq(const 2_isize, const -1_isize);
        _207 = Eq(const _, const isize::MIN);
        _208 = BitAnd(move _206, move _207);
        assert(!move _208, "attempt to compute `{} / {}`, which would overflow", const _, const 2_isize) -> [success: bb82, unwind continue];
    }

    bb82: {
        _291 = const _;
        _199 = (move _200, _291);
        _209 = (_199.0: &std::num::Wrapping<isize>);
        _210 = (_199.1: &std::num::Wrapping<isize>);
        _212 = <Wrapping<isize> as PartialEq>::eq(_209, _210) -> [return: bb83, unwind continue];
    }

    bb83: {
        _211 = Not(move _212);
        switchInt(move _211) -> [0: bb85, otherwise: bb84];
    }

    bb84: {
        _213 = core::panicking::AssertKind::Eq;
        _215 = Option::<Arguments<'_>>::None;
        _214 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _213, _209, _210, move _215) -> unwind continue;
    }

    bb85: {
        _220 = Wrapping::<u8>(const _);
        _221 = Add(const _, const 1_usize);
        _219 = <Wrapping<u8> as Shr<usize>>::shr(move _220, move _221) -> [return: bb86, unwind continue];
    }

    bb86: {
        _218 = test::black_box::<Wrapping<u8>>(move _219) -> [return: bb87, unwind continue];
    }

    bb87: {
        _217 = &_218;
        _222 = Eq(const 2_u8, const 0_u8);
        assert(!move _222, "attempt to divide `{}` by zero", const _) -> [success: bb88, unwind continue];
    }

    bb88: {
        _290 = const _;
        _216 = (move _217, _290);
        _223 = (_216.0: &std::num::Wrapping<u8>);
        _224 = (_216.1: &std::num::Wrapping<u8>);
        _226 = <Wrapping<u8> as PartialEq>::eq(_223, _224) -> [return: bb89, unwind continue];
    }

    bb89: {
        _225 = Not(move _226);
        switchInt(move _225) -> [0: bb91, otherwise: bb90];
    }

    bb90: {
        _227 = core::panicking::AssertKind::Eq;
        _229 = Option::<Arguments<'_>>::None;
        _228 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _227, _223, _224, move _229) -> unwind continue;
    }

    bb91: {
        _234 = Wrapping::<u16>(const _);
        _235 = Add(const _, const 1_usize);
        _233 = <Wrapping<u16> as Shr<usize>>::shr(move _234, move _235) -> [return: bb92, unwind continue];
    }

    bb92: {
        _232 = test::black_box::<Wrapping<u16>>(move _233) -> [return: bb93, unwind continue];
    }

    bb93: {
        _231 = &_232;
        _236 = Eq(const 2_u16, const 0_u16);
        assert(!move _236, "attempt to divide `{}` by zero", const _) -> [success: bb94, unwind continue];
    }

    bb94: {
        _289 = const _;
        _230 = (move _231, _289);
        _237 = (_230.0: &std::num::Wrapping<u16>);
        _238 = (_230.1: &std::num::Wrapping<u16>);
        _240 = <Wrapping<u16> as PartialEq>::eq(_237, _238) -> [return: bb95, unwind continue];
    }

    bb95: {
        _239 = Not(move _240);
        switchInt(move _239) -> [0: bb97, otherwise: bb96];
    }

    bb96: {
        _241 = core::panicking::AssertKind::Eq;
        _243 = Option::<Arguments<'_>>::None;
        _242 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _241, _237, _238, move _243) -> unwind continue;
    }

    bb97: {
        _248 = Wrapping::<u32>(const _);
        _249 = Add(const _, const 1_usize);
        _247 = <Wrapping<u32> as Shr<usize>>::shr(move _248, move _249) -> [return: bb98, unwind continue];
    }

    bb98: {
        _246 = test::black_box::<Wrapping<u32>>(move _247) -> [return: bb99, unwind continue];
    }

    bb99: {
        _245 = &_246;
        _250 = Eq(const 2_u32, const 0_u32);
        assert(!move _250, "attempt to divide `{}` by zero", const _) -> [success: bb100, unwind continue];
    }

    bb100: {
        _288 = const _;
        _244 = (move _245, _288);
        _251 = (_244.0: &std::num::Wrapping<u32>);
        _252 = (_244.1: &std::num::Wrapping<u32>);
        _254 = <Wrapping<u32> as PartialEq>::eq(_251, _252) -> [return: bb101, unwind continue];
    }

    bb101: {
        _253 = Not(move _254);
        switchInt(move _253) -> [0: bb103, otherwise: bb102];
    }

    bb102: {
        _255 = core::panicking::AssertKind::Eq;
        _257 = Option::<Arguments<'_>>::None;
        _256 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _255, _251, _252, move _257) -> unwind continue;
    }

    bb103: {
        _262 = Wrapping::<u64>(const _);
        _263 = Add(const _, const 1_usize);
        _261 = <Wrapping<u64> as Shr<usize>>::shr(move _262, move _263) -> [return: bb104, unwind continue];
    }

    bb104: {
        _260 = test::black_box::<Wrapping<u64>>(move _261) -> [return: bb105, unwind continue];
    }

    bb105: {
        _259 = &_260;
        _264 = Eq(const 2_u64, const 0_u64);
        assert(!move _264, "attempt to divide `{}` by zero", const _) -> [success: bb106, unwind continue];
    }

    bb106: {
        _287 = const _;
        _258 = (move _259, _287);
        _265 = (_258.0: &std::num::Wrapping<u64>);
        _266 = (_258.1: &std::num::Wrapping<u64>);
        _268 = <Wrapping<u64> as PartialEq>::eq(_265, _266) -> [return: bb107, unwind continue];
    }

    bb107: {
        _267 = Not(move _268);
        switchInt(move _267) -> [0: bb109, otherwise: bb108];
    }

    bb108: {
        _269 = core::panicking::AssertKind::Eq;
        _271 = Option::<Arguments<'_>>::None;
        _270 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _269, _265, _266, move _271) -> unwind continue;
    }

    bb109: {
        _276 = Wrapping::<usize>(const _);
        _277 = Add(const _, const 1_usize);
        _275 = <Wrapping<usize> as Shr<usize>>::shr(move _276, move _277) -> [return: bb110, unwind continue];
    }

    bb110: {
        _274 = test::black_box::<Wrapping<usize>>(move _275) -> [return: bb111, unwind continue];
    }

    bb111: {
        _273 = &_274;
        _278 = Eq(const 2_usize, const 0_usize);
        assert(!move _278, "attempt to divide `{}` by zero", const _) -> [success: bb112, unwind continue];
    }

    bb112: {
        _286 = const _;
        _272 = (move _273, _286);
        _279 = (_272.0: &std::num::Wrapping<usize>);
        _280 = (_272.1: &std::num::Wrapping<usize>);
        _282 = <Wrapping<usize> as PartialEq>::eq(_279, _280) -> [return: bb113, unwind continue];
    }

    bb113: {
        _281 = Not(move _282);
        switchInt(move _281) -> [0: bb115, otherwise: bb114];
    }

    bb114: {
        _283 = core::panicking::AssertKind::Eq;
        _285 = Option::<Arguments<'_>>::None;
        _284 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _283, _279, _280, move _285) -> unwind continue;
    }

    bb115: {
        return;
    }
}

promoted[0] in test_sh_ops: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;
    let mut _2: usize;

    bb0: {
        _2 = Div(const _, const 2_usize);
        _1 = Wrapping::<usize>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[1] in test_sh_ops: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;
    let mut _2: u64;

    bb0: {
        _2 = Div(const _, const 2_u64);
        _1 = Wrapping::<u64>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[2] in test_sh_ops: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;
    let mut _2: u32;

    bb0: {
        _2 = Div(const _, const 2_u32);
        _1 = Wrapping::<u32>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[3] in test_sh_ops: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;
    let mut _2: u16;

    bb0: {
        _2 = Div(const _, const 2_u16);
        _1 = Wrapping::<u16>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[4] in test_sh_ops: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;
    let mut _2: u8;

    bb0: {
        _2 = Div(const _, const 2_u8);
        _1 = Wrapping::<u8>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[5] in test_sh_ops: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;
    let mut _2: isize;

    bb0: {
        _2 = Div(const _, const 2_isize);
        _1 = Wrapping::<isize>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[6] in test_sh_ops: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;
    let mut _2: i64;

    bb0: {
        _2 = Div(const _, const 2_i64);
        _1 = Wrapping::<i64>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[7] in test_sh_ops: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;
    let mut _2: i32;

    bb0: {
        _2 = Div(const _, const 2_i32);
        _1 = Wrapping::<i32>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[8] in test_sh_ops: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;
    let mut _2: i16;

    bb0: {
        _2 = Div(const _, const 2_i16);
        _1 = Wrapping::<i16>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[9] in test_sh_ops: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;
    let mut _2: i8;

    bb0: {
        _2 = Div(const _, const 2_i8);
        _1 = Wrapping::<i8>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[10] in test_sh_ops: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;
    let mut _2: usize;

    bb0: {
        _2 = Sub(const _, const 1_usize);
        _1 = Wrapping::<usize>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[11] in test_sh_ops: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;
    let mut _2: u64;

    bb0: {
        _2 = Sub(const _, const 1_u64);
        _1 = Wrapping::<u64>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[12] in test_sh_ops: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;
    let mut _2: u32;

    bb0: {
        _2 = Sub(const _, const 1_u32);
        _1 = Wrapping::<u32>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[13] in test_sh_ops: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;
    let mut _2: u16;

    bb0: {
        _2 = Sub(const _, const 1_u16);
        _1 = Wrapping::<u16>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[14] in test_sh_ops: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;
    let mut _2: u8;

    bb0: {
        _2 = Sub(const _, const 1_u8);
        _1 = Wrapping::<u8>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[15] in test_sh_ops: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const -2_isize);
        _0 = &_1;
        return;
    }
}

promoted[16] in test_sh_ops: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const -2_i64);
        _0 = &_1;
        return;
    }
}

promoted[17] in test_sh_ops: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const -2_i32);
        _0 = &_1;
        return;
    }
}

promoted[18] in test_sh_ops: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const -2_i16);
        _0 = &_1;
        return;
    }
}

promoted[19] in test_sh_ops: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const -2_i8);
        _0 = &_1;
        return;
    }
}

fn test_sh_op_assigns() -> () {
    let mut _0: ();
    let mut _1: std::num::Wrapping<i8>;
    let mut _2: std::num::Wrapping<i8>;
    let mut _3: std::num::Wrapping<i8>;
    let _4: ();
    let mut _5: &mut std::num::Wrapping<i8>;
    let mut _6: usize;
    let mut _7: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _8: &std::num::Wrapping<i8>;
    let _9: std::num::Wrapping<i8>;
    let mut _10: std::num::Wrapping<i8>;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: std::num::Wrapping<i16>;
    let mut _19: std::num::Wrapping<i16>;
    let mut _20: std::num::Wrapping<i16>;
    let _21: ();
    let mut _22: &mut std::num::Wrapping<i16>;
    let mut _23: usize;
    let mut _24: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _25: &std::num::Wrapping<i16>;
    let _26: std::num::Wrapping<i16>;
    let mut _27: std::num::Wrapping<i16>;
    let mut _30: bool;
    let mut _31: bool;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: std::num::Wrapping<i32>;
    let mut _36: std::num::Wrapping<i32>;
    let mut _37: std::num::Wrapping<i32>;
    let _38: ();
    let mut _39: &mut std::num::Wrapping<i32>;
    let mut _40: usize;
    let mut _41: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _42: &std::num::Wrapping<i32>;
    let _43: std::num::Wrapping<i32>;
    let mut _44: std::num::Wrapping<i32>;
    let mut _47: bool;
    let mut _48: bool;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: std::num::Wrapping<i64>;
    let mut _53: std::num::Wrapping<i64>;
    let mut _54: std::num::Wrapping<i64>;
    let _55: ();
    let mut _56: &mut std::num::Wrapping<i64>;
    let mut _57: usize;
    let mut _58: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _59: &std::num::Wrapping<i64>;
    let _60: std::num::Wrapping<i64>;
    let mut _61: std::num::Wrapping<i64>;
    let mut _64: bool;
    let mut _65: bool;
    let _67: !;
    let mut _68: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _69: std::num::Wrapping<isize>;
    let mut _70: std::num::Wrapping<isize>;
    let mut _71: std::num::Wrapping<isize>;
    let _72: ();
    let mut _73: &mut std::num::Wrapping<isize>;
    let mut _74: usize;
    let mut _75: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _76: &std::num::Wrapping<isize>;
    let _77: std::num::Wrapping<isize>;
    let mut _78: std::num::Wrapping<isize>;
    let mut _81: bool;
    let mut _82: bool;
    let _84: !;
    let mut _85: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _86: std::num::Wrapping<u8>;
    let mut _87: std::num::Wrapping<u8>;
    let mut _88: std::num::Wrapping<u8>;
    let _89: ();
    let mut _90: &mut std::num::Wrapping<u8>;
    let mut _91: usize;
    let mut _92: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _93: &std::num::Wrapping<u8>;
    let _94: std::num::Wrapping<u8>;
    let mut _95: std::num::Wrapping<u8>;
    let mut _98: bool;
    let mut _99: bool;
    let _101: !;
    let mut _102: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _103: std::num::Wrapping<u16>;
    let mut _104: std::num::Wrapping<u16>;
    let mut _105: std::num::Wrapping<u16>;
    let _106: ();
    let mut _107: &mut std::num::Wrapping<u16>;
    let mut _108: usize;
    let mut _109: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _110: &std::num::Wrapping<u16>;
    let _111: std::num::Wrapping<u16>;
    let mut _112: std::num::Wrapping<u16>;
    let mut _115: bool;
    let mut _116: bool;
    let _118: !;
    let mut _119: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _120: std::num::Wrapping<u32>;
    let mut _121: std::num::Wrapping<u32>;
    let mut _122: std::num::Wrapping<u32>;
    let _123: ();
    let mut _124: &mut std::num::Wrapping<u32>;
    let mut _125: usize;
    let mut _126: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _127: &std::num::Wrapping<u32>;
    let _128: std::num::Wrapping<u32>;
    let mut _129: std::num::Wrapping<u32>;
    let mut _132: bool;
    let mut _133: bool;
    let _135: !;
    let mut _136: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _137: std::num::Wrapping<u64>;
    let mut _138: std::num::Wrapping<u64>;
    let mut _139: std::num::Wrapping<u64>;
    let _140: ();
    let mut _141: &mut std::num::Wrapping<u64>;
    let mut _142: usize;
    let mut _143: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _144: &std::num::Wrapping<u64>;
    let _145: std::num::Wrapping<u64>;
    let mut _146: std::num::Wrapping<u64>;
    let mut _149: bool;
    let mut _150: bool;
    let _152: !;
    let mut _153: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _154: std::num::Wrapping<usize>;
    let mut _155: std::num::Wrapping<usize>;
    let mut _156: std::num::Wrapping<usize>;
    let _157: ();
    let mut _158: &mut std::num::Wrapping<usize>;
    let mut _159: usize;
    let mut _160: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _161: &std::num::Wrapping<usize>;
    let _162: std::num::Wrapping<usize>;
    let mut _163: std::num::Wrapping<usize>;
    let mut _166: bool;
    let mut _167: bool;
    let _169: !;
    let mut _170: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _171: std::num::Wrapping<i8>;
    let mut _172: std::num::Wrapping<i8>;
    let mut _173: std::num::Wrapping<i8>;
    let _174: ();
    let mut _175: &mut std::num::Wrapping<i8>;
    let mut _176: usize;
    let mut _177: (&std::num::Wrapping<i8>, &std::num::Wrapping<i8>);
    let mut _178: &std::num::Wrapping<i8>;
    let _179: std::num::Wrapping<i8>;
    let mut _180: std::num::Wrapping<i8>;
    let mut _181: bool;
    let mut _182: bool;
    let mut _183: bool;
    let mut _184: bool;
    let mut _187: bool;
    let mut _188: bool;
    let _190: !;
    let mut _191: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _192: std::num::Wrapping<i16>;
    let mut _193: std::num::Wrapping<i16>;
    let mut _194: std::num::Wrapping<i16>;
    let _195: ();
    let mut _196: &mut std::num::Wrapping<i16>;
    let mut _197: usize;
    let mut _198: (&std::num::Wrapping<i16>, &std::num::Wrapping<i16>);
    let mut _199: &std::num::Wrapping<i16>;
    let _200: std::num::Wrapping<i16>;
    let mut _201: std::num::Wrapping<i16>;
    let mut _202: bool;
    let mut _203: bool;
    let mut _204: bool;
    let mut _205: bool;
    let mut _208: bool;
    let mut _209: bool;
    let _211: !;
    let mut _212: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _213: std::num::Wrapping<i32>;
    let mut _214: std::num::Wrapping<i32>;
    let mut _215: std::num::Wrapping<i32>;
    let _216: ();
    let mut _217: &mut std::num::Wrapping<i32>;
    let mut _218: usize;
    let mut _219: (&std::num::Wrapping<i32>, &std::num::Wrapping<i32>);
    let mut _220: &std::num::Wrapping<i32>;
    let _221: std::num::Wrapping<i32>;
    let mut _222: std::num::Wrapping<i32>;
    let mut _223: bool;
    let mut _224: bool;
    let mut _225: bool;
    let mut _226: bool;
    let mut _229: bool;
    let mut _230: bool;
    let _232: !;
    let mut _233: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _234: std::num::Wrapping<i64>;
    let mut _235: std::num::Wrapping<i64>;
    let mut _236: std::num::Wrapping<i64>;
    let _237: ();
    let mut _238: &mut std::num::Wrapping<i64>;
    let mut _239: usize;
    let mut _240: (&std::num::Wrapping<i64>, &std::num::Wrapping<i64>);
    let mut _241: &std::num::Wrapping<i64>;
    let _242: std::num::Wrapping<i64>;
    let mut _243: std::num::Wrapping<i64>;
    let mut _244: bool;
    let mut _245: bool;
    let mut _246: bool;
    let mut _247: bool;
    let mut _250: bool;
    let mut _251: bool;
    let _253: !;
    let mut _254: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _255: std::num::Wrapping<isize>;
    let mut _256: std::num::Wrapping<isize>;
    let mut _257: std::num::Wrapping<isize>;
    let _258: ();
    let mut _259: &mut std::num::Wrapping<isize>;
    let mut _260: usize;
    let mut _261: (&std::num::Wrapping<isize>, &std::num::Wrapping<isize>);
    let mut _262: &std::num::Wrapping<isize>;
    let _263: std::num::Wrapping<isize>;
    let mut _264: std::num::Wrapping<isize>;
    let mut _265: bool;
    let mut _266: bool;
    let mut _267: bool;
    let mut _268: bool;
    let mut _271: bool;
    let mut _272: bool;
    let _274: !;
    let mut _275: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _276: std::num::Wrapping<u8>;
    let mut _277: std::num::Wrapping<u8>;
    let mut _278: std::num::Wrapping<u8>;
    let _279: ();
    let mut _280: &mut std::num::Wrapping<u8>;
    let mut _281: usize;
    let mut _282: (&std::num::Wrapping<u8>, &std::num::Wrapping<u8>);
    let mut _283: &std::num::Wrapping<u8>;
    let _284: std::num::Wrapping<u8>;
    let mut _285: std::num::Wrapping<u8>;
    let mut _286: bool;
    let mut _289: bool;
    let mut _290: bool;
    let _292: !;
    let mut _293: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _294: std::num::Wrapping<u16>;
    let mut _295: std::num::Wrapping<u16>;
    let mut _296: std::num::Wrapping<u16>;
    let _297: ();
    let mut _298: &mut std::num::Wrapping<u16>;
    let mut _299: usize;
    let mut _300: (&std::num::Wrapping<u16>, &std::num::Wrapping<u16>);
    let mut _301: &std::num::Wrapping<u16>;
    let _302: std::num::Wrapping<u16>;
    let mut _303: std::num::Wrapping<u16>;
    let mut _304: bool;
    let mut _307: bool;
    let mut _308: bool;
    let _310: !;
    let mut _311: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _312: std::num::Wrapping<u32>;
    let mut _313: std::num::Wrapping<u32>;
    let mut _314: std::num::Wrapping<u32>;
    let _315: ();
    let mut _316: &mut std::num::Wrapping<u32>;
    let mut _317: usize;
    let mut _318: (&std::num::Wrapping<u32>, &std::num::Wrapping<u32>);
    let mut _319: &std::num::Wrapping<u32>;
    let _320: std::num::Wrapping<u32>;
    let mut _321: std::num::Wrapping<u32>;
    let mut _322: bool;
    let mut _325: bool;
    let mut _326: bool;
    let _328: !;
    let mut _329: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _330: std::num::Wrapping<u64>;
    let mut _331: std::num::Wrapping<u64>;
    let mut _332: std::num::Wrapping<u64>;
    let _333: ();
    let mut _334: &mut std::num::Wrapping<u64>;
    let mut _335: usize;
    let mut _336: (&std::num::Wrapping<u64>, &std::num::Wrapping<u64>);
    let mut _337: &std::num::Wrapping<u64>;
    let _338: std::num::Wrapping<u64>;
    let mut _339: std::num::Wrapping<u64>;
    let mut _340: bool;
    let mut _343: bool;
    let mut _344: bool;
    let _346: !;
    let mut _347: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _348: std::num::Wrapping<usize>;
    let mut _349: std::num::Wrapping<usize>;
    let mut _350: std::num::Wrapping<usize>;
    let _351: ();
    let mut _352: &mut std::num::Wrapping<usize>;
    let mut _353: usize;
    let mut _354: (&std::num::Wrapping<usize>, &std::num::Wrapping<usize>);
    let mut _355: &std::num::Wrapping<usize>;
    let _356: std::num::Wrapping<usize>;
    let mut _357: std::num::Wrapping<usize>;
    let mut _358: bool;
    let mut _361: bool;
    let mut _362: bool;
    let _364: !;
    let mut _365: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug tmp => _1;
        let _11: &std::num::Wrapping<i8>;
        let _12: &std::num::Wrapping<i8>;
        let mut _385: &std::num::Wrapping<i8>;
        scope 2 {
            debug left_val => _11;
            debug right_val => _12;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
    }
    scope 4 {
        debug tmp => _18;
        let _28: &std::num::Wrapping<i16>;
        let _29: &std::num::Wrapping<i16>;
        let mut _384: &std::num::Wrapping<i16>;
        scope 5 {
            debug left_val => _28;
            debug right_val => _29;
            let _32: core::panicking::AssertKind;
            scope 6 {
                debug kind => _32;
            }
        }
    }
    scope 7 {
        debug tmp => _35;
        let _45: &std::num::Wrapping<i32>;
        let _46: &std::num::Wrapping<i32>;
        let mut _383: &std::num::Wrapping<i32>;
        scope 8 {
            debug left_val => _45;
            debug right_val => _46;
            let _49: core::panicking::AssertKind;
            scope 9 {
                debug kind => _49;
            }
        }
    }
    scope 10 {
        debug tmp => _52;
        let _62: &std::num::Wrapping<i64>;
        let _63: &std::num::Wrapping<i64>;
        let mut _382: &std::num::Wrapping<i64>;
        scope 11 {
            debug left_val => _62;
            debug right_val => _63;
            let _66: core::panicking::AssertKind;
            scope 12 {
                debug kind => _66;
            }
        }
    }
    scope 13 {
        debug tmp => _69;
        let _79: &std::num::Wrapping<isize>;
        let _80: &std::num::Wrapping<isize>;
        let mut _381: &std::num::Wrapping<isize>;
        scope 14 {
            debug left_val => _79;
            debug right_val => _80;
            let _83: core::panicking::AssertKind;
            scope 15 {
                debug kind => _83;
            }
        }
    }
    scope 16 {
        debug tmp => _86;
        let _96: &std::num::Wrapping<u8>;
        let _97: &std::num::Wrapping<u8>;
        let mut _380: &std::num::Wrapping<u8>;
        scope 17 {
            debug left_val => _96;
            debug right_val => _97;
            let _100: core::panicking::AssertKind;
            scope 18 {
                debug kind => _100;
            }
        }
    }
    scope 19 {
        debug tmp => _103;
        let _113: &std::num::Wrapping<u16>;
        let _114: &std::num::Wrapping<u16>;
        let mut _379: &std::num::Wrapping<u16>;
        scope 20 {
            debug left_val => _113;
            debug right_val => _114;
            let _117: core::panicking::AssertKind;
            scope 21 {
                debug kind => _117;
            }
        }
    }
    scope 22 {
        debug tmp => _120;
        let _130: &std::num::Wrapping<u32>;
        let _131: &std::num::Wrapping<u32>;
        let mut _378: &std::num::Wrapping<u32>;
        scope 23 {
            debug left_val => _130;
            debug right_val => _131;
            let _134: core::panicking::AssertKind;
            scope 24 {
                debug kind => _134;
            }
        }
    }
    scope 25 {
        debug tmp => _137;
        let _147: &std::num::Wrapping<u64>;
        let _148: &std::num::Wrapping<u64>;
        let mut _377: &std::num::Wrapping<u64>;
        scope 26 {
            debug left_val => _147;
            debug right_val => _148;
            let _151: core::panicking::AssertKind;
            scope 27 {
                debug kind => _151;
            }
        }
    }
    scope 28 {
        debug tmp => _154;
        let _164: &std::num::Wrapping<usize>;
        let _165: &std::num::Wrapping<usize>;
        let mut _376: &std::num::Wrapping<usize>;
        scope 29 {
            debug left_val => _164;
            debug right_val => _165;
            let _168: core::panicking::AssertKind;
            scope 30 {
                debug kind => _168;
            }
        }
    }
    scope 31 {
        debug tmp => _171;
        let _185: &std::num::Wrapping<i8>;
        let _186: &std::num::Wrapping<i8>;
        let mut _375: &std::num::Wrapping<i8>;
        scope 32 {
            debug left_val => _185;
            debug right_val => _186;
            let _189: core::panicking::AssertKind;
            scope 33 {
                debug kind => _189;
            }
        }
    }
    scope 34 {
        debug tmp => _192;
        let _206: &std::num::Wrapping<i16>;
        let _207: &std::num::Wrapping<i16>;
        let mut _374: &std::num::Wrapping<i16>;
        scope 35 {
            debug left_val => _206;
            debug right_val => _207;
            let _210: core::panicking::AssertKind;
            scope 36 {
                debug kind => _210;
            }
        }
    }
    scope 37 {
        debug tmp => _213;
        let _227: &std::num::Wrapping<i32>;
        let _228: &std::num::Wrapping<i32>;
        let mut _373: &std::num::Wrapping<i32>;
        scope 38 {
            debug left_val => _227;
            debug right_val => _228;
            let _231: core::panicking::AssertKind;
            scope 39 {
                debug kind => _231;
            }
        }
    }
    scope 40 {
        debug tmp => _234;
        let _248: &std::num::Wrapping<i64>;
        let _249: &std::num::Wrapping<i64>;
        let mut _372: &std::num::Wrapping<i64>;
        scope 41 {
            debug left_val => _248;
            debug right_val => _249;
            let _252: core::panicking::AssertKind;
            scope 42 {
                debug kind => _252;
            }
        }
    }
    scope 43 {
        debug tmp => _255;
        let _269: &std::num::Wrapping<isize>;
        let _270: &std::num::Wrapping<isize>;
        let mut _371: &std::num::Wrapping<isize>;
        scope 44 {
            debug left_val => _269;
            debug right_val => _270;
            let _273: core::panicking::AssertKind;
            scope 45 {
                debug kind => _273;
            }
        }
    }
    scope 46 {
        debug tmp => _276;
        let _287: &std::num::Wrapping<u8>;
        let _288: &std::num::Wrapping<u8>;
        let mut _370: &std::num::Wrapping<u8>;
        scope 47 {
            debug left_val => _287;
            debug right_val => _288;
            let _291: core::panicking::AssertKind;
            scope 48 {
                debug kind => _291;
            }
        }
    }
    scope 49 {
        debug tmp => _294;
        let _305: &std::num::Wrapping<u16>;
        let _306: &std::num::Wrapping<u16>;
        let mut _369: &std::num::Wrapping<u16>;
        scope 50 {
            debug left_val => _305;
            debug right_val => _306;
            let _309: core::panicking::AssertKind;
            scope 51 {
                debug kind => _309;
            }
        }
    }
    scope 52 {
        debug tmp => _312;
        let _323: &std::num::Wrapping<u32>;
        let _324: &std::num::Wrapping<u32>;
        let mut _368: &std::num::Wrapping<u32>;
        scope 53 {
            debug left_val => _323;
            debug right_val => _324;
            let _327: core::panicking::AssertKind;
            scope 54 {
                debug kind => _327;
            }
        }
    }
    scope 55 {
        debug tmp => _330;
        let _341: &std::num::Wrapping<u64>;
        let _342: &std::num::Wrapping<u64>;
        let mut _367: &std::num::Wrapping<u64>;
        scope 56 {
            debug left_val => _341;
            debug right_val => _342;
            let _345: core::panicking::AssertKind;
            scope 57 {
                debug kind => _345;
            }
        }
    }
    scope 58 {
        debug tmp => _348;
        let _359: &std::num::Wrapping<usize>;
        let _360: &std::num::Wrapping<usize>;
        let mut _366: &std::num::Wrapping<usize>;
        scope 59 {
            debug left_val => _359;
            debug right_val => _360;
            let _363: core::panicking::AssertKind;
            scope 60 {
                debug kind => _363;
            }
        }
    }

    bb0: {
        _1 = Wrapping::<i8>(const _);
        _3 = _1;
        _2 = test::black_box::<Wrapping<i8>>(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = move _2;
        _5 = &mut _1;
        _6 = Add(const _, const 1_usize);
        _4 = <Wrapping<i8> as ShlAssign<usize>>::shl_assign(move _5, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = _1;
        _9 = test::black_box::<Wrapping<i8>>(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = &_9;
        _385 = const _;
        _7 = (move _8, _385);
        _11 = (_7.0: &std::num::Wrapping<i8>);
        _12 = (_7.1: &std::num::Wrapping<i8>);
        _14 = <Wrapping<i8> as PartialEq>::eq(_11, _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _15, _11, _12, move _17) -> unwind continue;
    }

    bb6: {
        _18 = Wrapping::<i16>(const _);
        _20 = _18;
        _19 = test::black_box::<Wrapping<i16>>(move _20) -> [return: bb7, unwind continue];
    }

    bb7: {
        _18 = move _19;
        _22 = &mut _18;
        _23 = Add(const _, const 1_usize);
        _21 = <Wrapping<i16> as ShlAssign<usize>>::shl_assign(move _22, move _23) -> [return: bb8, unwind continue];
    }

    bb8: {
        _27 = _18;
        _26 = test::black_box::<Wrapping<i16>>(move _27) -> [return: bb9, unwind continue];
    }

    bb9: {
        _25 = &_26;
        _384 = const _;
        _24 = (move _25, _384);
        _28 = (_24.0: &std::num::Wrapping<i16>);
        _29 = (_24.1: &std::num::Wrapping<i16>);
        _31 = <Wrapping<i16> as PartialEq>::eq(_28, _29) -> [return: bb10, unwind continue];
    }

    bb10: {
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _32, _28, _29, move _34) -> unwind continue;
    }

    bb12: {
        _35 = Wrapping::<i32>(const _);
        _37 = _35;
        _36 = test::black_box::<Wrapping<i32>>(move _37) -> [return: bb13, unwind continue];
    }

    bb13: {
        _35 = move _36;
        _39 = &mut _35;
        _40 = Add(const _, const 1_usize);
        _38 = <Wrapping<i32> as ShlAssign<usize>>::shl_assign(move _39, move _40) -> [return: bb14, unwind continue];
    }

    bb14: {
        _44 = _35;
        _43 = test::black_box::<Wrapping<i32>>(move _44) -> [return: bb15, unwind continue];
    }

    bb15: {
        _42 = &_43;
        _383 = const _;
        _41 = (move _42, _383);
        _45 = (_41.0: &std::num::Wrapping<i32>);
        _46 = (_41.1: &std::num::Wrapping<i32>);
        _48 = <Wrapping<i32> as PartialEq>::eq(_45, _46) -> [return: bb16, unwind continue];
    }

    bb16: {
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _49, _45, _46, move _51) -> unwind continue;
    }

    bb18: {
        _52 = Wrapping::<i64>(const _);
        _54 = _52;
        _53 = test::black_box::<Wrapping<i64>>(move _54) -> [return: bb19, unwind continue];
    }

    bb19: {
        _52 = move _53;
        _56 = &mut _52;
        _57 = Add(const _, const 1_usize);
        _55 = <Wrapping<i64> as ShlAssign<usize>>::shl_assign(move _56, move _57) -> [return: bb20, unwind continue];
    }

    bb20: {
        _61 = _52;
        _60 = test::black_box::<Wrapping<i64>>(move _61) -> [return: bb21, unwind continue];
    }

    bb21: {
        _59 = &_60;
        _382 = const _;
        _58 = (move _59, _382);
        _62 = (_58.0: &std::num::Wrapping<i64>);
        _63 = (_58.1: &std::num::Wrapping<i64>);
        _65 = <Wrapping<i64> as PartialEq>::eq(_62, _63) -> [return: bb22, unwind continue];
    }

    bb22: {
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _66 = core::panicking::AssertKind::Eq;
        _68 = Option::<Arguments<'_>>::None;
        _67 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _66, _62, _63, move _68) -> unwind continue;
    }

    bb24: {
        _69 = Wrapping::<isize>(const _);
        _71 = _69;
        _70 = test::black_box::<Wrapping<isize>>(move _71) -> [return: bb25, unwind continue];
    }

    bb25: {
        _69 = move _70;
        _73 = &mut _69;
        _74 = Add(const _, const 1_usize);
        _72 = <Wrapping<isize> as ShlAssign<usize>>::shl_assign(move _73, move _74) -> [return: bb26, unwind continue];
    }

    bb26: {
        _78 = _69;
        _77 = test::black_box::<Wrapping<isize>>(move _78) -> [return: bb27, unwind continue];
    }

    bb27: {
        _76 = &_77;
        _381 = const _;
        _75 = (move _76, _381);
        _79 = (_75.0: &std::num::Wrapping<isize>);
        _80 = (_75.1: &std::num::Wrapping<isize>);
        _82 = <Wrapping<isize> as PartialEq>::eq(_79, _80) -> [return: bb28, unwind continue];
    }

    bb28: {
        _81 = Not(move _82);
        switchInt(move _81) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _83 = core::panicking::AssertKind::Eq;
        _85 = Option::<Arguments<'_>>::None;
        _84 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _83, _79, _80, move _85) -> unwind continue;
    }

    bb30: {
        _86 = Wrapping::<u8>(const _);
        _88 = _86;
        _87 = test::black_box::<Wrapping<u8>>(move _88) -> [return: bb31, unwind continue];
    }

    bb31: {
        _86 = move _87;
        _90 = &mut _86;
        _91 = Add(const _, const 1_usize);
        _89 = <Wrapping<u8> as ShlAssign<usize>>::shl_assign(move _90, move _91) -> [return: bb32, unwind continue];
    }

    bb32: {
        _95 = _86;
        _94 = test::black_box::<Wrapping<u8>>(move _95) -> [return: bb33, unwind continue];
    }

    bb33: {
        _93 = &_94;
        _380 = const _;
        _92 = (move _93, _380);
        _96 = (_92.0: &std::num::Wrapping<u8>);
        _97 = (_92.1: &std::num::Wrapping<u8>);
        _99 = <Wrapping<u8> as PartialEq>::eq(_96, _97) -> [return: bb34, unwind continue];
    }

    bb34: {
        _98 = Not(move _99);
        switchInt(move _98) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _100 = core::panicking::AssertKind::Eq;
        _102 = Option::<Arguments<'_>>::None;
        _101 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _100, _96, _97, move _102) -> unwind continue;
    }

    bb36: {
        _103 = Wrapping::<u16>(const _);
        _105 = _103;
        _104 = test::black_box::<Wrapping<u16>>(move _105) -> [return: bb37, unwind continue];
    }

    bb37: {
        _103 = move _104;
        _107 = &mut _103;
        _108 = Add(const _, const 1_usize);
        _106 = <Wrapping<u16> as ShlAssign<usize>>::shl_assign(move _107, move _108) -> [return: bb38, unwind continue];
    }

    bb38: {
        _112 = _103;
        _111 = test::black_box::<Wrapping<u16>>(move _112) -> [return: bb39, unwind continue];
    }

    bb39: {
        _110 = &_111;
        _379 = const _;
        _109 = (move _110, _379);
        _113 = (_109.0: &std::num::Wrapping<u16>);
        _114 = (_109.1: &std::num::Wrapping<u16>);
        _116 = <Wrapping<u16> as PartialEq>::eq(_113, _114) -> [return: bb40, unwind continue];
    }

    bb40: {
        _115 = Not(move _116);
        switchInt(move _115) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _117 = core::panicking::AssertKind::Eq;
        _119 = Option::<Arguments<'_>>::None;
        _118 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _117, _113, _114, move _119) -> unwind continue;
    }

    bb42: {
        _120 = Wrapping::<u32>(const _);
        _122 = _120;
        _121 = test::black_box::<Wrapping<u32>>(move _122) -> [return: bb43, unwind continue];
    }

    bb43: {
        _120 = move _121;
        _124 = &mut _120;
        _125 = Add(const _, const 1_usize);
        _123 = <Wrapping<u32> as ShlAssign<usize>>::shl_assign(move _124, move _125) -> [return: bb44, unwind continue];
    }

    bb44: {
        _129 = _120;
        _128 = test::black_box::<Wrapping<u32>>(move _129) -> [return: bb45, unwind continue];
    }

    bb45: {
        _127 = &_128;
        _378 = const _;
        _126 = (move _127, _378);
        _130 = (_126.0: &std::num::Wrapping<u32>);
        _131 = (_126.1: &std::num::Wrapping<u32>);
        _133 = <Wrapping<u32> as PartialEq>::eq(_130, _131) -> [return: bb46, unwind continue];
    }

    bb46: {
        _132 = Not(move _133);
        switchInt(move _132) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _134 = core::panicking::AssertKind::Eq;
        _136 = Option::<Arguments<'_>>::None;
        _135 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _134, _130, _131, move _136) -> unwind continue;
    }

    bb48: {
        _137 = Wrapping::<u64>(const _);
        _139 = _137;
        _138 = test::black_box::<Wrapping<u64>>(move _139) -> [return: bb49, unwind continue];
    }

    bb49: {
        _137 = move _138;
        _141 = &mut _137;
        _142 = Add(const _, const 1_usize);
        _140 = <Wrapping<u64> as ShlAssign<usize>>::shl_assign(move _141, move _142) -> [return: bb50, unwind continue];
    }

    bb50: {
        _146 = _137;
        _145 = test::black_box::<Wrapping<u64>>(move _146) -> [return: bb51, unwind continue];
    }

    bb51: {
        _144 = &_145;
        _377 = const _;
        _143 = (move _144, _377);
        _147 = (_143.0: &std::num::Wrapping<u64>);
        _148 = (_143.1: &std::num::Wrapping<u64>);
        _150 = <Wrapping<u64> as PartialEq>::eq(_147, _148) -> [return: bb52, unwind continue];
    }

    bb52: {
        _149 = Not(move _150);
        switchInt(move _149) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _151 = core::panicking::AssertKind::Eq;
        _153 = Option::<Arguments<'_>>::None;
        _152 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _151, _147, _148, move _153) -> unwind continue;
    }

    bb54: {
        _154 = Wrapping::<usize>(const _);
        _156 = _154;
        _155 = test::black_box::<Wrapping<usize>>(move _156) -> [return: bb55, unwind continue];
    }

    bb55: {
        _154 = move _155;
        _158 = &mut _154;
        _159 = Add(const _, const 1_usize);
        _157 = <Wrapping<usize> as ShlAssign<usize>>::shl_assign(move _158, move _159) -> [return: bb56, unwind continue];
    }

    bb56: {
        _163 = _154;
        _162 = test::black_box::<Wrapping<usize>>(move _163) -> [return: bb57, unwind continue];
    }

    bb57: {
        _161 = &_162;
        _376 = const _;
        _160 = (move _161, _376);
        _164 = (_160.0: &std::num::Wrapping<usize>);
        _165 = (_160.1: &std::num::Wrapping<usize>);
        _167 = <Wrapping<usize> as PartialEq>::eq(_164, _165) -> [return: bb58, unwind continue];
    }

    bb58: {
        _166 = Not(move _167);
        switchInt(move _166) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _168 = core::panicking::AssertKind::Eq;
        _170 = Option::<Arguments<'_>>::None;
        _169 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _168, _164, _165, move _170) -> unwind continue;
    }

    bb60: {
        _171 = Wrapping::<i8>(const _);
        _173 = _171;
        _172 = test::black_box::<Wrapping<i8>>(move _173) -> [return: bb61, unwind continue];
    }

    bb61: {
        _171 = move _172;
        _175 = &mut _171;
        _176 = Add(const _, const 1_usize);
        _174 = <Wrapping<i8> as ShrAssign<usize>>::shr_assign(move _175, move _176) -> [return: bb62, unwind continue];
    }

    bb62: {
        _180 = _171;
        _179 = test::black_box::<Wrapping<i8>>(move _180) -> [return: bb63, unwind continue];
    }

    bb63: {
        _178 = &_179;
        _181 = Eq(const 2_i8, const 0_i8);
        assert(!move _181, "attempt to divide `{}` by zero", const _) -> [success: bb64, unwind continue];
    }

    bb64: {
        _182 = Eq(const 2_i8, const -1_i8);
        _183 = Eq(const _, const i8::MIN);
        _184 = BitAnd(move _182, move _183);
        assert(!move _184, "attempt to compute `{} / {}`, which would overflow", const _, const 2_i8) -> [success: bb65, unwind continue];
    }

    bb65: {
        _375 = const _;
        _177 = (move _178, _375);
        _185 = (_177.0: &std::num::Wrapping<i8>);
        _186 = (_177.1: &std::num::Wrapping<i8>);
        _188 = <Wrapping<i8> as PartialEq>::eq(_185, _186) -> [return: bb66, unwind continue];
    }

    bb66: {
        _187 = Not(move _188);
        switchInt(move _187) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        _189 = core::panicking::AssertKind::Eq;
        _191 = Option::<Arguments<'_>>::None;
        _190 = core::panicking::assert_failed::<Wrapping<i8>, Wrapping<i8>>(move _189, _185, _186, move _191) -> unwind continue;
    }

    bb68: {
        _192 = Wrapping::<i16>(const _);
        _194 = _192;
        _193 = test::black_box::<Wrapping<i16>>(move _194) -> [return: bb69, unwind continue];
    }

    bb69: {
        _192 = move _193;
        _196 = &mut _192;
        _197 = Add(const _, const 1_usize);
        _195 = <Wrapping<i16> as ShrAssign<usize>>::shr_assign(move _196, move _197) -> [return: bb70, unwind continue];
    }

    bb70: {
        _201 = _192;
        _200 = test::black_box::<Wrapping<i16>>(move _201) -> [return: bb71, unwind continue];
    }

    bb71: {
        _199 = &_200;
        _202 = Eq(const 2_i16, const 0_i16);
        assert(!move _202, "attempt to divide `{}` by zero", const _) -> [success: bb72, unwind continue];
    }

    bb72: {
        _203 = Eq(const 2_i16, const -1_i16);
        _204 = Eq(const _, const i16::MIN);
        _205 = BitAnd(move _203, move _204);
        assert(!move _205, "attempt to compute `{} / {}`, which would overflow", const _, const 2_i16) -> [success: bb73, unwind continue];
    }

    bb73: {
        _374 = const _;
        _198 = (move _199, _374);
        _206 = (_198.0: &std::num::Wrapping<i16>);
        _207 = (_198.1: &std::num::Wrapping<i16>);
        _209 = <Wrapping<i16> as PartialEq>::eq(_206, _207) -> [return: bb74, unwind continue];
    }

    bb74: {
        _208 = Not(move _209);
        switchInt(move _208) -> [0: bb76, otherwise: bb75];
    }

    bb75: {
        _210 = core::panicking::AssertKind::Eq;
        _212 = Option::<Arguments<'_>>::None;
        _211 = core::panicking::assert_failed::<Wrapping<i16>, Wrapping<i16>>(move _210, _206, _207, move _212) -> unwind continue;
    }

    bb76: {
        _213 = Wrapping::<i32>(const _);
        _215 = _213;
        _214 = test::black_box::<Wrapping<i32>>(move _215) -> [return: bb77, unwind continue];
    }

    bb77: {
        _213 = move _214;
        _217 = &mut _213;
        _218 = Add(const _, const 1_usize);
        _216 = <Wrapping<i32> as ShrAssign<usize>>::shr_assign(move _217, move _218) -> [return: bb78, unwind continue];
    }

    bb78: {
        _222 = _213;
        _221 = test::black_box::<Wrapping<i32>>(move _222) -> [return: bb79, unwind continue];
    }

    bb79: {
        _220 = &_221;
        _223 = Eq(const 2_i32, const 0_i32);
        assert(!move _223, "attempt to divide `{}` by zero", const _) -> [success: bb80, unwind continue];
    }

    bb80: {
        _224 = Eq(const 2_i32, const -1_i32);
        _225 = Eq(const _, const i32::MIN);
        _226 = BitAnd(move _224, move _225);
        assert(!move _226, "attempt to compute `{} / {}`, which would overflow", const _, const 2_i32) -> [success: bb81, unwind continue];
    }

    bb81: {
        _373 = const _;
        _219 = (move _220, _373);
        _227 = (_219.0: &std::num::Wrapping<i32>);
        _228 = (_219.1: &std::num::Wrapping<i32>);
        _230 = <Wrapping<i32> as PartialEq>::eq(_227, _228) -> [return: bb82, unwind continue];
    }

    bb82: {
        _229 = Not(move _230);
        switchInt(move _229) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _231 = core::panicking::AssertKind::Eq;
        _233 = Option::<Arguments<'_>>::None;
        _232 = core::panicking::assert_failed::<Wrapping<i32>, Wrapping<i32>>(move _231, _227, _228, move _233) -> unwind continue;
    }

    bb84: {
        _234 = Wrapping::<i64>(const _);
        _236 = _234;
        _235 = test::black_box::<Wrapping<i64>>(move _236) -> [return: bb85, unwind continue];
    }

    bb85: {
        _234 = move _235;
        _238 = &mut _234;
        _239 = Add(const _, const 1_usize);
        _237 = <Wrapping<i64> as ShrAssign<usize>>::shr_assign(move _238, move _239) -> [return: bb86, unwind continue];
    }

    bb86: {
        _243 = _234;
        _242 = test::black_box::<Wrapping<i64>>(move _243) -> [return: bb87, unwind continue];
    }

    bb87: {
        _241 = &_242;
        _244 = Eq(const 2_i64, const 0_i64);
        assert(!move _244, "attempt to divide `{}` by zero", const _) -> [success: bb88, unwind continue];
    }

    bb88: {
        _245 = Eq(const 2_i64, const -1_i64);
        _246 = Eq(const _, const i64::MIN);
        _247 = BitAnd(move _245, move _246);
        assert(!move _247, "attempt to compute `{} / {}`, which would overflow", const _, const 2_i64) -> [success: bb89, unwind continue];
    }

    bb89: {
        _372 = const _;
        _240 = (move _241, _372);
        _248 = (_240.0: &std::num::Wrapping<i64>);
        _249 = (_240.1: &std::num::Wrapping<i64>);
        _251 = <Wrapping<i64> as PartialEq>::eq(_248, _249) -> [return: bb90, unwind continue];
    }

    bb90: {
        _250 = Not(move _251);
        switchInt(move _250) -> [0: bb92, otherwise: bb91];
    }

    bb91: {
        _252 = core::panicking::AssertKind::Eq;
        _254 = Option::<Arguments<'_>>::None;
        _253 = core::panicking::assert_failed::<Wrapping<i64>, Wrapping<i64>>(move _252, _248, _249, move _254) -> unwind continue;
    }

    bb92: {
        _255 = Wrapping::<isize>(const _);
        _257 = _255;
        _256 = test::black_box::<Wrapping<isize>>(move _257) -> [return: bb93, unwind continue];
    }

    bb93: {
        _255 = move _256;
        _259 = &mut _255;
        _260 = Add(const _, const 1_usize);
        _258 = <Wrapping<isize> as ShrAssign<usize>>::shr_assign(move _259, move _260) -> [return: bb94, unwind continue];
    }

    bb94: {
        _264 = _255;
        _263 = test::black_box::<Wrapping<isize>>(move _264) -> [return: bb95, unwind continue];
    }

    bb95: {
        _262 = &_263;
        _265 = Eq(const 2_isize, const 0_isize);
        assert(!move _265, "attempt to divide `{}` by zero", const _) -> [success: bb96, unwind continue];
    }

    bb96: {
        _266 = Eq(const 2_isize, const -1_isize);
        _267 = Eq(const _, const isize::MIN);
        _268 = BitAnd(move _266, move _267);
        assert(!move _268, "attempt to compute `{} / {}`, which would overflow", const _, const 2_isize) -> [success: bb97, unwind continue];
    }

    bb97: {
        _371 = const _;
        _261 = (move _262, _371);
        _269 = (_261.0: &std::num::Wrapping<isize>);
        _270 = (_261.1: &std::num::Wrapping<isize>);
        _272 = <Wrapping<isize> as PartialEq>::eq(_269, _270) -> [return: bb98, unwind continue];
    }

    bb98: {
        _271 = Not(move _272);
        switchInt(move _271) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        _273 = core::panicking::AssertKind::Eq;
        _275 = Option::<Arguments<'_>>::None;
        _274 = core::panicking::assert_failed::<Wrapping<isize>, Wrapping<isize>>(move _273, _269, _270, move _275) -> unwind continue;
    }

    bb100: {
        _276 = Wrapping::<u8>(const _);
        _278 = _276;
        _277 = test::black_box::<Wrapping<u8>>(move _278) -> [return: bb101, unwind continue];
    }

    bb101: {
        _276 = move _277;
        _280 = &mut _276;
        _281 = Add(const _, const 1_usize);
        _279 = <Wrapping<u8> as ShrAssign<usize>>::shr_assign(move _280, move _281) -> [return: bb102, unwind continue];
    }

    bb102: {
        _285 = _276;
        _284 = test::black_box::<Wrapping<u8>>(move _285) -> [return: bb103, unwind continue];
    }

    bb103: {
        _283 = &_284;
        _286 = Eq(const 2_u8, const 0_u8);
        assert(!move _286, "attempt to divide `{}` by zero", const _) -> [success: bb104, unwind continue];
    }

    bb104: {
        _370 = const _;
        _282 = (move _283, _370);
        _287 = (_282.0: &std::num::Wrapping<u8>);
        _288 = (_282.1: &std::num::Wrapping<u8>);
        _290 = <Wrapping<u8> as PartialEq>::eq(_287, _288) -> [return: bb105, unwind continue];
    }

    bb105: {
        _289 = Not(move _290);
        switchInt(move _289) -> [0: bb107, otherwise: bb106];
    }

    bb106: {
        _291 = core::panicking::AssertKind::Eq;
        _293 = Option::<Arguments<'_>>::None;
        _292 = core::panicking::assert_failed::<Wrapping<u8>, Wrapping<u8>>(move _291, _287, _288, move _293) -> unwind continue;
    }

    bb107: {
        _294 = Wrapping::<u16>(const _);
        _296 = _294;
        _295 = test::black_box::<Wrapping<u16>>(move _296) -> [return: bb108, unwind continue];
    }

    bb108: {
        _294 = move _295;
        _298 = &mut _294;
        _299 = Add(const _, const 1_usize);
        _297 = <Wrapping<u16> as ShrAssign<usize>>::shr_assign(move _298, move _299) -> [return: bb109, unwind continue];
    }

    bb109: {
        _303 = _294;
        _302 = test::black_box::<Wrapping<u16>>(move _303) -> [return: bb110, unwind continue];
    }

    bb110: {
        _301 = &_302;
        _304 = Eq(const 2_u16, const 0_u16);
        assert(!move _304, "attempt to divide `{}` by zero", const _) -> [success: bb111, unwind continue];
    }

    bb111: {
        _369 = const _;
        _300 = (move _301, _369);
        _305 = (_300.0: &std::num::Wrapping<u16>);
        _306 = (_300.1: &std::num::Wrapping<u16>);
        _308 = <Wrapping<u16> as PartialEq>::eq(_305, _306) -> [return: bb112, unwind continue];
    }

    bb112: {
        _307 = Not(move _308);
        switchInt(move _307) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        _309 = core::panicking::AssertKind::Eq;
        _311 = Option::<Arguments<'_>>::None;
        _310 = core::panicking::assert_failed::<Wrapping<u16>, Wrapping<u16>>(move _309, _305, _306, move _311) -> unwind continue;
    }

    bb114: {
        _312 = Wrapping::<u32>(const _);
        _314 = _312;
        _313 = test::black_box::<Wrapping<u32>>(move _314) -> [return: bb115, unwind continue];
    }

    bb115: {
        _312 = move _313;
        _316 = &mut _312;
        _317 = Add(const _, const 1_usize);
        _315 = <Wrapping<u32> as ShrAssign<usize>>::shr_assign(move _316, move _317) -> [return: bb116, unwind continue];
    }

    bb116: {
        _321 = _312;
        _320 = test::black_box::<Wrapping<u32>>(move _321) -> [return: bb117, unwind continue];
    }

    bb117: {
        _319 = &_320;
        _322 = Eq(const 2_u32, const 0_u32);
        assert(!move _322, "attempt to divide `{}` by zero", const _) -> [success: bb118, unwind continue];
    }

    bb118: {
        _368 = const _;
        _318 = (move _319, _368);
        _323 = (_318.0: &std::num::Wrapping<u32>);
        _324 = (_318.1: &std::num::Wrapping<u32>);
        _326 = <Wrapping<u32> as PartialEq>::eq(_323, _324) -> [return: bb119, unwind continue];
    }

    bb119: {
        _325 = Not(move _326);
        switchInt(move _325) -> [0: bb121, otherwise: bb120];
    }

    bb120: {
        _327 = core::panicking::AssertKind::Eq;
        _329 = Option::<Arguments<'_>>::None;
        _328 = core::panicking::assert_failed::<Wrapping<u32>, Wrapping<u32>>(move _327, _323, _324, move _329) -> unwind continue;
    }

    bb121: {
        _330 = Wrapping::<u64>(const _);
        _332 = _330;
        _331 = test::black_box::<Wrapping<u64>>(move _332) -> [return: bb122, unwind continue];
    }

    bb122: {
        _330 = move _331;
        _334 = &mut _330;
        _335 = Add(const _, const 1_usize);
        _333 = <Wrapping<u64> as ShrAssign<usize>>::shr_assign(move _334, move _335) -> [return: bb123, unwind continue];
    }

    bb123: {
        _339 = _330;
        _338 = test::black_box::<Wrapping<u64>>(move _339) -> [return: bb124, unwind continue];
    }

    bb124: {
        _337 = &_338;
        _340 = Eq(const 2_u64, const 0_u64);
        assert(!move _340, "attempt to divide `{}` by zero", const _) -> [success: bb125, unwind continue];
    }

    bb125: {
        _367 = const _;
        _336 = (move _337, _367);
        _341 = (_336.0: &std::num::Wrapping<u64>);
        _342 = (_336.1: &std::num::Wrapping<u64>);
        _344 = <Wrapping<u64> as PartialEq>::eq(_341, _342) -> [return: bb126, unwind continue];
    }

    bb126: {
        _343 = Not(move _344);
        switchInt(move _343) -> [0: bb128, otherwise: bb127];
    }

    bb127: {
        _345 = core::panicking::AssertKind::Eq;
        _347 = Option::<Arguments<'_>>::None;
        _346 = core::panicking::assert_failed::<Wrapping<u64>, Wrapping<u64>>(move _345, _341, _342, move _347) -> unwind continue;
    }

    bb128: {
        _348 = Wrapping::<usize>(const _);
        _350 = _348;
        _349 = test::black_box::<Wrapping<usize>>(move _350) -> [return: bb129, unwind continue];
    }

    bb129: {
        _348 = move _349;
        _352 = &mut _348;
        _353 = Add(const _, const 1_usize);
        _351 = <Wrapping<usize> as ShrAssign<usize>>::shr_assign(move _352, move _353) -> [return: bb130, unwind continue];
    }

    bb130: {
        _357 = _348;
        _356 = test::black_box::<Wrapping<usize>>(move _357) -> [return: bb131, unwind continue];
    }

    bb131: {
        _355 = &_356;
        _358 = Eq(const 2_usize, const 0_usize);
        assert(!move _358, "attempt to divide `{}` by zero", const _) -> [success: bb132, unwind continue];
    }

    bb132: {
        _366 = const _;
        _354 = (move _355, _366);
        _359 = (_354.0: &std::num::Wrapping<usize>);
        _360 = (_354.1: &std::num::Wrapping<usize>);
        _362 = <Wrapping<usize> as PartialEq>::eq(_359, _360) -> [return: bb133, unwind continue];
    }

    bb133: {
        _361 = Not(move _362);
        switchInt(move _361) -> [0: bb135, otherwise: bb134];
    }

    bb134: {
        _363 = core::panicking::AssertKind::Eq;
        _365 = Option::<Arguments<'_>>::None;
        _364 = core::panicking::assert_failed::<Wrapping<usize>, Wrapping<usize>>(move _363, _359, _360, move _365) -> unwind continue;
    }

    bb135: {
        return;
    }
}

promoted[0] in test_sh_op_assigns: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;
    let mut _2: usize;

    bb0: {
        _2 = Div(const _, const 2_usize);
        _1 = Wrapping::<usize>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[1] in test_sh_op_assigns: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;
    let mut _2: u64;

    bb0: {
        _2 = Div(const _, const 2_u64);
        _1 = Wrapping::<u64>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[2] in test_sh_op_assigns: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;
    let mut _2: u32;

    bb0: {
        _2 = Div(const _, const 2_u32);
        _1 = Wrapping::<u32>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[3] in test_sh_op_assigns: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;
    let mut _2: u16;

    bb0: {
        _2 = Div(const _, const 2_u16);
        _1 = Wrapping::<u16>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[4] in test_sh_op_assigns: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;
    let mut _2: u8;

    bb0: {
        _2 = Div(const _, const 2_u8);
        _1 = Wrapping::<u8>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[5] in test_sh_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;
    let mut _2: isize;

    bb0: {
        _2 = Div(const _, const 2_isize);
        _1 = Wrapping::<isize>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[6] in test_sh_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;
    let mut _2: i64;

    bb0: {
        _2 = Div(const _, const 2_i64);
        _1 = Wrapping::<i64>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[7] in test_sh_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;
    let mut _2: i32;

    bb0: {
        _2 = Div(const _, const 2_i32);
        _1 = Wrapping::<i32>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[8] in test_sh_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;
    let mut _2: i16;

    bb0: {
        _2 = Div(const _, const 2_i16);
        _1 = Wrapping::<i16>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[9] in test_sh_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;
    let mut _2: i8;

    bb0: {
        _2 = Div(const _, const 2_i8);
        _1 = Wrapping::<i8>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[10] in test_sh_op_assigns: &Wrapping<usize> = {
    let mut _0: &std::num::Wrapping<usize>;
    let mut _1: std::num::Wrapping<usize>;
    let mut _2: usize;

    bb0: {
        _2 = Sub(const _, const 1_usize);
        _1 = Wrapping::<usize>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[11] in test_sh_op_assigns: &Wrapping<u64> = {
    let mut _0: &std::num::Wrapping<u64>;
    let mut _1: std::num::Wrapping<u64>;
    let mut _2: u64;

    bb0: {
        _2 = Sub(const _, const 1_u64);
        _1 = Wrapping::<u64>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[12] in test_sh_op_assigns: &Wrapping<u32> = {
    let mut _0: &std::num::Wrapping<u32>;
    let mut _1: std::num::Wrapping<u32>;
    let mut _2: u32;

    bb0: {
        _2 = Sub(const _, const 1_u32);
        _1 = Wrapping::<u32>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[13] in test_sh_op_assigns: &Wrapping<u16> = {
    let mut _0: &std::num::Wrapping<u16>;
    let mut _1: std::num::Wrapping<u16>;
    let mut _2: u16;

    bb0: {
        _2 = Sub(const _, const 1_u16);
        _1 = Wrapping::<u16>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[14] in test_sh_op_assigns: &Wrapping<u8> = {
    let mut _0: &std::num::Wrapping<u8>;
    let mut _1: std::num::Wrapping<u8>;
    let mut _2: u8;

    bb0: {
        _2 = Sub(const _, const 1_u8);
        _1 = Wrapping::<u8>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[15] in test_sh_op_assigns: &Wrapping<isize> = {
    let mut _0: &std::num::Wrapping<isize>;
    let mut _1: std::num::Wrapping<isize>;

    bb0: {
        _1 = Wrapping::<isize>(const -2_isize);
        _0 = &_1;
        return;
    }
}

promoted[16] in test_sh_op_assigns: &Wrapping<i64> = {
    let mut _0: &std::num::Wrapping<i64>;
    let mut _1: std::num::Wrapping<i64>;

    bb0: {
        _1 = Wrapping::<i64>(const -2_i64);
        _0 = &_1;
        return;
    }
}

promoted[17] in test_sh_op_assigns: &Wrapping<i32> = {
    let mut _0: &std::num::Wrapping<i32>;
    let mut _1: std::num::Wrapping<i32>;

    bb0: {
        _1 = Wrapping::<i32>(const -2_i32);
        _0 = &_1;
        return;
    }
}

promoted[18] in test_sh_op_assigns: &Wrapping<i16> = {
    let mut _0: &std::num::Wrapping<i16>;
    let mut _1: std::num::Wrapping<i16>;

    bb0: {
        _1 = Wrapping::<i16>(const -2_i16);
        _0 = &_1;
        return;
    }
}

promoted[19] in test_sh_op_assigns: &Wrapping<i8> = {
    let mut _0: &std::num::Wrapping<i8>;
    let mut _1: std::num::Wrapping<i8>;

    bb0: {
        _1 = Wrapping::<i8>(const -2_i8);
        _0 = &_1;
        return;
    }
}
