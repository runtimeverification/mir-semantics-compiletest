// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn force(_1: T) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:4:19: 4:19

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:4:20: 4:21
    }

    bb1: {
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:4:21: 4:21
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:6:11: 6:11
    let _1: ();                          // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:7:34: 7:42
    let _2: ();                          // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:8:38: 8:46
    let _3: ();                          // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:10:37: 10:45
    let _4: ();                          // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:11:39: 11:47
    let _5: ();                          // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:12:39: 12:47
    let _6: ();                          // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:13:41: 13:49
    let _7: ();                          // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:15:42: 15:50
    let _8: ();                          // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:16:44: 16:52
    let _9: ();                          // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:17:46: 17:54
    let _10: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:18:46: 18:54
    let _11: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:20:46: 20:54
    let _12: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:21:48: 21:56
    let _13: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:22:48: 22:56
    let _14: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:23:50: 23:58
    let _15: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:25:37: 25:45
    let _16: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:26:39: 26:47
    let _17: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:27:39: 27:47
    let _18: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:28:41: 28:49
    let _19: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:30:42: 30:50
    let _20: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:31:44: 31:52
    let _21: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:32:46: 32:54
    let _22: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:33:46: 33:54
    let _23: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:35:46: 35:54
    let _24: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:36:48: 36:56
    let _25: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:37:48: 37:56
    let _26: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:38:50: 38:58
    let _27: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:40:33: 40:41
    let _28: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:41:34: 41:42
    let _29: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:42:33: 42:41
    let _30: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:43:42: 43:50
    let _31: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:44:43: 44:51
    let _32: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:45:42: 45:50
    let _33: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:46:37: 46:45
    let _34: ();                         // in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:47:37: 47:45

    bb0: {
        _1 = force::<u16>(const _) -> bb1; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:7:34: 7:42
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:7:34: 7:39
                                         // + literal: Const { ty: fn(u16) {force::<u16>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = force::<u128>(const _) -> bb2; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:8:38: 8:46
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:8:38: 8:43
                                         // + literal: Const { ty: fn(u128) {force::<u128>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = force::<i8>(const _) -> bb3; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:10:37: 10:45
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:10:37: 10:42
                                         // + literal: Const { ty: fn(i8) {force::<i8>}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = force::<i32>(const _) -> bb4; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:11:39: 11:47
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:11:39: 11:44
                                         // + literal: Const { ty: fn(i32) {force::<i32>}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = force::<u64>(const _) -> bb5; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:12:39: 12:47
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:12:39: 12:44
                                         // + literal: Const { ty: fn(u64) {force::<u64>}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = force::<u128>(const _) -> bb6; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:13:41: 13:49
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:13:41: 13:46
                                         // + literal: Const { ty: fn(u128) {force::<u128>}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = force::<i8>(const _) -> bb7; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:15:42: 15:50
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:15:42: 15:47
                                         // + literal: Const { ty: fn(i8) {force::<i8>}, val: Value(<ZST>) }
    }

    bb7: {
        _8 = force::<u32>(const _) -> bb8; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:16:44: 16:52
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:16:44: 16:49
                                         // + literal: Const { ty: fn(u32) {force::<u32>}, val: Value(<ZST>) }
    }

    bb8: {
        _9 = force::<i128>(const _) -> bb9; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:17:46: 17:54
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:17:46: 17:51
                                         // + literal: Const { ty: fn(i128) {force::<i128>}, val: Value(<ZST>) }
    }

    bb9: {
        _10 = force::<u128>(const _) -> bb10; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:18:46: 18:54
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:18:46: 18:51
                                         // + literal: Const { ty: fn(u128) {force::<u128>}, val: Value(<ZST>) }
    }

    bb10: {
        _11 = force::<u8>(const _) -> bb11; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:20:46: 20:54
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:20:46: 20:51
                                         // + literal: Const { ty: fn(u8) {force::<u8>}, val: Value(<ZST>) }
    }

    bb11: {
        _12 = force::<u16>(const _) -> bb12; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:21:48: 21:56
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:21:48: 21:53
                                         // + literal: Const { ty: fn(u16) {force::<u16>}, val: Value(<ZST>) }
    }

    bb12: {
        _13 = force::<i64>(const _) -> bb13; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:22:48: 22:56
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:22:48: 22:53
                                         // + literal: Const { ty: fn(i64) {force::<i64>}, val: Value(<ZST>) }
    }

    bb13: {
        _14 = force::<i128>(const _) -> bb14; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:23:50: 23:58
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:23:50: 23:55
                                         // + literal: Const { ty: fn(i128) {force::<i128>}, val: Value(<ZST>) }
    }

    bb14: {
        _15 = force::<i8>(const _) -> bb15; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:25:37: 25:45
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:25:37: 25:42
                                         // + literal: Const { ty: fn(i8) {force::<i8>}, val: Value(<ZST>) }
    }

    bb15: {
        _16 = force::<i32>(const _) -> bb16; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:26:39: 26:47
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:26:39: 26:44
                                         // + literal: Const { ty: fn(i32) {force::<i32>}, val: Value(<ZST>) }
    }

    bb16: {
        _17 = force::<u64>(const _) -> bb17; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:27:39: 27:47
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:27:39: 27:44
                                         // + literal: Const { ty: fn(u64) {force::<u64>}, val: Value(<ZST>) }
    }

    bb17: {
        _18 = force::<u128>(const _) -> bb18; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:28:41: 28:49
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:28:41: 28:46
                                         // + literal: Const { ty: fn(u128) {force::<u128>}, val: Value(<ZST>) }
    }

    bb18: {
        _19 = force::<i8>(const _) -> bb19; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:30:42: 30:50
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:30:42: 30:47
                                         // + literal: Const { ty: fn(i8) {force::<i8>}, val: Value(<ZST>) }
    }

    bb19: {
        _20 = force::<u32>(const _) -> bb20; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:31:44: 31:52
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:31:44: 31:49
                                         // + literal: Const { ty: fn(u32) {force::<u32>}, val: Value(<ZST>) }
    }

    bb20: {
        _21 = force::<i128>(const _) -> bb21; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:32:46: 32:54
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:32:46: 32:51
                                         // + literal: Const { ty: fn(i128) {force::<i128>}, val: Value(<ZST>) }
    }

    bb21: {
        _22 = force::<u128>(const _) -> bb22; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:33:46: 33:54
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:33:46: 33:51
                                         // + literal: Const { ty: fn(u128) {force::<u128>}, val: Value(<ZST>) }
    }

    bb22: {
        _23 = force::<u8>(const _) -> bb23; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:35:46: 35:54
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:35:46: 35:51
                                         // + literal: Const { ty: fn(u8) {force::<u8>}, val: Value(<ZST>) }
    }

    bb23: {
        _24 = force::<u16>(const _) -> bb24; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:36:48: 36:56
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:36:48: 36:53
                                         // + literal: Const { ty: fn(u16) {force::<u16>}, val: Value(<ZST>) }
    }

    bb24: {
        _25 = force::<i64>(const _) -> bb25; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:37:48: 37:56
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:37:48: 37:53
                                         // + literal: Const { ty: fn(i64) {force::<i64>}, val: Value(<ZST>) }
    }

    bb25: {
        _26 = force::<i128>(const _) -> bb26; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:38:50: 38:58
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:38:50: 38:55
                                         // + literal: Const { ty: fn(i128) {force::<i128>}, val: Value(<ZST>) }
    }

    bb26: {
        _27 = force::<u8>(const _) -> bb27; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:40:33: 40:41
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:40:33: 40:38
                                         // + literal: Const { ty: fn(u8) {force::<u8>}, val: Value(<ZST>) }
    }

    bb27: {
        _28 = force::<i8>(const _) -> bb28; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:41:34: 41:42
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:41:34: 41:39
                                         // + literal: Const { ty: fn(i8) {force::<i8>}, val: Value(<ZST>) }
    }

    bb28: {
        _29 = force::<i8>(const _) -> bb29; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:42:33: 42:41
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:42:33: 42:38
                                         // + literal: Const { ty: fn(i8) {force::<i8>}, val: Value(<ZST>) }
    }

    bb29: {
        _30 = force::<i32>(const _) -> bb30; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:43:42: 43:50
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:43:42: 43:47
                                         // + literal: Const { ty: fn(i32) {force::<i32>}, val: Value(<ZST>) }
    }

    bb30: {
        _31 = force::<i32>(const _) -> bb31; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:44:43: 44:51
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:44:43: 44:48
                                         // + literal: Const { ty: fn(i32) {force::<i32>}, val: Value(<ZST>) }
    }

    bb31: {
        _32 = force::<u32>(const _) -> bb32; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:45:42: 45:50
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:45:42: 45:47
                                         // + literal: Const { ty: fn(u32) {force::<u32>}, val: Value(<ZST>) }
    }

    bb32: {
        _33 = force::<u128>(const _) -> bb33; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:46:37: 46:45
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:46:37: 46:42
                                         // + literal: Const { ty: fn(u128) {force::<u128>}, val: Value(<ZST>) }
    }

    bb33: {
        _34 = force::<i128>(const _) -> bb34; // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:47:37: 47:45
                                         // mir::Constant
                                         // + span: ui/numbers-arithmetic/float-int-invalid-const-cast.rs:47:37: 47:42
                                         // + literal: Const { ty: fn(i128) {force::<i128>}, val: Value(<ZST>) }
    }

    bb34: {
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:48:2: 48:2
    }
}

const main::X: u16 = {
    let mut _0: u16;                     // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:7:16: 7:19

    bb0: {
        _0 = const -1f64 as u16 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:7:22: 7:32
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:7:7: 7:33
    }
}

const main::X: u128 = {
    let mut _0: u128;                    // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:8:16: 8:20

    bb0: {
        _0 = const -100f64 as u128 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:8:23: 8:36
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:8:7: 8:37
    }
}

const main::X: i8 = {
    let mut _0: i8;                      // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:10:16: 10:18

    bb0: {
        _0 = const _ as i8 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:10:21: 10:35
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:10:7: 10:36
    }
}

const main::X: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:11:16: 11:19

    bb0: {
        _0 = const _ as i32 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:11:22: 11:37
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:11:7: 11:38
    }
}

const main::X: u64 = {
    let mut _0: u64;                     // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:12:16: 12:19

    bb0: {
        _0 = const _ as u64 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:12:22: 12:37
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:12:7: 12:38
    }
}

const main::X: u128 = {
    let mut _0: u128;                    // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:13:16: 13:20

    bb0: {
        _0 = const _ as u128 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:13:23: 13:39
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:13:7: 13:40
    }
}

const main::X: i8 = {
    let mut _0: i8;                      // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:15:16: 15:18

    bb0: {
        _0 = const _ as i8 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:15:21: 15:40
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:15:7: 15:41
    }
}

const main::X: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:16:16: 16:19

    bb0: {
        _0 = const _ as u32 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:16:22: 16:42
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:16:7: 16:43
    }
}

const main::X: i128 = {
    let mut _0: i128;                    // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:17:16: 17:20

    bb0: {
        _0 = const _ as i128 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:17:23: 17:44
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:17:7: 17:45
    }
}

const main::X: u128 = {
    let mut _0: u128;                    // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:18:16: 18:20

    bb0: {
        _0 = const _ as u128 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:18:23: 18:44
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:18:7: 18:45
    }
}

const main::X: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:20:16: 20:18

    bb0: {
        _0 = const _ as u8 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:20:21: 20:44
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:20:7: 20:45
    }
}

const main::X: u16 = {
    let mut _0: u16;                     // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:21:16: 21:19

    bb0: {
        _0 = const _ as u16 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:21:22: 21:46
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:21:7: 21:47
    }
}

const main::X: i64 = {
    let mut _0: i64;                     // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:22:16: 22:19

    bb0: {
        _0 = const _ as i64 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:22:22: 22:46
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:22:7: 22:47
    }
}

const main::X: i128 = {
    let mut _0: i128;                    // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:23:16: 23:20

    bb0: {
        _0 = const _ as i128 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:23:23: 23:48
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:23:7: 23:49
    }
}

const main::X: i8 = {
    let mut _0: i8;                      // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:25:16: 25:18

    bb0: {
        _0 = const _ as i8 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:25:21: 25:35
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:25:7: 25:36
    }
}

const main::X: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:26:16: 26:19

    bb0: {
        _0 = const _ as i32 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:26:22: 26:37
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:26:7: 26:38
    }
}

const main::X: u64 = {
    let mut _0: u64;                     // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:27:16: 27:19

    bb0: {
        _0 = const _ as u64 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:27:22: 27:37
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:27:7: 27:38
    }
}

const main::X: u128 = {
    let mut _0: u128;                    // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:28:16: 28:20

    bb0: {
        _0 = const _ as u128 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:28:23: 28:39
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:28:7: 28:40
    }
}

const main::X: i8 = {
    let mut _0: i8;                      // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:30:16: 30:18

    bb0: {
        _0 = const _ as i8 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:30:21: 30:40
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:30:7: 30:41
    }
}

const main::X: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:31:16: 31:19

    bb0: {
        _0 = const _ as u32 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:31:22: 31:42
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:31:7: 31:43
    }
}

const main::X: i128 = {
    let mut _0: i128;                    // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:32:16: 32:20

    bb0: {
        _0 = const _ as i128 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:32:23: 32:44
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:32:7: 32:45
    }
}

const main::X: u128 = {
    let mut _0: u128;                    // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:33:16: 33:20

    bb0: {
        _0 = const _ as u128 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:33:23: 33:44
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:33:7: 33:45
    }
}

const main::X: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:35:16: 35:18

    bb0: {
        _0 = const _ as u8 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:35:21: 35:44
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:35:7: 35:45
    }
}

const main::X: u16 = {
    let mut _0: u16;                     // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:36:16: 36:19

    bb0: {
        _0 = const _ as u16 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:36:22: 36:46
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:36:7: 36:47
    }
}

const main::X: i64 = {
    let mut _0: i64;                     // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:37:16: 37:19

    bb0: {
        _0 = const _ as i64 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:37:22: 37:46
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:37:7: 37:47
    }
}

const main::X: i128 = {
    let mut _0: i128;                    // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:38:16: 38:20

    bb0: {
        _0 = const _ as i128 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:38:23: 38:48
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:38:7: 38:49
    }
}

const main::X: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:40:16: 40:18

    bb0: {
        _0 = const 256f64 as u8 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:40:21: 40:31
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:40:7: 40:32
    }
}

const main::X: i8 = {
    let mut _0: i8;                      // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:41:16: 41:18

    bb0: {
        _0 = const -129f64 as i8 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:41:21: 41:32
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:41:7: 41:33
    }
}

const main::X: i8 = {
    let mut _0: i8;                      // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:42:16: 42:18

    bb0: {
        _0 = const 128f64 as i8 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:42:21: 42:31
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:42:7: 42:32
    }
}

const main::X: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:43:16: 43:19

    bb0: {
        _0 = const 2147483648f64 as i32 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:43:22: 43:40
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:43:7: 43:41
    }
}

const main::X: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:44:16: 44:19

    bb0: {
        _0 = const -2147483904f64 as i32 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:44:22: 44:41
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:44:7: 44:42
    }
}

const main::X: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:45:16: 45:19

    bb0: {
        _0 = const 4294967296f64 as u32 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:45:22: 45:40
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:45:7: 45:41
    }
}

const main::X: u128 = {
    let mut _0: u128;                    // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:46:16: 46:20

    bb0: {
        _0 = const 1.0E+40f64 as u128 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:46:23: 46:35
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:46:7: 46:36
    }
}

const main::X: i128 = {
    let mut _0: i128;                    // return place in scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:47:16: 47:20

    bb0: {
        _0 = const 1.0E+40f64 as i128 (FloatToInt); // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:47:23: 47:35
        return;                          // scope 0 at ui/numbers-arithmetic/float-int-invalid-const-cast.rs:47:7: 47:36
    }
}
