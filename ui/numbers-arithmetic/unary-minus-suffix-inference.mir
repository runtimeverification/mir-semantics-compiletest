// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: i8;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &i8;
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: [core::fmt::rt::Argument<'_>; 1];
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &i16;
    let _23: ();
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _26: &[core::fmt::rt::Argument<'_>];
    let _27: &[core::fmt::rt::Argument<'_>; 1];
    let _28: [core::fmt::rt::Argument<'_>; 1];
    let mut _29: core::fmt::rt::Argument<'_>;
    let _30: &i32;
    let _33: ();
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let _40: &i64;
    let _43: ();
    let mut _44: std::fmt::Arguments<'_>;
    let mut _45: &[&str];
    let mut _46: &[core::fmt::rt::Argument<'_>];
    let _47: &[core::fmt::rt::Argument<'_>; 1];
    let _48: [core::fmt::rt::Argument<'_>; 1];
    let mut _49: core::fmt::rt::Argument<'_>;
    let _50: &isize;
    scope 1 {
        debug a => const 1_i8;
        let _2: i8;
        scope 2 {
            debug a_neg => _2;
            let _11: i16;
            let mut _55: &[&str; 2];
            scope 3 {
                debug b => const 1_i16;
                let _12: i16;
                scope 4 {
                    debug b_neg => _12;
                    let _21: i32;
                    let mut _54: &[&str; 2];
                    scope 5 {
                        debug c => const 1_i32;
                        let _22: i32;
                        scope 6 {
                            debug c_neg => _22;
                            let _31: i64;
                            let mut _53: &[&str; 2];
                            scope 7 {
                                debug d => const 1_i64;
                                let _32: i64;
                                scope 8 {
                                    debug d_neg => _32;
                                    let _41: isize;
                                    let mut _52: &[&str; 2];
                                    scope 9 {
                                        debug e => const 1_isize;
                                        let _42: isize;
                                        scope 10 {
                                            debug e_neg => _42;
                                            let mut _51: &[&str; 2];
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 1_i8;
        _2 = Neg(_1);
        _55 = const _;
        _5 = _55 as &[&str] (Pointer(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<i8>(_10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = _print(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _11 = const 1_i16;
        _12 = Neg(_11);
        _54 = const _;
        _15 = _54 as &[&str] (Pointer(Unsize));
        _20 = &_12;
        _19 = core::fmt::rt::Argument::<'_>::new_display::<i16>(_20) -> [return: bb4, unwind continue];
    }

    bb4: {
        _18 = [move _19];
        _17 = &_18;
        _16 = _17 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _14 = Arguments::<'_>::new_v1(move _15, move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        _13 = _print(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        _21 = const 1_i32;
        _22 = Neg(_21);
        _53 = const _;
        _25 = _53 as &[&str] (Pointer(Unsize));
        _30 = &_22;
        _29 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_30) -> [return: bb7, unwind continue];
    }

    bb7: {
        _28 = [move _29];
        _27 = &_28;
        _26 = _27 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _24 = Arguments::<'_>::new_v1(move _25, move _26) -> [return: bb8, unwind continue];
    }

    bb8: {
        _23 = _print(move _24) -> [return: bb9, unwind continue];
    }

    bb9: {
        _31 = const 1_i64;
        _32 = Neg(_31);
        _52 = const _;
        _35 = _52 as &[&str] (Pointer(Unsize));
        _40 = &_32;
        _39 = core::fmt::rt::Argument::<'_>::new_display::<i64>(_40) -> [return: bb10, unwind continue];
    }

    bb10: {
        _38 = [move _39];
        _37 = &_38;
        _36 = _37 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _34 = Arguments::<'_>::new_v1(move _35, move _36) -> [return: bb11, unwind continue];
    }

    bb11: {
        _33 = _print(move _34) -> [return: bb12, unwind continue];
    }

    bb12: {
        _41 = const 1_isize;
        _42 = Neg(_41);
        _51 = const _;
        _45 = _51 as &[&str] (Pointer(Unsize));
        _50 = &_42;
        _49 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_50) -> [return: bb13, unwind continue];
    }

    bb13: {
        _48 = [move _49];
        _47 = &_48;
        _46 = _47 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _44 = Arguments::<'_>::new_v1(move _45, move _46) -> [return: bb14, unwind continue];
    }

    bb14: {
        _43 = _print(move _44) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
