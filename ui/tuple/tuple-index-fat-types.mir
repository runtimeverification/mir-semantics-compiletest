// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &[isize];
    let mut _3: &[isize];
    let mut _4: (&&[isize], &&[isize]);
    let mut _5: &&[isize];
    let mut _6: &&[isize];
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: &[isize];
    let mut _17: (&&[isize], &&[isize]);
    let mut _18: &&[isize];
    let mut _19: &&[isize];
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: &[isize; 3];
    scope 1 {
        debug x => _1;
        let _2: (&[isize],);
        scope 2 {
            debug y => _2;
            let _7: &&[isize];
            let _8: &&[isize];
            let _14: &[isize];
            let mut _27: &[isize; 3];
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _11: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _11;
                }
            }
            scope 5 {
                debug x => _14;
                let _15: Foo<'_>;
                scope 6 {
                    debug y => _15;
                    let _20: &&[isize];
                    let _21: &&[isize];
                    scope 7 {
                        debug left_val => _20;
                        debug right_val => _21;
                        let _24: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _24;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _28 = const _;
        _1 = _28 as &[isize] (Pointer(Unsize));
        _3 = _1;
        _2 = (move _3,);
        _5 = &(_2.0: &[isize]);
        _6 = &_1;
        _4 = (move _5, move _6);
        _7 = (_4.0: &&[isize]);
        _8 = (_4.1: &&[isize]);
        _10 = <&[isize] as PartialEq>::eq(_7, _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<&[isize], &[isize]>(move _11, _7, _8, move _13) -> unwind continue;
    }

    bb3: {
        _27 = const _;
        _14 = _27 as &[isize] (Pointer(Unsize));
        _16 = _14;
        _15 = Foo::<'_>(move _16);
        _18 = &(_15.0: &[isize]);
        _19 = &_14;
        _17 = (move _18, move _19);
        _20 = (_17.0: &&[isize]);
        _21 = (_17.1: &&[isize]);
        _23 = <&[isize] as PartialEq>::eq(_20, _21) -> [return: bb4, unwind continue];
    }

    bb4: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<&[isize], &[isize]>(move _24, _20, _21, move _26) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &[isize; 3] = {
    let mut _0: &[isize; 3];
    let mut _1: [isize; 3];

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[isize; 3] = {
    let mut _0: &[isize; 3];
    let mut _1: [isize; 3];

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize];
        _0 = &_1;
        return;
    }
}

fn Foo(_1: &[isize]) -> Foo<'_> {
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: &[isize]) -> Foo<'_> {
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1);
        return;
    }
}
