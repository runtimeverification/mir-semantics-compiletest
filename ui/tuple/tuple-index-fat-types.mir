// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/tuple/tuple-index-fat-types.rs:5:11: 5:11
    let _1: &[isize];                    // in scope 0 at ui/tuple/tuple-index-fat-types.rs:6:9: 6:10
    let mut _2: &[isize; 3];             // in scope 0 at ui/tuple/tuple-index-fat-types.rs:6:23: 6:33
    let _3: &[isize; 3];                 // in scope 0 at ui/tuple/tuple-index-fat-types.rs:6:23: 6:33
    let mut _5: &[isize];                // in scope 0 at ui/tuple/tuple-index-fat-types.rs:7:14: 7:15
    let mut _6: (&&[isize], &&[isize]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _7: &&[isize];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _8: &&[isize];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: &&[isize];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: &&[isize];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &&[isize];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &&[isize];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &&[isize];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &&[isize];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: &[isize; 3];            // in scope 0 at ui/tuple/tuple-index-fat-types.rs:10:23: 10:33
    let _25: &[isize; 3];                // in scope 0 at ui/tuple/tuple-index-fat-types.rs:10:23: 10:33
    let mut _27: &[isize];               // in scope 0 at ui/tuple/tuple-index-fat-types.rs:11:17: 11:18
    let mut _28: (&&[isize], &&[isize]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _29: &&[isize];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _30: &&[isize];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _33: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _34: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _35: &&[isize];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _36: &&[isize];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _38: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _39: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _40: &&[isize];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _41: &&[isize];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _42: &&[isize];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _43: &&[isize];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _46: &[isize; 3];            // in scope 0 at ui/tuple/tuple-index-fat-types.rs:6:23: 6:33
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/tuple/tuple-index-fat-types.rs:6:9: 6:10
        let _4: (&[isize],);             // in scope 1 at ui/tuple/tuple-index-fat-types.rs:7:9: 7:10
        scope 2 {
            debug y => _4;               // in scope 2 at ui/tuple/tuple-index-fat-types.rs:7:9: 7:10
            let _9: &&[isize];           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _10: &&[isize];          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _23: &[isize];           // in scope 2 at ui/tuple/tuple-index-fat-types.rs:10:9: 10:10
            let mut _45: &[isize; 3];    // in scope 2 at ui/tuple/tuple-index-fat-types.rs:10:23: 10:33
            scope 3 {
                debug left_val => _9;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _10;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _15: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _15;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug x => _23;          // in scope 5 at ui/tuple/tuple-index-fat-types.rs:10:9: 10:10
                let _26: Foo<'_>;        // in scope 5 at ui/tuple/tuple-index-fat-types.rs:11:9: 11:10
                scope 6 {
                    debug y => _26;      // in scope 6 at ui/tuple/tuple-index-fat-types.rs:11:9: 11:10
                    let _31: &&[isize];  // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _32: &&[isize];  // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    scope 7 {
                        debug left_val => _31; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _32; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _37: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 8 {
                            debug kind => _37; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _46 = const _;                   // scope 0 at ui/tuple/tuple-index-fat-types.rs:6:23: 6:33
                                         // mir::Constant
                                         // + span: ui/tuple/tuple-index-fat-types.rs:6:23: 6:33
                                         // + literal: Const { ty: &[isize; 3], val: Unevaluated(main, [], Some(promoted[1])) }
        _3 = _46;                        // scope 0 at ui/tuple/tuple-index-fat-types.rs:6:23: 6:33
        _2 = _3;                         // scope 0 at ui/tuple/tuple-index-fat-types.rs:6:23: 6:33
        _1 = move _2 as &[isize] (Pointer(Unsize)); // scope 0 at ui/tuple/tuple-index-fat-types.rs:6:23: 6:33
        _5 = _1;                         // scope 1 at ui/tuple/tuple-index-fat-types.rs:7:14: 7:15
        _4 = (move _5,);                 // scope 1 at ui/tuple/tuple-index-fat-types.rs:7:13: 7:17
        _7 = &(_4.0: &[isize]);          // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _8 = &_1;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _6 = (move _7, move _8);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_6.0: &&[isize]);          // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_6.1: &&[isize]);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = <&[isize] as PartialEq>::eq(move _13, move _14) -> bb1; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = Not(move _12);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _15 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<&[isize], &[isize]>(move _17, move _18, move _20, move _22); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[isize], &'b &[isize], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[isize], &[isize]>}, val: Value(<ZST>) }
    }

    bb3: {
        _45 = const _;                   // scope 2 at ui/tuple/tuple-index-fat-types.rs:10:23: 10:33
                                         // mir::Constant
                                         // + span: ui/tuple/tuple-index-fat-types.rs:10:23: 10:33
                                         // + literal: Const { ty: &[isize; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _25 = _45;                       // scope 2 at ui/tuple/tuple-index-fat-types.rs:10:23: 10:33
        _24 = _25;                       // scope 2 at ui/tuple/tuple-index-fat-types.rs:10:23: 10:33
        _23 = move _24 as &[isize] (Pointer(Unsize)); // scope 2 at ui/tuple/tuple-index-fat-types.rs:10:23: 10:33
        _27 = _23;                       // scope 5 at ui/tuple/tuple-index-fat-types.rs:11:17: 11:18
        _26 = Foo::<'_>(move _27);       // scope 5 at ui/tuple/tuple-index-fat-types.rs:11:13: 11:19
        _29 = &(_26.0: &[isize]);        // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _30 = &_23;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _28 = (move _29, move _30);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _31 = (_28.0: &&[isize]);        // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _32 = (_28.1: &&[isize]);        // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _35 = _31;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _36 = _32;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _34 = <&[isize] as PartialEq>::eq(move _35, move _36) -> bb4; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _33 = Not(move _34);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _33) -> [0: bb6, otherwise: bb5]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _37 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _41 = _31;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _41;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _43 = _32;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = _43;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _44 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _38 = core::panicking::assert_failed::<&[isize], &[isize]>(move _39, move _40, move _42, move _44); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[isize], &'b &[isize], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[isize], &[isize]>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/tuple/tuple-index-fat-types.rs:13:2: 13:2
    }
}

promoted[0] in main: &[isize; 3] = {
    let mut _0: &[isize; 3];             // return place in scope 0 at ui/tuple/tuple-index-fat-types.rs:10:23: 10:33
    let mut _1: [isize; 3];              // in scope 0 at ui/tuple/tuple-index-fat-types.rs:10:24: 10:33

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize]; // scope 0 at ui/tuple/tuple-index-fat-types.rs:10:24: 10:33
        _0 = &_1;                        // scope 0 at ui/tuple/tuple-index-fat-types.rs:10:23: 10:33
        return;                          // scope 0 at ui/tuple/tuple-index-fat-types.rs:10:23: 10:33
    }
}

promoted[1] in main: &[isize; 3] = {
    let mut _0: &[isize; 3];             // return place in scope 0 at ui/tuple/tuple-index-fat-types.rs:6:23: 6:33
    let mut _1: [isize; 3];              // in scope 0 at ui/tuple/tuple-index-fat-types.rs:6:24: 6:33

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize]; // scope 0 at ui/tuple/tuple-index-fat-types.rs:6:24: 6:33
        _0 = &_1;                        // scope 0 at ui/tuple/tuple-index-fat-types.rs:6:23: 6:33
        return;                          // scope 0 at ui/tuple/tuple-index-fat-types.rs:6:23: 6:33
    }
}

fn Foo(_1: &[isize]) -> Foo<'_> {
    let mut _0: Foo<'_>;                 // return place in scope 0 at ui/tuple/tuple-index-fat-types.rs:3:1: 3:15

    bb0: {
        _0 = Foo::<'_>(move _1);         // scope 0 at ui/tuple/tuple-index-fat-types.rs:3:1: 3:15
        return;                          // scope 0 at ui/tuple/tuple-index-fat-types.rs:3:1: 3:15
    }
}

// MIR FOR CTFE
fn Foo(_1: &[isize]) -> Foo<'_> {
    let mut _0: Foo<'_>;                 // return place in scope 0 at ui/tuple/tuple-index-fat-types.rs:3:1: 3:15

    bb0: {
        _0 = Foo::<'_>(move _1);         // scope 0 at ui/tuple/tuple-index-fat-types.rs:3:1: 3:15
        return;                          // scope 0 at ui/tuple/tuple-index-fat-types.rs:3:1: 3:15
    }
}
