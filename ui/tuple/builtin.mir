// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn assert_is_tuple() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/tuple/builtin.rs:5:54: 5:54

    bb0: {
        return;                          // scope 0 at ui/tuple/builtin.rs:5:56: 5:56
    }
}

fn from_param_env() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/tuple/builtin.rs:9:53: 9:53
    let _1: ();                          // in scope 0 at ui/tuple/builtin.rs:10:5: 10:27

    bb0: {
        _1 = assert_is_tuple::<T>() -> bb1; // scope 0 at ui/tuple/builtin.rs:10:5: 10:27
                                         // mir::Constant
                                         // + span: ui/tuple/builtin.rs:10:5: 10:25
                                         // + literal: Const { ty: fn() {assert_is_tuple::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/tuple/builtin.rs:11:2: 11:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/tuple/builtin.rs:13:11: 13:11
    let _1: ();                          // in scope 0 at ui/tuple/builtin.rs:14:5: 14:28
    let _2: ();                          // in scope 0 at ui/tuple/builtin.rs:15:5: 15:32
    let _3: ();                          // in scope 0 at ui/tuple/builtin.rs:16:5: 16:36
    let _4: ();                          // in scope 0 at ui/tuple/builtin.rs:17:5: 17:27
    let _5: ();                          // in scope 0 at ui/tuple/builtin.rs:18:5: 18:31
    let _6: ();                          // in scope 0 at ui/tuple/builtin.rs:19:5: 19:35

    bb0: {
        _1 = assert_is_tuple::<()>() -> bb1; // scope 0 at ui/tuple/builtin.rs:14:5: 14:28
                                         // mir::Constant
                                         // + span: ui/tuple/builtin.rs:14:5: 14:26
                                         // + literal: Const { ty: fn() {assert_is_tuple::<()>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = assert_is_tuple::<(i32,)>() -> bb2; // scope 0 at ui/tuple/builtin.rs:15:5: 15:32
                                         // mir::Constant
                                         // + span: ui/tuple/builtin.rs:15:5: 15:30
                                         // + literal: Const { ty: fn() {assert_is_tuple::<(i32,)>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = assert_is_tuple::<(Unsized,)>() -> bb3; // scope 0 at ui/tuple/builtin.rs:16:5: 16:36
                                         // mir::Constant
                                         // + span: ui/tuple/builtin.rs:16:5: 16:34
                                         // + literal: Const { ty: fn() {assert_is_tuple::<(Unsized,)>}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = from_param_env::<()>() -> bb4; // scope 0 at ui/tuple/builtin.rs:17:5: 17:27
                                         // mir::Constant
                                         // + span: ui/tuple/builtin.rs:17:5: 17:25
                                         // + literal: Const { ty: fn() {from_param_env::<()>}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = from_param_env::<(i32,)>() -> bb5; // scope 0 at ui/tuple/builtin.rs:18:5: 18:31
                                         // mir::Constant
                                         // + span: ui/tuple/builtin.rs:18:5: 18:29
                                         // + literal: Const { ty: fn() {from_param_env::<(i32,)>}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = from_param_env::<(Unsized,)>() -> bb6; // scope 0 at ui/tuple/builtin.rs:19:5: 19:35
                                         // mir::Constant
                                         // + span: ui/tuple/builtin.rs:19:5: 19:33
                                         // + literal: Const { ty: fn() {from_param_env::<(Unsized,)>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/tuple/builtin.rs:20:2: 20:2
    }
}

fn Unsized(_1: [u8]) -> Unsized {
    let mut _0: Unsized;                 // return place in scope 0 at ui/tuple/builtin.rs:7:1: 7:15

    bb0: {
        _0 = Unsized(move _1);           // scope 0 at ui/tuple/builtin.rs:7:1: 7:15
        return;                          // scope 0 at ui/tuple/builtin.rs:7:1: 7:15
    }
}

// MIR FOR CTFE
fn Unsized(_1: [u8]) -> Unsized {
    let mut _0: Unsized;                 // return place in scope 0 at ui/tuple/builtin.rs:7:1: 7:15

    bb0: {
        _0 = Unsized(move _1);           // scope 0 at ui/tuple/builtin.rs:7:1: 7:15
        return;                          // scope 0 at ui/tuple/builtin.rs:7:1: 7:15
    }
}
