// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: (i32, (i32, i32));
    let mut _3: (i32, i32);
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (i32, (i32, (i32, i32)));
    let mut _17: (i32, (i32, i32));
    let mut _18: (i32, i32);
    let mut _19: (&i32, &i32);
    let mut _20: &i32;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: i32;
    let mut _26: i32;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug n => _1;
        let _6: &i32;
        let _7: &i32;
        let _15: i32;
        let mut _31: &i32;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug n => _15;
            let _21: &i32;
            let _22: &i32;
            let mut _30: &i32;
            scope 5 {
                debug left_val => _21;
                debug right_val => _22;
                let _27: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _27;
                }
            }
            scope 7 {
            }
        }
    }

    bb0: {
        _3 = (const 2_i32, const 3_i32);
        _2 = (const 1_i32, move _3);
        _1 = ((_2.1: (i32, i32)).1: i32);
        _5 = &_1;
        _31 = const _;
        _4 = (move _5, _31);
        _6 = (_4.0: &i32);
        _7 = (_4.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb2: {
        _18 = (const 3_i32, const 4_i32);
        _17 = (const 2_i32, move _18);
        _16 = (const 1_i32, move _17);
        _15 = (((_16.1: (i32, (i32, i32))).1: (i32, i32)).1: i32);
        _20 = &_15;
        _30 = const _;
        _19 = (move _20, _30);
        _21 = (_19.0: &i32);
        _22 = (_19.1: &i32);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<i32, i32>(move _27, _21, _22, move _29) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 4_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}
