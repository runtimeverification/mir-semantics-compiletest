// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (char,);
    let _2: char;
    let mut _3: (&char, &char);
    let mut _4: &char;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: char;
    let mut _10: char;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let _14: (char,);
    let mut _16: (&char, &char);
    let mut _17: &char;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: char;
    let mut _23: char;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _2;
        let _5: &char;
        let _6: &char;
        let mut _28: &char;
        scope 2 {
            debug left_val => _5;
            debug right_val => _6;
            let _11: core::panicking::AssertKind;
            scope 3 {
                debug kind => _11;
            }
        }
    }
    scope 4 {
        debug x => _14;
        let _15: char;
        scope 5 {
            debug y => _15;
            let _18: &char;
            let _19: &char;
            let mut _27: &char;
            scope 6 {
                debug left_val => _18;
                debug right_val => _19;
                let _24: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _24;
                }
            }
        }
    }

    bb0: {
        _1 = (const 'c',);
        _2 = (_1.0: char);
        _4 = &_2;
        _28 = const _;
        _3 = (move _4, _28);
        _5 = (_3.0: &char);
        _6 = (_3.1: &char);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<char, char>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb2: {
        _14 = (const 'd',);
        _15 = (_14.0: char);
        _17 = &_15;
        _27 = const _;
        _16 = (move _17, _27);
        _18 = (_16.0: &char);
        _19 = (_16.1: &char);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<char, char>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'd';
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'c';
        _0 = &_1;
        return;
    }
}
