// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/binop/operator-multidispatch.rs:7:10: 7:15>::fmt(_1: &Point, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/binop/operator-multidispatch.rs:7:10: 7:15
    debug f => _2;                       // in scope 0 at ui/binop/operator-multidispatch.rs:7:10: 7:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/binop/operator-multidispatch.rs:7:10: 7:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/binop/operator-multidispatch.rs:7:10: 7:15
    let mut _4: &str;                    // in scope 0 at ui/binop/operator-multidispatch.rs:7:10: 7:15
    let _5: &str;                        // in scope 0 at ui/binop/operator-multidispatch.rs:7:10: 7:15
    let mut _6: &str;                    // in scope 0 at ui/binop/operator-multidispatch.rs:9:5: 9:13
    let _7: &str;                        // in scope 0 at ui/binop/operator-multidispatch.rs:9:5: 9:13
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/binop/operator-multidispatch.rs:9:5: 9:13
    let mut _9: &isize;                  // in scope 0 at ui/binop/operator-multidispatch.rs:9:5: 9:13
    let _10: &isize;                     // in scope 0 at ui/binop/operator-multidispatch.rs:9:5: 9:13
    let mut _11: &str;                   // in scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
    let _12: &str;                       // in scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
    let mut _14: &&isize;                // in scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
    let _15: &&isize;                    // in scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
    let _16: &isize;                     // in scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/binop/operator-multidispatch.rs:7:10: 7:15
        _5 = const "Point";              // scope 0 at ui/binop/operator-multidispatch.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/binop/operator-multidispatch.rs:7:10: 7:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/binop/operator-multidispatch.rs:7:10: 7:15
        _7 = const "x";                  // scope 0 at ui/binop/operator-multidispatch.rs:9:5: 9:13
                                         // mir::Constant
                                         // + span: ui/binop/operator-multidispatch.rs:9:5: 9:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/binop/operator-multidispatch.rs:9:5: 9:13
        _10 = &((*_1).0: isize);         // scope 0 at ui/binop/operator-multidispatch.rs:9:5: 9:13
        _9 = _10;                        // scope 0 at ui/binop/operator-multidispatch.rs:9:5: 9:13
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/binop/operator-multidispatch.rs:9:5: 9:13
        _12 = const "y";                 // scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
                                         // mir::Constant
                                         // + span: ui/binop/operator-multidispatch.rs:10:5: 10:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
        _16 = &((*_1).1: isize);         // scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
        _15 = &_16;                      // scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
        _14 = _15;                       // scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _3, move _4, move _6, move _8, move _11, move _13) -> bb1; // scope 0 at ui/binop/operator-multidispatch.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/binop/operator-multidispatch.rs:7:10: 7:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/binop/operator-multidispatch.rs:7:15: 7:15
    }
}

fn <impl at ui/binop/operator-multidispatch.rs:7:16: 7:25>::eq(_1: &Point, _2: &Point) -> bool {
    debug self => _1;                    // in scope 0 at ui/binop/operator-multidispatch.rs:7:16: 7:25
    debug other => _2;                   // in scope 0 at ui/binop/operator-multidispatch.rs:7:16: 7:25
    let mut _0: bool;                    // return place in scope 0 at ui/binop/operator-multidispatch.rs:7:16: 7:25
    let mut _3: bool;                    // in scope 0 at ui/binop/operator-multidispatch.rs:9:5: 9:13
    let mut _4: isize;                   // in scope 0 at ui/binop/operator-multidispatch.rs:9:5: 9:13
    let mut _5: isize;                   // in scope 0 at ui/binop/operator-multidispatch.rs:9:5: 9:13
    let mut _6: bool;                    // in scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
    let mut _7: isize;                   // in scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
    let mut _8: isize;                   // in scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13

    bb0: {
        _4 = ((*_1).0: isize);           // scope 0 at ui/binop/operator-multidispatch.rs:9:5: 9:13
        _5 = ((*_2).0: isize);           // scope 0 at ui/binop/operator-multidispatch.rs:9:5: 9:13
        _3 = Eq(move _4, move _5);       // scope 0 at ui/binop/operator-multidispatch.rs:9:5: 9:13
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
        goto -> bb3;                     // scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
    }

    bb2: {
        _7 = ((*_1).1: isize);           // scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
        _8 = ((*_2).1: isize);           // scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
        _6 = Eq(move _7, move _8);       // scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
        _0 = move _6;                    // scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
        goto -> bb3;                     // scope 0 at ui/binop/operator-multidispatch.rs:10:5: 10:13
    }

    bb3: {
        return;                          // scope 0 at ui/binop/operator-multidispatch.rs:7:25: 7:25
    }
}

fn <impl at ui/binop/operator-multidispatch.rs:7:26: 7:28>::assert_receiver_is_total_eq(_1: &Point) -> () {
    debug self => _1;                    // in scope 0 at ui/binop/operator-multidispatch.rs:7:26: 7:28
    let mut _0: ();                      // return place in scope 0 at ui/binop/operator-multidispatch.rs:7:26: 7:28
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/binop/operator-multidispatch.rs:7:28: 7:28
    }
}

fn <impl at ui/binop/operator-multidispatch.rs:13:1: 13:24>::add(_1: Point, _2: Point) -> Point {
    debug self => _1;                    // in scope 0 at ui/binop/operator-multidispatch.rs:16:12: 16:16
    debug other => _2;                   // in scope 0 at ui/binop/operator-multidispatch.rs:16:18: 16:23
    let mut _0: Point;                   // return place in scope 0 at ui/binop/operator-multidispatch.rs:16:35: 16:40
    let mut _3: isize;                   // in scope 0 at ui/binop/operator-multidispatch.rs:17:19: 17:35
    let mut _4: isize;                   // in scope 0 at ui/binop/operator-multidispatch.rs:17:19: 17:25
    let mut _5: isize;                   // in scope 0 at ui/binop/operator-multidispatch.rs:17:28: 17:35
    let mut _6: (isize, bool);           // in scope 0 at ui/binop/operator-multidispatch.rs:17:19: 17:35
    let mut _7: isize;                   // in scope 0 at ui/binop/operator-multidispatch.rs:17:40: 17:56
    let mut _8: isize;                   // in scope 0 at ui/binop/operator-multidispatch.rs:17:40: 17:46
    let mut _9: isize;                   // in scope 0 at ui/binop/operator-multidispatch.rs:17:49: 17:56
    let mut _10: (isize, bool);          // in scope 0 at ui/binop/operator-multidispatch.rs:17:40: 17:56

    bb0: {
        _4 = (_1.0: isize);              // scope 0 at ui/binop/operator-multidispatch.rs:17:19: 17:25
        _5 = (_2.0: isize);              // scope 0 at ui/binop/operator-multidispatch.rs:17:28: 17:35
        _6 = CheckedAdd(_4, _5);         // scope 0 at ui/binop/operator-multidispatch.rs:17:19: 17:35
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> bb1; // scope 0 at ui/binop/operator-multidispatch.rs:17:19: 17:35
    }

    bb1: {
        _3 = move (_6.0: isize);         // scope 0 at ui/binop/operator-multidispatch.rs:17:19: 17:35
        _8 = (_1.1: isize);              // scope 0 at ui/binop/operator-multidispatch.rs:17:40: 17:46
        _9 = (_2.1: isize);              // scope 0 at ui/binop/operator-multidispatch.rs:17:49: 17:56
        _10 = CheckedAdd(_8, _9);        // scope 0 at ui/binop/operator-multidispatch.rs:17:40: 17:56
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, move _9) -> bb2; // scope 0 at ui/binop/operator-multidispatch.rs:17:40: 17:56
    }

    bb2: {
        _7 = move (_10.0: isize);        // scope 0 at ui/binop/operator-multidispatch.rs:17:40: 17:56
        _0 = Point { x: move _3, y: move _7 }; // scope 0 at ui/binop/operator-multidispatch.rs:17:9: 17:57
        return;                          // scope 0 at ui/binop/operator-multidispatch.rs:18:6: 18:6
    }
}

fn <impl at ui/binop/operator-multidispatch.rs:21:1: 21:31>::add(_1: Point, _2: isize) -> Point {
    debug self => _1;                    // in scope 0 at ui/binop/operator-multidispatch.rs:24:12: 24:16
    debug other => _2;                   // in scope 0 at ui/binop/operator-multidispatch.rs:24:18: 24:23
    let mut _0: Point;                   // return place in scope 0 at ui/binop/operator-multidispatch.rs:24:35: 24:40
    let mut _3: isize;                   // in scope 0 at ui/binop/operator-multidispatch.rs:25:19: 25:33
    let mut _4: isize;                   // in scope 0 at ui/binop/operator-multidispatch.rs:25:19: 25:25
    let mut _5: isize;                   // in scope 0 at ui/binop/operator-multidispatch.rs:25:28: 25:33
    let mut _6: (isize, bool);           // in scope 0 at ui/binop/operator-multidispatch.rs:25:19: 25:33
    let mut _7: isize;                   // in scope 0 at ui/binop/operator-multidispatch.rs:26:19: 26:33
    let mut _8: isize;                   // in scope 0 at ui/binop/operator-multidispatch.rs:26:19: 26:25
    let mut _9: isize;                   // in scope 0 at ui/binop/operator-multidispatch.rs:26:28: 26:33
    let mut _10: (isize, bool);          // in scope 0 at ui/binop/operator-multidispatch.rs:26:19: 26:33

    bb0: {
        _4 = (_1.0: isize);              // scope 0 at ui/binop/operator-multidispatch.rs:25:19: 25:25
        _5 = _2;                         // scope 0 at ui/binop/operator-multidispatch.rs:25:28: 25:33
        _6 = CheckedAdd(_4, _5);         // scope 0 at ui/binop/operator-multidispatch.rs:25:19: 25:33
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> bb1; // scope 0 at ui/binop/operator-multidispatch.rs:25:19: 25:33
    }

    bb1: {
        _3 = move (_6.0: isize);         // scope 0 at ui/binop/operator-multidispatch.rs:25:19: 25:33
        _8 = (_1.1: isize);              // scope 0 at ui/binop/operator-multidispatch.rs:26:19: 26:25
        _9 = _2;                         // scope 0 at ui/binop/operator-multidispatch.rs:26:28: 26:33
        _10 = CheckedAdd(_8, _9);        // scope 0 at ui/binop/operator-multidispatch.rs:26:19: 26:33
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, move _9) -> bb2; // scope 0 at ui/binop/operator-multidispatch.rs:26:19: 26:33
    }

    bb2: {
        _7 = move (_10.0: isize);        // scope 0 at ui/binop/operator-multidispatch.rs:26:19: 26:33
        _0 = Point { x: move _3, y: move _7 }; // scope 0 at ui/binop/operator-multidispatch.rs:25:9: 26:34
        return;                          // scope 0 at ui/binop/operator-multidispatch.rs:27:6: 27:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binop/operator-multidispatch.rs:30:15: 30:15
    let mut _1: Point;                   // in scope 0 at ui/binop/operator-multidispatch.rs:31:9: 31:14
    let mut _2: Point;                   // in scope 0 at ui/binop/operator-multidispatch.rs:32:9: 32:35
    let mut _3: Point;                   // in scope 0 at ui/binop/operator-multidispatch.rs:32:9: 32:10
    let mut _4: Point;                   // in scope 0 at ui/binop/operator-multidispatch.rs:32:13: 32:35
    let mut _5: (&Point, &Point);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &Point;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _7: &Point;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &Point;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &Point;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: Point;                  // in scope 0 at ui/binop/operator-multidispatch.rs:34:9: 34:14
    let mut _23: Point;                  // in scope 0 at ui/binop/operator-multidispatch.rs:34:9: 34:10
    let mut _24: (&Point, &Point);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _25: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _26: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _31: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _32: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _34: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _35: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _36: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _37: &Point;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _38: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _39: &Point;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug p => _1;                   // in scope 1 at ui/binop/operator-multidispatch.rs:31:9: 31:14
        let _8: &Point;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _9: &Point;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _27: &Point;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _28: &Point;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _41: &Point;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _42: &Point;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _8;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _9;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _14: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _14;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _27;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _28;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _33: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _33;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = Point { x: const 10_isize, y: const 20_isize }; // scope 0 at ui/binop/operator-multidispatch.rs:31:17: 31:37
        _3 = move _1;                    // scope 1 at ui/binop/operator-multidispatch.rs:32:9: 32:10
        _4 = Point { x: const 101_isize, y: const 102_isize }; // scope 1 at ui/binop/operator-multidispatch.rs:32:13: 32:35
        _2 = <Point as Add>::add(move _3, move _4) -> bb1; // scope 1 at ui/binop/operator-multidispatch.rs:32:9: 32:35
                                         // mir::Constant
                                         // + span: ui/binop/operator-multidispatch.rs:32:9: 32:35
                                         // + literal: Const { ty: fn(Point, Point) -> <Point as Add>::Output {<Point as Add>::add}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = move _2;                    // scope 1 at ui/binop/operator-multidispatch.rs:32:5: 32:35
        _6 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _42 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Point, val: Unevaluated(main, [], Some(promoted[1])) }
        _7 = _42;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _7);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_5.0: &Point);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_5.1: &Point);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = <Point as PartialEq>::eq(move _12, move _13) -> bb2; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Point, &'b Point) -> bool {<Point as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = Not(move _11);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<Point, Point>(move _16, move _17, move _19, move _21); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Point, &'b Point, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Point, Point>}, val: Value(<ZST>) }
    }

    bb4: {
        _23 = move _1;                   // scope 1 at ui/binop/operator-multidispatch.rs:34:9: 34:10
        _22 = <Point as Add<isize>>::add(move _23, const 1_isize) -> bb5; // scope 1 at ui/binop/operator-multidispatch.rs:34:9: 34:14
                                         // mir::Constant
                                         // + span: ui/binop/operator-multidispatch.rs:34:9: 34:14
                                         // + literal: Const { ty: fn(Point, isize) -> <Point as Add<isize>>::Output {<Point as Add<isize>>::add}, val: Value(<ZST>) }
    }

    bb5: {
        _1 = move _22;                   // scope 1 at ui/binop/operator-multidispatch.rs:34:5: 34:14
        _25 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _41 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Point, val: Unevaluated(main, [], Some(promoted[0])) }
        _26 = _41;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _24 = (move _25, move _26);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _27 = (_24.0: &Point);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _28 = (_24.1: &Point);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _31 = _27;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _32 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _30 = <Point as PartialEq>::eq(move _31, move _32) -> bb6; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Point, &'b Point) -> bool {<Point as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _29 = Not(move _30);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _29) -> [0: bb8, otherwise: bb7]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _33 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = _27;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _37;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = _39;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _34 = core::panicking::assert_failed::<Point, Point>(move _35, move _36, move _38, move _40); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Point, &'b Point, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Point, Point>}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/binop/operator-multidispatch.rs:36:2: 36:2
    }
}

promoted[0] in main: &Point = {
    let mut _0: &Point;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Point;                   // in scope 0 at ui/binop/operator-multidispatch.rs:35:19: 35:41

    bb0: {
        _1 = Point { x: const 112_isize, y: const 123_isize }; // scope 0 at ui/binop/operator-multidispatch.rs:35:19: 35:41
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &Point = {
    let mut _0: &Point;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Point;                   // in scope 0 at ui/binop/operator-multidispatch.rs:33:19: 33:41

    bb0: {
        _1 = Point { x: const 111_isize, y: const 122_isize }; // scope 0 at ui/binop/operator-multidispatch.rs:33:19: 33:41
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
