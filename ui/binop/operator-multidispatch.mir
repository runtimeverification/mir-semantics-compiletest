// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/binop/operator-multidispatch.rs:7:10: 7:15>::fmt(_1: &Point, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &isize;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&isize;
    let _10: &isize;

    bb0: {
        _3 = const "Point";
        _4 = const "x";
        _6 = &((*_1).0: isize);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "y";
        _10 = &((*_1).1: isize);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/binop/operator-multidispatch.rs:7:16: 7:25>::eq(_1: &Point, _2: &Point) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: bool;
    let mut _7: isize;
    let mut _8: isize;

    bb0: {
        _4 = ((*_1).0: isize);
        _5 = ((*_2).0: isize);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = ((*_1).1: isize);
        _8 = ((*_2).1: isize);
        _6 = Eq(move _7, move _8);
        _0 = move _6;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/binop/operator-multidispatch.rs:7:26: 7:28>::assert_receiver_is_total_eq(_1: &Point) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at ui/binop/operator-multidispatch.rs:13:1: 13:24>::add(_1: Point, _2: Point) -> Point {
    debug self => _1;
    debug other => _2;
    let mut _0: Point;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: isize;
    let mut _7: isize;
    let mut _8: isize;

    bb0: {
        _4 = (_1.0: isize);
        _5 = (_2.0: isize);
        _3 = Add(move _4, move _5);
        _7 = (_1.1: isize);
        _8 = (_2.1: isize);
        _6 = Add(move _7, move _8);
        _0 = Point { x: move _3, y: move _6 };
        return;
    }
}

fn <impl at ui/binop/operator-multidispatch.rs:21:1: 21:31>::add(_1: Point, _2: isize) -> Point {
    debug self => _1;
    debug other => _2;
    let mut _0: Point;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: isize;

    bb0: {
        _4 = (_1.0: isize);
        _3 = Add(move _4, _2);
        _6 = (_1.1: isize);
        _5 = Add(move _6, _2);
        _0 = Point { x: move _3, y: move _5 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Point;
    let mut _2: Point;
    let mut _3: Point;
    let mut _4: Point;
    let mut _5: (&Point, &Point);
    let mut _6: &Point;
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: Point;
    let mut _15: Point;
    let mut _16: (&Point, &Point);
    let mut _17: &Point;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug p => _1;
        let _7: &Point;
        let _8: &Point;
        let _18: &Point;
        let _19: &Point;
        let mut _25: &Point;
        let mut _26: &Point;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _11: core::panicking::AssertKind;
            scope 3 {
                debug kind => _11;
            }
        }
        scope 4 {
            debug left_val => _18;
            debug right_val => _19;
            let _22: core::panicking::AssertKind;
            scope 5 {
                debug kind => _22;
            }
        }
    }

    bb0: {
        _1 = Point { x: const 10_isize, y: const 20_isize };
        _3 = move _1;
        _4 = Point { x: const 101_isize, y: const 102_isize };
        _2 = <Point as Add>::add(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = move _2;
        _6 = &_1;
        _26 = const _;
        _5 = (move _6, _26);
        _7 = (_5.0: &Point);
        _8 = (_5.1: &Point);
        _10 = <Point as PartialEq>::eq(_7, _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<Point, Point>(move _11, _7, _8, move _13) -> unwind continue;
    }

    bb4: {
        _15 = move _1;
        _14 = <Point as Add<isize>>::add(move _15, const 1_isize) -> [return: bb5, unwind continue];
    }

    bb5: {
        _1 = move _14;
        _17 = &_1;
        _25 = const _;
        _16 = (move _17, _25);
        _18 = (_16.0: &Point);
        _19 = (_16.1: &Point);
        _21 = <Point as PartialEq>::eq(_18, _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<Point, Point>(move _22, _18, _19, move _24) -> unwind continue;
    }

    bb8: {
        return;
    }
}

promoted[0] in main: &Point = {
    let mut _0: &Point;
    let mut _1: Point;

    bb0: {
        _1 = Point { x: const 112_isize, y: const 123_isize };
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Point = {
    let mut _0: &Point;
    let mut _1: Point;

    bb0: {
        _1 = Point { x: const 111_isize, y: const 122_isize };
        _0 = &_1;
        return;
    }
}
