// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/binop/structured-compare.rs:6:16: 6:21>::clone(_1: &foo) -> foo {
    debug self => _1;                    // in scope 0 at ui/binop/structured-compare.rs:6:16: 6:21
    let mut _0: foo;                     // return place in scope 0 at ui/binop/structured-compare.rs:6:16: 6:21

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/binop/structured-compare.rs:6:16: 6:21
        return;                          // scope 0 at ui/binop/structured-compare.rs:6:21: 6:21
    }
}

fn <impl at ui/binop/structured-compare.rs:6:23: 6:28>::fmt(_1: &foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/binop/structured-compare.rs:6:23: 6:28
    debug f => _2;                       // in scope 0 at ui/binop/structured-compare.rs:6:23: 6:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/binop/structured-compare.rs:6:23: 6:28
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/binop/structured-compare.rs:6:23: 6:28
    let mut _4: &str;                    // in scope 0 at ui/binop/structured-compare.rs:6:23: 6:28
    let mut _5: isize;                   // in scope 0 at ui/binop/structured-compare.rs:6:23: 6:28
    let _6: &str;                        // in scope 0 at ui/binop/structured-compare.rs:6:23: 6:28
    let _7: &str;                        // in scope 0 at ui/binop/structured-compare.rs:6:23: 6:28

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/binop/structured-compare.rs:6:23: 6:28
        _5 = discriminant((*_1));        // scope 0 at ui/binop/structured-compare.rs:6:23: 6:28
        switchInt(move _5) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/binop/structured-compare.rs:6:23: 6:28
    }

    bb1: {
        _7 = const "small";              // scope 0 at ui/binop/structured-compare.rs:6:23: 6:28
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:6:23: 6:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _7;                         // scope 0 at ui/binop/structured-compare.rs:6:23: 6:28
        goto -> bb4;                     // scope 0 at ui/binop/structured-compare.rs:6:27: 6:28
    }

    bb2: {
        unreachable;                     // scope 0 at ui/binop/structured-compare.rs:6:23: 6:28
    }

    bb3: {
        _6 = const "large";              // scope 0 at ui/binop/structured-compare.rs:6:23: 6:28
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:6:23: 6:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _6;                         // scope 0 at ui/binop/structured-compare.rs:6:23: 6:28
        goto -> bb4;                     // scope 0 at ui/binop/structured-compare.rs:6:27: 6:28
    }

    bb4: {
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb5; // scope 0 at ui/binop/structured-compare.rs:6:23: 6:28
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:6:23: 6:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/binop/structured-compare.rs:6:28: 6:28
    }
}

fn <impl at ui/binop/structured-compare.rs:9:1: 9:23>::eq(_1: &foo, _2: &foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/binop/structured-compare.rs:10:11: 10:16
    debug other => _2;                   // in scope 0 at ui/binop/structured-compare.rs:10:18: 10:23
    let mut _0: bool;                    // return place in scope 0 at ui/binop/structured-compare.rs:10:34: 10:38
    let mut _3: usize;                   // in scope 0 at ui/binop/structured-compare.rs:11:9: 11:27
    let _4: foo;                         // in scope 0 at ui/binop/structured-compare.rs:11:10: 11:17
    let mut _5: isize;                   // in scope 0 at ui/binop/structured-compare.rs:11:10: 11:17
    let mut _6: bool;                    // in scope 0 at ui/binop/structured-compare.rs:11:9: 11:27
    let mut _7: bool;                    // in scope 0 at ui/binop/structured-compare.rs:11:9: 11:27
    let mut _8: usize;                   // in scope 0 at ui/binop/structured-compare.rs:11:31: 11:50
    let _9: foo;                         // in scope 0 at ui/binop/structured-compare.rs:11:32: 11:40
    let mut _10: isize;                  // in scope 0 at ui/binop/structured-compare.rs:11:32: 11:40
    let mut _11: bool;                   // in scope 0 at ui/binop/structured-compare.rs:11:31: 11:50
    let mut _12: bool;                   // in scope 0 at ui/binop/structured-compare.rs:11:31: 11:50

    bb0: {
        _4 = (*_1);                      // scope 0 at ui/binop/structured-compare.rs:11:10: 11:17
        _5 = discriminant(_4);           // scope 0 at ui/binop/structured-compare.rs:11:9: 11:27
        _6 = Ge(const 1_isize, _5);      // scope 0 at ui/binop/structured-compare.rs:11:9: 11:27
        assume(_6);                      // scope 0 at ui/binop/structured-compare.rs:11:9: 11:27
        _7 = Le(const 0_isize, _5);      // scope 0 at ui/binop/structured-compare.rs:11:9: 11:27
        assume(_7);                      // scope 0 at ui/binop/structured-compare.rs:11:9: 11:27
        _3 = move _5 as usize (IntToInt); // scope 0 at ui/binop/structured-compare.rs:11:9: 11:27
        _9 = (*_2);                      // scope 0 at ui/binop/structured-compare.rs:11:32: 11:40
        _10 = discriminant(_9);          // scope 0 at ui/binop/structured-compare.rs:11:31: 11:50
        _11 = Ge(const 1_isize, _10);    // scope 0 at ui/binop/structured-compare.rs:11:31: 11:50
        assume(_11);                     // scope 0 at ui/binop/structured-compare.rs:11:31: 11:50
        _12 = Le(const 0_isize, _10);    // scope 0 at ui/binop/structured-compare.rs:11:31: 11:50
        assume(_12);                     // scope 0 at ui/binop/structured-compare.rs:11:31: 11:50
        _8 = move _10 as usize (IntToInt); // scope 0 at ui/binop/structured-compare.rs:11:31: 11:50
        _0 = Eq(move _3, move _8);       // scope 0 at ui/binop/structured-compare.rs:11:9: 11:50
        return;                          // scope 0 at ui/binop/structured-compare.rs:12:6: 12:6
    }
}

fn <impl at ui/binop/structured-compare.rs:9:1: 9:23>::ne(_1: &foo, _2: &foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/binop/structured-compare.rs:13:11: 13:16
    debug other => _2;                   // in scope 0 at ui/binop/structured-compare.rs:13:18: 13:23
    let mut _0: bool;                    // return place in scope 0 at ui/binop/structured-compare.rs:13:34: 13:38
    let mut _3: bool;                    // in scope 0 at ui/binop/structured-compare.rs:13:42: 13:59
    let mut _4: &foo;                    // in scope 0 at ui/binop/structured-compare.rs:13:42: 13:59
    let mut _5: &foo;                    // in scope 0 at ui/binop/structured-compare.rs:13:53: 13:58

    bb0: {
        _4 = _1;                         // scope 0 at ui/binop/structured-compare.rs:13:42: 13:59
        _5 = _2;                         // scope 0 at ui/binop/structured-compare.rs:13:53: 13:58
        _3 = <foo as PartialEq>::eq(move _4, move _5) -> bb1; // scope 0 at ui/binop/structured-compare.rs:13:42: 13:59
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:13:50: 13:52
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a foo, &'b foo) -> bool {<foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Not(move _3);               // scope 0 at ui/binop/structured-compare.rs:13:41: 13:59
        return;                          // scope 0 at ui/binop/structured-compare.rs:13:61: 13:61
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binop/structured-compare.rs:16:15: 16:15
    let _1: (i32, i32, i32);             // in scope 0 at ui/binop/structured-compare.rs:17:9: 17:10
    let mut _3: (&(i32, i32, i32), &(i32, i32, i32)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &(i32, i32, i32);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _5: &(i32, i32, i32);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &(i32, i32, i32);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &(i32, i32, i32);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &(i32, i32, i32);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &(i32, i32, i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &(i32, i32, i32);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &(i32, i32, i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: bool;                   // in scope 0 at ui/binop/structured-compare.rs:20:5: 20:30
    let mut _21: bool;                   // in scope 0 at ui/binop/structured-compare.rs:20:13: 20:29
    let mut _22: &(i32, i32, i32);       // in scope 0 at ui/binop/structured-compare.rs:20:14: 20:15
    let mut _23: &(i32, i32, i32);       // in scope 0 at ui/binop/structured-compare.rs:20:19: 20:28
    let mut _24: !;                      // in scope 0 at ui/binop/structured-compare.rs:20:5: 20:30
    let mut _25: bool;                   // in scope 0 at ui/binop/structured-compare.rs:21:5: 21:29
    let mut _26: bool;                   // in scope 0 at ui/binop/structured-compare.rs:21:13: 21:28
    let mut _27: &(i32, i32, i32);       // in scope 0 at ui/binop/structured-compare.rs:21:14: 21:15
    let mut _28: &(i32, i32, i32);       // in scope 0 at ui/binop/structured-compare.rs:21:18: 21:27
    let mut _29: !;                      // in scope 0 at ui/binop/structured-compare.rs:21:5: 21:29
    let mut _30: bool;                   // in scope 0 at ui/binop/structured-compare.rs:22:5: 22:30
    let mut _31: bool;                   // in scope 0 at ui/binop/structured-compare.rs:22:13: 22:29
    let mut _32: &(i32, i32, i32);       // in scope 0 at ui/binop/structured-compare.rs:22:14: 22:15
    let mut _33: &(i32, i32, i32);       // in scope 0 at ui/binop/structured-compare.rs:22:19: 22:28
    let mut _34: !;                      // in scope 0 at ui/binop/structured-compare.rs:22:5: 22:30
    let mut _35: bool;                   // in scope 0 at ui/binop/structured-compare.rs:23:5: 23:29
    let mut _36: bool;                   // in scope 0 at ui/binop/structured-compare.rs:23:13: 23:28
    let mut _37: &(i32, i32, i32);       // in scope 0 at ui/binop/structured-compare.rs:23:14: 23:23
    let mut _38: &(i32, i32, i32);       // in scope 0 at ui/binop/structured-compare.rs:23:26: 23:27
    let mut _39: !;                      // in scope 0 at ui/binop/structured-compare.rs:23:5: 23:29
    let mut _40: bool;                   // in scope 0 at ui/binop/structured-compare.rs:24:5: 24:30
    let mut _41: bool;                   // in scope 0 at ui/binop/structured-compare.rs:24:13: 24:29
    let mut _42: &(i32, i32, i32);       // in scope 0 at ui/binop/structured-compare.rs:24:14: 24:23
    let mut _43: &(i32, i32, i32);       // in scope 0 at ui/binop/structured-compare.rs:24:27: 24:28
    let mut _44: !;                      // in scope 0 at ui/binop/structured-compare.rs:24:5: 24:30
    let mut _47: bool;                   // in scope 0 at ui/binop/structured-compare.rs:27:5: 27:22
    let mut _48: bool;                   // in scope 0 at ui/binop/structured-compare.rs:27:13: 27:21
    let mut _49: &foo;                   // in scope 0 at ui/binop/structured-compare.rs:27:14: 27:15
    let mut _50: &foo;                   // in scope 0 at ui/binop/structured-compare.rs:27:19: 27:20
    let mut _51: !;                      // in scope 0 at ui/binop/structured-compare.rs:27:5: 27:22
    let mut _52: (&foo, &foo);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _53: &foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _54: &foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _57: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _58: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _59: &foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _60: &foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _62: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _63: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _64: &foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _65: &foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _66: &foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _67: &foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _68: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _69: bool;                   // in scope 0 at ui/binop/structured-compare.rs:29:5: 29:31
    let mut _70: bool;                   // in scope 0 at ui/binop/structured-compare.rs:29:13: 29:30
    let mut _71: &foo;                   // in scope 0 at ui/binop/structured-compare.rs:29:14: 29:15
    let mut _72: &foo;                   // in scope 0 at ui/binop/structured-compare.rs:29:19: 29:29
    let mut _73: !;                      // in scope 0 at ui/binop/structured-compare.rs:29:5: 29:31
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/binop/structured-compare.rs:17:9: 17:10
        let _2: (i32, i32, i32);         // in scope 1 at ui/binop/structured-compare.rs:18:9: 18:10
        scope 2 {
            debug b => _2;               // in scope 2 at ui/binop/structured-compare.rs:18:9: 18:10
            let _6: &(i32, i32, i32);    // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _7: &(i32, i32, i32);    // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _45: foo;                // in scope 2 at ui/binop/structured-compare.rs:25:9: 25:10
            let mut _76: &(i32, i32, i32); // in scope 2 at ui/binop/structured-compare.rs:24:14: 24:23
            let mut _77: &(i32, i32, i32); // in scope 2 at ui/binop/structured-compare.rs:23:14: 23:23
            let mut _78: &(i32, i32, i32); // in scope 2 at ui/binop/structured-compare.rs:22:19: 22:28
            let mut _79: &(i32, i32, i32); // in scope 2 at ui/binop/structured-compare.rs:21:18: 21:27
            let mut _80: &(i32, i32, i32); // in scope 2 at ui/binop/structured-compare.rs:20:19: 20:28
            scope 3 {
                debug left_val => _6;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _7;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _12: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _12;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug x => _45;          // in scope 5 at ui/binop/structured-compare.rs:25:9: 25:10
                let _46: foo;            // in scope 5 at ui/binop/structured-compare.rs:26:9: 26:10
                scope 6 {
                    debug y => _46;      // in scope 6 at ui/binop/structured-compare.rs:26:9: 26:10
                    let _55: &foo;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _56: &foo;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let mut _74: &foo;   // in scope 6 at ui/binop/structured-compare.rs:29:19: 29:29
                    let mut _75: &foo;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 7 {
                        debug left_val => _55; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _56; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _61: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 8 {
                            debug kind => _61; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = (const 1_i32, const 2_i32, const 3_i32); // scope 0 at ui/binop/structured-compare.rs:17:13: 17:22
        _2 = (const 1_i32, const 2_i32, const 3_i32); // scope 1 at ui/binop/structured-compare.rs:18:13: 18:22
        _4 = &_1;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _5 = &_2;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _5);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_3.0: &(i32, i32, i32));   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_3.1: &(i32, i32, i32));   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <(i32, i32, i32) as PartialEq>::eq(move _10, move _11) -> bb1; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (i32, i32, i32), &'b (i32, i32, i32)) -> bool {<(i32, i32, i32) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = Not(move _9);               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _12 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<(i32, i32, i32), (i32, i32, i32)>(move _14, move _15, move _17, move _19); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (i32, i32, i32), &'b (i32, i32, i32), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(i32, i32, i32), (i32, i32, i32)>}, val: Value(<ZST>) }
    }

    bb3: {
        _22 = &_1;                       // scope 2 at ui/binop/structured-compare.rs:20:14: 20:15
        _80 = const _;                   // scope 2 at ui/binop/structured-compare.rs:20:19: 20:28
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:20:19: 20:28
                                         // + literal: Const { ty: &(i32, i32, i32), val: Unevaluated(main, [], Some(promoted[6])) }
        _23 = _80;                       // scope 2 at ui/binop/structured-compare.rs:20:19: 20:28
        _21 = <(i32, i32, i32) as PartialEq>::ne(move _22, move _23) -> bb4; // scope 2 at ui/binop/structured-compare.rs:20:13: 20:29
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:20:13: 20:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (i32, i32, i32), &'b (i32, i32, i32)) -> bool {<(i32, i32, i32) as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb4: {
        _20 = Not(move _21);             // scope 2 at ui/binop/structured-compare.rs:20:5: 20:30
        switchInt(move _20) -> [0: bb6, otherwise: bb5]; // scope 2 at ui/binop/structured-compare.rs:20:5: 20:30
    }

    bb5: {
        _24 = core::panicking::panic(const "assertion failed: (a != (1, 2, 4))"); // scope 2 at ui/binop/structured-compare.rs:20:5: 20:30
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:20:5: 20:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _27 = &_1;                       // scope 2 at ui/binop/structured-compare.rs:21:14: 21:15
        _79 = const _;                   // scope 2 at ui/binop/structured-compare.rs:21:18: 21:27
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:21:18: 21:27
                                         // + literal: Const { ty: &(i32, i32, i32), val: Unevaluated(main, [], Some(promoted[5])) }
        _28 = _79;                       // scope 2 at ui/binop/structured-compare.rs:21:18: 21:27
        _26 = <(i32, i32, i32) as PartialOrd>::lt(move _27, move _28) -> bb7; // scope 2 at ui/binop/structured-compare.rs:21:13: 21:28
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:21:13: 21:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (i32, i32, i32), &'b (i32, i32, i32)) -> bool {<(i32, i32, i32) as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb7: {
        _25 = Not(move _26);             // scope 2 at ui/binop/structured-compare.rs:21:5: 21:29
        switchInt(move _25) -> [0: bb9, otherwise: bb8]; // scope 2 at ui/binop/structured-compare.rs:21:5: 21:29
    }

    bb8: {
        _29 = core::panicking::panic(const "assertion failed: (a < (1, 2, 4))"); // scope 2 at ui/binop/structured-compare.rs:21:5: 21:29
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:21:5: 21:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _32 = &_1;                       // scope 2 at ui/binop/structured-compare.rs:22:14: 22:15
        _78 = const _;                   // scope 2 at ui/binop/structured-compare.rs:22:19: 22:28
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:22:19: 22:28
                                         // + literal: Const { ty: &(i32, i32, i32), val: Unevaluated(main, [], Some(promoted[4])) }
        _33 = _78;                       // scope 2 at ui/binop/structured-compare.rs:22:19: 22:28
        _31 = <(i32, i32, i32) as PartialOrd>::le(move _32, move _33) -> bb10; // scope 2 at ui/binop/structured-compare.rs:22:13: 22:29
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:22:13: 22:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (i32, i32, i32), &'b (i32, i32, i32)) -> bool {<(i32, i32, i32) as PartialOrd>::le}, val: Value(<ZST>) }
    }

    bb10: {
        _30 = Not(move _31);             // scope 2 at ui/binop/structured-compare.rs:22:5: 22:30
        switchInt(move _30) -> [0: bb12, otherwise: bb11]; // scope 2 at ui/binop/structured-compare.rs:22:5: 22:30
    }

    bb11: {
        _34 = core::panicking::panic(const "assertion failed: (a <= (1, 2, 4))"); // scope 2 at ui/binop/structured-compare.rs:22:5: 22:30
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:22:5: 22:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _77 = const _;                   // scope 2 at ui/binop/structured-compare.rs:23:14: 23:23
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:23:14: 23:23
                                         // + literal: Const { ty: &(i32, i32, i32), val: Unevaluated(main, [], Some(promoted[3])) }
        _37 = _77;                       // scope 2 at ui/binop/structured-compare.rs:23:14: 23:23
        _38 = &_1;                       // scope 2 at ui/binop/structured-compare.rs:23:26: 23:27
        _36 = <(i32, i32, i32) as PartialOrd>::gt(move _37, move _38) -> bb13; // scope 2 at ui/binop/structured-compare.rs:23:13: 23:28
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:23:13: 23:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (i32, i32, i32), &'b (i32, i32, i32)) -> bool {<(i32, i32, i32) as PartialOrd>::gt}, val: Value(<ZST>) }
    }

    bb13: {
        _35 = Not(move _36);             // scope 2 at ui/binop/structured-compare.rs:23:5: 23:29
        switchInt(move _35) -> [0: bb15, otherwise: bb14]; // scope 2 at ui/binop/structured-compare.rs:23:5: 23:29
    }

    bb14: {
        _39 = core::panicking::panic(const "assertion failed: ((1, 2, 4) > a)"); // scope 2 at ui/binop/structured-compare.rs:23:5: 23:29
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:23:5: 23:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _76 = const _;                   // scope 2 at ui/binop/structured-compare.rs:24:14: 24:23
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:24:14: 24:23
                                         // + literal: Const { ty: &(i32, i32, i32), val: Unevaluated(main, [], Some(promoted[2])) }
        _42 = _76;                       // scope 2 at ui/binop/structured-compare.rs:24:14: 24:23
        _43 = &_1;                       // scope 2 at ui/binop/structured-compare.rs:24:27: 24:28
        _41 = <(i32, i32, i32) as PartialOrd>::ge(move _42, move _43) -> bb16; // scope 2 at ui/binop/structured-compare.rs:24:13: 24:29
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:24:13: 24:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (i32, i32, i32), &'b (i32, i32, i32)) -> bool {<(i32, i32, i32) as PartialOrd>::ge}, val: Value(<ZST>) }
    }

    bb16: {
        _40 = Not(move _41);             // scope 2 at ui/binop/structured-compare.rs:24:5: 24:30
        switchInt(move _40) -> [0: bb18, otherwise: bb17]; // scope 2 at ui/binop/structured-compare.rs:24:5: 24:30
    }

    bb17: {
        _44 = core::panicking::panic(const "assertion failed: ((1, 2, 4) >= a)"); // scope 2 at ui/binop/structured-compare.rs:24:5: 24:30
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:24:5: 24:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _45 = foo::large;                // scope 2 at ui/binop/structured-compare.rs:25:13: 25:23
        _46 = foo::small;                // scope 5 at ui/binop/structured-compare.rs:26:13: 26:23
        _49 = &_45;                      // scope 6 at ui/binop/structured-compare.rs:27:14: 27:15
        _50 = &_46;                      // scope 6 at ui/binop/structured-compare.rs:27:19: 27:20
        _48 = <foo as PartialEq>::ne(move _49, move _50) -> bb19; // scope 6 at ui/binop/structured-compare.rs:27:13: 27:21
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:27:13: 27:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a foo, &'b foo) -> bool {<foo as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb19: {
        _47 = Not(move _48);             // scope 6 at ui/binop/structured-compare.rs:27:5: 27:22
        switchInt(move _47) -> [0: bb21, otherwise: bb20]; // scope 6 at ui/binop/structured-compare.rs:27:5: 27:22
    }

    bb20: {
        _51 = core::panicking::panic(const "assertion failed: (x != y)"); // scope 6 at ui/binop/structured-compare.rs:27:5: 27:22
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:27:5: 27:22
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _53 = &_45;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _75 = const _;                   // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &foo, val: Unevaluated(main, [], Some(promoted[1])) }
        _54 = _75;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _52 = (move _53, move _54);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _55 = (_52.0: &foo);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _56 = (_52.1: &foo);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _59 = _55;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _60 = _56;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _58 = <foo as PartialEq>::eq(move _59, move _60) -> bb22; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a foo, &'b foo) -> bool {<foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb22: {
        _57 = Not(move _58);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _57) -> [0: bb24, otherwise: bb23]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb23: {
        _61 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _63 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _65 = _55;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _64 = _65;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _67 = _56;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _66 = _67;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _68 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _62 = core::panicking::assert_failed::<foo, foo>(move _63, move _64, move _66, move _68); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a foo, &'b foo, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<foo, foo>}, val: Value(<ZST>) }
    }

    bb24: {
        _71 = &_45;                      // scope 6 at ui/binop/structured-compare.rs:29:14: 29:15
        _74 = const _;                   // scope 6 at ui/binop/structured-compare.rs:29:19: 29:29
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:29:19: 29:29
                                         // + literal: Const { ty: &foo, val: Unevaluated(main, [], Some(promoted[0])) }
        _72 = _74;                       // scope 6 at ui/binop/structured-compare.rs:29:19: 29:29
        _70 = <foo as PartialEq>::ne(move _71, move _72) -> bb25; // scope 6 at ui/binop/structured-compare.rs:29:13: 29:30
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:29:13: 29:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a foo, &'b foo) -> bool {<foo as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb25: {
        _69 = Not(move _70);             // scope 6 at ui/binop/structured-compare.rs:29:5: 29:31
        switchInt(move _69) -> [0: bb27, otherwise: bb26]; // scope 6 at ui/binop/structured-compare.rs:29:5: 29:31
    }

    bb26: {
        _73 = core::panicking::panic(const "assertion failed: (x != foo::small)"); // scope 6 at ui/binop/structured-compare.rs:29:5: 29:31
                                         // mir::Constant
                                         // + span: ui/binop/structured-compare.rs:29:5: 29:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb27: {
        return;                          // scope 0 at ui/binop/structured-compare.rs:30:2: 30:2
    }
}

promoted[0] in main: &foo = {
    let mut _0: &foo;                    // return place in scope 0 at ui/binop/structured-compare.rs:29:19: 29:29
    let mut _1: foo;                     // in scope 0 at ui/binop/structured-compare.rs:29:19: 29:29

    bb0: {
        _1 = foo::small;                 // scope 0 at ui/binop/structured-compare.rs:29:19: 29:29
        _0 = &_1;                        // scope 0 at ui/binop/structured-compare.rs:29:19: 29:29
        return;                          // scope 0 at ui/binop/structured-compare.rs:29:19: 29:29
    }
}

promoted[1] in main: &foo = {
    let mut _0: &foo;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: foo;                     // in scope 0 at ui/binop/structured-compare.rs:28:19: 28:29

    bb0: {
        _1 = foo::large;                 // scope 0 at ui/binop/structured-compare.rs:28:19: 28:29
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &(i32, i32, i32) = {
    let mut _0: &(i32, i32, i32);        // return place in scope 0 at ui/binop/structured-compare.rs:24:14: 24:23
    let mut _1: (i32, i32, i32);         // in scope 0 at ui/binop/structured-compare.rs:24:14: 24:23

    bb0: {
        _1 = (const 1_i32, const 2_i32, const 4_i32); // scope 0 at ui/binop/structured-compare.rs:24:14: 24:23
        _0 = &_1;                        // scope 0 at ui/binop/structured-compare.rs:24:14: 24:23
        return;                          // scope 0 at ui/binop/structured-compare.rs:24:14: 24:23
    }
}

promoted[3] in main: &(i32, i32, i32) = {
    let mut _0: &(i32, i32, i32);        // return place in scope 0 at ui/binop/structured-compare.rs:23:14: 23:23
    let mut _1: (i32, i32, i32);         // in scope 0 at ui/binop/structured-compare.rs:23:14: 23:23

    bb0: {
        _1 = (const 1_i32, const 2_i32, const 4_i32); // scope 0 at ui/binop/structured-compare.rs:23:14: 23:23
        _0 = &_1;                        // scope 0 at ui/binop/structured-compare.rs:23:14: 23:23
        return;                          // scope 0 at ui/binop/structured-compare.rs:23:14: 23:23
    }
}

promoted[4] in main: &(i32, i32, i32) = {
    let mut _0: &(i32, i32, i32);        // return place in scope 0 at ui/binop/structured-compare.rs:22:19: 22:28
    let mut _1: (i32, i32, i32);         // in scope 0 at ui/binop/structured-compare.rs:22:19: 22:28

    bb0: {
        _1 = (const 1_i32, const 2_i32, const 4_i32); // scope 0 at ui/binop/structured-compare.rs:22:19: 22:28
        _0 = &_1;                        // scope 0 at ui/binop/structured-compare.rs:22:19: 22:28
        return;                          // scope 0 at ui/binop/structured-compare.rs:22:19: 22:28
    }
}

promoted[5] in main: &(i32, i32, i32) = {
    let mut _0: &(i32, i32, i32);        // return place in scope 0 at ui/binop/structured-compare.rs:21:18: 21:27
    let mut _1: (i32, i32, i32);         // in scope 0 at ui/binop/structured-compare.rs:21:18: 21:27

    bb0: {
        _1 = (const 1_i32, const 2_i32, const 4_i32); // scope 0 at ui/binop/structured-compare.rs:21:18: 21:27
        _0 = &_1;                        // scope 0 at ui/binop/structured-compare.rs:21:18: 21:27
        return;                          // scope 0 at ui/binop/structured-compare.rs:21:18: 21:27
    }
}

promoted[6] in main: &(i32, i32, i32) = {
    let mut _0: &(i32, i32, i32);        // return place in scope 0 at ui/binop/structured-compare.rs:20:19: 20:28
    let mut _1: (i32, i32, i32);         // in scope 0 at ui/binop/structured-compare.rs:20:19: 20:28

    bb0: {
        _1 = (const 1_i32, const 2_i32, const 4_i32); // scope 0 at ui/binop/structured-compare.rs:20:19: 20:28
        _0 = &_1;                        // scope 0 at ui/binop/structured-compare.rs:20:19: 20:28
        return;                          // scope 0 at ui/binop/structured-compare.rs:20:19: 20:28
    }
}
