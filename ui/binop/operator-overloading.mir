// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/binop/operator-overloading.rs:7:16: 7:21>::clone(_1: &Point) -> Point {
    debug self => _1;                    // in scope 0 at ui/binop/operator-overloading.rs:7:16: 7:21
    let mut _0: Point;                   // return place in scope 0 at ui/binop/operator-overloading.rs:7:16: 7:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/binop/operator-overloading.rs:7:16: 7:21
        return;                          // scope 0 at ui/binop/operator-overloading.rs:7:21: 7:21
    }
}

fn <impl at ui/binop/operator-overloading.rs:7:23: 7:28>::fmt(_1: &Point, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/binop/operator-overloading.rs:7:23: 7:28
    debug f => _2;                       // in scope 0 at ui/binop/operator-overloading.rs:7:23: 7:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/binop/operator-overloading.rs:7:23: 7:28
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/binop/operator-overloading.rs:7:23: 7:28
    let mut _4: &str;                    // in scope 0 at ui/binop/operator-overloading.rs:7:23: 7:28
    let _5: &str;                        // in scope 0 at ui/binop/operator-overloading.rs:7:23: 7:28
    let mut _6: &str;                    // in scope 0 at ui/binop/operator-overloading.rs:9:5: 9:13
    let _7: &str;                        // in scope 0 at ui/binop/operator-overloading.rs:9:5: 9:13
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/binop/operator-overloading.rs:9:5: 9:13
    let mut _9: &isize;                  // in scope 0 at ui/binop/operator-overloading.rs:9:5: 9:13
    let _10: &isize;                     // in scope 0 at ui/binop/operator-overloading.rs:9:5: 9:13
    let mut _11: &str;                   // in scope 0 at ui/binop/operator-overloading.rs:10:5: 10:13
    let _12: &str;                       // in scope 0 at ui/binop/operator-overloading.rs:10:5: 10:13
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/binop/operator-overloading.rs:10:5: 10:13
    let mut _14: &&isize;                // in scope 0 at ui/binop/operator-overloading.rs:10:5: 10:13
    let _15: &&isize;                    // in scope 0 at ui/binop/operator-overloading.rs:10:5: 10:13
    let _16: &isize;                     // in scope 0 at ui/binop/operator-overloading.rs:10:5: 10:13

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/binop/operator-overloading.rs:7:23: 7:28
        _5 = const "Point";              // scope 0 at ui/binop/operator-overloading.rs:7:23: 7:28
                                         // mir::Constant
                                         // + span: ui/binop/operator-overloading.rs:7:23: 7:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/binop/operator-overloading.rs:7:23: 7:28
        _7 = const "x";                  // scope 0 at ui/binop/operator-overloading.rs:9:5: 9:13
                                         // mir::Constant
                                         // + span: ui/binop/operator-overloading.rs:9:5: 9:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/binop/operator-overloading.rs:9:5: 9:13
        _10 = &((*_1).0: isize);         // scope 0 at ui/binop/operator-overloading.rs:9:5: 9:13
        _9 = _10;                        // scope 0 at ui/binop/operator-overloading.rs:9:5: 9:13
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/binop/operator-overloading.rs:9:5: 9:13
        _12 = const "y";                 // scope 0 at ui/binop/operator-overloading.rs:10:5: 10:13
                                         // mir::Constant
                                         // + span: ui/binop/operator-overloading.rs:10:5: 10:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/binop/operator-overloading.rs:10:5: 10:13
        _16 = &((*_1).1: isize);         // scope 0 at ui/binop/operator-overloading.rs:10:5: 10:13
        _15 = &_16;                      // scope 0 at ui/binop/operator-overloading.rs:10:5: 10:13
        _14 = _15;                       // scope 0 at ui/binop/operator-overloading.rs:10:5: 10:13
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/binop/operator-overloading.rs:10:5: 10:13
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _3, move _4, move _6, move _8, move _11, move _13) -> bb1; // scope 0 at ui/binop/operator-overloading.rs:7:23: 7:28
                                         // mir::Constant
                                         // + span: ui/binop/operator-overloading.rs:7:23: 7:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/binop/operator-overloading.rs:7:28: 7:28
    }
}

fn <impl at ui/binop/operator-overloading.rs:13:1: 13:24>::add(_1: Point, _2: Point) -> Point {
    debug self => _1;                    // in scope 0 at ui/binop/operator-overloading.rs:16:12: 16:16
    debug other => _2;                   // in scope 0 at ui/binop/operator-overloading.rs:16:18: 16:23
    let mut _0: Point;                   // return place in scope 0 at ui/binop/operator-overloading.rs:16:35: 16:40
    let mut _3: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:17:19: 17:35
    let mut _4: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:17:19: 17:25
    let mut _5: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:17:28: 17:35
    let mut _6: (isize, bool);           // in scope 0 at ui/binop/operator-overloading.rs:17:19: 17:35
    let mut _7: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:17:40: 17:56
    let mut _8: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:17:40: 17:46
    let mut _9: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:17:49: 17:56
    let mut _10: (isize, bool);          // in scope 0 at ui/binop/operator-overloading.rs:17:40: 17:56

    bb0: {
        _4 = (_1.0: isize);              // scope 0 at ui/binop/operator-overloading.rs:17:19: 17:25
        _5 = (_2.0: isize);              // scope 0 at ui/binop/operator-overloading.rs:17:28: 17:35
        _6 = CheckedAdd(_4, _5);         // scope 0 at ui/binop/operator-overloading.rs:17:19: 17:35
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> bb1; // scope 0 at ui/binop/operator-overloading.rs:17:19: 17:35
    }

    bb1: {
        _3 = move (_6.0: isize);         // scope 0 at ui/binop/operator-overloading.rs:17:19: 17:35
        _8 = (_1.1: isize);              // scope 0 at ui/binop/operator-overloading.rs:17:40: 17:46
        _9 = (_2.1: isize);              // scope 0 at ui/binop/operator-overloading.rs:17:49: 17:56
        _10 = CheckedAdd(_8, _9);        // scope 0 at ui/binop/operator-overloading.rs:17:40: 17:56
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, move _9) -> bb2; // scope 0 at ui/binop/operator-overloading.rs:17:40: 17:56
    }

    bb2: {
        _7 = move (_10.0: isize);        // scope 0 at ui/binop/operator-overloading.rs:17:40: 17:56
        _0 = Point { x: move _3, y: move _7 }; // scope 0 at ui/binop/operator-overloading.rs:17:9: 17:57
        return;                          // scope 0 at ui/binop/operator-overloading.rs:18:6: 18:6
    }
}

fn <impl at ui/binop/operator-overloading.rs:21:1: 21:24>::sub(_1: Point, _2: Point) -> Point {
    debug self => _1;                    // in scope 0 at ui/binop/operator-overloading.rs:24:12: 24:16
    debug other => _2;                   // in scope 0 at ui/binop/operator-overloading.rs:24:18: 24:23
    let mut _0: Point;                   // return place in scope 0 at ui/binop/operator-overloading.rs:24:35: 24:40
    let mut _3: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:25:19: 25:35
    let mut _4: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:25:19: 25:25
    let mut _5: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:25:28: 25:35
    let mut _6: (isize, bool);           // in scope 0 at ui/binop/operator-overloading.rs:25:19: 25:35
    let mut _7: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:25:40: 25:56
    let mut _8: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:25:40: 25:46
    let mut _9: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:25:49: 25:56
    let mut _10: (isize, bool);          // in scope 0 at ui/binop/operator-overloading.rs:25:40: 25:56

    bb0: {
        _4 = (_1.0: isize);              // scope 0 at ui/binop/operator-overloading.rs:25:19: 25:25
        _5 = (_2.0: isize);              // scope 0 at ui/binop/operator-overloading.rs:25:28: 25:35
        _6 = CheckedSub(_4, _5);         // scope 0 at ui/binop/operator-overloading.rs:25:19: 25:35
        assert(!move (_6.1: bool), "attempt to compute `{} - {}`, which would overflow", move _4, move _5) -> bb1; // scope 0 at ui/binop/operator-overloading.rs:25:19: 25:35
    }

    bb1: {
        _3 = move (_6.0: isize);         // scope 0 at ui/binop/operator-overloading.rs:25:19: 25:35
        _8 = (_1.1: isize);              // scope 0 at ui/binop/operator-overloading.rs:25:40: 25:46
        _9 = (_2.1: isize);              // scope 0 at ui/binop/operator-overloading.rs:25:49: 25:56
        _10 = CheckedSub(_8, _9);        // scope 0 at ui/binop/operator-overloading.rs:25:40: 25:56
        assert(!move (_10.1: bool), "attempt to compute `{} - {}`, which would overflow", move _8, move _9) -> bb2; // scope 0 at ui/binop/operator-overloading.rs:25:40: 25:56
    }

    bb2: {
        _7 = move (_10.0: isize);        // scope 0 at ui/binop/operator-overloading.rs:25:40: 25:56
        _0 = Point { x: move _3, y: move _7 }; // scope 0 at ui/binop/operator-overloading.rs:25:9: 25:57
        return;                          // scope 0 at ui/binop/operator-overloading.rs:26:6: 26:6
    }
}

fn <impl at ui/binop/operator-overloading.rs:29:1: 29:24>::neg(_1: Point) -> Point {
    debug self => _1;                    // in scope 0 at ui/binop/operator-overloading.rs:32:12: 32:16
    let mut _0: Point;                   // return place in scope 0 at ui/binop/operator-overloading.rs:32:21: 32:26
    let mut _2: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:33:19: 33:26
    let mut _3: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:33:20: 33:26
    let mut _4: bool;                    // in scope 0 at ui/binop/operator-overloading.rs:33:19: 33:26
    let mut _5: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:33:31: 33:38
    let mut _6: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:33:32: 33:38
    let mut _7: bool;                    // in scope 0 at ui/binop/operator-overloading.rs:33:31: 33:38

    bb0: {
        _3 = (_1.0: isize);              // scope 0 at ui/binop/operator-overloading.rs:33:20: 33:26
        _4 = Eq(_3, const isize::MIN);   // scope 0 at ui/binop/operator-overloading.rs:33:19: 33:26
        assert(!move _4, "attempt to negate `{}`, which would overflow", _3) -> bb1; // scope 0 at ui/binop/operator-overloading.rs:33:19: 33:26
    }

    bb1: {
        _2 = Neg(move _3);               // scope 0 at ui/binop/operator-overloading.rs:33:19: 33:26
        _6 = (_1.1: isize);              // scope 0 at ui/binop/operator-overloading.rs:33:32: 33:38
        _7 = Eq(_6, const isize::MIN);   // scope 0 at ui/binop/operator-overloading.rs:33:31: 33:38
        assert(!move _7, "attempt to negate `{}`, which would overflow", _6) -> bb2; // scope 0 at ui/binop/operator-overloading.rs:33:31: 33:38
    }

    bb2: {
        _5 = Neg(move _6);               // scope 0 at ui/binop/operator-overloading.rs:33:31: 33:38
        _0 = Point { x: move _2, y: move _5 }; // scope 0 at ui/binop/operator-overloading.rs:33:9: 33:39
        return;                          // scope 0 at ui/binop/operator-overloading.rs:34:6: 34:6
    }
}

fn <impl at ui/binop/operator-overloading.rs:37:1: 37:24>::not(_1: Point) -> Point {
    debug self => _1;                    // in scope 0 at ui/binop/operator-overloading.rs:40:12: 40:16
    let mut _0: Point;                   // return place in scope 0 at ui/binop/operator-overloading.rs:40:21: 40:26
    let mut _2: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:41:19: 41:26
    let mut _3: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:41:20: 41:26
    let mut _4: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:41:31: 41:38
    let mut _5: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:41:32: 41:38

    bb0: {
        _3 = (_1.0: isize);              // scope 0 at ui/binop/operator-overloading.rs:41:20: 41:26
        _2 = Not(move _3);               // scope 0 at ui/binop/operator-overloading.rs:41:19: 41:26
        _5 = (_1.1: isize);              // scope 0 at ui/binop/operator-overloading.rs:41:32: 41:38
        _4 = Not(move _5);               // scope 0 at ui/binop/operator-overloading.rs:41:31: 41:38
        _0 = Point { x: move _2, y: move _4 }; // scope 0 at ui/binop/operator-overloading.rs:41:9: 41:40
        return;                          // scope 0 at ui/binop/operator-overloading.rs:42:6: 42:6
    }
}

fn <impl at ui/binop/operator-overloading.rs:45:1: 45:32>::index(_1: &Point, _2: bool) -> &isize {
    debug self => _1;                    // in scope 0 at ui/binop/operator-overloading.rs:48:14: 48:19
    debug x => _2;                       // in scope 0 at ui/binop/operator-overloading.rs:48:21: 48:22
    let mut _0: &isize;                  // return place in scope 0 at ui/binop/operator-overloading.rs:48:33: 48:39
    let mut _3: bool;                    // in scope 0 at ui/binop/operator-overloading.rs:49:12: 49:13
    let _4: &isize;                      // in scope 0 at ui/binop/operator-overloading.rs:50:13: 50:20
    let _5: &isize;                      // in scope 0 at ui/binop/operator-overloading.rs:52:13: 52:20

    bb0: {
        _3 = _2;                         // scope 0 at ui/binop/operator-overloading.rs:49:12: 49:13
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/binop/operator-overloading.rs:49:12: 49:13
    }

    bb1: {
        _4 = &((*_1).0: isize);          // scope 0 at ui/binop/operator-overloading.rs:50:13: 50:20
        _0 = _4;                         // scope 0 at ui/binop/operator-overloading.rs:50:13: 50:20
        goto -> bb3;                     // scope 0 at ui/binop/operator-overloading.rs:49:9: 53:10
    }

    bb2: {
        _5 = &((*_1).1: isize);          // scope 0 at ui/binop/operator-overloading.rs:52:13: 52:20
        _0 = _5;                         // scope 0 at ui/binop/operator-overloading.rs:52:13: 52:20
        goto -> bb3;                     // scope 0 at ui/binop/operator-overloading.rs:49:9: 53:10
    }

    bb3: {
        return;                          // scope 0 at ui/binop/operator-overloading.rs:54:6: 54:6
    }
}

fn <impl at ui/binop/operator-overloading.rs:57:1: 57:30>::eq(_1: &Point, _2: &Point) -> bool {
    debug self => _1;                    // in scope 0 at ui/binop/operator-overloading.rs:58:11: 58:16
    debug other => _2;                   // in scope 0 at ui/binop/operator-overloading.rs:58:18: 58:23
    let mut _0: bool;                    // return place in scope 0 at ui/binop/operator-overloading.rs:58:36: 58:40
    let mut _3: bool;                    // in scope 0 at ui/binop/operator-overloading.rs:59:9: 59:32
    let mut _4: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:59:9: 59:18
    let mut _5: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:59:22: 59:32
    let mut _6: bool;                    // in scope 0 at ui/binop/operator-overloading.rs:59:36: 59:59
    let mut _7: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:59:36: 59:45
    let mut _8: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:59:49: 59:59

    bb0: {
        _4 = ((*_1).0: isize);           // scope 0 at ui/binop/operator-overloading.rs:59:9: 59:18
        _5 = ((*_2).0: isize);           // scope 0 at ui/binop/operator-overloading.rs:59:22: 59:32
        _3 = Eq(move _4, move _5);       // scope 0 at ui/binop/operator-overloading.rs:59:9: 59:32
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/binop/operator-overloading.rs:59:9: 59:59
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/binop/operator-overloading.rs:59:9: 59:59
        goto -> bb3;                     // scope 0 at ui/binop/operator-overloading.rs:59:9: 59:59
    }

    bb2: {
        _7 = ((*_1).1: isize);           // scope 0 at ui/binop/operator-overloading.rs:59:36: 59:45
        _8 = ((*_2).1: isize);           // scope 0 at ui/binop/operator-overloading.rs:59:49: 59:59
        _6 = Eq(move _7, move _8);       // scope 0 at ui/binop/operator-overloading.rs:59:36: 59:59
        _0 = move _6;                    // scope 0 at ui/binop/operator-overloading.rs:59:9: 59:59
        goto -> bb3;                     // scope 0 at ui/binop/operator-overloading.rs:59:9: 59:59
    }

    bb3: {
        return;                          // scope 0 at ui/binop/operator-overloading.rs:60:6: 60:6
    }
}

fn <impl at ui/binop/operator-overloading.rs:57:1: 57:30>::ne(_1: &Point, _2: &Point) -> bool {
    debug self => _1;                    // in scope 0 at ui/binop/operator-overloading.rs:61:11: 61:16
    debug other => _2;                   // in scope 0 at ui/binop/operator-overloading.rs:61:18: 61:23
    let mut _0: bool;                    // return place in scope 0 at ui/binop/operator-overloading.rs:61:36: 61:40
    let mut _3: bool;                    // in scope 0 at ui/binop/operator-overloading.rs:61:44: 61:61
    let mut _4: &Point;                  // in scope 0 at ui/binop/operator-overloading.rs:61:44: 61:61
    let mut _5: &Point;                  // in scope 0 at ui/binop/operator-overloading.rs:61:55: 61:60

    bb0: {
        _4 = _1;                         // scope 0 at ui/binop/operator-overloading.rs:61:44: 61:61
        _5 = _2;                         // scope 0 at ui/binop/operator-overloading.rs:61:55: 61:60
        _3 = <Point as PartialEq>::eq(move _4, move _5) -> bb1; // scope 0 at ui/binop/operator-overloading.rs:61:44: 61:61
                                         // mir::Constant
                                         // + span: ui/binop/operator-overloading.rs:61:52: 61:54
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Point, &'b Point) -> bool {<Point as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Not(move _3);               // scope 0 at ui/binop/operator-overloading.rs:61:43: 61:61
        return;                          // scope 0 at ui/binop/operator-overloading.rs:61:63: 61:63
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binop/operator-overloading.rs:64:15: 64:15
    let mut _1: Point;                   // in scope 0 at ui/binop/operator-overloading.rs:65:9: 65:14
    let mut _2: Point;                   // in scope 0 at ui/binop/operator-overloading.rs:66:9: 66:35
    let mut _3: Point;                   // in scope 0 at ui/binop/operator-overloading.rs:66:9: 66:10
    let mut _4: Point;                   // in scope 0 at ui/binop/operator-overloading.rs:66:13: 66:35
    let mut _5: Point;                   // in scope 0 at ui/binop/operator-overloading.rs:67:9: 67:35
    let mut _6: Point;                   // in scope 0 at ui/binop/operator-overloading.rs:67:9: 67:10
    let mut _7: Point;                   // in scope 0 at ui/binop/operator-overloading.rs:67:13: 67:35
    let mut _8: (&Point, &Point);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _9: &Point;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _10: Point;                      // in scope 0 at ui/binop/operator-overloading.rs:68:16: 68:38
    let mut _11: Point;                  // in scope 0 at ui/binop/operator-overloading.rs:68:16: 68:17
    let mut _12: Point;                  // in scope 0 at ui/binop/operator-overloading.rs:68:20: 68:38
    let mut _13: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _17: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _18: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _19: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _21: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _22: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _23: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _24: &Point;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _25: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _26: &Point;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _28: (&Point, &Point);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _29: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _30: Point;                      // in scope 0 at ui/binop/operator-overloading.rs:69:16: 69:18
    let mut _31: Point;                  // in scope 0 at ui/binop/operator-overloading.rs:69:17: 69:18
    let mut _32: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _35: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _37: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _38: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _40: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _41: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _42: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _43: &Point;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _44: &Point;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _45: &Point;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _47: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _48: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _49: &isize;                     // in scope 0 at ui/binop/operator-overloading.rs:70:16: 70:23
    let mut _50: &Point;                 // in scope 0 at ui/binop/operator-overloading.rs:70:16: 70:17
    let mut _51: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _54: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _55: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _56: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _57: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _59: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _60: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _61: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _62: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _63: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _64: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _66: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _67: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _68: &isize;                     // in scope 0 at ui/binop/operator-overloading.rs:71:16: 71:24
    let mut _69: &Point;                 // in scope 0 at ui/binop/operator-overloading.rs:71:16: 71:17
    let mut _70: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _73: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _74: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _75: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _76: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _78: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _79: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _80: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _81: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _82: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _83: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _86: Point;                  // in scope 0 at ui/binop/operator-overloading.rs:73:14: 73:15
    let mut _87: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _88: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _89: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _90: isize;                      // in scope 0 at ui/binop/operator-overloading.rs:74:21: 74:27
    let mut _91: isize;                  // in scope 0 at ui/binop/operator-overloading.rs:74:22: 74:27
    let mut _94: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _95: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _96: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _97: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _99: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _100: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _101: &isize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _102: &isize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _103: &isize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _104: &isize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _105: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _106: (&isize, &isize);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _107: &isize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _108: &isize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _109: isize;                     // in scope 0 at ui/binop/operator-overloading.rs:75:21: 75:27
    let mut _110: isize;                 // in scope 0 at ui/binop/operator-overloading.rs:75:22: 75:27
    let mut _113: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _114: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _115: isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _116: isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _118: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _119: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _120: &isize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _121: &isize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _122: &isize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _123: &isize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _124: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _125: ();                        // in scope 0 at ui/binop/operator-overloading.rs:78:5: 78:20
    let mut _126: isize;                 // in scope 0 at ui/binop/operator-overloading.rs:78:12: 78:19
    let mut _127: &isize;                // in scope 0 at ui/binop/operator-overloading.rs:78:12: 78:19
    let mut _128: &Point;                // in scope 0 at ui/binop/operator-overloading.rs:78:12: 78:13
    scope 1 {
        debug p => _1;                   // in scope 1 at ui/binop/operator-overloading.rs:65:9: 65:14
        let _14: &Point;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _15: &Point;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _33: &Point;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _34: &Point;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _52: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _53: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _71: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _72: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _85: Point;                  // in scope 1 at ui/binop/operator-overloading.rs:73:9: 73:10
        let mut _129: &isize;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _130: &isize;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _131: &Point;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _132: &Point;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _14;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _15;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _20: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _20;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _33;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _34;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _39: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _39;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug left_val => _52;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _53;      // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _58: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 7 {
                debug kind => _58;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 8 {
            debug left_val => _71;       // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _72;      // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _77: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 9 {
                debug kind => _77;       // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 10 {
            debug q => _85;              // in scope 10 at ui/binop/operator-overloading.rs:73:9: 73:10
            let _92: &isize;             // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _93: &isize;             // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _111: &isize;            // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _112: &isize;            // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 11 {
                debug left_val => _92;   // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _93;  // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _98: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 12 {
                    debug kind => _98;   // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 13 {
                debug left_val => _111;  // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _112; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _117: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 14 {
                    debug kind => _117;  // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = Point { x: const 10_isize, y: const 20_isize }; // scope 0 at ui/binop/operator-overloading.rs:65:17: 65:37
        _3 = _1;                         // scope 1 at ui/binop/operator-overloading.rs:66:9: 66:10
        _4 = Point { x: const 101_isize, y: const 102_isize }; // scope 1 at ui/binop/operator-overloading.rs:66:13: 66:35
        _2 = <Point as Add>::add(move _3, move _4) -> bb1; // scope 1 at ui/binop/operator-overloading.rs:66:9: 66:35
                                         // mir::Constant
                                         // + span: ui/binop/operator-overloading.rs:66:9: 66:35
                                         // + literal: Const { ty: fn(Point, Point) -> <Point as Add>::Output {<Point as Add>::add}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = move _2;                    // scope 1 at ui/binop/operator-overloading.rs:66:5: 66:35
        _6 = _1;                         // scope 1 at ui/binop/operator-overloading.rs:67:9: 67:10
        _7 = Point { x: const 100_isize, y: const 100_isize }; // scope 1 at ui/binop/operator-overloading.rs:67:13: 67:35
        _5 = <Point as Sub>::sub(move _6, move _7) -> bb2; // scope 1 at ui/binop/operator-overloading.rs:67:9: 67:35
                                         // mir::Constant
                                         // + span: ui/binop/operator-overloading.rs:67:9: 67:35
                                         // + literal: Const { ty: fn(Point, Point) -> <Point as Sub>::Output {<Point as Sub>::sub}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = move _5;                    // scope 1 at ui/binop/operator-overloading.rs:67:5: 67:35
        _11 = _1;                        // scope 1 at ui/binop/operator-overloading.rs:68:16: 68:17
        _12 = Point { x: const 5_isize, y: const 5_isize }; // scope 1 at ui/binop/operator-overloading.rs:68:20: 68:38
        _10 = <Point as Add>::add(move _11, move _12) -> bb3; // scope 1 at ui/binop/operator-overloading.rs:68:16: 68:38
                                         // mir::Constant
                                         // + span: ui/binop/operator-overloading.rs:68:16: 68:38
                                         // + literal: Const { ty: fn(Point, Point) -> <Point as Add>::Output {<Point as Add>::add}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &_10;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _132 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Point, val: Unevaluated(main, [], Some(promoted[3])) }
        _13 = _132;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _8 = (move _9, move _13);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _14 = (_8.0: &Point);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _15 = (_8.1: &Point);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _18 = _14;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _19 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _17 = <Point as PartialEq>::eq(move _18, move _19) -> bb4; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Point, &'b Point) -> bool {<Point as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = Not(move _17);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _16) -> [0: bb6, otherwise: bb5]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _20 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = _14;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _26 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = _26;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _21 = core::panicking::assert_failed::<Point, Point>(move _22, move _23, move _25, move _27); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Point, &'b Point, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Point, Point>}, val: Value(<ZST>) }
    }

    bb6: {
        _31 = _1;                        // scope 1 at ui/binop/operator-overloading.rs:69:17: 69:18
        _30 = <Point as Neg>::neg(move _31) -> bb7; // scope 1 at ui/binop/operator-overloading.rs:69:16: 69:18
                                         // mir::Constant
                                         // + span: ui/binop/operator-overloading.rs:69:16: 69:18
                                         // + literal: Const { ty: fn(Point) -> <Point as Neg>::Output {<Point as Neg>::neg}, val: Value(<ZST>) }
    }

    bb7: {
        _29 = &_30;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _131 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Point, val: Unevaluated(main, [], Some(promoted[2])) }
        _32 = _131;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _28 = (move _29, move _32);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _33 = (_28.0: &Point);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _34 = (_28.1: &Point);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _37 = _33;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _38 = _34;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _36 = <Point as PartialEq>::eq(move _37, move _38) -> bb8; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Point, &'b Point) -> bool {<Point as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _35 = Not(move _36);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _35) -> [0: bb10, otherwise: bb9]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _39 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _41 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _43 = _33;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _42 = _43;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _45 = _34;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _44 = _45;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _46 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _40 = core::panicking::assert_failed::<Point, Point>(move _41, move _42, move _44, move _46); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Point, &'b Point, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Point, Point>}, val: Value(<ZST>) }
    }

    bb10: {
        _50 = &_1;                       // scope 1 at ui/binop/operator-overloading.rs:70:16: 70:17
        _49 = <Point as Index<bool>>::index(move _50, const true) -> bb11; // scope 1 at ui/binop/operator-overloading.rs:70:16: 70:23
                                         // mir::Constant
                                         // + span: ui/binop/operator-overloading.rs:70:16: 70:23
                                         // + literal: Const { ty: for<'a> fn(&'a Point, bool) -> &'a <Point as Index<bool>>::Output {<Point as Index<bool>>::index}, val: Value(<ZST>) }
    }

    bb11: {
        _48 = _49;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _130 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[1])) }
        _51 = _130;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _47 = (move _48, move _51);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _52 = (_47.0: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _53 = (_47.1: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _56 = (*_52);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _57 = const 11_isize;            // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _55 = Eq(move _56, move _57);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _54 = Not(move _55);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _54) -> [0: bb13, otherwise: bb12]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb12: {
        _58 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _60 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _62 = _52;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _61 = _62;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _64 = _53;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _63 = _64;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _65 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _59 = core::panicking::assert_failed::<isize, isize>(move _60, move _61, move _63, move _65); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb13: {
        _69 = &_1;                       // scope 1 at ui/binop/operator-overloading.rs:71:16: 71:17
        _68 = <Point as Index<bool>>::index(move _69, const false) -> bb14; // scope 1 at ui/binop/operator-overloading.rs:71:16: 71:24
                                         // mir::Constant
                                         // + span: ui/binop/operator-overloading.rs:71:16: 71:24
                                         // + literal: Const { ty: for<'a> fn(&'a Point, bool) -> &'a <Point as Index<bool>>::Output {<Point as Index<bool>>::index}, val: Value(<ZST>) }
    }

    bb14: {
        _67 = _68;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _129 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _70 = _129;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _66 = (move _67, move _70);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _71 = (_66.0: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _72 = (_66.1: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _75 = (*_71);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _76 = const 22_isize;            // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _74 = Eq(move _75, move _76);    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _73 = Not(move _74);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _73) -> [0: bb16, otherwise: bb15]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _77 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _79 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _81 = _71;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _80 = _81;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _83 = _72;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _82 = _83;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _84 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _78 = core::panicking::assert_failed::<isize, isize>(move _79, move _80, move _82, move _84); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb16: {
        _86 = _1;                        // scope 1 at ui/binop/operator-overloading.rs:73:14: 73:15
        _85 = <Point as Not>::not(move _86) -> bb17; // scope 1 at ui/binop/operator-overloading.rs:73:13: 73:15
                                         // mir::Constant
                                         // + span: ui/binop/operator-overloading.rs:73:13: 73:15
                                         // + literal: Const { ty: fn(Point) -> <Point as Not>::Output {<Point as Not>::not}, val: Value(<ZST>) }
    }

    bb17: {
        _88 = &(_85.0: isize);           // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _91 = (_1.0: isize);             // scope 10 at ui/binop/operator-overloading.rs:74:22: 74:27
        _90 = Not(move _91);             // scope 10 at ui/binop/operator-overloading.rs:74:21: 74:27
        _89 = &_90;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _87 = (move _88, move _89);      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _92 = (_87.0: &isize);           // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _93 = (_87.1: &isize);           // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _96 = (*_92);                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _97 = (*_93);                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _95 = Eq(move _96, move _97);    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _94 = Not(move _95);             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _94) -> [0: bb19, otherwise: bb18]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb18: {
        _98 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _100 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _102 = _92;                      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _101 = _102;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _104 = _93;                      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _103 = _104;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _105 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _99 = core::panicking::assert_failed::<isize, isize>(move _100, move _101, move _103, move _105); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb19: {
        _107 = &(_85.1: isize);          // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _110 = (_1.1: isize);            // scope 10 at ui/binop/operator-overloading.rs:75:22: 75:27
        _109 = Not(move _110);           // scope 10 at ui/binop/operator-overloading.rs:75:21: 75:27
        _108 = &_109;                    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _106 = (move _107, move _108);   // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _111 = (_106.0: &isize);         // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _112 = (_106.1: &isize);         // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _115 = (*_111);                  // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _116 = (*_112);                  // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _114 = Eq(move _115, move _116); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _113 = Not(move _114);           // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _113) -> [0: bb21, otherwise: bb20]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb20: {
        _117 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _119 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _121 = _111;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _120 = _121;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _123 = _112;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _122 = _123;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _124 = Option::<Arguments<'_>>::None; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _118 = core::panicking::assert_failed::<isize, isize>(move _119, move _120, move _122, move _124); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb21: {
        _128 = &_1;                      // scope 10 at ui/binop/operator-overloading.rs:78:12: 78:13
        _127 = <Point as Index<bool>>::index(move _128, const true) -> bb22; // scope 10 at ui/binop/operator-overloading.rs:78:12: 78:19
                                         // mir::Constant
                                         // + span: ui/binop/operator-overloading.rs:78:12: 78:19
                                         // + literal: Const { ty: for<'a> fn(&'a Point, bool) -> &'a <Point as Index<bool>>::Output {<Point as Index<bool>>::index}, val: Value(<ZST>) }
    }

    bb22: {
        _126 = (*_127);                  // scope 10 at ui/binop/operator-overloading.rs:78:12: 78:19
        _125 = result(move _126) -> bb23; // scope 10 at ui/binop/operator-overloading.rs:78:5: 78:20
                                         // mir::Constant
                                         // + span: ui/binop/operator-overloading.rs:78:5: 78:11
                                         // + literal: Const { ty: fn(isize) {result}, val: Value(<ZST>) }
    }

    bb23: {
        return;                          // scope 0 at ui/binop/operator-overloading.rs:79:2: 79:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:71:26: 71:28

    bb0: {
        _1 = const 22_isize;             // scope 0 at ui/binop/operator-overloading.rs:71:26: 71:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/binop/operator-overloading.rs:70:25: 70:27

    bb0: {
        _1 = const 11_isize;             // scope 0 at ui/binop/operator-overloading.rs:70:25: 70:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &Point = {
    let mut _0: &Point;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Point;                   // in scope 0 at ui/binop/operator-overloading.rs:69:20: 69:42

    bb0: {
        _1 = Point { x: const -11_isize, y: const -22_isize }; // scope 0 at ui/binop/operator-overloading.rs:69:20: 69:42
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &Point = {
    let mut _0: &Point;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Point;                   // in scope 0 at ui/binop/operator-overloading.rs:68:40: 68:60

    bb0: {
        _1 = Point { x: const 16_isize, y: const 27_isize }; // scope 0 at ui/binop/operator-overloading.rs:68:40: 68:60
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn result(_1: isize) -> () {
    debug i => _1;                       // in scope 0 at ui/binop/operator-overloading.rs:81:11: 81:12
    let mut _0: ();                      // return place in scope 0 at ui/binop/operator-overloading.rs:81:21: 81:21

    bb0: {
        return;                          // scope 0 at ui/binop/operator-overloading.rs:81:24: 81:24
    }
}
