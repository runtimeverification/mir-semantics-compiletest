// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/binop/operator-overloading.rs:7:16: 7:21>::clone(_1: &Point) -> Point {
    debug self => _1;
    let mut _0: Point;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/binop/operator-overloading.rs:7:23: 7:28>::fmt(_1: &Point, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &isize;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&isize;
    let _10: &isize;

    bb0: {
        _3 = const "Point";
        _4 = const "x";
        _6 = &((*_1).0: isize);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "y";
        _10 = &((*_1).1: isize);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/binop/operator-overloading.rs:13:1: 13:24>::add(_1: Point, _2: Point) -> Point {
    debug self => _1;
    debug other => _2;
    let mut _0: Point;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: isize;
    let mut _7: isize;
    let mut _8: isize;

    bb0: {
        _4 = (_1.0: isize);
        _5 = (_2.0: isize);
        _3 = Add(move _4, move _5);
        _7 = (_1.1: isize);
        _8 = (_2.1: isize);
        _6 = Add(move _7, move _8);
        _0 = Point { x: move _3, y: move _6 };
        return;
    }
}

fn <impl at ui/binop/operator-overloading.rs:21:1: 21:24>::sub(_1: Point, _2: Point) -> Point {
    debug self => _1;
    debug other => _2;
    let mut _0: Point;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: isize;
    let mut _7: isize;
    let mut _8: isize;

    bb0: {
        _4 = (_1.0: isize);
        _5 = (_2.0: isize);
        _3 = Sub(move _4, move _5);
        _7 = (_1.1: isize);
        _8 = (_2.1: isize);
        _6 = Sub(move _7, move _8);
        _0 = Point { x: move _3, y: move _6 };
        return;
    }
}

fn <impl at ui/binop/operator-overloading.rs:29:1: 29:24>::neg(_1: Point) -> Point {
    debug self => _1;
    let mut _0: Point;
    let mut _2: isize;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;

    bb0: {
        _3 = (_1.0: isize);
        _2 = Neg(move _3);
        _5 = (_1.1: isize);
        _4 = Neg(move _5);
        _0 = Point { x: move _2, y: move _4 };
        return;
    }
}

fn <impl at ui/binop/operator-overloading.rs:37:1: 37:24>::not(_1: Point) -> Point {
    debug self => _1;
    let mut _0: Point;
    let mut _2: isize;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;

    bb0: {
        _3 = (_1.0: isize);
        _2 = Not(move _3);
        _5 = (_1.1: isize);
        _4 = Not(move _5);
        _0 = Point { x: move _2, y: move _4 };
        return;
    }
}

fn <impl at ui/binop/operator-overloading.rs:45:1: 45:32>::index(_1: &Point, _2: bool) -> &isize {
    debug self => _1;
    debug x => _2;
    let mut _0: &isize;
    let _3: &isize;
    let _4: &isize;

    bb0: {
        switchInt(_2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = &((*_1).0: isize);
        _0 = _3;
        goto -> bb3;
    }

    bb2: {
        _4 = &((*_1).1: isize);
        _0 = _4;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/binop/operator-overloading.rs:57:1: 57:30>::eq(_1: &Point, _2: &Point) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: bool;
    let mut _7: isize;
    let mut _8: isize;

    bb0: {
        _4 = ((*_1).0: isize);
        _5 = ((*_2).0: isize);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = ((*_1).1: isize);
        _8 = ((*_2).1: isize);
        _6 = Eq(move _7, move _8);
        _0 = move _6;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/binop/operator-overloading.rs:57:1: 57:30>::ne(_1: &Point, _2: &Point) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;

    bb0: {
        _3 = <Point as PartialEq>::eq(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Not(move _3);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Point;
    let mut _2: Point;
    let mut _3: Point;
    let mut _4: Point;
    let mut _5: Point;
    let mut _6: Point;
    let mut _7: Point;
    let mut _8: (&Point, &Point);
    let mut _9: &Point;
    let _10: Point;
    let mut _11: Point;
    let mut _12: Point;
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&Point, &Point);
    let mut _21: &Point;
    let _22: Point;
    let mut _23: Point;
    let mut _26: bool;
    let mut _27: bool;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&isize, &isize);
    let mut _32: &isize;
    let _33: &isize;
    let mut _34: &Point;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: isize;
    let mut _40: isize;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _44: (&isize, &isize);
    let mut _45: &isize;
    let _46: &isize;
    let mut _47: &Point;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: isize;
    let mut _53: isize;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _58: Point;
    let mut _59: (&isize, &isize);
    let mut _60: &isize;
    let mut _61: &isize;
    let _62: isize;
    let mut _63: isize;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: isize;
    let mut _69: isize;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&isize, &isize);
    let mut _74: &isize;
    let mut _75: &isize;
    let _76: isize;
    let mut _77: isize;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: isize;
    let mut _83: isize;
    let _85: !;
    let mut _86: std::option::Option<std::fmt::Arguments<'_>>;
    let _87: ();
    let mut _88: isize;
    let mut _89: &isize;
    let mut _90: &Point;
    scope 1 {
        debug p => _1;
        let _13: &Point;
        let _14: &Point;
        let _24: &Point;
        let _25: &Point;
        let _35: &isize;
        let _36: &isize;
        let _48: &isize;
        let _49: &isize;
        let _57: Point;
        let mut _91: &isize;
        let mut _92: &isize;
        let mut _93: &Point;
        let mut _94: &Point;
        scope 2 {
            debug left_val => _13;
            debug right_val => _14;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
        scope 4 {
            debug left_val => _24;
            debug right_val => _25;
            let _28: core::panicking::AssertKind;
            scope 5 {
                debug kind => _28;
            }
        }
        scope 6 {
            debug left_val => _35;
            debug right_val => _36;
            let _41: core::panicking::AssertKind;
            scope 7 {
                debug kind => _41;
            }
        }
        scope 8 {
            debug left_val => _48;
            debug right_val => _49;
            let _54: core::panicking::AssertKind;
            scope 9 {
                debug kind => _54;
            }
        }
        scope 10 {
            debug q => _57;
            let _64: &isize;
            let _65: &isize;
            let _78: &isize;
            let _79: &isize;
            scope 11 {
                debug left_val => _64;
                debug right_val => _65;
                let _70: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _70;
                }
            }
            scope 13 {
                debug left_val => _78;
                debug right_val => _79;
                let _84: core::panicking::AssertKind;
                scope 14 {
                    debug kind => _84;
                }
            }
        }
    }

    bb0: {
        _1 = Point { x: const 10_isize, y: const 20_isize };
        _3 = _1;
        _4 = Point { x: const 101_isize, y: const 102_isize };
        _2 = <Point as Add>::add(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = move _2;
        _6 = _1;
        _7 = Point { x: const 100_isize, y: const 100_isize };
        _5 = <Point as Sub>::sub(move _6, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = move _5;
        _11 = _1;
        _12 = Point { x: const 5_isize, y: const 5_isize };
        _10 = <Point as Add>::add(move _11, move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = &_10;
        _94 = const _;
        _8 = (move _9, _94);
        _13 = (_8.0: &Point);
        _14 = (_8.1: &Point);
        _16 = <Point as PartialEq>::eq(_13, _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<Point, Point>(move _17, _13, _14, move _19) -> unwind continue;
    }

    bb6: {
        _23 = _1;
        _22 = <Point as Neg>::neg(move _23) -> [return: bb7, unwind continue];
    }

    bb7: {
        _21 = &_22;
        _93 = const _;
        _20 = (move _21, _93);
        _24 = (_20.0: &Point);
        _25 = (_20.1: &Point);
        _27 = <Point as PartialEq>::eq(_24, _25) -> [return: bb8, unwind continue];
    }

    bb8: {
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<Point, Point>(move _28, _24, _25, move _30) -> unwind continue;
    }

    bb10: {
        _34 = &_1;
        _33 = <Point as Index<bool>>::index(move _34, const true) -> [return: bb11, unwind continue];
    }

    bb11: {
        _32 = _33;
        _92 = const _;
        _31 = (move _32, _92);
        _35 = (_31.0: &isize);
        _36 = (_31.1: &isize);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<isize, isize>(move _41, _35, _36, move _43) -> unwind continue;
    }

    bb13: {
        _47 = &_1;
        _46 = <Point as Index<bool>>::index(move _47, const false) -> [return: bb14, unwind continue];
    }

    bb14: {
        _45 = _46;
        _91 = const _;
        _44 = (move _45, _91);
        _48 = (_44.0: &isize);
        _49 = (_44.1: &isize);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<isize, isize>(move _54, _48, _49, move _56) -> unwind continue;
    }

    bb16: {
        _58 = _1;
        _57 = <Point as Not>::not(move _58) -> [return: bb17, unwind continue];
    }

    bb17: {
        _60 = &(_57.0: isize);
        _63 = (_1.0: isize);
        _62 = Not(move _63);
        _61 = &_62;
        _59 = (move _60, move _61);
        _64 = (_59.0: &isize);
        _65 = (_59.1: &isize);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<isize, isize>(move _70, _64, _65, move _72) -> unwind continue;
    }

    bb19: {
        _74 = &(_57.1: isize);
        _77 = (_1.1: isize);
        _76 = Not(move _77);
        _75 = &_76;
        _73 = (move _74, move _75);
        _78 = (_73.0: &isize);
        _79 = (_73.1: &isize);
        _82 = (*_78);
        _83 = (*_79);
        _81 = Eq(move _82, move _83);
        _80 = Not(move _81);
        switchInt(move _80) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _84 = core::panicking::AssertKind::Eq;
        _86 = Option::<Arguments<'_>>::None;
        _85 = core::panicking::assert_failed::<isize, isize>(move _84, _78, _79, move _86) -> unwind continue;
    }

    bb21: {
        _90 = &_1;
        _89 = <Point as Index<bool>>::index(move _90, const true) -> [return: bb22, unwind continue];
    }

    bb22: {
        _88 = (*_89);
        _87 = result(move _88) -> [return: bb23, unwind continue];
    }

    bb23: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 22_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 11_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &Point = {
    let mut _0: &Point;
    let mut _1: Point;

    bb0: {
        _1 = Point { x: const -11_isize, y: const -22_isize };
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &Point = {
    let mut _0: &Point;
    let mut _1: Point;

    bb0: {
        _1 = Point { x: const 16_isize, y: const 27_isize };
        _0 = &_1;
        return;
    }
}

fn result(_1: isize) -> () {
    debug i => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}
