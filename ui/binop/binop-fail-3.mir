// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> ! {
    let mut _0: !;                       // return place in scope 0 at ui/binop/binop-fail-3.rs:5:13: 5:14
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _1 = begin_panic::<&str>(const "quux"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binop/binop-fail-3.rs:6:12: 6:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binop/binop-fail-3.rs:9:11: 9:11
    let mut _1: !;                       // in scope 0 at ui/binop/binop-fail-3.rs:10:5: 10:10

    bb0: {
        _1 = foo();                      // scope 0 at ui/binop/binop-fail-3.rs:10:5: 10:10
                                         // mir::Constant
                                         // + span: ui/binop/binop-fail-3.rs:10:5: 10:8
                                         // + literal: Const { ty: fn() -> ! {foo}, val: Value(<ZST>) }
    }
}
