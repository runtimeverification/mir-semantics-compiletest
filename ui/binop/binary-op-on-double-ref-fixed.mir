// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:2:11: 2:11
    let _1: std::vec::Vec<i32>;          // in scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:3:9: 3:10
    let mut _2: std::boxed::Box<[i32]>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[i32; 9]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[i32; 9]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: std::slice::Iter<'_, i32>; // in scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:4:14: 4:22
    let mut _10: &[i32];                 // in scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:4:14: 4:22
    let _11: &[i32];                     // in scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:4:14: 4:22
    let mut _12: &std::vec::Vec<i32>;    // in scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:4:14: 4:22
    let mut _13: [closure@ui/binop/binary-op-on-double-ref-fixed.rs:4:30: 4:33]; // in scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:4:30: 7:6
    let _14: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _15: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _16: &[&str];                // in scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:8:14: 8:20
    let mut _17: &[&str; 2];             // in scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:8:14: 8:20
    let _18: &[&str; 2];                 // in scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:8:14: 8:20
    let mut _19: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _20: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _21: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _22: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _23: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:8:22: 8:24
    let mut _24: &std::iter::Filter<std::slice::Iter<'_, i32>, [closure@ui/binop/binary-op-on-double-ref-fixed.rs:4:30: 4:33]>; // in scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:8:22: 8:24
    let _25: &std::iter::Filter<std::slice::Iter<'_, i32>, [closure@ui/binop/binary-op-on-double-ref-fixed.rs:4:30: 4:33]>; // in scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:8:22: 8:24
    let mut _27: *const [i32; 9];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/binop/binary-op-on-double-ref-fixed.rs:3:9: 3:10
        let _8: std::iter::Filter<std::slice::Iter<'_, i32>, [closure@ui/binop/binary-op-on-double-ref-fixed.rs:4:30: 4:33]>; // in scope 1 at ui/binop/binary-op-on-double-ref-fixed.rs:4:9: 4:11
        scope 3 {
            debug vr => _8;              // in scope 3 at ui/binop/binary-op-on-double-ref-fixed.rs:4:9: 4:11
            let mut _26: &[&str; 2];     // in scope 3 at ui/binop/binary-op-on-double-ref-fixed.rs:8:14: 8:20
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = const 36_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 4_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [i32; 9]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _27 = (((_7.0: std::ptr::Unique<[i32; 9]>).0: std::ptr::NonNull<[i32; 9]>).0: *const [i32; 9]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_27) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32, const 6_i32, const 7_i32, const 8_i32, const 9_i32]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = &_1;                       // scope 1 at ui/binop/binary-op-on-double-ref-fixed.rs:4:14: 4:22
        _11 = <Vec<i32> as Deref>::deref(move _12) -> [return: bb3, unwind: bb10]; // scope 1 at ui/binop/binary-op-on-double-ref-fixed.rs:4:14: 4:22
                                         // mir::Constant
                                         // + span: ui/binop/binary-op-on-double-ref-fixed.rs:4:14: 4:22
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>) -> &'a <Vec<i32> as Deref>::Target {<Vec<i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = _11;                       // scope 1 at ui/binop/binary-op-on-double-ref-fixed.rs:4:14: 4:22
        _9 = core::slice::<impl [i32]>::iter(move _10) -> [return: bb4, unwind: bb10]; // scope 1 at ui/binop/binary-op-on-double-ref-fixed.rs:4:14: 4:22
                                         // mir::Constant
                                         // + span: ui/binop/binary-op-on-double-ref-fixed.rs:4:16: 4:20
                                         // + literal: Const { ty: for<'a> fn(&'a [i32]) -> std::slice::Iter<'a, i32> {core::slice::<impl [i32]>::iter}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = <std::slice::Iter<'_, i32> as Iterator>::filter::<[closure@ui/binop/binary-op-on-double-ref-fixed.rs:4:30: 4:33]>(move _9, move _13) -> [return: bb5, unwind: bb10]; // scope 1 at ui/binop/binary-op-on-double-ref-fixed.rs:4:14: 7:7
                                         // mir::Constant
                                         // + span: ui/binop/binary-op-on-double-ref-fixed.rs:4:23: 4:29
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, i32>, [closure@ui/binop/binary-op-on-double-ref-fixed.rs:4:30: 4:33]) -> Filter<std::slice::Iter<'_, i32>, [closure@ui/binop/binary-op-on-double-ref-fixed.rs:4:30: 4:33]> {<std::slice::Iter<'_, i32> as Iterator>::filter::<[closure@ui/binop/binary-op-on-double-ref-fixed.rs:4:30: 4:33]>}, val: Value(<ZST>) }
    }

    bb5: {
        _26 = const _;                   // scope 3 at ui/binop/binary-op-on-double-ref-fixed.rs:8:14: 8:20
                                         // mir::Constant
                                         // + span: ui/binop/binary-op-on-double-ref-fixed.rs:8:14: 8:20
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _18 = _26;                       // scope 3 at ui/binop/binary-op-on-double-ref-fixed.rs:8:14: 8:20
        _17 = _18;                       // scope 3 at ui/binop/binary-op-on-double-ref-fixed.rs:8:14: 8:20
        _16 = move _17 as &[&str] (Pointer(Unsize)); // scope 3 at ui/binop/binary-op-on-double-ref-fixed.rs:8:14: 8:20
        _25 = &_8;                       // scope 3 at ui/binop/binary-op-on-double-ref-fixed.rs:8:22: 8:24
        _24 = _25;                       // scope 3 at ui/binop/binary-op-on-double-ref-fixed.rs:8:22: 8:24
        _23 = core::fmt::ArgumentV1::<'_>::new_debug::<Filter<std::slice::Iter<'_, i32>, [closure@ui/binop/binary-op-on-double-ref-fixed.rs:4:30: 4:33]>>(move _24) -> [return: bb6, unwind: bb10]; // scope 3 at ui/binop/binary-op-on-double-ref-fixed.rs:8:22: 8:24
                                         // mir::Constant
                                         // + span: ui/binop/binary-op-on-double-ref-fixed.rs:8:22: 8:24
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b Filter<std::slice::Iter<'_, i32>, [closure@ui/binop/binary-op-on-double-ref-fixed.rs:4:30: 4:33]>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Filter<std::slice::Iter<'_, i32>, [closure@ui/binop/binary-op-on-double-ref-fixed.rs:4:30: 4:33]>>}, val: Value(<ZST>) }
    }

    bb6: {
        _22 = [move _23];                // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _21 = &_22;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _19 = move _20 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _15 = Arguments::<'_>::new_v1(move _16, move _19) -> [return: bb7, unwind: bb10]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = _print(move _15) -> [return: bb8, unwind: bb10]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_1) -> bb9;                 // scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:9:1: 9:2
    }

    bb9: {
        return;                          // scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:9:2: 9:2
    }

    bb10 (cleanup): {
        drop(_1) -> bb11;                // scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:9:1: 9:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:2:1: 9:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:8:14: 8:20
    let mut _1: [&str; 2];               // in scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:8:14: 8:20

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:8:14: 8:20
                                         // mir::Constant
                                         // + span: ui/binop/binary-op-on-double-ref-fixed.rs:8:14: 8:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/binop/binary-op-on-double-ref-fixed.rs:8:14: 8:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:8:14: 8:20
        return;                          // scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:8:14: 8:20
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/binop/binary-op-on-double-ref-fixed.rs:4:30: 4:33], _2: &&i32) -> bool {
    debug x => _2;                       // in scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:4:31: 4:32
    let mut _0: bool;                    // return place in scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:4:34: 4:34
    let mut _3: i32;                     // in scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:5:9: 5:15
    let mut _4: &i32;                    // in scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:5:9: 5:11

    bb0: {
        _4 = (*_2);                      // scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:5:9: 5:11
        _3 = <&i32 as Rem<i32>>::rem(move _4, const 2_i32) -> bb1; // scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:5:9: 5:15
                                         // mir::Constant
                                         // + span: ui/binop/binary-op-on-double-ref-fixed.rs:5:9: 5:15
                                         // + literal: Const { ty: fn(&i32, i32) -> <&i32 as Rem<i32>>::Output {<&i32 as Rem<i32>>::rem}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Eq(move _3, const 0_i32);   // scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:5:9: 5:20
        return;                          // scope 0 at ui/binop/binary-op-on-double-ref-fixed.rs:7:6: 7:6
    }
}
