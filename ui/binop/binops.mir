// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_nil() -> () {
    let mut _0: ();
    let mut _1: (&(), &());
    let _2: &();
    let _3: &();
    let mut _4: bool;
    let mut _5: bool;
    let _7: !;
    let mut _8: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: !;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: !;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: !;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: !;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: !;
    let mut _27: &();
    let mut _28: &();
    let mut _29: &();
    let mut _30: &();
    let mut _31: &();
    let mut _32: &();
    let mut _33: &();
    let mut _34: &();
    let mut _35: &();
    let mut _36: &();
    let mut _37: &();
    let mut _38: &();
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _6: core::panicking::AssertKind;
        scope 2 {
            debug kind => _6;
        }
    }

    bb0: {
        _38 = const _;
        _37 = const _;
        _1 = (_38, _37);
        _2 = (_1.0: &());
        _3 = (_1.1: &());
        _5 = <() as PartialEq>::eq(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::AssertKind::Eq;
        _8 = Option::<Arguments<'_>>::None;
        _7 = core::panicking::assert_failed::<(), ()>(move _6, _2, _3, move _8) -> unwind continue;
    }

    bb3: {
        _36 = const _;
        _35 = const _;
        _11 = <() as PartialEq>::ne(_36, _35) -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = Not(move _11);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _12 = core::panicking::panic(const "assertion failed: (!(() != ()))") -> unwind continue;
    }

    bb6: {
        _34 = const _;
        _33 = const _;
        _15 = <() as PartialOrd>::lt(_34, _33) -> [return: bb7, unwind continue];
    }

    bb7: {
        _14 = Not(move _15);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _16 = core::panicking::panic(const "assertion failed: (!(() < ()))") -> unwind continue;
    }

    bb9: {
        _32 = const _;
        _31 = const _;
        _18 = <() as PartialOrd>::le(_32, _31) -> [return: bb10, unwind continue];
    }

    bb10: {
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _19 = core::panicking::panic(const "assertion failed: (() <= ())") -> unwind continue;
    }

    bb12: {
        _30 = const _;
        _29 = const _;
        _22 = <() as PartialOrd>::gt(_30, _29) -> [return: bb13, unwind continue];
    }

    bb13: {
        _21 = Not(move _22);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _23 = core::panicking::panic(const "assertion failed: (!(() > ()))") -> unwind continue;
    }

    bb15: {
        _28 = const _;
        _27 = const _;
        _25 = <() as PartialOrd>::ge(_28, _27) -> [return: bb16, unwind continue];
    }

    bb16: {
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _26 = core::panicking::panic(const "assertion failed: (() >= ())") -> unwind continue;
    }

    bb18: {
        return;
    }
}

promoted[0] in test_nil: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[1] in test_nil: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[2] in test_nil: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[3] in test_nil: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[4] in test_nil: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[5] in test_nil: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[6] in test_nil: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[7] in test_nil: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[8] in test_nil: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[9] in test_nil: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[10] in test_nil: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[11] in test_nil: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn test_bool() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: !;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: !;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: !;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: !;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: !;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: !;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: !;
    let mut _29: (&bool, &bool);
    let _30: &bool;
    let _31: &bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&bool, &bool);
    let _40: &bool;
    let _41: &bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&bool, &bool);
    let _50: &bool;
    let _51: &bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _59: (&bool, &bool);
    let _60: &bool;
    let _61: &bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let _67: !;
    let mut _68: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _69: (&bool, &bool);
    let _70: &bool;
    let _71: &bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _79: (&bool, &bool);
    let _80: &bool;
    let _81: &bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let _87: !;
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _89: (&bool, &bool);
    let _90: &bool;
    let _91: &bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: (&bool, &bool);
    let _100: &bool;
    let _101: &bool;
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: bool;
    let _107: !;
    let mut _108: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _109: (&bool, &bool);
    let _110: &bool;
    let _111: &bool;
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: bool;
    let mut _115: bool;
    let _117: !;
    let mut _118: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _119: &bool;
    let mut _120: &bool;
    let mut _121: &bool;
    let mut _122: &bool;
    let mut _123: &bool;
    let mut _124: &bool;
    let mut _125: &bool;
    let mut _126: &bool;
    let mut _127: &bool;
    let mut _128: &bool;
    let mut _129: &bool;
    let mut _130: &bool;
    let mut _131: &bool;
    let mut _132: &bool;
    let mut _133: &bool;
    let mut _134: &bool;
    let mut _135: &bool;
    let mut _136: &bool;
    scope 1 {
        debug left_val => _30;
        debug right_val => _31;
        let _36: core::panicking::AssertKind;
        scope 2 {
            debug kind => _36;
        }
    }
    scope 3 {
        debug left_val => _40;
        debug right_val => _41;
        let _46: core::panicking::AssertKind;
        scope 4 {
            debug kind => _46;
        }
    }
    scope 5 {
        debug left_val => _50;
        debug right_val => _51;
        let _56: core::panicking::AssertKind;
        scope 6 {
            debug kind => _56;
        }
    }
    scope 7 {
        debug left_val => _60;
        debug right_val => _61;
        let _66: core::panicking::AssertKind;
        scope 8 {
            debug kind => _66;
        }
    }
    scope 9 {
        debug left_val => _70;
        debug right_val => _71;
        let _76: core::panicking::AssertKind;
        scope 10 {
            debug kind => _76;
        }
    }
    scope 11 {
        debug left_val => _80;
        debug right_val => _81;
        let _86: core::panicking::AssertKind;
        scope 12 {
            debug kind => _86;
        }
    }
    scope 13 {
        debug left_val => _90;
        debug right_val => _91;
        let _96: core::panicking::AssertKind;
        scope 14 {
            debug kind => _96;
        }
    }
    scope 15 {
        debug left_val => _100;
        debug right_val => _101;
        let _106: core::panicking::AssertKind;
        scope 16 {
            debug kind => _106;
        }
    }
    scope 17 {
        debug left_val => _110;
        debug right_val => _111;
        let _116: core::panicking::AssertKind;
        scope 18 {
            debug kind => _116;
        }
    }

    bb0: {
        _3 = Lt(const true, const false);
        _2 = Not(move _3);
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = core::panicking::panic(const "assertion failed: (!(true < false))") -> unwind continue;
    }

    bb2: {
        _7 = Le(const true, const false);
        _6 = Not(move _7);
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = core::panicking::panic(const "assertion failed: (!(true <= false))") -> unwind continue;
    }

    bb4: {
        _10 = Gt(const true, const false);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _11 = core::panicking::panic(const "assertion failed: (true > false)") -> unwind continue;
    }

    bb6: {
        _13 = Ge(const true, const false);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _14 = core::panicking::panic(const "assertion failed: (true >= false)") -> unwind continue;
    }

    bb8: {
        _16 = Lt(const false, const true);
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _17 = core::panicking::panic(const "assertion failed: (false < true)") -> unwind continue;
    }

    bb10: {
        _19 = Le(const false, const true);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _20 = core::panicking::panic(const "assertion failed: (false <= true)") -> unwind continue;
    }

    bb12: {
        _23 = Gt(const false, const true);
        _22 = Not(move _23);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _24 = core::panicking::panic(const "assertion failed: (!(false > true))") -> unwind continue;
    }

    bb14: {
        _27 = Ge(const false, const true);
        _26 = Not(move _27);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _28 = core::panicking::panic(const "assertion failed: (!(false >= true))") -> unwind continue;
    }

    bb16: {
        _136 = const _;
        _135 = const _;
        _29 = (_136, _135);
        _30 = (_29.0: &bool);
        _31 = (_29.1: &bool);
        _34 = (*_30);
        _35 = (*_31);
        _33 = Eq(move _34, move _35);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<bool, bool>(move _36, _30, _31, move _38) -> unwind continue;
    }

    bb18: {
        _134 = const _;
        _133 = const _;
        _39 = (_134, _133);
        _40 = (_39.0: &bool);
        _41 = (_39.1: &bool);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<bool, bool>(move _46, _40, _41, move _48) -> unwind continue;
    }

    bb20: {
        _132 = const _;
        _131 = const _;
        _49 = (_132, _131);
        _50 = (_49.0: &bool);
        _51 = (_49.1: &bool);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<bool, bool>(move _56, _50, _51, move _58) -> unwind continue;
    }

    bb22: {
        _130 = const _;
        _129 = const _;
        _59 = (_130, _129);
        _60 = (_59.0: &bool);
        _61 = (_59.1: &bool);
        _64 = (*_60);
        _65 = (*_61);
        _63 = Eq(move _64, move _65);
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _66 = core::panicking::AssertKind::Eq;
        _68 = Option::<Arguments<'_>>::None;
        _67 = core::panicking::assert_failed::<bool, bool>(move _66, _60, _61, move _68) -> unwind continue;
    }

    bb24: {
        _128 = const _;
        _127 = const _;
        _69 = (_128, _127);
        _70 = (_69.0: &bool);
        _71 = (_69.1: &bool);
        _74 = (*_70);
        _75 = (*_71);
        _73 = Eq(move _74, move _75);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<bool, bool>(move _76, _70, _71, move _78) -> unwind continue;
    }

    bb26: {
        _126 = const _;
        _125 = const _;
        _79 = (_126, _125);
        _80 = (_79.0: &bool);
        _81 = (_79.1: &bool);
        _84 = (*_80);
        _85 = (*_81);
        _83 = Eq(move _84, move _85);
        _82 = Not(move _83);
        switchInt(move _82) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _86 = core::panicking::AssertKind::Eq;
        _88 = Option::<Arguments<'_>>::None;
        _87 = core::panicking::assert_failed::<bool, bool>(move _86, _80, _81, move _88) -> unwind continue;
    }

    bb28: {
        _124 = const _;
        _123 = const _;
        _89 = (_124, _123);
        _90 = (_89.0: &bool);
        _91 = (_89.1: &bool);
        _94 = (*_90);
        _95 = (*_91);
        _93 = Eq(move _94, move _95);
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<bool, bool>(move _96, _90, _91, move _98) -> unwind continue;
    }

    bb30: {
        _122 = const _;
        _121 = const _;
        _99 = (_122, _121);
        _100 = (_99.0: &bool);
        _101 = (_99.1: &bool);
        _104 = (*_100);
        _105 = (*_101);
        _103 = Eq(move _104, move _105);
        _102 = Not(move _103);
        switchInt(move _102) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _106 = core::panicking::AssertKind::Eq;
        _108 = Option::<Arguments<'_>>::None;
        _107 = core::panicking::assert_failed::<bool, bool>(move _106, _100, _101, move _108) -> unwind continue;
    }

    bb32: {
        _120 = const _;
        _119 = const _;
        _109 = (_120, _119);
        _110 = (_109.0: &bool);
        _111 = (_109.1: &bool);
        _114 = (*_110);
        _115 = (*_111);
        _113 = Eq(move _114, move _115);
        _112 = Not(move _113);
        switchInt(move _112) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _116 = core::panicking::AssertKind::Eq;
        _118 = Option::<Arguments<'_>>::None;
        _117 = core::panicking::assert_failed::<bool, bool>(move _116, _110, _111, move _118) -> unwind continue;
    }

    bb34: {
        return;
    }
}

promoted[0] in test_bool: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

promoted[1] in test_bool: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = BitXor(const true, const true);
        _0 = &_1;
        return;
    }
}

promoted[2] in test_bool: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[3] in test_bool: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = BitXor(const true, const false);
        _0 = &_1;
        return;
    }
}

promoted[4] in test_bool: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

promoted[5] in test_bool: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = BitXor(const false, const false);
        _0 = &_1;
        return;
    }
}

promoted[6] in test_bool: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[7] in test_bool: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = BitOr(const true, const true);
        _0 = &_1;
        return;
    }
}

promoted[8] in test_bool: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[9] in test_bool: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = BitOr(const true, const false);
        _0 = &_1;
        return;
    }
}

promoted[10] in test_bool: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

promoted[11] in test_bool: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = BitOr(const false, const false);
        _0 = &_1;
        return;
    }
}

promoted[12] in test_bool: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[13] in test_bool: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = BitAnd(const true, const true);
        _0 = &_1;
        return;
    }
}

promoted[14] in test_bool: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

promoted[15] in test_bool: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = BitAnd(const true, const false);
        _0 = &_1;
        return;
    }
}

promoted[16] in test_bool: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

promoted[17] in test_bool: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = BitAnd(const false, const false);
        _0 = &_1;
        return;
    }
}

fn test_ptr() -> () {
    let mut _0: ();
    let mut _4: (&*const u8, &*const u8);
    let mut _5: &*const u8;
    let mut _6: &*const u8;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: *const u8;
    let mut _12: *const u8;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: *const u8;
    let mut _19: !;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: *const u8;
    let mut _23: !;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: *const u8;
    let mut _27: !;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: *const u8;
    let mut _31: !;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: !;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: *const u8;
    let mut _38: *const u8;
    let mut _39: !;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: *const u8;
    let mut _43: *const u8;
    let mut _44: !;
    scope 1 {
        let _1: *const u8;
        scope 2 {
            debug p1 => _1;
            let _2: *const u8;
            scope 3 {
                debug p2 => _2;
                let _3: *const u8;
                scope 4 {
                    debug p3 => _3;
                    let _7: &*const u8;
                    let _8: &*const u8;
                    scope 5 {
                        debug left_val => _7;
                        debug right_val => _8;
                        let _13: core::panicking::AssertKind;
                        scope 6 {
                            debug kind => _13;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 0_usize as *const u8 (Transmute);
        _2 = const 0_usize as *const u8 (Transmute);
        _3 = const 1_usize as *const u8 (Transmute);
        _5 = &_1;
        _6 = &_2;
        _4 = (move _5, move _6);
        _7 = (_4.0: &*const u8);
        _8 = (_4.1: &*const u8);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<*const u8, *const u8>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb2: {
        _18 = _1;
        _17 = Ne(move _18, _3);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _19 = core::panicking::panic(const "assertion failed: p1 != p3") -> unwind continue;
    }

    bb4: {
        _22 = _1;
        _21 = Lt(move _22, _3);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _23 = core::panicking::panic(const "assertion failed: p1 < p3") -> unwind continue;
    }

    bb6: {
        _26 = _1;
        _25 = Le(move _26, _3);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _27 = core::panicking::panic(const "assertion failed: p1 <= p3") -> unwind continue;
    }

    bb8: {
        _30 = _1;
        _29 = Gt(_3, move _30);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _31 = core::panicking::panic(const "assertion failed: p3 > p1") -> unwind continue;
    }

    bb10: {
        _33 = Ge(_3, _3);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _34 = core::panicking::panic(const "assertion failed: p3 >= p3") -> unwind continue;
    }

    bb12: {
        _37 = _1;
        _38 = _2;
        _36 = Le(move _37, move _38);
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _39 = core::panicking::panic(const "assertion failed: p1 <= p2") -> unwind continue;
    }

    bb14: {
        _42 = _1;
        _43 = _2;
        _41 = Ge(move _42, move _43);
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _44 = core::panicking::panic(const "assertion failed: p1 >= p2") -> unwind continue;
    }

    bb16: {
        return;
    }
}

fn <impl at ui/binop/binops.rs:55:10: 55:19>::eq(_1: &p, _2: &p) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: bool;
    let mut _7: isize;
    let mut _8: isize;

    bb0: {
        _4 = ((*_1).0: isize);
        _5 = ((*_2).0: isize);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = ((*_1).1: isize);
        _8 = ((*_2).1: isize);
        _6 = Eq(move _7, move _8);
        _0 = move _6;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn <impl at ui/binop/binops.rs:55:21: 55:26>::fmt(_1: &p, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &isize;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&isize;
    let _10: &isize;

    bb0: {
        _3 = const "p";
        _4 = const "x";
        _6 = &((*_1).0: isize);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "y";
        _10 = &((*_1).1: isize);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn p(_1: isize, _2: isize) -> p {
    debug x => _1;
    debug y => _2;
    let mut _0: p;

    bb0: {
        _0 = p { x: _1, y: _2 };
        return;
    }
}

fn test_class() -> () {
    let mut _0: ();
    let _1: p;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 2];
    let _8: [core::fmt::rt::Argument<'_>; 2];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &usize;
    let _11: usize;
    let mut _12: *const p;
    let _13: &p;
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &usize;
    let _16: usize;
    let mut _17: *const p;
    let _18: &p;
    let mut _19: (&p, &p);
    let mut _20: &p;
    let mut _21: &p;
    let mut _24: bool;
    let mut _25: bool;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: isize;
    let mut _32: isize;
    let mut _33: !;
    let mut _34: (&isize, &isize);
    let mut _35: &isize;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: isize;
    let mut _41: isize;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: &p;
    let mut _48: &p;
    let mut _49: !;
    scope 1 {
        debug q => _1;
        let mut _2: p;
        scope 2 {
            debug r => _2;
            let _22: &p;
            let _23: &p;
            let _36: &isize;
            let _37: &isize;
            let mut _50: &isize;
            scope 3 {
                let mut _51: &[&str; 3];
            }
            scope 4 {
                debug left_val => _22;
                debug right_val => _23;
                let _26: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _26;
                }
            }
            scope 6 {
                debug left_val => _36;
                debug right_val => _37;
                let _42: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _42;
                }
            }
        }
    }

    bb0: {
        _1 = p(const 1_isize, const 2_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = p(const 1_isize, const 2_isize) -> [return: bb2, unwind continue];
    }

    bb2: {
        _51 = const _;
        _5 = _51 as &[&str] (Pointer(Unsize));
        _13 = &_1;
        _12 = &raw const (*_13);
        _11 = move _12 as usize (Transmute);
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_lower_hex::<usize>(_10) -> [return: bb3, unwind continue];
    }

    bb3: {
        _18 = &_2;
        _17 = &raw const (*_18);
        _16 = move _17 as usize (Transmute);
        _15 = &_16;
        _14 = core::fmt::rt::Argument::<'_>::new_lower_hex::<usize>(_15) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = [move _9, move _14];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb5, unwind continue];
    }

    bb5: {
        _3 = _print(move _4) -> [return: bb6, unwind continue];
    }

    bb6: {
        _20 = &_1;
        _21 = &_2;
        _19 = (move _20, move _21);
        _22 = (_19.0: &p);
        _23 = (_19.1: &p);
        _25 = <p as PartialEq>::eq(_22, _23) -> [return: bb7, unwind continue];
    }

    bb7: {
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<p, p>(move _26, _22, _23, move _28) -> unwind continue;
    }

    bb9: {
        (_2.1: isize) = const 17_isize;
        _31 = (_2.1: isize);
        _32 = (_1.1: isize);
        _30 = Ne(move _31, move _32);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _33 = core::panicking::panic(const "assertion failed: (r.y != q.y)") -> unwind continue;
    }

    bb11: {
        _35 = &(_2.1: isize);
        _50 = const _;
        _34 = (move _35, _50);
        _36 = (_34.0: &isize);
        _37 = (_34.1: &isize);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<isize, isize>(move _42, _36, _37, move _44) -> unwind continue;
    }

    bb13: {
        _47 = &_1;
        _48 = &_2;
        _46 = <p as PartialEq>::ne(move _47, move _48) -> [return: bb14, unwind continue];
    }

    bb14: {
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _49 = core::panicking::panic(const "assertion failed: (q != r)") -> unwind continue;
    }

    bb16: {
        return;
    }
}

promoted[0] in test_class: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 17_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in test_class: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "q = ", const ", r = ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();

    bb0: {
        _1 = test_nil() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = test_bool() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = test_ptr() -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = test_class() -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}
