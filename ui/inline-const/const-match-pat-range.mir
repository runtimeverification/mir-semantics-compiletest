// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/inline-const/const-match-pat-range.rs:6:11: 6:11
    let _1: u32;                         // in scope 0 at ui/inline-const/const-match-pat-range.rs:8:9: 8:10
    let mut _2: bool;                    // in scope 0 at ui/inline-const/const-match-pat-range.rs:16:9: 16:31
    let mut _3: bool;                    // in scope 0 at ui/inline-const/const-match-pat-range.rs:21:9: 21:44
    let mut _4: bool;                    // in scope 0 at ui/inline-const/const-match-pat-range.rs:26:9: 26:27
    let mut _5: bool;                    // in scope 0 at ui/inline-const/const-match-pat-range.rs:31:9: 31:27
    let mut _6: bool;                    // in scope 0 at ui/inline-const/const-match-pat-range.rs:36:9: 36:28
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/inline-const/const-match-pat-range.rs:8:9: 8:10
    }

    bb0: {
        _1 = const 3_u32;                // scope 0 at ui/inline-const/const-match-pat-range.rs:8:18: 8:19
        _2 = Le(const 9_u32, _1);        // scope 1 at ui/inline-const/const-match-pat-range.rs:16:9: 16:31
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/inline-const/const-match-pat-range.rs:16:9: 16:31
    }

    bb1: {
        goto -> bb2;                     // scope 1 at ui/inline-const/const-match-pat-range.rs:16:9: 16:31
    }

    bb2: {
        _3 = Le(const 9_u32, _1);        // scope 1 at ui/inline-const/const-match-pat-range.rs:21:9: 21:44
        switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 1 at ui/inline-const/const-match-pat-range.rs:21:9: 21:44
    }

    bb3: {
        goto -> bb4;                     // scope 1 at ui/inline-const/const-match-pat-range.rs:21:9: 21:44
    }

    bb4: {
        _4 = Le(const 0_u32, _1);        // scope 1 at ui/inline-const/const-match-pat-range.rs:26:9: 26:27
        switchInt(move _4) -> [0: bb6, otherwise: bb5]; // scope 1 at ui/inline-const/const-match-pat-range.rs:26:9: 26:27
    }

    bb5: {
        goto -> bb6;                     // scope 1 at ui/inline-const/const-match-pat-range.rs:26:9: 26:27
    }

    bb6: {
        _5 = Le(const 9_u32, _1);        // scope 1 at ui/inline-const/const-match-pat-range.rs:31:9: 31:27
        switchInt(move _5) -> [0: bb8, otherwise: bb7]; // scope 1 at ui/inline-const/const-match-pat-range.rs:31:9: 31:27
    }

    bb7: {
        goto -> bb8;                     // scope 1 at ui/inline-const/const-match-pat-range.rs:31:9: 31:27
    }

    bb8: {
        _6 = Le(const 0_u32, _1);        // scope 1 at ui/inline-const/const-match-pat-range.rs:36:9: 36:28
        switchInt(move _6) -> [0: bb10, otherwise: bb9]; // scope 1 at ui/inline-const/const-match-pat-range.rs:36:9: 36:28
    }

    bb9: {
        goto -> bb10;                    // scope 1 at ui/inline-const/const-match-pat-range.rs:36:9: 36:28
    }

    bb10: {
        return;                          // scope 0 at ui/inline-const/const-match-pat-range.rs:39:2: 39:2
    }
}

const N: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/inline-const/const-match-pat-range.rs:7:14: 7:17

    bb0: {
        _0 = const 10_u32;               // scope 0 at ui/inline-const/const-match-pat-range.rs:7:20: 7:22
        return;                          // scope 0 at ui/inline-const/const-match-pat-range.rs:7:5: 7:23
    }
}

main::{constant#0}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/inline-const/const-match-pat-range.rs:11:21: 11:30
    let mut _1: (u32, bool);             // in scope 0 at ui/inline-const/const-match-pat-range.rs:11:23: 11:28

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/inline-const/const-match-pat-range.rs:11:23: 11:28
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/inline-const/const-match-pat-range.rs:11:23: 11:28
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/inline-const/const-match-pat-range.rs:11:23: 11:28
        return;                          // scope 0 at ui/inline-const/const-match-pat-range.rs:11:21: 11:30
    }
}

main::{constant#1}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/inline-const/const-match-pat-range.rs:16:15: 16:24
    let mut _1: (u32, bool);             // in scope 0 at ui/inline-const/const-match-pat-range.rs:16:17: 16:22

    bb0: {
        _1 = CheckedSub(const _, const 1_u32); // scope 0 at ui/inline-const/const-match-pat-range.rs:16:17: 16:22
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/inline-const/const-match-pat-range.rs:16:17: 16:22
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/inline-const/const-match-pat-range.rs:16:17: 16:22
        return;                          // scope 0 at ui/inline-const/const-match-pat-range.rs:16:15: 16:24
    }
}

main::{constant#2}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/inline-const/const-match-pat-range.rs:21:15: 21:24
    let mut _1: (u32, bool);             // in scope 0 at ui/inline-const/const-match-pat-range.rs:21:17: 21:22

    bb0: {
        _1 = CheckedSub(const _, const 1_u32); // scope 0 at ui/inline-const/const-match-pat-range.rs:21:17: 21:22
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/inline-const/const-match-pat-range.rs:21:17: 21:22
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/inline-const/const-match-pat-range.rs:21:17: 21:22
        return;                          // scope 0 at ui/inline-const/const-match-pat-range.rs:21:15: 21:24
    }
}

main::{constant#3}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/inline-const/const-match-pat-range.rs:21:35: 21:44
    let mut _1: (u32, bool);             // in scope 0 at ui/inline-const/const-match-pat-range.rs:21:37: 21:42

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/inline-const/const-match-pat-range.rs:21:37: 21:42
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/inline-const/const-match-pat-range.rs:21:37: 21:42
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/inline-const/const-match-pat-range.rs:21:37: 21:42
        return;                          // scope 0 at ui/inline-const/const-match-pat-range.rs:21:35: 21:44
    }
}

main::{constant#4}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/inline-const/const-match-pat-range.rs:26:18: 26:27
    let mut _1: (u32, bool);             // in scope 0 at ui/inline-const/const-match-pat-range.rs:26:20: 26:25

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/inline-const/const-match-pat-range.rs:26:20: 26:25
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/inline-const/const-match-pat-range.rs:26:20: 26:25
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/inline-const/const-match-pat-range.rs:26:20: 26:25
        return;                          // scope 0 at ui/inline-const/const-match-pat-range.rs:26:18: 26:27
    }
}

main::{constant#5}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/inline-const/const-match-pat-range.rs:31:15: 31:24
    let mut _1: (u32, bool);             // in scope 0 at ui/inline-const/const-match-pat-range.rs:31:17: 31:22

    bb0: {
        _1 = CheckedSub(const _, const 1_u32); // scope 0 at ui/inline-const/const-match-pat-range.rs:31:17: 31:22
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/inline-const/const-match-pat-range.rs:31:17: 31:22
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/inline-const/const-match-pat-range.rs:31:17: 31:22
        return;                          // scope 0 at ui/inline-const/const-match-pat-range.rs:31:15: 31:24
    }
}

main::{constant#6}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/inline-const/const-match-pat-range.rs:36:19: 36:28
    let mut _1: (u32, bool);             // in scope 0 at ui/inline-const/const-match-pat-range.rs:36:21: 36:26

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/inline-const/const-match-pat-range.rs:36:21: 36:26
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/inline-const/const-match-pat-range.rs:36:21: 36:26
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/inline-const/const-match-pat-range.rs:36:21: 36:26
        return;                          // scope 0 at ui/inline-const/const-match-pat-range.rs:36:19: 36:28
    }
}
