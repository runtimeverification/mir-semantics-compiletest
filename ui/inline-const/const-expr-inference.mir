// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn todo() -> T {
    let mut _0: T;                       // return place in scope 0 at ui/inline-const/const-expr-inference.rs:5:21: 5:22

    bb0: {
        _0 = const _;                    // scope 0 at ui/inline-const/const-expr-inference.rs:6:5: 6:22
                                         // mir::Constant
                                         // + span: ui/inline-const/const-expr-inference.rs:6:5: 6:22
                                         // + literal: Const { ty: T, val: Unevaluated(todo::{constant#0}, [T, T], None) }
        return;                          // scope 0 at ui/inline-const/const-expr-inference.rs:7:2: 7:2
    }
}

todo::{constant#0}: T = {
    let mut _0: T;                       // return place in scope 0 at ui/inline-const/const-expr-inference.rs:6:11: 6:22
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        StorageLive(_1);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
        ConstEvalCounter;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
        _1 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/inline-const/const-expr-inference.rs:9:11: 9:11
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/inline-const/const-expr-inference.rs:11:2: 11:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/inline-const/const-expr-inference.rs:10:26: 10:31

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/inline-const/const-expr-inference.rs:10:28: 10:29
        return;                          // scope 0 at ui/inline-const/const-expr-inference.rs:10:26: 10:31
    }
}
