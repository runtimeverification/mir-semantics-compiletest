// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn bar() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/inline-const/const-expr-reference.rs:5:19: 5:22

    bb0: {
        _0 = const _;                    // scope 0 at ui/inline-const/const-expr-reference.rs:6:5: 8:6
        return;                          // scope 0 at ui/inline-const/const-expr-reference.rs:9:2: 9:2
    }
}

// MIR FOR CTFE
fn bar() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/inline-const/const-expr-reference.rs:5:19: 5:22

    bb0: {
        _0 = const _;                    // scope 0 at ui/inline-const/const-expr-reference.rs:6:5: 8:6
        return;                          // scope 0 at ui/inline-const/const-expr-reference.rs:9:2: 9:2
    }
}

bar::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/inline-const/const-expr-reference.rs:6:11: 8:6
    let mut _1: (i32, bool);             // in scope 0 at ui/inline-const/const-expr-reference.rs:7:9: 7:14

    bb0: {
        _1 = CheckedAdd(const 2_i32, const 3_i32); // scope 0 at ui/inline-const/const-expr-reference.rs:7:9: 7:14
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 2_i32, const 3_i32) -> bb1; // scope 0 at ui/inline-const/const-expr-reference.rs:7:9: 7:14
    }

    bb1: {
        _0 = move (_1.0: i32);           // scope 0 at ui/inline-const/const-expr-reference.rs:7:9: 7:14
        return;                          // scope 0 at ui/inline-const/const-expr-reference.rs:6:11: 8:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/inline-const/const-expr-reference.rs:11:11: 11:11
    let _1: &i32;                        // in scope 0 at ui/inline-const/const-expr-reference.rs:12:9: 12:10
    let _2: &i32;                        // in scope 0 at ui/inline-const/const-expr-reference.rs:12:27: 12:40
    let mut _3: (&&i32, &&i32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &&i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _5: &&i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &&i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &&i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _21: &i32;                   // in scope 0 at ui/inline-const/const-expr-reference.rs:12:27: 12:40
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/inline-const/const-expr-reference.rs:12:9: 12:10
        let _6: &&i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _7: &&i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _20: &&i32;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 2 {
            debug left_val => _6;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _7;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _12: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _12;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _21 = const _;                   // scope 0 at ui/inline-const/const-expr-reference.rs:12:27: 12:40
                                         // mir::Constant
                                         // + span: ui/inline-const/const-expr-reference.rs:12:27: 12:40
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _2 = _21;                        // scope 0 at ui/inline-const/const-expr-reference.rs:12:27: 12:40
        _1 = _2;                         // scope 0 at ui/inline-const/const-expr-reference.rs:12:27: 12:40
        _20 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _20;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _5 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _5);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_3.0: &&i32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_3.1: &&i32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <&i32 as PartialEq>::eq(move _10, move _11) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &i32, &'b &i32) -> bool {<&i32 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = Not(move _9);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _12 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<&i32, &i32>(move _14, move _15, move _17, move _19); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &i32, &'b &i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&i32, &i32>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/inline-const/const-expr-reference.rs:14:2: 14:2
    }
}

promoted[0] in main: &&i32 = {
    let mut _0: &&i32;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &i32;                    // in scope 0 at ui/inline-const/const-expr-reference.rs:13:16: 13:18
    let mut _2: i32;                     // in scope 0 at ui/inline-const/const-expr-reference.rs:13:17: 13:18

    bb0: {
        _2 = const 5_i32;                // scope 0 at ui/inline-const/const-expr-reference.rs:13:17: 13:18
        _1 = &_2;                        // scope 0 at ui/inline-const/const-expr-reference.rs:13:16: 13:18
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/inline-const/const-expr-reference.rs:12:27: 12:40
    let mut _1: i32;                     // in scope 0 at ui/inline-const/const-expr-reference.rs:12:28: 12:40

    bb0: {
        _1 = const _;                    // scope 0 at ui/inline-const/const-expr-reference.rs:12:28: 12:40
        _0 = &_1;                        // scope 0 at ui/inline-const/const-expr-reference.rs:12:27: 12:40
        return;                          // scope 0 at ui/inline-const/const-expr-reference.rs:12:27: 12:40
    }
}

main::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/inline-const/const-expr-reference.rs:12:33: 12:40

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/inline-const/const-expr-reference.rs:12:34: 12:39
        _0 = bar() -> bb1;               // scope 0 at ui/inline-const/const-expr-reference.rs:12:34: 12:39
                                         // mir::Constant
                                         // + span: ui/inline-const/const-expr-reference.rs:12:34: 12:37
                                         // + literal: Const { ty: fn() -> i32 {bar}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/inline-const/const-expr-reference.rs:12:33: 12:40
    }
}
