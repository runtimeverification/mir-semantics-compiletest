// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn bar() -> i32 {
    let mut _0: i32;

    bb0: {
        _0 = const _;
        return;
    }
}

// MIR FOR CTFE
fn bar() -> i32 {
    let mut _0: i32;

    bb0: {
        _0 = const _;
        return;
    }
}

bar::{constant#0}: i32 = {
    let mut _0: i32;
    let mut _1: (i32, bool);

    bb0: {
        _1 = CheckedAdd(const 2_i32, const 3_i32);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 2_i32, const 3_i32) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: i32);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &i32;
    let mut _2: (&&i32, &&i32);
    let mut _3: &&i32;
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: &i32;
    scope 1 {
        debug x => _1;
        let _4: &&i32;
        let _5: &&i32;
        let mut _11: &&i32;
        scope 2 {
            debug left_val => _4;
            debug right_val => _5;
            let _8: core::panicking::AssertKind;
            scope 3 {
                debug kind => _8;
            }
        }
    }

    bb0: {
        _12 = const _;
        _1 = _12;
        _11 = const _;
        _3 = &_1;
        _2 = (_11, move _3);
        _4 = (_2.0: &&i32);
        _5 = (_2.1: &&i32);
        _7 = <&i32 as PartialEq>::eq(_4, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<&i32, &i32>(move _8, _4, _5, move _10) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &&i32 = {
    let mut _0: &&i32;
    let mut _1: &i32;
    let mut _2: i32;

    bb0: {
        _2 = const 5_i32;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: i32 = {
    let mut _0: i32;

    bb0: {
        ConstEvalCounter;
        _0 = bar() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
