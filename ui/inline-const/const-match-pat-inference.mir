// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/inline-const/const-match-pat-inference.rs:6:11: 6:11

    bb0: {
        return;                          // scope 0 at ui/inline-const/const-match-pat-inference.rs:12:2: 12:2
    }
}

main::{constant#0}: u64 = {
    let mut _0: u64;                     // return place in scope 0 at ui/inline-const/const-match-pat-inference.rs:9:15: 9:24
    let mut _1: (u64, bool);             // in scope 0 at ui/inline-const/const-match-pat-inference.rs:9:17: 9:22

    bb0: {
        _1 = CheckedAdd(const 0_u64, const 1_u64); // scope 0 at ui/inline-const/const-match-pat-inference.rs:9:17: 9:22
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 0_u64, const 1_u64) -> bb1; // scope 0 at ui/inline-const/const-match-pat-inference.rs:9:17: 9:22
    }

    bb1: {
        _0 = move (_1.0: u64);           // scope 0 at ui/inline-const/const-match-pat-inference.rs:9:17: 9:22
        return;                          // scope 0 at ui/inline-const/const-match-pat-inference.rs:9:15: 9:24
    }
}

main::{constant#1}: u64 = {
    let mut _0: u64;                     // return place in scope 0 at ui/inline-const/const-match-pat-inference.rs:10:15: 10:24
    let mut _1: (u64, bool);             // in scope 0 at ui/inline-const/const-match-pat-inference.rs:10:17: 10:22

    bb0: {
        _1 = CheckedSub(const 2_u64, const 1_u64); // scope 0 at ui/inline-const/const-match-pat-inference.rs:10:17: 10:22
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const 2_u64, const 1_u64) -> bb1; // scope 0 at ui/inline-const/const-match-pat-inference.rs:10:17: 10:22
    }

    bb1: {
        _0 = move (_1.0: u64);           // scope 0 at ui/inline-const/const-match-pat-inference.rs:10:17: 10:22
        return;                          // scope 0 at ui/inline-const/const-match-pat-inference.rs:10:15: 10:24
    }
}

main::{constant#2}: u64 = {
    let mut _0: u64;                     // return place in scope 0 at ui/inline-const/const-match-pat-inference.rs:10:35: 10:47

    bb0: {
        _0 = const _;                    // scope 0 at ui/inline-const/const-match-pat-inference.rs:10:37: 10:45
        return;                          // scope 0 at ui/inline-const/const-match-pat-inference.rs:10:35: 10:47
    }
}
