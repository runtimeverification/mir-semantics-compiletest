// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/inline-const/const-match-pat-lifetime-err.rs:9:10: 9:19>::eq(_1: &InvariantRef<'_, T>, _2: &InvariantRef<'_, T>) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &&T;
    let mut _5: &&T;
    let mut _6: bool;
    let mut _7: &std::marker::PhantomData<&mut &T>;
    let mut _8: &std::marker::PhantomData<&mut &T>;

    bb0: {
        _4 = &((*_1).0: &T);
        _5 = &((*_2).0: &T);
        _3 = <&T as PartialEq>::eq(move _4, move _5) -> [return: bb4, unwind continue];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = &((*_1).1: std::marker::PhantomData<&mut &T>);
        _8 = &((*_2).1: std::marker::PhantomData<&mut &T>);
        _6 = <PhantomData<&mut &T> as PartialEq>::eq(move _7, move _8) -> [return: bb5, unwind continue];
    }

    bb3: {
        return;
    }

    bb4: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }

    bb5: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn <impl at ui/inline-const/const-match-pat-lifetime-err.rs:9:21: 9:23>::assert_receiver_is_total_eq(_1: &InvariantRef<'_, T>) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;
    }
}

fn <impl at ui/inline-const/const-match-pat-lifetime-err.rs:12:1: 12:40>::new(_1: &T) -> InvariantRef<'_, T> {
    debug r => _1;
    let mut _0: InvariantRef<'_, T>;

    bb0: {
        _0 = InvariantRef::<'_, T>(_1, const ZeroSized: PhantomData<&mut &T>);
        return;
    }
}

// MIR FOR CTFE
fn <impl at ui/inline-const/const-match-pat-lifetime-err.rs:12:1: 12:40>::new(_1: &T) -> InvariantRef<'_, T> {
    debug r => _1;
    let mut _0: InvariantRef<'_, T>;
    let mut _2: &T;
    let mut _3: std::marker::PhantomData<&mut &T>;

    bb0: {
        StorageLive(_2);
        _2 = &(*_1);
        StorageLive(_3);
        _3 = PhantomData::<&mut &T>;
        _0 = InvariantRef::<'_, T>(move _2, move _3);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

const <impl at ui/inline-const/const-match-pat-lifetime-err.rs:18:1: 18:30>::NEW: InvariantRef<'_, ()> = {
    let mut _0: InvariantRef<'_, ()>;
    let mut _1: &();
    let _2: &();
    let _3: ();
    let mut _4: &();

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = InvariantRef::<'_, ()>::new(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in <impl at ui/inline-const/const-match-pat-lifetime-err.rs:18:1: 18:30>::NEW: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn match_invariant_ref() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: InvariantRef<'_, ()>;
    let _3: &();
    scope 1 {
        debug y => const ();
    }

    bb0: {
        _3 = &_1;
        _2 = InvariantRef::<'_, ()>::new(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

match_invariant_ref::{constant#0}: InvariantRef<'_, ()> = {
    let mut _0: InvariantRef<'_, ()>;

    bb0: {
        _0 = const _;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = match_invariant_ref() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn InvariantRef(_1: &T, _2: PhantomData<&mut &T>) -> InvariantRef<'_, T> {
    let mut _0: InvariantRef<'_, T>;

    bb0: {
        _0 = InvariantRef::<'_, T>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn InvariantRef(_1: &T, _2: PhantomData<&mut &T>) -> InvariantRef<'_, T> {
    let mut _0: InvariantRef<'_, T>;

    bb0: {
        _0 = InvariantRef::<'_, T>(move _1, move _2);
        return;
    }
}
