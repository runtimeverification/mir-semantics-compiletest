// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/inline-const/const-match-pat-lifetime-err.rs:9:10: 9:19>::eq(_1: &InvariantRef<'_, T>, _2: &InvariantRef<'_, T>) -> bool {
    debug self => _1;                    // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:9:10: 9:19
    debug other => _2;                   // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:9:10: 9:19
    let mut _0: bool;                    // return place in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:9:10: 9:19
    let mut _3: bool;                    // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:40: 10:45
    let mut _4: &&T;                     // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:40: 10:45
    let mut _5: &&T;                     // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:40: 10:45
    let mut _6: bool;                    // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:47: 10:73
    let mut _7: &std::marker::PhantomData<&mut &T>; // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:47: 10:73
    let mut _8: &std::marker::PhantomData<&mut &T>; // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:47: 10:73

    bb0: {
        _4 = &((*_1).0: &T);             // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:40: 10:45
        _5 = &((*_2).0: &T);             // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:40: 10:45
        _3 = <&T as PartialEq>::eq(move _4, move _5) -> bb4; // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:40: 10:45
                                         // mir::Constant
                                         // + span: ui/inline-const/const-match-pat-lifetime-err.rs:10:40: 10:45
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &T, &'b &T) -> bool {<&T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:47: 10:73
        goto -> bb3;                     // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:47: 10:73
    }

    bb2: {
        _7 = &((*_1).1: std::marker::PhantomData<&mut &T>); // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:47: 10:73
        _8 = &((*_2).1: std::marker::PhantomData<&mut &T>); // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:47: 10:73
        _6 = <PhantomData<&mut &T> as PartialEq>::eq(move _7, move _8) -> bb5; // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:47: 10:73
                                         // mir::Constant
                                         // + span: ui/inline-const/const-match-pat-lifetime-err.rs:10:47: 10:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a PhantomData<&mut &T>, &'b PhantomData<&mut &T>) -> bool {<PhantomData<&mut &T> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:9:19: 9:19
    }

    bb4: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:47: 10:73
    }

    bb5: {
        _0 = move _6;                    // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:47: 10:73
        goto -> bb3;                     // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:47: 10:73
    }
}

fn <impl at ui/inline-const/const-match-pat-lifetime-err.rs:9:21: 9:23>::assert_receiver_is_total_eq(_1: &InvariantRef<'_, T>) -> () {
    debug self => _1;                    // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:9:21: 9:23
    let mut _0: ();                      // return place in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:9:21: 9:23
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;                          // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:9:23: 9:23
    }
}

fn <impl at ui/inline-const/const-match-pat-lifetime-err.rs:12:1: 12:40>::new(_1: &T) -> InvariantRef<'_, T> {
    debug r => _1;                       // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:13:22: 13:23
    let mut _0: InvariantRef<'_, T>;     // return place in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:13:35: 13:39
    let mut _2: &T;                      // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:14:22: 14:23
    let mut _3: std::marker::PhantomData<&mut &T>; // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:14:25: 14:36

    bb0: {
        _2 = _1;                         // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:14:22: 14:23
        _0 = InvariantRef::<'_, T>(move _2, move _3); // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:14:9: 14:37
        return;                          // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:15:6: 15:6
    }
}

// MIR FOR CTFE
fn <impl at ui/inline-const/const-match-pat-lifetime-err.rs:12:1: 12:40>::new(_1: &T) -> InvariantRef<'_, T> {
    debug r => _1;                       // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:13:22: 13:23
    let mut _0: InvariantRef<'_, T>;     // return place in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:13:35: 13:39
    let mut _2: &T;                      // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:14:22: 14:23
    let mut _3: std::marker::PhantomData<&mut &T>; // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:14:25: 14:36

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:14:22: 14:23
        _2 = &(*_1);                     // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:14:22: 14:23
        StorageLive(_3);                 // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:14:25: 14:36
        _3 = PhantomData::<&mut &T>;     // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:14:25: 14:36
        _0 = InvariantRef::<'_, T>(move _2, move _3); // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:14:9: 14:37
        StorageDead(_3);                 // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:14:36: 14:37
        StorageDead(_2);                 // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:14:36: 14:37
        return;                          // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:15:6: 15:6
    }
}

const <impl at ui/inline-const/const-match-pat-lifetime-err.rs:18:1: 18:30>::NEW: InvariantRef<'_, ()> = {
    let mut _0: InvariantRef<'_, ()>;    // return place in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:19:20: 19:24
    let mut _1: &();                     // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:19:45: 19:48
    let _2: &();                         // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:19:45: 19:48
    let _3: ();                          // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:19:46: 19:48
    let mut _4: &();                     // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:19:45: 19:48

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:19:45: 19:48
        StorageLive(_2);                 // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:19:45: 19:48
        _4 = const _;                    // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:19:45: 19:48
                                         // mir::Constant
                                         // + span: ui/inline-const/const-match-pat-lifetime-err.rs:19:45: 19:48
                                         // + literal: Const { ty: &(), val: Unevaluated(InvariantRef::<'a, ()>::NEW, [ReErased], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:19:45: 19:48
        _1 = &(*_2);                     // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:19:45: 19:48
        ConstEvalCounter;                // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:19:27: 19:49
        _0 = InvariantRef::<'_, ()>::new(move _1) -> bb1; // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:19:27: 19:49
                                         // mir::Constant
                                         // + span: ui/inline-const/const-match-pat-lifetime-err.rs:19:27: 19:44
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&()) -> InvariantRef<'_, ()> {InvariantRef::<'_, ()>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:19:48: 19:49
        StorageDead(_1);                 // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:19:48: 19:49
        return;                          // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:19:5: 19:50
    }
}

promoted[0] in <impl at ui/inline-const/const-match-pat-lifetime-err.rs:18:1: 18:30>::NEW: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:19:45: 19:48
    let mut _1: ();                      // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:19:46: 19:48

    bb0: {
        _1 = ();                         // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:19:46: 19:48
        _0 = &_1;                        // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:19:45: 19:48
        return;                          // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:19:45: 19:48
    }
}

fn match_invariant_ref() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:22:30: 22:30
    let _1: ();                          // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:23:9: 23:10
    let mut _2: InvariantRef<'_, ()>;    // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:24:11: 24:32
    let mut _3: &();                     // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:24:29: 24:31
    let _4: &();                         // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:24:29: 24:31
    scope 1 {
        debug y => _1;                   // in scope 1 at ui/inline-const/const-match-pat-lifetime-err.rs:23:9: 23:10
    }

    bb0: {
        _4 = &_1;                        // scope 1 at ui/inline-const/const-match-pat-lifetime-err.rs:24:29: 24:31
        _3 = _4;                         // scope 1 at ui/inline-const/const-match-pat-lifetime-err.rs:24:29: 24:31
        _2 = InvariantRef::<'_, ()>::new(move _3) -> bb1; // scope 1 at ui/inline-const/const-match-pat-lifetime-err.rs:24:11: 24:32
                                         // mir::Constant
                                         // + span: ui/inline-const/const-match-pat-lifetime-err.rs:24:11: 24:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&()) -> InvariantRef<'_, ()> {InvariantRef::<'_, ()>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:30:2: 30:2
    }
}

match_invariant_ref::{constant#0}: InvariantRef<'_, ()> = {
    let mut _0: InvariantRef<'_, ()>;    // return place in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:28:15: 28:42

    bb0: {
        _0 = const _;                    // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:28:17: 28:40
                                         // mir::Constant
                                         // + span: ui/inline-const/const-match-pat-lifetime-err.rs:28:17: 28:40
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: InvariantRef<'_, ()>, val: Unevaluated(InvariantRef::<'a, ()>::NEW, [ReErased], None) }
        return;                          // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:28:15: 28:42
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:32:11: 32:11
    let _1: ();                          // in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:33:5: 33:26

    bb0: {
        _1 = match_invariant_ref() -> bb1; // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:33:5: 33:26
                                         // mir::Constant
                                         // + span: ui/inline-const/const-match-pat-lifetime-err.rs:33:5: 33:24
                                         // + literal: Const { ty: fn() {match_invariant_ref}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:34:2: 34:2
    }
}

fn InvariantRef(_1: &T, _2: PhantomData<&mut &T>) -> InvariantRef<'_, T> {
    let mut _0: InvariantRef<'_, T>;     // return place in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:1: 10:39

    bb0: {
        _0 = InvariantRef::<'_, T>(move _1, move _2); // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:1: 10:39
        return;                          // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:1: 10:39
    }
}

// MIR FOR CTFE
fn InvariantRef(_1: &T, _2: PhantomData<&mut &T>) -> InvariantRef<'_, T> {
    let mut _0: InvariantRef<'_, T>;     // return place in scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:1: 10:39

    bb0: {
        _0 = InvariantRef::<'_, T>(move _1, move _2); // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:1: 10:39
        return;                          // scope 0 at ui/inline-const/const-match-pat-lifetime-err.rs:10:1: 10:39
    }
}
