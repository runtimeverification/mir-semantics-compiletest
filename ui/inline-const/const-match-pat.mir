// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const MMIO_BIT1: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/inline-const/const-match-pat.rs:5:18: 5:20

    bb0: {
        _0 = const 4_u8;                 // scope 0 at ui/inline-const/const-match-pat.rs:5:23: 5:24
        return;                          // scope 0 at ui/inline-const/const-match-pat.rs:5:1: 5:25
    }
}

const MMIO_BIT2: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/inline-const/const-match-pat.rs:6:18: 6:20

    bb0: {
        _0 = const 5_u8;                 // scope 0 at ui/inline-const/const-match-pat.rs:6:23: 6:24
        return;                          // scope 0 at ui/inline-const/const-match-pat.rs:6:1: 6:25
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/inline-const/const-match-pat.rs:8:11: 8:11
    let _1: &str;                        // in scope 0 at ui/inline-const/const-match-pat.rs:9:9: 9:10
    let mut _2: i32;                     // in scope 0 at ui/inline-const/const-match-pat.rs:9:19: 9:30
    let _3: &str;                        // in scope 0 at ui/inline-const/const-match-pat.rs:11:37: 11:42
    let _4: &str;                        // in scope 0 at ui/inline-const/const-match-pat.rs:12:37: 12:42
    let mut _5: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
    let mut _6: (&&str, &&str);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _7: &&str;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _8: &&str;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/inline-const/const-match-pat.rs:9:9: 9:10
        let _9: &&str;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _10: &&str;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _23: &&str;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 2 {
            debug left_val => _9;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _10;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _15: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _15;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _2 = read_mmio() -> bb1;         // scope 0 at ui/inline-const/const-match-pat.rs:9:19: 9:30
                                         // mir::Constant
                                         // + span: ui/inline-const/const-match-pat.rs:9:19: 9:28
                                         // + literal: Const { ty: fn() -> i32 {read_mmio}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(_2) -> [0: bb3, 16: bb4, 32: bb5, otherwise: bb2]; // scope 0 at ui/inline-const/const-match-pat.rs:9:13: 9:30
    }

    bb2: {
        _5 = core::panicking::panic(const "internal error: entered unreachable code"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _1 = const "FOO";                // scope 0 at ui/inline-const/const-match-pat.rs:10:14: 10:19
                                         // mir::Constant
                                         // + span: ui/inline-const/const-match-pat.rs:10:14: 10:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb6;                     // scope 0 at ui/inline-const/const-match-pat.rs:10:14: 10:19
    }

    bb4: {
        _3 = const "BAR";                // scope 0 at ui/inline-const/const-match-pat.rs:11:37: 11:42
                                         // mir::Constant
                                         // + span: ui/inline-const/const-match-pat.rs:11:37: 11:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1 = _3;                         // scope 0 at ui/inline-const/const-match-pat.rs:11:37: 11:42
        goto -> bb6;                     // scope 0 at ui/inline-const/const-match-pat.rs:11:41: 11:42
    }

    bb5: {
        _4 = const "BAZ";                // scope 0 at ui/inline-const/const-match-pat.rs:12:37: 12:42
                                         // mir::Constant
                                         // + span: ui/inline-const/const-match-pat.rs:12:37: 12:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1 = _4;                         // scope 0 at ui/inline-const/const-match-pat.rs:12:37: 12:42
        goto -> bb6;                     // scope 0 at ui/inline-const/const-match-pat.rs:12:41: 12:42
    }

    bb6: {
        _23 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[0])) }
        _7 = _23;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _8 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _6 = (move _7, move _8);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_6.0: &&str);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_6.1: &&str);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = <&str as PartialEq>::eq(move _13, move _14) -> bb7; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = Not(move _12);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb9, otherwise: bb8]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<&str, &str>(move _17, move _18, move _20, move _22); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/inline-const/const-match-pat.rs:17:2: 17:2
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &str;                    // in scope 0 at ui/inline-const/const-match-pat.rs:16:16: 16:21

    bb0: {
        _1 = const "BAZ";                // scope 0 at ui/inline-const/const-match-pat.rs:16:16: 16:21
                                         // mir::Constant
                                         // + span: ui/inline-const/const-match-pat.rs:16:16: 16:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

main::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/inline-const/const-match-pat.rs:11:15: 11:33
    let mut _1: (i32, bool);             // in scope 0 at ui/inline-const/const-match-pat.rs:11:17: 11:31

    bb0: {
        _1 = CheckedShl(const 1_i32, const _); // scope 0 at ui/inline-const/const-match-pat.rs:11:17: 11:31
        assert(!move (_1.1: bool), "attempt to shift left by `{}`, which would overflow", const _) -> bb1; // scope 0 at ui/inline-const/const-match-pat.rs:11:17: 11:31
    }

    bb1: {
        _0 = move (_1.0: i32);           // scope 0 at ui/inline-const/const-match-pat.rs:11:17: 11:31
        return;                          // scope 0 at ui/inline-const/const-match-pat.rs:11:15: 11:33
    }
}

main::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/inline-const/const-match-pat.rs:12:15: 12:33
    let mut _1: (i32, bool);             // in scope 0 at ui/inline-const/const-match-pat.rs:12:17: 12:31

    bb0: {
        _1 = CheckedShl(const 1_i32, const _); // scope 0 at ui/inline-const/const-match-pat.rs:12:17: 12:31
        assert(!move (_1.1: bool), "attempt to shift left by `{}`, which would overflow", const _) -> bb1; // scope 0 at ui/inline-const/const-match-pat.rs:12:17: 12:31
    }

    bb1: {
        _0 = move (_1.0: i32);           // scope 0 at ui/inline-const/const-match-pat.rs:12:17: 12:31
        return;                          // scope 0 at ui/inline-const/const-match-pat.rs:12:15: 12:33
    }
}

fn read_mmio() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/inline-const/const-match-pat.rs:19:19: 19:22

    bb0: {
        _0 = const 32_i32;               // scope 0 at ui/inline-const/const-match-pat.rs:20:5: 20:11
        return;                          // scope 0 at ui/inline-const/const-match-pat.rs:21:2: 21:2
    }
}
