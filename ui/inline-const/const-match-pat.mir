// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const MMIO_BIT1: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 4_u8;
        return;
    }
}

const MMIO_BIT2: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 5_u8;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &str;
    let mut _2: i32;
    let _3: &str;
    let _4: &str;
    let mut _5: !;
    let mut _6: (&&str, &&str);
    let mut _7: &&str;
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug s => _1;
        let _8: &&str;
        let _9: &&str;
        let mut _15: &&str;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
    }

    bb0: {
        _2 = read_mmio() -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(_2) -> [0: bb3, 16: bb4, 32: bb5, otherwise: bb2];
    }

    bb2: {
        _5 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb3: {
        _1 = const "FOO";
        goto -> bb6;
    }

    bb4: {
        _3 = const "BAR";
        _1 = _3;
        goto -> bb6;
    }

    bb5: {
        _4 = const "BAZ";
        _1 = _4;
        goto -> bb6;
    }

    bb6: {
        _15 = const _;
        _7 = &_1;
        _6 = (_15, move _7);
        _8 = (_6.0: &&str);
        _9 = (_6.1: &&str);
        _11 = <&str as PartialEq>::eq(_8, _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<&str, &str>(move _12, _8, _9, move _14) -> unwind continue;
    }

    bb9: {
        return;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "BAZ";
        _0 = &_1;
        return;
    }
}

main::{constant#0}: i32 = {
    let mut _0: i32;
    let mut _1: bool;

    bb0: {
        _1 = Lt(const _, const 32_u8);
        assert(move _1, "attempt to shift left by `{}`, which would overflow", const _) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Shl(const 1_i32, const _);
        return;
    }
}

main::{constant#1}: i32 = {
    let mut _0: i32;
    let mut _1: bool;

    bb0: {
        _1 = Lt(const _, const 32_u8);
        assert(move _1, "attempt to shift left by `{}`, which would overflow", const _) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Shl(const 1_i32, const _);
        return;
    }
}

fn read_mmio() -> i32 {
    let mut _0: i32;

    bb0: {
        _0 = Shl(const 1_i32, const 5_i32);
        return;
    }
}
