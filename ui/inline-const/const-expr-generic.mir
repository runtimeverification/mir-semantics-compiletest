// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/inline-const/const-expr-generic.rs:4:16: 4:21

    bb0: {
        _0 = const _;                    // scope 0 at ui/inline-const/const-expr-generic.rs:5:5: 5:39
        return;                          // scope 0 at ui/inline-const/const-expr-generic.rs:6:2: 6:2
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/inline-const/const-expr-generic.rs:5:11: 5:39

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/inline-const/const-expr-generic.rs:5:13: 5:37
        _0 = std::mem::size_of::<T>() -> bb1; // scope 0 at ui/inline-const/const-expr-generic.rs:5:13: 5:37
                                         // mir::Constant
                                         // + span: ui/inline-const/const-expr-generic.rs:5:13: 5:35
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/inline-const/const-expr-generic.rs:5:11: 5:39
    }
}

fn bar() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/inline-const/const-expr-generic.rs:8:29: 8:34

    bb0: {
        _0 = const _;                    // scope 0 at ui/inline-const/const-expr-generic.rs:9:5: 9:20
        return;                          // scope 0 at ui/inline-const/const-expr-generic.rs:10:2: 10:2
    }
}

bar::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/inline-const/const-expr-generic.rs:9:11: 9:20
    let mut _1: (usize, bool);           // in scope 0 at ui/inline-const/const-expr-generic.rs:9:13: 9:18

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/inline-const/const-expr-generic.rs:9:13: 9:18
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/inline-const/const-expr-generic.rs:9:13: 9:18
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/inline-const/const-expr-generic.rs:9:13: 9:18
        return;                          // scope 0 at ui/inline-const/const-expr-generic.rs:9:11: 9:20
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/inline-const/const-expr-generic.rs:12:11: 12:11
    let _1: usize;                       // in scope 0 at ui/inline-const/const-expr-generic.rs:13:5: 13:17
    let _2: usize;                       // in scope 0 at ui/inline-const/const-expr-generic.rs:14:5: 14:15

    bb0: {
        _1 = foo::<i32>() -> bb1;        // scope 0 at ui/inline-const/const-expr-generic.rs:13:5: 13:17
                                         // mir::Constant
                                         // + span: ui/inline-const/const-expr-generic.rs:13:5: 13:15
                                         // + literal: Const { ty: fn() -> usize {foo::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = bar::<1>() -> bb2;          // scope 0 at ui/inline-const/const-expr-generic.rs:14:5: 14:15
                                         // mir::Constant
                                         // + span: ui/inline-const/const-expr-generic.rs:14:5: 14:13
                                         // + literal: Const { ty: fn() -> usize {bar::<1>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/inline-const/const-expr-generic.rs:15:2: 15:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/inline-const/const-expr-generic.rs:14:11: 14:12

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/inline-const/const-expr-generic.rs:14:11: 14:12
        return;                          // scope 0 at ui/inline-const/const-expr-generic.rs:14:11: 14:12
    }
}
