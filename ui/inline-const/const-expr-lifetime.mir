// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn issue_78174() -> () {
    let mut _0: ();
    let _1: &str;
    let mut _2: (&&str, &&str);
    let mut _3: &&str;
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug foo => const _;
        let _4: &&str;
        let _5: &&str;
        let mut _11: &&str;
        scope 2 {
            debug left_val => _4;
            debug right_val => _5;
            let _8: core::panicking::AssertKind;
            scope 3 {
                debug kind => _8;
            }
        }
    }

    bb0: {
        _1 = const _;
        _3 = &_1;
        _11 = const _;
        _2 = (move _3, _11);
        _4 = (_2.0: &&str);
        _5 = (_2.1: &&str);
        _7 = <&str as PartialEq>::eq(_4, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<&str, &str>(move _8, _4, _5, move _10) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in issue_78174: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "foo";
        _0 = &_1;
        return;
    }
}

issue_78174::{constant#0}: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "foo";
        return;
    }
}

fn <impl at ui/inline-const/const-expr-lifetime.rs:16:1: 16:40>::new(_1: &T) -> InvariantRef<'_, T> {
    debug r => _1;
    let mut _0: InvariantRef<'_, T>;

    bb0: {
        _0 = InvariantRef::<'_, T>(_1, const ZeroSized: PhantomData<&mut &T>);
        return;
    }
}

// MIR FOR CTFE
fn <impl at ui/inline-const/const-expr-lifetime.rs:16:1: 16:40>::new(_1: &T) -> InvariantRef<'_, T> {
    debug r => _1;
    let mut _0: InvariantRef<'_, T>;
    let mut _2: &T;
    let mut _3: std::marker::PhantomData<&mut &T>;

    bb0: {
        StorageLive(_2);
        _2 = &(*_1);
        StorageLive(_3);
        _3 = PhantomData::<&mut &T>;
        _0 = InvariantRef::<'_, T>(move _2, move _3);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

fn get_invariant_ref() -> InvariantRef<'_, ()> {
    let mut _0: InvariantRef<'_, ()>;

    bb0: {
        _0 = const _;
        return;
    }
}

get_invariant_ref::{constant#0}: InvariantRef<'_, ()> = {
    let mut _0: InvariantRef<'_, ()>;
    let mut _1: &();
    let _2: &();
    let _3: ();
    let mut _4: &();

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = InvariantRef::<'_, ()>::new(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

promoted[0] in get_invariant_ref::{constant#0}: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn get_invariant_ref2() -> InvariantRef<'_, ()> {
    let mut _0: InvariantRef<'_, ()>;

    bb0: {
        _0 = const _;
        return;
    }
}

get_invariant_ref2::{constant#0}: InvariantRef<'_, ()> = {
    let mut _0: InvariantRef<'_, ()>;
    let mut _1: &();
    let _2: &();
    let _3: ();
    let mut _4: &();

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = InvariantRef::<'_, ()>::new(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

promoted[0] in get_invariant_ref2::{constant#0}: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: InvariantRef<'_, ()>;
    let _3: InvariantRef<'_, ()>;

    bb0: {
        _1 = issue_78174() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = get_invariant_ref::<'_>() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = get_invariant_ref2::<'_>() -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn InvariantRef(_1: &T, _2: PhantomData<&mut &T>) -> InvariantRef<'_, T> {
    let mut _0: InvariantRef<'_, T>;

    bb0: {
        _0 = InvariantRef::<'_, T>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn InvariantRef(_1: &T, _2: PhantomData<&mut &T>) -> InvariantRef<'_, T> {
    let mut _0: InvariantRef<'_, T>;

    bb0: {
        _0 = InvariantRef::<'_, T>(move _1, move _2);
        return;
    }
}
