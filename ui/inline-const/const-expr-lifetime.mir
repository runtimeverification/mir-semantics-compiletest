// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn issue_78174() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/inline-const/const-expr-lifetime.rs:9:18: 9:18
    let _1: &str;                        // in scope 0 at ui/inline-const/const-expr-lifetime.rs:10:9: 10:12
    let mut _2: (&&str, &&str);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &&str;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _4: &&str;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: &&str;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/inline-const/const-expr-lifetime.rs:10:9: 10:12
        let _5: &&str;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _6: &&str;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _19: &&str;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _5;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _6;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _11: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _11;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = const _;                    // scope 0 at ui/inline-const/const-expr-lifetime.rs:10:15: 10:30
                                         // mir::Constant
                                         // + span: ui/inline-const/const-expr-lifetime.rs:10:15: 10:30
                                         // + literal: Const { ty: &str, val: Unevaluated(issue_78174::{constant#0}, [&str], None) }
        _3 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _19 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(issue_78174, [], Some(promoted[0])) }
        _4 = _19;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _4);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_2.0: &&str);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_2.1: &&str);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = _5;                         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = <&str as PartialEq>::eq(move _9, move _10) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = Not(move _8);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _11 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<&str, &str>(move _13, move _14, move _16, move _18); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/inline-const/const-expr-lifetime.rs:12:2: 12:2
    }
}

promoted[0] in issue_78174: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/inline-const/const-expr-lifetime.rs:11:21: 11:26

    bb0: {
        _1 = const "foo";                // scope 0 at ui/inline-const/const-expr-lifetime.rs:11:21: 11:26
                                         // mir::Constant
                                         // + span: ui/inline-const/const-expr-lifetime.rs:11:21: 11:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

issue_78174::{constant#0}: &str = {
    let mut _0: &str;                    // return place in scope 0 at ui/inline-const/const-expr-lifetime.rs:10:21: 10:30

    bb0: {
        _0 = const "foo";                // scope 0 at ui/inline-const/const-expr-lifetime.rs:10:23: 10:28
                                         // mir::Constant
                                         // + span: ui/inline-const/const-expr-lifetime.rs:10:23: 10:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at ui/inline-const/const-expr-lifetime.rs:10:21: 10:30
    }
}

fn <impl at ui/inline-const/const-expr-lifetime.rs:16:1: 16:40>::new(_1: &T) -> InvariantRef<'_, T> {
    debug r => _1;                       // in scope 0 at ui/inline-const/const-expr-lifetime.rs:17:22: 17:23
    let mut _0: InvariantRef<'_, T>;     // return place in scope 0 at ui/inline-const/const-expr-lifetime.rs:17:35: 17:39
    let mut _2: &T;                      // in scope 0 at ui/inline-const/const-expr-lifetime.rs:18:22: 18:23
    let mut _3: std::marker::PhantomData<&mut &T>; // in scope 0 at ui/inline-const/const-expr-lifetime.rs:18:25: 18:36

    bb0: {
        _2 = _1;                         // scope 0 at ui/inline-const/const-expr-lifetime.rs:18:22: 18:23
        _0 = InvariantRef::<'_, T>(move _2, move _3); // scope 0 at ui/inline-const/const-expr-lifetime.rs:18:9: 18:37
        return;                          // scope 0 at ui/inline-const/const-expr-lifetime.rs:19:6: 19:6
    }
}

// MIR FOR CTFE
fn <impl at ui/inline-const/const-expr-lifetime.rs:16:1: 16:40>::new(_1: &T) -> InvariantRef<'_, T> {
    debug r => _1;                       // in scope 0 at ui/inline-const/const-expr-lifetime.rs:17:22: 17:23
    let mut _0: InvariantRef<'_, T>;     // return place in scope 0 at ui/inline-const/const-expr-lifetime.rs:17:35: 17:39
    let mut _2: &T;                      // in scope 0 at ui/inline-const/const-expr-lifetime.rs:18:22: 18:23
    let mut _3: std::marker::PhantomData<&mut &T>; // in scope 0 at ui/inline-const/const-expr-lifetime.rs:18:25: 18:36

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/inline-const/const-expr-lifetime.rs:18:22: 18:23
        _2 = &(*_1);                     // scope 0 at ui/inline-const/const-expr-lifetime.rs:18:22: 18:23
        StorageLive(_3);                 // scope 0 at ui/inline-const/const-expr-lifetime.rs:18:25: 18:36
        _3 = PhantomData::<&mut &T>;     // scope 0 at ui/inline-const/const-expr-lifetime.rs:18:25: 18:36
        _0 = InvariantRef::<'_, T>(move _2, move _3); // scope 0 at ui/inline-const/const-expr-lifetime.rs:18:9: 18:37
        StorageDead(_3);                 // scope 0 at ui/inline-const/const-expr-lifetime.rs:18:36: 18:37
        StorageDead(_2);                 // scope 0 at ui/inline-const/const-expr-lifetime.rs:18:36: 18:37
        return;                          // scope 0 at ui/inline-const/const-expr-lifetime.rs:19:6: 19:6
    }
}

fn get_invariant_ref() -> InvariantRef<'_, ()> {
    let mut _0: InvariantRef<'_, ()>;    // return place in scope 0 at ui/inline-const/const-expr-lifetime.rs:22:31: 22:51

    bb0: {
        _0 = const _;                    // scope 0 at ui/inline-const/const-expr-lifetime.rs:23:5: 23:47
                                         // mir::Constant
                                         // + span: ui/inline-const/const-expr-lifetime.rs:23:5: 23:47
                                         // + literal: Const { ty: InvariantRef<'_, ()>, val: Unevaluated(get_invariant_ref::{constant#0}, [ReErased, InvariantRef<'_, ()>], None) }
        return;                          // scope 0 at ui/inline-const/const-expr-lifetime.rs:24:2: 24:2
    }
}

get_invariant_ref::{constant#0}: InvariantRef<'_, ()> = {
    let mut _0: InvariantRef<'_, ()>;    // return place in scope 0 at ui/inline-const/const-expr-lifetime.rs:23:11: 23:47
    let mut _1: &();                     // in scope 0 at ui/inline-const/const-expr-lifetime.rs:23:41: 23:44
    let _2: &();                         // in scope 0 at ui/inline-const/const-expr-lifetime.rs:23:41: 23:44
    let _3: ();                          // in scope 0 at ui/inline-const/const-expr-lifetime.rs:23:42: 23:44
    let mut _4: &();                     // in scope 0 at ui/inline-const/const-expr-lifetime.rs:23:41: 23:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/inline-const/const-expr-lifetime.rs:23:41: 23:44
        StorageLive(_2);                 // scope 0 at ui/inline-const/const-expr-lifetime.rs:23:41: 23:44
        _4 = const _;                    // scope 0 at ui/inline-const/const-expr-lifetime.rs:23:41: 23:44
                                         // mir::Constant
                                         // + span: ui/inline-const/const-expr-lifetime.rs:23:41: 23:44
                                         // + literal: Const { ty: &(), val: Unevaluated(get_invariant_ref::{constant#0}, [ReErased, <const_ty>], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at ui/inline-const/const-expr-lifetime.rs:23:41: 23:44
        _1 = &(*_2);                     // scope 0 at ui/inline-const/const-expr-lifetime.rs:23:41: 23:44
        ConstEvalCounter;                // scope 0 at ui/inline-const/const-expr-lifetime.rs:23:13: 23:45
        _0 = InvariantRef::<'_, ()>::new(move _1) -> bb1; // scope 0 at ui/inline-const/const-expr-lifetime.rs:23:13: 23:45
                                         // mir::Constant
                                         // + span: ui/inline-const/const-expr-lifetime.rs:23:13: 23:40
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&()) -> InvariantRef<'_, ()> {InvariantRef::<'_, ()>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/inline-const/const-expr-lifetime.rs:23:44: 23:45
        StorageDead(_2);                 // scope 0 at ui/inline-const/const-expr-lifetime.rs:23:46: 23:47
        return;                          // scope 0 at ui/inline-const/const-expr-lifetime.rs:23:11: 23:47
    }
}

promoted[0] in get_invariant_ref::{constant#0}: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/inline-const/const-expr-lifetime.rs:23:41: 23:44
    let mut _1: ();                      // in scope 0 at ui/inline-const/const-expr-lifetime.rs:23:42: 23:44

    bb0: {
        _1 = ();                         // scope 0 at ui/inline-const/const-expr-lifetime.rs:23:42: 23:44
        _0 = &_1;                        // scope 0 at ui/inline-const/const-expr-lifetime.rs:23:41: 23:44
        return;                          // scope 0 at ui/inline-const/const-expr-lifetime.rs:23:41: 23:44
    }
}

fn get_invariant_ref2() -> InvariantRef<'_, ()> {
    let mut _0: InvariantRef<'_, ()>;    // return place in scope 0 at ui/inline-const/const-expr-lifetime.rs:26:32: 26:52

    bb0: {
        _0 = const _;                    // scope 0 at ui/inline-const/const-expr-lifetime.rs:28:5: 28:37
                                         // mir::Constant
                                         // + span: ui/inline-const/const-expr-lifetime.rs:28:5: 28:37
                                         // + literal: Const { ty: InvariantRef<'_, ()>, val: Unevaluated(get_invariant_ref2::{constant#0}, [ReErased, InvariantRef<'_, ()>], None) }
        return;                          // scope 0 at ui/inline-const/const-expr-lifetime.rs:29:2: 29:2
    }
}

get_invariant_ref2::{constant#0}: InvariantRef<'_, ()> = {
    let mut _0: InvariantRef<'_, ()>;    // return place in scope 0 at ui/inline-const/const-expr-lifetime.rs:28:11: 28:37
    let mut _1: &();                     // in scope 0 at ui/inline-const/const-expr-lifetime.rs:28:31: 28:34
    let _2: &();                         // in scope 0 at ui/inline-const/const-expr-lifetime.rs:28:31: 28:34
    let _3: ();                          // in scope 0 at ui/inline-const/const-expr-lifetime.rs:28:32: 28:34
    let mut _4: &();                     // in scope 0 at ui/inline-const/const-expr-lifetime.rs:28:31: 28:34

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/inline-const/const-expr-lifetime.rs:28:31: 28:34
        StorageLive(_2);                 // scope 0 at ui/inline-const/const-expr-lifetime.rs:28:31: 28:34
        _4 = const _;                    // scope 0 at ui/inline-const/const-expr-lifetime.rs:28:31: 28:34
                                         // mir::Constant
                                         // + span: ui/inline-const/const-expr-lifetime.rs:28:31: 28:34
                                         // + literal: Const { ty: &(), val: Unevaluated(get_invariant_ref2::{constant#0}, [ReErased, <const_ty>], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at ui/inline-const/const-expr-lifetime.rs:28:31: 28:34
        _1 = &(*_2);                     // scope 0 at ui/inline-const/const-expr-lifetime.rs:28:31: 28:34
        ConstEvalCounter;                // scope 0 at ui/inline-const/const-expr-lifetime.rs:28:13: 28:35
        _0 = InvariantRef::<'_, ()>::new(move _1) -> bb1; // scope 0 at ui/inline-const/const-expr-lifetime.rs:28:13: 28:35
                                         // mir::Constant
                                         // + span: ui/inline-const/const-expr-lifetime.rs:28:13: 28:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&()) -> InvariantRef<'_, ()> {InvariantRef::<'_, ()>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/inline-const/const-expr-lifetime.rs:28:34: 28:35
        StorageDead(_2);                 // scope 0 at ui/inline-const/const-expr-lifetime.rs:28:36: 28:37
        return;                          // scope 0 at ui/inline-const/const-expr-lifetime.rs:28:11: 28:37
    }
}

promoted[0] in get_invariant_ref2::{constant#0}: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/inline-const/const-expr-lifetime.rs:28:31: 28:34
    let mut _1: ();                      // in scope 0 at ui/inline-const/const-expr-lifetime.rs:28:32: 28:34

    bb0: {
        _1 = ();                         // scope 0 at ui/inline-const/const-expr-lifetime.rs:28:32: 28:34
        _0 = &_1;                        // scope 0 at ui/inline-const/const-expr-lifetime.rs:28:31: 28:34
        return;                          // scope 0 at ui/inline-const/const-expr-lifetime.rs:28:31: 28:34
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/inline-const/const-expr-lifetime.rs:31:11: 31:11
    let _1: ();                          // in scope 0 at ui/inline-const/const-expr-lifetime.rs:32:5: 32:18
    let _2: InvariantRef<'_, ()>;        // in scope 0 at ui/inline-const/const-expr-lifetime.rs:33:5: 33:24
    let _3: InvariantRef<'_, ()>;        // in scope 0 at ui/inline-const/const-expr-lifetime.rs:34:5: 34:25

    bb0: {
        _1 = issue_78174() -> bb1;       // scope 0 at ui/inline-const/const-expr-lifetime.rs:32:5: 32:18
                                         // mir::Constant
                                         // + span: ui/inline-const/const-expr-lifetime.rs:32:5: 32:16
                                         // + literal: Const { ty: fn() {issue_78174}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = get_invariant_ref::<'_>() -> bb2; // scope 0 at ui/inline-const/const-expr-lifetime.rs:33:5: 33:24
                                         // mir::Constant
                                         // + span: ui/inline-const/const-expr-lifetime.rs:33:5: 33:22
                                         // + literal: Const { ty: fn() -> InvariantRef<'_, ()> {get_invariant_ref::<'_>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = get_invariant_ref2::<'_>() -> bb3; // scope 0 at ui/inline-const/const-expr-lifetime.rs:34:5: 34:25
                                         // mir::Constant
                                         // + span: ui/inline-const/const-expr-lifetime.rs:34:5: 34:23
                                         // + literal: Const { ty: fn() -> InvariantRef<'_, ()> {get_invariant_ref2::<'_>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/inline-const/const-expr-lifetime.rs:35:2: 35:2
    }
}

fn InvariantRef(_1: &T, _2: PhantomData<&mut &T>) -> InvariantRef<'_, T> {
    let mut _0: InvariantRef<'_, T>;     // return place in scope 0 at ui/inline-const/const-expr-lifetime.rs:14:1: 14:39

    bb0: {
        _0 = InvariantRef::<'_, T>(move _1, move _2); // scope 0 at ui/inline-const/const-expr-lifetime.rs:14:1: 14:39
        return;                          // scope 0 at ui/inline-const/const-expr-lifetime.rs:14:1: 14:39
    }
}

// MIR FOR CTFE
fn InvariantRef(_1: &T, _2: PhantomData<&mut &T>) -> InvariantRef<'_, T> {
    let mut _0: InvariantRef<'_, T>;     // return place in scope 0 at ui/inline-const/const-expr-lifetime.rs:14:1: 14:39

    bb0: {
        _0 = InvariantRef::<'_, T>(move _1, move _2); // scope 0 at ui/inline-const/const-expr-lifetime.rs:14:1: 14:39
        return;                          // scope 0 at ui/inline-const/const-expr-lifetime.rs:14:1: 14:39
    }
}
