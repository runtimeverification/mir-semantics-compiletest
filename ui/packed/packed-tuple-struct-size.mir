// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
P1S4::1::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

P2S4::1::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

Foo::Bar::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 1_isize;
        return;
    }
}

Foo::Baz::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 2_isize;
        return;
    }
}

fn align_to(_1: usize, _2: usize) -> usize {
    debug value => _1;
    debug align => _2;
    let mut _0: usize;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;

    bb0: {
        _4 = Sub(_2, const 1_usize);
        _3 = Add(_1, move _4);
        _6 = Sub(_2, const 1_usize);
        _5 = Not(move _6);
        _0 = BitAnd(move _3, move _5);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let _3: &usize;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&usize, &usize);
    let _12: &usize;
    let _13: &usize;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: usize;
    let mut _17: usize;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&usize, &usize);
    let _22: &usize;
    let _23: &usize;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: usize;
    let mut _27: usize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&usize, &usize);
    let _32: &usize;
    let _33: &usize;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: usize;
    let mut _37: usize;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&usize, &usize);
    let _42: &usize;
    let _43: &usize;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: usize;
    let mut _47: usize;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&usize, &usize);
    let _52: &usize;
    let _53: &usize;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: usize;
    let mut _57: usize;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&usize, &usize);
    let _62: &usize;
    let _63: &usize;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: usize;
    let mut _67: usize;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _71: (&usize, &usize);
    let _72: &usize;
    let _73: &usize;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: usize;
    let mut _77: usize;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _81: (&usize, &usize);
    let _82: &usize;
    let _83: &usize;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: usize;
    let mut _87: usize;
    let _89: !;
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _91: (&usize, &usize);
    let _92: &usize;
    let _93: &usize;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: usize;
    let mut _97: usize;
    let _99: !;
    let mut _100: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _101: (&usize, &usize);
    let _102: &usize;
    let _103: &usize;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: usize;
    let mut _107: usize;
    let _109: !;
    let mut _110: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _111: (&usize, &usize);
    let _112: &usize;
    let _113: &usize;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: usize;
    let mut _117: usize;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: (&usize, &usize);
    let _122: &usize;
    let _123: &usize;
    let mut _124: bool;
    let mut _125: bool;
    let mut _126: usize;
    let mut _127: usize;
    let _129: !;
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _131: (&usize, &usize);
    let _132: &usize;
    let _133: &usize;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: usize;
    let mut _137: usize;
    let _139: !;
    let mut _140: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _141: (&usize, &usize);
    let _142: &usize;
    let _143: &usize;
    let mut _144: bool;
    let mut _145: bool;
    let mut _146: usize;
    let mut _147: usize;
    let _149: !;
    let mut _150: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _151: (&usize, &usize);
    let _152: &usize;
    let _153: &usize;
    let mut _154: bool;
    let mut _155: bool;
    let mut _156: usize;
    let mut _157: usize;
    let _159: !;
    let mut _160: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _161: (&usize, &usize);
    let _162: &usize;
    let _163: &usize;
    let mut _164: bool;
    let mut _165: bool;
    let mut _166: usize;
    let mut _167: usize;
    let _169: !;
    let mut _170: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _171: (&usize, &usize);
    let _172: &usize;
    let _173: &usize;
    let mut _174: bool;
    let mut _175: bool;
    let mut _176: usize;
    let mut _177: usize;
    let _179: !;
    let mut _180: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _181: (&usize, &usize);
    let _182: &usize;
    let _183: &usize;
    let mut _184: bool;
    let mut _185: bool;
    let mut _186: usize;
    let mut _187: usize;
    let _189: !;
    let mut _190: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _191: (&usize, &usize);
    let _192: &usize;
    let _193: &usize;
    let mut _194: bool;
    let mut _195: bool;
    let mut _196: usize;
    let mut _197: usize;
    let _199: !;
    let mut _200: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _201: (&usize, &usize);
    let _202: &usize;
    let _203: &usize;
    let mut _204: bool;
    let mut _205: bool;
    let mut _206: usize;
    let mut _207: usize;
    let _209: !;
    let mut _210: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _211: (&usize, &usize);
    let mut _212: &usize;
    let _213: usize;
    let mut _214: usize;
    let mut _215: usize;
    let _216: &usize;
    let _217: &usize;
    let mut _218: bool;
    let mut _219: bool;
    let mut _220: usize;
    let mut _221: usize;
    let _223: !;
    let mut _224: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _225: (&usize, &usize);
    let _226: &usize;
    let _227: &usize;
    let mut _228: bool;
    let mut _229: bool;
    let mut _230: usize;
    let mut _231: usize;
    let _233: !;
    let mut _234: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _235: (&usize, &usize);
    let mut _236: &usize;
    let _237: usize;
    let mut _238: usize;
    let mut _239: usize;
    let _240: &usize;
    let _241: &usize;
    let mut _242: bool;
    let mut _243: bool;
    let mut _244: usize;
    let mut _245: usize;
    let _247: !;
    let mut _248: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _249: &usize;
    let mut _250: &usize;
    let mut _251: &usize;
    let mut _252: &usize;
    let mut _253: &usize;
    let mut _254: &usize;
    let mut _255: &usize;
    let mut _256: &usize;
    let mut _257: &usize;
    let mut _258: &usize;
    let mut _259: &usize;
    let mut _260: &usize;
    let mut _261: &usize;
    let mut _262: &usize;
    let mut _263: &usize;
    let mut _264: &usize;
    let mut _265: &usize;
    let mut _266: &usize;
    let mut _267: &usize;
    let mut _268: &usize;
    let mut _269: &usize;
    let mut _270: &usize;
    let mut _271: &usize;
    let mut _272: &usize;
    let mut _273: &usize;
    let mut _274: &usize;
    let mut _275: &usize;
    let mut _276: &usize;
    let mut _277: &usize;
    let mut _278: &usize;
    let mut _279: &usize;
    let mut _280: &usize;
    let mut _281: &usize;
    let mut _282: &usize;
    let mut _283: &usize;
    let mut _284: &usize;
    let mut _285: &usize;
    let mut _286: &usize;
    let mut _287: &usize;
    let mut _288: &usize;
    let mut _289: &usize;
    let mut _290: &usize;
    let mut _291: &usize;
    let mut _292: &usize;
    let mut _293: &usize;
    let mut _294: &usize;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 6 {
            debug kind => _28;
        }
    }
    scope 7 {
        debug left_val => _32;
        debug right_val => _33;
        let _38: core::panicking::AssertKind;
        scope 8 {
            debug kind => _38;
        }
    }
    scope 9 {
        debug left_val => _42;
        debug right_val => _43;
        let _48: core::panicking::AssertKind;
        scope 10 {
            debug kind => _48;
        }
    }
    scope 11 {
        debug left_val => _52;
        debug right_val => _53;
        let _58: core::panicking::AssertKind;
        scope 12 {
            debug kind => _58;
        }
    }
    scope 13 {
        debug left_val => _62;
        debug right_val => _63;
        let _68: core::panicking::AssertKind;
        scope 14 {
            debug kind => _68;
        }
    }
    scope 15 {
        debug left_val => _72;
        debug right_val => _73;
        let _78: core::panicking::AssertKind;
        scope 16 {
            debug kind => _78;
        }
    }
    scope 17 {
        debug left_val => _82;
        debug right_val => _83;
        let _88: core::panicking::AssertKind;
        scope 18 {
            debug kind => _88;
        }
    }
    scope 19 {
        debug left_val => _92;
        debug right_val => _93;
        let _98: core::panicking::AssertKind;
        scope 20 {
            debug kind => _98;
        }
    }
    scope 21 {
        debug left_val => _102;
        debug right_val => _103;
        let _108: core::panicking::AssertKind;
        scope 22 {
            debug kind => _108;
        }
    }
    scope 23 {
        debug left_val => _112;
        debug right_val => _113;
        let _118: core::panicking::AssertKind;
        scope 24 {
            debug kind => _118;
        }
    }
    scope 25 {
        debug left_val => _122;
        debug right_val => _123;
        let _128: core::panicking::AssertKind;
        scope 26 {
            debug kind => _128;
        }
    }
    scope 27 {
        debug left_val => _132;
        debug right_val => _133;
        let _138: core::panicking::AssertKind;
        scope 28 {
            debug kind => _138;
        }
    }
    scope 29 {
        debug left_val => _142;
        debug right_val => _143;
        let _148: core::panicking::AssertKind;
        scope 30 {
            debug kind => _148;
        }
    }
    scope 31 {
        debug left_val => _152;
        debug right_val => _153;
        let _158: core::panicking::AssertKind;
        scope 32 {
            debug kind => _158;
        }
    }
    scope 33 {
        debug left_val => _162;
        debug right_val => _163;
        let _168: core::panicking::AssertKind;
        scope 34 {
            debug kind => _168;
        }
    }
    scope 35 {
        debug left_val => _172;
        debug right_val => _173;
        let _178: core::panicking::AssertKind;
        scope 36 {
            debug kind => _178;
        }
    }
    scope 37 {
        debug left_val => _182;
        debug right_val => _183;
        let _188: core::panicking::AssertKind;
        scope 38 {
            debug kind => _188;
        }
    }
    scope 39 {
        debug left_val => _192;
        debug right_val => _193;
        let _198: core::panicking::AssertKind;
        scope 40 {
            debug kind => _198;
        }
    }
    scope 41 {
        debug left_val => _202;
        debug right_val => _203;
        let _208: core::panicking::AssertKind;
        scope 42 {
            debug kind => _208;
        }
    }
    scope 43 {
        debug left_val => _216;
        debug right_val => _217;
        let _222: core::panicking::AssertKind;
        scope 44 {
            debug kind => _222;
        }
    }
    scope 45 {
        debug left_val => _226;
        debug right_val => _227;
        let _232: core::panicking::AssertKind;
        scope 46 {
            debug kind => _232;
        }
    }
    scope 47 {
        debug left_val => _240;
        debug right_val => _241;
        let _246: core::panicking::AssertKind;
        scope 48 {
            debug kind => _246;
        }
    }

    bb0: {
        _294 = const _;
        _293 = const _;
        _1 = (_294, _293);
        _2 = (_1.0: &usize);
        _3 = (_1.1: &usize);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<usize, usize>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _292 = const _;
        _291 = const _;
        _11 = (_292, _291);
        _12 = (_11.0: &usize);
        _13 = (_11.1: &usize);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<usize, usize>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb4: {
        _290 = const _;
        _289 = const _;
        _21 = (_290, _289);
        _22 = (_21.0: &usize);
        _23 = (_21.1: &usize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<usize, usize>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb6: {
        _288 = const _;
        _287 = const _;
        _31 = (_288, _287);
        _32 = (_31.0: &usize);
        _33 = (_31.1: &usize);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<usize, usize>(move _38, _32, _33, move _40) -> unwind continue;
    }

    bb8: {
        _286 = const _;
        _285 = const _;
        _41 = (_286, _285);
        _42 = (_41.0: &usize);
        _43 = (_41.1: &usize);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<usize, usize>(move _48, _42, _43, move _50) -> unwind continue;
    }

    bb10: {
        _284 = const _;
        _283 = const _;
        _51 = (_284, _283);
        _52 = (_51.0: &usize);
        _53 = (_51.1: &usize);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<usize, usize>(move _58, _52, _53, move _60) -> unwind continue;
    }

    bb12: {
        _282 = const _;
        _281 = const _;
        _61 = (_282, _281);
        _62 = (_61.0: &usize);
        _63 = (_61.1: &usize);
        _66 = (*_62);
        _67 = (*_63);
        _65 = Eq(move _66, move _67);
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<usize, usize>(move _68, _62, _63, move _70) -> unwind continue;
    }

    bb14: {
        _280 = const _;
        _279 = const _;
        _71 = (_280, _279);
        _72 = (_71.0: &usize);
        _73 = (_71.1: &usize);
        _76 = (*_72);
        _77 = (*_73);
        _75 = Eq(move _76, move _77);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<usize, usize>(move _78, _72, _73, move _80) -> unwind continue;
    }

    bb16: {
        _278 = const _;
        _277 = const _;
        _81 = (_278, _277);
        _82 = (_81.0: &usize);
        _83 = (_81.1: &usize);
        _86 = (*_82);
        _87 = (*_83);
        _85 = Eq(move _86, move _87);
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _88 = core::panicking::AssertKind::Eq;
        _90 = Option::<Arguments<'_>>::None;
        _89 = core::panicking::assert_failed::<usize, usize>(move _88, _82, _83, move _90) -> unwind continue;
    }

    bb18: {
        _276 = const _;
        _275 = const _;
        _91 = (_276, _275);
        _92 = (_91.0: &usize);
        _93 = (_91.1: &usize);
        _96 = (*_92);
        _97 = (*_93);
        _95 = Eq(move _96, move _97);
        _94 = Not(move _95);
        switchInt(move _94) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _98 = core::panicking::AssertKind::Eq;
        _100 = Option::<Arguments<'_>>::None;
        _99 = core::panicking::assert_failed::<usize, usize>(move _98, _92, _93, move _100) -> unwind continue;
    }

    bb20: {
        _274 = const _;
        _273 = const _;
        _101 = (_274, _273);
        _102 = (_101.0: &usize);
        _103 = (_101.1: &usize);
        _106 = (*_102);
        _107 = (*_103);
        _105 = Eq(move _106, move _107);
        _104 = Not(move _105);
        switchInt(move _104) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _108 = core::panicking::AssertKind::Eq;
        _110 = Option::<Arguments<'_>>::None;
        _109 = core::panicking::assert_failed::<usize, usize>(move _108, _102, _103, move _110) -> unwind continue;
    }

    bb22: {
        _272 = const _;
        _271 = const _;
        _111 = (_272, _271);
        _112 = (_111.0: &usize);
        _113 = (_111.1: &usize);
        _116 = (*_112);
        _117 = (*_113);
        _115 = Eq(move _116, move _117);
        _114 = Not(move _115);
        switchInt(move _114) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<usize, usize>(move _118, _112, _113, move _120) -> unwind continue;
    }

    bb24: {
        _270 = const _;
        _269 = const _;
        _121 = (_270, _269);
        _122 = (_121.0: &usize);
        _123 = (_121.1: &usize);
        _126 = (*_122);
        _127 = (*_123);
        _125 = Eq(move _126, move _127);
        _124 = Not(move _125);
        switchInt(move _124) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _128 = core::panicking::AssertKind::Eq;
        _130 = Option::<Arguments<'_>>::None;
        _129 = core::panicking::assert_failed::<usize, usize>(move _128, _122, _123, move _130) -> unwind continue;
    }

    bb26: {
        _268 = const _;
        _267 = const _;
        _131 = (_268, _267);
        _132 = (_131.0: &usize);
        _133 = (_131.1: &usize);
        _136 = (*_132);
        _137 = (*_133);
        _135 = Eq(move _136, move _137);
        _134 = Not(move _135);
        switchInt(move _134) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _138 = core::panicking::AssertKind::Eq;
        _140 = Option::<Arguments<'_>>::None;
        _139 = core::panicking::assert_failed::<usize, usize>(move _138, _132, _133, move _140) -> unwind continue;
    }

    bb28: {
        _266 = const _;
        _265 = const _;
        _141 = (_266, _265);
        _142 = (_141.0: &usize);
        _143 = (_141.1: &usize);
        _146 = (*_142);
        _147 = (*_143);
        _145 = Eq(move _146, move _147);
        _144 = Not(move _145);
        switchInt(move _144) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _148 = core::panicking::AssertKind::Eq;
        _150 = Option::<Arguments<'_>>::None;
        _149 = core::panicking::assert_failed::<usize, usize>(move _148, _142, _143, move _150) -> unwind continue;
    }

    bb30: {
        _264 = const _;
        _263 = const _;
        _151 = (_264, _263);
        _152 = (_151.0: &usize);
        _153 = (_151.1: &usize);
        _156 = (*_152);
        _157 = (*_153);
        _155 = Eq(move _156, move _157);
        _154 = Not(move _155);
        switchInt(move _154) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _158 = core::panicking::AssertKind::Eq;
        _160 = Option::<Arguments<'_>>::None;
        _159 = core::panicking::assert_failed::<usize, usize>(move _158, _152, _153, move _160) -> unwind continue;
    }

    bb32: {
        _262 = const _;
        _261 = const _;
        _161 = (_262, _261);
        _162 = (_161.0: &usize);
        _163 = (_161.1: &usize);
        _166 = (*_162);
        _167 = (*_163);
        _165 = Eq(move _166, move _167);
        _164 = Not(move _165);
        switchInt(move _164) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _168 = core::panicking::AssertKind::Eq;
        _170 = Option::<Arguments<'_>>::None;
        _169 = core::panicking::assert_failed::<usize, usize>(move _168, _162, _163, move _170) -> unwind continue;
    }

    bb34: {
        _260 = const _;
        _259 = const _;
        _171 = (_260, _259);
        _172 = (_171.0: &usize);
        _173 = (_171.1: &usize);
        _176 = (*_172);
        _177 = (*_173);
        _175 = Eq(move _176, move _177);
        _174 = Not(move _175);
        switchInt(move _174) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _178 = core::panicking::AssertKind::Eq;
        _180 = Option::<Arguments<'_>>::None;
        _179 = core::panicking::assert_failed::<usize, usize>(move _178, _172, _173, move _180) -> unwind continue;
    }

    bb36: {
        _258 = const _;
        _257 = const _;
        _181 = (_258, _257);
        _182 = (_181.0: &usize);
        _183 = (_181.1: &usize);
        _186 = (*_182);
        _187 = (*_183);
        _185 = Eq(move _186, move _187);
        _184 = Not(move _185);
        switchInt(move _184) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _188 = core::panicking::AssertKind::Eq;
        _190 = Option::<Arguments<'_>>::None;
        _189 = core::panicking::assert_failed::<usize, usize>(move _188, _182, _183, move _190) -> unwind continue;
    }

    bb38: {
        _256 = const _;
        _255 = const _;
        _191 = (_256, _255);
        _192 = (_191.0: &usize);
        _193 = (_191.1: &usize);
        _196 = (*_192);
        _197 = (*_193);
        _195 = Eq(move _196, move _197);
        _194 = Not(move _195);
        switchInt(move _194) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _198 = core::panicking::AssertKind::Eq;
        _200 = Option::<Arguments<'_>>::None;
        _199 = core::panicking::assert_failed::<usize, usize>(move _198, _192, _193, move _200) -> unwind continue;
    }

    bb40: {
        _254 = const _;
        _253 = const _;
        _201 = (_254, _253);
        _202 = (_201.0: &usize);
        _203 = (_201.1: &usize);
        _206 = (*_202);
        _207 = (*_203);
        _205 = Eq(move _206, move _207);
        _204 = Not(move _205);
        switchInt(move _204) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _208 = core::panicking::AssertKind::Eq;
        _210 = Option::<Arguments<'_>>::None;
        _209 = core::panicking::assert_failed::<usize, usize>(move _208, _202, _203, move _210) -> unwind continue;
    }

    bb42: {
        _252 = const _;
        _215 = std::mem::size_of::<P2_Foo>() -> [return: bb43, unwind continue];
    }

    bb43: {
        _214 = Add(const 3_usize, move _215);
        _213 = align_to(move _214, const 2_usize) -> [return: bb44, unwind continue];
    }

    bb44: {
        _212 = &_213;
        _211 = (_252, move _212);
        _216 = (_211.0: &usize);
        _217 = (_211.1: &usize);
        _220 = (*_216);
        _221 = (*_217);
        _219 = Eq(move _220, move _221);
        _218 = Not(move _219);
        switchInt(move _218) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        _222 = core::panicking::AssertKind::Eq;
        _224 = Option::<Arguments<'_>>::None;
        _223 = core::panicking::assert_failed::<usize, usize>(move _222, _216, _217, move _224) -> unwind continue;
    }

    bb46: {
        _251 = const _;
        _250 = const _;
        _225 = (_251, _250);
        _226 = (_225.0: &usize);
        _227 = (_225.1: &usize);
        _230 = (*_226);
        _231 = (*_227);
        _229 = Eq(move _230, move _231);
        _228 = Not(move _229);
        switchInt(move _228) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _232 = core::panicking::AssertKind::Eq;
        _234 = Option::<Arguments<'_>>::None;
        _233 = core::panicking::assert_failed::<usize, usize>(move _232, _226, _227, move _234) -> unwind continue;
    }

    bb48: {
        _249 = const _;
        _239 = std::mem::size_of::<P2_Option>() -> [return: bb49, unwind continue];
    }

    bb49: {
        _238 = Add(const 7_usize, move _239);
        _237 = align_to(move _238, const 2_usize) -> [return: bb50, unwind continue];
    }

    bb50: {
        _236 = &_237;
        _235 = (_249, move _236);
        _240 = (_235.0: &usize);
        _241 = (_235.1: &usize);
        _244 = (*_240);
        _245 = (*_241);
        _243 = Eq(move _244, move _245);
        _242 = Not(move _243);
        switchInt(move _242) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _246 = core::panicking::AssertKind::Eq;
        _248 = Option::<Arguments<'_>>::None;
        _247 = core::panicking::assert_failed::<usize, usize>(move _246, _240, _241, move _248) -> unwind continue;
    }

    bb52: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P2S7_Option>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P2S7_Option>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P2S3_Foo>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P2S3_Foo>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 20_usize;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P4CS20>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P4CS20>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 16_usize;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P4S16>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P4S16>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 14_usize;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P2S14>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P2S14>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 6_usize;
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P2S6>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P2S6>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P2S4>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P2S4>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[26] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;
    let mut _2: usize;

    bb0: {
        _2 = std::mem::size_of::<Option<Box<f64>>>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Add(const 7_usize, move _2);
        _0 = &_1;
        return;
    }
}

promoted[27] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P1S7_Option>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[28] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[29] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P1S7_Option>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[30] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;
    let mut _2: usize;

    bb0: {
        _2 = std::mem::size_of::<Foo>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Add(const 3_usize, move _2);
        _0 = &_1;
        return;
    }
}

promoted[31] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P1S3_Foo>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[32] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[33] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P1S3_Foo>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[34] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 13_usize;
        _0 = &_1;
        return;
    }
}

promoted[35] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P1S13>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[36] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[37] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P1S13>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[38] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 5_usize;
        _0 = &_1;
        return;
    }
}

promoted[39] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P1S5>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[40] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[41] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P1S5>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[42] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[43] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P1S4>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[44] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[45] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P1S4>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

fn P1S4(_1: u8, _2: [u8; 3]) -> P1S4 {
    let mut _0: P1S4;

    bb0: {
        _0 = P1S4(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn P1S4(_1: u8, _2: [u8; 3]) -> P1S4 {
    let mut _0: P1S4;

    bb0: {
        _0 = P1S4(move _1, move _2);
        return;
    }
}

fn P2S4(_1: u8, _2: [u8; 3]) -> P2S4 {
    let mut _0: P2S4;

    bb0: {
        _0 = P2S4(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn P2S4(_1: u8, _2: [u8; 3]) -> P2S4 {
    let mut _0: P2S4;

    bb0: {
        _0 = P2S4(move _1, move _2);
        return;
    }
}

fn P1S5(_1: u8, _2: u32) -> P1S5 {
    let mut _0: P1S5;

    bb0: {
        _0 = P1S5(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn P1S5(_1: u8, _2: u32) -> P1S5 {
    let mut _0: P1S5;

    bb0: {
        _0 = P1S5(move _1, move _2);
        return;
    }
}

fn P2S6(_1: u8, _2: u32) -> P2S6 {
    let mut _0: P2S6;

    bb0: {
        _0 = P2S6(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn P2S6(_1: u8, _2: u32) -> P2S6 {
    let mut _0: P2S6;

    bb0: {
        _0 = P2S6(move _1, move _2);
        return;
    }
}

fn P1S13(_1: i64, _2: f32, _3: u8) -> P1S13 {
    let mut _0: P1S13;

    bb0: {
        _0 = P1S13(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn P1S13(_1: i64, _2: f32, _3: u8) -> P1S13 {
    let mut _0: P1S13;

    bb0: {
        _0 = P1S13(move _1, move _2, move _3);
        return;
    }
}

fn P2S14(_1: i64, _2: f32, _3: u8) -> P2S14 {
    let mut _0: P2S14;

    bb0: {
        _0 = P2S14(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn P2S14(_1: i64, _2: f32, _3: u8) -> P2S14 {
    let mut _0: P2S14;

    bb0: {
        _0 = P2S14(move _1, move _2, move _3);
        return;
    }
}

fn P4S16(_1: u8, _2: f32, _3: i64, _4: u16) -> P4S16 {
    let mut _0: P4S16;

    bb0: {
        _0 = P4S16(move _1, move _2, move _3, move _4);
        return;
    }
}

// MIR FOR CTFE
fn P4S16(_1: u8, _2: f32, _3: i64, _4: u16) -> P4S16 {
    let mut _0: P4S16;

    bb0: {
        _0 = P4S16(move _1, move _2, move _3, move _4);
        return;
    }
}

fn P4CS20(_1: u8, _2: f32, _3: i64, _4: u16) -> P4CS20 {
    let mut _0: P4CS20;

    bb0: {
        _0 = P4CS20(move _1, move _2, move _3, move _4);
        return;
    }
}

// MIR FOR CTFE
fn P4CS20(_1: u8, _2: f32, _3: i64, _4: u16) -> P4CS20 {
    let mut _0: P4CS20;

    bb0: {
        _0 = P4CS20(move _1, move _2, move _3, move _4);
        return;
    }
}

fn P1S3_Foo(_1: u8, _2: u16, _3: Foo) -> P1S3_Foo {
    let mut _0: P1S3_Foo;

    bb0: {
        _0 = P1S3_Foo(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn P1S3_Foo(_1: u8, _2: u16, _3: Foo) -> P1S3_Foo {
    let mut _0: P1S3_Foo;

    bb0: {
        _0 = P1S3_Foo(move _1, move _2, move _3);
        return;
    }
}

fn P2_Foo(_1: Foo) -> P2_Foo {
    let mut _0: P2_Foo;

    bb0: {
        _0 = P2_Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn P2_Foo(_1: Foo) -> P2_Foo {
    let mut _0: P2_Foo;

    bb0: {
        _0 = P2_Foo(move _1);
        return;
    }
}

fn P2S3_Foo(_1: u8, _2: u16, _3: Foo) -> P2S3_Foo {
    let mut _0: P2S3_Foo;

    bb0: {
        _0 = P2S3_Foo(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn P2S3_Foo(_1: u8, _2: u16, _3: Foo) -> P2S3_Foo {
    let mut _0: P2S3_Foo;

    bb0: {
        _0 = P2S3_Foo(move _1, move _2, move _3);
        return;
    }
}

fn P1S7_Option(_1: f32, _2: u8, _3: u16, _4: Option<Box<f64>>) -> P1S7_Option {
    let mut _0: P1S7_Option;

    bb0: {
        _0 = P1S7_Option(move _1, move _2, move _3, move _4);
        return;
    }
}

// MIR FOR CTFE
fn P1S7_Option(_1: f32, _2: u8, _3: u16, _4: Option<Box<f64>>) -> P1S7_Option {
    let mut _0: P1S7_Option;

    bb0: {
        _0 = P1S7_Option(move _1, move _2, move _3, move _4);
        return;
    }
}

fn P2_Option(_1: Option<Box<f64>>) -> P2_Option {
    let mut _0: P2_Option;

    bb0: {
        _0 = P2_Option(move _1);
        return;
    }
}

// MIR FOR CTFE
fn P2_Option(_1: Option<Box<f64>>) -> P2_Option {
    let mut _0: P2_Option;

    bb0: {
        _0 = P2_Option(move _1);
        return;
    }
}

fn P2S7_Option(_1: f32, _2: u8, _3: u16, _4: Option<Box<f64>>) -> P2S7_Option {
    let mut _0: P2S7_Option;

    bb0: {
        _0 = P2S7_Option(move _1, move _2, move _3, move _4);
        return;
    }
}

// MIR FOR CTFE
fn P2S7_Option(_1: f32, _2: u8, _3: u16, _4: Option<Box<f64>>) -> P2S7_Option {
    let mut _0: P2S7_Option;

    bb0: {
        _0 = P2S7_Option(move _1, move _2, move _3, move _4);
        return;
    }
}
