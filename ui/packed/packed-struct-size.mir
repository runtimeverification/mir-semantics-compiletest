// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
P1S4::b::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

P2S4::b::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

Foo::Bar::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 1_isize;
        return;
    }
}

Foo::Baz::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 2_isize;
        return;
    }
}

static TEST_P1S4: P1S4 = {
    let mut _0: P1S4;
    let mut _1: [u8; 3];

    bb0: {
        StorageLive(_1);
        _1 = [const 2_u8, const 3_u8, const 4_u8];
        _0 = P1S4 { a: const 1_u8, b: move _1 };
        StorageDead(_1);
        return;
    }
}

static TEST_P1S5: P1S5 = {
    let mut _0: P1S5;

    bb0: {
        _0 = P1S5 { a: const 3_u8, b: const 67_u32 };
        return;
    }
}

static TEST_P1S3_Foo: P1S3_Foo = {
    let mut _0: P1S3_Foo;
    let mut _1: Foo;

    bb0: {
        StorageLive(_1);
        _1 = Foo::Baz;
        _0 = P1S3_Foo { a: const 1_u8, b: const 2_u16, c: move _1 };
        StorageDead(_1);
        return;
    }
}

static TEST_P2S2: P2S2 = {
    let mut _0: P2S2;

    bb0: {
        _0 = P2S2 { a: const 1_u8, b: const 2_u8 };
        return;
    }
}

static TEST_P2S4: P2S4 = {
    let mut _0: P2S4;
    let mut _1: [u8; 3];

    bb0: {
        StorageLive(_1);
        _1 = [const 2_u8, const 3_u8, const 4_u8];
        _0 = P2S4 { a: const 1_u8, b: move _1 };
        StorageDead(_1);
        return;
    }
}

static TEST_P2S6: P2S6 = {
    let mut _0: P2S6;

    bb0: {
        _0 = P2S6 { a: const 1_u8, b: const 2_u32 };
        return;
    }
}

static TEST_P2S12: P2S12 = {
    let mut _0: P2S12;

    bb0: {
        _0 = P2S12 { a: const 1_u32, b: const 2_u64 };
        return;
    }
}

static TEST_P4S16: P4S16 = {
    let mut _0: P4S16;

    bb0: {
        _0 = P4S16 { a: const 1_u8, b: const 2f32, c: const 3_i64, d: const 4_u16 };
        return;
    }
}

static TEST_P4CS20: P4CS20 = {
    let mut _0: P4CS20;

    bb0: {
        _0 = P4CS20 { a: const 1_u8, b: const 2f32, c: const 3_i64, d: const 4_u16 };
        return;
    }
}

fn align_to(_1: usize, _2: usize) -> usize {
    debug value => _1;
    debug align => _2;
    let mut _0: usize;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;

    bb0: {
        _4 = Sub(_2, const 1_usize);
        _3 = Add(_1, move _4);
        _6 = Sub(_2, const 1_usize);
        _5 = Not(move _6);
        _0 = BitAnd(move _3, move _5);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let _3: &usize;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&usize, &usize);
    let _12: &usize;
    let _13: &usize;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: usize;
    let mut _17: usize;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&usize, &usize);
    let _22: &usize;
    let _23: &usize;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: usize;
    let mut _27: usize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&usize, &usize);
    let _32: &usize;
    let _33: &usize;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: usize;
    let mut _37: usize;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&usize, &usize);
    let _42: &usize;
    let _43: &usize;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: usize;
    let mut _47: usize;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&usize, &usize);
    let _52: &usize;
    let _53: &usize;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: usize;
    let mut _57: usize;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&usize, &usize);
    let _62: &usize;
    let _63: &usize;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: usize;
    let mut _67: usize;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _71: (&usize, &usize);
    let _72: &usize;
    let _73: &usize;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: usize;
    let mut _77: usize;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _81: (&usize, &usize);
    let _82: &usize;
    let _83: &usize;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: usize;
    let mut _87: usize;
    let _89: !;
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _91: (&usize, &usize);
    let _92: &usize;
    let _93: &usize;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: usize;
    let mut _97: usize;
    let _99: !;
    let mut _100: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _101: (&usize, &usize);
    let _102: &usize;
    let _103: &usize;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: usize;
    let mut _107: usize;
    let _109: !;
    let mut _110: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _111: (&usize, &usize);
    let _112: &usize;
    let _113: &usize;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: usize;
    let mut _117: usize;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: (&usize, &usize);
    let _122: &usize;
    let _123: &usize;
    let mut _124: bool;
    let mut _125: bool;
    let mut _126: usize;
    let mut _127: usize;
    let _129: !;
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _131: (&usize, &usize);
    let _132: &usize;
    let _133: &usize;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: usize;
    let mut _137: usize;
    let _139: !;
    let mut _140: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _141: (&usize, &usize);
    let _142: &usize;
    let _143: &usize;
    let mut _144: bool;
    let mut _145: bool;
    let mut _146: usize;
    let mut _147: usize;
    let _149: !;
    let mut _150: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _151: (&usize, &usize);
    let _152: &usize;
    let _153: &usize;
    let mut _154: bool;
    let mut _155: bool;
    let mut _156: usize;
    let mut _157: usize;
    let _159: !;
    let mut _160: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _161: (&usize, &usize);
    let _162: &usize;
    let _163: &usize;
    let mut _164: bool;
    let mut _165: bool;
    let mut _166: usize;
    let mut _167: usize;
    let _169: !;
    let mut _170: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _171: (&usize, &usize);
    let _172: &usize;
    let _173: &usize;
    let mut _174: bool;
    let mut _175: bool;
    let mut _176: usize;
    let mut _177: usize;
    let _179: !;
    let mut _180: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _181: (&usize, &usize);
    let _182: &usize;
    let _183: &usize;
    let mut _184: bool;
    let mut _185: bool;
    let mut _186: usize;
    let mut _187: usize;
    let _189: !;
    let mut _190: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _191: (&usize, &usize);
    let _192: &usize;
    let _193: &usize;
    let mut _194: bool;
    let mut _195: bool;
    let mut _196: usize;
    let mut _197: usize;
    let _199: !;
    let mut _200: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _201: (&usize, &usize);
    let _202: &usize;
    let _203: &usize;
    let mut _204: bool;
    let mut _205: bool;
    let mut _206: usize;
    let mut _207: usize;
    let _209: !;
    let mut _210: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _211: (&usize, &usize);
    let _212: &usize;
    let _213: &usize;
    let mut _214: bool;
    let mut _215: bool;
    let mut _216: usize;
    let mut _217: usize;
    let _219: !;
    let mut _220: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _221: (&usize, &usize);
    let _222: &usize;
    let _223: &usize;
    let mut _224: bool;
    let mut _225: bool;
    let mut _226: usize;
    let mut _227: usize;
    let _229: !;
    let mut _230: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _231: (&usize, &usize);
    let _232: &usize;
    let _233: &usize;
    let mut _234: bool;
    let mut _235: bool;
    let mut _236: usize;
    let mut _237: usize;
    let _239: !;
    let mut _240: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _241: (&usize, &usize);
    let _242: &usize;
    let _243: &usize;
    let mut _244: bool;
    let mut _245: bool;
    let mut _246: usize;
    let mut _247: usize;
    let _249: !;
    let mut _250: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _251: (&usize, &usize);
    let mut _252: &usize;
    let _253: usize;
    let mut _254: usize;
    let mut _255: usize;
    let _256: &usize;
    let _257: &usize;
    let mut _258: bool;
    let mut _259: bool;
    let mut _260: usize;
    let mut _261: usize;
    let _263: !;
    let mut _264: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _265: (&usize, &usize);
    let _266: &usize;
    let _267: &usize;
    let mut _268: bool;
    let mut _269: bool;
    let mut _270: usize;
    let mut _271: usize;
    let _273: !;
    let mut _274: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _275: (&usize, &usize);
    let mut _276: &usize;
    let _277: usize;
    let mut _278: usize;
    let mut _279: usize;
    let _280: &usize;
    let _281: &usize;
    let mut _282: bool;
    let mut _283: bool;
    let mut _284: usize;
    let mut _285: usize;
    let _287: !;
    let mut _288: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _289: &usize;
    let mut _290: &usize;
    let mut _291: &usize;
    let mut _292: &usize;
    let mut _293: &usize;
    let mut _294: &usize;
    let mut _295: &usize;
    let mut _296: &usize;
    let mut _297: &usize;
    let mut _298: &usize;
    let mut _299: &usize;
    let mut _300: &usize;
    let mut _301: &usize;
    let mut _302: &usize;
    let mut _303: &usize;
    let mut _304: &usize;
    let mut _305: &usize;
    let mut _306: &usize;
    let mut _307: &usize;
    let mut _308: &usize;
    let mut _309: &usize;
    let mut _310: &usize;
    let mut _311: &usize;
    let mut _312: &usize;
    let mut _313: &usize;
    let mut _314: &usize;
    let mut _315: &usize;
    let mut _316: &usize;
    let mut _317: &usize;
    let mut _318: &usize;
    let mut _319: &usize;
    let mut _320: &usize;
    let mut _321: &usize;
    let mut _322: &usize;
    let mut _323: &usize;
    let mut _324: &usize;
    let mut _325: &usize;
    let mut _326: &usize;
    let mut _327: &usize;
    let mut _328: &usize;
    let mut _329: &usize;
    let mut _330: &usize;
    let mut _331: &usize;
    let mut _332: &usize;
    let mut _333: &usize;
    let mut _334: &usize;
    let mut _335: &usize;
    let mut _336: &usize;
    let mut _337: &usize;
    let mut _338: &usize;
    let mut _339: &usize;
    let mut _340: &usize;
    let mut _341: &usize;
    let mut _342: &usize;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 6 {
            debug kind => _28;
        }
    }
    scope 7 {
        debug left_val => _32;
        debug right_val => _33;
        let _38: core::panicking::AssertKind;
        scope 8 {
            debug kind => _38;
        }
    }
    scope 9 {
        debug left_val => _42;
        debug right_val => _43;
        let _48: core::panicking::AssertKind;
        scope 10 {
            debug kind => _48;
        }
    }
    scope 11 {
        debug left_val => _52;
        debug right_val => _53;
        let _58: core::panicking::AssertKind;
        scope 12 {
            debug kind => _58;
        }
    }
    scope 13 {
        debug left_val => _62;
        debug right_val => _63;
        let _68: core::panicking::AssertKind;
        scope 14 {
            debug kind => _68;
        }
    }
    scope 15 {
        debug left_val => _72;
        debug right_val => _73;
        let _78: core::panicking::AssertKind;
        scope 16 {
            debug kind => _78;
        }
    }
    scope 17 {
        debug left_val => _82;
        debug right_val => _83;
        let _88: core::panicking::AssertKind;
        scope 18 {
            debug kind => _88;
        }
    }
    scope 19 {
        debug left_val => _92;
        debug right_val => _93;
        let _98: core::panicking::AssertKind;
        scope 20 {
            debug kind => _98;
        }
    }
    scope 21 {
        debug left_val => _102;
        debug right_val => _103;
        let _108: core::panicking::AssertKind;
        scope 22 {
            debug kind => _108;
        }
    }
    scope 23 {
        debug left_val => _112;
        debug right_val => _113;
        let _118: core::panicking::AssertKind;
        scope 24 {
            debug kind => _118;
        }
    }
    scope 25 {
        debug left_val => _122;
        debug right_val => _123;
        let _128: core::panicking::AssertKind;
        scope 26 {
            debug kind => _128;
        }
    }
    scope 27 {
        debug left_val => _132;
        debug right_val => _133;
        let _138: core::panicking::AssertKind;
        scope 28 {
            debug kind => _138;
        }
    }
    scope 29 {
        debug left_val => _142;
        debug right_val => _143;
        let _148: core::panicking::AssertKind;
        scope 30 {
            debug kind => _148;
        }
    }
    scope 31 {
        debug left_val => _152;
        debug right_val => _153;
        let _158: core::panicking::AssertKind;
        scope 32 {
            debug kind => _158;
        }
    }
    scope 33 {
        debug left_val => _162;
        debug right_val => _163;
        let _168: core::panicking::AssertKind;
        scope 34 {
            debug kind => _168;
        }
    }
    scope 35 {
        debug left_val => _172;
        debug right_val => _173;
        let _178: core::panicking::AssertKind;
        scope 36 {
            debug kind => _178;
        }
    }
    scope 37 {
        debug left_val => _182;
        debug right_val => _183;
        let _188: core::panicking::AssertKind;
        scope 38 {
            debug kind => _188;
        }
    }
    scope 39 {
        debug left_val => _192;
        debug right_val => _193;
        let _198: core::panicking::AssertKind;
        scope 40 {
            debug kind => _198;
        }
    }
    scope 41 {
        debug left_val => _202;
        debug right_val => _203;
        let _208: core::panicking::AssertKind;
        scope 42 {
            debug kind => _208;
        }
    }
    scope 43 {
        debug left_val => _212;
        debug right_val => _213;
        let _218: core::panicking::AssertKind;
        scope 44 {
            debug kind => _218;
        }
    }
    scope 45 {
        debug left_val => _222;
        debug right_val => _223;
        let _228: core::panicking::AssertKind;
        scope 46 {
            debug kind => _228;
        }
    }
    scope 47 {
        debug left_val => _232;
        debug right_val => _233;
        let _238: core::panicking::AssertKind;
        scope 48 {
            debug kind => _238;
        }
    }
    scope 49 {
        debug left_val => _242;
        debug right_val => _243;
        let _248: core::panicking::AssertKind;
        scope 50 {
            debug kind => _248;
        }
    }
    scope 51 {
        debug left_val => _256;
        debug right_val => _257;
        let _262: core::panicking::AssertKind;
        scope 52 {
            debug kind => _262;
        }
    }
    scope 53 {
        debug left_val => _266;
        debug right_val => _267;
        let _272: core::panicking::AssertKind;
        scope 54 {
            debug kind => _272;
        }
    }
    scope 55 {
        debug left_val => _280;
        debug right_val => _281;
        let _286: core::panicking::AssertKind;
        scope 56 {
            debug kind => _286;
        }
    }

    bb0: {
        _342 = const _;
        _341 = const _;
        _1 = (_342, _341);
        _2 = (_1.0: &usize);
        _3 = (_1.1: &usize);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<usize, usize>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _340 = const _;
        _339 = const _;
        _11 = (_340, _339);
        _12 = (_11.0: &usize);
        _13 = (_11.1: &usize);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<usize, usize>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb4: {
        _338 = const _;
        _337 = const _;
        _21 = (_338, _337);
        _22 = (_21.0: &usize);
        _23 = (_21.1: &usize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<usize, usize>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb6: {
        _336 = const _;
        _335 = const _;
        _31 = (_336, _335);
        _32 = (_31.0: &usize);
        _33 = (_31.1: &usize);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<usize, usize>(move _38, _32, _33, move _40) -> unwind continue;
    }

    bb8: {
        _334 = const _;
        _333 = const _;
        _41 = (_334, _333);
        _42 = (_41.0: &usize);
        _43 = (_41.1: &usize);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<usize, usize>(move _48, _42, _43, move _50) -> unwind continue;
    }

    bb10: {
        _332 = const _;
        _331 = const _;
        _51 = (_332, _331);
        _52 = (_51.0: &usize);
        _53 = (_51.1: &usize);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<usize, usize>(move _58, _52, _53, move _60) -> unwind continue;
    }

    bb12: {
        _330 = const _;
        _329 = const _;
        _61 = (_330, _329);
        _62 = (_61.0: &usize);
        _63 = (_61.1: &usize);
        _66 = (*_62);
        _67 = (*_63);
        _65 = Eq(move _66, move _67);
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<usize, usize>(move _68, _62, _63, move _70) -> unwind continue;
    }

    bb14: {
        _328 = const _;
        _327 = const _;
        _71 = (_328, _327);
        _72 = (_71.0: &usize);
        _73 = (_71.1: &usize);
        _76 = (*_72);
        _77 = (*_73);
        _75 = Eq(move _76, move _77);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<usize, usize>(move _78, _72, _73, move _80) -> unwind continue;
    }

    bb16: {
        _326 = const _;
        _325 = const _;
        _81 = (_326, _325);
        _82 = (_81.0: &usize);
        _83 = (_81.1: &usize);
        _86 = (*_82);
        _87 = (*_83);
        _85 = Eq(move _86, move _87);
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _88 = core::panicking::AssertKind::Eq;
        _90 = Option::<Arguments<'_>>::None;
        _89 = core::panicking::assert_failed::<usize, usize>(move _88, _82, _83, move _90) -> unwind continue;
    }

    bb18: {
        _324 = const _;
        _323 = const _;
        _91 = (_324, _323);
        _92 = (_91.0: &usize);
        _93 = (_91.1: &usize);
        _96 = (*_92);
        _97 = (*_93);
        _95 = Eq(move _96, move _97);
        _94 = Not(move _95);
        switchInt(move _94) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _98 = core::panicking::AssertKind::Eq;
        _100 = Option::<Arguments<'_>>::None;
        _99 = core::panicking::assert_failed::<usize, usize>(move _98, _92, _93, move _100) -> unwind continue;
    }

    bb20: {
        _322 = const _;
        _321 = const _;
        _101 = (_322, _321);
        _102 = (_101.0: &usize);
        _103 = (_101.1: &usize);
        _106 = (*_102);
        _107 = (*_103);
        _105 = Eq(move _106, move _107);
        _104 = Not(move _105);
        switchInt(move _104) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _108 = core::panicking::AssertKind::Eq;
        _110 = Option::<Arguments<'_>>::None;
        _109 = core::panicking::assert_failed::<usize, usize>(move _108, _102, _103, move _110) -> unwind continue;
    }

    bb22: {
        _320 = const _;
        _319 = const _;
        _111 = (_320, _319);
        _112 = (_111.0: &usize);
        _113 = (_111.1: &usize);
        _116 = (*_112);
        _117 = (*_113);
        _115 = Eq(move _116, move _117);
        _114 = Not(move _115);
        switchInt(move _114) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<usize, usize>(move _118, _112, _113, move _120) -> unwind continue;
    }

    bb24: {
        _318 = const _;
        _317 = const _;
        _121 = (_318, _317);
        _122 = (_121.0: &usize);
        _123 = (_121.1: &usize);
        _126 = (*_122);
        _127 = (*_123);
        _125 = Eq(move _126, move _127);
        _124 = Not(move _125);
        switchInt(move _124) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _128 = core::panicking::AssertKind::Eq;
        _130 = Option::<Arguments<'_>>::None;
        _129 = core::panicking::assert_failed::<usize, usize>(move _128, _122, _123, move _130) -> unwind continue;
    }

    bb26: {
        _316 = const _;
        _315 = const _;
        _131 = (_316, _315);
        _132 = (_131.0: &usize);
        _133 = (_131.1: &usize);
        _136 = (*_132);
        _137 = (*_133);
        _135 = Eq(move _136, move _137);
        _134 = Not(move _135);
        switchInt(move _134) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _138 = core::panicking::AssertKind::Eq;
        _140 = Option::<Arguments<'_>>::None;
        _139 = core::panicking::assert_failed::<usize, usize>(move _138, _132, _133, move _140) -> unwind continue;
    }

    bb28: {
        _314 = const _;
        _313 = const _;
        _141 = (_314, _313);
        _142 = (_141.0: &usize);
        _143 = (_141.1: &usize);
        _146 = (*_142);
        _147 = (*_143);
        _145 = Eq(move _146, move _147);
        _144 = Not(move _145);
        switchInt(move _144) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _148 = core::panicking::AssertKind::Eq;
        _150 = Option::<Arguments<'_>>::None;
        _149 = core::panicking::assert_failed::<usize, usize>(move _148, _142, _143, move _150) -> unwind continue;
    }

    bb30: {
        _312 = const _;
        _311 = const _;
        _151 = (_312, _311);
        _152 = (_151.0: &usize);
        _153 = (_151.1: &usize);
        _156 = (*_152);
        _157 = (*_153);
        _155 = Eq(move _156, move _157);
        _154 = Not(move _155);
        switchInt(move _154) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _158 = core::panicking::AssertKind::Eq;
        _160 = Option::<Arguments<'_>>::None;
        _159 = core::panicking::assert_failed::<usize, usize>(move _158, _152, _153, move _160) -> unwind continue;
    }

    bb32: {
        _310 = const _;
        _309 = const _;
        _161 = (_310, _309);
        _162 = (_161.0: &usize);
        _163 = (_161.1: &usize);
        _166 = (*_162);
        _167 = (*_163);
        _165 = Eq(move _166, move _167);
        _164 = Not(move _165);
        switchInt(move _164) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _168 = core::panicking::AssertKind::Eq;
        _170 = Option::<Arguments<'_>>::None;
        _169 = core::panicking::assert_failed::<usize, usize>(move _168, _162, _163, move _170) -> unwind continue;
    }

    bb34: {
        _308 = const _;
        _307 = const _;
        _171 = (_308, _307);
        _172 = (_171.0: &usize);
        _173 = (_171.1: &usize);
        _176 = (*_172);
        _177 = (*_173);
        _175 = Eq(move _176, move _177);
        _174 = Not(move _175);
        switchInt(move _174) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _178 = core::panicking::AssertKind::Eq;
        _180 = Option::<Arguments<'_>>::None;
        _179 = core::panicking::assert_failed::<usize, usize>(move _178, _172, _173, move _180) -> unwind continue;
    }

    bb36: {
        _306 = const _;
        _305 = const _;
        _181 = (_306, _305);
        _182 = (_181.0: &usize);
        _183 = (_181.1: &usize);
        _186 = (*_182);
        _187 = (*_183);
        _185 = Eq(move _186, move _187);
        _184 = Not(move _185);
        switchInt(move _184) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _188 = core::panicking::AssertKind::Eq;
        _190 = Option::<Arguments<'_>>::None;
        _189 = core::panicking::assert_failed::<usize, usize>(move _188, _182, _183, move _190) -> unwind continue;
    }

    bb38: {
        _304 = const _;
        _303 = const _;
        _191 = (_304, _303);
        _192 = (_191.0: &usize);
        _193 = (_191.1: &usize);
        _196 = (*_192);
        _197 = (*_193);
        _195 = Eq(move _196, move _197);
        _194 = Not(move _195);
        switchInt(move _194) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _198 = core::panicking::AssertKind::Eq;
        _200 = Option::<Arguments<'_>>::None;
        _199 = core::panicking::assert_failed::<usize, usize>(move _198, _192, _193, move _200) -> unwind continue;
    }

    bb40: {
        _302 = const _;
        _301 = const _;
        _201 = (_302, _301);
        _202 = (_201.0: &usize);
        _203 = (_201.1: &usize);
        _206 = (*_202);
        _207 = (*_203);
        _205 = Eq(move _206, move _207);
        _204 = Not(move _205);
        switchInt(move _204) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _208 = core::panicking::AssertKind::Eq;
        _210 = Option::<Arguments<'_>>::None;
        _209 = core::panicking::assert_failed::<usize, usize>(move _208, _202, _203, move _210) -> unwind continue;
    }

    bb42: {
        _300 = const _;
        _299 = const _;
        _211 = (_300, _299);
        _212 = (_211.0: &usize);
        _213 = (_211.1: &usize);
        _216 = (*_212);
        _217 = (*_213);
        _215 = Eq(move _216, move _217);
        _214 = Not(move _215);
        switchInt(move _214) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _218 = core::panicking::AssertKind::Eq;
        _220 = Option::<Arguments<'_>>::None;
        _219 = core::panicking::assert_failed::<usize, usize>(move _218, _212, _213, move _220) -> unwind continue;
    }

    bb44: {
        _298 = const _;
        _297 = const _;
        _221 = (_298, _297);
        _222 = (_221.0: &usize);
        _223 = (_221.1: &usize);
        _226 = (*_222);
        _227 = (*_223);
        _225 = Eq(move _226, move _227);
        _224 = Not(move _225);
        switchInt(move _224) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        _228 = core::panicking::AssertKind::Eq;
        _230 = Option::<Arguments<'_>>::None;
        _229 = core::panicking::assert_failed::<usize, usize>(move _228, _222, _223, move _230) -> unwind continue;
    }

    bb46: {
        _296 = const _;
        _295 = const _;
        _231 = (_296, _295);
        _232 = (_231.0: &usize);
        _233 = (_231.1: &usize);
        _236 = (*_232);
        _237 = (*_233);
        _235 = Eq(move _236, move _237);
        _234 = Not(move _235);
        switchInt(move _234) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _238 = core::panicking::AssertKind::Eq;
        _240 = Option::<Arguments<'_>>::None;
        _239 = core::panicking::assert_failed::<usize, usize>(move _238, _232, _233, move _240) -> unwind continue;
    }

    bb48: {
        _294 = const _;
        _293 = const _;
        _241 = (_294, _293);
        _242 = (_241.0: &usize);
        _243 = (_241.1: &usize);
        _246 = (*_242);
        _247 = (*_243);
        _245 = Eq(move _246, move _247);
        _244 = Not(move _245);
        switchInt(move _244) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        _248 = core::panicking::AssertKind::Eq;
        _250 = Option::<Arguments<'_>>::None;
        _249 = core::panicking::assert_failed::<usize, usize>(move _248, _242, _243, move _250) -> unwind continue;
    }

    bb50: {
        _292 = const _;
        _255 = std::mem::size_of::<P2_Foo>() -> [return: bb51, unwind continue];
    }

    bb51: {
        _254 = Add(const 3_usize, move _255);
        _253 = align_to(move _254, const 2_usize) -> [return: bb52, unwind continue];
    }

    bb52: {
        _252 = &_253;
        _251 = (_292, move _252);
        _256 = (_251.0: &usize);
        _257 = (_251.1: &usize);
        _260 = (*_256);
        _261 = (*_257);
        _259 = Eq(move _260, move _261);
        _258 = Not(move _259);
        switchInt(move _258) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _262 = core::panicking::AssertKind::Eq;
        _264 = Option::<Arguments<'_>>::None;
        _263 = core::panicking::assert_failed::<usize, usize>(move _262, _256, _257, move _264) -> unwind continue;
    }

    bb54: {
        _291 = const _;
        _290 = const _;
        _265 = (_291, _290);
        _266 = (_265.0: &usize);
        _267 = (_265.1: &usize);
        _270 = (*_266);
        _271 = (*_267);
        _269 = Eq(move _270, move _271);
        _268 = Not(move _269);
        switchInt(move _268) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _272 = core::panicking::AssertKind::Eq;
        _274 = Option::<Arguments<'_>>::None;
        _273 = core::panicking::assert_failed::<usize, usize>(move _272, _266, _267, move _274) -> unwind continue;
    }

    bb56: {
        _289 = const _;
        _279 = std::mem::size_of::<P2_Option>() -> [return: bb57, unwind continue];
    }

    bb57: {
        _278 = Add(const 7_usize, move _279);
        _277 = align_to(move _278, const 2_usize) -> [return: bb58, unwind continue];
    }

    bb58: {
        _276 = &_277;
        _275 = (_289, move _276);
        _280 = (_275.0: &usize);
        _281 = (_275.1: &usize);
        _284 = (*_280);
        _285 = (*_281);
        _283 = Eq(move _284, move _285);
        _282 = Not(move _283);
        switchInt(move _282) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _286 = core::panicking::AssertKind::Eq;
        _288 = Option::<Arguments<'_>>::None;
        _287 = core::panicking::assert_failed::<usize, usize>(move _286, _280, _281, move _288) -> unwind continue;
    }

    bb60: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P2S7_Option>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P2S7_Option>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P2S3_Foo>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P2S3_Foo>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 20_usize;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P4CS20>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P4CS20>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 16_usize;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P4S16>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P4S16>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 14_usize;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P2S14>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P2S14>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 12_usize;
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P2S12>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P2S12>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 6_usize;
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P2S6>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P2S6>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[26] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[27] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P2S4>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[28] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[29] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P2S4>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[30] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[31] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P2S2>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[32] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[33] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P2S2>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[34] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;
    let mut _2: usize;

    bb0: {
        _2 = std::mem::size_of::<Option<Box<f64>>>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Add(const 7_usize, move _2);
        _0 = &_1;
        return;
    }
}

promoted[35] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P1S7_Option>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[36] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[37] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P1S7_Option>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[38] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;
    let mut _2: usize;

    bb0: {
        _2 = std::mem::size_of::<Foo>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Add(const 3_usize, move _2);
        _0 = &_1;
        return;
    }
}

promoted[39] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P1S3_Foo>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[40] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[41] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P1S3_Foo>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[42] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 13_usize;
        _0 = &_1;
        return;
    }
}

promoted[43] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P1S13>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[44] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[45] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P1S13>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[46] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 5_usize;
        _0 = &_1;
        return;
    }
}

promoted[47] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P1S5>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[48] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[49] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P1S5>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[50] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[51] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<P1S4>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[52] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[53] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<P1S4>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}
