// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/packed/packed-struct-optimized-enum.rs:6:1: 6:34>::clone(_1: &Packed<T>) -> Packed<T> {
    debug self => _1;                    // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:7:14: 7:19
    let mut _0: Packed<T>;               // return place in scope 0 at ui/packed/packed-struct-optimized-enum.rs:7:24: 7:28

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/packed/packed-struct-optimized-enum.rs:7:31: 7:36
        return;                          // scope 0 at ui/packed/packed-struct-optimized-enum.rs:7:38: 7:38
    }
}

fn sanity_check_size(_1: T) -> () {
    debug one => _1;                     // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:10:31: 10:34
    let mut _0: ();                      // return place in scope 0 at ui/packed/packed-struct-optimized-enum.rs:10:39: 10:39
    let _2: [T; 2];                      // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:11:9: 11:12
    let mut _3: T;                       // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:11:16: 11:19
    let mut _4: T;                       // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:11:21: 11:24
    let mut _6: usize;                   // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:12:18: 12:48
    let mut _7: *const T;                // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:12:19: 12:38
    let mut _8: *const T;                // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:12:19: 12:38
    let _9: &T;                          // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:12:19: 12:26
    let _10: usize;                      // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:12:24: 12:25
    let mut _11: usize;                  // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:12:51: 12:81
    let mut _12: *const T;               // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:12:52: 12:71
    let mut _13: *const T;               // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:12:52: 12:71
    let _14: &T;                         // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:12:52: 12:59
    let _15: usize;                      // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:12:57: 12:58
    let mut _16: (usize, bool);          // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:12:18: 12:81
    let mut _19: (usize, usize);         // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:13:25: 13:78
    let mut _20: usize;                  // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:13:26: 13:50
    let mut _21: usize;                  // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:13:52: 13:77
    let mut _22: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _23: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _24: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _29: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _30: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _32: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _33: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _34: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _35: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _36: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _37: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _39: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _40: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _41: usize;                      // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:15:16: 15:28
    let mut _42: usize;                  // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:15:16: 15:20
    let mut _43: usize;                  // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:15:23: 15:28
    let mut _44: bool;                   // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:15:16: 15:28
    let mut _45: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _48: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _49: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _50: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _51: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _53: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _54: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _55: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _56: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _57: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _58: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _59: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug two => _2;                 // in scope 1 at ui/packed/packed-struct-optimized-enum.rs:11:9: 11:12
        let _5: usize;                   // in scope 1 at ui/packed/packed-struct-optimized-enum.rs:12:9: 12:15
        scope 2 {
            debug stride => _5;          // in scope 2 at ui/packed/packed-struct-optimized-enum.rs:12:9: 12:15
            let _17: usize;              // in scope 2 at ui/packed/packed-struct-optimized-enum.rs:13:10: 13:14
            let _18: usize;              // in scope 2 at ui/packed/packed-struct-optimized-enum.rs:13:16: 13:21
            scope 3 {
                debug size => _17;       // in scope 3 at ui/packed/packed-struct-optimized-enum.rs:13:10: 13:14
                debug align => _18;      // in scope 3 at ui/packed/packed-struct-optimized-enum.rs:13:16: 13:21
                let _25: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _26: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _46: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _47: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _60: &usize;     // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 4 {
                    debug left_val => _25; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _26; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _31: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _31; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 6 {
                    debug left_val => _46; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _47; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _52: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 7 {
                        debug kind => _52; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _3 = _1;                         // scope 0 at ui/packed/packed-struct-optimized-enum.rs:11:16: 11:19
        _4 = _1;                         // scope 0 at ui/packed/packed-struct-optimized-enum.rs:11:21: 11:24
        _2 = [move _3, move _4];         // scope 0 at ui/packed/packed-struct-optimized-enum.rs:11:15: 11:25
        _10 = const 1_usize;             // scope 1 at ui/packed/packed-struct-optimized-enum.rs:12:24: 12:25
        _9 = &_2[_10];                   // scope 1 at ui/packed/packed-struct-optimized-enum.rs:12:19: 12:26
        _8 = &raw const (*_9);           // scope 1 at ui/packed/packed-struct-optimized-enum.rs:12:19: 12:26
        _7 = _8;                         // scope 1 at ui/packed/packed-struct-optimized-enum.rs:12:19: 12:38
        _6 = move _7 as usize (PointerExposeAddress); // scope 1 at ui/packed/packed-struct-optimized-enum.rs:12:18: 12:48
        _15 = const 0_usize;             // scope 1 at ui/packed/packed-struct-optimized-enum.rs:12:57: 12:58
        _14 = &_2[_15];                  // scope 1 at ui/packed/packed-struct-optimized-enum.rs:12:52: 12:59
        _13 = &raw const (*_14);         // scope 1 at ui/packed/packed-struct-optimized-enum.rs:12:52: 12:59
        _12 = _13;                       // scope 1 at ui/packed/packed-struct-optimized-enum.rs:12:52: 12:71
        _11 = move _12 as usize (PointerExposeAddress); // scope 1 at ui/packed/packed-struct-optimized-enum.rs:12:51: 12:81
        _16 = CheckedSub(_6, _11);       // scope 1 at ui/packed/packed-struct-optimized-enum.rs:12:18: 12:81
        assert(!move (_16.1: bool), "attempt to compute `{} - {}`, which would overflow", move _6, move _11) -> bb1; // scope 1 at ui/packed/packed-struct-optimized-enum.rs:12:18: 12:81
    }

    bb1: {
        _5 = move (_16.0: usize);        // scope 1 at ui/packed/packed-struct-optimized-enum.rs:12:18: 12:81
        _20 = std::mem::size_of::<T>() -> bb2; // scope 2 at ui/packed/packed-struct-optimized-enum.rs:13:26: 13:50
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-optimized-enum.rs:13:26: 13:48
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<T>}, val: Value(<ZST>) }
    }

    bb2: {
        _21 = align_of::<T>() -> bb3;    // scope 2 at ui/packed/packed-struct-optimized-enum.rs:13:52: 13:77
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-optimized-enum.rs:13:52: 13:75
                                         // + literal: Const { ty: fn() -> usize {align_of::<T>}, val: Value(<ZST>) }
    }

    bb3: {
        _19 = (move _20, move _21);      // scope 2 at ui/packed/packed-struct-optimized-enum.rs:13:25: 13:78
        _17 = (_19.0: usize);            // scope 2 at ui/packed/packed-struct-optimized-enum.rs:13:10: 13:14
        _18 = (_19.1: usize);            // scope 2 at ui/packed/packed-struct-optimized-enum.rs:13:16: 13:21
        _23 = &_5;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = &_17;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _22 = (move _23, move _24);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _25 = (_22.0: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _26 = (_22.1: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _29 = (*_25);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _30 = (*_26);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _28 = Eq(move _29, move _30);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _27 = Not(move _28);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _27) -> [0: bb5, otherwise: bb4]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _31 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = _25;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _35;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _26;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = _37;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _32 = core::panicking::assert_failed::<usize, usize>(move _33, move _34, move _36, move _38); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb5: {
        _42 = _17;                       // scope 3 at ui/packed/packed-struct-optimized-enum.rs:15:16: 15:20
        _43 = _18;                       // scope 3 at ui/packed/packed-struct-optimized-enum.rs:15:23: 15:28
        _44 = Eq(_43, const 0_usize);    // scope 3 at ui/packed/packed-struct-optimized-enum.rs:15:16: 15:28
        assert(!move _44, "attempt to calculate the remainder of `{}` with a divisor of zero", _42) -> bb6; // scope 3 at ui/packed/packed-struct-optimized-enum.rs:15:16: 15:28
    }

    bb6: {
        _41 = Rem(move _42, move _43);   // scope 3 at ui/packed/packed-struct-optimized-enum.rs:15:16: 15:28
        _40 = &_41;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _60 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(sanity_check_size, [T], Some(promoted[0])) }
        _45 = _60;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _39 = (move _40, move _45);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _46 = (_39.0: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _47 = (_39.1: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _50 = (*_46);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _51 = (*_47);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _49 = Eq(move _50, move _51);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _48 = Not(move _49);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _48) -> [0: bb8, otherwise: bb7]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _52 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _54 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _56 = _46;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _55 = _56;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _58 = _47;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _57 = _58;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _59 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _53 = core::panicking::assert_failed::<usize, usize>(move _54, move _55, move _57, move _59); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/packed/packed-struct-optimized-enum.rs:16:2: 16:2
    }
}

promoted[0] in sanity_check_size: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:15:30: 15:31

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/packed/packed-struct-optimized-enum.rs:15:30: 15:31
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/packed/packed-struct-optimized-enum.rs:18:11: 18:11
    let _1: ();                          // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:23:5: 23:54
    let mut _2: (std::option::Option<Packed<(&(), i32)>>, bool); // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:23:23: 23:53
    let mut _3: std::option::Option<Packed<(&(), i32)>>; // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:23:24: 23:46
    let mut _4: Packed<(&(), i32)>;      // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:23:29: 23:45
    let mut _5: (&(), i32);              // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:23:36: 23:44
    let mut _6: &();                     // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:23:37: 23:40
    let _7: ();                          // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:29:5: 29:77
    let mut _8: std::option::Option<(Packed<&()>, bool)>; // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:29:51: 29:76
    let mut _9: (Packed<&()>, bool);     // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:29:56: 29:75
    let mut _10: Packed<&()>;            // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:29:57: 29:68
    let mut _11: &();                    // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:29:64: 29:67
    let _12: &();                        // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:29:64: 29:67
    let mut _13: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _14: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _15: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _16: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _17: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _19: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _21: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _22: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _23: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _25: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _26: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _27: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _28: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _29: &();                    // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:29:64: 29:67
    let mut _30: &();                    // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:23:37: 23:40
    scope 1 {
        debug left_val => _16;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _17;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _18: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _18;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _22;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _23;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _24: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _24;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _30 = const _;                   // scope 0 at ui/packed/packed-struct-optimized-enum.rs:23:37: 23:40
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-optimized-enum.rs:23:37: 23:40
                                         // + literal: Const { ty: &(), val: Unevaluated(main, [], Some(promoted[5])) }
        _6 = _30;                        // scope 0 at ui/packed/packed-struct-optimized-enum.rs:23:37: 23:40
        _5 = (move _6, const 0_i32);     // scope 0 at ui/packed/packed-struct-optimized-enum.rs:23:36: 23:44
        _4 = Packed::<(&(), i32)>(move _5); // scope 0 at ui/packed/packed-struct-optimized-enum.rs:23:29: 23:45
        _3 = Option::<Packed<(&(), i32)>>::Some(move _4); // scope 0 at ui/packed/packed-struct-optimized-enum.rs:23:24: 23:46
        _2 = (move _3, const true);      // scope 0 at ui/packed/packed-struct-optimized-enum.rs:23:23: 23:53
        _1 = sanity_check_size::<(Option<Packed<(&(), i32)>>, bool)>(move _2) -> bb1; // scope 0 at ui/packed/packed-struct-optimized-enum.rs:23:5: 23:54
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-optimized-enum.rs:23:5: 23:22
                                         // + literal: Const { ty: fn((Option<Packed<(&(), i32)>>, bool)) {sanity_check_size::<(Option<Packed<(&(), i32)>>, bool)>}, val: Value(<ZST>) }
    }

    bb1: {
        _29 = const _;                   // scope 0 at ui/packed/packed-struct-optimized-enum.rs:29:64: 29:67
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-optimized-enum.rs:29:64: 29:67
                                         // + literal: Const { ty: &(), val: Unevaluated(main, [], Some(promoted[4])) }
        _12 = _29;                       // scope 0 at ui/packed/packed-struct-optimized-enum.rs:29:64: 29:67
        _11 = _12;                       // scope 0 at ui/packed/packed-struct-optimized-enum.rs:29:64: 29:67
        _10 = Packed::<&()>(move _11);   // scope 0 at ui/packed/packed-struct-optimized-enum.rs:29:57: 29:68
        _9 = (move _10, const true);     // scope 0 at ui/packed/packed-struct-optimized-enum.rs:29:56: 29:75
        _8 = Option::<(Packed<&()>, bool)>::Some(move _9); // scope 0 at ui/packed/packed-struct-optimized-enum.rs:29:51: 29:76
        _7 = sanity_check_size::<Option<(Packed<&()>, bool)>>(move _8) -> bb2; // scope 0 at ui/packed/packed-struct-optimized-enum.rs:29:5: 29:77
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-optimized-enum.rs:29:5: 29:50
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Option<(Packed<&()>, bool)>) {sanity_check_size::<Option<(Packed<&()>, bool)>>}, val: Value(<ZST>) }
    }

    bb2: {
        _28 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[3])) }
        _14 = _28;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _27 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[2])) }
        _15 = _27;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _13 = (move _14, move _15);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _16 = (_13.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _17 = (_13.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _26 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[1])) }
        _20 = _26;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _25 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _21 = _25;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _21);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _22 = (_19.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _23 = (_19.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        return;                          // scope 0 at ui/packed/packed-struct-optimized-enum.rs:36:2: 36:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:35:16: 35:55

    bb0: {
        _1 = std::mem::size_of::<(Packed<&()>, bool)>() -> bb1; // scope 0 at ui/packed/packed-struct-optimized-enum.rs:35:16: 35:55
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-optimized-enum.rs:35:16: 35:53
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<(Packed<&()>, bool)>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:34:16: 34:63

    bb0: {
        _1 = std::mem::size_of::<Option<(Packed<&()>, bool)>>() -> bb1; // scope 0 at ui/packed/packed-struct-optimized-enum.rs:34:16: 34:63
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-optimized-enum.rs:34:16: 34:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Option<(Packed<&()>, bool)>>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:33:66: 33:67

    bb0: {
        _1 = const 1_usize;              // scope 0 at ui/packed/packed-struct-optimized-enum.rs:33:66: 33:67
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:33:16: 33:64

    bb0: {
        _1 = align_of::<Option<(Packed<&()>, bool)>>() -> bb1; // scope 0 at ui/packed/packed-struct-optimized-enum.rs:33:16: 33:64
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-optimized-enum.rs:33:16: 33:62
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> usize {align_of::<Option<(Packed<&()>, bool)>>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[4] in main: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/packed/packed-struct-optimized-enum.rs:29:64: 29:67
    let mut _1: ();                      // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:29:65: 29:67

    bb0: {
        _1 = ();                         // scope 0 at ui/packed/packed-struct-optimized-enum.rs:29:65: 29:67
        _0 = &_1;                        // scope 0 at ui/packed/packed-struct-optimized-enum.rs:29:64: 29:67
        return;                          // scope 0 at ui/packed/packed-struct-optimized-enum.rs:29:64: 29:67
    }
}

promoted[5] in main: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/packed/packed-struct-optimized-enum.rs:23:37: 23:40
    let mut _1: ();                      // in scope 0 at ui/packed/packed-struct-optimized-enum.rs:23:38: 23:40

    bb0: {
        _1 = ();                         // scope 0 at ui/packed/packed-struct-optimized-enum.rs:23:38: 23:40
        _0 = &_1;                        // scope 0 at ui/packed/packed-struct-optimized-enum.rs:23:37: 23:40
        return;                          // scope 0 at ui/packed/packed-struct-optimized-enum.rs:23:37: 23:40
    }
}

fn Packed(_1: T) -> Packed<T> {
    let mut _0: Packed<T>;               // return place in scope 0 at ui/packed/packed-struct-optimized-enum.rs:3:1: 3:23

    bb0: {
        _0 = Packed::<T>(move _1);       // scope 0 at ui/packed/packed-struct-optimized-enum.rs:3:1: 3:23
        return;                          // scope 0 at ui/packed/packed-struct-optimized-enum.rs:3:1: 3:23
    }
}

// MIR FOR CTFE
fn Packed(_1: T) -> Packed<T> {
    let mut _0: Packed<T>;               // return place in scope 0 at ui/packed/packed-struct-optimized-enum.rs:3:1: 3:23

    bb0: {
        _0 = Packed::<T>(move _1);       // scope 0 at ui/packed/packed-struct-optimized-enum.rs:3:1: 3:23
        return;                          // scope 0 at ui/packed/packed-struct-optimized-enum.rs:3:1: 3:23
    }
}
