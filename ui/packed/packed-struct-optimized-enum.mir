// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/packed/packed-struct-optimized-enum.rs:6:1: 6:34>::clone(_1: &Packed<T>) -> Packed<T> {
    debug self => _1;
    let mut _0: Packed<T>;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn sanity_check_size(_1: T) -> () {
    debug one => _1;
    let mut _0: ();
    let _2: [T; 2];
    let mut _4: usize;
    let mut _5: *const T;
    let _6: &T;
    let _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: *const T;
    let _12: &T;
    let _13: usize;
    let mut _14: usize;
    let mut _15: bool;
    let mut _18: (usize, usize);
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: (&usize, &usize);
    let mut _22: &usize;
    let mut _23: &usize;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: usize;
    let mut _29: usize;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (&usize, &usize);
    let mut _34: &usize;
    let _35: usize;
    let mut _36: usize;
    let mut _37: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: usize;
    let mut _43: usize;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug two => _2;
        let _3: usize;
        scope 2 {
            debug stride => _3;
            let _16: usize;
            let _17: usize;
            scope 3 {
                debug size => _16;
                debug align => _17;
                let _24: &usize;
                let _25: &usize;
                let _38: &usize;
                let _39: &usize;
                let mut _47: &usize;
                scope 4 {
                    debug left_val => _24;
                    debug right_val => _25;
                    let _30: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _30;
                    }
                }
                scope 6 {
                    debug left_val => _38;
                    debug right_val => _39;
                    let _44: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _44;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = [_1, _1];
        _7 = const 1_usize;
        _8 = const 2_usize;
        _9 = Lt(_7, _8);
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _7) -> [success: bb1, unwind continue];
    }

    bb1: {
        _6 = &_2[_7];
        _5 = &raw const (*_6);
        _4 = _5 as usize (PointerExposeAddress);
        _13 = const 0_usize;
        _14 = const 2_usize;
        _15 = Lt(_13, _14);
        assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> [success: bb2, unwind continue];
    }

    bb2: {
        _12 = &_2[_13];
        _11 = &raw const (*_12);
        _10 = _11 as usize (PointerExposeAddress);
        _3 = Sub(move _4, move _10);
        _19 = std::mem::size_of::<T>() -> [return: bb3, unwind continue];
    }

    bb3: {
        _20 = align_of::<T>() -> [return: bb4, unwind continue];
    }

    bb4: {
        _18 = (move _19, move _20);
        _16 = (_18.0: usize);
        _17 = (_18.1: usize);
        _22 = &_3;
        _23 = &_16;
        _21 = (move _22, move _23);
        _24 = (_21.0: &usize);
        _25 = (_21.1: &usize);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<usize, usize>(move _30, _24, _25, move _32) -> unwind continue;
    }

    bb6: {
        _36 = _16;
        _37 = Eq(_17, const 0_usize);
        assert(!move _37, "attempt to calculate the remainder of `{}` with a divisor of zero", _36) -> [success: bb7, unwind continue];
    }

    bb7: {
        _35 = Rem(move _36, _17);
        _34 = &_35;
        _47 = const _;
        _33 = (move _34, _47);
        _38 = (_33.0: &usize);
        _39 = (_33.1: &usize);
        _42 = (*_38);
        _43 = (*_39);
        _41 = Eq(move _42, move _43);
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<usize, usize>(move _44, _38, _39, move _46) -> unwind continue;
    }

    bb9: {
        return;
    }
}

promoted[0] in sanity_check_size: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: (std::option::Option<Packed<(&(), i32)>>, bool);
    let mut _3: std::option::Option<Packed<(&(), i32)>>;
    let mut _4: Packed<(&(), i32)>;
    let mut _5: (&(), i32);
    let _6: ();
    let mut _7: std::option::Option<(Packed<&()>, bool)>;
    let mut _8: (Packed<&()>, bool);
    let mut _9: Packed<&()>;
    let mut _10: (&usize, &usize);
    let _11: &usize;
    let _12: &usize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&usize, &usize);
    let _21: &usize;
    let _22: &usize;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: usize;
    let mut _26: usize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: &usize;
    let mut _31: &usize;
    let mut _32: &usize;
    let mut _33: &usize;
    let mut _34: &();
    let mut _35: &();
    scope 1 {
        debug left_val => _11;
        debug right_val => _12;
        let _17: core::panicking::AssertKind;
        scope 2 {
            debug kind => _17;
        }
    }
    scope 3 {
        debug left_val => _21;
        debug right_val => _22;
        let _27: core::panicking::AssertKind;
        scope 4 {
            debug kind => _27;
        }
    }

    bb0: {
        _35 = const _;
        _5 = (_35, const 0_i32);
        _4 = Packed::<(&(), i32)>(move _5);
        _3 = Option::<Packed<(&(), i32)>>::Some(move _4);
        _2 = (move _3, const true);
        _1 = sanity_check_size::<(Option<Packed<(&(), i32)>>, bool)>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _34 = const _;
        _9 = Packed::<&()>(_34);
        _8 = (move _9, const true);
        _7 = Option::<(Packed<&()>, bool)>::Some(move _8);
        _6 = sanity_check_size::<Option<(Packed<&()>, bool)>>(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _33 = const _;
        _32 = const _;
        _10 = (_33, _32);
        _11 = (_10.0: &usize);
        _12 = (_10.1: &usize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<usize, usize>(move _17, _11, _12, move _19) -> unwind continue;
    }

    bb4: {
        _31 = const _;
        _30 = const _;
        _20 = (_31, _30);
        _21 = (_20.0: &usize);
        _22 = (_20.1: &usize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<usize, usize>(move _27, _21, _22, move _29) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<(Packed<&()>, bool)>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<Option<(Packed<&()>, bool)>>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<Option<(Packed<&()>, bool)>>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn Packed(_1: T) -> Packed<T> {
    let mut _0: Packed<T>;

    bb0: {
        _0 = Packed::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Packed(_1: T) -> Packed<T> {
    let mut _0: Packed<T>;

    bb0: {
        _0 = Packed::<T>(move _1);
        return;
    }
}
