// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: Foo1;
    let mut _3: (&usize, &usize);
    let mut _4: &usize;
    let _5: usize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&usize, &usize);
    let mut _18: &usize;
    let _19: usize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: usize;
    let mut _25: usize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&usize, &usize);
    let mut _32: &usize;
    let _33: usize;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: usize;
    let mut _39: usize;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug foo => _1;
        let _2: *const usize;
        scope 2 {
            debug brw => _2;
            let _15: Foo2;
            scope 3 {
                let _6: &usize;
                let _7: &usize;
                let mut _45: &usize;
                scope 4 {
                    debug left_val => _6;
                    debug right_val => _7;
                    let _12: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _12;
                    }
                }
            }
            scope 6 {
                debug foo => _15;
                let _16: *const usize;
                scope 7 {
                    debug brw => _16;
                    let mut _29: Foo4C;
                    scope 8 {
                        let _20: &usize;
                        let _21: &usize;
                        let mut _44: &usize;
                        scope 9 {
                            debug left_val => _20;
                            debug right_val => _21;
                            let _26: core::panicking::AssertKind;
                            scope 10 {
                                debug kind => _26;
                            }
                        }
                    }
                    scope 11 {
                        debug foo => _29;
                        let _30: *mut usize;
                        scope 12 {
                            debug brw => _30;
                            scope 13 {
                                let _34: &usize;
                                let _35: &usize;
                                let mut _43: &usize;
                                scope 14 {
                                    debug left_val => _34;
                                    debug right_val => _35;
                                    let _40: core::panicking::AssertKind;
                                    scope 15 {
                                        debug kind => _40;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Foo1 { bar: const 1_u8, baz: const 2_usize };
        _2 = &raw const (_1.1: usize);
        _5 = ptr::const_ptr::<impl *const usize>::read_unaligned(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_5;
        _45 = const _;
        _3 = (move _4, _45);
        _6 = (_3.0: &usize);
        _7 = (_3.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _15 = Foo2 { bar: const 1_u8, baz: const 2_usize };
        _16 = &raw const (_15.1: usize);
        _19 = ptr::const_ptr::<impl *const usize>::read_unaligned(_16) -> [return: bb4, unwind continue];
    }

    bb4: {
        _18 = &_19;
        _44 = const _;
        _17 = (move _18, _44);
        _20 = (_17.0: &usize);
        _21 = (_17.1: &usize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<usize, usize>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb6: {
        _29 = Foo4C { bar: const 1_u8, baz: const 2_usize };
        _30 = &raw mut (_29.1: usize);
        _33 = ptr::mut_ptr::<impl *mut usize>::read_unaligned(_30) -> [return: bb7, unwind continue];
    }

    bb7: {
        _32 = &_33;
        _43 = const _;
        _31 = (move _32, _43);
        _34 = (_31.0: &usize);
        _35 = (_31.1: &usize);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<usize, usize>(move _40, _34, _35, move _42) -> unwind continue;
    }

    bb9: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}
