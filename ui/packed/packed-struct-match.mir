// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: Foo1;
    let mut _4: (&u8, &u8);
    let mut _5: &u8;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u8;
    let mut _11: u8;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&usize, &usize);
    let mut _16: &usize;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: usize;
    let mut _22: usize;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&u8, &u8);
    let mut _30: &u8;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: u8;
    let mut _36: u8;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&usize, &usize);
    let mut _41: &usize;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: usize;
    let mut _47: usize;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _54: (&u8, &u8);
    let mut _55: &u8;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: u8;
    let mut _61: u8;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: (&usize, &usize);
    let mut _66: &usize;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: usize;
    let mut _72: usize;
    let _74: !;
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug foo1 => _1;
        let _2: u8;
        let _3: usize;
        let _26: Foo2;
        scope 2 {
            debug bar => _2;
            debug baz => _3;
            let _6: &u8;
            let _7: &u8;
            let _17: &usize;
            let _18: &usize;
            let mut _80: &usize;
            let mut _81: &u8;
            scope 3 {
                debug left_val => _6;
                debug right_val => _7;
                let _12: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _12;
                }
            }
            scope 5 {
                debug left_val => _17;
                debug right_val => _18;
                let _23: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _23;
                }
            }
        }
        scope 7 {
            debug foo2 => _26;
            let _27: u8;
            let _28: usize;
            let _51: Foo4C;
            scope 8 {
                debug bar => _27;
                debug baz => _28;
                let _31: &u8;
                let _32: &u8;
                let _42: &usize;
                let _43: &usize;
                let mut _78: &usize;
                let mut _79: &u8;
                scope 9 {
                    debug left_val => _31;
                    debug right_val => _32;
                    let _37: core::panicking::AssertKind;
                    scope 10 {
                        debug kind => _37;
                    }
                }
                scope 11 {
                    debug left_val => _42;
                    debug right_val => _43;
                    let _48: core::panicking::AssertKind;
                    scope 12 {
                        debug kind => _48;
                    }
                }
            }
            scope 13 {
                debug foo4 => _51;
                let _52: u8;
                let _53: usize;
                scope 14 {
                    debug bar => _52;
                    debug baz => _53;
                    let _56: &u8;
                    let _57: &u8;
                    let _67: &usize;
                    let _68: &usize;
                    let mut _76: &usize;
                    let mut _77: &u8;
                    scope 15 {
                        debug left_val => _56;
                        debug right_val => _57;
                        let _62: core::panicking::AssertKind;
                        scope 16 {
                            debug kind => _62;
                        }
                    }
                    scope 17 {
                        debug left_val => _67;
                        debug right_val => _68;
                        let _73: core::panicking::AssertKind;
                        scope 18 {
                            debug kind => _73;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Foo1 { bar: const 1_u8, baz: const 2_usize };
        _2 = (_1.0: u8);
        _3 = (_1.1: usize);
        _5 = &_2;
        _81 = const _;
        _4 = (move _5, _81);
        _6 = (_4.0: &u8);
        _7 = (_4.1: &u8);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u8, u8>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb2: {
        _16 = &_3;
        _80 = const _;
        _15 = (move _16, _80);
        _17 = (_15.0: &usize);
        _18 = (_15.1: &usize);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<usize, usize>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb4: {
        _26 = Foo2 { bar: const 1_u8, baz: const 2_usize };
        _27 = (_26.0: u8);
        _28 = (_26.1: usize);
        _30 = &_27;
        _79 = const _;
        _29 = (move _30, _79);
        _31 = (_29.0: &u8);
        _32 = (_29.1: &u8);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<u8, u8>(move _37, _31, _32, move _39) -> unwind continue;
    }

    bb6: {
        _41 = &_28;
        _78 = const _;
        _40 = (move _41, _78);
        _42 = (_40.0: &usize);
        _43 = (_40.1: &usize);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<usize, usize>(move _48, _42, _43, move _50) -> unwind continue;
    }

    bb8: {
        _51 = Foo4C { bar: const 1_u8, baz: const 2_usize };
        _52 = (_51.0: u8);
        _53 = (_51.1: usize);
        _55 = &_52;
        _77 = const _;
        _54 = (move _55, _77);
        _56 = (_54.0: &u8);
        _57 = (_54.1: &u8);
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<u8, u8>(move _62, _56, _57, move _64) -> unwind continue;
    }

    bb10: {
        _66 = &_53;
        _76 = const _;
        _65 = (move _66, _76);
        _67 = (_65.0: &usize);
        _68 = (_65.1: &usize);
        _71 = (*_67);
        _72 = (*_68);
        _70 = Eq(move _71, move _72);
        _69 = Not(move _70);
        switchInt(move _69) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _73 = core::panicking::AssertKind::Eq;
        _75 = Option::<Arguments<'_>>::None;
        _74 = core::panicking::assert_failed::<usize, usize>(move _73, _67, _68, move _75) -> unwind continue;
    }

    bb12: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}
