// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/packed/packed-struct-vec.rs:7:16: 7:21>::clone(_1: &Foo1) -> Foo1 {
    debug self => _1;                    // in scope 0 at ui/packed/packed-struct-vec.rs:7:16: 7:21
    let mut _0: Foo1;                    // return place in scope 0 at ui/packed/packed-struct-vec.rs:7:16: 7:21
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 2 at ui/packed/packed-struct-vec.rs:7:16: 7:21
        return;                          // scope 0 at ui/packed/packed-struct-vec.rs:7:21: 7:21
    }
}

fn <impl at ui/packed/packed-struct-vec.rs:13:1: 13:24>::eq(_1: &Foo1, _2: &Foo1) -> bool {
    debug self => _1;                    // in scope 0 at ui/packed/packed-struct-vec.rs:14:11: 14:16
    debug other => _2;                   // in scope 0 at ui/packed/packed-struct-vec.rs:14:18: 14:23
    let mut _0: bool;                    // return place in scope 0 at ui/packed/packed-struct-vec.rs:14:35: 14:39
    let mut _3: bool;                    // in scope 0 at ui/packed/packed-struct-vec.rs:15:9: 15:30
    let mut _4: u8;                      // in scope 0 at ui/packed/packed-struct-vec.rs:15:9: 15:17
    let mut _5: u8;                      // in scope 0 at ui/packed/packed-struct-vec.rs:15:21: 15:30
    let mut _6: bool;                    // in scope 0 at ui/packed/packed-struct-vec.rs:15:34: 15:55
    let mut _7: u64;                     // in scope 0 at ui/packed/packed-struct-vec.rs:15:34: 15:42
    let mut _8: u64;                     // in scope 0 at ui/packed/packed-struct-vec.rs:15:46: 15:55

    bb0: {
        _4 = ((*_1).0: u8);              // scope 0 at ui/packed/packed-struct-vec.rs:15:9: 15:17
        _5 = ((*_2).0: u8);              // scope 0 at ui/packed/packed-struct-vec.rs:15:21: 15:30
        _3 = Eq(move _4, move _5);       // scope 0 at ui/packed/packed-struct-vec.rs:15:9: 15:30
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/packed/packed-struct-vec.rs:15:9: 15:55
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/packed/packed-struct-vec.rs:15:9: 15:55
        goto -> bb3;                     // scope 0 at ui/packed/packed-struct-vec.rs:15:9: 15:55
    }

    bb2: {
        _7 = ((*_1).1: u64);             // scope 0 at ui/packed/packed-struct-vec.rs:15:34: 15:42
        _8 = ((*_2).1: u64);             // scope 0 at ui/packed/packed-struct-vec.rs:15:46: 15:55
        _6 = Eq(move _7, move _8);       // scope 0 at ui/packed/packed-struct-vec.rs:15:34: 15:55
        _0 = move _6;                    // scope 0 at ui/packed/packed-struct-vec.rs:15:9: 15:55
        goto -> bb3;                     // scope 0 at ui/packed/packed-struct-vec.rs:15:9: 15:55
    }

    bb3: {
        return;                          // scope 0 at ui/packed/packed-struct-vec.rs:16:6: 16:6
    }
}

fn <impl at ui/packed/packed-struct-vec.rs:19:1: 19:25>::fmt(_1: &Foo1, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/packed/packed-struct-vec.rs:20:12: 20:17
    debug f => _2;                       // in scope 0 at ui/packed/packed-struct-vec.rs:20:19: 20:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/packed/packed-struct-vec.rs:20:46: 20:57
    let _3: u8;                          // in scope 0 at ui/packed/packed-struct-vec.rs:21:13: 21:16
    let mut _5: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/packed/packed-struct-vec.rs:24:9: 27:22
    let mut _6: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/packed/packed-struct-vec.rs:24:9: 26:32
    let mut _7: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/packed/packed-struct-vec.rs:24:9: 26:32
    let mut _8: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/packed/packed-struct-vec.rs:24:9: 25:32
    let mut _9: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/packed/packed-struct-vec.rs:24:9: 25:32
    let mut _10: std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/packed/packed-struct-vec.rs:24:9: 24:31
    let mut _11: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/packed/packed-struct-vec.rs:24:9: 24:31
    let mut _12: &str;                   // in scope 0 at ui/packed/packed-struct-vec.rs:24:24: 24:30
    let _13: &str;                       // in scope 0 at ui/packed/packed-struct-vec.rs:24:24: 24:30
    let mut _14: &str;                   // in scope 0 at ui/packed/packed-struct-vec.rs:25:20: 25:25
    let _15: &str;                       // in scope 0 at ui/packed/packed-struct-vec.rs:25:20: 25:25
    let mut _16: &dyn std::fmt::Debug;   // in scope 0 at ui/packed/packed-struct-vec.rs:25:27: 25:31
    let mut _17: &u8;                    // in scope 0 at ui/packed/packed-struct-vec.rs:25:27: 25:31
    let _18: &u8;                        // in scope 0 at ui/packed/packed-struct-vec.rs:25:27: 25:31
    let mut _19: &str;                   // in scope 0 at ui/packed/packed-struct-vec.rs:26:20: 26:25
    let _20: &str;                       // in scope 0 at ui/packed/packed-struct-vec.rs:26:20: 26:25
    let mut _21: &dyn std::fmt::Debug;   // in scope 0 at ui/packed/packed-struct-vec.rs:26:27: 26:31
    let mut _22: &u64;                   // in scope 0 at ui/packed/packed-struct-vec.rs:26:27: 26:31
    let _23: &u64;                       // in scope 0 at ui/packed/packed-struct-vec.rs:26:27: 26:31
    scope 1 {
        debug bar => _3;                 // in scope 1 at ui/packed/packed-struct-vec.rs:21:13: 21:16
        let _4: u64;                     // in scope 1 at ui/packed/packed-struct-vec.rs:22:13: 22:16
        scope 2 {
            debug baz => _4;             // in scope 2 at ui/packed/packed-struct-vec.rs:22:13: 22:16
        }
    }

    bb0: {
        _3 = ((*_1).0: u8);              // scope 0 at ui/packed/packed-struct-vec.rs:21:19: 21:27
        _4 = ((*_1).1: u64);             // scope 1 at ui/packed/packed-struct-vec.rs:22:19: 22:27
        _11 = &mut (*_2);                // scope 2 at ui/packed/packed-struct-vec.rs:24:9: 24:31
        _13 = const "Foo1";              // scope 2 at ui/packed/packed-struct-vec.rs:24:24: 24:30
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:24:24: 24:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = _13;                       // scope 2 at ui/packed/packed-struct-vec.rs:24:24: 24:30
        _10 = Formatter::<'_>::debug_struct(move _11, move _12) -> bb1; // scope 2 at ui/packed/packed-struct-vec.rs:24:9: 24:31
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:24:11: 24:23
                                         // + literal: Const { ty: for<'b, 'a> fn(&'b mut Formatter<'_>, &'a str) -> DebugStruct<'b, '_> {Formatter::<'_>::debug_struct}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = &mut _10;                   // scope 2 at ui/packed/packed-struct-vec.rs:24:9: 25:32
        _15 = const "bar";               // scope 2 at ui/packed/packed-struct-vec.rs:25:20: 25:25
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:25:20: 25:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = _15;                       // scope 2 at ui/packed/packed-struct-vec.rs:25:20: 25:25
        _18 = &_3;                       // scope 2 at ui/packed/packed-struct-vec.rs:25:27: 25:31
        _17 = _18;                       // scope 2 at ui/packed/packed-struct-vec.rs:25:27: 25:31
        _16 = move _17 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/packed/packed-struct-vec.rs:25:27: 25:31
        _8 = DebugStruct::<'_, '_>::field(move _9, move _14, move _16) -> bb2; // scope 2 at ui/packed/packed-struct-vec.rs:24:9: 25:32
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:25:14: 25:19
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut DebugStruct<'_, '_>, &'b str, &'c (dyn Debug + 'c)) -> &'a mut DebugStruct<'_, '_> {DebugStruct::<'_, '_>::field}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &mut (*_8);                 // scope 2 at ui/packed/packed-struct-vec.rs:24:9: 26:32
        _20 = const "baz";               // scope 2 at ui/packed/packed-struct-vec.rs:26:20: 26:25
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:26:20: 26:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _19 = _20;                       // scope 2 at ui/packed/packed-struct-vec.rs:26:20: 26:25
        _23 = &_4;                       // scope 2 at ui/packed/packed-struct-vec.rs:26:27: 26:31
        _22 = _23;                       // scope 2 at ui/packed/packed-struct-vec.rs:26:27: 26:31
        _21 = move _22 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/packed/packed-struct-vec.rs:26:27: 26:31
        _6 = DebugStruct::<'_, '_>::field(move _7, move _19, move _21) -> bb3; // scope 2 at ui/packed/packed-struct-vec.rs:24:9: 26:32
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:26:14: 26:19
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut DebugStruct<'_, '_>, &'b str, &'c (dyn Debug + 'c)) -> &'a mut DebugStruct<'_, '_> {DebugStruct::<'_, '_>::field}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = &mut (*_6);                 // scope 2 at ui/packed/packed-struct-vec.rs:24:9: 27:22
        _0 = DebugStruct::<'_, '_>::finish(move _5) -> bb4; // scope 2 at ui/packed/packed-struct-vec.rs:24:9: 27:22
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:27:14: 27:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut DebugStruct<'_, '_>) -> Result<(), std::fmt::Error> {DebugStruct::<'_, '_>::finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/packed/packed-struct-vec.rs:28:6: 28:6
    }
}

fn <impl at ui/packed/packed-struct-vec.rs:32:16: 32:21>::clone(_1: &Foo2) -> Foo2 {
    debug self => _1;                    // in scope 0 at ui/packed/packed-struct-vec.rs:32:16: 32:21
    let mut _0: Foo2;                    // return place in scope 0 at ui/packed/packed-struct-vec.rs:32:16: 32:21
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 2 at ui/packed/packed-struct-vec.rs:32:16: 32:21
        return;                          // scope 0 at ui/packed/packed-struct-vec.rs:32:21: 32:21
    }
}

fn <impl at ui/packed/packed-struct-vec.rs:38:1: 38:24>::eq(_1: &Foo2, _2: &Foo2) -> bool {
    debug self => _1;                    // in scope 0 at ui/packed/packed-struct-vec.rs:39:11: 39:16
    debug other => _2;                   // in scope 0 at ui/packed/packed-struct-vec.rs:39:18: 39:23
    let mut _0: bool;                    // return place in scope 0 at ui/packed/packed-struct-vec.rs:39:35: 39:39
    let mut _3: bool;                    // in scope 0 at ui/packed/packed-struct-vec.rs:40:9: 40:30
    let mut _4: u8;                      // in scope 0 at ui/packed/packed-struct-vec.rs:40:9: 40:17
    let mut _5: u8;                      // in scope 0 at ui/packed/packed-struct-vec.rs:40:21: 40:30
    let mut _6: bool;                    // in scope 0 at ui/packed/packed-struct-vec.rs:40:34: 40:55
    let mut _7: u64;                     // in scope 0 at ui/packed/packed-struct-vec.rs:40:34: 40:42
    let mut _8: u64;                     // in scope 0 at ui/packed/packed-struct-vec.rs:40:46: 40:55

    bb0: {
        _4 = ((*_1).0: u8);              // scope 0 at ui/packed/packed-struct-vec.rs:40:9: 40:17
        _5 = ((*_2).0: u8);              // scope 0 at ui/packed/packed-struct-vec.rs:40:21: 40:30
        _3 = Eq(move _4, move _5);       // scope 0 at ui/packed/packed-struct-vec.rs:40:9: 40:30
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/packed/packed-struct-vec.rs:40:9: 40:55
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/packed/packed-struct-vec.rs:40:9: 40:55
        goto -> bb3;                     // scope 0 at ui/packed/packed-struct-vec.rs:40:9: 40:55
    }

    bb2: {
        _7 = ((*_1).1: u64);             // scope 0 at ui/packed/packed-struct-vec.rs:40:34: 40:42
        _8 = ((*_2).1: u64);             // scope 0 at ui/packed/packed-struct-vec.rs:40:46: 40:55
        _6 = Eq(move _7, move _8);       // scope 0 at ui/packed/packed-struct-vec.rs:40:34: 40:55
        _0 = move _6;                    // scope 0 at ui/packed/packed-struct-vec.rs:40:9: 40:55
        goto -> bb3;                     // scope 0 at ui/packed/packed-struct-vec.rs:40:9: 40:55
    }

    bb3: {
        return;                          // scope 0 at ui/packed/packed-struct-vec.rs:41:6: 41:6
    }
}

fn <impl at ui/packed/packed-struct-vec.rs:44:1: 44:25>::fmt(_1: &Foo2, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/packed/packed-struct-vec.rs:45:12: 45:17
    debug f => _2;                       // in scope 0 at ui/packed/packed-struct-vec.rs:45:19: 45:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/packed/packed-struct-vec.rs:45:46: 45:57
    let _3: u8;                          // in scope 0 at ui/packed/packed-struct-vec.rs:46:13: 46:16
    let mut _5: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/packed/packed-struct-vec.rs:49:9: 52:22
    let mut _6: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/packed/packed-struct-vec.rs:49:9: 51:32
    let mut _7: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/packed/packed-struct-vec.rs:49:9: 51:32
    let mut _8: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/packed/packed-struct-vec.rs:49:9: 50:32
    let mut _9: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/packed/packed-struct-vec.rs:49:9: 50:32
    let mut _10: std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/packed/packed-struct-vec.rs:49:9: 49:31
    let mut _11: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/packed/packed-struct-vec.rs:49:9: 49:31
    let mut _12: &str;                   // in scope 0 at ui/packed/packed-struct-vec.rs:49:24: 49:30
    let _13: &str;                       // in scope 0 at ui/packed/packed-struct-vec.rs:49:24: 49:30
    let mut _14: &str;                   // in scope 0 at ui/packed/packed-struct-vec.rs:50:20: 50:25
    let _15: &str;                       // in scope 0 at ui/packed/packed-struct-vec.rs:50:20: 50:25
    let mut _16: &dyn std::fmt::Debug;   // in scope 0 at ui/packed/packed-struct-vec.rs:50:27: 50:31
    let mut _17: &u8;                    // in scope 0 at ui/packed/packed-struct-vec.rs:50:27: 50:31
    let _18: &u8;                        // in scope 0 at ui/packed/packed-struct-vec.rs:50:27: 50:31
    let mut _19: &str;                   // in scope 0 at ui/packed/packed-struct-vec.rs:51:20: 51:25
    let _20: &str;                       // in scope 0 at ui/packed/packed-struct-vec.rs:51:20: 51:25
    let mut _21: &dyn std::fmt::Debug;   // in scope 0 at ui/packed/packed-struct-vec.rs:51:27: 51:31
    let mut _22: &u64;                   // in scope 0 at ui/packed/packed-struct-vec.rs:51:27: 51:31
    let _23: &u64;                       // in scope 0 at ui/packed/packed-struct-vec.rs:51:27: 51:31
    scope 1 {
        debug bar => _3;                 // in scope 1 at ui/packed/packed-struct-vec.rs:46:13: 46:16
        let _4: u64;                     // in scope 1 at ui/packed/packed-struct-vec.rs:47:13: 47:16
        scope 2 {
            debug baz => _4;             // in scope 2 at ui/packed/packed-struct-vec.rs:47:13: 47:16
        }
    }

    bb0: {
        _3 = ((*_1).0: u8);              // scope 0 at ui/packed/packed-struct-vec.rs:46:19: 46:27
        _4 = ((*_1).1: u64);             // scope 1 at ui/packed/packed-struct-vec.rs:47:19: 47:27
        _11 = &mut (*_2);                // scope 2 at ui/packed/packed-struct-vec.rs:49:9: 49:31
        _13 = const "Foo2";              // scope 2 at ui/packed/packed-struct-vec.rs:49:24: 49:30
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:49:24: 49:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = _13;                       // scope 2 at ui/packed/packed-struct-vec.rs:49:24: 49:30
        _10 = Formatter::<'_>::debug_struct(move _11, move _12) -> bb1; // scope 2 at ui/packed/packed-struct-vec.rs:49:9: 49:31
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:49:11: 49:23
                                         // + literal: Const { ty: for<'b, 'a> fn(&'b mut Formatter<'_>, &'a str) -> DebugStruct<'b, '_> {Formatter::<'_>::debug_struct}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = &mut _10;                   // scope 2 at ui/packed/packed-struct-vec.rs:49:9: 50:32
        _15 = const "bar";               // scope 2 at ui/packed/packed-struct-vec.rs:50:20: 50:25
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:50:20: 50:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = _15;                       // scope 2 at ui/packed/packed-struct-vec.rs:50:20: 50:25
        _18 = &_3;                       // scope 2 at ui/packed/packed-struct-vec.rs:50:27: 50:31
        _17 = _18;                       // scope 2 at ui/packed/packed-struct-vec.rs:50:27: 50:31
        _16 = move _17 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/packed/packed-struct-vec.rs:50:27: 50:31
        _8 = DebugStruct::<'_, '_>::field(move _9, move _14, move _16) -> bb2; // scope 2 at ui/packed/packed-struct-vec.rs:49:9: 50:32
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:50:14: 50:19
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut DebugStruct<'_, '_>, &'b str, &'c (dyn Debug + 'c)) -> &'a mut DebugStruct<'_, '_> {DebugStruct::<'_, '_>::field}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &mut (*_8);                 // scope 2 at ui/packed/packed-struct-vec.rs:49:9: 51:32
        _20 = const "baz";               // scope 2 at ui/packed/packed-struct-vec.rs:51:20: 51:25
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:51:20: 51:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _19 = _20;                       // scope 2 at ui/packed/packed-struct-vec.rs:51:20: 51:25
        _23 = &_4;                       // scope 2 at ui/packed/packed-struct-vec.rs:51:27: 51:31
        _22 = _23;                       // scope 2 at ui/packed/packed-struct-vec.rs:51:27: 51:31
        _21 = move _22 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/packed/packed-struct-vec.rs:51:27: 51:31
        _6 = DebugStruct::<'_, '_>::field(move _7, move _19, move _21) -> bb3; // scope 2 at ui/packed/packed-struct-vec.rs:49:9: 51:32
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:51:14: 51:19
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut DebugStruct<'_, '_>, &'b str, &'c (dyn Debug + 'c)) -> &'a mut DebugStruct<'_, '_> {DebugStruct::<'_, '_>::field}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = &mut (*_6);                 // scope 2 at ui/packed/packed-struct-vec.rs:49:9: 52:22
        _0 = DebugStruct::<'_, '_>::finish(move _5) -> bb4; // scope 2 at ui/packed/packed-struct-vec.rs:49:9: 52:22
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:52:14: 52:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut DebugStruct<'_, '_>) -> Result<(), std::fmt::Error> {DebugStruct::<'_, '_>::finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/packed/packed-struct-vec.rs:53:6: 53:6
    }
}

fn <impl at ui/packed/packed-struct-vec.rs:57:16: 57:21>::clone(_1: &Foo4C) -> Foo4C {
    debug self => _1;                    // in scope 0 at ui/packed/packed-struct-vec.rs:57:16: 57:21
    let mut _0: Foo4C;                   // return place in scope 0 at ui/packed/packed-struct-vec.rs:57:16: 57:21
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 2 at ui/packed/packed-struct-vec.rs:57:16: 57:21
        return;                          // scope 0 at ui/packed/packed-struct-vec.rs:57:21: 57:21
    }
}

fn <impl at ui/packed/packed-struct-vec.rs:63:1: 63:25>::eq(_1: &Foo4C, _2: &Foo4C) -> bool {
    debug self => _1;                    // in scope 0 at ui/packed/packed-struct-vec.rs:64:11: 64:16
    debug other => _2;                   // in scope 0 at ui/packed/packed-struct-vec.rs:64:18: 64:23
    let mut _0: bool;                    // return place in scope 0 at ui/packed/packed-struct-vec.rs:64:36: 64:40
    let mut _3: bool;                    // in scope 0 at ui/packed/packed-struct-vec.rs:65:9: 65:30
    let mut _4: u8;                      // in scope 0 at ui/packed/packed-struct-vec.rs:65:9: 65:17
    let mut _5: u8;                      // in scope 0 at ui/packed/packed-struct-vec.rs:65:21: 65:30
    let mut _6: bool;                    // in scope 0 at ui/packed/packed-struct-vec.rs:65:34: 65:55
    let mut _7: u64;                     // in scope 0 at ui/packed/packed-struct-vec.rs:65:34: 65:42
    let mut _8: u64;                     // in scope 0 at ui/packed/packed-struct-vec.rs:65:46: 65:55

    bb0: {
        _4 = ((*_1).0: u8);              // scope 0 at ui/packed/packed-struct-vec.rs:65:9: 65:17
        _5 = ((*_2).0: u8);              // scope 0 at ui/packed/packed-struct-vec.rs:65:21: 65:30
        _3 = Eq(move _4, move _5);       // scope 0 at ui/packed/packed-struct-vec.rs:65:9: 65:30
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/packed/packed-struct-vec.rs:65:9: 65:55
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/packed/packed-struct-vec.rs:65:9: 65:55
        goto -> bb3;                     // scope 0 at ui/packed/packed-struct-vec.rs:65:9: 65:55
    }

    bb2: {
        _7 = ((*_1).1: u64);             // scope 0 at ui/packed/packed-struct-vec.rs:65:34: 65:42
        _8 = ((*_2).1: u64);             // scope 0 at ui/packed/packed-struct-vec.rs:65:46: 65:55
        _6 = Eq(move _7, move _8);       // scope 0 at ui/packed/packed-struct-vec.rs:65:34: 65:55
        _0 = move _6;                    // scope 0 at ui/packed/packed-struct-vec.rs:65:9: 65:55
        goto -> bb3;                     // scope 0 at ui/packed/packed-struct-vec.rs:65:9: 65:55
    }

    bb3: {
        return;                          // scope 0 at ui/packed/packed-struct-vec.rs:66:6: 66:6
    }
}

fn <impl at ui/packed/packed-struct-vec.rs:69:1: 69:26>::fmt(_1: &Foo4C, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/packed/packed-struct-vec.rs:70:12: 70:17
    debug f => _2;                       // in scope 0 at ui/packed/packed-struct-vec.rs:70:19: 70:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/packed/packed-struct-vec.rs:70:46: 70:57
    let _3: u8;                          // in scope 0 at ui/packed/packed-struct-vec.rs:71:13: 71:16
    let mut _5: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/packed/packed-struct-vec.rs:74:9: 77:22
    let mut _6: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/packed/packed-struct-vec.rs:74:9: 76:32
    let mut _7: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/packed/packed-struct-vec.rs:74:9: 76:32
    let mut _8: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/packed/packed-struct-vec.rs:74:9: 75:32
    let mut _9: &mut std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/packed/packed-struct-vec.rs:74:9: 75:32
    let mut _10: std::fmt::DebugStruct<'_, '_>; // in scope 0 at ui/packed/packed-struct-vec.rs:74:9: 74:32
    let mut _11: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/packed/packed-struct-vec.rs:74:9: 74:32
    let mut _12: &str;                   // in scope 0 at ui/packed/packed-struct-vec.rs:74:24: 74:31
    let _13: &str;                       // in scope 0 at ui/packed/packed-struct-vec.rs:74:24: 74:31
    let mut _14: &str;                   // in scope 0 at ui/packed/packed-struct-vec.rs:75:20: 75:25
    let _15: &str;                       // in scope 0 at ui/packed/packed-struct-vec.rs:75:20: 75:25
    let mut _16: &dyn std::fmt::Debug;   // in scope 0 at ui/packed/packed-struct-vec.rs:75:27: 75:31
    let mut _17: &u8;                    // in scope 0 at ui/packed/packed-struct-vec.rs:75:27: 75:31
    let _18: &u8;                        // in scope 0 at ui/packed/packed-struct-vec.rs:75:27: 75:31
    let mut _19: &str;                   // in scope 0 at ui/packed/packed-struct-vec.rs:76:20: 76:25
    let _20: &str;                       // in scope 0 at ui/packed/packed-struct-vec.rs:76:20: 76:25
    let mut _21: &dyn std::fmt::Debug;   // in scope 0 at ui/packed/packed-struct-vec.rs:76:27: 76:31
    let mut _22: &u64;                   // in scope 0 at ui/packed/packed-struct-vec.rs:76:27: 76:31
    let _23: &u64;                       // in scope 0 at ui/packed/packed-struct-vec.rs:76:27: 76:31
    scope 1 {
        debug bar => _3;                 // in scope 1 at ui/packed/packed-struct-vec.rs:71:13: 71:16
        let _4: u64;                     // in scope 1 at ui/packed/packed-struct-vec.rs:72:13: 72:16
        scope 2 {
            debug baz => _4;             // in scope 2 at ui/packed/packed-struct-vec.rs:72:13: 72:16
        }
    }

    bb0: {
        _3 = ((*_1).0: u8);              // scope 0 at ui/packed/packed-struct-vec.rs:71:19: 71:27
        _4 = ((*_1).1: u64);             // scope 1 at ui/packed/packed-struct-vec.rs:72:19: 72:27
        _11 = &mut (*_2);                // scope 2 at ui/packed/packed-struct-vec.rs:74:9: 74:32
        _13 = const "Foo4C";             // scope 2 at ui/packed/packed-struct-vec.rs:74:24: 74:31
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:74:24: 74:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = _13;                       // scope 2 at ui/packed/packed-struct-vec.rs:74:24: 74:31
        _10 = Formatter::<'_>::debug_struct(move _11, move _12) -> bb1; // scope 2 at ui/packed/packed-struct-vec.rs:74:9: 74:32
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:74:11: 74:23
                                         // + literal: Const { ty: for<'b, 'a> fn(&'b mut Formatter<'_>, &'a str) -> DebugStruct<'b, '_> {Formatter::<'_>::debug_struct}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = &mut _10;                   // scope 2 at ui/packed/packed-struct-vec.rs:74:9: 75:32
        _15 = const "bar";               // scope 2 at ui/packed/packed-struct-vec.rs:75:20: 75:25
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:75:20: 75:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = _15;                       // scope 2 at ui/packed/packed-struct-vec.rs:75:20: 75:25
        _18 = &_3;                       // scope 2 at ui/packed/packed-struct-vec.rs:75:27: 75:31
        _17 = _18;                       // scope 2 at ui/packed/packed-struct-vec.rs:75:27: 75:31
        _16 = move _17 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/packed/packed-struct-vec.rs:75:27: 75:31
        _8 = DebugStruct::<'_, '_>::field(move _9, move _14, move _16) -> bb2; // scope 2 at ui/packed/packed-struct-vec.rs:74:9: 75:32
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:75:14: 75:19
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut DebugStruct<'_, '_>, &'b str, &'c (dyn Debug + 'c)) -> &'a mut DebugStruct<'_, '_> {DebugStruct::<'_, '_>::field}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &mut (*_8);                 // scope 2 at ui/packed/packed-struct-vec.rs:74:9: 76:32
        _20 = const "baz";               // scope 2 at ui/packed/packed-struct-vec.rs:76:20: 76:25
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:76:20: 76:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _19 = _20;                       // scope 2 at ui/packed/packed-struct-vec.rs:76:20: 76:25
        _23 = &_4;                       // scope 2 at ui/packed/packed-struct-vec.rs:76:27: 76:31
        _22 = _23;                       // scope 2 at ui/packed/packed-struct-vec.rs:76:27: 76:31
        _21 = move _22 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/packed/packed-struct-vec.rs:76:27: 76:31
        _6 = DebugStruct::<'_, '_>::field(move _7, move _19, move _21) -> bb3; // scope 2 at ui/packed/packed-struct-vec.rs:74:9: 76:32
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:76:14: 76:19
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut DebugStruct<'_, '_>, &'b str, &'c (dyn Debug + 'c)) -> &'a mut DebugStruct<'_, '_> {DebugStruct::<'_, '_>::field}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = &mut (*_6);                 // scope 2 at ui/packed/packed-struct-vec.rs:74:9: 77:22
        _0 = DebugStruct::<'_, '_>::finish(move _5) -> bb4; // scope 2 at ui/packed/packed-struct-vec.rs:74:9: 77:22
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:77:14: 77:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut DebugStruct<'_, '_>) -> Result<(), std::fmt::Error> {DebugStruct::<'_, '_>::finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/packed/packed-struct-vec.rs:78:6: 78:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/packed/packed-struct-vec.rs:81:15: 81:15
    let _1: [Foo1; 10];                  // in scope 0 at ui/packed/packed-struct-vec.rs:82:9: 82:14
    let mut _2: Foo1;                    // in scope 0 at ui/packed/packed-struct-vec.rs:82:18: 82:41
    let mut _3: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _5: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _9: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _10: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _11: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _15: std::ops::Range<usize>; // in scope 0 at ui/packed/packed-struct-vec.rs:87:14: 87:19
    let mut _16: std::ops::Range<usize>; // in scope 0 at ui/packed/packed-struct-vec.rs:87:14: 87:19
    let mut _18: std::option::Option<usize>; // in scope 0 at ui/packed/packed-struct-vec.rs:87:14: 87:19
    let mut _19: &mut std::ops::Range<usize>; // in scope 0 at ui/packed/packed-struct-vec.rs:87:14: 87:19
    let mut _20: &mut std::ops::Range<usize>; // in scope 0 at ui/packed/packed-struct-vec.rs:87:14: 87:19
    let mut _21: isize;                  // in scope 0 at ui/packed/packed-struct-vec.rs:87:5: 89:6
    let mut _23: (&Foo1, &Foo1);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _24: &Foo1;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _25: usize;                      // in scope 0 at ui/packed/packed-struct-vec.rs:88:26: 88:27
    let mut _26: usize;                  // in scope 0 at ui/packed/packed-struct-vec.rs:88:20: 88:28
    let mut _27: bool;                   // in scope 0 at ui/packed/packed-struct-vec.rs:88:20: 88:28
    let mut _28: &Foo1;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _33: &Foo1;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _34: &Foo1;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _36: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _37: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _38: &Foo1;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _39: &Foo1;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _40: &Foo1;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _41: &Foo1;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _43: std::slice::Iter<'_, Foo1>; // in scope 0 at ui/packed/packed-struct-vec.rs:91:17: 91:23
    let mut _44: &[Foo1; 10];            // in scope 0 at ui/packed/packed-struct-vec.rs:91:17: 91:23
    let mut _46: std::option::Option<&Foo1>; // in scope 0 at ui/packed/packed-struct-vec.rs:91:17: 91:23
    let mut _47: &mut std::slice::Iter<'_, Foo1>; // in scope 0 at ui/packed/packed-struct-vec.rs:91:17: 91:23
    let mut _48: &mut std::slice::Iter<'_, Foo1>; // in scope 0 at ui/packed/packed-struct-vec.rs:91:17: 91:23
    let mut _49: isize;                  // in scope 0 at ui/packed/packed-struct-vec.rs:91:5: 93:6
    let mut _51: (&Foo1, &Foo1);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _52: &Foo1;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _53: &Foo1;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _56: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _57: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _58: &Foo1;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _59: &Foo1;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _61: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _62: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _63: &Foo1;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _64: &Foo1;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _65: &Foo1;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _66: &Foo1;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _67: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _69: Foo2;                   // in scope 0 at ui/packed/packed-struct-vec.rs:95:18: 95:41
    let mut _70: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _71: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _72: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _76: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _77: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _78: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _82: std::ops::Range<usize>; // in scope 0 at ui/packed/packed-struct-vec.rs:100:14: 100:19
    let mut _83: std::ops::Range<usize>; // in scope 0 at ui/packed/packed-struct-vec.rs:100:14: 100:19
    let mut _85: std::option::Option<usize>; // in scope 0 at ui/packed/packed-struct-vec.rs:100:14: 100:19
    let mut _86: &mut std::ops::Range<usize>; // in scope 0 at ui/packed/packed-struct-vec.rs:100:14: 100:19
    let mut _87: &mut std::ops::Range<usize>; // in scope 0 at ui/packed/packed-struct-vec.rs:100:14: 100:19
    let mut _88: isize;                  // in scope 0 at ui/packed/packed-struct-vec.rs:100:5: 102:6
    let mut _90: (&Foo2, &Foo2);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _91: &Foo2;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _92: usize;                      // in scope 0 at ui/packed/packed-struct-vec.rs:101:26: 101:27
    let mut _93: usize;                  // in scope 0 at ui/packed/packed-struct-vec.rs:101:20: 101:28
    let mut _94: bool;                   // in scope 0 at ui/packed/packed-struct-vec.rs:101:20: 101:28
    let mut _95: &Foo2;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _98: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _99: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _100: &Foo2;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _101: &Foo2;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _103: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _104: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _105: &Foo2;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _106: &Foo2;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _107: &Foo2;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _108: &Foo2;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _109: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _110: std::slice::Iter<'_, Foo2>; // in scope 0 at ui/packed/packed-struct-vec.rs:104:17: 104:23
    let mut _111: &[Foo2; 10];           // in scope 0 at ui/packed/packed-struct-vec.rs:104:17: 104:23
    let mut _113: std::option::Option<&Foo2>; // in scope 0 at ui/packed/packed-struct-vec.rs:104:17: 104:23
    let mut _114: &mut std::slice::Iter<'_, Foo2>; // in scope 0 at ui/packed/packed-struct-vec.rs:104:17: 104:23
    let mut _115: &mut std::slice::Iter<'_, Foo2>; // in scope 0 at ui/packed/packed-struct-vec.rs:104:17: 104:23
    let mut _116: isize;                 // in scope 0 at ui/packed/packed-struct-vec.rs:104:5: 106:6
    let mut _118: (&Foo2, &Foo2);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _119: &Foo2;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _120: &Foo2;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _123: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _124: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _125: &Foo2;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _126: &Foo2;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _128: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _129: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _130: &Foo2;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _131: &Foo2;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _132: &Foo2;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _133: &Foo2;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _134: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _136: Foo4C;                 // in scope 0 at ui/packed/packed-struct-vec.rs:108:18: 108:42
    let mut _137: (&usize, &usize);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _138: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _139: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _143: (&usize, &usize);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _144: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _145: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _149: std::ops::Range<usize>; // in scope 0 at ui/packed/packed-struct-vec.rs:113:14: 113:19
    let mut _150: std::ops::Range<usize>; // in scope 0 at ui/packed/packed-struct-vec.rs:113:14: 113:19
    let mut _152: std::option::Option<usize>; // in scope 0 at ui/packed/packed-struct-vec.rs:113:14: 113:19
    let mut _153: &mut std::ops::Range<usize>; // in scope 0 at ui/packed/packed-struct-vec.rs:113:14: 113:19
    let mut _154: &mut std::ops::Range<usize>; // in scope 0 at ui/packed/packed-struct-vec.rs:113:14: 113:19
    let mut _155: isize;                 // in scope 0 at ui/packed/packed-struct-vec.rs:113:5: 115:6
    let mut _157: (&Foo4C, &Foo4C);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _158: &Foo4C;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _159: usize;                     // in scope 0 at ui/packed/packed-struct-vec.rs:114:26: 114:27
    let mut _160: usize;                 // in scope 0 at ui/packed/packed-struct-vec.rs:114:20: 114:28
    let mut _161: bool;                  // in scope 0 at ui/packed/packed-struct-vec.rs:114:20: 114:28
    let mut _162: &Foo4C;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _165: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _166: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _167: &Foo4C;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _168: &Foo4C;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _170: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _171: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _172: &Foo4C;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _173: &Foo4C;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _174: &Foo4C;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _175: &Foo4C;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _176: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _177: std::slice::Iter<'_, Foo4C>; // in scope 0 at ui/packed/packed-struct-vec.rs:117:17: 117:23
    let mut _178: &[Foo4C; 10];          // in scope 0 at ui/packed/packed-struct-vec.rs:117:17: 117:23
    let mut _180: std::option::Option<&Foo4C>; // in scope 0 at ui/packed/packed-struct-vec.rs:117:17: 117:23
    let mut _181: &mut std::slice::Iter<'_, Foo4C>; // in scope 0 at ui/packed/packed-struct-vec.rs:117:17: 117:23
    let mut _182: &mut std::slice::Iter<'_, Foo4C>; // in scope 0 at ui/packed/packed-struct-vec.rs:117:17: 117:23
    let mut _183: isize;                 // in scope 0 at ui/packed/packed-struct-vec.rs:117:5: 119:6
    let mut _185: (&Foo4C, &Foo4C);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _186: &Foo4C;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _187: &Foo4C;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _190: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _191: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _192: &Foo4C;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _193: &Foo4C;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _195: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _196: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _197: &Foo4C;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _198: &Foo4C;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _199: &Foo4C;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _200: &Foo4C;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _201: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _220: &Foo1;                 // in scope 0 at ui/packed/packed-struct-vec.rs:91:17: 91:23
    let mut _221: &Foo2;                 // in scope 0 at ui/packed/packed-struct-vec.rs:104:17: 104:23
    let mut _222: &Foo4C;                // in scope 0 at ui/packed/packed-struct-vec.rs:117:17: 117:23
    scope 1 {
        debug foo1s => _1;               // in scope 1 at ui/packed/packed-struct-vec.rs:82:9: 82:14
        let _6: &usize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _7: &usize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _13: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _17: std::ops::Range<usize>; // in scope 1 at ui/packed/packed-struct-vec.rs:87:14: 87:19
        let mut _45: std::slice::Iter<'_, Foo1>; // in scope 1 at ui/packed/packed-struct-vec.rs:91:17: 91:23
        let _68: [Foo2; 10];             // in scope 1 at ui/packed/packed-struct-vec.rs:95:9: 95:14
        let mut _216: &usize;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _217: &usize;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        let mut _218: &usize;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _219: &usize;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 2 {
            debug left_val => _6;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _7;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _8: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _8;        // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _12;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _13;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _14: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _14;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug iter => _17;           // in scope 6 at ui/packed/packed-struct-vec.rs:87:14: 87:19
            let _22: usize;              // in scope 6 at ui/packed/packed-struct-vec.rs:87:9: 87:10
            scope 7 {
                debug i => _22;          // in scope 7 at ui/packed/packed-struct-vec.rs:87:9: 87:10
                let _29: &Foo1;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _30: &Foo1;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _215: &Foo1;     // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 8 {
                    debug left_val => _29; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _30; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _35: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 9 {
                        debug kind => _35; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
        scope 10 {
            debug iter => _45;           // in scope 10 at ui/packed/packed-struct-vec.rs:91:17: 91:23
            let _50: Foo1;               // in scope 10 at ui/packed/packed-struct-vec.rs:91:10: 91:13
            scope 11 {
                debug foo => _50;        // in scope 11 at ui/packed/packed-struct-vec.rs:91:10: 91:13
                let _54: &Foo1;          // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _55: &Foo1;          // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _214: &Foo1;     // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 12 {
                    debug left_val => _54; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _55; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _60: core::panicking::AssertKind; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 13 {
                        debug kind => _60; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
        scope 14 {
            debug foo2s => _68;          // in scope 14 at ui/packed/packed-struct-vec.rs:95:9: 95:14
            let _73: &usize;             // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _74: &usize;             // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _79: &usize;             // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _80: &usize;             // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _84: std::ops::Range<usize>; // in scope 14 at ui/packed/packed-struct-vec.rs:100:14: 100:19
            let mut _112: std::slice::Iter<'_, Foo2>; // in scope 14 at ui/packed/packed-struct-vec.rs:104:17: 104:23
            let _135: [Foo4C; 10];       // in scope 14 at ui/packed/packed-struct-vec.rs:108:9: 108:14
            let mut _210: &usize;        // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _211: &usize;        // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
            let mut _212: &usize;        // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _213: &usize;        // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
            scope 15 {
                debug left_val => _73;   // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _74;  // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _75: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 16 {
                    debug kind => _75;   // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 17 {
                debug left_val => _79;   // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _80;  // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _81: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 18 {
                    debug kind => _81;   // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 19 {
                debug iter => _84;       // in scope 19 at ui/packed/packed-struct-vec.rs:100:14: 100:19
                let _89: usize;          // in scope 19 at ui/packed/packed-struct-vec.rs:100:9: 100:10
                scope 20 {
                    debug i => _89;      // in scope 20 at ui/packed/packed-struct-vec.rs:100:9: 100:10
                    let _96: &Foo2;      // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _97: &Foo2;      // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let mut _209: &Foo2; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 21 {
                        debug left_val => _96; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _97; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _102: core::panicking::AssertKind; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 22 {
                            debug kind => _102; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
            }
            scope 23 {
                debug iter => _112;      // in scope 23 at ui/packed/packed-struct-vec.rs:104:17: 104:23
                let _117: Foo2;          // in scope 23 at ui/packed/packed-struct-vec.rs:104:10: 104:13
                scope 24 {
                    debug foo => _117;   // in scope 24 at ui/packed/packed-struct-vec.rs:104:10: 104:13
                    let _121: &Foo2;     // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _122: &Foo2;     // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let mut _208: &Foo2; // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 25 {
                        debug left_val => _121; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _122; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _127: core::panicking::AssertKind; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 26 {
                            debug kind => _127; // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
            }
            scope 27 {
                debug foo4s => _135;     // in scope 27 at ui/packed/packed-struct-vec.rs:108:9: 108:14
                let _140: &usize;        // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _141: &usize;        // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _146: &usize;        // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _147: &usize;        // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _151: std::ops::Range<usize>; // in scope 27 at ui/packed/packed-struct-vec.rs:113:14: 113:19
                let mut _179: std::slice::Iter<'_, Foo4C>; // in scope 27 at ui/packed/packed-struct-vec.rs:117:17: 117:23
                let mut _204: &usize;    // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _205: &usize;    // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                let mut _206: &usize;    // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _207: &usize;    // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                scope 28 {
                    debug left_val => _140; // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _141; // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _142: core::panicking::AssertKind; // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 29 {
                        debug kind => _142; // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 30 {
                    debug left_val => _146; // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _147; // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _148: core::panicking::AssertKind; // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 31 {
                        debug kind => _148; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 32 {
                    debug iter => _151;  // in scope 32 at ui/packed/packed-struct-vec.rs:113:14: 113:19
                    let _156: usize;     // in scope 32 at ui/packed/packed-struct-vec.rs:113:9: 113:10
                    scope 33 {
                        debug i => _156; // in scope 33 at ui/packed/packed-struct-vec.rs:113:9: 113:10
                        let _163: &Foo4C; // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _164: &Foo4C; // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let mut _203: &Foo4C; // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        scope 34 {
                            debug left_val => _163; // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _164; // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _169: core::panicking::AssertKind; // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 35 {
                                debug kind => _169; // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                    }
                }
                scope 36 {
                    debug iter => _179;  // in scope 36 at ui/packed/packed-struct-vec.rs:117:17: 117:23
                    let _184: Foo4C;     // in scope 36 at ui/packed/packed-struct-vec.rs:117:10: 117:13
                    scope 37 {
                        debug foo => _184; // in scope 37 at ui/packed/packed-struct-vec.rs:117:10: 117:13
                        let _188: &Foo4C; // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _189: &Foo4C; // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let mut _202: &Foo4C; // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        scope 38 {
                            debug left_val => _188; // in scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _189; // in scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _194: core::panicking::AssertKind; // in scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 39 {
                                debug kind => _194; // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = Foo1 { bar: const 1_u8, baz: const 2_u64 }; // scope 0 at ui/packed/packed-struct-vec.rs:82:18: 82:41
        _1 = [move _2; 10];              // scope 0 at ui/packed/packed-struct-vec.rs:82:17: 82:46
        _219 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[17])) }
        _4 = _219;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _218 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[16])) }
        _5 = _218;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _5);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_3.0: &usize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_3.1: &usize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _217 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[15])) }
        _10 = _217;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _216 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[14])) }
        _11 = _216;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _9 = (move _10, move _11);       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_9.0: &usize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_9.1: &usize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = std::ops::Range::<usize> { start: const 0_usize, end: const 10_usize }; // scope 1 at ui/packed/packed-struct-vec.rs:87:14: 87:19
        _15 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _16) -> bb1; // scope 1 at ui/packed/packed-struct-vec.rs:87:14: 87:19
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:87:14: 87:19
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _17 = move _15;                  // scope 1 at ui/packed/packed-struct-vec.rs:87:14: 87:19
        goto -> bb2;                     // scope 6 at ui/packed/packed-struct-vec.rs:87:5: 89:6
    }

    bb2: {
        _20 = &mut _17;                  // scope 6 at ui/packed/packed-struct-vec.rs:87:14: 87:19
        _19 = &mut (*_20);               // scope 6 at ui/packed/packed-struct-vec.rs:87:14: 87:19
        _18 = <std::ops::Range<usize> as Iterator>::next(move _19) -> bb3; // scope 6 at ui/packed/packed-struct-vec.rs:87:14: 87:19
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:87:14: 87:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _21 = discriminant(_18);         // scope 6 at ui/packed/packed-struct-vec.rs:87:14: 87:19
        switchInt(move _21) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 6 at ui/packed/packed-struct-vec.rs:87:14: 87:19
    }

    bb4: {
        _22 = ((_18 as Some).0: usize);  // scope 6 at ui/packed/packed-struct-vec.rs:87:9: 87:10
        _25 = _22;                       // scope 7 at ui/packed/packed-struct-vec.rs:88:26: 88:27
        _26 = const 10_usize;            // scope 7 at ui/packed/packed-struct-vec.rs:88:20: 88:28
        _27 = Lt(_25, _26);              // scope 7 at ui/packed/packed-struct-vec.rs:88:20: 88:28
        assert(move _27, "index out of bounds: the length is {} but the index is {}", move _26, _25) -> bb7; // scope 7 at ui/packed/packed-struct-vec.rs:88:20: 88:28
    }

    bb5: {
        unreachable;                     // scope 6 at ui/packed/packed-struct-vec.rs:87:14: 87:19
    }

    bb6: {
        _44 = &_1;                       // scope 1 at ui/packed/packed-struct-vec.rs:91:17: 91:23
        _43 = <&[Foo1; 10] as IntoIterator>::into_iter(move _44) -> bb10; // scope 1 at ui/packed/packed-struct-vec.rs:91:17: 91:23
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:91:17: 91:23
                                         // + literal: Const { ty: fn(&[Foo1; 10]) -> <&[Foo1; 10] as IntoIterator>::IntoIter {<&[Foo1; 10] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb7: {
        _24 = &_1[_25];                  // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _215 = const _;                  // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Foo1, val: Unevaluated(main, [], Some(promoted[13])) }
        _28 = _215;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _23 = (move _24, move _28);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_23.0: &Foo1);            // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_23.1: &Foo1);            // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _33 = _29;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _34 = _30;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _32 = <Foo1 as PartialEq>::eq(move _33, move _34) -> bb8; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo1, &'b Foo1) -> bool {<Foo1 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _31 = Not(move _32);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _31) -> [0: bb2, otherwise: bb9]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _35 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = _29;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _39;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _30;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = _41;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _36 = core::panicking::assert_failed::<Foo1, Foo1>(move _37, move _38, move _40, move _42); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo1, &'b Foo1, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo1, Foo1>}, val: Value(<ZST>) }
    }

    bb10: {
        _45 = move _43;                  // scope 1 at ui/packed/packed-struct-vec.rs:91:17: 91:23
        goto -> bb11;                    // scope 10 at ui/packed/packed-struct-vec.rs:91:5: 93:6
    }

    bb11: {
        _48 = &mut _45;                  // scope 10 at ui/packed/packed-struct-vec.rs:91:17: 91:23
        _47 = &mut (*_48);               // scope 10 at ui/packed/packed-struct-vec.rs:91:17: 91:23
        _46 = <std::slice::Iter<'_, Foo1> as Iterator>::next(move _47) -> bb12; // scope 10 at ui/packed/packed-struct-vec.rs:91:17: 91:23
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:91:17: 91:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, Foo1>) -> Option<<std::slice::Iter<'_, Foo1> as Iterator>::Item> {<std::slice::Iter<'_, Foo1> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb12: {
        _49 = discriminant(_46);         // scope 10 at ui/packed/packed-struct-vec.rs:91:17: 91:23
        switchInt(move _49) -> [0: bb15, 1: bb13, otherwise: bb14]; // scope 10 at ui/packed/packed-struct-vec.rs:91:17: 91:23
    }

    bb13: {
        _220 = deref_copy ((_46 as Some).0: &Foo1); // scope 10 at ui/packed/packed-struct-vec.rs:91:10: 91:13
        _50 = (*_220);                   // scope 10 at ui/packed/packed-struct-vec.rs:91:10: 91:13
        _52 = &_50;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _214 = const _;                  // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Foo1, val: Unevaluated(main, [], Some(promoted[12])) }
        _53 = _214;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _51 = (move _52, move _53);      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _54 = (_51.0: &Foo1);            // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _55 = (_51.1: &Foo1);            // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _58 = _54;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _59 = _55;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _57 = <Foo1 as PartialEq>::eq(move _58, move _59) -> bb16; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo1, &'b Foo1) -> bool {<Foo1 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        unreachable;                     // scope 10 at ui/packed/packed-struct-vec.rs:91:17: 91:23
    }

    bb15: {
        _69 = Foo2 { bar: const 1_u8, baz: const 2_u64 }; // scope 1 at ui/packed/packed-struct-vec.rs:95:18: 95:41
        _68 = [move _69; 10];            // scope 1 at ui/packed/packed-struct-vec.rs:95:17: 95:46
        _213 = const _;                  // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[11])) }
        _71 = _213;                      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _212 = const _;                  // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[10])) }
        _72 = _212;                      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _70 = (move _71, move _72);      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _73 = (_70.0: &usize);           // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _74 = (_70.1: &usize);           // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _211 = const _;                  // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[9])) }
        _77 = _211;                      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _210 = const _;                  // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[8])) }
        _78 = _210;                      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _76 = (move _77, move _78);      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _79 = (_76.0: &usize);           // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _80 = (_76.1: &usize);           // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _83 = std::ops::Range::<usize> { start: const 0_usize, end: const 10_usize }; // scope 14 at ui/packed/packed-struct-vec.rs:100:14: 100:19
        _82 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _83) -> bb18; // scope 14 at ui/packed/packed-struct-vec.rs:100:14: 100:19
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:100:14: 100:19
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb16: {
        _56 = Not(move _57);             // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _56) -> [0: bb11, otherwise: bb17]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb17: {
        _60 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _62 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _64 = _54;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _63 = _64;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _66 = _55;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _65 = _66;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _67 = Option::<Arguments<'_>>::None; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _61 = core::panicking::assert_failed::<Foo1, Foo1>(move _62, move _63, move _65, move _67); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo1, &'b Foo1, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo1, Foo1>}, val: Value(<ZST>) }
    }

    bb18: {
        _84 = move _82;                  // scope 14 at ui/packed/packed-struct-vec.rs:100:14: 100:19
        goto -> bb19;                    // scope 19 at ui/packed/packed-struct-vec.rs:100:5: 102:6
    }

    bb19: {
        _87 = &mut _84;                  // scope 19 at ui/packed/packed-struct-vec.rs:100:14: 100:19
        _86 = &mut (*_87);               // scope 19 at ui/packed/packed-struct-vec.rs:100:14: 100:19
        _85 = <std::ops::Range<usize> as Iterator>::next(move _86) -> bb20; // scope 19 at ui/packed/packed-struct-vec.rs:100:14: 100:19
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:100:14: 100:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb20: {
        _88 = discriminant(_85);         // scope 19 at ui/packed/packed-struct-vec.rs:100:14: 100:19
        switchInt(move _88) -> [0: bb23, 1: bb21, otherwise: bb22]; // scope 19 at ui/packed/packed-struct-vec.rs:100:14: 100:19
    }

    bb21: {
        _89 = ((_85 as Some).0: usize);  // scope 19 at ui/packed/packed-struct-vec.rs:100:9: 100:10
        _92 = _89;                       // scope 20 at ui/packed/packed-struct-vec.rs:101:26: 101:27
        _93 = const 10_usize;            // scope 20 at ui/packed/packed-struct-vec.rs:101:20: 101:28
        _94 = Lt(_92, _93);              // scope 20 at ui/packed/packed-struct-vec.rs:101:20: 101:28
        assert(move _94, "index out of bounds: the length is {} but the index is {}", move _93, _92) -> bb24; // scope 20 at ui/packed/packed-struct-vec.rs:101:20: 101:28
    }

    bb22: {
        unreachable;                     // scope 19 at ui/packed/packed-struct-vec.rs:100:14: 100:19
    }

    bb23: {
        _111 = &_68;                     // scope 14 at ui/packed/packed-struct-vec.rs:104:17: 104:23
        _110 = <&[Foo2; 10] as IntoIterator>::into_iter(move _111) -> bb27; // scope 14 at ui/packed/packed-struct-vec.rs:104:17: 104:23
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:104:17: 104:23
                                         // + literal: Const { ty: fn(&[Foo2; 10]) -> <&[Foo2; 10] as IntoIterator>::IntoIter {<&[Foo2; 10] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb24: {
        _91 = &_68[_92];                 // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _209 = const _;                  // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Foo2, val: Unevaluated(main, [], Some(promoted[7])) }
        _95 = _209;                      // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _90 = (move _91, move _95);      // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _96 = (_90.0: &Foo2);            // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _97 = (_90.1: &Foo2);            // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _100 = _96;                      // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _101 = _97;                      // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _99 = <Foo2 as PartialEq>::eq(move _100, move _101) -> bb25; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo2, &'b Foo2) -> bool {<Foo2 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb25: {
        _98 = Not(move _99);             // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _98) -> [0: bb19, otherwise: bb26]; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb26: {
        _102 = const core::panicking::AssertKind::Eq; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _104 = const core::panicking::AssertKind::Eq; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _106 = _96;                      // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _105 = _106;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _108 = _97;                      // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _107 = _108;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _109 = Option::<Arguments<'_>>::None; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _103 = core::panicking::assert_failed::<Foo2, Foo2>(move _104, move _105, move _107, move _109); // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo2, &'b Foo2, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo2, Foo2>}, val: Value(<ZST>) }
    }

    bb27: {
        _112 = move _110;                // scope 14 at ui/packed/packed-struct-vec.rs:104:17: 104:23
        goto -> bb28;                    // scope 23 at ui/packed/packed-struct-vec.rs:104:5: 106:6
    }

    bb28: {
        _115 = &mut _112;                // scope 23 at ui/packed/packed-struct-vec.rs:104:17: 104:23
        _114 = &mut (*_115);             // scope 23 at ui/packed/packed-struct-vec.rs:104:17: 104:23
        _113 = <std::slice::Iter<'_, Foo2> as Iterator>::next(move _114) -> bb29; // scope 23 at ui/packed/packed-struct-vec.rs:104:17: 104:23
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:104:17: 104:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, Foo2>) -> Option<<std::slice::Iter<'_, Foo2> as Iterator>::Item> {<std::slice::Iter<'_, Foo2> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb29: {
        _116 = discriminant(_113);       // scope 23 at ui/packed/packed-struct-vec.rs:104:17: 104:23
        switchInt(move _116) -> [0: bb32, 1: bb30, otherwise: bb31]; // scope 23 at ui/packed/packed-struct-vec.rs:104:17: 104:23
    }

    bb30: {
        _221 = deref_copy ((_113 as Some).0: &Foo2); // scope 23 at ui/packed/packed-struct-vec.rs:104:10: 104:13
        _117 = (*_221);                  // scope 23 at ui/packed/packed-struct-vec.rs:104:10: 104:13
        _119 = &_117;                    // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _208 = const _;                  // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Foo2, val: Unevaluated(main, [], Some(promoted[6])) }
        _120 = _208;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _118 = (move _119, move _120);   // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _121 = (_118.0: &Foo2);          // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _122 = (_118.1: &Foo2);          // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _125 = _121;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _126 = _122;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _124 = <Foo2 as PartialEq>::eq(move _125, move _126) -> bb33; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo2, &'b Foo2) -> bool {<Foo2 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb31: {
        unreachable;                     // scope 23 at ui/packed/packed-struct-vec.rs:104:17: 104:23
    }

    bb32: {
        _136 = Foo4C { bar: const 1_u8, baz: const 2_u64 }; // scope 14 at ui/packed/packed-struct-vec.rs:108:18: 108:42
        _135 = [move _136; 10];          // scope 14 at ui/packed/packed-struct-vec.rs:108:17: 108:47
        _207 = const _;                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[5])) }
        _138 = _207;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _206 = const _;                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[4])) }
        _139 = _206;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _137 = (move _138, move _139);   // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _140 = (_137.0: &usize);         // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _141 = (_137.1: &usize);         // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _205 = const _;                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[3])) }
        _144 = _205;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _204 = const _;                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[2])) }
        _145 = _204;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _143 = (move _144, move _145);   // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _146 = (_143.0: &usize);         // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _147 = (_143.1: &usize);         // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _150 = std::ops::Range::<usize> { start: const 0_usize, end: const 10_usize }; // scope 27 at ui/packed/packed-struct-vec.rs:113:14: 113:19
        _149 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _150) -> bb35; // scope 27 at ui/packed/packed-struct-vec.rs:113:14: 113:19
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:113:14: 113:19
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb33: {
        _123 = Not(move _124);           // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _123) -> [0: bb28, otherwise: bb34]; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb34: {
        _127 = const core::panicking::AssertKind::Eq; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _129 = const core::panicking::AssertKind::Eq; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _131 = _121;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _130 = _131;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _133 = _122;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _132 = _133;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _134 = Option::<Arguments<'_>>::None; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _128 = core::panicking::assert_failed::<Foo2, Foo2>(move _129, move _130, move _132, move _134); // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo2, &'b Foo2, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo2, Foo2>}, val: Value(<ZST>) }
    }

    bb35: {
        _151 = move _149;                // scope 27 at ui/packed/packed-struct-vec.rs:113:14: 113:19
        goto -> bb36;                    // scope 32 at ui/packed/packed-struct-vec.rs:113:5: 115:6
    }

    bb36: {
        _154 = &mut _151;                // scope 32 at ui/packed/packed-struct-vec.rs:113:14: 113:19
        _153 = &mut (*_154);             // scope 32 at ui/packed/packed-struct-vec.rs:113:14: 113:19
        _152 = <std::ops::Range<usize> as Iterator>::next(move _153) -> bb37; // scope 32 at ui/packed/packed-struct-vec.rs:113:14: 113:19
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:113:14: 113:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb37: {
        _155 = discriminant(_152);       // scope 32 at ui/packed/packed-struct-vec.rs:113:14: 113:19
        switchInt(move _155) -> [0: bb40, 1: bb38, otherwise: bb39]; // scope 32 at ui/packed/packed-struct-vec.rs:113:14: 113:19
    }

    bb38: {
        _156 = ((_152 as Some).0: usize); // scope 32 at ui/packed/packed-struct-vec.rs:113:9: 113:10
        _159 = _156;                     // scope 33 at ui/packed/packed-struct-vec.rs:114:26: 114:27
        _160 = const 10_usize;           // scope 33 at ui/packed/packed-struct-vec.rs:114:20: 114:28
        _161 = Lt(_159, _160);           // scope 33 at ui/packed/packed-struct-vec.rs:114:20: 114:28
        assert(move _161, "index out of bounds: the length is {} but the index is {}", move _160, _159) -> bb41; // scope 33 at ui/packed/packed-struct-vec.rs:114:20: 114:28
    }

    bb39: {
        unreachable;                     // scope 32 at ui/packed/packed-struct-vec.rs:113:14: 113:19
    }

    bb40: {
        _178 = &_135;                    // scope 27 at ui/packed/packed-struct-vec.rs:117:17: 117:23
        _177 = <&[Foo4C; 10] as IntoIterator>::into_iter(move _178) -> bb44; // scope 27 at ui/packed/packed-struct-vec.rs:117:17: 117:23
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:117:17: 117:23
                                         // + literal: Const { ty: fn(&[Foo4C; 10]) -> <&[Foo4C; 10] as IntoIterator>::IntoIter {<&[Foo4C; 10] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb41: {
        _158 = &_135[_159];              // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _203 = const _;                  // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Foo4C, val: Unevaluated(main, [], Some(promoted[1])) }
        _162 = _203;                     // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _157 = (move _158, move _162);   // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _163 = (_157.0: &Foo4C);         // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _164 = (_157.1: &Foo4C);         // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _167 = _163;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _168 = _164;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _166 = <Foo4C as PartialEq>::eq(move _167, move _168) -> bb42; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo4C, &'b Foo4C) -> bool {<Foo4C as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb42: {
        _165 = Not(move _166);           // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _165) -> [0: bb36, otherwise: bb43]; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb43: {
        _169 = const core::panicking::AssertKind::Eq; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _171 = const core::panicking::AssertKind::Eq; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _173 = _163;                     // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _172 = _173;                     // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _175 = _164;                     // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _174 = _175;                     // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _176 = Option::<Arguments<'_>>::None; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _170 = core::panicking::assert_failed::<Foo4C, Foo4C>(move _171, move _172, move _174, move _176); // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo4C, &'b Foo4C, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo4C, Foo4C>}, val: Value(<ZST>) }
    }

    bb44: {
        _179 = move _177;                // scope 27 at ui/packed/packed-struct-vec.rs:117:17: 117:23
        goto -> bb45;                    // scope 36 at ui/packed/packed-struct-vec.rs:117:5: 119:6
    }

    bb45: {
        _182 = &mut _179;                // scope 36 at ui/packed/packed-struct-vec.rs:117:17: 117:23
        _181 = &mut (*_182);             // scope 36 at ui/packed/packed-struct-vec.rs:117:17: 117:23
        _180 = <std::slice::Iter<'_, Foo4C> as Iterator>::next(move _181) -> bb46; // scope 36 at ui/packed/packed-struct-vec.rs:117:17: 117:23
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:117:17: 117:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, Foo4C>) -> Option<<std::slice::Iter<'_, Foo4C> as Iterator>::Item> {<std::slice::Iter<'_, Foo4C> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb46: {
        _183 = discriminant(_180);       // scope 36 at ui/packed/packed-struct-vec.rs:117:17: 117:23
        switchInt(move _183) -> [0: bb49, 1: bb47, otherwise: bb48]; // scope 36 at ui/packed/packed-struct-vec.rs:117:17: 117:23
    }

    bb47: {
        _222 = deref_copy ((_180 as Some).0: &Foo4C); // scope 36 at ui/packed/packed-struct-vec.rs:117:10: 117:13
        _184 = (*_222);                  // scope 36 at ui/packed/packed-struct-vec.rs:117:10: 117:13
        _186 = &_184;                    // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _202 = const _;                  // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Foo4C, val: Unevaluated(main, [], Some(promoted[0])) }
        _187 = _202;                     // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _185 = (move _186, move _187);   // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _188 = (_185.0: &Foo4C);         // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _189 = (_185.1: &Foo4C);         // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _192 = _188;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _193 = _189;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _191 = <Foo4C as PartialEq>::eq(move _192, move _193) -> bb50; // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo4C, &'b Foo4C) -> bool {<Foo4C as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb48: {
        unreachable;                     // scope 36 at ui/packed/packed-struct-vec.rs:117:17: 117:23
    }

    bb49: {
        return;                          // scope 0 at ui/packed/packed-struct-vec.rs:120:2: 120:2
    }

    bb50: {
        _190 = Not(move _191);           // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _190) -> [0: bb45, otherwise: bb51]; // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb51: {
        _194 = const core::panicking::AssertKind::Eq; // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _196 = const core::panicking::AssertKind::Eq; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _198 = _188;                     // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _197 = _198;                     // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _200 = _189;                     // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _199 = _200;                     // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _201 = Option::<Arguments<'_>>::None; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _195 = core::panicking::assert_failed::<Foo4C, Foo4C>(move _196, move _197, move _199, move _201); // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo4C, &'b Foo4C, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo4C, Foo4C>}, val: Value(<ZST>) }
    }
}

promoted[0] in main: &Foo4C = {
    let mut _0: &Foo4C;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Foo4C;                   // in scope 0 at ui/packed/packed-struct-vec.rs:118:25: 118:49

    bb0: {
        _1 = Foo4C { bar: const 1_u8, baz: const 2_u64 }; // scope 0 at ui/packed/packed-struct-vec.rs:118:25: 118:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &Foo4C = {
    let mut _0: &Foo4C;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Foo4C;                   // in scope 0 at ui/packed/packed-struct-vec.rs:114:30: 114:53

    bb0: {
        _1 = Foo4C { bar: const 1_u8, baz: const 2_u64 }; // scope 0 at ui/packed/packed-struct-vec.rs:114:30: 114:53
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-vec.rs:111:47: 111:50

    bb0: {
        _1 = const 120_usize;            // scope 0 at ui/packed/packed-struct-vec.rs:111:47: 111:50
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-vec.rs:111:16: 111:45

    bb0: {
        _1 = std::mem::size_of::<[Foo4C; 10]>() -> bb1; // scope 0 at ui/packed/packed-struct-vec.rs:111:16: 111:45
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:111:16: 111:43
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<[Foo4C; 10]>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-vec.rs:110:48: 110:49

    bb0: {
        _1 = const 4_usize;              // scope 0 at ui/packed/packed-struct-vec.rs:110:48: 110:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-vec.rs:110:16: 110:46

    bb0: {
        _1 = align_of::<[Foo4C; 10]>() -> bb1; // scope 0 at ui/packed/packed-struct-vec.rs:110:16: 110:46
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:110:16: 110:44
                                         // + literal: Const { ty: fn() -> usize {align_of::<[Foo4C; 10]>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[6] in main: &Foo2 = {
    let mut _0: &Foo2;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Foo2;                    // in scope 0 at ui/packed/packed-struct-vec.rs:105:25: 105:48

    bb0: {
        _1 = Foo2 { bar: const 1_u8, baz: const 2_u64 }; // scope 0 at ui/packed/packed-struct-vec.rs:105:25: 105:48
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[7] in main: &Foo2 = {
    let mut _0: &Foo2;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Foo2;                    // in scope 0 at ui/packed/packed-struct-vec.rs:101:30: 101:52

    bb0: {
        _1 = Foo2 { bar: const 1_u8, baz: const 2_u64 }; // scope 0 at ui/packed/packed-struct-vec.rs:101:30: 101:52
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[8] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-vec.rs:98:46: 98:49

    bb0: {
        _1 = const 100_usize;            // scope 0 at ui/packed/packed-struct-vec.rs:98:46: 98:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[9] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-vec.rs:98:16: 98:44

    bb0: {
        _1 = std::mem::size_of::<[Foo2; 10]>() -> bb1; // scope 0 at ui/packed/packed-struct-vec.rs:98:16: 98:44
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:98:16: 98:42
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<[Foo2; 10]>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[10] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-vec.rs:97:47: 97:48

    bb0: {
        _1 = const 2_usize;              // scope 0 at ui/packed/packed-struct-vec.rs:97:47: 97:48
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[11] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-vec.rs:97:16: 97:45

    bb0: {
        _1 = align_of::<[Foo2; 10]>() -> bb1; // scope 0 at ui/packed/packed-struct-vec.rs:97:16: 97:45
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:97:16: 97:43
                                         // + literal: Const { ty: fn() -> usize {align_of::<[Foo2; 10]>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[12] in main: &Foo1 = {
    let mut _0: &Foo1;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Foo1;                    // in scope 0 at ui/packed/packed-struct-vec.rs:92:25: 92:48

    bb0: {
        _1 = Foo1 { bar: const 1_u8, baz: const 2_u64 }; // scope 0 at ui/packed/packed-struct-vec.rs:92:25: 92:48
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[13] in main: &Foo1 = {
    let mut _0: &Foo1;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Foo1;                    // in scope 0 at ui/packed/packed-struct-vec.rs:88:30: 88:52

    bb0: {
        _1 = Foo1 { bar: const 1_u8, baz: const 2_u64 }; // scope 0 at ui/packed/packed-struct-vec.rs:88:30: 88:52
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[14] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-vec.rs:85:46: 85:48

    bb0: {
        _1 = const 90_usize;             // scope 0 at ui/packed/packed-struct-vec.rs:85:46: 85:48
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[15] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-vec.rs:85:16: 85:44

    bb0: {
        _1 = std::mem::size_of::<[Foo1; 10]>() -> bb1; // scope 0 at ui/packed/packed-struct-vec.rs:85:16: 85:44
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:85:16: 85:42
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<[Foo1; 10]>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[16] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-vec.rs:84:47: 84:48

    bb0: {
        _1 = const 1_usize;              // scope 0 at ui/packed/packed-struct-vec.rs:84:47: 84:48
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[17] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-vec.rs:84:16: 84:45

    bb0: {
        _1 = align_of::<[Foo1; 10]>() -> bb1; // scope 0 at ui/packed/packed-struct-vec.rs:84:16: 84:45
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-vec.rs:84:16: 84:43
                                         // + literal: Const { ty: fn() -> usize {align_of::<[Foo1; 10]>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/packed/packed-struct-vec.rs:82:43: 82:45

    bb0: {
        _0 = const 10_usize;             // scope 0 at ui/packed/packed-struct-vec.rs:82:43: 82:45
        return;                          // scope 0 at ui/packed/packed-struct-vec.rs:82:43: 82:45
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/packed/packed-struct-vec.rs:84:39: 84:41

    bb0: {
        _0 = const 10_usize;             // scope 0 at ui/packed/packed-struct-vec.rs:84:39: 84:41
        return;                          // scope 0 at ui/packed/packed-struct-vec.rs:84:39: 84:41
    }
}

main::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/packed/packed-struct-vec.rs:85:38: 85:40

    bb0: {
        _0 = const 10_usize;             // scope 0 at ui/packed/packed-struct-vec.rs:85:38: 85:40
        return;                          // scope 0 at ui/packed/packed-struct-vec.rs:85:38: 85:40
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/packed/packed-struct-vec.rs:95:43: 95:45

    bb0: {
        _0 = const 10_usize;             // scope 0 at ui/packed/packed-struct-vec.rs:95:43: 95:45
        return;                          // scope 0 at ui/packed/packed-struct-vec.rs:95:43: 95:45
    }
}

main::{constant#5}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/packed/packed-struct-vec.rs:97:39: 97:41

    bb0: {
        _0 = const 10_usize;             // scope 0 at ui/packed/packed-struct-vec.rs:97:39: 97:41
        return;                          // scope 0 at ui/packed/packed-struct-vec.rs:97:39: 97:41
    }
}

main::{constant#6}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/packed/packed-struct-vec.rs:98:38: 98:40

    bb0: {
        _0 = const 10_usize;             // scope 0 at ui/packed/packed-struct-vec.rs:98:38: 98:40
        return;                          // scope 0 at ui/packed/packed-struct-vec.rs:98:38: 98:40
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/packed/packed-struct-vec.rs:108:44: 108:46

    bb0: {
        _0 = const 10_usize;             // scope 0 at ui/packed/packed-struct-vec.rs:108:44: 108:46
        return;                          // scope 0 at ui/packed/packed-struct-vec.rs:108:44: 108:46
    }
}

main::{constant#7}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/packed/packed-struct-vec.rs:110:40: 110:42

    bb0: {
        _0 = const 10_usize;             // scope 0 at ui/packed/packed-struct-vec.rs:110:40: 110:42
        return;                          // scope 0 at ui/packed/packed-struct-vec.rs:110:40: 110:42
    }
}

main::{constant#8}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/packed/packed-struct-vec.rs:111:39: 111:41

    bb0: {
        _0 = const 10_usize;             // scope 0 at ui/packed/packed-struct-vec.rs:111:39: 111:41
        return;                          // scope 0 at ui/packed/packed-struct-vec.rs:111:39: 111:41
    }
}
