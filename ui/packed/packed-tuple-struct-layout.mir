// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
S4::1::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/packed/packed-tuple-struct-layout.rs:6:19: 6:20

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/packed/packed-tuple-struct-layout.rs:6:19: 6:20
        return;                          // scope 0 at ui/packed/packed-tuple-struct-layout.rs:6:19: 6:20
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/packed/packed-tuple-struct-layout.rs:12:15: 12:15
    let mut _2: [u8; 3];                 // in scope 0 at ui/packed/packed-tuple-struct-layout.rs:14:24: 14:31
    let mut _4: S4;                      // in scope 0 at ui/packed/packed-tuple-struct-layout.rs:15:47: 15:49
    let mut _5: (&[u8; 4], &[u8; 4]);    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &[u8; 4];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _7: &[u8; 4];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: &[u8; 4];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: &[u8; 4];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &[u8; 4];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &[u8; 4];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &[u8; 4];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &[u8; 4];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: S5;                     // in scope 0 at ui/packed/packed-tuple-struct-layout.rs:19:47: 19:49
    let mut _25: (&[u8; 5], &[u8; 5]);   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _26: &[u8; 5];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _27: &[u8; 5];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _32: &[u8; 5];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _33: &[u8; 5];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _35: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _36: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _37: &[u8; 5];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _38: &[u8; 5];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _39: &[u8; 5];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _40: &[u8; 5];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        let _1: S4;                      // in scope 1 at ui/packed/packed-tuple-struct-layout.rs:14:13: 14:15
        scope 2 {
            debug s4 => _1;              // in scope 2 at ui/packed/packed-tuple-struct-layout.rs:14:13: 14:15
            let _3: [u8; 4];             // in scope 2 at ui/packed/packed-tuple-struct-layout.rs:15:13: 15:19
            scope 3 {
                debug transd => _3;      // in scope 3 at ui/packed/packed-tuple-struct-layout.rs:15:13: 15:19
                let _8: &[u8; 4];        // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _9: &[u8; 4];        // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _22: S5;             // in scope 3 at ui/packed/packed-tuple-struct-layout.rs:18:13: 18:15
                let mut _43: &[u8; 4];   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 4 {
                    debug left_val => _8; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _9; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _14: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _14; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 6 {
                    debug s5 => _22;     // in scope 6 at ui/packed/packed-tuple-struct-layout.rs:18:13: 18:15
                    let _23: [u8; 5];    // in scope 6 at ui/packed/packed-tuple-struct-layout.rs:19:13: 19:19
                    scope 7 {
                        debug transd => _23; // in scope 7 at ui/packed/packed-tuple-struct-layout.rs:19:13: 19:19
                        let _28: &[u8; 5]; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _29: &[u8; 5]; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let mut _42: &[u8; 5]; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        scope 8 {
                            debug left_val => _28; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _29; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _34: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 9 {
                                debug kind => _34; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = [const 2_u8, const 3_u8, const 4_u8]; // scope 1 at ui/packed/packed-tuple-struct-layout.rs:14:24: 14:31
        _1 = S4(const 1_u8, move _2);    // scope 1 at ui/packed/packed-tuple-struct-layout.rs:14:18: 14:32
        _4 = move _1;                    // scope 2 at ui/packed/packed-tuple-struct-layout.rs:15:47: 15:49
        _3 = transmute::<S4, [u8; 4]>(move _4) -> bb1; // scope 2 at ui/packed/packed-tuple-struct-layout.rs:15:32: 15:50
                                         // mir::Constant
                                         // + span: ui/packed/packed-tuple-struct-layout.rs:15:32: 15:46
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(S4) -> [u8; 4] {transmute::<S4, [u8; 4]>}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_3;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _43 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[u8; 4], val: Unevaluated(main, [], Some(promoted[1])) }
        _7 = _43;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _7);         // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_5.0: &[u8; 4]);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_5.1: &[u8; 4]);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = _8;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = _9;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = <[u8; 4] as PartialEq>::eq(move _12, move _13) -> bb2; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [u8; 4], &'b [u8; 4]) -> bool {<[u8; 4] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = Not(move _11);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb4, otherwise: bb3]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _14 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<[u8; 4], [u8; 4]>(move _16, move _17, move _19, move _21); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [u8; 4], &'b [u8; 4], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[u8; 4], [u8; 4]>}, val: Value(<ZST>) }
    }

    bb4: {
        _22 = S5(const 1_u8, const 4278190335_u32); // scope 3 at ui/packed/packed-tuple-struct-layout.rs:18:18: 18:38
        _24 = move _22;                  // scope 6 at ui/packed/packed-tuple-struct-layout.rs:19:47: 19:49
        _23 = transmute::<S5, [u8; 5]>(move _24) -> bb5; // scope 6 at ui/packed/packed-tuple-struct-layout.rs:19:32: 19:50
                                         // mir::Constant
                                         // + span: ui/packed/packed-tuple-struct-layout.rs:19:32: 19:46
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(S5) -> [u8; 5] {transmute::<S5, [u8; 5]>}, val: Value(<ZST>) }
    }

    bb5: {
        _26 = &_23;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _42 = const _;                   // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[u8; 5], val: Unevaluated(main, [], Some(promoted[0])) }
        _27 = _42;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _25 = (move _26, move _27);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _28 = (_25.0: &[u8; 5]);         // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _29 = (_25.1: &[u8; 5]);         // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _32 = _28;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _33 = _29;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _31 = <[u8; 5] as PartialEq>::eq(move _32, move _33) -> bb6; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [u8; 5], &'b [u8; 5]) -> bool {<[u8; 5] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _30 = Not(move _31);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _30) -> [0: bb8, otherwise: bb7]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _34 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = _28;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _38;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _29;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = _40;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _35 = core::panicking::assert_failed::<[u8; 5], [u8; 5]>(move _36, move _37, move _39, move _41); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [u8; 5], &'b [u8; 5], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[u8; 5], [u8; 5]>}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/packed/packed-tuple-struct-layout.rs:23:2: 23:2
    }
}

promoted[0] in main: &[u8; 5] = {
    let mut _0: &[u8; 5];                // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [u8; 5];                 // in scope 0 at ui/packed/packed-tuple-struct-layout.rs:21:28: 21:49

    bb0: {
        _1 = [const 1_u8, const u8::MAX, const 0_u8, const 0_u8, const u8::MAX]; // scope 0 at ui/packed/packed-tuple-struct-layout.rs:21:28: 21:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[u8; 4] = {
    let mut _0: &[u8; 4];                // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [u8; 4];                 // in scope 0 at ui/packed/packed-tuple-struct-layout.rs:16:28: 16:40

    bb0: {
        _1 = [const 1_u8, const 2_u8, const 3_u8, const 4_u8]; // scope 0 at ui/packed/packed-tuple-struct-layout.rs:16:28: 16:40
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/packed/packed-tuple-struct-layout.rs:15:27: 15:28

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/packed/packed-tuple-struct-layout.rs:15:27: 15:28
        return;                          // scope 0 at ui/packed/packed-tuple-struct-layout.rs:15:27: 15:28
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/packed/packed-tuple-struct-layout.rs:19:27: 19:28

    bb0: {
        _0 = const 5_usize;              // scope 0 at ui/packed/packed-tuple-struct-layout.rs:19:27: 19:28
        return;                          // scope 0 at ui/packed/packed-tuple-struct-layout.rs:19:27: 19:28
    }
}

fn S4(_1: u8, _2: [u8; 3]) -> S4 {
    let mut _0: S4;                      // return place in scope 0 at ui/packed/packed-tuple-struct-layout.rs:6:1: 6:10

    bb0: {
        _0 = S4(move _1, move _2);       // scope 0 at ui/packed/packed-tuple-struct-layout.rs:6:1: 6:10
        return;                          // scope 0 at ui/packed/packed-tuple-struct-layout.rs:6:1: 6:10
    }
}

// MIR FOR CTFE
fn S4(_1: u8, _2: [u8; 3]) -> S4 {
    let mut _0: S4;                      // return place in scope 0 at ui/packed/packed-tuple-struct-layout.rs:6:1: 6:10

    bb0: {
        _0 = S4(move _1, move _2);       // scope 0 at ui/packed/packed-tuple-struct-layout.rs:6:1: 6:10
        return;                          // scope 0 at ui/packed/packed-tuple-struct-layout.rs:6:1: 6:10
    }
}

fn S5(_1: u8, _2: u32) -> S5 {
    let mut _0: S5;                      // return place in scope 0 at ui/packed/packed-tuple-struct-layout.rs:10:1: 10:10

    bb0: {
        _0 = S5(move _1, move _2);       // scope 0 at ui/packed/packed-tuple-struct-layout.rs:10:1: 10:10
        return;                          // scope 0 at ui/packed/packed-tuple-struct-layout.rs:10:1: 10:10
    }
}

// MIR FOR CTFE
fn S5(_1: u8, _2: u32) -> S5 {
    let mut _0: S5;                      // return place in scope 0 at ui/packed/packed-tuple-struct-layout.rs:10:1: 10:10

    bb0: {
        _0 = S5(move _1, move _2);       // scope 0 at ui/packed/packed-tuple-struct-layout.rs:10:1: 10:10
        return;                          // scope 0 at ui/packed/packed-tuple-struct-layout.rs:10:1: 10:10
    }
}
