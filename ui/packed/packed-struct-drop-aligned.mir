// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn check_align(_1: *const Aligned<'_>) -> () {
    debug ptr => _1;
    let mut _0: ();
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let _8: &usize;
    let _9: &usize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: &usize;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }

    bb0: {
        _5 = _1 as usize (PointerExposeAddress);
        _6 = align_of::<Aligned<'_>>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = Eq(_6, const 0_usize);
        assert(!move _7, "attempt to calculate the remainder of `{}` with a divisor of zero", _5) -> [success: bb2, unwind continue];
    }

    bb2: {
        _4 = Rem(move _5, move _6);
        _3 = &_4;
        _17 = const _;
        _2 = (move _3, _17);
        _8 = (_2.0: &usize);
        _9 = (_2.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in check_align: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

fn <impl at ui/packed/packed-struct-drop-aligned.rs:19:1: 19:30>::drop(_1: &mut Aligned<'_>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: *const Aligned<'_>;
    let _4: ();
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: &std::cell::Cell<usize>;
    let mut _8: &std::cell::Cell<usize>;

    bb0: {
        _3 = &raw const (*_1);
        _2 = check_align(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = deref_copy ((*_1).0: &std::cell::Cell<usize>);
        _8 = deref_copy ((*_1).0: &std::cell::Cell<usize>);
        _6 = Cell::<usize>::get(_8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = Add(move _6, const 1_usize);
        _4 = Cell::<usize>::set(_7, move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &std::cell::Cell<usize>;
    let _2: std::cell::Cell<usize>;
    let mut _4: NotCopy;
    let mut _5: Aligned<'_>;
    let mut _6: Aligned<'_>;
    let mut _7: (&usize, &usize);
    let mut _8: &usize;
    let _9: usize;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: usize;
    let mut _15: usize;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: (&usize, &usize);
    let mut _20: &usize;
    let _21: usize;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: usize;
    let mut _27: usize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let _32: std::cell::Cell<usize>;
    let mut _34: &&std::cell::Cell<usize>;
    let _35: std::ops::GeneratorState<(), ()>;
    let mut _36: std::pin::Pin<&mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]>;
    let mut _37: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _38: (&usize, &usize);
    let mut _39: &usize;
    let _40: usize;
    let mut _41: &std::cell::Cell<usize>;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: usize;
    let mut _47: usize;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let _51: ();
    let mut _52: [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _53: (&usize, &usize);
    let mut _54: &usize;
    let _55: usize;
    let mut _56: &std::cell::Cell<usize>;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: usize;
    let mut _62: usize;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _70: bool;
    let mut _71: Aligned<'_>;
    scope 1 {
        debug drop_count => _1;
        let mut _3: Packed<'_>;
        let _22: &usize;
        let _23: &usize;
        let _31: &std::cell::Cell<usize>;
        let mut _68: &usize;
        scope 2 {
            debug p => _3;
            let _10: &usize;
            let _11: &usize;
            let mut _69: &usize;
            scope 3 {
                debug left_val => _10;
                debug right_val => _11;
                let _16: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _16;
                }
            }
        }
        scope 5 {
            debug left_val => _22;
            debug right_val => _23;
            let _28: core::panicking::AssertKind;
            scope 6 {
                debug kind => _28;
            }
        }
        scope 7 {
            debug drop_count => _31;
            let mut _33: [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
            scope 8 {
                debug g => _33;
                let _42: &usize;
                let _43: &usize;
                let _57: &usize;
                let _58: &usize;
                let mut _66: &usize;
                let mut _67: &usize;
                scope 9 {
                    debug left_val => _42;
                    debug right_val => _43;
                    let _48: core::panicking::AssertKind;
                    scope 10 {
                        debug kind => _48;
                    }
                }
                scope 11 {
                    debug left_val => _57;
                    debug right_val => _58;
                    let _63: core::panicking::AssertKind;
                    scope 12 {
                        debug kind => _63;
                    }
                }
            }
        }
    }

    bb0: {
        _70 = const false;
        _2 = Cell::<usize>::new(const 0_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = &_2;
        _4 = NotCopy(const 0_u8);
        _5 = Aligned::<'_> { drop_count: _1 };
        _3 = Packed::<'_>(move _4, move _5);
        _6 = Aligned::<'_> { drop_count: _1 };
        _71 = move (_3.1: Aligned<'_>);
        drop(_71) -> [return: bb24, unwind: bb2];
    }

    bb2 (cleanup): {
        (_3.1: Aligned<'_>) = move _6;
        goto -> bb20;
    }

    bb3: {
        _8 = &_9;
        _69 = const _;
        _7 = (move _8, _69);
        _10 = (_7.0: &usize);
        _11 = (_7.1: &usize);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<usize, usize>(move _16, _10, _11, move _18) -> bb20;
    }

    bb5: {
        drop(_3) -> [return: bb6, unwind continue];
    }

    bb6: {
        _21 = Cell::<usize>::get(_1) -> [return: bb7, unwind continue];
    }

    bb7: {
        _20 = &_21;
        _68 = const _;
        _19 = (move _20, _68);
        _22 = (_19.0: &usize);
        _23 = (_19.1: &usize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<usize, usize>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb9: {
        _32 = Cell::<usize>::new(const 0_usize) -> [return: bb10, unwind continue];
    }

    bb10: {
        _31 = &_32;
        _34 = &_31;
        _70 = const true;
        _33 = [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19 (#0)] { drop_count: move _34 };
        _37 = &mut _33;
        _36 = Pin::<&mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]>::new(move _37) -> [return: bb11, unwind: bb23];
    }

    bb11: {
        _35 = <[generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19] as Generator>::resume(move _36, const ()) -> [return: bb12, unwind: bb23];
    }

    bb12: {
        _41 = _31;
        _40 = Cell::<usize>::get(move _41) -> [return: bb13, unwind: bb23];
    }

    bb13: {
        _39 = &_40;
        _67 = const _;
        _38 = (move _39, _67);
        _42 = (_38.0: &usize);
        _43 = (_38.1: &usize);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<usize, usize>(move _48, _42, _43, move _50) -> bb23;
    }

    bb15: {
        _70 = const false;
        _52 = move _33;
        _51 = std::mem::drop::<[generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]>(move _52) -> [return: bb16, unwind: bb23];
    }

    bb16: {
        _56 = _31;
        _55 = Cell::<usize>::get(move _56) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        _54 = &_55;
        _66 = const _;
        _53 = (move _54, _66);
        _57 = (_53.0: &usize);
        _58 = (_53.1: &usize);
        _61 = (*_57);
        _62 = (*_58);
        _60 = Eq(move _61, move _62);
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _63 = core::panicking::AssertKind::Eq;
        _65 = Option::<Arguments<'_>>::None;
        _64 = core::panicking::assert_failed::<usize, usize>(move _63, _57, _58, move _65) -> bb23;
    }

    bb19: {
        _70 = const false;
        return;
    }

    bb20 (cleanup): {
        drop(_3) -> [return: bb21, unwind terminate];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        drop(_33) -> [return: bb21, unwind terminate];
    }

    bb23 (cleanup): {
        switchInt(_70) -> [0: bb21, otherwise: bb22];
    }

    bb24: {
        (_3.1: Aligned<'_>) = move _6;
        _9 = Cell::<usize>::get(_1) -> [return: bb3, unwind: bb20];
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]>, _2: ()) -> GeneratorState<(), ()> {
    debug drop_count => (*((*(_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19])).0: &&std::cell::Cell<usize>));
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: NotCopy;
    let mut _4: Aligned<'_>;
    let mut _5: Aligned<'_>;
    let mut _6: (&usize, &usize);
    let mut _7: &usize;
    let _8: usize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let _18: ();
    let mut _19: NotCopy;
    let mut _20: ();
    let mut _22: &&std::cell::Cell<usize>;
    let mut _23: &std::cell::Cell<usize>;
    let mut _24: &&std::cell::Cell<usize>;
    let mut _25: &std::cell::Cell<usize>;
    let mut _26: &&std::cell::Cell<usize>;
    let mut _27: &std::cell::Cell<usize>;
    let mut _28: Aligned<'_>;
    let mut _29: Aligned<'_>;
    let mut _30: Aligned<'_>;
    let mut _31: ();
    let mut _32: u32;
    let mut _33: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _34: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _35: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _36: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _37: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _38: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _39: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _40: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _41: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _42: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _43: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _44: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _45: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    let mut _46: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19];
    scope 1 {
        debug p => (((*(_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19])) as variant#3).0: Packed<'_>);
        scope 2 {
            let _9: &usize;
            let _10: &usize;
            let mut _21: &usize;
            scope 3 {
                debug left_val => _9;
                debug right_val => _10;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
        }
    }

    bb0: {
        _33 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        _32 = discriminant((*_33));
        switchInt(move _32) -> [0: bb1, 1: bb13, 2: bb12, 3: bb11, otherwise: bb14];
    }

    bb1: {
        _3 = NotCopy(const 0_u8);
        _34 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        _22 = deref_copy ((*_34).0: &&std::cell::Cell<usize>);
        _23 = deref_copy (*_22);
        _4 = Aligned::<'_> { drop_count: _23 };
        _35 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        (((*_35) as variant#3).0: Packed<'_>) = Packed::<'_>(move _3, move _4);
        _36 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        _24 = deref_copy ((*_36).0: &&std::cell::Cell<usize>);
        _25 = deref_copy (*_24);
        _5 = Aligned::<'_> { drop_count: _25 };
        _37 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        _28 = move ((((*_37) as variant#3).0: Packed<'_>).1: Aligned<'_>);
        drop(_28) -> [return: bb9, unwind: bb2];
    }

    bb2 (cleanup): {
        _39 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        ((((*_39) as variant#3).0: Packed<'_>).1: Aligned<'_>) = move _5;
        goto -> bb8;
    }

    bb3: {
        _7 = &_8;
        _21 = const _;
        _6 = (move _7, _21);
        _9 = (_6.0: &usize);
        _10 = (_6.1: &usize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<usize, usize>(move _15, _9, _10, move _17) -> bb8;
    }

    bb5: {
        _41 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        _19 = move ((((*_41) as variant#3).0: Packed<'_>).0: NotCopy);
        _18 = std::mem::drop::<NotCopy>(move _19) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        _20 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _20);
        _42 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        discriminant((*_42)) = 3;
        return;
    }

    bb7 (cleanup): {
        _46 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        discriminant((*_46)) = 2;
        resume;
    }

    bb8 (cleanup): {
        _45 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        _30 = move ((((*_45) as variant#3).0: Packed<'_>).1: Aligned<'_>);
        drop(_30) -> [return: bb7, unwind terminate];
    }

    bb9: {
        _38 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        ((((*_38) as variant#3).0: Packed<'_>).1: Aligned<'_>) = move _5;
        _40 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        _26 = deref_copy ((*_40).0: &&std::cell::Cell<usize>);
        _27 = deref_copy (*_26);
        _8 = Cell::<usize>::get(_27) -> [return: bb3, unwind: bb8];
    }

    bb10: {
        _0 = GeneratorState::<(), ()>::Complete(move _31);
        _43 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        discriminant((*_43)) = 1;
        return;
    }

    bb11: {
        _31 = const ();
        _44 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]);
        _29 = move ((((*_44) as variant#3).0: Packed<'_>).1: Aligned<'_>);
        drop(_29) -> [return: bb10, unwind: bb7];
    }

    bb12: {
        assert(const false, "generator resumed after panicking") -> [success: bb12, unwind continue];
    }

    bb13: {
        assert(const false, "generator resumed after completion") -> [success: bb13, unwind continue];
    }

    bb14: {
        unreachable;
    }
}

promoted[0] in main::{closure#0}: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

fn NotCopy(_1: u8) -> NotCopy {
    let mut _0: NotCopy;

    bb0: {
        _0 = NotCopy(move _1);
        return;
    }
}

// MIR FOR CTFE
fn NotCopy(_1: u8) -> NotCopy {
    let mut _0: NotCopy;

    bb0: {
        _0 = NotCopy(move _1);
        return;
    }
}

fn Packed(_1: NotCopy, _2: Aligned<'_>) -> Packed<'_> {
    let mut _0: Packed<'_>;

    bb0: {
        _0 = Packed::<'_>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Packed(_1: NotCopy, _2: Aligned<'_>) -> Packed<'_> {
    let mut _0: Packed<'_>;

    bb0: {
        _0 = Packed::<'_>(move _1, move _2);
        return;
    }
}
