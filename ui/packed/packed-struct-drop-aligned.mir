// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn check_align(_1: *const Aligned<'_>) -> () {
    debug ptr => _1;                     // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:14:16: 14:19
    let mut _0: ();                      // return place in scope 0 at ui/packed/packed-struct-drop-aligned.rs:14:37: 14:37
    let mut _2: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: usize;                       // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:15:16: 15:57
    let mut _5: usize;                   // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:15:16: 15:28
    let mut _6: *const Aligned<'_>;      // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:15:16: 15:19
    let mut _7: usize;                   // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:15:31: 15:57
    let mut _8: bool;                    // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:15:16: 15:57
    let mut _9: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _10: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _11: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _10;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _11;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _16: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _16;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _6 = _1;                         // scope 0 at ui/packed/packed-struct-drop-aligned.rs:15:16: 15:19
        _5 = move _6 as usize (PointerExposeAddress); // scope 0 at ui/packed/packed-struct-drop-aligned.rs:15:16: 15:28
        _7 = align_of::<Aligned<'_>>() -> bb1; // scope 0 at ui/packed/packed-struct-drop-aligned.rs:15:31: 15:57
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-drop-aligned.rs:15:31: 15:55
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> usize {align_of::<Aligned<'_>>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = Eq(_7, const 0_usize);      // scope 0 at ui/packed/packed-struct-drop-aligned.rs:15:16: 15:57
        assert(!move _8, "attempt to calculate the remainder of `{}` with a divisor of zero", _5) -> bb2; // scope 0 at ui/packed/packed-struct-drop-aligned.rs:15:16: 15:57
    }

    bb2: {
        _4 = Rem(move _5, move _7);      // scope 0 at ui/packed/packed-struct-drop-aligned.rs:15:16: 15:57
        _3 = &_4;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(check_align, [], Some(promoted[0])) }
        _9 = _24;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _9);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_2.0: &usize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_2.1: &usize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const 0_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _16 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<usize, usize>(move _18, move _19, move _21, move _23); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/packed/packed-struct-drop-aligned.rs:17:2: 17:2
    }
}

promoted[0] in check_align: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:16:16: 16:17

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/packed/packed-struct-drop-aligned.rs:16:16: 16:17
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn <impl at ui/packed/packed-struct-drop-aligned.rs:19:1: 19:30>::drop(_1: &mut Aligned<'_>) -> () {
    debug self => _1;                    // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:20:13: 20:22
    let mut _0: ();                      // return place in scope 0 at ui/packed/packed-struct-drop-aligned.rs:20:24: 20:24
    let _2: ();                          // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:21:9: 21:26
    let mut _3: *const Aligned<'_>;      // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:21:21: 21:25
    let _4: ();                          // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:22:9: 22:55
    let mut _5: &std::cell::Cell<usize>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:22:9: 22:55
    let mut _6: usize;                   // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:22:29: 22:54
    let mut _7: usize;                   // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:22:29: 22:50
    let mut _8: &std::cell::Cell<usize>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:22:29: 22:50
    let mut _9: (usize, bool);           // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:22:29: 22:54
    let mut _10: &std::cell::Cell<usize>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:20:13: 20:22
    let mut _11: &std::cell::Cell<usize>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:20:13: 20:22

    bb0: {
        _3 = &raw const (*_1);           // scope 0 at ui/packed/packed-struct-drop-aligned.rs:21:21: 21:25
        _2 = check_align(move _3) -> bb1; // scope 0 at ui/packed/packed-struct-drop-aligned.rs:21:9: 21:26
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-drop-aligned.rs:21:9: 21:20
                                         // + literal: Const { ty: for<'a> fn(*const Aligned<'a>) {check_align}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = deref_copy ((*_1).0: &std::cell::Cell<usize>); // scope 0 at ui/packed/packed-struct-drop-aligned.rs:22:9: 22:55
        _5 = _10;                        // scope 0 at ui/packed/packed-struct-drop-aligned.rs:22:9: 22:55
        _11 = deref_copy ((*_1).0: &std::cell::Cell<usize>); // scope 0 at ui/packed/packed-struct-drop-aligned.rs:22:29: 22:50
        _8 = _11;                        // scope 0 at ui/packed/packed-struct-drop-aligned.rs:22:29: 22:50
        _7 = Cell::<usize>::get(move _8) -> bb2; // scope 0 at ui/packed/packed-struct-drop-aligned.rs:22:29: 22:50
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-drop-aligned.rs:22:45: 22:48
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>) -> usize {Cell::<usize>::get}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = CheckedAdd(_7, const 1_usize); // scope 0 at ui/packed/packed-struct-drop-aligned.rs:22:29: 22:54
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_usize) -> bb3; // scope 0 at ui/packed/packed-struct-drop-aligned.rs:22:29: 22:54
    }

    bb3: {
        _6 = move (_9.0: usize);         // scope 0 at ui/packed/packed-struct-drop-aligned.rs:22:29: 22:54
        _4 = Cell::<usize>::set(move _5, move _6) -> bb4; // scope 0 at ui/packed/packed-struct-drop-aligned.rs:22:9: 22:55
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-drop-aligned.rs:22:25: 22:28
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>, usize) {Cell::<usize>::set}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/packed/packed-struct-drop-aligned.rs:23:6: 23:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/packed/packed-struct-drop-aligned.rs:32:11: 32:11
    let _1: &std::cell::Cell<usize>;     // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:33:9: 33:19
    let _2: std::cell::Cell<usize>;      // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:33:23: 33:35
    let mut _4: NotCopy;                 // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:35:28: 35:38
    let mut _5: Aligned<'_>;             // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:35:40: 35:62
    let mut _6: &std::cell::Cell<usize>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:35:50: 35:60
    let mut _7: Aligned<'_>;             // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:36:15: 36:37
    let mut _8: &std::cell::Cell<usize>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:36:25: 36:35
    let mut _9: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _10: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _11: usize;                      // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:37:20: 37:36
    let mut _12: &std::cell::Cell<usize>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:37:20: 37:36
    let mut _13: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _17: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _18: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _19: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _21: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _22: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _23: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _24: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _25: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _26: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _28: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _29: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _30: usize;                      // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:39:16: 39:32
    let mut _31: &std::cell::Cell<usize>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:39:16: 39:32
    let mut _32: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _35: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _37: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _38: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _40: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _41: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _42: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _43: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _44: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _45: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _48: std::cell::Cell<usize>;     // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:41:23: 41:35
    let mut _50: &&std::cell::Cell<usize>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let _51: std::ops::GeneratorState<(), ()>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:53:5: 53:32
    let mut _52: std::pin::Pin<&mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:53:5: 53:21
    let mut _53: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:53:14: 53:20
    let mut _54: ();                     // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:53:29: 53:31
    let mut _55: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _56: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _57: usize;                      // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:54:16: 54:32
    let mut _58: &std::cell::Cell<usize>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:54:16: 54:32
    let mut _59: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _62: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _63: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _64: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _65: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _67: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _68: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _69: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _70: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _71: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _72: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _74: ();                         // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:55:5: 55:12
    let mut _75: [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:55:10: 55:11
    let mut _76: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _77: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _78: usize;                      // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:56:16: 56:32
    let mut _79: &std::cell::Cell<usize>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:56:16: 56:32
    let mut _80: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _83: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _84: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _85: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _86: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _88: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _89: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _90: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _91: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _92: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _93: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _94: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _99: bool;                   // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:57:1: 57:2
    let mut _100: Aligned<'_>;           // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:36:9: 36:12
    scope 1 {
        debug drop_count => _1;          // in scope 1 at ui/packed/packed-struct-drop-aligned.rs:33:9: 33:19
        let mut _3: Packed<'_>;          // in scope 1 at ui/packed/packed-struct-drop-aligned.rs:35:13: 35:18
        let _33: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _34: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _47: &std::cell::Cell<usize>; // in scope 1 at ui/packed/packed-struct-drop-aligned.rs:41:9: 41:19
        let mut _97: &usize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug p => _3;               // in scope 2 at ui/packed/packed-struct-drop-aligned.rs:35:13: 35:18
            let _14: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _15: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _98: &usize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _14;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _15;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _20: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _20;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
        scope 5 {
            debug left_val => _33;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _34;      // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _39: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 6 {
                debug kind => _39;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 7 {
            debug drop_count => _47;     // in scope 7 at ui/packed/packed-struct-drop-aligned.rs:41:9: 41:19
            let mut _49: [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]; // in scope 7 at ui/packed/packed-struct-drop-aligned.rs:42:9: 42:14
            scope 8 {
                debug g => _49;          // in scope 8 at ui/packed/packed-struct-drop-aligned.rs:42:9: 42:14
                let _60: &usize;         // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _61: &usize;         // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _81: &usize;         // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _82: &usize;         // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _95: &usize;     // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _96: &usize;     // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 9 {
                    debug left_val => _60; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _61; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _66: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 10 {
                        debug kind => _66; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 11 {
                    debug left_val => _81; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _82; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _87: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 12 {
                        debug kind => _87; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _99 = const false;               // scope 0 at ui/packed/packed-struct-drop-aligned.rs:33:9: 33:19
        _2 = Cell::<usize>::new(const 0_usize) -> bb1; // scope 0 at ui/packed/packed-struct-drop-aligned.rs:33:23: 33:35
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-drop-aligned.rs:33:23: 33:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(usize) -> Cell<usize> {Cell::<usize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = &_2;                        // scope 0 at ui/packed/packed-struct-drop-aligned.rs:33:22: 33:35
        _4 = const NotCopy(0_u8);        // scope 1 at ui/packed/packed-struct-drop-aligned.rs:35:28: 35:38
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-drop-aligned.rs:35:28: 35:38
                                         // + literal: Const { ty: NotCopy, val: Value(Scalar(0x00)) }
        _6 = _1;                         // scope 1 at ui/packed/packed-struct-drop-aligned.rs:35:50: 35:60
        _5 = Aligned::<'_> { drop_count: move _6 }; // scope 1 at ui/packed/packed-struct-drop-aligned.rs:35:40: 35:62
        _3 = Packed::<'_>(move _4, move _5); // scope 1 at ui/packed/packed-struct-drop-aligned.rs:35:21: 35:63
        _8 = _1;                         // scope 2 at ui/packed/packed-struct-drop-aligned.rs:36:25: 36:35
        _7 = Aligned::<'_> { drop_count: move _8 }; // scope 2 at ui/packed/packed-struct-drop-aligned.rs:36:15: 36:37
        _100 = move (_3.1: Aligned<'_>); // scope 2 at ui/packed/packed-struct-drop-aligned.rs:36:9: 36:12
        drop(_100) -> [return: bb24, unwind: bb21]; // scope 2 at ui/packed/packed-struct-drop-aligned.rs:36:9: 36:12
    }

    bb2: {
        _10 = &_11;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _98 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[3])) }
        _13 = _98;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _9 = (move _10, move _13);       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _14 = (_9.0: &usize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _15 = (_9.1: &usize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _18 = (*_14);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _19 = const 1_usize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _17 = Eq(move _18, move _19);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _16 = Not(move _17);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _16) -> [0: bb4, otherwise: bb3]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _20 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = _14;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _26 = _15;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _21 = core::panicking::assert_failed::<usize, usize>(move _22, move _23, move _25, move _27) -> bb19; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_3) -> bb5;                 // scope 1 at ui/packed/packed-struct-drop-aligned.rs:38:5: 38:6
    }

    bb5: {
        _31 = _1;                        // scope 1 at ui/packed/packed-struct-drop-aligned.rs:39:16: 39:32
        _30 = Cell::<usize>::get(move _31) -> bb6; // scope 1 at ui/packed/packed-struct-drop-aligned.rs:39:16: 39:32
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-drop-aligned.rs:39:27: 39:30
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>) -> usize {Cell::<usize>::get}, val: Value(<ZST>) }
    }

    bb6: {
        _29 = &_30;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _97 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[2])) }
        _32 = _97;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _28 = (move _29, move _32);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _33 = (_28.0: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _34 = (_28.1: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _37 = (*_33);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _38 = const 2_usize;             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _36 = Eq(move _37, move _38);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _35 = Not(move _36);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _35) -> [0: bb8, otherwise: bb7]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _39 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _41 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _43 = _33;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _42 = _43;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _45 = _34;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _44 = _45;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _46 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _40 = core::panicking::assert_failed::<usize, usize>(move _41, move _42, move _44, move _46); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb8: {
        _48 = Cell::<usize>::new(const 0_usize) -> bb9; // scope 1 at ui/packed/packed-struct-drop-aligned.rs:41:23: 41:35
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-drop-aligned.rs:41:23: 41:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(usize) -> Cell<usize> {Cell::<usize>::new}, val: Value(<ZST>) }
    }

    bb9: {
        _47 = &_48;                      // scope 1 at ui/packed/packed-struct-drop-aligned.rs:41:22: 41:35
        _50 = &_47;                      // scope 7 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
        _99 = const true;                // scope 7 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
        _49 = [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19 (#0)] { drop_count: move _50 }; // scope 7 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
                                         // generator
                                         // + def_id: DefId(0:23 ~ packed_struct_drop_aligned[ac28]::main::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     for<'a> {Packed<'a>, ()},
                                         //     (&&std::cell::Cell<usize>,),
                                         // ]
                                         // + movability: Movable
        _53 = &mut _49;                  // scope 8 at ui/packed/packed-struct-drop-aligned.rs:53:14: 53:20
        _52 = Pin::<&mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]>::new(move _53) -> [return: bb10, unwind: bb23]; // scope 8 at ui/packed/packed-struct-drop-aligned.rs:53:5: 53:21
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-drop-aligned.rs:53:5: 53:13
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]) -> Pin<&mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]> {Pin::<&mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]>::new}, val: Value(<ZST>) }
    }

    bb10: {
        _51 = <[generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19] as Generator>::resume(move _52, move _54) -> [return: bb11, unwind: bb23]; // scope 8 at ui/packed/packed-struct-drop-aligned.rs:53:5: 53:32
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-drop-aligned.rs:53:22: 53:28
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]>, ()) -> GeneratorState<<[generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19] as Generator>::Yield, <[generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19] as Generator>::Return> {<[generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb11: {
        _58 = _47;                       // scope 8 at ui/packed/packed-struct-drop-aligned.rs:54:16: 54:32
        _57 = Cell::<usize>::get(move _58) -> [return: bb12, unwind: bb23]; // scope 8 at ui/packed/packed-struct-drop-aligned.rs:54:16: 54:32
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-drop-aligned.rs:54:27: 54:30
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>) -> usize {Cell::<usize>::get}, val: Value(<ZST>) }
    }

    bb12: {
        _56 = &_57;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _96 = const _;                   // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[1])) }
        _59 = _96;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _55 = (move _56, move _59);      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _60 = (_55.0: &usize);           // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _61 = (_55.1: &usize);           // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _64 = (*_60);                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _65 = const 1_usize;             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _63 = Eq(move _64, move _65);    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _62 = Not(move _63);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _62) -> [0: bb14, otherwise: bb13]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _66 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _68 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _70 = _60;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _69 = _70;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _72 = _61;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _71 = _72;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _73 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _67 = core::panicking::assert_failed::<usize, usize>(move _68, move _69, move _71, move _73) -> bb23; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb14: {
        _99 = const false;               // scope 8 at ui/packed/packed-struct-drop-aligned.rs:55:10: 55:11
        _75 = move _49;                  // scope 8 at ui/packed/packed-struct-drop-aligned.rs:55:10: 55:11
        _74 = std::mem::drop::<[generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]>(move _75) -> [return: bb15, unwind: bb23]; // scope 8 at ui/packed/packed-struct-drop-aligned.rs:55:5: 55:12
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-drop-aligned.rs:55:5: 55:9
                                         // + literal: Const { ty: fn([generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]) {std::mem::drop::<[generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]>}, val: Value(<ZST>) }
    }

    bb15: {
        _79 = _47;                       // scope 8 at ui/packed/packed-struct-drop-aligned.rs:56:16: 56:32
        _78 = Cell::<usize>::get(move _79) -> [return: bb16, unwind: bb23]; // scope 8 at ui/packed/packed-struct-drop-aligned.rs:56:16: 56:32
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-drop-aligned.rs:56:27: 56:30
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>) -> usize {Cell::<usize>::get}, val: Value(<ZST>) }
    }

    bb16: {
        _77 = &_78;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _95 = const _;                   // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _80 = _95;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _76 = (move _77, move _80);      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _81 = (_76.0: &usize);           // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _82 = (_76.1: &usize);           // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _85 = (*_81);                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _86 = const 2_usize;             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _84 = Eq(move _85, move _86);    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _83 = Not(move _84);             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _83) -> [0: bb18, otherwise: bb17]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb17: {
        _87 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _89 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _91 = _81;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _90 = _91;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _93 = _82;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _92 = _93;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _94 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _88 = core::panicking::assert_failed::<usize, usize>(move _89, move _90, move _92, move _94) -> bb23; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb18: {
        _99 = const false;               // scope 7 at ui/packed/packed-struct-drop-aligned.rs:57:1: 57:2
        return;                          // scope 0 at ui/packed/packed-struct-drop-aligned.rs:57:2: 57:2
    }

    bb19 (cleanup): {
        drop(_3) -> bb20;                // scope 1 at ui/packed/packed-struct-drop-aligned.rs:38:5: 38:6
    }

    bb20 (cleanup): {
        resume;                          // scope 0 at ui/packed/packed-struct-drop-aligned.rs:32:1: 57:2
    }

    bb21 (cleanup): {
        (_3.1: Aligned<'_>) = move _7;   // scope 2 at ui/packed/packed-struct-drop-aligned.rs:36:9: 36:12
        goto -> bb19;                    // scope 2 at ui/packed/packed-struct-drop-aligned.rs:36:9: 36:12
    }

    bb22 (cleanup): {
        drop(_49) -> bb20;               // scope 7 at ui/packed/packed-struct-drop-aligned.rs:57:1: 57:2
    }

    bb23 (cleanup): {
        switchInt(_99) -> [0: bb20, otherwise: bb22]; // scope 7 at ui/packed/packed-struct-drop-aligned.rs:57:1: 57:2
    }

    bb24: {
        (_3.1: Aligned<'_>) = move _7;   // scope 2 at ui/packed/packed-struct-drop-aligned.rs:36:9: 36:12
        _12 = _1;                        // scope 2 at ui/packed/packed-struct-drop-aligned.rs:37:20: 37:36
        _11 = Cell::<usize>::get(move _12) -> [return: bb2, unwind: bb19]; // scope 2 at ui/packed/packed-struct-drop-aligned.rs:37:20: 37:36
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-drop-aligned.rs:37:31: 37:34
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>) -> usize {Cell::<usize>::get}, val: Value(<ZST>) }
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:56:34: 56:35

    bb0: {
        _1 = const 2_usize;              // scope 0 at ui/packed/packed-struct-drop-aligned.rs:56:34: 56:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:54:34: 54:35

    bb0: {
        _1 = const 1_usize;              // scope 0 at ui/packed/packed-struct-drop-aligned.rs:54:34: 54:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:39:34: 39:35

    bb0: {
        _1 = const 2_usize;              // scope 0 at ui/packed/packed-struct-drop-aligned.rs:39:34: 39:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:37:38: 37:39

    bb0: {
        _1 = const 1_usize;              // scope 0 at ui/packed/packed-struct-drop-aligned.rs:37:38: 37:39
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]>, _2: ()) -> GeneratorState<(), ()> {
    debug drop_count => (*((*(_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19])).0: &&std::cell::Cell<usize>)); // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:41:9: 41:19
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _3: NotCopy;                 // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:43:28: 43:38
    let mut _4: Aligned<'_>;             // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:43:40: 43:62
    let mut _5: &std::cell::Cell<usize>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:43:50: 43:60
    let mut _6: Aligned<'_>;             // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:45:15: 45:37
    let mut _7: &std::cell::Cell<usize>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:45:25: 45:35
    let mut _8: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _9: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _10: usize;                      // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:46:20: 46:36
    let mut _11: &std::cell::Cell<usize>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:46:20: 46:36
    let mut _12: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _17: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _18: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _20: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _21: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _22: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _23: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _24: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _25: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _27: ();                         // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:50:9: 50:18
    let mut _28: NotCopy;                // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:50:14: 50:17
    let mut _29: ();                     // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:51:9: 51:14
    let mut _31: &&std::cell::Cell<usize>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _32: &std::cell::Cell<usize>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _33: &&std::cell::Cell<usize>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _34: &std::cell::Cell<usize>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _35: &&std::cell::Cell<usize>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _36: &std::cell::Cell<usize>; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _37: Aligned<'_>;            // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:45:9: 45:12
    let mut _38: Aligned<'_>;            // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:52:5: 52:6
    let mut _39: Aligned<'_>;            // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:52:5: 52:6
    let mut _40: ();                     // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:20: 42:20
    let mut _41: u32;                    // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _42: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _43: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _44: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _45: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _46: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _47: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _48: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _49: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _50: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _51: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _52: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _53: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _54: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    let mut _55: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]; // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    scope 1 {
        debug p => (((*(_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19])) as variant#3).0: Packed<'_>); // in scope 1 at ui/packed/packed-struct-drop-aligned.rs:43:13: 43:18
        scope 2 {
            let _13: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _14: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _30: &usize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _13;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _14;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _19: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _19;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _42 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]); // scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
        _41 = discriminant((*_42));      // scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
        switchInt(move _41) -> [0: bb1, 1: bb13, 2: bb12, 3: bb11, otherwise: bb14]; // scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    }

    bb1: {
        _3 = NotCopy(const 0_u8);        // scope 0 at ui/packed/packed-struct-drop-aligned.rs:43:28: 43:38
        _43 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]); // scope 0 at ui/packed/packed-struct-drop-aligned.rs:43:50: 43:60
        _31 = deref_copy ((*_43).0: &&std::cell::Cell<usize>); // scope 0 at ui/packed/packed-struct-drop-aligned.rs:43:50: 43:60
        _32 = deref_copy (*_31);         // scope 0 at ui/packed/packed-struct-drop-aligned.rs:43:50: 43:60
        _5 = _32;                        // scope 0 at ui/packed/packed-struct-drop-aligned.rs:43:50: 43:60
        _4 = Aligned::<'_> { drop_count: move _5 }; // scope 0 at ui/packed/packed-struct-drop-aligned.rs:43:40: 43:62
        _44 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]); // scope 0 at ui/packed/packed-struct-drop-aligned.rs:43:21: 43:63
        (((*_44) as variant#3).0: Packed<'_>) = Packed::<'_>(move _3, move _4); // scope 0 at ui/packed/packed-struct-drop-aligned.rs:43:21: 43:63
        _45 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]); // scope 2 at ui/packed/packed-struct-drop-aligned.rs:45:25: 45:35
        _33 = deref_copy ((*_45).0: &&std::cell::Cell<usize>); // scope 2 at ui/packed/packed-struct-drop-aligned.rs:45:25: 45:35
        _34 = deref_copy (*_33);         // scope 2 at ui/packed/packed-struct-drop-aligned.rs:45:25: 45:35
        _7 = _34;                        // scope 2 at ui/packed/packed-struct-drop-aligned.rs:45:25: 45:35
        _6 = Aligned::<'_> { drop_count: move _7 }; // scope 2 at ui/packed/packed-struct-drop-aligned.rs:45:15: 45:37
        _46 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]); // scope 2 at ui/packed/packed-struct-drop-aligned.rs:45:9: 45:12
        _37 = move ((((*_46) as variant#3).0: Packed<'_>).1: Aligned<'_>); // scope 2 at ui/packed/packed-struct-drop-aligned.rs:45:9: 45:12
        drop(_37) -> [return: bb9, unwind: bb7]; // scope 2 at ui/packed/packed-struct-drop-aligned.rs:45:9: 45:12
    }

    bb2: {
        _9 = &_10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _30 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main::{closure#0}, [<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>], Some(promoted[0])) }
        _12 = _30;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _8 = (move _9, move _12);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _13 = (_8.0: &usize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _14 = (_8.1: &usize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _17 = (*_13);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _18 = (*_14);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _16 = Eq(move _17, move _18);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _15 = Not(move _16);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _15) -> [0: bb4, otherwise: bb3]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _19 = core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
        _21 = move _19;                  // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
        _23 = _13;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _14;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = _25;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _20 = core::panicking::assert_failed::<usize, usize>(move _21, move _22, move _24, move _26) -> bb8; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        _48 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]); // scope 2 at ui/packed/packed-struct-drop-aligned.rs:50:14: 50:17
        _28 = move ((((*_48) as variant#3).0: Packed<'_>).0: NotCopy); // scope 2 at ui/packed/packed-struct-drop-aligned.rs:50:14: 50:17
        _27 = std::mem::drop::<NotCopy>(move _28) -> [return: bb5, unwind: bb8]; // scope 2 at ui/packed/packed-struct-drop-aligned.rs:50:9: 50:18
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-drop-aligned.rs:50:9: 50:13
                                         // + literal: Const { ty: fn(NotCopy) {std::mem::drop::<NotCopy>}, val: Value(<ZST>) }
    }

    bb5: {
        _29 = ();                        // scope 2 at ui/packed/packed-struct-drop-aligned.rs:51:9: 51:14
        _0 = GeneratorState::<(), ()>::Yielded(move _29); // scope 2 at ui/packed/packed-struct-drop-aligned.rs:51:9: 51:14
        _49 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]); // scope 2 at ui/packed/packed-struct-drop-aligned.rs:51:9: 51:14
        discriminant((*_49)) = 3;        // scope 2 at ui/packed/packed-struct-drop-aligned.rs:51:9: 51:14
        return;                          // scope 2 at ui/packed/packed-struct-drop-aligned.rs:51:9: 51:14
    }

    bb6 (cleanup): {
        _55 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]); // scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
        discriminant((*_55)) = 2;        // scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
        resume;                          // scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    }

    bb7 (cleanup): {
        _51 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]); // scope 2 at ui/packed/packed-struct-drop-aligned.rs:45:9: 45:12
        ((((*_51) as variant#3).0: Packed<'_>).1: Aligned<'_>) = move _6; // scope 2 at ui/packed/packed-struct-drop-aligned.rs:45:9: 45:12
        goto -> bb8;                     // scope 0 at ui/packed/packed-struct-drop-aligned.rs:52:5: 52:6
    }

    bb8 (cleanup): {
        _54 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]); // scope 0 at ui/packed/packed-struct-drop-aligned.rs:52:5: 52:6
        _39 = move ((((*_54) as variant#3).0: Packed<'_>).1: Aligned<'_>); // scope 0 at ui/packed/packed-struct-drop-aligned.rs:52:5: 52:6
        drop(_39) -> bb6;                // scope 0 at ui/packed/packed-struct-drop-aligned.rs:52:5: 52:6
    }

    bb9: {
        _52 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]); // scope 2 at ui/packed/packed-struct-drop-aligned.rs:45:9: 45:12
        ((((*_52) as variant#3).0: Packed<'_>).1: Aligned<'_>) = move _6; // scope 2 at ui/packed/packed-struct-drop-aligned.rs:45:9: 45:12
        _47 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]); // scope 2 at ui/packed/packed-struct-drop-aligned.rs:46:20: 46:36
        _35 = deref_copy ((*_47).0: &&std::cell::Cell<usize>); // scope 2 at ui/packed/packed-struct-drop-aligned.rs:46:20: 46:36
        _36 = deref_copy (*_35);         // scope 2 at ui/packed/packed-struct-drop-aligned.rs:46:20: 46:36
        _11 = _36;                       // scope 2 at ui/packed/packed-struct-drop-aligned.rs:46:20: 46:36
        _10 = Cell::<usize>::get(move _11) -> [return: bb2, unwind: bb8]; // scope 2 at ui/packed/packed-struct-drop-aligned.rs:46:20: 46:36
                                         // mir::Constant
                                         // + span: ui/packed/packed-struct-drop-aligned.rs:46:31: 46:34
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>) -> usize {Cell::<usize>::get}, val: Value(<ZST>) }
    }

    bb10: {
        _0 = GeneratorState::<(), ()>::Complete(move _40); // scope 0 at ui/packed/packed-struct-drop-aligned.rs:52:6: 52:6
        _50 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]); // scope 0 at ui/packed/packed-struct-drop-aligned.rs:52:6: 52:6
        discriminant((*_50)) = 1;        // scope 0 at ui/packed/packed-struct-drop-aligned.rs:52:6: 52:6
        return;                          // scope 0 at ui/packed/packed-struct-drop-aligned.rs:52:6: 52:6
    }

    bb11: {
        _40 = const ();                  // scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:20: 52:6
        _53 = deref_copy (_1.0: &mut [generator@ui/packed/packed-struct-drop-aligned.rs:42:17: 42:19]); // scope 0 at ui/packed/packed-struct-drop-aligned.rs:52:5: 52:6
        _38 = move ((((*_53) as variant#3).0: Packed<'_>).1: Aligned<'_>); // scope 0 at ui/packed/packed-struct-drop-aligned.rs:52:5: 52:6
        drop(_38) -> [return: bb10, unwind: bb6]; // scope 0 at ui/packed/packed-struct-drop-aligned.rs:52:5: 52:6
    }

    bb12: {
        assert(const false, "generator resumed after panicking") -> bb12; // scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    }

    bb13: {
        assert(const false, "generator resumed after completion") -> bb13; // scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    }

    bb14: {
        unreachable;                     // scope 0 at ui/packed/packed-struct-drop-aligned.rs:42:17: 52:6
    }
}

promoted[0] in main::{closure#0}: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/packed/packed-struct-drop-aligned.rs:46:38: 46:39

    bb0: {
        _1 = const 1_usize;              // scope 0 at ui/packed/packed-struct-drop-aligned.rs:46:38: 46:39
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn NotCopy(_1: u8) -> NotCopy {
    let mut _0: NotCopy;                 // return place in scope 0 at ui/packed/packed-struct-drop-aligned.rs:27:1: 27:15

    bb0: {
        _0 = NotCopy(move _1);           // scope 0 at ui/packed/packed-struct-drop-aligned.rs:27:1: 27:15
        return;                          // scope 0 at ui/packed/packed-struct-drop-aligned.rs:27:1: 27:15
    }
}

// MIR FOR CTFE
fn NotCopy(_1: u8) -> NotCopy {
    let mut _0: NotCopy;                 // return place in scope 0 at ui/packed/packed-struct-drop-aligned.rs:27:1: 27:15

    bb0: {
        _0 = NotCopy(move _1);           // scope 0 at ui/packed/packed-struct-drop-aligned.rs:27:1: 27:15
        return;                          // scope 0 at ui/packed/packed-struct-drop-aligned.rs:27:1: 27:15
    }
}

fn Packed(_1: NotCopy, _2: Aligned<'_>) -> Packed<'_> {
    let mut _0: Packed<'_>;              // return place in scope 0 at ui/packed/packed-struct-drop-aligned.rs:30:1: 30:18

    bb0: {
        _0 = Packed::<'_>(move _1, move _2); // scope 0 at ui/packed/packed-struct-drop-aligned.rs:30:1: 30:18
        return;                          // scope 0 at ui/packed/packed-struct-drop-aligned.rs:30:1: 30:18
    }
}

// MIR FOR CTFE
fn Packed(_1: NotCopy, _2: Aligned<'_>) -> Packed<'_> {
    let mut _0: Packed<'_>;              // return place in scope 0 at ui/packed/packed-struct-drop-aligned.rs:30:1: 30:18

    bb0: {
        _0 = Packed::<'_>(move _1, move _2); // scope 0 at ui/packed/packed-struct-drop-aligned.rs:30:1: 30:18
        return;                          // scope 0 at ui/packed/packed-struct-drop-aligned.rs:30:1: 30:18
    }
}
