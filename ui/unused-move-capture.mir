// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unused-move-capture.rs:4:15: 4:15
    let _1: std::boxed::Box<i32>;        // in scope 0 at ui/unused-move-capture.rs:5:9: 5:11
    let _3: ();                          // in scope 0 at ui/unused-move-capture.rs:7:5: 7:15
    let mut _4: &[closure@ui/unused-move-capture.rs:6:20: 6:22]; // in scope 0 at ui/unused-move-capture.rs:7:5: 7:13
    let mut _5: ();                      // in scope 0 at ui/unused-move-capture.rs:7:5: 7:15
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/unused-move-capture.rs:5:9: 5:11
        let _2: [closure@ui/unused-move-capture.rs:6:20: 6:22]; // in scope 1 at ui/unused-move-capture.rs:6:9: 6:17
        scope 2 {
            debug lam_move => _2;        // in scope 2 at ui/unused-move-capture.rs:6:9: 6:17
        }
    }

    bb0: {
        _1 = Box::<i32>::new(const 1_i32) -> bb1; // scope 0 at ui/unused-move-capture.rs:5:22: 5:33
                                         // mir::Constant
                                         // + span: ui/unused-move-capture.rs:5:22: 5:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_2;                        // scope 2 at ui/unused-move-capture.rs:7:5: 7:13
        _3 = <[closure@ui/unused-move-capture.rs:6:20: 6:22] as Fn<()>>::call(move _4, move _5) -> [return: bb2, unwind: bb4]; // scope 2 at ui/unused-move-capture.rs:7:5: 7:15
                                         // mir::Constant
                                         // + span: ui/unused-move-capture.rs:7:5: 7:13
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/unused-move-capture.rs:6:20: 6:22], ()) -> <[closure@ui/unused-move-capture.rs:6:20: 6:22] as FnOnce<()>>::Output {<[closure@ui/unused-move-capture.rs:6:20: 6:22] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/unused-move-capture.rs:8:1: 8:2
    }

    bb3: {
        return;                          // scope 0 at ui/unused-move-capture.rs:8:2: 8:2
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/unused-move-capture.rs:8:1: 8:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/unused-move-capture.rs:4:1: 8:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/unused-move-capture.rs:6:20: 6:22]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unused-move-capture.rs:6:23: 6:23

    bb0: {
        return;                          // scope 0 at ui/unused-move-capture.rs:6:25: 6:25
    }
}
