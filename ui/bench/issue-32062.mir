// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/bench/issue-32062.rs:5:11: 5:11
    let mut _1: std::result::Result<((), std::option::IntoIter<i32>), ()>; // in scope 0 at ui/bench/issue-32062.rs:6:13: 6:38
    let mut _2: std::option::IntoIter<i32>; // in scope 0 at ui/bench/issue-32062.rs:6:18: 6:37
    let mut _3: std::option::Option<i32>; // in scope 0 at ui/bench/issue-32062.rs:6:18: 6:25
    scope 1 {
    }

    bb0: {
        _3 = Option::<i32>::Some(const 0_i32); // scope 0 at ui/bench/issue-32062.rs:6:18: 6:25
        _2 = <Option<i32> as IntoIterator>::into_iter(move _3) -> bb1; // scope 0 at ui/bench/issue-32062.rs:6:18: 6:37
                                         // mir::Constant
                                         // + span: ui/bench/issue-32062.rs:6:26: 6:35
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = test::<std::option::IntoIter<i32>>(move _2) -> bb2; // scope 0 at ui/bench/issue-32062.rs:6:13: 6:38
                                         // mir::Constant
                                         // + span: ui/bench/issue-32062.rs:6:13: 6:17
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Result<((), std::option::IntoIter<i32>), ()> {test::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/bench/issue-32062.rs:7:2: 7:2
    }
}

fn Parser::chain(_1: Self, _2: P) -> Chain<Self, P> {
    debug self => _1;                    // in scope 0 at ui/bench/issue-32062.rs:13:17: 13:21
    debug p => _2;                       // in scope 0 at ui/bench/issue-32062.rs:13:23: 13:24
    let mut _0: Chain<Self, P>;          // return place in scope 0 at ui/bench/issue-32062.rs:13:32: 13:46
    let mut _3: Self;                    // in scope 0 at ui/bench/issue-32062.rs:14:15: 14:19
    let mut _4: P;                       // in scope 0 at ui/bench/issue-32062.rs:14:21: 14:22

    bb0: {
        _3 = move _1;                    // scope 0 at ui/bench/issue-32062.rs:14:15: 14:19
        _4 = move _2;                    // scope 0 at ui/bench/issue-32062.rs:14:21: 14:22
        _0 = Chain::<Self, P>(move _3, move _4); // scope 0 at ui/bench/issue-32062.rs:14:9: 14:23
        return;                          // scope 0 at ui/bench/issue-32062.rs:15:6: 15:6
    }
}

fn <impl at ui/bench/issue-32062.rs:20:1: 20:28>::parse(_1: Token<T>, _2: T) -> Result<(<T as Iterator>::Item, T), ()> {
    debug self => _1;                    // in scope 0 at ui/bench/issue-32062.rs:23:14: 23:18
    debug _input => _2;                  // in scope 0 at ui/bench/issue-32062.rs:23:20: 23:26
    let mut _0: std::result::Result<(<T as std::iter::Iterator>::Item, T), ()>; // return place in scope 0 at ui/bench/issue-32062.rs:23:44: 23:83
    let mut _3: ();                      // in scope 0 at ui/bench/issue-32062.rs:24:13: 24:15

    bb0: {
        _0 = Result::<(<T as Iterator>::Item, T), ()>::Err(move _3); // scope 0 at ui/bench/issue-32062.rs:24:9: 24:16
        drop(_2) -> [return: bb1, unwind: bb3]; // scope 0 at ui/bench/issue-32062.rs:25:5: 25:6
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/bench/issue-32062.rs:25:5: 25:6
    }

    bb2: {
        return;                          // scope 0 at ui/bench/issue-32062.rs:25:6: 25:6
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/bench/issue-32062.rs:25:5: 25:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/bench/issue-32062.rs:23:5: 25:6
    }
}

fn <impl at ui/bench/issue-32062.rs:30:1: 30:34>::parse(_1: Chain<L, R>, _2: <L as Parser>::Input) -> Result<((<L as Parser>::Output, <R as Parser>::Output), <L as Parser>::Input), ()> {
    debug self => _1;                    // in scope 0 at ui/bench/issue-32062.rs:33:14: 33:18
    debug _input => _2;                  // in scope 0 at ui/bench/issue-32062.rs:33:20: 33:26
    let mut _0: std::result::Result<((<L as Parser>::Output, <R as Parser>::Output), <L as Parser>::Input), ()>; // return place in scope 0 at ui/bench/issue-32062.rs:33:44: 33:83
    let mut _3: ();                      // in scope 0 at ui/bench/issue-32062.rs:34:13: 34:15

    bb0: {
        _0 = Result::<((<L as Parser>::Output, <R as Parser>::Output), <L as Parser>::Input), ()>::Err(move _3); // scope 0 at ui/bench/issue-32062.rs:34:9: 34:16
        drop(_2) -> [return: bb1, unwind: bb3]; // scope 0 at ui/bench/issue-32062.rs:35:5: 35:6
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/bench/issue-32062.rs:35:5: 35:6
    }

    bb2: {
        return;                          // scope 0 at ui/bench/issue-32062.rs:35:6: 35:6
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/bench/issue-32062.rs:35:5: 35:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/bench/issue-32062.rs:33:5: 35:6
    }
}

fn test(_1: I) -> Result<((), I), ()> {
    debug i => _1;                       // in scope 0 at ui/bench/issue-32062.rs:38:12: 38:13
    let mut _0: std::result::Result<((), I), ()>; // return place in scope 0 at ui/bench/issue-32062.rs:38:21: 38:40
    let mut _2: std::result::Result<((((((((((i32, i32), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), I), ()>; // in scope 0 at ui/bench/issue-32062.rs:39:5: 48:18
    let mut _3: Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>; // in scope 0 at ui/bench/issue-32062.rs:39:5: 47:42
    let mut _4: Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>; // in scope 0 at ui/bench/issue-32062.rs:39:5: 46:42
    let mut _5: Chain<Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>; // in scope 0 at ui/bench/issue-32062.rs:39:5: 45:42
    let mut _6: Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>; // in scope 0 at ui/bench/issue-32062.rs:39:5: 44:42
    let mut _7: Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>; // in scope 0 at ui/bench/issue-32062.rs:39:5: 43:42
    let mut _8: Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>; // in scope 0 at ui/bench/issue-32062.rs:39:5: 42:42
    let mut _9: Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>; // in scope 0 at ui/bench/issue-32062.rs:39:5: 41:42
    let mut _10: Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>; // in scope 0 at ui/bench/issue-32062.rs:39:5: 40:42
    let mut _11: Chain<Token<I>, Token<I>>; // in scope 0 at ui/bench/issue-32062.rs:39:5: 39:30
    let mut _12: Token<I>;               // in scope 0 at ui/bench/issue-32062.rs:39:11: 39:19
    let mut _13: Token<I>;               // in scope 0 at ui/bench/issue-32062.rs:39:21: 39:29
    let mut _14: Chain<Token<I>, Token<I>>; // in scope 0 at ui/bench/issue-32062.rs:40:16: 40:41
    let mut _15: Token<I>;               // in scope 0 at ui/bench/issue-32062.rs:40:22: 40:30
    let mut _16: Token<I>;               // in scope 0 at ui/bench/issue-32062.rs:40:32: 40:40
    let mut _17: Chain<Token<I>, Token<I>>; // in scope 0 at ui/bench/issue-32062.rs:41:16: 41:41
    let mut _18: Token<I>;               // in scope 0 at ui/bench/issue-32062.rs:41:22: 41:30
    let mut _19: Token<I>;               // in scope 0 at ui/bench/issue-32062.rs:41:32: 41:40
    let mut _20: Chain<Token<I>, Token<I>>; // in scope 0 at ui/bench/issue-32062.rs:42:16: 42:41
    let mut _21: Token<I>;               // in scope 0 at ui/bench/issue-32062.rs:42:22: 42:30
    let mut _22: Token<I>;               // in scope 0 at ui/bench/issue-32062.rs:42:32: 42:40
    let mut _23: Chain<Token<I>, Token<I>>; // in scope 0 at ui/bench/issue-32062.rs:43:16: 43:41
    let mut _24: Token<I>;               // in scope 0 at ui/bench/issue-32062.rs:43:22: 43:30
    let mut _25: Token<I>;               // in scope 0 at ui/bench/issue-32062.rs:43:32: 43:40
    let mut _26: Chain<Token<I>, Token<I>>; // in scope 0 at ui/bench/issue-32062.rs:44:16: 44:41
    let mut _27: Token<I>;               // in scope 0 at ui/bench/issue-32062.rs:44:22: 44:30
    let mut _28: Token<I>;               // in scope 0 at ui/bench/issue-32062.rs:44:32: 44:40
    let mut _29: Chain<Token<I>, Token<I>>; // in scope 0 at ui/bench/issue-32062.rs:45:16: 45:41
    let mut _30: Token<I>;               // in scope 0 at ui/bench/issue-32062.rs:45:22: 45:30
    let mut _31: Token<I>;               // in scope 0 at ui/bench/issue-32062.rs:45:32: 45:40
    let mut _32: Chain<Token<I>, Token<I>>; // in scope 0 at ui/bench/issue-32062.rs:46:16: 46:41
    let mut _33: Token<I>;               // in scope 0 at ui/bench/issue-32062.rs:46:22: 46:30
    let mut _34: Token<I>;               // in scope 0 at ui/bench/issue-32062.rs:46:32: 46:40
    let mut _35: Chain<Token<I>, Token<I>>; // in scope 0 at ui/bench/issue-32062.rs:47:16: 47:41
    let mut _36: Token<I>;               // in scope 0 at ui/bench/issue-32062.rs:47:22: 47:30
    let mut _37: Token<I>;               // in scope 0 at ui/bench/issue-32062.rs:47:32: 47:40
    let mut _38: I;                      // in scope 0 at ui/bench/issue-32062.rs:48:16: 48:17
    let mut _39: [closure@ui/bench/issue-32062.rs:49:14: 49:22]; // in scope 0 at ui/bench/issue-32062.rs:49:14: 49:30
    let mut _40: bool;                   // in scope 0 at ui/bench/issue-32062.rs:50:1: 50:2

    bb0: {
        _40 = const false;               // scope 0 at ui/bench/issue-32062.rs:39:5: 48:18
        _40 = const true;                // scope 0 at ui/bench/issue-32062.rs:39:5: 48:18
        _12 = Token::<I>(const 0_i32);   // scope 0 at ui/bench/issue-32062.rs:39:11: 39:19
        _13 = Token::<I>(const 1_i32);   // scope 0 at ui/bench/issue-32062.rs:39:21: 39:29
        _11 = Chain::<Token<I>, Token<I>>(move _12, move _13); // scope 0 at ui/bench/issue-32062.rs:39:5: 39:30
        _15 = Token::<I>(const 0_i32);   // scope 0 at ui/bench/issue-32062.rs:40:22: 40:30
        _16 = Token::<I>(const 1_i32);   // scope 0 at ui/bench/issue-32062.rs:40:32: 40:40
        _14 = Chain::<Token<I>, Token<I>>(move _15, move _16); // scope 0 at ui/bench/issue-32062.rs:40:16: 40:41
        _10 = <Chain<Token<I>, Token<I>> as Parser>::chain::<Chain<Token<I>, Token<I>>>(move _11, move _14) -> [return: bb1, unwind: bb13]; // scope 0 at ui/bench/issue-32062.rs:39:5: 40:42
                                         // mir::Constant
                                         // + span: ui/bench/issue-32062.rs:40:10: 40:15
                                         // + literal: Const { ty: fn(Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>) -> Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>> {<Chain<Token<I>, Token<I>> as Parser>::chain::<Chain<Token<I>, Token<I>>>}, val: Value(<ZST>) }
    }

    bb1: {
        _18 = Token::<I>(const 0_i32);   // scope 0 at ui/bench/issue-32062.rs:41:22: 41:30
        _19 = Token::<I>(const 1_i32);   // scope 0 at ui/bench/issue-32062.rs:41:32: 41:40
        _17 = Chain::<Token<I>, Token<I>>(move _18, move _19); // scope 0 at ui/bench/issue-32062.rs:41:16: 41:41
        _9 = <Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>> as Parser>::chain::<Chain<Token<I>, Token<I>>>(move _10, move _17) -> [return: bb2, unwind: bb13]; // scope 0 at ui/bench/issue-32062.rs:39:5: 41:42
                                         // mir::Constant
                                         // + span: ui/bench/issue-32062.rs:41:10: 41:15
                                         // + literal: Const { ty: fn(Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>) -> Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> {<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>> as Parser>::chain::<Chain<Token<I>, Token<I>>>}, val: Value(<ZST>) }
    }

    bb2: {
        _21 = Token::<I>(const 0_i32);   // scope 0 at ui/bench/issue-32062.rs:42:22: 42:30
        _22 = Token::<I>(const 1_i32);   // scope 0 at ui/bench/issue-32062.rs:42:32: 42:40
        _20 = Chain::<Token<I>, Token<I>>(move _21, move _22); // scope 0 at ui/bench/issue-32062.rs:42:16: 42:41
        _8 = <Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> as Parser>::chain::<Chain<Token<I>, Token<I>>>(move _9, move _20) -> [return: bb3, unwind: bb13]; // scope 0 at ui/bench/issue-32062.rs:39:5: 42:42
                                         // mir::Constant
                                         // + span: ui/bench/issue-32062.rs:42:10: 42:15
                                         // + literal: Const { ty: fn(Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>) -> Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> {<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> as Parser>::chain::<Chain<Token<I>, Token<I>>>}, val: Value(<ZST>) }
    }

    bb3: {
        _24 = Token::<I>(const 0_i32);   // scope 0 at ui/bench/issue-32062.rs:43:22: 43:30
        _25 = Token::<I>(const 1_i32);   // scope 0 at ui/bench/issue-32062.rs:43:32: 43:40
        _23 = Chain::<Token<I>, Token<I>>(move _24, move _25); // scope 0 at ui/bench/issue-32062.rs:43:16: 43:41
        _7 = <Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> as Parser>::chain::<Chain<Token<I>, Token<I>>>(move _8, move _23) -> [return: bb4, unwind: bb13]; // scope 0 at ui/bench/issue-32062.rs:39:5: 43:42
                                         // mir::Constant
                                         // + span: ui/bench/issue-32062.rs:43:10: 43:15
                                         // + literal: Const { ty: fn(Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>) -> Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> {<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> as Parser>::chain::<Chain<Token<I>, Token<I>>>}, val: Value(<ZST>) }
    }

    bb4: {
        _27 = Token::<I>(const 0_i32);   // scope 0 at ui/bench/issue-32062.rs:44:22: 44:30
        _28 = Token::<I>(const 1_i32);   // scope 0 at ui/bench/issue-32062.rs:44:32: 44:40
        _26 = Chain::<Token<I>, Token<I>>(move _27, move _28); // scope 0 at ui/bench/issue-32062.rs:44:16: 44:41
        _6 = <Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> as Parser>::chain::<Chain<Token<I>, Token<I>>>(move _7, move _26) -> [return: bb5, unwind: bb13]; // scope 0 at ui/bench/issue-32062.rs:39:5: 44:42
                                         // mir::Constant
                                         // + span: ui/bench/issue-32062.rs:44:10: 44:15
                                         // + literal: Const { ty: fn(Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>) -> Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> {<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> as Parser>::chain::<Chain<Token<I>, Token<I>>>}, val: Value(<ZST>) }
    }

    bb5: {
        _30 = Token::<I>(const 0_i32);   // scope 0 at ui/bench/issue-32062.rs:45:22: 45:30
        _31 = Token::<I>(const 1_i32);   // scope 0 at ui/bench/issue-32062.rs:45:32: 45:40
        _29 = Chain::<Token<I>, Token<I>>(move _30, move _31); // scope 0 at ui/bench/issue-32062.rs:45:16: 45:41
        _5 = <Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> as Parser>::chain::<Chain<Token<I>, Token<I>>>(move _6, move _29) -> [return: bb6, unwind: bb13]; // scope 0 at ui/bench/issue-32062.rs:39:5: 45:42
                                         // mir::Constant
                                         // + span: ui/bench/issue-32062.rs:45:10: 45:15
                                         // + literal: Const { ty: fn(Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>) -> Chain<Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> {<Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> as Parser>::chain::<Chain<Token<I>, Token<I>>>}, val: Value(<ZST>) }
    }

    bb6: {
        _33 = Token::<I>(const 0_i32);   // scope 0 at ui/bench/issue-32062.rs:46:22: 46:30
        _34 = Token::<I>(const 1_i32);   // scope 0 at ui/bench/issue-32062.rs:46:32: 46:40
        _32 = Chain::<Token<I>, Token<I>>(move _33, move _34); // scope 0 at ui/bench/issue-32062.rs:46:16: 46:41
        _4 = <Chain<Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> as Parser>::chain::<Chain<Token<I>, Token<I>>>(move _5, move _32) -> [return: bb7, unwind: bb13]; // scope 0 at ui/bench/issue-32062.rs:39:5: 46:42
                                         // mir::Constant
                                         // + span: ui/bench/issue-32062.rs:46:10: 46:15
                                         // + literal: Const { ty: fn(Chain<Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>) -> Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> {<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> as Parser>::chain::<Chain<Token<I>, Token<I>>>}, val: Value(<ZST>) }
    }

    bb7: {
        _36 = Token::<I>(const 0_i32);   // scope 0 at ui/bench/issue-32062.rs:47:22: 47:30
        _37 = Token::<I>(const 1_i32);   // scope 0 at ui/bench/issue-32062.rs:47:32: 47:40
        _35 = Chain::<Token<I>, Token<I>>(move _36, move _37); // scope 0 at ui/bench/issue-32062.rs:47:16: 47:41
        _3 = <Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> as Parser>::chain::<Chain<Token<I>, Token<I>>>(move _4, move _35) -> [return: bb8, unwind: bb13]; // scope 0 at ui/bench/issue-32062.rs:39:5: 47:42
                                         // mir::Constant
                                         // + span: ui/bench/issue-32062.rs:47:10: 47:15
                                         // + literal: Const { ty: fn(Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>) -> Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> {<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> as Parser>::chain::<Chain<Token<I>, Token<I>>>}, val: Value(<ZST>) }
    }

    bb8: {
        _40 = const false;               // scope 0 at ui/bench/issue-32062.rs:48:16: 48:17
        _38 = move _1;                   // scope 0 at ui/bench/issue-32062.rs:48:16: 48:17
        _2 = <Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> as Parser>::parse(move _3, move _38) -> [return: bb9, unwind: bb13]; // scope 0 at ui/bench/issue-32062.rs:39:5: 48:18
                                         // mir::Constant
                                         // + span: ui/bench/issue-32062.rs:48:10: 48:15
                                         // + literal: Const { ty: fn(Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, <Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> as Parser>::Input) -> Result<(<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> as Parser>::Output, <Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> as Parser>::Input), ()> {<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Chain<Token<I>, Token<I>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>>, Chain<Token<I>, Token<I>>> as Parser>::parse}, val: Value(<ZST>) }
    }

    bb9: {
        _0 = Result::<((((((((((i32, i32), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), I), ()>::map::<((), I), [closure@ui/bench/issue-32062.rs:49:14: 49:22]>(move _2, move _39) -> [return: bb10, unwind: bb13]; // scope 0 at ui/bench/issue-32062.rs:39:5: 49:31
                                         // mir::Constant
                                         // + span: ui/bench/issue-32062.rs:49:10: 49:13
                                         // + literal: Const { ty: fn(Result<((((((((((i32, i32), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), I), ()>, [closure@ui/bench/issue-32062.rs:49:14: 49:22]) -> Result<((), I), ()> {Result::<((((((((((i32, i32), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), I), ()>::map::<((), I), [closure@ui/bench/issue-32062.rs:49:14: 49:22]>}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at ui/bench/issue-32062.rs:50:2: 50:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/bench/issue-32062.rs:38:1: 50:2
    }

    bb12 (cleanup): {
        drop(_1) -> bb11;                // scope 0 at ui/bench/issue-32062.rs:50:1: 50:2
    }

    bb13 (cleanup): {
        switchInt(_40) -> [0: bb11, otherwise: bb12]; // scope 0 at ui/bench/issue-32062.rs:50:1: 50:2
    }
}

fn test::{closure#0}(_1: [closure@ui/bench/issue-32062.rs:49:14: 49:22], _2: ((((((((((i32, i32), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), (i32, i32)), I)) -> ((), I) {
    let mut _0: ((), I);                 // return place in scope 0 at ui/bench/issue-32062.rs:49:23: 49:23
    let _3: I;                           // in scope 0 at ui/bench/issue-32062.rs:49:19: 49:20
    let mut _4: ();                      // in scope 0 at ui/bench/issue-32062.rs:49:24: 49:26
    let mut _5: I;                       // in scope 0 at ui/bench/issue-32062.rs:49:28: 49:29
    scope 1 {
        debug i => _3;                   // in scope 1 at ui/bench/issue-32062.rs:49:19: 49:20
    }

    bb0: {
        _3 = move (_2.1: I);             // scope 0 at ui/bench/issue-32062.rs:49:19: 49:20
        _5 = move _3;                    // scope 1 at ui/bench/issue-32062.rs:49:28: 49:29
        _0 = (move _4, move _5);         // scope 1 at ui/bench/issue-32062.rs:49:23: 49:30
        return;                          // scope 0 at ui/bench/issue-32062.rs:49:30: 49:30
    }
}

fn Token(_1: <T as Iterator>::Item) -> Token<T> {
    let mut _0: Token<T>;                // return place in scope 0 at ui/bench/issue-32062.rs:18:1: 18:16

    bb0: {
        _0 = Token::<T>(move _1);        // scope 0 at ui/bench/issue-32062.rs:18:1: 18:16
        return;                          // scope 0 at ui/bench/issue-32062.rs:18:1: 18:16
    }
}

// MIR FOR CTFE
fn Token(_1: <T as Iterator>::Item) -> Token<T> {
    let mut _0: Token<T>;                // return place in scope 0 at ui/bench/issue-32062.rs:18:1: 18:16

    bb0: {
        _0 = Token::<T>(move _1);        // scope 0 at ui/bench/issue-32062.rs:18:1: 18:16
        return;                          // scope 0 at ui/bench/issue-32062.rs:18:1: 18:16
    }
}

fn Chain(_1: L, _2: R) -> Chain<L, R> {
    let mut _0: Chain<L, R>;             // return place in scope 0 at ui/bench/issue-32062.rs:28:1: 28:19

    bb0: {
        _0 = Chain::<L, R>(move _1, move _2); // scope 0 at ui/bench/issue-32062.rs:28:1: 28:19
        return;                          // scope 0 at ui/bench/issue-32062.rs:28:1: 28:19
    }
}

// MIR FOR CTFE
fn Chain(_1: L, _2: R) -> Chain<L, R> {
    let mut _0: Chain<L, R>;             // return place in scope 0 at ui/bench/issue-32062.rs:28:1: 28:19

    bb0: {
        _0 = Chain::<L, R>(move _1, move _2); // scope 0 at ui/bench/issue-32062.rs:28:1: 28:19
        return;                          // scope 0 at ui/bench/issue-32062.rs:28:1: 28:19
    }
}
