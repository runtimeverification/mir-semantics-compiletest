// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn unique() -> Box<dyn FnMut()> {
    let mut _0: std::boxed::Box<dyn std::ops::FnMut()>; // return place in scope 0 at ui/inference/newlambdas-ret-infer.rs:9:16: 9:40
    let mut _1: std::boxed::Box<[closure@ui/inference/newlambdas-ret-infer.rs:9:59: 9:61]>; // in scope 0 at ui/inference/newlambdas-ret-infer.rs:9:50: 9:65
    let mut _2: [closure@ui/inference/newlambdas-ret-infer.rs:9:59: 9:61]; // in scope 0 at ui/inference/newlambdas-ret-infer.rs:9:59: 9:64

    bb0: {
        _1 = Box::<[closure@ui/inference/newlambdas-ret-infer.rs:9:59: 9:61]>::new(move _2) -> bb1; // scope 0 at ui/inference/newlambdas-ret-infer.rs:9:50: 9:65
                                         // mir::Constant
                                         // + span: ui/inference/newlambdas-ret-infer.rs:9:50: 9:58
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([closure@ui/inference/newlambdas-ret-infer.rs:9:59: 9:61]) -> Box<[closure@ui/inference/newlambdas-ret-infer.rs:9:59: 9:61]> {Box::<[closure@ui/inference/newlambdas-ret-infer.rs:9:59: 9:61]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = move _1 as std::boxed::Box<dyn std::ops::FnMut()> (Pointer(Unsize)); // scope 0 at ui/inference/newlambdas-ret-infer.rs:9:50: 9:65
        return;                          // scope 0 at ui/inference/newlambdas-ret-infer.rs:9:68: 9:68
    }
}

fn unique::{closure#0}(_1: &mut [closure@ui/inference/newlambdas-ret-infer.rs:9:59: 9:61]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/inference/newlambdas-ret-infer.rs:9:62: 9:62

    bb0: {
        return;                          // scope 0 at ui/inference/newlambdas-ret-infer.rs:9:64: 9:64
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/inference/newlambdas-ret-infer.rs:11:15: 11:15

    bb0: {
        return;                          // scope 0 at ui/inference/newlambdas-ret-infer.rs:12:2: 12:2
    }
}
