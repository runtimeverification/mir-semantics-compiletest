// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/inference/type-infer-generalize-ty-var.rs:28:1: 28:43>::get(_1: &Wrap<T>) -> &dyn MyShow {
    debug self => _1;                    // in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:29:12: 29:17
    let mut _0: &dyn MyShow;             // return place in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:29:22: 29:45
    let mut _2: &dyn MyShow;             // in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:31:9: 31:11
    let _3: &dyn MyShow;                 // in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:31:9: 31:11
    let mut _4: &usize;                  // in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:31:9: 31:11
    let _5: &usize;                      // in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:31:9: 31:11
    let _6: &usize;                      // in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:31:10: 31:11

    bb0: {
        _6 = const {alloc1: &usize};     // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:31:10: 31:11
                                         // mir::Constant
                                         // + span: ui/inference/type-infer-generalize-ty-var.rs:31:10: 31:11
                                         // + literal: Const { ty: &usize, val: Value(Scalar(alloc1)) }
        _5 = _6;                         // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:31:9: 31:11
        _4 = _5;                         // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:31:9: 31:11
        _3 = move _4 as &dyn MyShow (Pointer(Unsize)); // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:31:9: 31:11
        _2 = _3;                         // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:31:9: 31:11
        _0 = move _2 as &dyn MyShow (Pointer(Unsize)); // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:31:9: 31:11
        return;                          // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:32:6: 32:6
    }
}

alloc1 (static: <Wrap<T> as Get<(dyn MyShow + 'static)>>::get::x, size: 8, align: 8) {
    2a 00 00 00 00 00 00 00                         │ *.......
}

static <impl at ui/inference/type-infer-generalize-ty-var.rs:28:1: 28:43>::get::x: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:30:19: 30:24

    bb0: {
        _0 = const 42_usize;             // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:30:27: 30:29
        return;                          // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:30:9: 30:30
    }
}

fn <impl at ui/inference/type-infer-generalize-ty-var.rs:35:1: 35:28>::get(_1: &Wrap<U>) -> &usize {
    debug self => _1;                    // in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:36:12: 36:17
    let mut _0: &usize;                  // return place in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:38:9: 38:11
    let _2: &usize;                      // in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:38:10: 38:11

    bb0: {
        _2 = const {alloc2: &usize};     // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:38:10: 38:11
                                         // mir::Constant
                                         // + span: ui/inference/type-infer-generalize-ty-var.rs:38:10: 38:11
                                         // + literal: Const { ty: &usize, val: Value(Scalar(alloc2)) }
        _0 = _2;                         // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:38:9: 38:11
        return;                          // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:39:6: 39:6
    }
}

alloc2 (static: <Wrap<U> as Get<usize>>::get::x, size: 8, align: 8) {
    37 00 00 00 00 00 00 00                         │ 7.......
}

static <impl at ui/inference/type-infer-generalize-ty-var.rs:35:1: 35:28>::get::x: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:37:19: 37:24

    bb0: {
        _0 = const 55_usize;             // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:37:27: 37:29
        return;                          // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:37:9: 37:30
    }
}

fn MyShow::dummy(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:42:25: 42:30
    let mut _0: ();                      // return place in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:42:32: 42:32

    bb0: {
        return;                          // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:42:35: 42:35
    }
}

fn constrain(_1: RefCell<&dyn MyShow>) -> () {
    debug rc => _1;                      // in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:45:18: 45:20
    let mut _0: ();                      // return place in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:45:54: 45:54

    bb0: {
        return;                          // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:45:57: 45:57
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:47:11: 47:11
    let mut _1: Wrap<T>;                 // in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:48:9: 48:23
    let mut _3: &Wrap<T>;                // in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:51:31: 51:42
    let _4: &Wrap<T>;                    // in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:51:31: 51:42
    let mut _6: &dyn MyShow;             // in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:52:40: 52:46
    let _7: ();                          // in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:53:9: 53:31
    let mut _8: std::cell::RefCell<&dyn MyShow>; // in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:53:19: 53:30
    let mut _9: Wrap<T>;                 // in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:55:18: 55:29
    scope 1 {
        debug collection => _1;          // in scope 1 at ui/inference/type-infer-generalize-ty-var.rs:48:9: 48:23
        let _2: &dyn MyShow;             // in scope 1 at ui/inference/type-infer-generalize-ty-var.rs:51:13: 51:19
        scope 2 {
            debug __arg0 => _2;          // in scope 2 at ui/inference/type-infer-generalize-ty-var.rs:51:13: 51:19
            let _5: std::cell::RefCell<&dyn MyShow>; // in scope 2 at ui/inference/type-infer-generalize-ty-var.rs:52:13: 52:24
            scope 3 {
                debug __args_cell => _5; // in scope 3 at ui/inference/type-infer-generalize-ty-var.rs:52:13: 52:24
            }
        }
    }

    bb0: {
        _1 = Wrap::<T>::WrapNone;        // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:48:35: 48:43
        _4 = &_1;                        // scope 1 at ui/inference/type-infer-generalize-ty-var.rs:51:31: 51:42
        _3 = _4;                         // scope 1 at ui/inference/type-infer-generalize-ty-var.rs:51:31: 51:42
        _2 = <Wrap<T> as Get<dyn MyShow>>::get(move _3) -> bb1; // scope 1 at ui/inference/type-infer-generalize-ty-var.rs:51:22: 51:43
                                         // mir::Constant
                                         // + span: ui/inference/type-infer-generalize-ty-var.rs:51:22: 51:30
                                         // + literal: Const { ty: for<'a> fn(&'a Wrap<T>) -> &'a dyn MyShow {<Wrap<T> as Get<dyn MyShow>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _2;                         // scope 2 at ui/inference/type-infer-generalize-ty-var.rs:52:40: 52:46
        _5 = RefCell::<&dyn MyShow>::new(move _6) -> bb2; // scope 2 at ui/inference/type-infer-generalize-ty-var.rs:52:27: 52:47
                                         // mir::Constant
                                         // + span: ui/inference/type-infer-generalize-ty-var.rs:52:27: 52:39
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&dyn MyShow) -> RefCell<&dyn MyShow> {RefCell::<&dyn MyShow>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = move _5;                    // scope 3 at ui/inference/type-infer-generalize-ty-var.rs:53:19: 53:30
        _7 = constrain(move _8) -> bb3;  // scope 3 at ui/inference/type-infer-generalize-ty-var.rs:53:9: 53:31
                                         // mir::Constant
                                         // + span: ui/inference/type-infer-generalize-ty-var.rs:53:9: 53:18
                                         // + literal: Const { ty: for<'a> fn(RefCell<&'a (dyn MyShow + 'a)>) {constrain}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = const Wrap::<T>::WrapSome(T); // scope 1 at ui/inference/type-infer-generalize-ty-var.rs:55:18: 55:29
                                         // mir::Constant
                                         // + span: ui/inference/type-infer-generalize-ty-var.rs:55:18: 55:29
                                         // + literal: Const { ty: Wrap<T>, val: Value(Scalar(0x00)) }
        _1 = move _9;                    // scope 1 at ui/inference/type-infer-generalize-ty-var.rs:55:5: 55:29
        return;                          // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:56:2: 56:2
    }
}

fn Wrap::WrapSome(_1: A) -> Wrap<A> {
    let mut _0: Wrap<A>;                 // return place in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:15:5: 15:13

    bb0: {
        _0 = Wrap::<A>::WrapSome(move _1); // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:15:5: 15:13
        return;                          // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:15:5: 15:13
    }
}

// MIR FOR CTFE
fn Wrap::WrapSome(_1: A) -> Wrap<A> {
    let mut _0: Wrap<A>;                 // return place in scope 0 at ui/inference/type-infer-generalize-ty-var.rs:15:5: 15:13

    bb0: {
        _0 = Wrap::<A>::WrapSome(move _1); // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:15:5: 15:13
        return;                          // scope 0 at ui/inference/type-infer-generalize-ty-var.rs:15:5: 15:13
    }
}
