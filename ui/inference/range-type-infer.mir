// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<bool>;
    let mut _2: std::iter::Map<std::ops::Range<u64>, [closure@ui/inference/range-type-infer.rs:10:25: 10:28]>;
    let mut _3: std::ops::Range<u64>;
    let mut _4: (&bool, &bool);
    let mut _5: &bool;
    let _6: &bool;
    let mut _7: &std::vec::Vec<bool>;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: std::iter::Map<std::ops::Range<u64>, [closure@ui/inference/range-type-infer.rs:12:25: 12:28]>;
    let mut _19: std::ops::Range<u64>;
    let mut _20: (&bool, &bool);
    let mut _21: &bool;
    let _22: &bool;
    let mut _23: &std::vec::Vec<bool>;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: std::ops::Range<u8>;
    let mut _35: (&usize, &usize);
    let mut _36: &usize;
    let _37: usize;
    let mut _38: &std::vec::Vec<u8>;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: usize;
    let mut _44: usize;
    let _46: !;
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _48: std::ops::Range<i32>;
    let mut _49: std::ops::Range<i32>;
    let mut _51: std::option::Option<i32>;
    let mut _52: &mut std::ops::Range<i32>;
    let mut _53: isize;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: std::ops::Range<i32>;
    let mut _60: std::ops::Range<i32>;
    let mut _62: std::option::Option<i32>;
    let mut _63: &mut std::ops::Range<i32>;
    let mut _64: isize;
    let mut _67: std::ops::Range<usize>;
    let mut _68: std::ops::Range<usize>;
    let mut _70: std::option::Option<usize>;
    let mut _71: &mut std::ops::Range<usize>;
    let mut _72: isize;
    let mut _74: usize;
    let mut _75: bool;
    scope 1 {
        debug xs => _1;
        let _8: &bool;
        let _9: &bool;
        let _17: std::vec::Vec<bool>;
        let mut _78: &bool;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug xs => _17;
            let _24: &bool;
            let _25: &bool;
            let _33: std::vec::Vec<u8>;
            let mut _77: &bool;
            scope 5 {
                debug left_val => _24;
                debug right_val => _25;
                let _30: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _30;
                }
            }
            scope 7 {
                debug xs => _33;
                let _39: &usize;
                let _40: &usize;
                let mut _50: std::ops::Range<i32>;
                let mut _61: std::ops::Range<i32>;
                let _66: [bool; 2];
                let mut _76: &usize;
                scope 8 {
                    debug left_val => _39;
                    debug right_val => _40;
                    let _45: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _45;
                    }
                }
                scope 10 {
                    debug iter => _50;
                    let _54: i32;
                    scope 11 {
                        debug x => _54;
                    }
                }
                scope 12 {
                    debug iter => _61;
                    let _65: i32;
                    scope 13 {
                        debug x => _65;
                    }
                }
                scope 14 {
                    debug array => _66;
                    let mut _69: std::ops::Range<usize>;
                    scope 15 {
                        debug iter => _69;
                        let _73: usize;
                        scope 16 {
                            debug i => _73;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = std::ops::Range::<u64> { start: const 0_u64, end: const 8_u64 };
        _2 = <std::ops::Range<u64> as Iterator>::map::<bool, [closure@ui/inference/range-type-infer.rs:10:25: 10:28]>(move _3, const ZeroSized: [closure@ui/inference/range-type-infer.rs:10:25: 10:28]) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = <Map<std::ops::Range<u64>, [closure@ui/inference/range-type-infer.rs:10:25: 10:28]> as Iterator>::collect::<Vec<bool>>(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = &_1;
        _6 = <Vec<bool> as Index<usize>>::index(move _7, const 1_usize) -> [return: bb3, unwind: bb37];
    }

    bb3: {
        _5 = _6;
        _78 = const _;
        _4 = (move _5, _78);
        _8 = (_4.0: &bool);
        _9 = (_4.1: &bool);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<bool, bool>(move _14, _8, _9, move _16) -> bb37;
    }

    bb5: {
        _19 = std::ops::Range::<u64> { start: const 0_u64, end: const 8_u64 };
        _18 = <std::ops::Range<u64> as Iterator>::map::<bool, [closure@ui/inference/range-type-infer.rs:12:25: 12:28]>(move _19, const ZeroSized: [closure@ui/inference/range-type-infer.rs:12:25: 12:28]) -> [return: bb6, unwind: bb37];
    }

    bb6: {
        _17 = <Map<std::ops::Range<u64>, [closure@ui/inference/range-type-infer.rs:12:25: 12:28]> as Iterator>::collect::<Vec<bool>>(move _18) -> [return: bb7, unwind: bb37];
    }

    bb7: {
        _23 = &_17;
        _22 = <Vec<bool> as Index<usize>>::index(move _23, const 1_usize) -> [return: bb8, unwind: bb36];
    }

    bb8: {
        _21 = _22;
        _77 = const _;
        _20 = (move _21, _77);
        _24 = (_20.0: &bool);
        _25 = (_20.1: &bool);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<bool, bool>(move _30, _24, _25, move _32) -> bb36;
    }

    bb10: {
        _34 = std::ops::Range::<u8> { start: const 0_u8, end: const 10_u8 };
        _33 = <std::ops::Range<u8> as Iterator>::collect::<Vec<u8>>(move _34) -> [return: bb11, unwind: bb36];
    }

    bb11: {
        _38 = &_33;
        _37 = Vec::<u8>::len(move _38) -> [return: bb12, unwind: bb35];
    }

    bb12: {
        _36 = &_37;
        _76 = const _;
        _35 = (move _36, _76);
        _39 = (_35.0: &usize);
        _40 = (_35.1: &usize);
        _43 = (*_39);
        _44 = (*_40);
        _42 = Eq(move _43, move _44);
        _41 = Not(move _42);
        switchInt(move _41) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _45 = core::panicking::AssertKind::Eq;
        _47 = Option::<Arguments<'_>>::None;
        _46 = core::panicking::assert_failed::<usize, usize>(move _45, _39, _40, move _47) -> bb35;
    }

    bb14: {
        _49 = std::ops::Range::<i32> { start: const 0_i32, end: const 10_i32 };
        _48 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _49) -> [return: bb15, unwind: bb35];
    }

    bb15: {
        _50 = move _48;
        goto -> bb16;
    }

    bb16: {
        _52 = &mut _50;
        _51 = <std::ops::Range<i32> as Iterator>::next(_52) -> [return: bb17, unwind: bb35];
    }

    bb17: {
        _53 = discriminant(_51);
        switchInt(move _53) -> [0: bb20, 1: bb18, otherwise: bb19];
    }

    bb18: {
        _54 = ((_51 as Some).0: i32);
        _55 = Eq(const 2_i32, const 0_i32);
        assert(!move _55, "attempt to calculate the remainder of `{}` with a divisor of zero", _54) -> [success: bb21, unwind: bb35];
    }

    bb19: {
        unreachable;
    }

    bb20: {
        _60 = std::ops::Range::<i32> { start: const 0_i32, end: const 100_i32 };
        _59 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _60) -> [return: bb22, unwind: bb35];
    }

    bb21: {
        _56 = Eq(const 2_i32, const -1_i32);
        _57 = Eq(_54, const i32::MIN);
        _58 = BitAnd(move _56, move _57);
        assert(!move _58, "attempt to compute the remainder of `{} % {}`, which would overflow", _54, const 2_i32) -> [success: bb16, unwind: bb35];
    }

    bb22: {
        _61 = move _59;
        goto -> bb23;
    }

    bb23: {
        _63 = &mut _61;
        _62 = <std::ops::Range<i32> as Iterator>::next(_63) -> [return: bb24, unwind: bb35];
    }

    bb24: {
        _64 = discriminant(_62);
        switchInt(move _64) -> [0: bb26, 1: bb25, otherwise: bb19];
    }

    bb25: {
        _65 = ((_62 as Some).0: i32);
        goto -> bb23;
    }

    bb26: {
        _66 = [const true, const false];
        _68 = std::ops::Range::<usize> { start: const 0_usize, end: const 1_usize };
        _67 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _68) -> [return: bb27, unwind: bb35];
    }

    bb27: {
        _69 = move _67;
        goto -> bb28;
    }

    bb28: {
        _71 = &mut _69;
        _70 = <std::ops::Range<usize> as Iterator>::next(_71) -> [return: bb29, unwind: bb35];
    }

    bb29: {
        _72 = discriminant(_70);
        switchInt(move _72) -> [0: bb31, 1: bb30, otherwise: bb19];
    }

    bb30: {
        _73 = ((_70 as Some).0: usize);
        _74 = const 2_usize;
        _75 = Lt(_73, _74);
        assert(move _75, "index out of bounds: the length is {} but the index is {}", move _74, _73) -> [success: bb28, unwind: bb35];
    }

    bb31: {
        drop(_33) -> [return: bb32, unwind: bb36];
    }

    bb32: {
        drop(_17) -> [return: bb33, unwind: bb37];
    }

    bb33: {
        drop(_1) -> [return: bb34, unwind continue];
    }

    bb34: {
        return;
    }

    bb35 (cleanup): {
        drop(_33) -> [return: bb36, unwind terminate];
    }

    bb36 (cleanup): {
        drop(_17) -> [return: bb37, unwind terminate];
    }

    bb37 (cleanup): {
        drop(_1) -> [return: bb38, unwind terminate];
    }

    bb38 (cleanup): {
        resume;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 10_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/inference/range-type-infer.rs:10:25: 10:28], _2: u64) -> bool {
    debug i => _2;
    let mut _0: bool;

    bb0: {
        _0 = Eq(_2, const 1_u64);
        return;
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/inference/range-type-infer.rs:12:25: 12:28], _2: u64) -> bool {
    debug i => _2;
    let mut _0: bool;

    bb0: {
        _0 = Eq(const 1_u64, _2);
        return;
    }
}
