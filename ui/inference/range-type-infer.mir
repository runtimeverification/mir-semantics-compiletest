// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/inference/range-type-infer.rs:9:11: 9:11
    let _1: std::vec::Vec<bool>;         // in scope 0 at ui/inference/range-type-infer.rs:10:9: 10:11
    let mut _2: std::iter::Map<std::ops::Range<u64>, [closure@ui/inference/range-type-infer.rs:10:25: 10:28]>; // in scope 0 at ui/inference/range-type-infer.rs:10:14: 10:39
    let mut _3: std::ops::Range<u64>;    // in scope 0 at ui/inference/range-type-infer.rs:10:14: 10:20
    let mut _4: [closure@ui/inference/range-type-infer.rs:10:25: 10:28]; // in scope 0 at ui/inference/range-type-infer.rs:10:25: 10:38
    let mut _5: (&bool, &bool);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _7: &bool;                       // in scope 0 at ui/inference/range-type-infer.rs:11:16: 11:21
    let mut _8: &std::vec::Vec<bool>;    // in scope 0 at ui/inference/range-type-infer.rs:11:16: 11:18
    let mut _9: &bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _25: std::iter::Map<std::ops::Range<u64>, [closure@ui/inference/range-type-infer.rs:12:25: 12:28]>; // in scope 0 at ui/inference/range-type-infer.rs:12:14: 12:39
    let mut _26: std::ops::Range<u64>;   // in scope 0 at ui/inference/range-type-infer.rs:12:14: 12:20
    let mut _27: [closure@ui/inference/range-type-infer.rs:12:25: 12:28]; // in scope 0 at ui/inference/range-type-infer.rs:12:25: 12:38
    let mut _28: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _29: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _30: &bool;                      // in scope 0 at ui/inference/range-type-infer.rs:13:16: 13:21
    let mut _31: &std::vec::Vec<bool>;   // in scope 0 at ui/inference/range-type-infer.rs:13:16: 13:18
    let mut _32: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _35: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _38: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _40: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _41: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _42: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _43: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _44: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _45: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _48: std::ops::Range<u8>;    // in scope 0 at ui/inference/range-type-infer.rs:14:23: 14:30
    let mut _49: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _50: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _51: usize;                      // in scope 0 at ui/inference/range-type-infer.rs:15:16: 15:24
    let mut _52: &std::vec::Vec<u8>;     // in scope 0 at ui/inference/range-type-infer.rs:15:16: 15:24
    let mut _53: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _56: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _57: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _58: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _59: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _61: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _62: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _63: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _64: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _65: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _66: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _67: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _68: std::ops::Range<i32>;   // in scope 0 at ui/inference/range-type-infer.rs:17:14: 17:19
    let mut _69: std::ops::Range<i32>;   // in scope 0 at ui/inference/range-type-infer.rs:17:14: 17:19
    let mut _71: std::option::Option<i32>; // in scope 0 at ui/inference/range-type-infer.rs:17:14: 17:19
    let mut _72: &mut std::ops::Range<i32>; // in scope 0 at ui/inference/range-type-infer.rs:17:14: 17:19
    let mut _73: &mut std::ops::Range<i32>; // in scope 0 at ui/inference/range-type-infer.rs:17:14: 17:19
    let mut _74: isize;                  // in scope 0 at ui/inference/range-type-infer.rs:17:5: 17:30
    let mut _76: std::ops::Range<i32>;   // in scope 0 at ui/inference/range-type-infer.rs:18:14: 18:20
    let mut _77: std::ops::Range<i32>;   // in scope 0 at ui/inference/range-type-infer.rs:18:14: 18:20
    let mut _79: std::option::Option<i32>; // in scope 0 at ui/inference/range-type-infer.rs:18:14: 18:20
    let mut _80: &mut std::ops::Range<i32>; // in scope 0 at ui/inference/range-type-infer.rs:18:14: 18:20
    let mut _81: &mut std::ops::Range<i32>; // in scope 0 at ui/inference/range-type-infer.rs:18:14: 18:20
    let mut _82: isize;                  // in scope 0 at ui/inference/range-type-infer.rs:18:5: 18:34
    let mut _85: std::ops::Range<usize>; // in scope 0 at ui/inference/range-type-infer.rs:21:14: 21:18
    let mut _86: std::ops::Range<usize>; // in scope 0 at ui/inference/range-type-infer.rs:21:14: 21:18
    let mut _88: std::option::Option<usize>; // in scope 0 at ui/inference/range-type-infer.rs:21:14: 21:18
    let mut _89: &mut std::ops::Range<usize>; // in scope 0 at ui/inference/range-type-infer.rs:21:14: 21:18
    let mut _90: &mut std::ops::Range<usize>; // in scope 0 at ui/inference/range-type-infer.rs:21:14: 21:18
    let mut _91: isize;                  // in scope 0 at ui/inference/range-type-infer.rs:21:5: 21:32
    let _93: usize;                      // in scope 0 at ui/inference/range-type-infer.rs:21:27: 21:28
    let mut _94: usize;                  // in scope 0 at ui/inference/range-type-infer.rs:21:21: 21:29
    let mut _95: bool;                   // in scope 0 at ui/inference/range-type-infer.rs:21:21: 21:29
    scope 1 {
        debug xs => _1;                  // in scope 1 at ui/inference/range-type-infer.rs:10:9: 10:11
        let _10: &bool;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _11: &bool;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _24: std::vec::Vec<bool>;    // in scope 1 at ui/inference/range-type-infer.rs:12:9: 12:11
        let mut _98: &bool;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _10;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _11;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _16: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _16;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug xs => _24;             // in scope 4 at ui/inference/range-type-infer.rs:12:9: 12:11
            let _33: &bool;              // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _34: &bool;              // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _47: std::vec::Vec<u8>;  // in scope 4 at ui/inference/range-type-infer.rs:14:9: 14:11
            let mut _97: &bool;          // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 5 {
                debug left_val => _33;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _34;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _39: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 6 {
                    debug kind => _39;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 7 {
                debug xs => _47;         // in scope 7 at ui/inference/range-type-infer.rs:14:9: 14:11
                let _54: &usize;         // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _55: &usize;         // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _70: std::ops::Range<i32>; // in scope 7 at ui/inference/range-type-infer.rs:17:14: 17:19
                let mut _78: std::ops::Range<i32>; // in scope 7 at ui/inference/range-type-infer.rs:18:14: 18:20
                let _84: [bool; 2];      // in scope 7 at ui/inference/range-type-infer.rs:20:9: 20:14
                let mut _96: &usize;     // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 8 {
                    debug left_val => _54; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _55; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _60: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 9 {
                        debug kind => _60; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 10 {
                    debug iter => _70;   // in scope 10 at ui/inference/range-type-infer.rs:17:14: 17:19
                    let _75: i32;        // in scope 10 at ui/inference/range-type-infer.rs:17:9: 17:10
                    scope 11 {
                        debug x => _75;  // in scope 11 at ui/inference/range-type-infer.rs:17:9: 17:10
                    }
                }
                scope 12 {
                    debug iter => _78;   // in scope 12 at ui/inference/range-type-infer.rs:18:14: 18:20
                    let _83: i32;        // in scope 12 at ui/inference/range-type-infer.rs:18:9: 18:10
                    scope 13 {
                        debug x => _83;  // in scope 13 at ui/inference/range-type-infer.rs:18:9: 18:10
                    }
                }
                scope 14 {
                    debug array => _84;  // in scope 14 at ui/inference/range-type-infer.rs:20:9: 20:14
                    let mut _87: std::ops::Range<usize>; // in scope 14 at ui/inference/range-type-infer.rs:21:14: 21:18
                    scope 15 {
                        debug iter => _87; // in scope 15 at ui/inference/range-type-infer.rs:21:14: 21:18
                        let _92: usize;  // in scope 15 at ui/inference/range-type-infer.rs:21:9: 21:10
                        scope 16 {
                            debug i => _92; // in scope 16 at ui/inference/range-type-infer.rs:21:9: 21:10
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = std::ops::Range::<u64> { start: const 0_u64, end: const 8_u64 }; // scope 0 at ui/inference/range-type-infer.rs:10:14: 10:20
        _2 = <std::ops::Range<u64> as Iterator>::map::<bool, [closure@ui/inference/range-type-infer.rs:10:25: 10:28]>(move _3, move _4) -> bb1; // scope 0 at ui/inference/range-type-infer.rs:10:14: 10:39
                                         // mir::Constant
                                         // + span: ui/inference/range-type-infer.rs:10:21: 10:24
                                         // + literal: Const { ty: fn(std::ops::Range<u64>, [closure@ui/inference/range-type-infer.rs:10:25: 10:28]) -> Map<std::ops::Range<u64>, [closure@ui/inference/range-type-infer.rs:10:25: 10:28]> {<std::ops::Range<u64> as Iterator>::map::<bool, [closure@ui/inference/range-type-infer.rs:10:25: 10:28]>}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <Map<std::ops::Range<u64>, [closure@ui/inference/range-type-infer.rs:10:25: 10:28]> as Iterator>::collect::<Vec<bool>>(move _2) -> bb2; // scope 0 at ui/inference/range-type-infer.rs:10:14: 10:59
                                         // mir::Constant
                                         // + span: ui/inference/range-type-infer.rs:10:40: 10:47
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Map<std::ops::Range<u64>, [closure@ui/inference/range-type-infer.rs:10:25: 10:28]>) -> Vec<bool> {<Map<std::ops::Range<u64>, [closure@ui/inference/range-type-infer.rs:10:25: 10:28]> as Iterator>::collect::<Vec<bool>>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &_1;                        // scope 1 at ui/inference/range-type-infer.rs:11:16: 11:18
        _7 = <Vec<bool> as Index<usize>>::index(move _8, const 1_usize) -> [return: bb3, unwind: bb38]; // scope 1 at ui/inference/range-type-infer.rs:11:16: 11:21
                                         // mir::Constant
                                         // + span: ui/inference/range-type-infer.rs:11:16: 11:21
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<bool>, usize) -> &'a <Vec<bool> as Index<usize>>::Output {<Vec<bool> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = _7;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _98 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &bool, val: Unevaluated(main, [], Some(promoted[2])) }
        _9 = _98;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _9);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_5.0: &bool);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_5.1: &bool);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const true;                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb5, otherwise: bb4]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<bool, bool>(move _18, move _19, move _21, move _23) -> bb38; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb5: {
        _26 = std::ops::Range::<u64> { start: const 0_u64, end: const 8_u64 }; // scope 1 at ui/inference/range-type-infer.rs:12:14: 12:20
        _25 = <std::ops::Range<u64> as Iterator>::map::<bool, [closure@ui/inference/range-type-infer.rs:12:25: 12:28]>(move _26, move _27) -> [return: bb6, unwind: bb38]; // scope 1 at ui/inference/range-type-infer.rs:12:14: 12:39
                                         // mir::Constant
                                         // + span: ui/inference/range-type-infer.rs:12:21: 12:24
                                         // + literal: Const { ty: fn(std::ops::Range<u64>, [closure@ui/inference/range-type-infer.rs:12:25: 12:28]) -> Map<std::ops::Range<u64>, [closure@ui/inference/range-type-infer.rs:12:25: 12:28]> {<std::ops::Range<u64> as Iterator>::map::<bool, [closure@ui/inference/range-type-infer.rs:12:25: 12:28]>}, val: Value(<ZST>) }
    }

    bb6: {
        _24 = <Map<std::ops::Range<u64>, [closure@ui/inference/range-type-infer.rs:12:25: 12:28]> as Iterator>::collect::<Vec<bool>>(move _25) -> [return: bb7, unwind: bb38]; // scope 1 at ui/inference/range-type-infer.rs:12:14: 12:59
                                         // mir::Constant
                                         // + span: ui/inference/range-type-infer.rs:12:40: 12:47
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Map<std::ops::Range<u64>, [closure@ui/inference/range-type-infer.rs:12:25: 12:28]>) -> Vec<bool> {<Map<std::ops::Range<u64>, [closure@ui/inference/range-type-infer.rs:12:25: 12:28]> as Iterator>::collect::<Vec<bool>>}, val: Value(<ZST>) }
    }

    bb7: {
        _31 = &_24;                      // scope 4 at ui/inference/range-type-infer.rs:13:16: 13:18
        _30 = <Vec<bool> as Index<usize>>::index(move _31, const 1_usize) -> [return: bb8, unwind: bb37]; // scope 4 at ui/inference/range-type-infer.rs:13:16: 13:21
                                         // mir::Constant
                                         // + span: ui/inference/range-type-infer.rs:13:16: 13:21
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<bool>, usize) -> &'a <Vec<bool> as Index<usize>>::Output {<Vec<bool> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb8: {
        _29 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _97 = const _;                   // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &bool, val: Unevaluated(main, [], Some(promoted[1])) }
        _32 = _97;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _28 = (move _29, move _32);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _33 = (_28.0: &bool);            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _34 = (_28.1: &bool);            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _37 = (*_33);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _38 = const true;                // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _36 = Eq(move _37, move _38);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _35 = Not(move _36);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _35) -> [0: bb10, otherwise: bb9]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _39 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _41 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _43 = _33;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _42 = _43;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _45 = _34;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _44 = _45;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _46 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _40 = core::panicking::assert_failed::<bool, bool>(move _41, move _42, move _44, move _46) -> bb37; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb10: {
        _48 = std::ops::Range::<u8> { start: const 0_u8, end: const 10_u8 }; // scope 4 at ui/inference/range-type-infer.rs:14:23: 14:30
        _47 = <std::ops::Range<u8> as Iterator>::collect::<Vec<u8>>(move _48) -> [return: bb11, unwind: bb37]; // scope 4 at ui/inference/range-type-infer.rs:14:23: 14:40
                                         // mir::Constant
                                         // + span: ui/inference/range-type-infer.rs:14:31: 14:38
                                         // + literal: Const { ty: fn(std::ops::Range<u8>) -> Vec<u8> {<std::ops::Range<u8> as Iterator>::collect::<Vec<u8>>}, val: Value(<ZST>) }
    }

    bb11: {
        _52 = &_47;                      // scope 7 at ui/inference/range-type-infer.rs:15:16: 15:24
        _51 = Vec::<u8>::len(move _52) -> [return: bb12, unwind: bb36]; // scope 7 at ui/inference/range-type-infer.rs:15:16: 15:24
                                         // mir::Constant
                                         // + span: ui/inference/range-type-infer.rs:15:19: 15:22
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> usize {Vec::<u8>::len}, val: Value(<ZST>) }
    }

    bb12: {
        _50 = &_51;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _96 = const _;                   // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _53 = _96;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _49 = (move _50, move _53);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _54 = (_49.0: &usize);           // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _55 = (_49.1: &usize);           // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _58 = (*_54);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _59 = const 10_usize;            // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _57 = Eq(move _58, move _59);    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _56 = Not(move _57);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _56) -> [0: bb14, otherwise: bb13]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _60 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _62 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _64 = _54;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _63 = _64;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _66 = _55;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _65 = _66;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _67 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _61 = core::panicking::assert_failed::<usize, usize>(move _62, move _63, move _65, move _67) -> bb36; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb14: {
        _69 = std::ops::Range::<i32> { start: const 0_i32, end: const 10_i32 }; // scope 7 at ui/inference/range-type-infer.rs:17:14: 17:19
        _68 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _69) -> [return: bb15, unwind: bb36]; // scope 7 at ui/inference/range-type-infer.rs:17:14: 17:19
                                         // mir::Constant
                                         // + span: ui/inference/range-type-infer.rs:17:14: 17:19
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb15: {
        _70 = move _68;                  // scope 7 at ui/inference/range-type-infer.rs:17:14: 17:19
        goto -> bb16;                    // scope 10 at ui/inference/range-type-infer.rs:17:5: 17:30
    }

    bb16: {
        _73 = &mut _70;                  // scope 10 at ui/inference/range-type-infer.rs:17:14: 17:19
        _72 = &mut (*_73);               // scope 10 at ui/inference/range-type-infer.rs:17:14: 17:19
        _71 = <std::ops::Range<i32> as Iterator>::next(move _72) -> [return: bb17, unwind: bb36]; // scope 10 at ui/inference/range-type-infer.rs:17:14: 17:19
                                         // mir::Constant
                                         // + span: ui/inference/range-type-infer.rs:17:14: 17:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb17: {
        _74 = discriminant(_71);         // scope 10 at ui/inference/range-type-infer.rs:17:14: 17:19
        switchInt(move _74) -> [0: bb20, 1: bb18, otherwise: bb19]; // scope 10 at ui/inference/range-type-infer.rs:17:14: 17:19
    }

    bb18: {
        _75 = ((_71 as Some).0: i32);    // scope 10 at ui/inference/range-type-infer.rs:17:9: 17:10
        goto -> bb16;                    // scope 10 at ui/inference/range-type-infer.rs:17:5: 17:30
    }

    bb19: {
        unreachable;                     // scope 10 at ui/inference/range-type-infer.rs:17:14: 17:19
    }

    bb20: {
        _77 = std::ops::Range::<i32> { start: const 0_i32, end: const 100_i32 }; // scope 7 at ui/inference/range-type-infer.rs:18:14: 18:20
        _76 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _77) -> [return: bb21, unwind: bb36]; // scope 7 at ui/inference/range-type-infer.rs:18:14: 18:20
                                         // mir::Constant
                                         // + span: ui/inference/range-type-infer.rs:18:14: 18:20
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb21: {
        _78 = move _76;                  // scope 7 at ui/inference/range-type-infer.rs:18:14: 18:20
        goto -> bb22;                    // scope 12 at ui/inference/range-type-infer.rs:18:5: 18:34
    }

    bb22: {
        _81 = &mut _78;                  // scope 12 at ui/inference/range-type-infer.rs:18:14: 18:20
        _80 = &mut (*_81);               // scope 12 at ui/inference/range-type-infer.rs:18:14: 18:20
        _79 = <std::ops::Range<i32> as Iterator>::next(move _80) -> [return: bb23, unwind: bb36]; // scope 12 at ui/inference/range-type-infer.rs:18:14: 18:20
                                         // mir::Constant
                                         // + span: ui/inference/range-type-infer.rs:18:14: 18:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb23: {
        _82 = discriminant(_79);         // scope 12 at ui/inference/range-type-infer.rs:18:14: 18:20
        switchInt(move _82) -> [0: bb26, 1: bb24, otherwise: bb25]; // scope 12 at ui/inference/range-type-infer.rs:18:14: 18:20
    }

    bb24: {
        _83 = ((_79 as Some).0: i32);    // scope 12 at ui/inference/range-type-infer.rs:18:9: 18:10
        goto -> bb22;                    // scope 12 at ui/inference/range-type-infer.rs:18:5: 18:34
    }

    bb25: {
        unreachable;                     // scope 12 at ui/inference/range-type-infer.rs:18:14: 18:20
    }

    bb26: {
        _84 = [const true, const false]; // scope 7 at ui/inference/range-type-infer.rs:20:17: 20:30
        _86 = std::ops::Range::<usize> { start: const 0_usize, end: const 1_usize }; // scope 14 at ui/inference/range-type-infer.rs:21:14: 21:18
        _85 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _86) -> [return: bb27, unwind: bb36]; // scope 14 at ui/inference/range-type-infer.rs:21:14: 21:18
                                         // mir::Constant
                                         // + span: ui/inference/range-type-infer.rs:21:14: 21:18
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb27: {
        _87 = move _85;                  // scope 14 at ui/inference/range-type-infer.rs:21:14: 21:18
        goto -> bb28;                    // scope 15 at ui/inference/range-type-infer.rs:21:5: 21:32
    }

    bb28: {
        _90 = &mut _87;                  // scope 15 at ui/inference/range-type-infer.rs:21:14: 21:18
        _89 = &mut (*_90);               // scope 15 at ui/inference/range-type-infer.rs:21:14: 21:18
        _88 = <std::ops::Range<usize> as Iterator>::next(move _89) -> [return: bb29, unwind: bb36]; // scope 15 at ui/inference/range-type-infer.rs:21:14: 21:18
                                         // mir::Constant
                                         // + span: ui/inference/range-type-infer.rs:21:14: 21:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb29: {
        _91 = discriminant(_88);         // scope 15 at ui/inference/range-type-infer.rs:21:14: 21:18
        switchInt(move _91) -> [0: bb32, 1: bb30, otherwise: bb31]; // scope 15 at ui/inference/range-type-infer.rs:21:14: 21:18
    }

    bb30: {
        _92 = ((_88 as Some).0: usize);  // scope 15 at ui/inference/range-type-infer.rs:21:9: 21:10
        _93 = _92;                       // scope 16 at ui/inference/range-type-infer.rs:21:27: 21:28
        _94 = const 2_usize;             // scope 16 at ui/inference/range-type-infer.rs:21:21: 21:29
        _95 = Lt(_93, _94);              // scope 16 at ui/inference/range-type-infer.rs:21:21: 21:29
        assert(move _95, "index out of bounds: the length is {} but the index is {}", move _94, _93) -> [success: bb28, unwind: bb36]; // scope 16 at ui/inference/range-type-infer.rs:21:21: 21:29
    }

    bb31: {
        unreachable;                     // scope 15 at ui/inference/range-type-infer.rs:21:14: 21:18
    }

    bb32: {
        drop(_47) -> [return: bb33, unwind: bb37]; // scope 4 at ui/inference/range-type-infer.rs:22:1: 22:2
    }

    bb33: {
        drop(_24) -> [return: bb34, unwind: bb38]; // scope 1 at ui/inference/range-type-infer.rs:22:1: 22:2
    }

    bb34: {
        drop(_1) -> bb35;                // scope 0 at ui/inference/range-type-infer.rs:22:1: 22:2
    }

    bb35: {
        return;                          // scope 0 at ui/inference/range-type-infer.rs:22:2: 22:2
    }

    bb36 (cleanup): {
        drop(_47) -> bb37;               // scope 4 at ui/inference/range-type-infer.rs:22:1: 22:2
    }

    bb37 (cleanup): {
        drop(_24) -> bb38;               // scope 1 at ui/inference/range-type-infer.rs:22:1: 22:2
    }

    bb38 (cleanup): {
        drop(_1) -> bb39;                // scope 0 at ui/inference/range-type-infer.rs:22:1: 22:2
    }

    bb39 (cleanup): {
        resume;                          // scope 0 at ui/inference/range-type-infer.rs:9:1: 22:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/inference/range-type-infer.rs:15:26: 15:28

    bb0: {
        _1 = const 10_usize;             // scope 0 at ui/inference/range-type-infer.rs:15:26: 15:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: bool;                    // in scope 0 at ui/inference/range-type-infer.rs:13:23: 13:27

    bb0: {
        _1 = const true;                 // scope 0 at ui/inference/range-type-infer.rs:13:23: 13:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: bool;                    // in scope 0 at ui/inference/range-type-infer.rs:11:23: 11:27

    bb0: {
        _1 = const true;                 // scope 0 at ui/inference/range-type-infer.rs:11:23: 11:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/inference/range-type-infer.rs:10:25: 10:28], _2: u64) -> bool {
    debug i => _2;                       // in scope 0 at ui/inference/range-type-infer.rs:10:26: 10:27
    let mut _0: bool;                    // return place in scope 0 at ui/inference/range-type-infer.rs:10:29: 10:29
    let mut _3: u64;                     // in scope 0 at ui/inference/range-type-infer.rs:10:29: 10:30

    bb0: {
        _3 = _2;                         // scope 0 at ui/inference/range-type-infer.rs:10:29: 10:30
        _0 = Eq(move _3, const 1_u64);   // scope 0 at ui/inference/range-type-infer.rs:10:29: 10:38
        return;                          // scope 0 at ui/inference/range-type-infer.rs:10:38: 10:38
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/inference/range-type-infer.rs:12:25: 12:28], _2: u64) -> bool {
    debug i => _2;                       // in scope 0 at ui/inference/range-type-infer.rs:12:26: 12:27
    let mut _0: bool;                    // return place in scope 0 at ui/inference/range-type-infer.rs:12:29: 12:29
    let mut _3: u64;                     // in scope 0 at ui/inference/range-type-infer.rs:12:37: 12:38

    bb0: {
        _3 = _2;                         // scope 0 at ui/inference/range-type-infer.rs:12:37: 12:38
        _0 = Eq(const 1_u64, move _3);   // scope 0 at ui/inference/range-type-infer.rs:12:29: 12:38
        return;                          // scope 0 at ui/inference/range-type-infer.rs:12:38: 12:38
    }
}
