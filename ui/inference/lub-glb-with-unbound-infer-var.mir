// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/inference/lub-glb-with-unbound-infer-var.rs:7:11: 7:11
    let _1: fn(i32);                     // in scope 0 at ui/inference/lub-glb-with-unbound-infer-var.rs:8:9: 8:12
    let mut _2: [closure@ui/inference/lub-glb-with-unbound-infer-var.rs:8:22: 8:25]; // in scope 0 at ui/inference/lub-glb-with-unbound-infer-var.rs:8:22: 8:28
    let mut _4: [closure@ui/inference/lub-glb-with-unbound-infer-var.rs:9:22: 9:25]; // in scope 0 at ui/inference/lub-glb-with-unbound-infer-var.rs:9:22: 9:28
    let _6: ();                          // in scope 0 at ui/inference/lub-glb-with-unbound-infer-var.rs:14:5: 14:11
    let mut _7: fn(i32);                 // in scope 0 at ui/inference/lub-glb-with-unbound-infer-var.rs:14:5: 14:8
    scope 1 {
        debug a_f => _1;                 // in scope 1 at ui/inference/lub-glb-with-unbound-infer-var.rs:8:9: 8:12
        let _3: fn(i32);                 // in scope 1 at ui/inference/lub-glb-with-unbound-infer-var.rs:9:9: 9:12
        scope 2 {
            debug b_f => _3;             // in scope 2 at ui/inference/lub-glb-with-unbound-infer-var.rs:9:9: 9:12
            let _5: fn(i32);             // in scope 2 at ui/inference/lub-glb-with-unbound-infer-var.rs:10:9: 10:12
            scope 3 {
                debug c_f => _5;         // in scope 3 at ui/inference/lub-glb-with-unbound-infer-var.rs:10:9: 10:12
            }
        }
    }

    bb0: {
        _1 = move _2 as fn(i32) (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/inference/lub-glb-with-unbound-infer-var.rs:8:22: 8:28
        _3 = move _4 as fn(i32) (Pointer(ClosureFnPointer(Normal))); // scope 1 at ui/inference/lub-glb-with-unbound-infer-var.rs:9:22: 9:28
        _5 = _3;                         // scope 2 at ui/inference/lub-glb-with-unbound-infer-var.rs:12:14: 12:17
        _7 = _5;                         // scope 3 at ui/inference/lub-glb-with-unbound-infer-var.rs:14:5: 14:8
        _6 = move _7(const 4_i32) -> bb1; // scope 3 at ui/inference/lub-glb-with-unbound-infer-var.rs:14:5: 14:11
    }

    bb1: {
        return;                          // scope 0 at ui/inference/lub-glb-with-unbound-infer-var.rs:15:2: 15:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/inference/lub-glb-with-unbound-infer-var.rs:8:22: 8:25], _2: i32) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/inference/lub-glb-with-unbound-infer-var.rs:8:26: 8:26

    bb0: {
        return;                          // scope 0 at ui/inference/lub-glb-with-unbound-infer-var.rs:8:28: 8:28
    }
}

fn main::{closure#1}(_1: &[closure@ui/inference/lub-glb-with-unbound-infer-var.rs:9:22: 9:25], _2: i32) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/inference/lub-glb-with-unbound-infer-var.rs:9:26: 9:26

    bb0: {
        return;                          // scope 0 at ui/inference/lub-glb-with-unbound-infer-var.rs:9:28: 9:28
    }
}
