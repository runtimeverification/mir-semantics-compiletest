// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:3:11: 3:11
    let mut _1: u8;                      // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:7:17: 7:23
    let mut _2: &u8;                     // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:7:21: 7:23
    let mut _3: u8;                      // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:8:17: 8:23
    let mut _4: &u8;                     // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:8:17: 8:19
    let mut _5: u8;                      // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:9:17: 9:24
    let mut _6: &u8;                     // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:9:17: 9:19
    let mut _7: &u8;                     // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:9:22: 9:24
    let mut _8: f32;                     // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:12:18: 12:28
    let mut _9: &f32;                    // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:12:24: 12:28
    let mut _10: f32;                    // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:13:18: 13:28
    let mut _11: &f32;                   // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:13:18: 13:22
    let mut _12: f32;                    // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:14:18: 14:29
    let mut _13: &f32;                   // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:14:18: 14:22
    let mut _14: &f32;                   // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:14:25: 14:29
    let mut _15: u8;                     // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:17:17: 17:24
    let mut _16: &i32;                   // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:17:22: 17:24
    let mut _17: u8;                     // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:18:17: 18:24
    let mut _18: &u8;                    // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:18:17: 18:19
    let mut _19: u8;                     // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:19:17: 19:25
    let mut _20: &u8;                    // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:19:17: 19:19
    let mut _21: &i32;                   // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:19:23: 19:25
    let mut _23: usize;                  // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:23:20: 23:27
    let mut _24: usize;                  // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:23:20: 23:21
    let mut _25: &usize;                 // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:23:24: 23:27
    let mut _26: i32;                    // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:27:13: 27:19
    let mut _27: &i32;                   // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:27:17: 27:19
    let mut _28: i32;                    // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:28:13: 28:19
    let mut _29: &i32;                   // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:28:13: 28:15
    let mut _30: i32;                    // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:29:13: 29:20
    let mut _31: &i32;                   // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:29:13: 29:15
    let mut _32: &i32;                   // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:29:18: 29:20
    scope 1 {
        let mut _49: &u8;                // in scope 1 at ui/inference/infer-binary-operand-behind-reference.rs:7:21: 7:23
        scope 2 {
            let mut _48: &u8;            // in scope 2 at ui/inference/infer-binary-operand-behind-reference.rs:8:17: 8:19
            scope 3 {
                let mut _46: &u8;        // in scope 3 at ui/inference/infer-binary-operand-behind-reference.rs:9:22: 9:24
                let mut _47: &u8;        // in scope 3 at ui/inference/infer-binary-operand-behind-reference.rs:9:17: 9:19
                scope 4 {
                    scope 5 {
                        let mut _45: &f32; // in scope 5 at ui/inference/infer-binary-operand-behind-reference.rs:12:24: 12:28
                        scope 6 {
                            let mut _44: &f32; // in scope 6 at ui/inference/infer-binary-operand-behind-reference.rs:13:18: 13:22
                            scope 7 {
                                let mut _42: &f32; // in scope 7 at ui/inference/infer-binary-operand-behind-reference.rs:14:25: 14:29
                                let mut _43: &f32; // in scope 7 at ui/inference/infer-binary-operand-behind-reference.rs:14:18: 14:22
                                scope 8 {
                                    scope 9 {
                                        let mut _41: &i32; // in scope 9 at ui/inference/infer-binary-operand-behind-reference.rs:17:22: 17:24
                                        scope 10 {
                                            let mut _40: &u8; // in scope 10 at ui/inference/infer-binary-operand-behind-reference.rs:18:17: 18:19
                                            scope 11 {
                                                let mut _38: &i32; // in scope 11 at ui/inference/infer-binary-operand-behind-reference.rs:19:23: 19:25
                                                let mut _39: &u8; // in scope 11 at ui/inference/infer-binary-operand-behind-reference.rs:19:17: 19:19
                                                scope 12 {
                                                    let _22: usize; // in scope 12 at ui/inference/infer-binary-operand-behind-reference.rs:22:9: 22:10
                                                    scope 13 {
                                                        debug a => _22; // in scope 13 at ui/inference/infer-binary-operand-behind-reference.rs:22:9: 22:10
                                                        let mut _37: &usize; // in scope 13 at ui/inference/infer-binary-operand-behind-reference.rs:23:24: 23:27
                                                        scope 14 {
                                                            scope 15 {
                                                                let mut _36: &i32; // in scope 15 at ui/inference/infer-binary-operand-behind-reference.rs:27:17: 27:19
                                                                scope 16 {
                                                                    let mut _35: &i32; // in scope 16 at ui/inference/infer-binary-operand-behind-reference.rs:28:13: 28:15
                                                                    scope 17 {
                                                                        let mut _33: &i32; // in scope 17 at ui/inference/infer-binary-operand-behind-reference.rs:29:18: 29:20
                                                                        let mut _34: &i32; // in scope 17 at ui/inference/infer-binary-operand-behind-reference.rs:29:13: 29:15
                                                                        scope 18 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _49 = const _;                   // scope 1 at ui/inference/infer-binary-operand-behind-reference.rs:7:21: 7:23
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:7:21: 7:23
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[16])) }
        _2 = _49;                        // scope 1 at ui/inference/infer-binary-operand-behind-reference.rs:7:21: 7:23
        _1 = <u8 as Add<&u8>>::add(const 0_u8, move _2) -> bb1; // scope 1 at ui/inference/infer-binary-operand-behind-reference.rs:7:17: 7:23
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:7:17: 7:23
                                         // + literal: Const { ty: fn(u8, &u8) -> <u8 as Add<&u8>>::Output {<u8 as Add<&u8>>::add}, val: Value(<ZST>) }
    }

    bb1: {
        _48 = const _;                   // scope 2 at ui/inference/infer-binary-operand-behind-reference.rs:8:17: 8:19
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:8:17: 8:19
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[15])) }
        _4 = _48;                        // scope 2 at ui/inference/infer-binary-operand-behind-reference.rs:8:17: 8:19
        _3 = <&u8 as Add<u8>>::add(move _4, const 0_u8) -> bb2; // scope 2 at ui/inference/infer-binary-operand-behind-reference.rs:8:17: 8:23
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:8:17: 8:23
                                         // + literal: Const { ty: fn(&u8, u8) -> <&u8 as Add<u8>>::Output {<&u8 as Add<u8>>::add}, val: Value(<ZST>) }
    }

    bb2: {
        _47 = const _;                   // scope 3 at ui/inference/infer-binary-operand-behind-reference.rs:9:17: 9:19
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:9:17: 9:19
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[14])) }
        _6 = _47;                        // scope 3 at ui/inference/infer-binary-operand-behind-reference.rs:9:17: 9:19
        _46 = const _;                   // scope 3 at ui/inference/infer-binary-operand-behind-reference.rs:9:22: 9:24
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:9:22: 9:24
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[13])) }
        _7 = _46;                        // scope 3 at ui/inference/infer-binary-operand-behind-reference.rs:9:22: 9:24
        _5 = <&u8 as Add>::add(move _6, move _7) -> bb3; // scope 3 at ui/inference/infer-binary-operand-behind-reference.rs:9:17: 9:24
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:9:17: 9:24
                                         // + literal: Const { ty: fn(&u8, &u8) -> <&u8 as Add>::Output {<&u8 as Add>::add}, val: Value(<ZST>) }
    }

    bb3: {
        _45 = const _;                   // scope 5 at ui/inference/infer-binary-operand-behind-reference.rs:12:24: 12:28
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:12:24: 12:28
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[12])) }
        _9 = _45;                        // scope 5 at ui/inference/infer-binary-operand-behind-reference.rs:12:24: 12:28
        _8 = <f32 as Add<&f32>>::add(const 0f32, move _9) -> bb4; // scope 5 at ui/inference/infer-binary-operand-behind-reference.rs:12:18: 12:28
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:12:18: 12:28
                                         // + literal: Const { ty: fn(f32, &f32) -> <f32 as Add<&f32>>::Output {<f32 as Add<&f32>>::add}, val: Value(<ZST>) }
    }

    bb4: {
        _44 = const _;                   // scope 6 at ui/inference/infer-binary-operand-behind-reference.rs:13:18: 13:22
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:13:18: 13:22
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[11])) }
        _11 = _44;                       // scope 6 at ui/inference/infer-binary-operand-behind-reference.rs:13:18: 13:22
        _10 = <&f32 as Add<f32>>::add(move _11, const 0f32) -> bb5; // scope 6 at ui/inference/infer-binary-operand-behind-reference.rs:13:18: 13:28
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:13:18: 13:28
                                         // + literal: Const { ty: fn(&f32, f32) -> <&f32 as Add<f32>>::Output {<&f32 as Add<f32>>::add}, val: Value(<ZST>) }
    }

    bb5: {
        _43 = const _;                   // scope 7 at ui/inference/infer-binary-operand-behind-reference.rs:14:18: 14:22
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:14:18: 14:22
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[10])) }
        _13 = _43;                       // scope 7 at ui/inference/infer-binary-operand-behind-reference.rs:14:18: 14:22
        _42 = const _;                   // scope 7 at ui/inference/infer-binary-operand-behind-reference.rs:14:25: 14:29
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:14:25: 14:29
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[9])) }
        _14 = _42;                       // scope 7 at ui/inference/infer-binary-operand-behind-reference.rs:14:25: 14:29
        _12 = <&f32 as Add>::add(move _13, move _14) -> bb6; // scope 7 at ui/inference/infer-binary-operand-behind-reference.rs:14:18: 14:29
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:14:18: 14:29
                                         // + literal: Const { ty: fn(&f32, &f32) -> <&f32 as Add>::Output {<&f32 as Add>::add}, val: Value(<ZST>) }
    }

    bb6: {
        _41 = const _;                   // scope 9 at ui/inference/infer-binary-operand-behind-reference.rs:17:22: 17:24
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:17:22: 17:24
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[8])) }
        _16 = _41;                       // scope 9 at ui/inference/infer-binary-operand-behind-reference.rs:17:22: 17:24
        _15 = <u8 as Shl<&i32>>::shl(const 0_u8, move _16) -> bb7; // scope 9 at ui/inference/infer-binary-operand-behind-reference.rs:17:17: 17:24
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:17:17: 17:24
                                         // + literal: Const { ty: fn(u8, &i32) -> <u8 as Shl<&i32>>::Output {<u8 as Shl<&i32>>::shl}, val: Value(<ZST>) }
    }

    bb7: {
        _40 = const _;                   // scope 10 at ui/inference/infer-binary-operand-behind-reference.rs:18:17: 18:19
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:18:17: 18:19
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[7])) }
        _18 = _40;                       // scope 10 at ui/inference/infer-binary-operand-behind-reference.rs:18:17: 18:19
        _17 = <&u8 as Shl<i32>>::shl(move _18, const 0_i32) -> bb8; // scope 10 at ui/inference/infer-binary-operand-behind-reference.rs:18:17: 18:24
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:18:17: 18:24
                                         // + literal: Const { ty: fn(&u8, i32) -> <&u8 as Shl<i32>>::Output {<&u8 as Shl<i32>>::shl}, val: Value(<ZST>) }
    }

    bb8: {
        _39 = const _;                   // scope 11 at ui/inference/infer-binary-operand-behind-reference.rs:19:17: 19:19
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:19:17: 19:19
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[6])) }
        _20 = _39;                       // scope 11 at ui/inference/infer-binary-operand-behind-reference.rs:19:17: 19:19
        _38 = const _;                   // scope 11 at ui/inference/infer-binary-operand-behind-reference.rs:19:23: 19:25
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:19:23: 19:25
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[5])) }
        _21 = _38;                       // scope 11 at ui/inference/infer-binary-operand-behind-reference.rs:19:23: 19:25
        _19 = <&u8 as Shl<&i32>>::shl(move _20, move _21) -> bb9; // scope 11 at ui/inference/infer-binary-operand-behind-reference.rs:19:17: 19:25
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:19:17: 19:25
                                         // + literal: Const { ty: fn(&u8, &i32) -> <&u8 as Shl<&i32>>::Output {<&u8 as Shl<&i32>>::shl}, val: Value(<ZST>) }
    }

    bb9: {
        _22 = const 22_usize;            // scope 12 at ui/inference/infer-binary-operand-behind-reference.rs:22:13: 22:15
        _24 = const 22_usize;            // scope 13 at ui/inference/infer-binary-operand-behind-reference.rs:23:20: 23:21
        _37 = const _;                   // scope 13 at ui/inference/infer-binary-operand-behind-reference.rs:23:24: 23:27
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:23:24: 23:27
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[4])) }
        _25 = _37;                       // scope 13 at ui/inference/infer-binary-operand-behind-reference.rs:23:24: 23:27
        _23 = <usize as Add<&usize>>::add(move _24, move _25) -> bb10; // scope 13 at ui/inference/infer-binary-operand-behind-reference.rs:23:20: 23:27
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:23:20: 23:27
                                         // + literal: Const { ty: fn(usize, &usize) -> <usize as Add<&usize>>::Output {<usize as Add<&usize>>::add}, val: Value(<ZST>) }
    }

    bb10: {
        _36 = const _;                   // scope 15 at ui/inference/infer-binary-operand-behind-reference.rs:27:17: 27:19
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:27:17: 27:19
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[3])) }
        _27 = _36;                       // scope 15 at ui/inference/infer-binary-operand-behind-reference.rs:27:17: 27:19
        _26 = <i32 as Add<&i32>>::add(const 0_i32, move _27) -> bb11; // scope 15 at ui/inference/infer-binary-operand-behind-reference.rs:27:13: 27:19
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:27:13: 27:19
                                         // + literal: Const { ty: fn(i32, &i32) -> <i32 as Add<&i32>>::Output {<i32 as Add<&i32>>::add}, val: Value(<ZST>) }
    }

    bb11: {
        _35 = const _;                   // scope 16 at ui/inference/infer-binary-operand-behind-reference.rs:28:13: 28:15
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:28:13: 28:15
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[2])) }
        _29 = _35;                       // scope 16 at ui/inference/infer-binary-operand-behind-reference.rs:28:13: 28:15
        _28 = <&i32 as Add<i32>>::add(move _29, const 0_i32) -> bb12; // scope 16 at ui/inference/infer-binary-operand-behind-reference.rs:28:13: 28:19
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:28:13: 28:19
                                         // + literal: Const { ty: fn(&i32, i32) -> <&i32 as Add<i32>>::Output {<&i32 as Add<i32>>::add}, val: Value(<ZST>) }
    }

    bb12: {
        _34 = const _;                   // scope 17 at ui/inference/infer-binary-operand-behind-reference.rs:29:13: 29:15
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:29:13: 29:15
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _31 = _34;                       // scope 17 at ui/inference/infer-binary-operand-behind-reference.rs:29:13: 29:15
        _33 = const _;                   // scope 17 at ui/inference/infer-binary-operand-behind-reference.rs:29:18: 29:20
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:29:18: 29:20
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _32 = _33;                       // scope 17 at ui/inference/infer-binary-operand-behind-reference.rs:29:18: 29:20
        _30 = <&i32 as Add>::add(move _31, move _32) -> bb13; // scope 17 at ui/inference/infer-binary-operand-behind-reference.rs:29:13: 29:20
                                         // mir::Constant
                                         // + span: ui/inference/infer-binary-operand-behind-reference.rs:29:13: 29:20
                                         // + literal: Const { ty: fn(&i32, &i32) -> <&i32 as Add>::Output {<&i32 as Add>::add}, val: Value(<ZST>) }
    }

    bb13: {
        return;                          // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:30:2: 30:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:29:18: 29:20
    let mut _1: i32;                     // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:29:19: 29:20

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:29:19: 29:20
        _0 = &_1;                        // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:29:18: 29:20
        return;                          // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:29:18: 29:20
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:29:13: 29:15
    let mut _1: i32;                     // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:29:14: 29:15

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:29:14: 29:15
        _0 = &_1;                        // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:29:13: 29:15
        return;                          // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:29:13: 29:15
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:28:13: 28:15
    let mut _1: i32;                     // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:28:14: 28:15

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:28:14: 28:15
        _0 = &_1;                        // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:28:13: 28:15
        return;                          // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:28:13: 28:15
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:27:17: 27:19
    let mut _1: i32;                     // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:27:18: 27:19

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:27:18: 27:19
        _0 = &_1;                        // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:27:17: 27:19
        return;                          // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:27:17: 27:19
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:23:24: 23:27
    let mut _1: usize;                   // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:23:25: 23:27

    bb0: {
        _1 = const 44_usize;             // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:23:25: 23:27
        _0 = &_1;                        // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:23:24: 23:27
        return;                          // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:23:24: 23:27
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:19:23: 19:25
    let mut _1: i32;                     // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:19:24: 19:25

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:19:24: 19:25
        _0 = &_1;                        // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:19:23: 19:25
        return;                          // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:19:23: 19:25
    }
}

promoted[6] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:19:17: 19:19
    let mut _1: u8;                      // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:19:18: 19:19

    bb0: {
        _1 = const 0_u8;                 // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:19:18: 19:19
        _0 = &_1;                        // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:19:17: 19:19
        return;                          // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:19:17: 19:19
    }
}

promoted[7] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:18:17: 18:19
    let mut _1: u8;                      // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:18:18: 18:19

    bb0: {
        _1 = const 0_u8;                 // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:18:18: 18:19
        _0 = &_1;                        // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:18:17: 18:19
        return;                          // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:18:17: 18:19
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:17:22: 17:24
    let mut _1: i32;                     // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:17:23: 17:24

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:17:23: 17:24
        _0 = &_1;                        // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:17:22: 17:24
        return;                          // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:17:22: 17:24
    }
}

promoted[9] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:14:25: 14:29
    let mut _1: f32;                     // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:14:26: 14:29

    bb0: {
        _1 = const 0f32;                 // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:14:26: 14:29
        _0 = &_1;                        // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:14:25: 14:29
        return;                          // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:14:25: 14:29
    }
}

promoted[10] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:14:18: 14:22
    let mut _1: f32;                     // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:14:19: 14:22

    bb0: {
        _1 = const 0f32;                 // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:14:19: 14:22
        _0 = &_1;                        // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:14:18: 14:22
        return;                          // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:14:18: 14:22
    }
}

promoted[11] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:13:18: 13:22
    let mut _1: f32;                     // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:13:19: 13:22

    bb0: {
        _1 = const 0f32;                 // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:13:19: 13:22
        _0 = &_1;                        // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:13:18: 13:22
        return;                          // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:13:18: 13:22
    }
}

promoted[12] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:12:24: 12:28
    let mut _1: f32;                     // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:12:25: 12:28

    bb0: {
        _1 = const 0f32;                 // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:12:25: 12:28
        _0 = &_1;                        // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:12:24: 12:28
        return;                          // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:12:24: 12:28
    }
}

promoted[13] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:9:22: 9:24
    let mut _1: u8;                      // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:9:23: 9:24

    bb0: {
        _1 = const 0_u8;                 // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:9:23: 9:24
        _0 = &_1;                        // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:9:22: 9:24
        return;                          // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:9:22: 9:24
    }
}

promoted[14] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:9:17: 9:19
    let mut _1: u8;                      // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:9:18: 9:19

    bb0: {
        _1 = const 0_u8;                 // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:9:18: 9:19
        _0 = &_1;                        // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:9:17: 9:19
        return;                          // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:9:17: 9:19
    }
}

promoted[15] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:8:17: 8:19
    let mut _1: u8;                      // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:8:18: 8:19

    bb0: {
        _1 = const 0_u8;                 // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:8:18: 8:19
        _0 = &_1;                        // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:8:17: 8:19
        return;                          // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:8:17: 8:19
    }
}

promoted[16] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:7:21: 7:23
    let mut _1: u8;                      // in scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:7:22: 7:23

    bb0: {
        _1 = const 0_u8;                 // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:7:22: 7:23
        _0 = &_1;                        // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:7:21: 7:23
        return;                          // scope 0 at ui/inference/infer-binary-operand-behind-reference.rs:7:21: 7:23
    }
}
