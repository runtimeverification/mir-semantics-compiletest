// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: u8;
    let mut _2: u8;
    let mut _3: u8;
    let mut _4: f32;
    let mut _5: f32;
    let mut _6: f32;
    let mut _7: u8;
    let mut _8: u8;
    let mut _9: u8;
    let mut _11: usize;
    let mut _12: i32;
    let mut _13: i32;
    let mut _14: i32;
    scope 1 {
        let mut _31: &u8;
        scope 2 {
            let mut _30: &u8;
            scope 3 {
                let mut _28: &u8;
                let mut _29: &u8;
                scope 4 {
                    scope 5 {
                        let mut _27: &f32;
                        scope 6 {
                            let mut _26: &f32;
                            scope 7 {
                                let mut _24: &f32;
                                let mut _25: &f32;
                                scope 8 {
                                    scope 9 {
                                        let mut _23: &i32;
                                        scope 10 {
                                            let mut _22: &u8;
                                            scope 11 {
                                                let mut _20: &i32;
                                                let mut _21: &u8;
                                                scope 12 {
                                                    let _10: usize;
                                                    scope 13 {
                                                        debug a => const 22_usize;
                                                        let mut _19: &usize;
                                                        scope 14 {
                                                            scope 15 {
                                                                let mut _18: &i32;
                                                                scope 16 {
                                                                    let mut _17: &i32;
                                                                    scope 17 {
                                                                        let mut _15: &i32;
                                                                        let mut _16: &i32;
                                                                        scope 18 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _31 = const _;
        _1 = <u8 as Add<&u8>>::add(const 0_u8, _31) -> [return: bb1, unwind continue];
    }

    bb1: {
        _30 = const _;
        _2 = <&u8 as Add<u8>>::add(_30, const 0_u8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _29 = const _;
        _28 = const _;
        _3 = <&u8 as Add>::add(_29, _28) -> [return: bb3, unwind continue];
    }

    bb3: {
        _27 = const _;
        _4 = <f32 as Add<&f32>>::add(const 0f32, _27) -> [return: bb4, unwind continue];
    }

    bb4: {
        _26 = const _;
        _5 = <&f32 as Add<f32>>::add(_26, const 0f32) -> [return: bb5, unwind continue];
    }

    bb5: {
        _25 = const _;
        _24 = const _;
        _6 = <&f32 as Add>::add(_25, _24) -> [return: bb6, unwind continue];
    }

    bb6: {
        _23 = const _;
        _7 = <u8 as Shl<&i32>>::shl(const 0_u8, _23) -> [return: bb7, unwind continue];
    }

    bb7: {
        _22 = const _;
        _8 = <&u8 as Shl<i32>>::shl(_22, const 0_i32) -> [return: bb8, unwind continue];
    }

    bb8: {
        _21 = const _;
        _20 = const _;
        _9 = <&u8 as Shl<&i32>>::shl(_21, _20) -> [return: bb9, unwind continue];
    }

    bb9: {
        _10 = const 22_usize;
        _19 = const _;
        _11 = <usize as Add<&usize>>::add(_10, _19) -> [return: bb10, unwind continue];
    }

    bb10: {
        _18 = const _;
        _12 = <i32 as Add<&i32>>::add(const 0_i32, _18) -> [return: bb11, unwind continue];
    }

    bb11: {
        _17 = const _;
        _13 = <&i32 as Add<i32>>::add(_17, const 0_i32) -> [return: bb12, unwind continue];
    }

    bb12: {
        _16 = const _;
        _15 = const _;
        _14 = <&i32 as Add>::add(_16, _15) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 44_usize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 0f32;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 0f32;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 0f32;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 0f32;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}
