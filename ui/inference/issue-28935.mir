// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: Vec<RefCell<u8>>) -> () {
    debug v => _1;                       // in scope 0 at ui/inference/issue-28935.rs:5:10: 5:11
    let mut _0: ();                      // return place in scope 0 at ui/inference/issue-28935.rs:5:31: 5:31
    let _2: &mut u8;                     // in scope 0 at ui/inference/issue-28935.rs:6:9: 6:11
    let mut _3: &mut u8;                 // in scope 0 at ui/inference/issue-28935.rs:6:19: 6:37
    let mut _4: &mut std::cell::RefMut<'_, u8>; // in scope 0 at ui/inference/issue-28935.rs:6:20: 6:37
    let mut _5: std::cell::RefMut<'_, u8>; // in scope 0 at ui/inference/issue-28935.rs:6:20: 6:37
    let mut _6: &std::cell::RefCell<u8>; // in scope 0 at ui/inference/issue-28935.rs:6:20: 6:37
    let _7: &std::cell::RefCell<u8>;     // in scope 0 at ui/inference/issue-28935.rs:6:20: 6:24
    let mut _8: &std::vec::Vec<std::cell::RefCell<u8>>; // in scope 0 at ui/inference/issue-28935.rs:6:20: 6:21
    scope 1 {
        debug _t => _2;                  // in scope 1 at ui/inference/issue-28935.rs:6:9: 6:11
    }

    bb0: {
        _8 = &_1;                        // scope 0 at ui/inference/issue-28935.rs:6:20: 6:21
        _7 = <Vec<RefCell<u8>> as Index<usize>>::index(move _8, const 0_usize) -> [return: bb1, unwind: bb7]; // scope 0 at ui/inference/issue-28935.rs:6:20: 6:24
                                         // mir::Constant
                                         // + span: ui/inference/issue-28935.rs:6:20: 6:24
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<RefCell<u8>>, usize) -> &'a <Vec<RefCell<u8>> as Index<usize>>::Output {<Vec<RefCell<u8>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _7;                         // scope 0 at ui/inference/issue-28935.rs:6:20: 6:37
        _5 = RefCell::<u8>::borrow_mut(move _6) -> [return: bb2, unwind: bb7]; // scope 0 at ui/inference/issue-28935.rs:6:20: 6:37
                                         // mir::Constant
                                         // + span: ui/inference/issue-28935.rs:6:25: 6:35
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<u8>) -> RefMut<'a, u8> {RefCell::<u8>::borrow_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &mut _5;                    // scope 0 at ui/inference/issue-28935.rs:6:20: 6:37
        _3 = <RefMut<'_, u8> as DerefMut>::deref_mut(move _4) -> [return: bb3, unwind: bb6]; // scope 0 at ui/inference/issue-28935.rs:6:19: 6:37
                                         // mir::Constant
                                         // + span: ui/inference/issue-28935.rs:6:19: 6:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, u8>) -> &'a mut <RefMut<'_, u8> as Deref>::Target {<RefMut<'_, u8> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = &mut (*_3);                 // scope 0 at ui/inference/issue-28935.rs:6:14: 6:37
        drop(_5) -> [return: bb4, unwind: bb7]; // scope 0 at ui/inference/issue-28935.rs:7:1: 7:2
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/inference/issue-28935.rs:7:1: 7:2
    }

    bb5: {
        return;                          // scope 0 at ui/inference/issue-28935.rs:7:2: 7:2
    }

    bb6 (cleanup): {
        drop(_5) -> bb7;                 // scope 0 at ui/inference/issue-28935.rs:7:1: 7:2
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/inference/issue-28935.rs:7:1: 7:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/inference/issue-28935.rs:5:1: 7:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/inference/issue-28935.rs:9:11: 9:11

    bb0: {
        return;                          // scope 0 at ui/inference/issue-28935.rs:9:13: 9:13
    }
}
