// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/project-cache-issue-31849.rs:9:1: 9:50>::upcast(_1: (S1, S2)) -> (T1, T2) {
    debug self => _1;                    // in scope 0 at ui/project-cache-issue-31849.rs:13:15: 13:19
    let mut _0: (T1, T2);                // return place in scope 0 at ui/project-cache-issue-31849.rs:13:24: 13:32
    let mut _2: T1;                      // in scope 0 at ui/project-cache-issue-31849.rs:13:36: 13:51
    let mut _3: S1;                      // in scope 0 at ui/project-cache-issue-31849.rs:13:36: 13:42
    let mut _4: T2;                      // in scope 0 at ui/project-cache-issue-31849.rs:13:53: 13:68
    let mut _5: S2;                      // in scope 0 at ui/project-cache-issue-31849.rs:13:53: 13:59
    let mut _6: bool;                    // in scope 0 at ui/project-cache-issue-31849.rs:13:70: 13:71

    bb0: {
        _6 = const false;                // scope 0 at ui/project-cache-issue-31849.rs:13:36: 13:51
        _6 = const true;                 // scope 0 at ui/project-cache-issue-31849.rs:13:36: 13:51
        _3 = move (_1.0: S1);            // scope 0 at ui/project-cache-issue-31849.rs:13:36: 13:42
        _2 = <S1 as Upcast<T1>>::upcast(move _3) -> [return: bb1, unwind: bb6]; // scope 0 at ui/project-cache-issue-31849.rs:13:36: 13:51
                                         // mir::Constant
                                         // + span: ui/project-cache-issue-31849.rs:13:43: 13:49
                                         // + literal: Const { ty: fn(S1) -> T1 {<S1 as Upcast<T1>>::upcast}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = const false;                // scope 0 at ui/project-cache-issue-31849.rs:13:53: 13:59
        _5 = move (_1.1: S2);            // scope 0 at ui/project-cache-issue-31849.rs:13:53: 13:59
        _4 = <S2 as Upcast<T2>>::upcast(move _5) -> [return: bb2, unwind: bb3]; // scope 0 at ui/project-cache-issue-31849.rs:13:53: 13:68
                                         // mir::Constant
                                         // + span: ui/project-cache-issue-31849.rs:13:60: 13:66
                                         // + literal: Const { ty: fn(S2) -> T2 {<S2 as Upcast<T2>>::upcast}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = (move _2, move _4);         // scope 0 at ui/project-cache-issue-31849.rs:13:35: 13:69
        return;                          // scope 0 at ui/project-cache-issue-31849.rs:13:71: 13:71
    }

    bb3 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at ui/project-cache-issue-31849.rs:13:68: 13:69
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/project-cache-issue-31849.rs:13:5: 13:71
    }

    bb5 (cleanup): {
        drop((_1.1: S2)) -> bb4;         // scope 0 at ui/project-cache-issue-31849.rs:13:70: 13:71
    }

    bb6 (cleanup): {
        switchInt(_6) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/project-cache-issue-31849.rs:13:70: 13:71
    }
}

fn <impl at ui/project-cache-issue-31849.rs:16:1: 16:23>::upcast(_1: ()) -> () {
    debug self => _1;                    // in scope 0 at ui/project-cache-issue-31849.rs:18:15: 18:19
    let mut _0: ();                      // return place in scope 0 at ui/project-cache-issue-31849.rs:18:24: 18:26

    bb0: {
        return;                          // scope 0 at ui/project-cache-issue-31849.rs:18:33: 18:33
    }
}

fn <impl at ui/project-cache-issue-31849.rs:26:1: 26:31>::to_static(_1: (T, U)) -> (<T as ToStatic>::Static, <U as ToStatic>::Static) {
    debug self => _1;                    // in scope 0 at ui/project-cache-issue-31849.rs:31:18: 31:22
    let mut _0: (<T as ToStatic>::Static, <U as ToStatic>::Static); // return place in scope 0 at ui/project-cache-issue-31849.rs:31:27: 31:39
    let mut _2: <T as ToStatic>::Static; // in scope 0 at ui/project-cache-issue-31849.rs:31:43: 31:61
    let mut _3: T;                       // in scope 0 at ui/project-cache-issue-31849.rs:31:43: 31:49
    let mut _4: <U as ToStatic>::Static; // in scope 0 at ui/project-cache-issue-31849.rs:31:63: 31:81
    let mut _5: U;                       // in scope 0 at ui/project-cache-issue-31849.rs:31:63: 31:69
    let mut _6: bool;                    // in scope 0 at ui/project-cache-issue-31849.rs:31:83: 31:84

    bb0: {
        _6 = const false;                // scope 0 at ui/project-cache-issue-31849.rs:31:43: 31:61
        _6 = const true;                 // scope 0 at ui/project-cache-issue-31849.rs:31:43: 31:61
        _3 = move (_1.0: T);             // scope 0 at ui/project-cache-issue-31849.rs:31:43: 31:49
        _2 = <T as ToStatic>::to_static(move _3) -> [return: bb1, unwind: bb6]; // scope 0 at ui/project-cache-issue-31849.rs:31:43: 31:61
                                         // mir::Constant
                                         // + span: ui/project-cache-issue-31849.rs:31:50: 31:59
                                         // + literal: Const { ty: fn(T) -> <T as ToStatic>::Static {<T as ToStatic>::to_static}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = const false;                // scope 0 at ui/project-cache-issue-31849.rs:31:63: 31:69
        _5 = move (_1.1: U);             // scope 0 at ui/project-cache-issue-31849.rs:31:63: 31:69
        _4 = <U as ToStatic>::to_static(move _5) -> [return: bb2, unwind: bb3]; // scope 0 at ui/project-cache-issue-31849.rs:31:63: 31:81
                                         // mir::Constant
                                         // + span: ui/project-cache-issue-31849.rs:31:70: 31:79
                                         // + literal: Const { ty: fn(U) -> <U as ToStatic>::Static {<U as ToStatic>::to_static}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = (move _2, move _4);         // scope 0 at ui/project-cache-issue-31849.rs:31:42: 31:82
        return;                          // scope 0 at ui/project-cache-issue-31849.rs:31:84: 31:84
    }

    bb3 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at ui/project-cache-issue-31849.rs:31:81: 31:82
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/project-cache-issue-31849.rs:31:5: 31:84
    }

    bb5 (cleanup): {
        drop((_1.1: U)) -> bb4;          // scope 0 at ui/project-cache-issue-31849.rs:31:83: 31:84
    }

    bb6 (cleanup): {
        switchInt(_6) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/project-cache-issue-31849.rs:31:83: 31:84
    }
}

fn <impl at ui/project-cache-issue-31849.rs:34:1: 34:21>::to_static(_1: ()) -> () {
    debug self => _1;                    // in scope 0 at ui/project-cache-issue-31849.rs:37:18: 37:22
    let mut _0: ();                      // return place in scope 0 at ui/project-cache-issue-31849.rs:37:27: 37:29

    bb0: {
        return;                          // scope 0 at ui/project-cache-issue-31849.rs:37:36: 37:36
    }
}

fn <impl at ui/project-cache-issue-31849.rs:46:1: 46:29>::build(_1: &(S, T)) -> (<S as Factory>::Output, <T as Factory>::Output) {
    debug self => _1;                    // in scope 0 at ui/project-cache-issue-31849.rs:53:14: 53:19
    let mut _0: (<S as Factory>::Output, <T as Factory>::Output); // return place in scope 0 at ui/project-cache-issue-31849.rs:53:24: 53:36
    let mut _2: <S as Factory>::Output;  // in scope 0 at ui/project-cache-issue-31849.rs:53:40: 53:75
    let mut _3: <<S as Factory>::Output as ToStatic>::Static; // in scope 0 at ui/project-cache-issue-31849.rs:53:40: 53:66
    let mut _4: <S as Factory>::Output;  // in scope 0 at ui/project-cache-issue-31849.rs:53:40: 53:54
    let mut _5: &S;                      // in scope 0 at ui/project-cache-issue-31849.rs:53:40: 53:54
    let mut _6: <T as Factory>::Output;  // in scope 0 at ui/project-cache-issue-31849.rs:53:77: 53:91
    let mut _7: &T;                      // in scope 0 at ui/project-cache-issue-31849.rs:53:77: 53:91

    bb0: {
        _5 = &((*_1).0: S);              // scope 0 at ui/project-cache-issue-31849.rs:53:40: 53:54
        _4 = <S as Factory>::build(move _5) -> bb1; // scope 0 at ui/project-cache-issue-31849.rs:53:40: 53:54
                                         // mir::Constant
                                         // + span: ui/project-cache-issue-31849.rs:53:47: 53:52
                                         // + literal: Const { ty: for<'a> fn(&'a S) -> <S as Factory>::Output {<S as Factory>::build}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <<S as Factory>::Output as ToStatic>::to_static(move _4) -> bb2; // scope 0 at ui/project-cache-issue-31849.rs:53:40: 53:66
                                         // mir::Constant
                                         // + span: ui/project-cache-issue-31849.rs:53:55: 53:64
                                         // + literal: Const { ty: fn(<S as Factory>::Output) -> <<S as Factory>::Output as ToStatic>::Static {<<S as Factory>::Output as ToStatic>::to_static}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = <<<S as Factory>::Output as ToStatic>::Static as Upcast<<S as Factory>::Output>>::upcast(move _3) -> bb3; // scope 0 at ui/project-cache-issue-31849.rs:53:40: 53:75
                                         // mir::Constant
                                         // + span: ui/project-cache-issue-31849.rs:53:67: 53:73
                                         // + literal: Const { ty: fn(<<S as Factory>::Output as ToStatic>::Static) -> <S as Factory>::Output {<<<S as Factory>::Output as ToStatic>::Static as Upcast<<S as Factory>::Output>>::upcast}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = &((*_1).1: T);              // scope 0 at ui/project-cache-issue-31849.rs:53:77: 53:91
        _6 = <T as Factory>::build(move _7) -> [return: bb4, unwind: bb5]; // scope 0 at ui/project-cache-issue-31849.rs:53:77: 53:91
                                         // mir::Constant
                                         // + span: ui/project-cache-issue-31849.rs:53:84: 53:89
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> <T as Factory>::Output {<T as Factory>::build}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = (move _2, move _6);         // scope 0 at ui/project-cache-issue-31849.rs:53:39: 53:92
        return;                          // scope 0 at ui/project-cache-issue-31849.rs:53:94: 53:94
    }

    bb5 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at ui/project-cache-issue-31849.rs:53:91: 53:92
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/project-cache-issue-31849.rs:53:5: 53:94
    }
}

fn <impl at ui/project-cache-issue-31849.rs:56:1: 56:20>::build(_1: &()) -> () {
    debug self => _1;                    // in scope 0 at ui/project-cache-issue-31849.rs:58:14: 58:19
    let mut _0: ();                      // return place in scope 0 at ui/project-cache-issue-31849.rs:58:24: 58:36

    bb0: {
        return;                          // scope 0 at ui/project-cache-issue-31849.rs:58:43: 58:43
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/project-cache-issue-31849.rs:61:11: 61:11
    let _1: ((((((((((), ()), ()), ()), ()), ()), ()), ()), ()), ()); // in scope 0 at ui/project-cache-issue-31849.rs:63:9: 63:11
    let _2: ((((((((((), ()), ()), ()), ()), ()), ()), ()), ()), ()); // in scope 0 at ui/project-cache-issue-31849.rs:64:5: 64:15
    let mut _3: &((((((((((), ()), ()), ()), ()), ()), ()), ()), ()), ()); // in scope 0 at ui/project-cache-issue-31849.rs:64:5: 64:15
    scope 1 {
        debug it => _1;                  // in scope 1 at ui/project-cache-issue-31849.rs:63:9: 63:11
    }

    bb0: {
        _3 = &_1;                        // scope 1 at ui/project-cache-issue-31849.rs:64:5: 64:15
        _2 = <((((((((((), ()), ()), ()), ()), ()), ()), ()), ()), ()) as Factory>::build(move _3) -> bb1; // scope 1 at ui/project-cache-issue-31849.rs:64:5: 64:15
                                         // mir::Constant
                                         // + span: ui/project-cache-issue-31849.rs:64:8: 64:13
                                         // + literal: Const { ty: for<'a> fn(&'a ((((((((((), ()), ()), ()), ()), ()), ()), ()), ()), ())) -> <((((((((((), ()), ()), ()), ()), ()), ()), ()), ()), ()) as Factory>::Output {<((((((((((), ()), ()), ()), ()), ()), ()), ()), ()), ()) as Factory>::build}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/project-cache-issue-31849.rs:65:2: 65:2
    }
}
