// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/iterators/array.rs:3:11: 3:11
    let mut _1: std::array::IntoIter<i32, 2>; // in scope 0 at ui/iterators/array.rs:4:14: 4:20
    let mut _2: [i32; 2];                // in scope 0 at ui/iterators/array.rs:4:14: 4:20
    let mut _3: std::array::IntoIter<i32, 2>; // in scope 0 at ui/iterators/array.rs:4:14: 4:20
    let mut _4: std::option::Option<i32>; // in scope 0 at ui/iterators/array.rs:4:14: 4:20
    let mut _5: &mut std::array::IntoIter<i32, 2>; // in scope 0 at ui/iterators/array.rs:4:14: 4:20
    let mut _6: &mut std::array::IntoIter<i32, 2>; // in scope 0 at ui/iterators/array.rs:4:14: 4:20
    let mut _7: isize;                   // in scope 0 at ui/iterators/array.rs:4:5: 4:23
    let _8: [i32; 2];                    // in scope 0 at ui/iterators/array.rs:5:9: 5:10
    let mut _9: std::array::IntoIter<i32, 2>; // in scope 0 at ui/iterators/array.rs:6:14: 6:15
    let mut _10: [i32; 2];               // in scope 0 at ui/iterators/array.rs:6:14: 6:15
    let mut _12: std::option::Option<i32>; // in scope 0 at ui/iterators/array.rs:6:14: 6:15
    let mut _13: &mut std::array::IntoIter<i32, 2>; // in scope 0 at ui/iterators/array.rs:6:14: 6:15
    let mut _14: &mut std::array::IntoIter<i32, 2>; // in scope 0 at ui/iterators/array.rs:6:14: 6:15
    let mut _15: isize;                  // in scope 0 at ui/iterators/array.rs:6:5: 6:18
    let mut _16: std::array::IntoIter<f64, 2>; // in scope 0 at ui/iterators/array.rs:7:14: 7:24
    let mut _17: [f64; 2];               // in scope 0 at ui/iterators/array.rs:7:14: 7:24
    let mut _19: std::option::Option<f64>; // in scope 0 at ui/iterators/array.rs:7:14: 7:24
    let mut _20: &mut std::array::IntoIter<f64, 2>; // in scope 0 at ui/iterators/array.rs:7:14: 7:24
    let mut _21: &mut std::array::IntoIter<f64, 2>; // in scope 0 at ui/iterators/array.rs:7:14: 7:24
    let mut _22: isize;                  // in scope 0 at ui/iterators/array.rs:7:5: 7:27
    scope 1 {
        debug iter => _3;                // in scope 1 at ui/iterators/array.rs:4:14: 4:20
    }
    scope 2 {
        debug x => _8;                   // in scope 2 at ui/iterators/array.rs:5:9: 5:10
        let mut _11: std::array::IntoIter<i32, 2>; // in scope 2 at ui/iterators/array.rs:6:14: 6:15
        let mut _18: std::array::IntoIter<f64, 2>; // in scope 2 at ui/iterators/array.rs:7:14: 7:24
        scope 3 {
            debug iter => _11;           // in scope 3 at ui/iterators/array.rs:6:14: 6:15
        }
        scope 4 {
            debug iter => _18;           // in scope 4 at ui/iterators/array.rs:7:14: 7:24
        }
    }

    bb0: {
        _2 = [const 1_i32, const 2_i32]; // scope 0 at ui/iterators/array.rs:4:14: 4:20
        _1 = <[i32; 2] as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at ui/iterators/array.rs:4:14: 4:20
                                         // mir::Constant
                                         // + span: ui/iterators/array.rs:4:14: 4:20
                                         // + literal: Const { ty: fn([i32; 2]) -> <[i32; 2] as IntoIterator>::IntoIter {<[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = move _1;                    // scope 0 at ui/iterators/array.rs:4:14: 4:20
        goto -> bb2;                     // scope 1 at ui/iterators/array.rs:4:5: 4:23
    }

    bb2: {
        _6 = &mut _3;                    // scope 1 at ui/iterators/array.rs:4:14: 4:20
        _5 = &mut (*_6);                 // scope 1 at ui/iterators/array.rs:4:14: 4:20
        _4 = <std::array::IntoIter<i32, 2> as Iterator>::next(move _5) -> [return: bb3, unwind: bb21]; // scope 1 at ui/iterators/array.rs:4:14: 4:20
                                         // mir::Constant
                                         // + span: ui/iterators/array.rs:4:14: 4:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::array::IntoIter<i32, 2>) -> Option<<std::array::IntoIter<i32, 2> as Iterator>::Item> {<std::array::IntoIter<i32, 2> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = discriminant(_4);           // scope 1 at ui/iterators/array.rs:4:14: 4:20
        switchInt(move _7) -> [0: bb5, 1: bb2, otherwise: bb4]; // scope 1 at ui/iterators/array.rs:4:14: 4:20
    }

    bb4: {
        unreachable;                     // scope 1 at ui/iterators/array.rs:4:14: 4:20
    }

    bb5: {
        drop(_3) -> bb6;                 // scope 0 at ui/iterators/array.rs:4:22: 4:23
    }

    bb6: {
        _8 = [const 1_i32, const 2_i32]; // scope 0 at ui/iterators/array.rs:5:13: 5:19
        _10 = _8;                        // scope 2 at ui/iterators/array.rs:6:14: 6:15
        _9 = <[i32; 2] as IntoIterator>::into_iter(move _10) -> bb7; // scope 2 at ui/iterators/array.rs:6:14: 6:15
                                         // mir::Constant
                                         // + span: ui/iterators/array.rs:6:14: 6:15
                                         // + literal: Const { ty: fn([i32; 2]) -> <[i32; 2] as IntoIterator>::IntoIter {<[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = move _9;                   // scope 2 at ui/iterators/array.rs:6:14: 6:15
        goto -> bb8;                     // scope 3 at ui/iterators/array.rs:6:5: 6:18
    }

    bb8: {
        _14 = &mut _11;                  // scope 3 at ui/iterators/array.rs:6:14: 6:15
        _13 = &mut (*_14);               // scope 3 at ui/iterators/array.rs:6:14: 6:15
        _12 = <std::array::IntoIter<i32, 2> as Iterator>::next(move _13) -> [return: bb9, unwind: bb20]; // scope 3 at ui/iterators/array.rs:6:14: 6:15
                                         // mir::Constant
                                         // + span: ui/iterators/array.rs:6:14: 6:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::array::IntoIter<i32, 2>) -> Option<<std::array::IntoIter<i32, 2> as Iterator>::Item> {<std::array::IntoIter<i32, 2> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = discriminant(_12);         // scope 3 at ui/iterators/array.rs:6:14: 6:15
        switchInt(move _15) -> [0: bb11, 1: bb8, otherwise: bb10]; // scope 3 at ui/iterators/array.rs:6:14: 6:15
    }

    bb10: {
        unreachable;                     // scope 3 at ui/iterators/array.rs:6:14: 6:15
    }

    bb11: {
        drop(_11) -> bb12;               // scope 2 at ui/iterators/array.rs:6:17: 6:18
    }

    bb12: {
        _17 = [const 1f64, const 2f64];  // scope 2 at ui/iterators/array.rs:7:14: 7:24
        _16 = <[f64; 2] as IntoIterator>::into_iter(move _17) -> bb13; // scope 2 at ui/iterators/array.rs:7:14: 7:24
                                         // mir::Constant
                                         // + span: ui/iterators/array.rs:7:14: 7:24
                                         // + literal: Const { ty: fn([f64; 2]) -> <[f64; 2] as IntoIterator>::IntoIter {<[f64; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb13: {
        _18 = move _16;                  // scope 2 at ui/iterators/array.rs:7:14: 7:24
        goto -> bb14;                    // scope 4 at ui/iterators/array.rs:7:5: 7:27
    }

    bb14: {
        _21 = &mut _18;                  // scope 4 at ui/iterators/array.rs:7:14: 7:24
        _20 = &mut (*_21);               // scope 4 at ui/iterators/array.rs:7:14: 7:24
        _19 = <std::array::IntoIter<f64, 2> as Iterator>::next(move _20) -> [return: bb15, unwind: bb19]; // scope 4 at ui/iterators/array.rs:7:14: 7:24
                                         // mir::Constant
                                         // + span: ui/iterators/array.rs:7:14: 7:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::array::IntoIter<f64, 2>) -> Option<<std::array::IntoIter<f64, 2> as Iterator>::Item> {<std::array::IntoIter<f64, 2> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb15: {
        _22 = discriminant(_19);         // scope 4 at ui/iterators/array.rs:7:14: 7:24
        switchInt(move _22) -> [0: bb17, 1: bb14, otherwise: bb16]; // scope 4 at ui/iterators/array.rs:7:14: 7:24
    }

    bb16: {
        unreachable;                     // scope 4 at ui/iterators/array.rs:7:14: 7:24
    }

    bb17: {
        drop(_18) -> bb18;               // scope 2 at ui/iterators/array.rs:7:26: 7:27
    }

    bb18: {
        return;                          // scope 0 at ui/iterators/array.rs:8:2: 8:2
    }

    bb19 (cleanup): {
        drop(_18) -> bb22;               // scope 2 at ui/iterators/array.rs:7:26: 7:27
    }

    bb20 (cleanup): {
        drop(_11) -> bb22;               // scope 2 at ui/iterators/array.rs:6:17: 6:18
    }

    bb21 (cleanup): {
        drop(_3) -> bb22;                // scope 0 at ui/iterators/array.rs:4:22: 4:23
    }

    bb22 (cleanup): {
        resume;                          // scope 0 at ui/iterators/array.rs:3:1: 8:2
    }
}
