// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/iterators/iter-step-overflow-debug.rs:7:11: 7:11
    let _1: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:8:9: 8:10
    let mut _2: [closure@ui/iterators/iter-step-overflow-debug.rs:8:33: 8:35]; // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:8:33: 12:6
    let mut _3: bool;                    // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:13:5: 13:24
    let mut _4: bool;                    // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:13:13: 13:23
    let mut _5: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:13:13: 13:23
    let mut _6: !;                       // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:13:5: 13:24
    let mut _8: [closure@ui/iterators/iter-step-overflow-debug.rs:15:33: 15:35]; // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:15:33: 19:6
    let mut _9: bool;                    // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:20:5: 20:24
    let mut _10: bool;                   // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:20:13: 20:23
    let mut _11: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:20:13: 20:23
    let mut _12: !;                      // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:20:5: 20:24
    scope 1 {
        debug r => _1;                   // in scope 1 at ui/iterators/iter-step-overflow-debug.rs:8:9: 8:10
        let _7: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 1 at ui/iterators/iter-step-overflow-debug.rs:15:9: 15:10
        scope 2 {
            debug r => _7;               // in scope 2 at ui/iterators/iter-step-overflow-debug.rs:15:9: 15:10
        }
    }

    bb0: {
        _1 = catch_unwind::<[closure@ui/iterators/iter-step-overflow-debug.rs:8:33: 8:35], ()>(move _2) -> bb1; // scope 0 at ui/iterators/iter-step-overflow-debug.rs:8:13: 12:7
                                         // mir::Constant
                                         // + span: ui/iterators/iter-step-overflow-debug.rs:8:13: 8:32
                                         // + literal: Const { ty: fn([closure@ui/iterators/iter-step-overflow-debug.rs:8:33: 8:35]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/iterators/iter-step-overflow-debug.rs:8:33: 8:35], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_1;                        // scope 1 at ui/iterators/iter-step-overflow-debug.rs:13:13: 13:23
        _4 = Result::<(), Box<dyn Any + Send>>::is_err(move _5) -> [return: bb2, unwind: bb12]; // scope 1 at ui/iterators/iter-step-overflow-debug.rs:13:13: 13:23
                                         // mir::Constant
                                         // + span: ui/iterators/iter-step-overflow-debug.rs:13:15: 13:21
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Not(move _4);               // scope 1 at ui/iterators/iter-step-overflow-debug.rs:13:5: 13:24
        switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 1 at ui/iterators/iter-step-overflow-debug.rs:13:5: 13:24
    }

    bb3: {
        _6 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb12; // scope 1 at ui/iterators/iter-step-overflow-debug.rs:13:5: 13:24
                                         // mir::Constant
                                         // + span: ui/iterators/iter-step-overflow-debug.rs:13:5: 13:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _7 = catch_unwind::<[closure@ui/iterators/iter-step-overflow-debug.rs:15:33: 15:35], ()>(move _8) -> [return: bb5, unwind: bb12]; // scope 1 at ui/iterators/iter-step-overflow-debug.rs:15:13: 19:7
                                         // mir::Constant
                                         // + span: ui/iterators/iter-step-overflow-debug.rs:15:13: 15:32
                                         // + literal: Const { ty: fn([closure@ui/iterators/iter-step-overflow-debug.rs:15:33: 15:35]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/iterators/iter-step-overflow-debug.rs:15:33: 15:35], ()>}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = &_7;                       // scope 2 at ui/iterators/iter-step-overflow-debug.rs:20:13: 20:23
        _10 = Result::<(), Box<dyn Any + Send>>::is_err(move _11) -> [return: bb6, unwind: bb11]; // scope 2 at ui/iterators/iter-step-overflow-debug.rs:20:13: 20:23
                                         // mir::Constant
                                         // + span: ui/iterators/iter-step-overflow-debug.rs:20:15: 20:21
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb6: {
        _9 = Not(move _10);              // scope 2 at ui/iterators/iter-step-overflow-debug.rs:20:5: 20:24
        switchInt(move _9) -> [0: bb8, otherwise: bb7]; // scope 2 at ui/iterators/iter-step-overflow-debug.rs:20:5: 20:24
    }

    bb7: {
        _12 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb11; // scope 2 at ui/iterators/iter-step-overflow-debug.rs:20:5: 20:24
                                         // mir::Constant
                                         // + span: ui/iterators/iter-step-overflow-debug.rs:20:5: 20:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb8: {
        drop(_7) -> [return: bb9, unwind: bb12]; // scope 1 at ui/iterators/iter-step-overflow-debug.rs:21:1: 21:2
    }

    bb9: {
        drop(_1) -> bb10;                // scope 0 at ui/iterators/iter-step-overflow-debug.rs:21:1: 21:2
    }

    bb10: {
        return;                          // scope 0 at ui/iterators/iter-step-overflow-debug.rs:21:2: 21:2
    }

    bb11 (cleanup): {
        drop(_7) -> bb12;                // scope 1 at ui/iterators/iter-step-overflow-debug.rs:21:1: 21:2
    }

    bb12 (cleanup): {
        drop(_1) -> bb13;                // scope 0 at ui/iterators/iter-step-overflow-debug.rs:21:1: 21:2
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/iterators/iter-step-overflow-debug.rs:7:1: 21:2
    }
}

fn main::{closure#0}(_1: [closure@ui/iterators/iter-step-overflow-debug.rs:8:33: 8:35]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/iterators/iter-step-overflow-debug.rs:8:36: 8:36
    let mut _2: std::ops::RangeFrom<u8>; // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:9:13: 9:19
    let _3: u8;                          // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:10:9: 10:27
    let mut _4: std::option::Option<u8>; // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:10:9: 10:18
    let mut _5: &mut std::ops::RangeFrom<u8>; // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:10:9: 10:18
    let _6: u8;                          // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:11:9: 11:27
    let mut _7: std::option::Option<u8>; // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:11:9: 11:18
    let mut _8: &mut std::ops::RangeFrom<u8>; // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:11:9: 11:18
    scope 1 {
        debug it => _2;                  // in scope 1 at ui/iterators/iter-step-overflow-debug.rs:9:13: 9:19
    }

    bb0: {
        _2 = RangeFrom::<u8> { start: const _ }; // scope 0 at ui/iterators/iter-step-overflow-debug.rs:9:22: 9:31
        _5 = &mut _2;                    // scope 1 at ui/iterators/iter-step-overflow-debug.rs:10:9: 10:18
        _4 = <RangeFrom<u8> as Iterator>::next(move _5) -> bb1; // scope 1 at ui/iterators/iter-step-overflow-debug.rs:10:9: 10:18
                                         // mir::Constant
                                         // + span: ui/iterators/iter-step-overflow-debug.rs:10:12: 10:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeFrom<u8>) -> Option<<RangeFrom<u8> as Iterator>::Item> {<RangeFrom<u8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Option::<u8>::unwrap(move _4) -> bb2; // scope 1 at ui/iterators/iter-step-overflow-debug.rs:10:9: 10:27
                                         // mir::Constant
                                         // + span: ui/iterators/iter-step-overflow-debug.rs:10:19: 10:25
                                         // + literal: Const { ty: fn(Option<u8>) -> u8 {Option::<u8>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &mut _2;                    // scope 1 at ui/iterators/iter-step-overflow-debug.rs:11:9: 11:18
        _7 = <RangeFrom<u8> as Iterator>::next(move _8) -> bb3; // scope 1 at ui/iterators/iter-step-overflow-debug.rs:11:9: 11:18
                                         // mir::Constant
                                         // + span: ui/iterators/iter-step-overflow-debug.rs:11:12: 11:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeFrom<u8>) -> Option<<RangeFrom<u8> as Iterator>::Item> {<RangeFrom<u8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = Option::<u8>::unwrap(move _7) -> bb4; // scope 1 at ui/iterators/iter-step-overflow-debug.rs:11:9: 11:27
                                         // mir::Constant
                                         // + span: ui/iterators/iter-step-overflow-debug.rs:11:19: 11:25
                                         // + literal: Const { ty: fn(Option<u8>) -> u8 {Option::<u8>::unwrap}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/iterators/iter-step-overflow-debug.rs:12:6: 12:6
    }
}

fn main::{closure#1}(_1: [closure@ui/iterators/iter-step-overflow-debug.rs:15:33: 15:35]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/iterators/iter-step-overflow-debug.rs:15:36: 15:36
    let mut _2: std::ops::RangeFrom<i8>; // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:16:13: 16:19
    let _3: i8;                          // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:17:9: 17:27
    let mut _4: std::option::Option<i8>; // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:17:9: 17:18
    let mut _5: &mut std::ops::RangeFrom<i8>; // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:17:9: 17:18
    let _6: i8;                          // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:18:9: 18:27
    let mut _7: std::option::Option<i8>; // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:18:9: 18:18
    let mut _8: &mut std::ops::RangeFrom<i8>; // in scope 0 at ui/iterators/iter-step-overflow-debug.rs:18:9: 18:18
    scope 1 {
        debug it => _2;                  // in scope 1 at ui/iterators/iter-step-overflow-debug.rs:16:13: 16:19
    }

    bb0: {
        _2 = RangeFrom::<i8> { start: const _ }; // scope 0 at ui/iterators/iter-step-overflow-debug.rs:16:22: 16:31
        _5 = &mut _2;                    // scope 1 at ui/iterators/iter-step-overflow-debug.rs:17:9: 17:18
        _4 = <RangeFrom<i8> as Iterator>::next(move _5) -> bb1; // scope 1 at ui/iterators/iter-step-overflow-debug.rs:17:9: 17:18
                                         // mir::Constant
                                         // + span: ui/iterators/iter-step-overflow-debug.rs:17:12: 17:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeFrom<i8>) -> Option<<RangeFrom<i8> as Iterator>::Item> {<RangeFrom<i8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Option::<i8>::unwrap(move _4) -> bb2; // scope 1 at ui/iterators/iter-step-overflow-debug.rs:17:9: 17:27
                                         // mir::Constant
                                         // + span: ui/iterators/iter-step-overflow-debug.rs:17:19: 17:25
                                         // + literal: Const { ty: fn(Option<i8>) -> i8 {Option::<i8>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &mut _2;                    // scope 1 at ui/iterators/iter-step-overflow-debug.rs:18:9: 18:18
        _7 = <RangeFrom<i8> as Iterator>::next(move _8) -> bb3; // scope 1 at ui/iterators/iter-step-overflow-debug.rs:18:9: 18:18
                                         // mir::Constant
                                         // + span: ui/iterators/iter-step-overflow-debug.rs:18:12: 18:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeFrom<i8>) -> Option<<RangeFrom<i8> as Iterator>::Item> {<RangeFrom<i8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = Option::<i8>::unwrap(move _7) -> bb4; // scope 1 at ui/iterators/iter-step-overflow-debug.rs:18:9: 18:27
                                         // mir::Constant
                                         // + span: ui/iterators/iter-step-overflow-debug.rs:18:19: 18:25
                                         // + literal: Const { ty: fn(Option<i8>) -> i8 {Option::<i8>::unwrap}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/iterators/iter-step-overflow-debug.rs:19:6: 19:6
    }
}
