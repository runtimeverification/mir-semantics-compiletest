// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/iterators/iter-count-overflow-debug.rs:8:11: 8:11
    let mut _1: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: usize;                       // in scope 0 at ui/iterators/iter-count-overflow-debug.rs:9:16: 9:48
    let mut _4: &mut std::ops::Range<usize>; // in scope 0 at ui/iterators/iter-count-overflow-debug.rs:9:16: 9:48
    let mut _5: &mut std::ops::Range<usize>; // in scope 0 at ui/iterators/iter-count-overflow-debug.rs:9:16: 9:40
    let mut _6: &mut std::ops::Range<usize>; // in scope 0 at ui/iterators/iter-count-overflow-debug.rs:9:16: 9:40
    let mut _7: std::ops::Range<usize>;  // in scope 0 at ui/iterators/iter-count-overflow-debug.rs:9:16: 9:31
    let mut _8: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _9: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _10: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _23: std::result::Result<usize, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/iterators/iter-count-overflow-debug.rs:11:9: 11:10
    let mut _24: [closure@ui/iterators/iter-count-overflow-debug.rs:11:33: 11:35]; // in scope 0 at ui/iterators/iter-count-overflow-debug.rs:11:33: 13:6
    let mut _25: bool;                   // in scope 0 at ui/iterators/iter-count-overflow-debug.rs:14:5: 14:24
    let mut _26: bool;                   // in scope 0 at ui/iterators/iter-count-overflow-debug.rs:14:13: 14:23
    let mut _27: &std::result::Result<usize, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/iterators/iter-count-overflow-debug.rs:14:13: 14:23
    let mut _28: !;                      // in scope 0 at ui/iterators/iter-count-overflow-debug.rs:14:5: 14:24
    let mut _29: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _9;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _10;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _15: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _15;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug r => _23;                  // in scope 3 at ui/iterators/iter-count-overflow-debug.rs:11:9: 11:10
    }

    bb0: {
        _7 = std::ops::Range::<usize> { start: const 0_usize, end: const _ }; // scope 0 at ui/iterators/iter-count-overflow-debug.rs:9:16: 9:31
        _6 = &mut _7;                    // scope 0 at ui/iterators/iter-count-overflow-debug.rs:9:16: 9:40
        _5 = <std::ops::Range<usize> as Iterator>::by_ref(move _6) -> bb1; // scope 0 at ui/iterators/iter-count-overflow-debug.rs:9:16: 9:40
                                         // mir::Constant
                                         // + span: ui/iterators/iter-count-overflow-debug.rs:9:32: 9:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> &'a mut std::ops::Range<usize> {<std::ops::Range<usize> as Iterator>::by_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut (*_5);                 // scope 0 at ui/iterators/iter-count-overflow-debug.rs:9:16: 9:48
        _3 = <&mut std::ops::Range<usize> as Iterator>::count(move _4) -> bb2; // scope 0 at ui/iterators/iter-count-overflow-debug.rs:9:16: 9:48
                                         // mir::Constant
                                         // + span: ui/iterators/iter-count-overflow-debug.rs:9:41: 9:46
                                         // + literal: Const { ty: fn(&mut std::ops::Range<usize>) -> usize {<&mut std::ops::Range<usize> as Iterator>::count}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _29 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _8 = _29;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _8);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_1.0: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_1.1: &usize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = (*_9);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = const usize::MAX;          // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = Eq(move _13, move _14);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _11 = Not(move _12);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _15 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<usize, usize>(move _17, move _18, move _20, move _22); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        _23 = catch_unwind::<[closure@ui/iterators/iter-count-overflow-debug.rs:11:33: 11:35], usize>(move _24) -> bb5; // scope 0 at ui/iterators/iter-count-overflow-debug.rs:11:13: 13:7
                                         // mir::Constant
                                         // + span: ui/iterators/iter-count-overflow-debug.rs:11:13: 11:32
                                         // + literal: Const { ty: fn([closure@ui/iterators/iter-count-overflow-debug.rs:11:33: 11:35]) -> Result<usize, Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/iterators/iter-count-overflow-debug.rs:11:33: 11:35], usize>}, val: Value(<ZST>) }
    }

    bb5: {
        _27 = &_23;                      // scope 3 at ui/iterators/iter-count-overflow-debug.rs:14:13: 14:23
        _26 = Result::<usize, Box<dyn Any + Send>>::is_err(move _27) -> [return: bb6, unwind: bb10]; // scope 3 at ui/iterators/iter-count-overflow-debug.rs:14:13: 14:23
                                         // mir::Constant
                                         // + span: ui/iterators/iter-count-overflow-debug.rs:14:15: 14:21
                                         // + literal: Const { ty: for<'a> fn(&'a Result<usize, Box<dyn Any + Send>>) -> bool {Result::<usize, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb6: {
        _25 = Not(move _26);             // scope 3 at ui/iterators/iter-count-overflow-debug.rs:14:5: 14:24
        switchInt(move _25) -> [0: bb8, otherwise: bb7]; // scope 3 at ui/iterators/iter-count-overflow-debug.rs:14:5: 14:24
    }

    bb7: {
        _28 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb10; // scope 3 at ui/iterators/iter-count-overflow-debug.rs:14:5: 14:24
                                         // mir::Constant
                                         // + span: ui/iterators/iter-count-overflow-debug.rs:14:5: 14:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb8: {
        drop(_23) -> bb9;                // scope 0 at ui/iterators/iter-count-overflow-debug.rs:15:1: 15:2
    }

    bb9: {
        return;                          // scope 0 at ui/iterators/iter-count-overflow-debug.rs:15:2: 15:2
    }

    bb10 (cleanup): {
        drop(_23) -> bb11;               // scope 0 at ui/iterators/iter-count-overflow-debug.rs:15:1: 15:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/iterators/iter-count-overflow-debug.rs:8:1: 15:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/iterators/iter-count-overflow-debug.rs:9:50: 9:60

    bb0: {
        _1 = const _;                    // scope 0 at ui/iterators/iter-count-overflow-debug.rs:9:50: 9:60
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: [closure@ui/iterators/iter-count-overflow-debug.rs:11:33: 11:35]) -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/iterators/iter-count-overflow-debug.rs:11:36: 11:36
    let mut _2: &mut std::ops::RangeInclusive<usize>; // in scope 0 at ui/iterators/iter-count-overflow-debug.rs:12:9: 12:42
    let mut _3: &mut std::ops::RangeInclusive<usize>; // in scope 0 at ui/iterators/iter-count-overflow-debug.rs:12:9: 12:34
    let mut _4: &mut std::ops::RangeInclusive<usize>; // in scope 0 at ui/iterators/iter-count-overflow-debug.rs:12:9: 12:34
    let mut _5: std::ops::RangeInclusive<usize>; // in scope 0 at ui/iterators/iter-count-overflow-debug.rs:12:9: 12:25

    bb0: {
        _5 = RangeInclusive::<usize>::new(const 0_usize, const _) -> bb1; // scope 0 at ui/iterators/iter-count-overflow-debug.rs:12:9: 12:25
                                         // mir::Constant
                                         // + span: ui/iterators/iter-count-overflow-debug.rs:12:10: 12:24
                                         // + literal: Const { ty: fn(usize, usize) -> RangeInclusive<usize> {RangeInclusive::<usize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _5;                    // scope 0 at ui/iterators/iter-count-overflow-debug.rs:12:9: 12:34
        _3 = <RangeInclusive<usize> as Iterator>::by_ref(move _4) -> bb2; // scope 0 at ui/iterators/iter-count-overflow-debug.rs:12:9: 12:34
                                         // mir::Constant
                                         // + span: ui/iterators/iter-count-overflow-debug.rs:12:26: 12:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<usize>) -> &'a mut RangeInclusive<usize> {<RangeInclusive<usize> as Iterator>::by_ref}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = &mut (*_3);                 // scope 0 at ui/iterators/iter-count-overflow-debug.rs:12:9: 12:42
        _0 = <&mut RangeInclusive<usize> as Iterator>::count(move _2) -> bb3; // scope 0 at ui/iterators/iter-count-overflow-debug.rs:12:9: 12:42
                                         // mir::Constant
                                         // + span: ui/iterators/iter-count-overflow-debug.rs:12:35: 12:40
                                         // + literal: Const { ty: fn(&mut RangeInclusive<usize>) -> usize {<&mut RangeInclusive<usize> as Iterator>::count}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/iterators/iter-count-overflow-debug.rs:13:6: 13:6
    }
}
