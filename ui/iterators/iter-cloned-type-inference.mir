// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn square_sum(_1: &[i64]) -> i64 {
    debug v => _1;
    let mut _0: i64;
    let _2: i64;
    let mut _3: std::iter::Cloned<std::slice::Iter<'_, i64>>;
    let mut _4: std::slice::Iter<'_, i64>;
    let mut _5: i64;
    let mut _6: i64;
    scope 1 {
        debug sum => _2;
    }

    bb0: {
        _4 = core::slice::<impl [i64]>::iter(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <std::slice::Iter<'_, i64> as Iterator>::cloned::<'_, i64>(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = <Cloned<std::slice::Iter<'_, i64>> as Iterator>::sum::<i64>(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = _2;
        _6 = _2;
        _0 = Mul(move _5, move _6);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i64, &i64);
    let mut _2: &i64;
    let _3: i64;
    let mut _4: &[i64];
    let _5: &i64;
    let _6: &i64;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: i64;
    let mut _10: i64;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: &[i64; 3];
    let mut _15: &i64;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }

    bb0: {
        _15 = const _;
        _14 = const _;
        _4 = _14 as &[i64] (Pointer(Unsize));
        _3 = square_sum(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _1 = (_15, move _2);
        _5 = (_1.0: &i64);
        _6 = (_1.1: &i64);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<i64, i64>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &[i64; 3] = {
    let mut _0: &[i64; 3];
    let mut _1: [i64; 3];

    bb0: {
        _1 = [const 1_i64, const 2_i64, const 3_i64];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 36_i64;
        _0 = &_1;
        return;
    }
}
