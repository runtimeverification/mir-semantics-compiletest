// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn square_sum(_1: &[i64]) -> i64 {
    debug v => _1;                       // in scope 0 at ui/iterators/iter-cloned-type-inference.rs:9:15: 9:16
    let mut _0: i64;                     // return place in scope 0 at ui/iterators/iter-cloned-type-inference.rs:9:29: 9:32
    let _2: i64;                         // in scope 0 at ui/iterators/iter-cloned-type-inference.rs:10:9: 10:12
    let mut _3: std::iter::Cloned<std::slice::Iter<'_, i64>>; // in scope 0 at ui/iterators/iter-cloned-type-inference.rs:10:20: 10:37
    let mut _4: std::slice::Iter<'_, i64>; // in scope 0 at ui/iterators/iter-cloned-type-inference.rs:10:20: 10:28
    let mut _5: &[i64];                  // in scope 0 at ui/iterators/iter-cloned-type-inference.rs:10:20: 10:28
    let mut _6: i64;                     // in scope 0 at ui/iterators/iter-cloned-type-inference.rs:11:5: 11:8
    let mut _7: i64;                     // in scope 0 at ui/iterators/iter-cloned-type-inference.rs:11:11: 11:14
    let mut _8: (i64, bool);             // in scope 0 at ui/iterators/iter-cloned-type-inference.rs:11:5: 11:14
    scope 1 {
        debug sum => _2;                 // in scope 1 at ui/iterators/iter-cloned-type-inference.rs:10:9: 10:12
    }

    bb0: {
        _5 = _1;                         // scope 0 at ui/iterators/iter-cloned-type-inference.rs:10:20: 10:28
        _4 = core::slice::<impl [i64]>::iter(move _5) -> bb1; // scope 0 at ui/iterators/iter-cloned-type-inference.rs:10:20: 10:28
                                         // mir::Constant
                                         // + span: ui/iterators/iter-cloned-type-inference.rs:10:22: 10:26
                                         // + literal: Const { ty: for<'a> fn(&'a [i64]) -> std::slice::Iter<'a, i64> {core::slice::<impl [i64]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <std::slice::Iter<'_, i64> as Iterator>::cloned::<'_, i64>(move _4) -> bb2; // scope 0 at ui/iterators/iter-cloned-type-inference.rs:10:20: 10:37
                                         // mir::Constant
                                         // + span: ui/iterators/iter-cloned-type-inference.rs:10:29: 10:35
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, i64>) -> Cloned<std::slice::Iter<'_, i64>> {<std::slice::Iter<'_, i64> as Iterator>::cloned::<'_, i64>}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = <Cloned<std::slice::Iter<'_, i64>> as Iterator>::sum::<i64>(move _3) -> bb3; // scope 0 at ui/iterators/iter-cloned-type-inference.rs:10:20: 10:43
                                         // mir::Constant
                                         // + span: ui/iterators/iter-cloned-type-inference.rs:10:38: 10:41
                                         // + literal: Const { ty: fn(Cloned<std::slice::Iter<'_, i64>>) -> i64 {<Cloned<std::slice::Iter<'_, i64>> as Iterator>::sum::<i64>}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = _2;                         // scope 1 at ui/iterators/iter-cloned-type-inference.rs:11:5: 11:8
        _7 = _2;                         // scope 1 at ui/iterators/iter-cloned-type-inference.rs:11:11: 11:14
        _8 = CheckedMul(_6, _7);         // scope 1 at ui/iterators/iter-cloned-type-inference.rs:11:5: 11:14
        assert(!move (_8.1: bool), "attempt to compute `{} * {}`, which would overflow", move _6, move _7) -> bb4; // scope 1 at ui/iterators/iter-cloned-type-inference.rs:11:5: 11:14
    }

    bb4: {
        _0 = move (_8.0: i64);           // scope 1 at ui/iterators/iter-cloned-type-inference.rs:11:5: 11:14
        return;                          // scope 0 at ui/iterators/iter-cloned-type-inference.rs:12:2: 12:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/iterators/iter-cloned-type-inference.rs:14:11: 14:11
    let mut _1: (&i64, &i64);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &i64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &i64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: i64;                         // in scope 0 at ui/iterators/iter-cloned-type-inference.rs:15:20: 15:40
    let mut _5: &[i64];                  // in scope 0 at ui/iterators/iter-cloned-type-inference.rs:15:31: 15:39
    let mut _6: &[i64; 3];               // in scope 0 at ui/iterators/iter-cloned-type-inference.rs:15:31: 15:39
    let _7: &[i64; 3];                   // in scope 0 at ui/iterators/iter-cloned-type-inference.rs:15:31: 15:39
    let _8: &i64;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &i64;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: i64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: i64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &i64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &i64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &i64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &i64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: &[i64; 3];              // in scope 0 at ui/iterators/iter-cloned-type-inference.rs:15:31: 15:39
    let mut _23: &i64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _23 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &i64, val: Unevaluated(main, [], Some(promoted[1])) }
        _2 = _23;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _22 = const _;                   // scope 0 at ui/iterators/iter-cloned-type-inference.rs:15:31: 15:39
                                         // mir::Constant
                                         // + span: ui/iterators/iter-cloned-type-inference.rs:15:31: 15:39
                                         // + literal: Const { ty: &[i64; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _7 = _22;                        // scope 0 at ui/iterators/iter-cloned-type-inference.rs:15:31: 15:39
        _6 = _7;                         // scope 0 at ui/iterators/iter-cloned-type-inference.rs:15:31: 15:39
        _5 = move _6 as &[i64] (Pointer(Unsize)); // scope 0 at ui/iterators/iter-cloned-type-inference.rs:15:31: 15:39
        _4 = square_sum(move _5) -> bb1; // scope 0 at ui/iterators/iter-cloned-type-inference.rs:15:20: 15:40
                                         // mir::Constant
                                         // + span: ui/iterators/iter-cloned-type-inference.rs:15:20: 15:30
                                         // + literal: Const { ty: for<'a> fn(&'a [i64]) -> i64 {square_sum}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_1.0: &i64);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_1.1: &i64);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = const 36_i64;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = (*_9);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _14 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<i64, i64>(move _16, move _17, move _19, move _21); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i64, &'b i64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i64, i64>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/iterators/iter-cloned-type-inference.rs:16:2: 16:2
    }
}

promoted[0] in main: &[i64; 3] = {
    let mut _0: &[i64; 3];               // return place in scope 0 at ui/iterators/iter-cloned-type-inference.rs:15:31: 15:39
    let mut _1: [i64; 3];                // in scope 0 at ui/iterators/iter-cloned-type-inference.rs:15:32: 15:39

    bb0: {
        _1 = [const 1_i64, const 2_i64, const 3_i64]; // scope 0 at ui/iterators/iter-cloned-type-inference.rs:15:32: 15:39
        _0 = &_1;                        // scope 0 at ui/iterators/iter-cloned-type-inference.rs:15:31: 15:39
        return;                          // scope 0 at ui/iterators/iter-cloned-type-inference.rs:15:31: 15:39
    }
}

promoted[1] in main: &i64 = {
    let mut _0: &i64;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: i64;                     // in scope 0 at ui/iterators/iter-cloned-type-inference.rs:15:16: 15:18

    bb0: {
        _1 = const 36_i64;               // scope 0 at ui/iterators/iter-cloned-type-inference.rs:15:16: 15:18
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}
