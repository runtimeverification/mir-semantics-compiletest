// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:6:11: 6:11
    let _1: [i32; 2];                    // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:7:9: 7:14
    let _3: std::slice::Iter<'_, i32>;   // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:11:5: 11:22
    let mut _4: &[i32; 2];               // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:11:5: 11:22
    let _5: std::slice::Iter<'_, i32>;   // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:14:5: 14:23
    let mut _6: &[i32; 2];               // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:14:5: 14:23
    let _7: std::slice::Iter<'_, u8>;    // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:17:5: 17:20
    let mut _8: &[u8; 33];               // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:17:5: 17:20
    let _9: std::slice::Iter<'_, u8>;    // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:20:5: 20:26
    let mut _10: &[u8; 33];              // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:20:5: 20:26
    let _11: std::slice::Iter<'_, i32>;  // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:24:5: 24:32
    let mut _12: &[i32; 2];              // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:24:5: 24:32
    let _13: std::boxed::Box<[i32; 2]>;  // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:24:5: 24:20
    let mut _14: [i32; 2];               // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:24:14: 24:19
    let _15: std::slice::Iter<'_, i32>;  // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:27:5: 27:33
    let mut _16: &[i32; 2];              // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:27:5: 27:33
    let _17: std::boxed::Box<[i32; 2]>;  // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:27:5: 27:21
    let mut _18: [i32; 2];               // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:27:14: 27:20
    let _19: std::slice::Iter<'_, u8>;   // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:30:5: 30:30
    let mut _20: &[u8; 33];              // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:30:5: 30:30
    let _21: std::boxed::Box<[u8; 33]>;  // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:30:5: 30:18
    let mut _22: [u8; 33];               // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:30:14: 30:17
    let _23: std::slice::Iter<'_, u8>;   // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:33:5: 33:36
    let mut _24: &[u8; 33];              // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:33:5: 33:36
    let _25: std::boxed::Box<[u8; 33]>;  // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:33:5: 33:24
    let mut _26: [u8; 33];               // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:33:14: 33:23
    let _27: std::slice::Iter<'_, i32>;  // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:37:5: 37:42
    let mut _28: &[i32; 2];              // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:37:5: 37:42
    let _29: std::boxed::Box<std::boxed::Box<[i32; 2]>>; // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:37:5: 37:30
    let mut _30: std::boxed::Box<[i32; 2]>; // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:37:14: 37:29
    let mut _31: [i32; 2];               // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:37:23: 37:28
    let _32: std::slice::Iter<'_, i32>;  // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:40:5: 40:43
    let mut _33: &[i32; 2];              // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:40:5: 40:43
    let _34: std::boxed::Box<std::boxed::Box<[i32; 2]>>; // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:40:5: 40:31
    let mut _35: std::boxed::Box<[i32; 2]>; // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:40:14: 40:30
    let mut _36: [i32; 2];               // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:40:23: 40:29
    let _37: std::slice::Iter<'_, u8>;   // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:43:5: 43:40
    let mut _38: &[u8; 33];              // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:43:5: 43:40
    let _39: std::boxed::Box<std::boxed::Box<[u8; 33]>>; // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:43:5: 43:28
    let mut _40: std::boxed::Box<[u8; 33]>; // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:43:14: 43:27
    let mut _41: [u8; 33];               // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:43:23: 43:26
    let _42: std::slice::Iter<'_, u8>;   // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:46:5: 46:46
    let mut _43: &[u8; 33];              // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:46:5: 46:46
    let _44: std::boxed::Box<std::boxed::Box<[u8; 33]>>; // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:46:5: 46:34
    let mut _45: std::boxed::Box<[u8; 33]>; // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:46:14: 46:33
    let mut _46: [u8; 33];               // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:46:23: 46:32
    let _47: std::slice::Iter<'_, i32>;  // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:51:5: 51:26
    let mut _48: &[i32; 2];              // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:51:5: 51:26
    let _49: &[i32; 2];                  // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:51:5: 51:14
    let _50: std::slice::Iter<'_, i32>;  // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:52:5: 52:25
    let mut _51: &[i32; 2];              // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:52:5: 52:25
    let _52: &[i32; 2];                  // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:52:5: 52:13
    let _53: std::slice::Iter<'_, u8>;   // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:53:5: 53:29
    let mut _54: &[u8; 33];              // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:53:5: 53:29
    let _55: &[u8; 33];                  // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:53:5: 53:17
    let _56: std::slice::Iter<'_, u8>;   // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:54:5: 54:23
    let mut _57: &[u8; 33];              // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:54:5: 54:23
    let _58: &[u8; 33];                  // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:54:5: 54:11
    let mut _59: std::slice::Iter<'_, i32>; // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
    let mut _60: &[i32; 2];              // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
    let mut _62: std::option::Option<&i32>; // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
    let mut _63: &mut std::slice::Iter<'_, i32>; // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
    let mut _64: &mut std::slice::Iter<'_, i32>; // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
    let mut _65: isize;                  // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:56:5: 56:24
    let _66: std::slice::Iter<'_, i32>;  // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:57:5: 57:33
    let mut _67: &[i32];                 // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:57:5: 57:33
    let _68: &[i32];                     // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:57:5: 57:21
    let mut _69: &[i32; 2];              // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:57:6: 57:12
    let _70: &[i32; 2];                  // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:57:6: 57:12
    let _71: std::slice::Iter<'_, i32>;  // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:58:5: 58:26
    let mut _72: &[i32];                 // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:58:5: 58:26
    let _73: &[i32];                     // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:58:5: 58:14
    let mut _74: &[i32; 2];              // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:58:5: 58:10
    let mut _75: std::ops::RangeFull;    // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:58:11: 58:13
    let _76: std::slice::Iter<'_, i32>;  // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:59:5: 59:48
    let mut _77: &[i32; 2];              // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:59:40: 59:47
    let _78: std::slice::Iter<'_, i32>;  // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:62:5: 62:23
    let mut _79: &[i32; 2];              // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:62:5: 62:23
    let mut _87: std::boxed::Box<[i32; 2]>; // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:37:5: 37:30
    let mut _88: std::boxed::Box<[i32; 2]>; // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:40:5: 40:31
    let mut _89: std::boxed::Box<[u8; 33]>; // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:43:5: 43:28
    let mut _90: std::boxed::Box<[u8; 33]>; // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:46:5: 46:34
    let mut _91: *const [i32; 2];        // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:24:5: 24:20
    let mut _92: *const [i32; 2];        // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:27:5: 27:21
    let mut _93: *const [u8; 33];        // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:30:5: 30:18
    let mut _94: *const [u8; 33];        // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:33:5: 33:24
    let mut _95: *const std::boxed::Box<[i32; 2]>; // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:37:5: 37:30
    let mut _96: *const [i32; 2];        // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:37:5: 37:30
    let mut _97: *const std::boxed::Box<[i32; 2]>; // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:40:5: 40:31
    let mut _98: *const [i32; 2];        // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:40:5: 40:31
    let mut _99: *const std::boxed::Box<[u8; 33]>; // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:43:5: 43:28
    let mut _100: *const [u8; 33];       // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:43:5: 43:28
    let mut _101: *const std::boxed::Box<[u8; 33]>; // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:46:5: 46:34
    let mut _102: *const [u8; 33];       // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:46:5: 46:34
    scope 1 {
        debug small => _1;               // in scope 1 at ui/iterators/into-iter-on-arrays-lint.rs:7:9: 7:14
        let _2: [u8; 33];                // in scope 1 at ui/iterators/into-iter-on-arrays-lint.rs:8:9: 8:12
        scope 2 {
            debug big => _2;             // in scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:8:9: 8:12
            let mut _61: std::slice::Iter<'_, i32>; // in scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
            let mut _81: &[i32; 2];      // in scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:59:40: 59:47
            let mut _82: &[i32; 2];      // in scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
            let mut _83: &[u8; 33];      // in scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:53:5: 53:17
            let mut _84: &[i32; 2];      // in scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:51:5: 51:14
            let mut _85: &[u8; 33];      // in scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:20:5: 20:26
            let mut _86: &[i32; 2];      // in scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:14:5: 14:23
            scope 3 {
                debug iter => _61;       // in scope 3 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
            }
            scope 4 {
                let mut _80: &[i32; 2];  // in scope 4 at ui/iterators/into-iter-on-arrays-lint.rs:62:5: 62:23
            }
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32]; // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:7:17: 7:23
        _2 = [const 0_u8; 33];           // scope 1 at ui/iterators/into-iter-on-arrays-lint.rs:8:15: 8:24
        _4 = &_1;                        // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:11:5: 11:22
        _3 = <&[i32; 2] as IntoIterator>::into_iter(move _4) -> bb1; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:11:5: 11:22
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:11:11: 11:20
                                         // + literal: Const { ty: fn(&[i32; 2]) -> <&[i32; 2] as IntoIterator>::IntoIter {<&[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _86 = const _;                   // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:14:5: 14:23
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:14:5: 14:23
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[6])) }
        _6 = _86;                        // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:14:5: 14:23
        _5 = <&[i32; 2] as IntoIterator>::into_iter(move _6) -> bb2; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:14:5: 14:23
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:14:12: 14:21
                                         // + literal: Const { ty: fn(&[i32; 2]) -> <&[i32; 2] as IntoIterator>::IntoIter {<&[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &_2;                        // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:17:5: 17:20
        _7 = <&[u8; 33] as IntoIterator>::into_iter(move _8) -> bb3; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:17:5: 17:20
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:17:9: 17:18
                                         // + literal: Const { ty: fn(&[u8; 33]) -> <&[u8; 33] as IntoIterator>::IntoIter {<&[u8; 33] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _85 = const _;                   // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:20:5: 20:26
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:20:5: 20:26
                                         // + literal: Const { ty: &[u8; 33], val: Unevaluated(main, [], Some(promoted[5])) }
        _10 = _85;                       // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:20:5: 20:26
        _9 = <&[u8; 33] as IntoIterator>::into_iter(move _10) -> bb4; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:20:5: 20:26
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:20:15: 20:24
                                         // + literal: Const { ty: fn(&[u8; 33]) -> <&[u8; 33] as IntoIterator>::IntoIter {<&[u8; 33] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = _1;                        // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:24:14: 24:19
        _13 = Box::<[i32; 2]>::new(move _14) -> bb5; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:24:5: 24:20
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:24:5: 24:13
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([i32; 2]) -> Box<[i32; 2]> {Box::<[i32; 2]>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _91 = (((_13.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2]); // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:24:5: 24:32
        _12 = &(*_91);                   // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:24:5: 24:32
        _11 = <&[i32; 2] as IntoIterator>::into_iter(move _12) -> [return: bb6, unwind: bb54]; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:24:5: 24:32
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:24:21: 24:30
                                         // + literal: Const { ty: fn(&[i32; 2]) -> <&[i32; 2] as IntoIterator>::IntoIter {<&[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_13) -> bb7;                // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:24:32: 24:33
    }

    bb7: {
        _18 = [const 1_i32, const 2_i32]; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:27:14: 27:20
        _17 = Box::<[i32; 2]>::new(move _18) -> bb8; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:27:5: 27:21
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:27:5: 27:13
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn([i32; 2]) -> Box<[i32; 2]> {Box::<[i32; 2]>::new}, val: Value(<ZST>) }
    }

    bb8: {
        _92 = (((_17.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2]); // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:27:5: 27:33
        _16 = &(*_92);                   // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:27:5: 27:33
        _15 = <&[i32; 2] as IntoIterator>::into_iter(move _16) -> [return: bb9, unwind: bb53]; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:27:5: 27:33
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:27:22: 27:31
                                         // + literal: Const { ty: fn(&[i32; 2]) -> <&[i32; 2] as IntoIterator>::IntoIter {<&[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_17) -> bb10;               // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:27:33: 27:34
    }

    bb10: {
        _22 = _2;                        // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:30:14: 30:17
        _21 = Box::<[u8; 33]>::new(move _22) -> bb11; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:30:5: 30:18
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:30:5: 30:13
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn([u8; 33]) -> Box<[u8; 33]> {Box::<[u8; 33]>::new}, val: Value(<ZST>) }
    }

    bb11: {
        _93 = (((_21.0: std::ptr::Unique<[u8; 33]>).0: std::ptr::NonNull<[u8; 33]>).0: *const [u8; 33]); // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:30:5: 30:30
        _20 = &(*_93);                   // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:30:5: 30:30
        _19 = <&[u8; 33] as IntoIterator>::into_iter(move _20) -> [return: bb12, unwind: bb52]; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:30:5: 30:30
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:30:19: 30:28
                                         // + literal: Const { ty: fn(&[u8; 33]) -> <&[u8; 33] as IntoIterator>::IntoIter {<&[u8; 33] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_21) -> bb13;               // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:30:30: 30:31
    }

    bb13: {
        _26 = [const 0_u8; 33];          // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:33:14: 33:23
        _25 = Box::<[u8; 33]>::new(move _26) -> bb14; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:33:5: 33:24
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:33:5: 33:13
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn([u8; 33]) -> Box<[u8; 33]> {Box::<[u8; 33]>::new}, val: Value(<ZST>) }
    }

    bb14: {
        _94 = (((_25.0: std::ptr::Unique<[u8; 33]>).0: std::ptr::NonNull<[u8; 33]>).0: *const [u8; 33]); // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:33:5: 33:36
        _24 = &(*_94);                   // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:33:5: 33:36
        _23 = <&[u8; 33] as IntoIterator>::into_iter(move _24) -> [return: bb15, unwind: bb51]; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:33:5: 33:36
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:33:25: 33:34
                                         // + literal: Const { ty: fn(&[u8; 33]) -> <&[u8; 33] as IntoIterator>::IntoIter {<&[u8; 33] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb15: {
        drop(_25) -> bb16;               // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:33:36: 33:37
    }

    bb16: {
        _31 = _1;                        // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:37:23: 37:28
        _30 = Box::<[i32; 2]>::new(move _31) -> bb17; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:37:14: 37:29
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:37:14: 37:22
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn([i32; 2]) -> Box<[i32; 2]> {Box::<[i32; 2]>::new}, val: Value(<ZST>) }
    }

    bb17: {
        _29 = Box::<Box<[i32; 2]>>::new(move _30) -> bb18; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:37:5: 37:30
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:37:5: 37:13
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(Box<[i32; 2]>) -> Box<Box<[i32; 2]>> {Box::<Box<[i32; 2]>>::new}, val: Value(<ZST>) }
    }

    bb18: {
        _95 = (((_29.0: std::ptr::Unique<std::boxed::Box<[i32; 2]>>).0: std::ptr::NonNull<std::boxed::Box<[i32; 2]>>).0: *const std::boxed::Box<[i32; 2]>); // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:37:5: 37:42
        _87 = deref_copy (*_95);         // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:37:5: 37:42
        _96 = (((_87.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2]); // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:37:5: 37:42
        _28 = &(*_96);                   // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:37:5: 37:42
        _27 = <&[i32; 2] as IntoIterator>::into_iter(move _28) -> [return: bb19, unwind: bb50]; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:37:5: 37:42
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:37:31: 37:40
                                         // + literal: Const { ty: fn(&[i32; 2]) -> <&[i32; 2] as IntoIterator>::IntoIter {<&[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb19: {
        drop(_29) -> bb20;               // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:37:42: 37:43
    }

    bb20: {
        _36 = [const 1_i32, const 2_i32]; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:40:23: 40:29
        _35 = Box::<[i32; 2]>::new(move _36) -> bb21; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:40:14: 40:30
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:40:14: 40:22
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn([i32; 2]) -> Box<[i32; 2]> {Box::<[i32; 2]>::new}, val: Value(<ZST>) }
    }

    bb21: {
        _34 = Box::<Box<[i32; 2]>>::new(move _35) -> bb22; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:40:5: 40:31
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:40:5: 40:13
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(Box<[i32; 2]>) -> Box<Box<[i32; 2]>> {Box::<Box<[i32; 2]>>::new}, val: Value(<ZST>) }
    }

    bb22: {
        _97 = (((_34.0: std::ptr::Unique<std::boxed::Box<[i32; 2]>>).0: std::ptr::NonNull<std::boxed::Box<[i32; 2]>>).0: *const std::boxed::Box<[i32; 2]>); // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:40:5: 40:43
        _88 = deref_copy (*_97);         // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:40:5: 40:43
        _98 = (((_88.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2]); // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:40:5: 40:43
        _33 = &(*_98);                   // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:40:5: 40:43
        _32 = <&[i32; 2] as IntoIterator>::into_iter(move _33) -> [return: bb23, unwind: bb49]; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:40:5: 40:43
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:40:32: 40:41
                                         // + literal: Const { ty: fn(&[i32; 2]) -> <&[i32; 2] as IntoIterator>::IntoIter {<&[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb23: {
        drop(_34) -> bb24;               // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:40:43: 40:44
    }

    bb24: {
        _41 = _2;                        // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:43:23: 43:26
        _40 = Box::<[u8; 33]>::new(move _41) -> bb25; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:43:14: 43:27
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:43:14: 43:22
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn([u8; 33]) -> Box<[u8; 33]> {Box::<[u8; 33]>::new}, val: Value(<ZST>) }
    }

    bb25: {
        _39 = Box::<Box<[u8; 33]>>::new(move _40) -> bb26; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:43:5: 43:28
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:43:5: 43:13
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(Box<[u8; 33]>) -> Box<Box<[u8; 33]>> {Box::<Box<[u8; 33]>>::new}, val: Value(<ZST>) }
    }

    bb26: {
        _99 = (((_39.0: std::ptr::Unique<std::boxed::Box<[u8; 33]>>).0: std::ptr::NonNull<std::boxed::Box<[u8; 33]>>).0: *const std::boxed::Box<[u8; 33]>); // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:43:5: 43:40
        _89 = deref_copy (*_99);         // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:43:5: 43:40
        _100 = (((_89.0: std::ptr::Unique<[u8; 33]>).0: std::ptr::NonNull<[u8; 33]>).0: *const [u8; 33]); // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:43:5: 43:40
        _38 = &(*_100);                  // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:43:5: 43:40
        _37 = <&[u8; 33] as IntoIterator>::into_iter(move _38) -> [return: bb27, unwind: bb48]; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:43:5: 43:40
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:43:29: 43:38
                                         // + literal: Const { ty: fn(&[u8; 33]) -> <&[u8; 33] as IntoIterator>::IntoIter {<&[u8; 33] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb27: {
        drop(_39) -> bb28;               // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:43:40: 43:41
    }

    bb28: {
        _46 = [const 0_u8; 33];          // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:46:23: 46:32
        _45 = Box::<[u8; 33]>::new(move _46) -> bb29; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:46:14: 46:33
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:46:14: 46:22
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn([u8; 33]) -> Box<[u8; 33]> {Box::<[u8; 33]>::new}, val: Value(<ZST>) }
    }

    bb29: {
        _44 = Box::<Box<[u8; 33]>>::new(move _45) -> bb30; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:46:5: 46:34
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:46:5: 46:13
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn(Box<[u8; 33]>) -> Box<Box<[u8; 33]>> {Box::<Box<[u8; 33]>>::new}, val: Value(<ZST>) }
    }

    bb30: {
        _101 = (((_44.0: std::ptr::Unique<std::boxed::Box<[u8; 33]>>).0: std::ptr::NonNull<std::boxed::Box<[u8; 33]>>).0: *const std::boxed::Box<[u8; 33]>); // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:46:5: 46:46
        _90 = deref_copy (*_101);        // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:46:5: 46:46
        _102 = (((_90.0: std::ptr::Unique<[u8; 33]>).0: std::ptr::NonNull<[u8; 33]>).0: *const [u8; 33]); // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:46:5: 46:46
        _43 = &(*_102);                  // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:46:5: 46:46
        _42 = <&[u8; 33] as IntoIterator>::into_iter(move _43) -> [return: bb31, unwind: bb47]; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:46:5: 46:46
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:46:35: 46:44
                                         // + literal: Const { ty: fn(&[u8; 33]) -> <&[u8; 33] as IntoIterator>::IntoIter {<&[u8; 33] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb31: {
        drop(_44) -> bb32;               // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:46:46: 46:47
    }

    bb32: {
        _84 = const _;                   // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:51:5: 51:14
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:51:5: 51:14
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[4])) }
        _49 = _84;                       // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:51:5: 51:14
        _48 = _49;                       // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:51:5: 51:26
        _47 = <&[i32; 2] as IntoIterator>::into_iter(move _48) -> bb33; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:51:5: 51:26
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:51:15: 51:24
                                         // + literal: Const { ty: fn(&[i32; 2]) -> <&[i32; 2] as IntoIterator>::IntoIter {<&[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb33: {
        _52 = &_1;                       // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:52:5: 52:13
        _51 = _52;                       // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:52:5: 52:25
        _50 = <&[i32; 2] as IntoIterator>::into_iter(move _51) -> bb34; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:52:5: 52:25
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:52:14: 52:23
                                         // + literal: Const { ty: fn(&[i32; 2]) -> <&[i32; 2] as IntoIterator>::IntoIter {<&[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb34: {
        _83 = const _;                   // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:53:5: 53:17
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:53:5: 53:17
                                         // + literal: Const { ty: &[u8; 33], val: Unevaluated(main, [], Some(promoted[3])) }
        _55 = _83;                       // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:53:5: 53:17
        _54 = _55;                       // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:53:5: 53:29
        _53 = <&[u8; 33] as IntoIterator>::into_iter(move _54) -> bb35; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:53:5: 53:29
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:53:18: 53:27
                                         // + literal: Const { ty: fn(&[u8; 33]) -> <&[u8; 33] as IntoIterator>::IntoIter {<&[u8; 33] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb35: {
        _58 = &_2;                       // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:54:5: 54:11
        _57 = _58;                       // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:54:5: 54:23
        _56 = <&[u8; 33] as IntoIterator>::into_iter(move _57) -> bb36; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:54:5: 54:23
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:54:12: 54:21
                                         // + literal: Const { ty: fn(&[u8; 33]) -> <&[u8; 33] as IntoIterator>::IntoIter {<&[u8; 33] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb36: {
        _82 = const _;                   // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[2])) }
        _60 = _82;                       // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
        _59 = <&[i32; 2] as IntoIterator>::into_iter(move _60) -> bb37; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
                                         // + literal: Const { ty: fn(&[i32; 2]) -> <&[i32; 2] as IntoIterator>::IntoIter {<&[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb37: {
        _61 = move _59;                  // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
        goto -> bb38;                    // scope 3 at ui/iterators/into-iter-on-arrays-lint.rs:56:5: 56:24
    }

    bb38: {
        _64 = &mut _61;                  // scope 3 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
        _63 = &mut (*_64);               // scope 3 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
        _62 = <std::slice::Iter<'_, i32> as Iterator>::next(move _63) -> bb39; // scope 3 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, i32>) -> Option<<std::slice::Iter<'_, i32> as Iterator>::Item> {<std::slice::Iter<'_, i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb39: {
        _65 = discriminant(_62);         // scope 3 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
        switchInt(move _65) -> [0: bb41, 1: bb38, otherwise: bb40]; // scope 3 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
    }

    bb40: {
        unreachable;                     // scope 3 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
    }

    bb41: {
        _70 = &_1;                       // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:57:6: 57:12
        _69 = _70;                       // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:57:6: 57:12
        _68 = move _69 as &[i32] (Pointer(Unsize)); // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:57:6: 57:12
        _67 = _68;                       // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:57:5: 57:33
        _66 = <&[i32] as IntoIterator>::into_iter(move _67) -> bb42; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:57:5: 57:33
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:57:22: 57:31
                                         // + literal: Const { ty: fn(&[i32]) -> <&[i32] as IntoIterator>::IntoIter {<&[i32] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb42: {
        _74 = &_1;                       // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:58:5: 58:10
        _73 = <[i32; 2] as Index<RangeFull>>::index(move _74, move _75) -> bb43; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:58:5: 58:14
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:58:5: 58:14
                                         // + literal: Const { ty: for<'a> fn(&'a [i32; 2], RangeFull) -> &'a <[i32; 2] as Index<RangeFull>>::Output {<[i32; 2] as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb43: {
        _72 = _73;                       // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:58:5: 58:26
        _71 = <&[i32] as IntoIterator>::into_iter(move _72) -> bb44; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:58:5: 58:26
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:58:15: 58:24
                                         // + literal: Const { ty: fn(&[i32]) -> <&[i32] as IntoIterator>::IntoIter {<&[i32] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb44: {
        _81 = const _;                   // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:59:40: 59:47
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:59:40: 59:47
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _77 = _81;                       // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:59:40: 59:47
        _76 = <&[i32; 2] as IntoIterator>::into_iter(move _77) -> bb45; // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:59:5: 59:48
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:59:5: 59:39
                                         // + literal: Const { ty: fn(&[i32; 2]) -> <&[i32; 2] as IntoIterator>::IntoIter {<&[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb45: {
        _80 = const _;                   // scope 4 at ui/iterators/into-iter-on-arrays-lint.rs:62:5: 62:23
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:62:5: 62:23
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _79 = _80;                       // scope 4 at ui/iterators/into-iter-on-arrays-lint.rs:62:5: 62:23
        _78 = <&[i32; 2] as IntoIterator>::into_iter(move _79) -> bb46; // scope 4 at ui/iterators/into-iter-on-arrays-lint.rs:62:5: 62:23
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-lint.rs:62:12: 62:21
                                         // + literal: Const { ty: fn(&[i32; 2]) -> <&[i32; 2] as IntoIterator>::IntoIter {<&[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb46: {
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:63:2: 63:2
    }

    bb47 (cleanup): {
        drop(_44) -> bb55;               // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:46:46: 46:47
    }

    bb48 (cleanup): {
        drop(_39) -> bb55;               // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:43:40: 43:41
    }

    bb49 (cleanup): {
        drop(_34) -> bb55;               // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:40:43: 40:44
    }

    bb50 (cleanup): {
        drop(_29) -> bb55;               // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:37:42: 37:43
    }

    bb51 (cleanup): {
        drop(_25) -> bb55;               // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:33:36: 33:37
    }

    bb52 (cleanup): {
        drop(_21) -> bb55;               // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:30:30: 30:31
    }

    bb53 (cleanup): {
        drop(_17) -> bb55;               // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:27:33: 27:34
    }

    bb54 (cleanup): {
        drop(_13) -> bb55;               // scope 2 at ui/iterators/into-iter-on-arrays-lint.rs:24:32: 24:33
    }

    bb55 (cleanup): {
        resume;                          // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:6:1: 63:2
    }
}

promoted[0] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:62:5: 62:23
    let mut _1: [i32; 2];                // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:62:5: 62:11

    bb0: {
        _1 = [const 0_i32, const 1_i32]; // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:62:5: 62:11
        _0 = &_1;                        // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:62:5: 62:23
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:62:5: 62:23
    }
}

promoted[1] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:59:40: 59:47
    let mut _1: [i32; 2];                // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:59:41: 59:47

    bb0: {
        _1 = [const 1_i32, const 2_i32]; // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:59:41: 59:47
        _0 = &_1;                        // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:59:40: 59:47
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:59:40: 59:47
    }
}

promoted[2] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
    let mut _1: [i32; 2];                // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:56:15: 56:21

    bb0: {
        _1 = [const 1_i32, const 2_i32]; // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:56:15: 56:21
        _0 = &_1;                        // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:56:14: 56:21
    }
}

promoted[3] in main: &[u8; 33] = {
    let mut _0: &[u8; 33];               // return place in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:53:5: 53:17
    let mut _1: [u8; 33];                // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:53:7: 53:16

    bb0: {
        _1 = [const 0_u8; 33];           // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:53:7: 53:16
        _0 = &_1;                        // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:53:5: 53:17
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:53:5: 53:17
    }
}

promoted[4] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:51:5: 51:14
    let mut _1: [i32; 2];                // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:51:7: 51:13

    bb0: {
        _1 = [const 1_i32, const 2_i32]; // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:51:7: 51:13
        _0 = &_1;                        // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:51:5: 51:14
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:51:5: 51:14
    }
}

promoted[5] in main: &[u8; 33] = {
    let mut _0: &[u8; 33];               // return place in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:20:5: 20:26
    let mut _1: [u8; 33];                // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:20:5: 20:14

    bb0: {
        _1 = [const 0_u8; 33];           // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:20:5: 20:14
        _0 = &_1;                        // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:20:5: 20:26
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:20:5: 20:26
    }
}

promoted[6] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:14:5: 14:23
    let mut _1: [i32; 2];                // in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:14:5: 14:11

    bb0: {
        _1 = [const 1_i32, const 2_i32]; // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:14:5: 14:11
        _0 = &_1;                        // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:14:5: 14:23
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:14:5: 14:23
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:8:21: 8:23

    bb0: {
        _0 = const 33_usize;             // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:8:21: 8:23
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:8:21: 8:23
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:20:11: 20:13

    bb0: {
        _0 = const 33_usize;             // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:20:11: 20:13
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:20:11: 20:13
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:33:20: 33:22

    bb0: {
        _0 = const 33_usize;             // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:33:20: 33:22
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:33:20: 33:22
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:46:29: 46:31

    bb0: {
        _0 = const 33_usize;             // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:46:29: 46:31
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:46:29: 46:31
    }
}

main::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:53:13: 53:15

    bb0: {
        _0 = const 33_usize;             // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:53:13: 53:15
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-lint.rs:53:13: 53:15
    }
}
