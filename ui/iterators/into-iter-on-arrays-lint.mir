// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [i32; 2];
    let _3: std::slice::Iter<'_, i32>;
    let mut _4: &[i32; 2];
    let _5: std::slice::Iter<'_, i32>;
    let _6: std::slice::Iter<'_, u8>;
    let mut _7: &[u8; 33];
    let _8: std::slice::Iter<'_, u8>;
    let _9: std::slice::Iter<'_, i32>;
    let mut _10: &[i32; 2];
    let _11: std::boxed::Box<[i32; 2]>;
    let mut _12: [i32; 2];
    let _13: std::slice::Iter<'_, i32>;
    let mut _14: &[i32; 2];
    let _15: std::boxed::Box<[i32; 2]>;
    let mut _16: [i32; 2];
    let _17: std::slice::Iter<'_, u8>;
    let mut _18: &[u8; 33];
    let _19: std::boxed::Box<[u8; 33]>;
    let mut _20: [u8; 33];
    let _21: std::slice::Iter<'_, u8>;
    let mut _22: &[u8; 33];
    let _23: std::boxed::Box<[u8; 33]>;
    let mut _24: [u8; 33];
    let _25: std::slice::Iter<'_, i32>;
    let mut _26: &[i32; 2];
    let _27: std::boxed::Box<std::boxed::Box<[i32; 2]>>;
    let mut _28: std::boxed::Box<[i32; 2]>;
    let mut _29: [i32; 2];
    let _30: std::slice::Iter<'_, i32>;
    let mut _31: &[i32; 2];
    let _32: std::boxed::Box<std::boxed::Box<[i32; 2]>>;
    let mut _33: std::boxed::Box<[i32; 2]>;
    let mut _34: [i32; 2];
    let _35: std::slice::Iter<'_, u8>;
    let mut _36: &[u8; 33];
    let _37: std::boxed::Box<std::boxed::Box<[u8; 33]>>;
    let mut _38: std::boxed::Box<[u8; 33]>;
    let mut _39: [u8; 33];
    let _40: std::slice::Iter<'_, u8>;
    let mut _41: &[u8; 33];
    let _42: std::boxed::Box<std::boxed::Box<[u8; 33]>>;
    let mut _43: std::boxed::Box<[u8; 33]>;
    let mut _44: [u8; 33];
    let _45: std::slice::Iter<'_, i32>;
    let _46: std::slice::Iter<'_, i32>;
    let _47: &[i32; 2];
    let _48: std::slice::Iter<'_, u8>;
    let _49: std::slice::Iter<'_, u8>;
    let _50: &[u8; 33];
    let mut _51: std::slice::Iter<'_, i32>;
    let mut _53: std::option::Option<&i32>;
    let mut _54: &mut std::slice::Iter<'_, i32>;
    let mut _55: isize;
    let _56: std::slice::Iter<'_, i32>;
    let _57: &[i32];
    let _58: &[i32; 2];
    let _59: std::slice::Iter<'_, i32>;
    let mut _60: &[i32];
    let _61: &[i32];
    let mut _62: &[i32; 2];
    let _63: std::slice::Iter<'_, i32>;
    let _64: std::slice::Iter<'_, i32>;
    let mut _72: std::boxed::Box<[i32; 2]>;
    let mut _73: std::boxed::Box<[i32; 2]>;
    let mut _74: std::boxed::Box<[u8; 33]>;
    let mut _75: std::boxed::Box<[u8; 33]>;
    let mut _76: *const [i32; 2];
    let mut _77: *const [i32; 2];
    let mut _78: *const [u8; 33];
    let mut _79: *const [u8; 33];
    let mut _80: *const std::boxed::Box<[i32; 2]>;
    let mut _81: *const [i32; 2];
    let mut _82: *const std::boxed::Box<[i32; 2]>;
    let mut _83: *const [i32; 2];
    let mut _84: *const std::boxed::Box<[u8; 33]>;
    let mut _85: *const [u8; 33];
    let mut _86: *const std::boxed::Box<[u8; 33]>;
    let mut _87: *const [u8; 33];
    scope 1 {
        debug small => _1;
        let _2: [u8; 33];
        scope 2 {
            debug big => _2;
            let mut _52: std::slice::Iter<'_, i32>;
            let mut _66: &[i32; 2];
            let mut _67: &[i32; 2];
            let mut _68: &[u8; 33];
            let mut _69: &[i32; 2];
            let mut _70: &[u8; 33];
            let mut _71: &[i32; 2];
            let mut _88: *const ();
            let mut _89: usize;
            let mut _90: usize;
            let mut _91: usize;
            let mut _92: usize;
            let mut _93: bool;
            let mut _94: *const ();
            let mut _95: usize;
            let mut _96: usize;
            let mut _97: usize;
            let mut _98: usize;
            let mut _99: bool;
            let mut _100: *const ();
            let mut _101: usize;
            let mut _102: usize;
            let mut _103: usize;
            let mut _104: usize;
            let mut _105: bool;
            let mut _106: *const ();
            let mut _107: usize;
            let mut _108: usize;
            let mut _109: usize;
            let mut _110: usize;
            let mut _111: bool;
            let mut _112: *const ();
            let mut _113: usize;
            let mut _114: usize;
            let mut _115: usize;
            let mut _116: usize;
            let mut _117: bool;
            let mut _118: *const ();
            let mut _119: usize;
            let mut _120: usize;
            let mut _121: usize;
            let mut _122: usize;
            let mut _123: bool;
            let mut _124: *const ();
            let mut _125: usize;
            let mut _126: usize;
            let mut _127: usize;
            let mut _128: usize;
            let mut _129: bool;
            let mut _130: *const ();
            let mut _131: usize;
            let mut _132: usize;
            let mut _133: usize;
            let mut _134: usize;
            let mut _135: bool;
            scope 3 {
                debug iter => _52;
            }
            scope 4 {
                let mut _65: &[i32; 2];
            }
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32];
        _2 = [const 0_u8; 33];
        _4 = &_1;
        _3 = <&[i32; 2] as IntoIterator>::into_iter(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _71 = const _;
        _5 = <&[i32; 2] as IntoIterator>::into_iter(_71) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = &_2;
        _6 = <&[u8; 33] as IntoIterator>::into_iter(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _70 = const _;
        _8 = <&[u8; 33] as IntoIterator>::into_iter(_70) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = _1;
        _11 = Box::<[i32; 2]>::new(move _12) -> [return: bb5, unwind continue];
    }

    bb5: {
        _76 = (((_11.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2]);
        _130 = _76 as *const () (PtrToPtr);
        _131 = _130 as usize (Transmute);
        _132 = AlignOf(i32);
        _133 = Sub(_132, const 1_usize);
        _134 = BitAnd(_131, _133);
        _135 = Eq(_134, const 0_usize);
        assert(_135, "misaligned pointer dereference: address must be a multiple of {} but is {}", _132, _131) -> [success: bb63, unwind unreachable];
    }

    bb6: {
        drop(_11) -> [return: bb7, unwind continue];
    }

    bb7: {
        _16 = [const 1_i32, const 2_i32];
        _15 = Box::<[i32; 2]>::new(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        _77 = (((_15.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2]);
        _124 = _77 as *const () (PtrToPtr);
        _125 = _124 as usize (Transmute);
        _126 = AlignOf(i32);
        _127 = Sub(_126, const 1_usize);
        _128 = BitAnd(_125, _127);
        _129 = Eq(_128, const 0_usize);
        assert(_129, "misaligned pointer dereference: address must be a multiple of {} but is {}", _126, _125) -> [success: bb62, unwind unreachable];
    }

    bb9: {
        drop(_15) -> [return: bb10, unwind continue];
    }

    bb10: {
        _20 = _2;
        _19 = Box::<[u8; 33]>::new(move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        _78 = (((_19.0: std::ptr::Unique<[u8; 33]>).0: std::ptr::NonNull<[u8; 33]>).0: *const [u8; 33]);
        _18 = &(*_78);
        _17 = <&[u8; 33] as IntoIterator>::into_iter(move _18) -> [return: bb12, unwind: bb52];
    }

    bb12: {
        drop(_19) -> [return: bb13, unwind continue];
    }

    bb13: {
        _24 = [const 0_u8; 33];
        _23 = Box::<[u8; 33]>::new(move _24) -> [return: bb14, unwind continue];
    }

    bb14: {
        _79 = (((_23.0: std::ptr::Unique<[u8; 33]>).0: std::ptr::NonNull<[u8; 33]>).0: *const [u8; 33]);
        _22 = &(*_79);
        _21 = <&[u8; 33] as IntoIterator>::into_iter(move _22) -> [return: bb15, unwind: bb51];
    }

    bb15: {
        drop(_23) -> [return: bb16, unwind continue];
    }

    bb16: {
        _29 = _1;
        _28 = Box::<[i32; 2]>::new(move _29) -> [return: bb17, unwind continue];
    }

    bb17: {
        _27 = Box::<Box<[i32; 2]>>::new(move _28) -> [return: bb18, unwind continue];
    }

    bb18: {
        _80 = (((_27.0: std::ptr::Unique<std::boxed::Box<[i32; 2]>>).0: std::ptr::NonNull<std::boxed::Box<[i32; 2]>>).0: *const std::boxed::Box<[i32; 2]>);
        _118 = _80 as *const () (PtrToPtr);
        _119 = _118 as usize (Transmute);
        _120 = AlignOf(std::boxed::Box<[i32; 2]>);
        _121 = Sub(_120, const 1_usize);
        _122 = BitAnd(_119, _121);
        _123 = Eq(_122, const 0_usize);
        assert(_123, "misaligned pointer dereference: address must be a multiple of {} but is {}", _120, _119) -> [success: bb61, unwind unreachable];
    }

    bb19: {
        drop(_27) -> [return: bb20, unwind continue];
    }

    bb20: {
        _34 = [const 1_i32, const 2_i32];
        _33 = Box::<[i32; 2]>::new(move _34) -> [return: bb21, unwind continue];
    }

    bb21: {
        _32 = Box::<Box<[i32; 2]>>::new(move _33) -> [return: bb22, unwind continue];
    }

    bb22: {
        _82 = (((_32.0: std::ptr::Unique<std::boxed::Box<[i32; 2]>>).0: std::ptr::NonNull<std::boxed::Box<[i32; 2]>>).0: *const std::boxed::Box<[i32; 2]>);
        _106 = _82 as *const () (PtrToPtr);
        _107 = _106 as usize (Transmute);
        _108 = AlignOf(std::boxed::Box<[i32; 2]>);
        _109 = Sub(_108, const 1_usize);
        _110 = BitAnd(_107, _109);
        _111 = Eq(_110, const 0_usize);
        assert(_111, "misaligned pointer dereference: address must be a multiple of {} but is {}", _108, _107) -> [success: bb59, unwind unreachable];
    }

    bb23: {
        drop(_32) -> [return: bb24, unwind continue];
    }

    bb24: {
        _39 = _2;
        _38 = Box::<[u8; 33]>::new(move _39) -> [return: bb25, unwind continue];
    }

    bb25: {
        _37 = Box::<Box<[u8; 33]>>::new(move _38) -> [return: bb26, unwind continue];
    }

    bb26: {
        _84 = (((_37.0: std::ptr::Unique<std::boxed::Box<[u8; 33]>>).0: std::ptr::NonNull<std::boxed::Box<[u8; 33]>>).0: *const std::boxed::Box<[u8; 33]>);
        _94 = _84 as *const () (PtrToPtr);
        _95 = _94 as usize (Transmute);
        _96 = AlignOf(std::boxed::Box<[u8; 33]>);
        _97 = Sub(_96, const 1_usize);
        _98 = BitAnd(_95, _97);
        _99 = Eq(_98, const 0_usize);
        assert(_99, "misaligned pointer dereference: address must be a multiple of {} but is {}", _96, _95) -> [success: bb57, unwind unreachable];
    }

    bb27: {
        drop(_37) -> [return: bb28, unwind continue];
    }

    bb28: {
        _44 = [const 0_u8; 33];
        _43 = Box::<[u8; 33]>::new(move _44) -> [return: bb29, unwind continue];
    }

    bb29: {
        _42 = Box::<Box<[u8; 33]>>::new(move _43) -> [return: bb30, unwind continue];
    }

    bb30: {
        _86 = (((_42.0: std::ptr::Unique<std::boxed::Box<[u8; 33]>>).0: std::ptr::NonNull<std::boxed::Box<[u8; 33]>>).0: *const std::boxed::Box<[u8; 33]>);
        _88 = _86 as *const () (PtrToPtr);
        _89 = _88 as usize (Transmute);
        _90 = AlignOf(std::boxed::Box<[u8; 33]>);
        _91 = Sub(_90, const 1_usize);
        _92 = BitAnd(_89, _91);
        _93 = Eq(_92, const 0_usize);
        assert(_93, "misaligned pointer dereference: address must be a multiple of {} but is {}", _90, _89) -> [success: bb56, unwind unreachable];
    }

    bb31: {
        drop(_42) -> [return: bb32, unwind continue];
    }

    bb32: {
        _69 = const _;
        _45 = <&[i32; 2] as IntoIterator>::into_iter(_69) -> [return: bb33, unwind continue];
    }

    bb33: {
        _47 = &_1;
        _46 = <&[i32; 2] as IntoIterator>::into_iter(_47) -> [return: bb34, unwind continue];
    }

    bb34: {
        _68 = const _;
        _48 = <&[u8; 33] as IntoIterator>::into_iter(_68) -> [return: bb35, unwind continue];
    }

    bb35: {
        _50 = &_2;
        _49 = <&[u8; 33] as IntoIterator>::into_iter(_50) -> [return: bb36, unwind continue];
    }

    bb36: {
        _67 = const _;
        _51 = <&[i32; 2] as IntoIterator>::into_iter(_67) -> [return: bb37, unwind continue];
    }

    bb37: {
        _52 = move _51;
        goto -> bb38;
    }

    bb38: {
        _54 = &mut _52;
        _53 = <std::slice::Iter<'_, i32> as Iterator>::next(_54) -> [return: bb39, unwind continue];
    }

    bb39: {
        _55 = discriminant(_53);
        switchInt(move _55) -> [0: bb41, 1: bb38, otherwise: bb40];
    }

    bb40: {
        unreachable;
    }

    bb41: {
        _58 = &_1;
        _57 = _58 as &[i32] (Pointer(Unsize));
        _56 = <&[i32] as IntoIterator>::into_iter(_57) -> [return: bb42, unwind continue];
    }

    bb42: {
        _62 = &_1;
        _61 = <[i32; 2] as Index<RangeFull>>::index(move _62, const RangeFull) -> [return: bb43, unwind continue];
    }

    bb43: {
        _60 = _61;
        _59 = <&[i32] as IntoIterator>::into_iter(move _60) -> [return: bb44, unwind continue];
    }

    bb44: {
        _66 = const _;
        _63 = <&[i32; 2] as IntoIterator>::into_iter(_66) -> [return: bb45, unwind continue];
    }

    bb45: {
        _65 = const _;
        _64 = <&[i32; 2] as IntoIterator>::into_iter(_65) -> [return: bb46, unwind continue];
    }

    bb46: {
        return;
    }

    bb47 (cleanup): {
        drop(_42) -> [return: bb55, unwind terminate];
    }

    bb48 (cleanup): {
        drop(_37) -> [return: bb55, unwind terminate];
    }

    bb49 (cleanup): {
        drop(_32) -> [return: bb55, unwind terminate];
    }

    bb50 (cleanup): {
        drop(_27) -> [return: bb55, unwind terminate];
    }

    bb51 (cleanup): {
        drop(_23) -> [return: bb55, unwind terminate];
    }

    bb52 (cleanup): {
        drop(_19) -> [return: bb55, unwind terminate];
    }

    bb53 (cleanup): {
        drop(_15) -> [return: bb55, unwind terminate];
    }

    bb54 (cleanup): {
        drop(_11) -> [return: bb55, unwind terminate];
    }

    bb55 (cleanup): {
        resume;
    }

    bb56: {
        _75 = deref_copy (*_86);
        _87 = (((_75.0: std::ptr::Unique<[u8; 33]>).0: std::ptr::NonNull<[u8; 33]>).0: *const [u8; 33]);
        _41 = &(*_87);
        _40 = <&[u8; 33] as IntoIterator>::into_iter(move _41) -> [return: bb31, unwind: bb47];
    }

    bb57: {
        _74 = deref_copy (*_84);
        _85 = (((_74.0: std::ptr::Unique<[u8; 33]>).0: std::ptr::NonNull<[u8; 33]>).0: *const [u8; 33]);
        _36 = &(*_85);
        _35 = <&[u8; 33] as IntoIterator>::into_iter(move _36) -> [return: bb27, unwind: bb48];
    }

    bb58: {
        _31 = &(*_83);
        _30 = <&[i32; 2] as IntoIterator>::into_iter(move _31) -> [return: bb23, unwind: bb49];
    }

    bb59: {
        _73 = deref_copy (*_82);
        _83 = (((_73.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2]);
        _100 = _83 as *const () (PtrToPtr);
        _101 = _100 as usize (Transmute);
        _102 = AlignOf(i32);
        _103 = Sub(_102, const 1_usize);
        _104 = BitAnd(_101, _103);
        _105 = Eq(_104, const 0_usize);
        assert(_105, "misaligned pointer dereference: address must be a multiple of {} but is {}", _102, _101) -> [success: bb58, unwind unreachable];
    }

    bb60: {
        _26 = &(*_81);
        _25 = <&[i32; 2] as IntoIterator>::into_iter(move _26) -> [return: bb19, unwind: bb50];
    }

    bb61: {
        _72 = deref_copy (*_80);
        _81 = (((_72.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2]);
        _112 = _81 as *const () (PtrToPtr);
        _113 = _112 as usize (Transmute);
        _114 = AlignOf(i32);
        _115 = Sub(_114, const 1_usize);
        _116 = BitAnd(_113, _115);
        _117 = Eq(_116, const 0_usize);
        assert(_117, "misaligned pointer dereference: address must be a multiple of {} but is {}", _114, _113) -> [success: bb60, unwind unreachable];
    }

    bb62: {
        _14 = &(*_77);
        _13 = <&[i32; 2] as IntoIterator>::into_iter(move _14) -> [return: bb9, unwind: bb53];
    }

    bb63: {
        _10 = &(*_76);
        _9 = <&[i32; 2] as IntoIterator>::into_iter(move _10) -> [return: bb6, unwind: bb54];
    }
}

promoted[0] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 0_i32, const 1_i32];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 1_i32, const 2_i32];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 1_i32, const 2_i32];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[u8; 33] = {
    let mut _0: &[u8; 33];
    let mut _1: [u8; 33];

    bb0: {
        _1 = [const 0_u8; 33];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 1_i32, const 2_i32];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[u8; 33] = {
    let mut _0: &[u8; 33];
    let mut _1: [u8; 33];

    bb0: {
        _1 = [const 0_u8; 33];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 1_i32, const 2_i32];
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}

main::{constant#4}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 33_usize;
        return;
    }
}
