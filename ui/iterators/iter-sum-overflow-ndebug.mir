// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let mut _4: std::slice::Iter<'_, i32>;
    let mut _5: &[i32];
    let mut _6: &i32;
    let _7: i32;
    let _8: &i32;
    let _9: &i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&i32, &i32);
    let mut _18: &i32;
    let _19: i32;
    let mut _20: std::slice::Iter<'_, i32>;
    let mut _21: &[i32];
    let mut _22: &i32;
    let _23: i32;
    let _24: &i32;
    let _25: &i32;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: i32;
    let mut _29: i32;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (&i32, &i32);
    let mut _34: &i32;
    let _35: i32;
    let mut _36: std::iter::Cloned<std::slice::Iter<'_, i32>>;
    let mut _37: std::slice::Iter<'_, i32>;
    let mut _38: &[i32];
    let mut _39: &i32;
    let _40: i32;
    let _41: &i32;
    let _42: &i32;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: i32;
    let mut _46: i32;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: (&i32, &i32);
    let mut _51: &i32;
    let _52: i32;
    let mut _53: std::iter::Cloned<std::slice::Iter<'_, i32>>;
    let mut _54: std::slice::Iter<'_, i32>;
    let mut _55: &[i32];
    let mut _56: &i32;
    let _57: i32;
    let _58: &i32;
    let _59: &i32;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: i32;
    let mut _63: i32;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: &[i32; 2];
    let mut _68: &[i32; 2];
    let mut _69: &[i32; 2];
    let mut _70: &[i32; 2];
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }
    scope 3 {
        debug left_val => _24;
        debug right_val => _25;
        let _30: core::panicking::AssertKind;
        scope 4 {
            debug kind => _30;
        }
    }
    scope 5 {
        debug left_val => _41;
        debug right_val => _42;
        let _47: core::panicking::AssertKind;
        scope 6 {
            debug kind => _47;
        }
    }
    scope 7 {
        debug left_val => _58;
        debug right_val => _59;
        let _64: core::panicking::AssertKind;
        scope 8 {
            debug kind => _64;
        }
    }

    bb0: {
        _70 = const _;
        _5 = _70 as &[i32] (Pointer(Unsize));
        _4 = core::slice::<impl [i32]>::iter(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <std::slice::Iter<'_, i32> as Iterator>::sum::<i32>(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = &_3;
        _7 = core::num::<impl i32>::wrapping_add(const 1_i32, const _) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = &_7;
        _1 = (move _2, move _6);
        _8 = (_1.0: &i32);
        _9 = (_1.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb5: {
        _69 = const _;
        _21 = _69 as &[i32] (Pointer(Unsize));
        _20 = core::slice::<impl [i32]>::iter(move _21) -> [return: bb6, unwind continue];
    }

    bb6: {
        _19 = <std::slice::Iter<'_, i32> as Iterator>::product::<i32>(move _20) -> [return: bb7, unwind continue];
    }

    bb7: {
        _18 = &_19;
        _23 = core::num::<impl i32>::wrapping_mul(const 2_i32, const _) -> [return: bb8, unwind continue];
    }

    bb8: {
        _22 = &_23;
        _17 = (move _18, move _22);
        _24 = (_17.0: &i32);
        _25 = (_17.1: &i32);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<i32, i32>(move _30, _24, _25, move _32) -> unwind continue;
    }

    bb10: {
        _68 = const _;
        _38 = _68 as &[i32] (Pointer(Unsize));
        _37 = core::slice::<impl [i32]>::iter(move _38) -> [return: bb11, unwind continue];
    }

    bb11: {
        _36 = <std::slice::Iter<'_, i32> as Iterator>::cloned::<'_, i32>(move _37) -> [return: bb12, unwind continue];
    }

    bb12: {
        _35 = <Cloned<std::slice::Iter<'_, i32>> as Iterator>::sum::<i32>(move _36) -> [return: bb13, unwind continue];
    }

    bb13: {
        _34 = &_35;
        _40 = core::num::<impl i32>::wrapping_add(const 1_i32, const _) -> [return: bb14, unwind continue];
    }

    bb14: {
        _39 = &_40;
        _33 = (move _34, move _39);
        _41 = (_33.0: &i32);
        _42 = (_33.1: &i32);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<i32, i32>(move _47, _41, _42, move _49) -> unwind continue;
    }

    bb16: {
        _67 = const _;
        _55 = _67 as &[i32] (Pointer(Unsize));
        _54 = core::slice::<impl [i32]>::iter(move _55) -> [return: bb17, unwind continue];
    }

    bb17: {
        _53 = <std::slice::Iter<'_, i32> as Iterator>::cloned::<'_, i32>(move _54) -> [return: bb18, unwind continue];
    }

    bb18: {
        _52 = <Cloned<std::slice::Iter<'_, i32>> as Iterator>::product::<i32>(move _53) -> [return: bb19, unwind continue];
    }

    bb19: {
        _51 = &_52;
        _57 = core::num::<impl i32>::wrapping_mul(const 2_i32, const _) -> [return: bb20, unwind continue];
    }

    bb20: {
        _56 = &_57;
        _50 = (move _51, move _56);
        _58 = (_50.0: &i32);
        _59 = (_50.1: &i32);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<i32, i32>(move _64, _58, _59, move _66) -> unwind continue;
    }

    bb22: {
        return;
    }
}

promoted[0] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 2_i32, const _];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 1_i32, const _];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 2_i32, const _];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 1_i32, const _];
        _0 = &_1;
        return;
    }
}
