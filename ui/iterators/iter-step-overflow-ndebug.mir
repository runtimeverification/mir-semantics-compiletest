// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::ops::RangeFrom<u8>;
    let mut _2: (&u8, &u8);
    let mut _3: &u8;
    let _4: u8;
    let mut _5: std::option::Option<u8>;
    let mut _6: &mut std::ops::RangeFrom<u8>;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: u8;
    let mut _12: u8;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&u8, &u8);
    let mut _17: &u8;
    let _18: u8;
    let mut _19: std::option::Option<u8>;
    let mut _20: &mut std::ops::RangeFrom<u8>;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: u8;
    let mut _26: u8;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&i8, &i8);
    let mut _32: &i8;
    let _33: i8;
    let mut _34: std::option::Option<i8>;
    let mut _35: &mut std::ops::RangeFrom<i8>;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: i8;
    let mut _41: i8;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&i8, &i8);
    let mut _46: &i8;
    let _47: i8;
    let mut _48: std::option::Option<i8>;
    let mut _49: &mut std::ops::RangeFrom<i8>;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: i8;
    let mut _55: i8;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug it => _1;
        let _7: &u8;
        let _8: &u8;
        let _21: &u8;
        let _22: &u8;
        let mut _30: std::ops::RangeFrom<i8>;
        let mut _61: &u8;
        let mut _62: &u8;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
        scope 4 {
            debug left_val => _21;
            debug right_val => _22;
            let _27: core::panicking::AssertKind;
            scope 5 {
                debug kind => _27;
            }
        }
        scope 6 {
            debug it => _30;
            let _36: &i8;
            let _37: &i8;
            let _50: &i8;
            let _51: &i8;
            let mut _59: &i8;
            let mut _60: &i8;
            scope 7 {
                debug left_val => _36;
                debug right_val => _37;
                let _42: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _42;
                }
            }
            scope 9 {
                debug left_val => _50;
                debug right_val => _51;
                let _56: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _56;
                }
            }
        }
    }

    bb0: {
        _1 = RangeFrom::<u8> { start: const _ };
        _6 = &mut _1;
        _5 = <RangeFrom<u8> as Iterator>::next(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Option::<u8>::unwrap(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = &_4;
        _62 = const _;
        _2 = (move _3, _62);
        _7 = (_2.0: &u8);
        _8 = (_2.1: &u8);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<u8, u8>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb4: {
        _20 = &mut _1;
        _19 = <RangeFrom<u8> as Iterator>::next(move _20) -> [return: bb5, unwind continue];
    }

    bb5: {
        _18 = Option::<u8>::unwrap(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        _17 = &_18;
        _61 = const _;
        _16 = (move _17, _61);
        _21 = (_16.0: &u8);
        _22 = (_16.1: &u8);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<u8, u8>(move _27, _21, _22, move _29) -> unwind continue;
    }

    bb8: {
        _30 = RangeFrom::<i8> { start: const _ };
        _35 = &mut _30;
        _34 = <RangeFrom<i8> as Iterator>::next(move _35) -> [return: bb9, unwind continue];
    }

    bb9: {
        _33 = Option::<i8>::unwrap(move _34) -> [return: bb10, unwind continue];
    }

    bb10: {
        _32 = &_33;
        _60 = const _;
        _31 = (move _32, _60);
        _36 = (_31.0: &i8);
        _37 = (_31.1: &i8);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<i8, i8>(move _42, _36, _37, move _44) -> unwind continue;
    }

    bb12: {
        _49 = &mut _30;
        _48 = <RangeFrom<i8> as Iterator>::next(move _49) -> [return: bb13, unwind continue];
    }

    bb13: {
        _47 = Option::<i8>::unwrap(move _48) -> [return: bb14, unwind continue];
    }

    bb14: {
        _46 = &_47;
        _59 = const _;
        _45 = (move _46, _59);
        _50 = (_45.0: &i8);
        _51 = (_45.1: &i8);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<i8, i8>(move _56, _50, _51, move _58) -> unwind continue;
    }

    bb16: {
        return;
    }
}

promoted[0] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const i8::MAX;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const u8::MAX;
        _0 = &_1;
        return;
    }
}
