// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::iter::Skip<std::iter::Chain<std::ops::Range<usize>, std::ops::Range<usize>>>;
    let mut _2: std::iter::Chain<std::ops::Range<usize>, std::ops::Range<usize>>;
    let mut _3: std::ops::Range<usize>;
    let mut _4: std::ops::Range<usize>;
    let mut _5: (&usize, &usize);
    let mut _6: &usize;
    let _7: usize;
    let mut _8: std::iter::Skip<std::iter::Chain<std::ops::Range<usize>, std::ops::Range<usize>>>;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug i => _1;
        let _9: &usize;
        let _10: &usize;
        let mut _18: &usize;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
    }

    bb0: {
        _3 = std::ops::Range::<usize> { start: const 0_usize, end: const _ };
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: const 10_usize };
        _2 = <std::ops::Range<usize> as Iterator>::chain::<std::ops::Range<usize>>(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = <std::iter::Chain<std::ops::Range<usize>, std::ops::Range<usize>> as Iterator>::skip(move _2, const _) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = move _1;
        _7 = <Skip<std::iter::Chain<std::ops::Range<usize>, std::ops::Range<usize>>> as Iterator>::count(move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = &_7;
        _18 = const _;
        _5 = (move _6, _18);
        _9 = (_5.0: &usize);
        _10 = (_5.1: &usize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<usize, usize>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb5: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 10_usize;
        _0 = &_1;
        return;
    }
}
