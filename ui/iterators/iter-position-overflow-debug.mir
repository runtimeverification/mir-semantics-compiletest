// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/iterators/iter-position-overflow-debug.rs:8:11: 8:11
    let _1: u64;                         // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:9:9: 9:10
    let mut _2: (&std::option::Option<usize>, &std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: std::option::Option<usize>;  // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:10:16: 10:51
    let mut _5: &mut std::ops::RangeFrom<u64>; // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:10:16: 10:51
    let mut _6: &mut std::ops::RangeFrom<u64>; // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:10:16: 10:30
    let mut _7: &mut std::ops::RangeFrom<u64>; // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:10:16: 10:30
    let mut _8: std::ops::RangeFrom<u64>; // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:10:16: 10:21
    let mut _9: [closure@ui/iterators/iter-position-overflow-debug.rs:10:40: 10:43]; // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:10:40: 10:50
    let mut _10: &u64;                   // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:10:40: 10:50
    let mut _11: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _27: [closure@ui/iterators/iter-position-overflow-debug.rs:12:33: 12:35]; // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:12:33: 14:6
    let mut _28: &u64;                   // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:12:33: 14:6
    let mut _29: bool;                   // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:15:5: 15:24
    let mut _30: bool;                   // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:15:13: 15:23
    let mut _31: &std::result::Result<std::option::Option<usize>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:15:13: 15:23
    let mut _32: !;                      // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:15:5: 15:24
    let mut _34: [closure@ui/iterators/iter-position-overflow-debug.rs:17:33: 17:35]; // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:17:33: 19:6
    let mut _35: &u64;                   // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:17:33: 19:6
    let mut _36: bool;                   // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:20:5: 20:24
    let mut _37: bool;                   // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:20:13: 20:23
    let mut _38: &std::result::Result<std::option::Option<usize>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:20:13: 20:23
    let mut _39: !;                      // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:20:5: 20:24
    scope 1 {
        debug n => _1;                   // in scope 1 at ui/iterators/iter-position-overflow-debug.rs:9:9: 9:10
        let _12: &std::option::Option<usize>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _13: &std::option::Option<usize>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _26: std::result::Result<std::option::Option<usize>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 1 at ui/iterators/iter-position-overflow-debug.rs:12:9: 12:10
        let mut _40: &std::option::Option<usize>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _12;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _13;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _18: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _18;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug r => _26;              // in scope 4 at ui/iterators/iter-position-overflow-debug.rs:12:9: 12:10
            let _33: std::result::Result<std::option::Option<usize>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 4 at ui/iterators/iter-position-overflow-debug.rs:17:9: 17:10
            scope 5 {
                debug r => _33;          // in scope 5 at ui/iterators/iter-position-overflow-debug.rs:17:9: 17:10
            }
        }
    }

    bb0: {
        _1 = const _ as u64 (IntToInt);  // scope 0 at ui/iterators/iter-position-overflow-debug.rs:9:13: 9:30
        _8 = RangeFrom::<u64> { start: const 0_u64 }; // scope 1 at ui/iterators/iter-position-overflow-debug.rs:10:16: 10:21
        _7 = &mut _8;                    // scope 1 at ui/iterators/iter-position-overflow-debug.rs:10:16: 10:30
        _6 = <RangeFrom<u64> as Iterator>::by_ref(move _7) -> bb1; // scope 1 at ui/iterators/iter-position-overflow-debug.rs:10:16: 10:30
                                         // mir::Constant
                                         // + span: ui/iterators/iter-position-overflow-debug.rs:10:22: 10:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeFrom<u64>) -> &'a mut RangeFrom<u64> {<RangeFrom<u64> as Iterator>::by_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut (*_6);                 // scope 1 at ui/iterators/iter-position-overflow-debug.rs:10:16: 10:51
        _10 = &_1;                       // scope 1 at ui/iterators/iter-position-overflow-debug.rs:10:40: 10:50
        _9 = [closure@ui/iterators/iter-position-overflow-debug.rs:10:40: 10:43] { n: move _10 }; // scope 1 at ui/iterators/iter-position-overflow-debug.rs:10:40: 10:50
                                         // closure
                                         // + def_id: DefId(0:9 ~ iter_position_overflow_debug[cefd]::main::{closure#2})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((u64,)) -> bool,
                                         //     (&u64,),
                                         // ]
        _4 = <RangeFrom<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-debug.rs:10:40: 10:43]>(move _5, move _9) -> bb2; // scope 1 at ui/iterators/iter-position-overflow-debug.rs:10:16: 10:51
                                         // mir::Constant
                                         // + span: ui/iterators/iter-position-overflow-debug.rs:10:31: 10:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeFrom<u64>, [closure@ui/iterators/iter-position-overflow-debug.rs:10:40: 10:43]) -> Option<usize> {<RangeFrom<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-debug.rs:10:40: 10:43]>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &_4;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _40 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<usize>, val: Unevaluated(main, [], Some(promoted[0])) }
        _11 = _40;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _11);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_2.0: &std::option::Option<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_2.1: &std::option::Option<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = _12;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = _13;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = <Option<usize> as PartialEq>::eq(move _16, move _17) -> bb3; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<usize>, &'b Option<usize>) -> bool {<Option<usize> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = Not(move _15);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb5, otherwise: bb4]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _18 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<Option<usize>, Option<usize>>(move _20, move _21, move _23, move _25); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<usize>, &'b Option<usize>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<usize>, Option<usize>>}, val: Value(<ZST>) }
    }

    bb5: {
        _28 = &_1;                       // scope 1 at ui/iterators/iter-position-overflow-debug.rs:12:33: 14:6
        _27 = [closure@ui/iterators/iter-position-overflow-debug.rs:12:33: 12:35] { n: move _28 }; // scope 1 at ui/iterators/iter-position-overflow-debug.rs:12:33: 14:6
                                         // closure
                                         // + def_id: DefId(0:5 ~ iter_position_overflow_debug[cefd]::main::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()) -> std::option::Option<usize>,
                                         //     (&u64,),
                                         // ]
        _26 = catch_unwind::<[closure@ui/iterators/iter-position-overflow-debug.rs:12:33: 12:35], Option<usize>>(move _27) -> bb6; // scope 1 at ui/iterators/iter-position-overflow-debug.rs:12:13: 14:7
                                         // mir::Constant
                                         // + span: ui/iterators/iter-position-overflow-debug.rs:12:13: 12:32
                                         // + literal: Const { ty: fn([closure@ui/iterators/iter-position-overflow-debug.rs:12:33: 12:35]) -> Result<Option<usize>, Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/iterators/iter-position-overflow-debug.rs:12:33: 12:35], Option<usize>>}, val: Value(<ZST>) }
    }

    bb6: {
        _31 = &_26;                      // scope 4 at ui/iterators/iter-position-overflow-debug.rs:15:13: 15:23
        _30 = Result::<Option<usize>, Box<dyn Any + Send>>::is_err(move _31) -> [return: bb7, unwind: bb17]; // scope 4 at ui/iterators/iter-position-overflow-debug.rs:15:13: 15:23
                                         // mir::Constant
                                         // + span: ui/iterators/iter-position-overflow-debug.rs:15:15: 15:21
                                         // + literal: Const { ty: for<'a> fn(&'a Result<Option<usize>, Box<dyn Any + Send>>) -> bool {Result::<Option<usize>, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb7: {
        _29 = Not(move _30);             // scope 4 at ui/iterators/iter-position-overflow-debug.rs:15:5: 15:24
        switchInt(move _29) -> [0: bb9, otherwise: bb8]; // scope 4 at ui/iterators/iter-position-overflow-debug.rs:15:5: 15:24
    }

    bb8: {
        _32 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb17; // scope 4 at ui/iterators/iter-position-overflow-debug.rs:15:5: 15:24
                                         // mir::Constant
                                         // + span: ui/iterators/iter-position-overflow-debug.rs:15:5: 15:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _35 = &_1;                       // scope 4 at ui/iterators/iter-position-overflow-debug.rs:17:33: 19:6
        _34 = [closure@ui/iterators/iter-position-overflow-debug.rs:17:33: 17:35] { n: move _35 }; // scope 4 at ui/iterators/iter-position-overflow-debug.rs:17:33: 19:6
                                         // closure
                                         // + def_id: DefId(0:7 ~ iter_position_overflow_debug[cefd]::main::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()) -> std::option::Option<usize>,
                                         //     (&u64,),
                                         // ]
        _33 = catch_unwind::<[closure@ui/iterators/iter-position-overflow-debug.rs:17:33: 17:35], Option<usize>>(move _34) -> [return: bb10, unwind: bb17]; // scope 4 at ui/iterators/iter-position-overflow-debug.rs:17:13: 19:7
                                         // mir::Constant
                                         // + span: ui/iterators/iter-position-overflow-debug.rs:17:13: 17:32
                                         // + literal: Const { ty: fn([closure@ui/iterators/iter-position-overflow-debug.rs:17:33: 17:35]) -> Result<Option<usize>, Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/iterators/iter-position-overflow-debug.rs:17:33: 17:35], Option<usize>>}, val: Value(<ZST>) }
    }

    bb10: {
        _38 = &_33;                      // scope 5 at ui/iterators/iter-position-overflow-debug.rs:20:13: 20:23
        _37 = Result::<Option<usize>, Box<dyn Any + Send>>::is_err(move _38) -> [return: bb11, unwind: bb16]; // scope 5 at ui/iterators/iter-position-overflow-debug.rs:20:13: 20:23
                                         // mir::Constant
                                         // + span: ui/iterators/iter-position-overflow-debug.rs:20:15: 20:21
                                         // + literal: Const { ty: for<'a> fn(&'a Result<Option<usize>, Box<dyn Any + Send>>) -> bool {Result::<Option<usize>, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb11: {
        _36 = Not(move _37);             // scope 5 at ui/iterators/iter-position-overflow-debug.rs:20:5: 20:24
        switchInt(move _36) -> [0: bb13, otherwise: bb12]; // scope 5 at ui/iterators/iter-position-overflow-debug.rs:20:5: 20:24
    }

    bb12: {
        _39 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb16; // scope 5 at ui/iterators/iter-position-overflow-debug.rs:20:5: 20:24
                                         // mir::Constant
                                         // + span: ui/iterators/iter-position-overflow-debug.rs:20:5: 20:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        drop(_33) -> [return: bb14, unwind: bb17]; // scope 4 at ui/iterators/iter-position-overflow-debug.rs:21:1: 21:2
    }

    bb14: {
        drop(_26) -> bb15;               // scope 1 at ui/iterators/iter-position-overflow-debug.rs:21:1: 21:2
    }

    bb15: {
        return;                          // scope 0 at ui/iterators/iter-position-overflow-debug.rs:21:2: 21:2
    }

    bb16 (cleanup): {
        drop(_33) -> bb17;               // scope 4 at ui/iterators/iter-position-overflow-debug.rs:21:1: 21:2
    }

    bb17 (cleanup): {
        drop(_26) -> bb18;               // scope 1 at ui/iterators/iter-position-overflow-debug.rs:21:1: 21:2
    }

    bb18 (cleanup): {
        resume;                          // scope 0 at ui/iterators/iter-position-overflow-debug.rs:8:1: 21:2
    }
}

promoted[0] in main: &Option<usize> = {
    let mut _0: &std::option::Option<usize>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<usize>; // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:10:53: 10:69

    bb0: {
        _1 = Option::<usize>::Some(const _); // scope 0 at ui/iterators/iter-position-overflow-debug.rs:10:53: 10:69
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#2}(_1: &mut [closure@ui/iterators/iter-position-overflow-debug.rs:10:40: 10:43], _2: u64) -> bool {
    debug i => _2;                       // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:10:41: 10:42
    debug n => (*((*_1).0: &u64));       // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:9:9: 9:10
    let mut _0: bool;                    // return place in scope 0 at ui/iterators/iter-position-overflow-debug.rs:10:44: 10:44
    let mut _3: u64;                     // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:10:44: 10:45
    let mut _4: u64;                     // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:10:49: 10:50
    let mut _5: &u64;                    // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:10:40: 10:50

    bb0: {
        _3 = _2;                         // scope 0 at ui/iterators/iter-position-overflow-debug.rs:10:44: 10:45
        _5 = deref_copy ((*_1).0: &u64); // scope 0 at ui/iterators/iter-position-overflow-debug.rs:10:49: 10:50
        _4 = (*_5);                      // scope 0 at ui/iterators/iter-position-overflow-debug.rs:10:49: 10:50
        _0 = Ge(move _3, move _4);       // scope 0 at ui/iterators/iter-position-overflow-debug.rs:10:44: 10:50
        return;                          // scope 0 at ui/iterators/iter-position-overflow-debug.rs:10:50: 10:50
    }
}

fn main::{closure#0}(_1: [closure@ui/iterators/iter-position-overflow-debug.rs:12:33: 12:35]) -> Option<usize> {
    debug n => (*(_1.0: &u64));          // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:9:9: 9:10
    let mut _0: std::option::Option<usize>; // return place in scope 0 at ui/iterators/iter-position-overflow-debug.rs:12:36: 12:36
    let mut _2: &mut std::ops::RangeFrom<u64>; // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:9: 13:43
    let mut _3: &mut std::ops::RangeFrom<u64>; // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:9: 13:23
    let mut _4: &mut std::ops::RangeFrom<u64>; // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:9: 13:23
    let mut _5: std::ops::RangeFrom<u64>; // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:9: 13:14
    let mut _6: [closure@ui/iterators/iter-position-overflow-debug.rs:13:33: 13:36]; // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:33: 13:42
    let mut _7: &u64;                    // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:33: 13:42
    let mut _8: &u64;                    // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:12:33: 14:6

    bb0: {
        _5 = RangeFrom::<u64> { start: const 0_u64 }; // scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:9: 13:14
        _4 = &mut _5;                    // scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:9: 13:23
        _3 = <RangeFrom<u64> as Iterator>::by_ref(move _4) -> bb1; // scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:9: 13:23
                                         // mir::Constant
                                         // + span: ui/iterators/iter-position-overflow-debug.rs:13:15: 13:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeFrom<u64>) -> &'a mut RangeFrom<u64> {<RangeFrom<u64> as Iterator>::by_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &mut (*_3);                 // scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:9: 13:43
        _8 = deref_copy (_1.0: &u64);    // scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:33: 13:42
        _7 = _8;                         // scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:33: 13:42
        _6 = [closure@ui/iterators/iter-position-overflow-debug.rs:13:33: 13:36] { n: move _7 }; // scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:33: 13:42
                                         // closure
                                         // + def_id: DefId(0:6 ~ iter_position_overflow_debug[cefd]::main::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((u64,)) -> bool,
                                         //     (&u64,),
                                         // ]
        _0 = <RangeFrom<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-debug.rs:13:33: 13:36]>(move _2, move _6) -> bb2; // scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:9: 13:43
                                         // mir::Constant
                                         // + span: ui/iterators/iter-position-overflow-debug.rs:13:24: 13:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeFrom<u64>, [closure@ui/iterators/iter-position-overflow-debug.rs:13:33: 13:36]) -> Option<usize> {<RangeFrom<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-debug.rs:13:33: 13:36]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/iterators/iter-position-overflow-debug.rs:14:6: 14:6
    }
}

fn main::{closure#0}::{closure#0}(_1: &mut [closure@ui/iterators/iter-position-overflow-debug.rs:13:33: 13:36], _2: u64) -> bool {
    debug i => _2;                       // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:34: 13:35
    debug n => (*((*_1).0: &u64));       // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:9:9: 9:10
    let mut _0: bool;                    // return place in scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:37: 13:37
    let mut _3: u64;                     // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:37: 13:38
    let mut _4: u64;                     // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:41: 13:42
    let mut _5: &u64;                    // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:33: 13:42

    bb0: {
        _3 = _2;                         // scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:37: 13:38
        _5 = deref_copy ((*_1).0: &u64); // scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:41: 13:42
        _4 = (*_5);                      // scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:41: 13:42
        _0 = Gt(move _3, move _4);       // scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:37: 13:42
        return;                          // scope 0 at ui/iterators/iter-position-overflow-debug.rs:13:42: 13:42
    }
}

fn main::{closure#1}(_1: [closure@ui/iterators/iter-position-overflow-debug.rs:17:33: 17:35]) -> Option<usize> {
    debug n => (*(_1.0: &u64));          // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:9:9: 9:10
    let mut _0: std::option::Option<usize>; // return place in scope 0 at ui/iterators/iter-position-overflow-debug.rs:17:36: 17:36
    let mut _2: &mut std::ops::RangeInclusive<u64>; // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:9: 18:49
    let mut _3: &mut std::ops::RangeInclusive<u64>; // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:9: 18:29
    let mut _4: &mut std::ops::RangeInclusive<u64>; // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:9: 18:29
    let mut _5: std::ops::RangeInclusive<u64>; // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:9: 18:20
    let mut _6: u64;                     // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:14: 18:19
    let mut _7: u64;                     // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:14: 18:15
    let mut _8: (u64, bool);             // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:14: 18:19
    let mut _9: [closure@ui/iterators/iter-position-overflow-debug.rs:18:39: 18:42]; // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:39: 18:48
    let mut _10: &u64;                   // in scope 0 at ui/iterators/iter-position-overflow-debug.rs:17:33: 19:6

    bb0: {
        _10 = deref_copy (_1.0: &u64);   // scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:14: 18:15
        _7 = (*_10);                     // scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:14: 18:15
        _8 = CheckedAdd(_7, const 1_u64); // scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:14: 18:19
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_u64) -> bb1; // scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:14: 18:19
    }

    bb1: {
        _6 = move (_8.0: u64);           // scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:14: 18:19
        _5 = RangeInclusive::<u64>::new(const 0_u64, move _6) -> bb2; // scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:9: 18:20
                                         // mir::Constant
                                         // + span: ui/iterators/iter-position-overflow-debug.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(u64, u64) -> RangeInclusive<u64> {RangeInclusive::<u64>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &mut _5;                    // scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:9: 18:29
        _3 = <RangeInclusive<u64> as Iterator>::by_ref(move _4) -> bb3; // scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:9: 18:29
                                         // mir::Constant
                                         // + span: ui/iterators/iter-position-overflow-debug.rs:18:21: 18:27
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u64>) -> &'a mut RangeInclusive<u64> {<RangeInclusive<u64> as Iterator>::by_ref}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = &mut (*_3);                 // scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:9: 18:49
        _0 = <RangeInclusive<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-debug.rs:18:39: 18:42]>(move _2, move _9) -> bb4; // scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:9: 18:49
                                         // mir::Constant
                                         // + span: ui/iterators/iter-position-overflow-debug.rs:18:30: 18:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u64>, [closure@ui/iterators/iter-position-overflow-debug.rs:18:39: 18:42]) -> Option<usize> {<RangeInclusive<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-debug.rs:18:39: 18:42]>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/iterators/iter-position-overflow-debug.rs:19:6: 19:6
    }
}

fn main::{closure#1}::{closure#0}(_1: &mut [closure@ui/iterators/iter-position-overflow-debug.rs:18:39: 18:42], _2: u64) -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:43: 18:43

    bb0: {
        _0 = const false;                // scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:43: 18:48
        return;                          // scope 0 at ui/iterators/iter-position-overflow-debug.rs:18:48: 18:48
    }
}
