// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: u64;
    let mut _2: (&std::option::Option<usize>, &std::option::Option<usize>);
    let mut _3: &std::option::Option<usize>;
    let _4: std::option::Option<usize>;
    let mut _5: &mut std::ops::RangeFrom<u64>;
    let mut _6: &mut std::ops::RangeFrom<u64>;
    let mut _7: &mut std::ops::RangeFrom<u64>;
    let mut _8: std::ops::RangeFrom<u64>;
    let mut _9: [closure@ui/iterators/iter-position-overflow-debug.rs:10:40: 10:43];
    let mut _10: &u64;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: [closure@ui/iterators/iter-position-overflow-debug.rs:12:33: 12:35];
    let mut _20: &u64;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: &std::result::Result<std::option::Option<usize>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _24: !;
    let mut _26: [closure@ui/iterators/iter-position-overflow-debug.rs:17:33: 17:35];
    let mut _27: &u64;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: &std::result::Result<std::option::Option<usize>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _31: !;
    scope 1 {
        debug n => _1;
        let _11: &std::option::Option<usize>;
        let _12: &std::option::Option<usize>;
        let _18: std::result::Result<std::option::Option<usize>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        let mut _32: &std::option::Option<usize>;
        scope 2 {
            debug left_val => _11;
            debug right_val => _12;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
        scope 4 {
            debug r => _18;
            let _25: std::result::Result<std::option::Option<usize>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
            scope 5 {
                debug r => _25;
            }
        }
    }

    bb0: {
        _1 = const _ as u64 (IntToInt);
        _8 = RangeFrom::<u64> { start: const 0_u64 };
        _7 = &mut _8;
        _6 = <RangeFrom<u64> as Iterator>::by_ref(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = _6;
        _10 = &_1;
        _9 = [closure@ui/iterators/iter-position-overflow-debug.rs:10:40: 10:43] { n: move _10 };
        _4 = <RangeFrom<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-debug.rs:10:40: 10:43]>(move _5, move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = &_4;
        _32 = const _;
        _2 = (move _3, _32);
        _11 = (_2.0: &std::option::Option<usize>);
        _12 = (_2.1: &std::option::Option<usize>);
        _14 = <Option<usize> as PartialEq>::eq(_11, _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<Option<usize>, Option<usize>>(move _15, _11, _12, move _17) -> unwind continue;
    }

    bb5: {
        _20 = &_1;
        _19 = [closure@ui/iterators/iter-position-overflow-debug.rs:12:33: 12:35] { n: move _20 };
        _18 = catch_unwind::<[closure@ui/iterators/iter-position-overflow-debug.rs:12:33: 12:35], Option<usize>>(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        _23 = &_18;
        _22 = Result::<Option<usize>, Box<dyn Any + Send>>::is_err(move _23) -> [return: bb7, unwind: bb17];
    }

    bb7: {
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _24 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb17;
    }

    bb9: {
        _27 = &_1;
        _26 = [closure@ui/iterators/iter-position-overflow-debug.rs:17:33: 17:35] { n: move _27 };
        _25 = catch_unwind::<[closure@ui/iterators/iter-position-overflow-debug.rs:17:33: 17:35], Option<usize>>(move _26) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        _30 = &_25;
        _29 = Result::<Option<usize>, Box<dyn Any + Send>>::is_err(move _30) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _31 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb16;
    }

    bb13: {
        drop(_25) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        drop(_18) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_25) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        drop(_18) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        resume;
    }
}

promoted[0] in main: &Option<usize> = {
    let mut _0: &std::option::Option<usize>;
    let mut _1: std::option::Option<usize>;

    bb0: {
        _1 = Option::<usize>::Some(const _);
        _0 = &_1;
        return;
    }
}

fn main::{closure#2}(_1: &mut [closure@ui/iterators/iter-position-overflow-debug.rs:10:40: 10:43], _2: u64) -> bool {
    debug i => _2;
    debug n => (*((*_1).0: &u64));
    let mut _0: bool;
    let mut _3: u64;
    let mut _4: &u64;

    bb0: {
        _4 = deref_copy ((*_1).0: &u64);
        _3 = (*_4);
        _0 = Ge(_2, move _3);
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/iterators/iter-position-overflow-debug.rs:12:33: 12:35]) -> Option<usize> {
    debug n => (*(_1.0: &u64));
    let mut _0: std::option::Option<usize>;
    let mut _2: &mut std::ops::RangeFrom<u64>;
    let mut _3: &mut std::ops::RangeFrom<u64>;
    let mut _4: &mut std::ops::RangeFrom<u64>;
    let mut _5: std::ops::RangeFrom<u64>;
    let mut _6: [closure@ui/iterators/iter-position-overflow-debug.rs:13:33: 13:36];
    let mut _7: &u64;

    bb0: {
        _5 = RangeFrom::<u64> { start: const 0_u64 };
        _4 = &mut _5;
        _3 = <RangeFrom<u64> as Iterator>::by_ref(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = _3;
        _7 = deref_copy (_1.0: &u64);
        _6 = [closure@ui/iterators/iter-position-overflow-debug.rs:13:33: 13:36] { n: _7 };
        _0 = <RangeFrom<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-debug.rs:13:33: 13:36]>(move _2, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn main::{closure#0}::{closure#0}(_1: &mut [closure@ui/iterators/iter-position-overflow-debug.rs:13:33: 13:36], _2: u64) -> bool {
    debug i => _2;
    debug n => (*((*_1).0: &u64));
    let mut _0: bool;
    let mut _3: u64;
    let mut _4: &u64;

    bb0: {
        _4 = deref_copy ((*_1).0: &u64);
        _3 = (*_4);
        _0 = Gt(_2, move _3);
        return;
    }
}

fn main::{closure#1}(_1: [closure@ui/iterators/iter-position-overflow-debug.rs:17:33: 17:35]) -> Option<usize> {
    debug n => (*(_1.0: &u64));
    let mut _0: std::option::Option<usize>;
    let mut _2: &mut std::ops::RangeInclusive<u64>;
    let mut _3: &mut std::ops::RangeInclusive<u64>;
    let mut _4: &mut std::ops::RangeInclusive<u64>;
    let mut _5: std::ops::RangeInclusive<u64>;
    let mut _6: u64;
    let mut _7: u64;
    let mut _8: &u64;

    bb0: {
        _8 = deref_copy (_1.0: &u64);
        _7 = (*_8);
        _6 = Add(move _7, const 1_u64);
        _5 = RangeInclusive::<u64>::new(const 0_u64, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _3 = <RangeInclusive<u64> as Iterator>::by_ref(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _3;
        _0 = <RangeInclusive<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-debug.rs:18:39: 18:42]>(move _2, const ZeroSized: [closure@ui/iterators/iter-position-overflow-debug.rs:18:39: 18:42]) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn main::{closure#1}::{closure#0}(_1: &mut [closure@ui/iterators/iter-position-overflow-debug.rs:18:39: 18:42], _2: u64) -> bool {
    let mut _0: bool;

    bb0: {
        _0 = const false;
        return;
    }
}
