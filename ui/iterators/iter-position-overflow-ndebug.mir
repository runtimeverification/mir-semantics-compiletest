// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:5:11: 5:11
    let _1: u64;                         // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:6:9: 6:10
    let mut _2: (&std::option::Option<usize>, &std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: std::option::Option<usize>;  // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:7:16: 7:51
    let mut _5: &mut std::ops::RangeFrom<u64>; // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:7:16: 7:51
    let mut _6: &mut std::ops::RangeFrom<u64>; // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:7:16: 7:30
    let mut _7: &mut std::ops::RangeFrom<u64>; // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:7:16: 7:30
    let mut _8: std::ops::RangeFrom<u64>; // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:7:16: 7:21
    let mut _9: [closure@ui/iterators/iter-position-overflow-ndebug.rs:7:40: 7:43]; // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:7:40: 7:50
    let mut _10: &u64;                   // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:7:40: 7:50
    let mut _11: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _26: (&std::option::Option<usize>, &std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _27: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _28: std::option::Option<usize>; // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:8:16: 8:50
    let mut _29: &mut std::ops::RangeFrom<u64>; // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:8:16: 8:50
    let mut _30: &mut std::ops::RangeFrom<u64>; // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:8:16: 8:30
    let mut _31: &mut std::ops::RangeFrom<u64>; // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:8:16: 8:30
    let mut _32: std::ops::RangeFrom<u64>; // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:8:16: 8:21
    let mut _33: [closure@ui/iterators/iter-position-overflow-ndebug.rs:8:40: 8:43]; // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:8:40: 8:49
    let mut _34: &u64;                   // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:8:40: 8:49
    let mut _35: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _38: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _39: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _40: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _41: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _43: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _44: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _45: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _46: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _47: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _48: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _50: (&std::option::Option<usize>, &std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _51: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _52: std::option::Option<usize>; // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:9:16: 9:56
    let mut _53: &mut std::ops::RangeInclusive<u64>; // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:9:16: 9:56
    let mut _54: &mut std::ops::RangeInclusive<u64>; // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:9:16: 9:36
    let mut _55: &mut std::ops::RangeInclusive<u64>; // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:9:16: 9:36
    let mut _56: std::ops::RangeInclusive<u64>; // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:9:16: 9:27
    let mut _57: u64;                    // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:9:21: 9:26
    let mut _58: u64;                    // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:9:21: 9:22
    let mut _59: (u64, bool);            // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:9:21: 9:26
    let mut _60: [closure@ui/iterators/iter-position-overflow-ndebug.rs:9:46: 9:49]; // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:9:46: 9:55
    let mut _61: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _64: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _65: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _66: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _67: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _69: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _70: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _71: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _72: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _73: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _74: &std::option::Option<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug n => _1;                   // in scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:6:9: 6:10
        let _12: &std::option::Option<usize>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _13: &std::option::Option<usize>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _36: &std::option::Option<usize>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _37: &std::option::Option<usize>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _62: &std::option::Option<usize>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _63: &std::option::Option<usize>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _76: &std::option::Option<usize>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _77: &std::option::Option<usize>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _78: &std::option::Option<usize>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _12;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _13;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _18: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _18;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _36;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _37;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _42: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _42;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug left_val => _62;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _63;      // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _68: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 7 {
                debug kind => _68;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = const _ as u64 (IntToInt);  // scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:6:13: 6:30
        _8 = RangeFrom::<u64> { start: const 0_u64 }; // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:7:16: 7:21
        _7 = &mut _8;                    // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:7:16: 7:30
        _6 = <RangeFrom<u64> as Iterator>::by_ref(move _7) -> bb1; // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:7:16: 7:30
                                         // mir::Constant
                                         // + span: ui/iterators/iter-position-overflow-ndebug.rs:7:22: 7:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeFrom<u64>) -> &'a mut RangeFrom<u64> {<RangeFrom<u64> as Iterator>::by_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut (*_6);                 // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:7:16: 7:51
        _10 = &_1;                       // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:7:40: 7:50
        _9 = [closure@ui/iterators/iter-position-overflow-ndebug.rs:7:40: 7:43] { n: move _10 }; // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:7:40: 7:50
                                         // closure
                                         // + def_id: DefId(0:4 ~ iter_position_overflow_ndebug[65b2]::main::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((u64,)) -> bool,
                                         //     (&u64,),
                                         // ]
        _4 = <RangeFrom<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-ndebug.rs:7:40: 7:43]>(move _5, move _9) -> bb2; // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:7:16: 7:51
                                         // mir::Constant
                                         // + span: ui/iterators/iter-position-overflow-ndebug.rs:7:31: 7:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeFrom<u64>, [closure@ui/iterators/iter-position-overflow-ndebug.rs:7:40: 7:43]) -> Option<usize> {<RangeFrom<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-ndebug.rs:7:40: 7:43]>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &_4;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _78 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<usize>, val: Unevaluated(main, [], Some(promoted[2])) }
        _11 = _78;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _11);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_2.0: &std::option::Option<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_2.1: &std::option::Option<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = _12;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = _13;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = <Option<usize> as PartialEq>::eq(move _16, move _17) -> bb3; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<usize>, &'b Option<usize>) -> bool {<Option<usize> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = Not(move _15);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb5, otherwise: bb4]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _18 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<Option<usize>, Option<usize>>(move _20, move _21, move _23, move _25); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<usize>, &'b Option<usize>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<usize>, Option<usize>>}, val: Value(<ZST>) }
    }

    bb5: {
        _32 = RangeFrom::<u64> { start: const 0_u64 }; // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:8:16: 8:21
        _31 = &mut _32;                  // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:8:16: 8:30
        _30 = <RangeFrom<u64> as Iterator>::by_ref(move _31) -> bb6; // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:8:16: 8:30
                                         // mir::Constant
                                         // + span: ui/iterators/iter-position-overflow-ndebug.rs:8:22: 8:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeFrom<u64>) -> &'a mut RangeFrom<u64> {<RangeFrom<u64> as Iterator>::by_ref}, val: Value(<ZST>) }
    }

    bb6: {
        _29 = &mut (*_30);               // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:8:16: 8:50
        _34 = &_1;                       // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:8:40: 8:49
        _33 = [closure@ui/iterators/iter-position-overflow-ndebug.rs:8:40: 8:43] { n: move _34 }; // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:8:40: 8:49
                                         // closure
                                         // + def_id: DefId(0:5 ~ iter_position_overflow_ndebug[65b2]::main::{closure#1})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((u64,)) -> bool,
                                         //     (&u64,),
                                         // ]
        _28 = <RangeFrom<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-ndebug.rs:8:40: 8:43]>(move _29, move _33) -> bb7; // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:8:16: 8:50
                                         // mir::Constant
                                         // + span: ui/iterators/iter-position-overflow-ndebug.rs:8:31: 8:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeFrom<u64>, [closure@ui/iterators/iter-position-overflow-ndebug.rs:8:40: 8:43]) -> Option<usize> {<RangeFrom<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-ndebug.rs:8:40: 8:43]>}, val: Value(<ZST>) }
    }

    bb7: {
        _27 = &_28;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _77 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<usize>, val: Unevaluated(main, [], Some(promoted[1])) }
        _35 = _77;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _26 = (move _27, move _35);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _36 = (_26.0: &std::option::Option<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _37 = (_26.1: &std::option::Option<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _40 = _36;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _41 = _37;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _39 = <Option<usize> as PartialEq>::eq(move _40, move _41) -> bb8; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<usize>, &'b Option<usize>) -> bool {<Option<usize> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _38 = Not(move _39);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _38) -> [0: bb10, otherwise: bb9]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _42 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _44 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _46 = _36;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _45 = _46;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _48 = _37;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _47 = _48;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _49 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _43 = core::panicking::assert_failed::<Option<usize>, Option<usize>>(move _44, move _45, move _47, move _49); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<usize>, &'b Option<usize>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<usize>, Option<usize>>}, val: Value(<ZST>) }
    }

    bb10: {
        _58 = _1;                        // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:9:21: 9:22
        _59 = CheckedAdd(_58, const 1_u64); // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:9:21: 9:26
        assert(!move (_59.1: bool), "attempt to compute `{} + {}`, which would overflow", move _58, const 1_u64) -> bb11; // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:9:21: 9:26
    }

    bb11: {
        _57 = move (_59.0: u64);         // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:9:21: 9:26
        _56 = RangeInclusive::<u64>::new(const 0_u64, move _57) -> bb12; // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:9:16: 9:27
                                         // mir::Constant
                                         // + span: ui/iterators/iter-position-overflow-ndebug.rs:9:17: 9:26
                                         // + literal: Const { ty: fn(u64, u64) -> RangeInclusive<u64> {RangeInclusive::<u64>::new}, val: Value(<ZST>) }
    }

    bb12: {
        _55 = &mut _56;                  // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:9:16: 9:36
        _54 = <RangeInclusive<u64> as Iterator>::by_ref(move _55) -> bb13; // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:9:16: 9:36
                                         // mir::Constant
                                         // + span: ui/iterators/iter-position-overflow-ndebug.rs:9:28: 9:34
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u64>) -> &'a mut RangeInclusive<u64> {<RangeInclusive<u64> as Iterator>::by_ref}, val: Value(<ZST>) }
    }

    bb13: {
        _53 = &mut (*_54);               // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:9:16: 9:56
        _52 = <RangeInclusive<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-ndebug.rs:9:46: 9:49]>(move _53, move _60) -> bb14; // scope 1 at ui/iterators/iter-position-overflow-ndebug.rs:9:16: 9:56
                                         // mir::Constant
                                         // + span: ui/iterators/iter-position-overflow-ndebug.rs:9:37: 9:45
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u64>, [closure@ui/iterators/iter-position-overflow-ndebug.rs:9:46: 9:49]) -> Option<usize> {<RangeInclusive<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-ndebug.rs:9:46: 9:49]>}, val: Value(<ZST>) }
    }

    bb14: {
        _51 = &_52;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _76 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<usize>, val: Unevaluated(main, [], Some(promoted[0])) }
        _61 = _76;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _50 = (move _51, move _61);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _62 = (_50.0: &std::option::Option<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _63 = (_50.1: &std::option::Option<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _66 = _62;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _67 = _63;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _65 = <Option<usize> as PartialEq>::eq(move _66, move _67) -> bb15; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<usize>, &'b Option<usize>) -> bool {<Option<usize> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb15: {
        _64 = Not(move _65);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _64) -> [0: bb17, otherwise: bb16]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb16: {
        _68 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _70 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _72 = _62;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _71 = _72;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _74 = _63;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _73 = _74;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _75 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _69 = core::panicking::assert_failed::<Option<usize>, Option<usize>>(move _70, move _71, move _73, move _75); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<usize>, &'b Option<usize>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<usize>, Option<usize>>}, val: Value(<ZST>) }
    }

    bb17: {
        return;                          // scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:10:2: 10:2
    }
}

promoted[0] in main: &Option<usize> = {
    let mut _0: &std::option::Option<usize>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<usize>; // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:9:58: 9:62

    bb0: {
        _1 = Option::<usize>::None;      // scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:9:58: 9:62
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &Option<usize> = {
    let mut _0: &std::option::Option<usize>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<usize>; // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:8:52: 8:59

    bb0: {
        _1 = Option::<usize>::Some(const 0_usize); // scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:8:52: 8:59
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &Option<usize> = {
    let mut _0: &std::option::Option<usize>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<usize>; // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:7:53: 7:69

    bb0: {
        _1 = Option::<usize>::Some(const _); // scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:7:53: 7:69
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/iterators/iter-position-overflow-ndebug.rs:7:40: 7:43], _2: u64) -> bool {
    debug i => _2;                       // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:7:41: 7:42
    debug n => (*((*_1).0: &u64));       // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:6:9: 6:10
    let mut _0: bool;                    // return place in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:7:44: 7:44
    let mut _3: u64;                     // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:7:44: 7:45
    let mut _4: u64;                     // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:7:49: 7:50
    let mut _5: &u64;                    // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:7:40: 7:50

    bb0: {
        _3 = _2;                         // scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:7:44: 7:45
        _5 = deref_copy ((*_1).0: &u64); // scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:7:49: 7:50
        _4 = (*_5);                      // scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:7:49: 7:50
        _0 = Ge(move _3, move _4);       // scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:7:44: 7:50
        return;                          // scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:7:50: 7:50
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/iterators/iter-position-overflow-ndebug.rs:8:40: 8:43], _2: u64) -> bool {
    debug i => _2;                       // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:8:41: 8:42
    debug n => (*((*_1).0: &u64));       // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:6:9: 6:10
    let mut _0: bool;                    // return place in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:8:44: 8:44
    let mut _3: u64;                     // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:8:44: 8:45
    let mut _4: u64;                     // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:8:48: 8:49
    let mut _5: &u64;                    // in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:8:40: 8:49

    bb0: {
        _3 = _2;                         // scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:8:44: 8:45
        _5 = deref_copy ((*_1).0: &u64); // scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:8:48: 8:49
        _4 = (*_5);                      // scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:8:48: 8:49
        _0 = Gt(move _3, move _4);       // scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:8:44: 8:49
        return;                          // scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:8:49: 8:49
    }
}

fn main::{closure#2}(_1: &mut [closure@ui/iterators/iter-position-overflow-ndebug.rs:9:46: 9:49], _2: u64) -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:9:50: 9:50

    bb0: {
        _0 = const false;                // scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:9:50: 9:55
        return;                          // scope 0 at ui/iterators/iter-position-overflow-ndebug.rs:9:55: 9:55
    }
}
