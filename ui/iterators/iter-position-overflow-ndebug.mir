// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: u64;
    let mut _2: (&std::option::Option<usize>, &std::option::Option<usize>);
    let mut _3: &std::option::Option<usize>;
    let _4: std::option::Option<usize>;
    let mut _5: &mut std::ops::RangeFrom<u64>;
    let mut _6: &mut std::ops::RangeFrom<u64>;
    let mut _7: &mut std::ops::RangeFrom<u64>;
    let mut _8: std::ops::RangeFrom<u64>;
    let mut _9: [closure@ui/iterators/iter-position-overflow-ndebug.rs:7:40: 7:43];
    let mut _10: &u64;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&std::option::Option<usize>, &std::option::Option<usize>);
    let mut _19: &std::option::Option<usize>;
    let _20: std::option::Option<usize>;
    let mut _21: &mut std::ops::RangeFrom<u64>;
    let mut _22: &mut std::ops::RangeFrom<u64>;
    let mut _23: &mut std::ops::RangeFrom<u64>;
    let mut _24: std::ops::RangeFrom<u64>;
    let mut _25: [closure@ui/iterators/iter-position-overflow-ndebug.rs:8:40: 8:43];
    let mut _26: &u64;
    let mut _29: bool;
    let mut _30: bool;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: (&std::option::Option<usize>, &std::option::Option<usize>);
    let mut _35: &std::option::Option<usize>;
    let _36: std::option::Option<usize>;
    let mut _37: &mut std::ops::RangeInclusive<u64>;
    let mut _38: &mut std::ops::RangeInclusive<u64>;
    let mut _39: &mut std::ops::RangeInclusive<u64>;
    let mut _40: std::ops::RangeInclusive<u64>;
    let mut _41: u64;
    let mut _42: u64;
    let mut _45: bool;
    let mut _46: bool;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug n => _1;
        let _11: &std::option::Option<usize>;
        let _12: &std::option::Option<usize>;
        let _27: &std::option::Option<usize>;
        let _28: &std::option::Option<usize>;
        let _43: &std::option::Option<usize>;
        let _44: &std::option::Option<usize>;
        let mut _50: &std::option::Option<usize>;
        let mut _51: &std::option::Option<usize>;
        let mut _52: &std::option::Option<usize>;
        scope 2 {
            debug left_val => _11;
            debug right_val => _12;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
        scope 4 {
            debug left_val => _27;
            debug right_val => _28;
            let _31: core::panicking::AssertKind;
            scope 5 {
                debug kind => _31;
            }
        }
        scope 6 {
            debug left_val => _43;
            debug right_val => _44;
            let _47: core::panicking::AssertKind;
            scope 7 {
                debug kind => _47;
            }
        }
    }

    bb0: {
        _1 = const _ as u64 (IntToInt);
        _8 = RangeFrom::<u64> { start: const 0_u64 };
        _7 = &mut _8;
        _6 = <RangeFrom<u64> as Iterator>::by_ref(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = _6;
        _10 = &_1;
        _9 = [closure@ui/iterators/iter-position-overflow-ndebug.rs:7:40: 7:43] { n: move _10 };
        _4 = <RangeFrom<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-ndebug.rs:7:40: 7:43]>(move _5, move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = &_4;
        _52 = const _;
        _2 = (move _3, _52);
        _11 = (_2.0: &std::option::Option<usize>);
        _12 = (_2.1: &std::option::Option<usize>);
        _14 = <Option<usize> as PartialEq>::eq(_11, _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<Option<usize>, Option<usize>>(move _15, _11, _12, move _17) -> unwind continue;
    }

    bb5: {
        _24 = RangeFrom::<u64> { start: const 0_u64 };
        _23 = &mut _24;
        _22 = <RangeFrom<u64> as Iterator>::by_ref(move _23) -> [return: bb6, unwind continue];
    }

    bb6: {
        _21 = _22;
        _26 = &_1;
        _25 = [closure@ui/iterators/iter-position-overflow-ndebug.rs:8:40: 8:43] { n: move _26 };
        _20 = <RangeFrom<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-ndebug.rs:8:40: 8:43]>(move _21, move _25) -> [return: bb7, unwind continue];
    }

    bb7: {
        _19 = &_20;
        _51 = const _;
        _18 = (move _19, _51);
        _27 = (_18.0: &std::option::Option<usize>);
        _28 = (_18.1: &std::option::Option<usize>);
        _30 = <Option<usize> as PartialEq>::eq(_27, _28) -> [return: bb8, unwind continue];
    }

    bb8: {
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<Option<usize>, Option<usize>>(move _31, _27, _28, move _33) -> unwind continue;
    }

    bb10: {
        _42 = _1;
        _41 = Add(move _42, const 1_u64);
        _40 = RangeInclusive::<u64>::new(const 0_u64, move _41) -> [return: bb11, unwind continue];
    }

    bb11: {
        _39 = &mut _40;
        _38 = <RangeInclusive<u64> as Iterator>::by_ref(move _39) -> [return: bb12, unwind continue];
    }

    bb12: {
        _37 = _38;
        _36 = <RangeInclusive<u64> as Iterator>::position::<[closure@ui/iterators/iter-position-overflow-ndebug.rs:9:46: 9:49]>(move _37, const ZeroSized: [closure@ui/iterators/iter-position-overflow-ndebug.rs:9:46: 9:49]) -> [return: bb13, unwind continue];
    }

    bb13: {
        _35 = &_36;
        _50 = const _;
        _34 = (move _35, _50);
        _43 = (_34.0: &std::option::Option<usize>);
        _44 = (_34.1: &std::option::Option<usize>);
        _46 = <Option<usize> as PartialEq>::eq(_43, _44) -> [return: bb14, unwind continue];
    }

    bb14: {
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<Option<usize>, Option<usize>>(move _47, _43, _44, move _49) -> unwind continue;
    }

    bb16: {
        return;
    }
}

promoted[0] in main: &Option<usize> = {
    let mut _0: &std::option::Option<usize>;
    let mut _1: std::option::Option<usize>;

    bb0: {
        _1 = Option::<usize>::None;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Option<usize> = {
    let mut _0: &std::option::Option<usize>;
    let mut _1: std::option::Option<usize>;

    bb0: {
        _1 = Option::<usize>::Some(const 0_usize);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &Option<usize> = {
    let mut _0: &std::option::Option<usize>;
    let mut _1: std::option::Option<usize>;

    bb0: {
        _1 = Option::<usize>::Some(const _);
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/iterators/iter-position-overflow-ndebug.rs:7:40: 7:43], _2: u64) -> bool {
    debug i => _2;
    debug n => (*((*_1).0: &u64));
    let mut _0: bool;
    let mut _3: u64;
    let mut _4: &u64;

    bb0: {
        _4 = deref_copy ((*_1).0: &u64);
        _3 = (*_4);
        _0 = Ge(_2, move _3);
        return;
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/iterators/iter-position-overflow-ndebug.rs:8:40: 8:43], _2: u64) -> bool {
    debug i => _2;
    debug n => (*((*_1).0: &u64));
    let mut _0: bool;
    let mut _3: u64;
    let mut _4: &u64;

    bb0: {
        _4 = deref_copy ((*_1).0: &u64);
        _3 = (*_4);
        _0 = Gt(_2, move _3);
        return;
    }
}

fn main::{closure#2}(_1: &mut [closure@ui/iterators/iter-position-overflow-ndebug.rs:9:46: 9:49], _2: u64) -> bool {
    let mut _0: bool;

    bb0: {
        _0 = const false;
        return;
    }
}
