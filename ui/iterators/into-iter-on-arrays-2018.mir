// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:9:11: 9:11
    let _1: [i32; 10];                   // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:10:9: 10:14
    let mut _2: std::slice::Iter<'_, i32>; // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:14:28: 14:45
    let mut _3: &[i32; 10];              // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:14:28: 14:45
    let mut _4: std::slice::Iter<'_, i32>; // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:18:28: 18:55
    let mut _5: &[i32; 10];              // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:18:28: 18:55
    let _6: std::boxed::Box<[i32; 10]>;  // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:18:28: 18:43
    let mut _7: [i32; 10];               // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:18:37: 18:42
    let mut _8: std::slice::Iter<'_, i32>; // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:22:28: 22:54
    let mut _9: &[i32; 10];              // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:22:28: 22:54
    let _10: &[i32; 10];                 // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:22:28: 22:54
    let mut _11: &std::rc::Rc<[i32; 10]>; // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:22:28: 22:54
    let _12: std::rc::Rc<[i32; 10]>;     // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:22:28: 22:42
    let mut _13: [i32; 10];              // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:22:36: 22:41
    let mut _14: std::slice::Iter<'_, i32>; // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:25:28: 25:52
    let mut _15: &[i32; 10];             // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:25:28: 25:52
    let _16: &[i32; 10];                 // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:25:28: 25:52
    let mut _17: &Array;                 // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:25:28: 25:52
    let _18: Array;                      // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:25:28: 25:40
    let mut _19: [i32; 10];              // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:25:34: 25:39
    let mut _20: std::array::IntoIter<i32, 10>; // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:30:32: 30:62
    let mut _21: [i32; 10];              // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:30:56: 30:61
    let mut _22: std::slice::Iter<'_, i32>; // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
    let mut _23: std::slice::Iter<'_, i32>; // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
    let mut _24: &[i32; 3];              // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
    let mut _26: std::option::Option<&i32>; // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
    let mut _27: &mut std::slice::Iter<'_, i32>; // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
    let mut _28: &mut std::slice::Iter<'_, i32>; // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
    let mut _29: isize;                  // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:32:5: 32:38
    let mut _31: *const [i32; 10];       // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:18:28: 18:43
    scope 1 {
        debug array => _1;               // in scope 1 at ui/iterators/into-iter-on-arrays-2018.rs:10:9: 10:14
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                            let mut _25: std::slice::Iter<'_, i32>; // in scope 6 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
                            let mut _30: &[i32; 3]; // in scope 6 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
                            scope 7 {
                                debug iter => _25; // in scope 7 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [const 0_i32; 10];          // scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:10:17: 10:24
        _3 = &_1;                        // scope 1 at ui/iterators/into-iter-on-arrays-2018.rs:14:28: 14:45
        _2 = <&[i32; 10] as IntoIterator>::into_iter(move _3) -> bb1; // scope 1 at ui/iterators/into-iter-on-arrays-2018.rs:14:28: 14:45
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-2018.rs:14:34: 14:43
                                         // + literal: Const { ty: fn(&[i32; 10]) -> <&[i32; 10] as IntoIterator>::IntoIter {<&[i32; 10] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _1;                         // scope 2 at ui/iterators/into-iter-on-arrays-2018.rs:18:37: 18:42
        _6 = Box::<[i32; 10]>::new(move _7) -> bb2; // scope 2 at ui/iterators/into-iter-on-arrays-2018.rs:18:28: 18:43
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-2018.rs:18:28: 18:36
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn([i32; 10]) -> Box<[i32; 10]> {Box::<[i32; 10]>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _31 = (((_6.0: std::ptr::Unique<[i32; 10]>).0: std::ptr::NonNull<[i32; 10]>).0: *const [i32; 10]); // scope 2 at ui/iterators/into-iter-on-arrays-2018.rs:18:28: 18:55
        _5 = &(*_31);                    // scope 2 at ui/iterators/into-iter-on-arrays-2018.rs:18:28: 18:55
        _4 = <&[i32; 10] as IntoIterator>::into_iter(move _5) -> [return: bb3, unwind: bb20]; // scope 2 at ui/iterators/into-iter-on-arrays-2018.rs:18:28: 18:55
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-2018.rs:18:44: 18:53
                                         // + literal: Const { ty: fn(&[i32; 10]) -> <&[i32; 10] as IntoIterator>::IntoIter {<&[i32; 10] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_6) -> bb4;                 // scope 2 at ui/iterators/into-iter-on-arrays-2018.rs:18:55: 18:56
    }

    bb4: {
        _13 = _1;                        // scope 3 at ui/iterators/into-iter-on-arrays-2018.rs:22:36: 22:41
        _12 = Rc::<[i32; 10]>::new(move _13) -> bb5; // scope 3 at ui/iterators/into-iter-on-arrays-2018.rs:22:28: 22:42
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-2018.rs:22:28: 22:35
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn([i32; 10]) -> Rc<[i32; 10]> {Rc::<[i32; 10]>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = &_12;                      // scope 3 at ui/iterators/into-iter-on-arrays-2018.rs:22:28: 22:54
        _10 = <Rc<[i32; 10]> as Deref>::deref(move _11) -> [return: bb6, unwind: bb19]; // scope 3 at ui/iterators/into-iter-on-arrays-2018.rs:22:28: 22:54
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-2018.rs:22:28: 22:54
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<[i32; 10]>) -> &'a <Rc<[i32; 10]> as Deref>::Target {<Rc<[i32; 10]> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _9 = _10;                        // scope 3 at ui/iterators/into-iter-on-arrays-2018.rs:22:28: 22:54
        _8 = <&[i32; 10] as IntoIterator>::into_iter(move _9) -> [return: bb7, unwind: bb19]; // scope 3 at ui/iterators/into-iter-on-arrays-2018.rs:22:28: 22:54
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-2018.rs:22:43: 22:52
                                         // + literal: Const { ty: fn(&[i32; 10]) -> <&[i32; 10] as IntoIterator>::IntoIter {<&[i32; 10] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_12) -> bb8;                // scope 3 at ui/iterators/into-iter-on-arrays-2018.rs:22:54: 22:55
    }

    bb8: {
        _19 = _1;                        // scope 4 at ui/iterators/into-iter-on-arrays-2018.rs:25:34: 25:39
        _18 = Array(move _19);           // scope 4 at ui/iterators/into-iter-on-arrays-2018.rs:25:28: 25:40
        _17 = &_18;                      // scope 4 at ui/iterators/into-iter-on-arrays-2018.rs:25:28: 25:52
        _16 = <Array as Deref>::deref(move _17) -> bb9; // scope 4 at ui/iterators/into-iter-on-arrays-2018.rs:25:28: 25:52
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-2018.rs:25:28: 25:52
                                         // + literal: Const { ty: for<'a> fn(&'a Array) -> &'a <Array as Deref>::Target {<Array as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = _16;                       // scope 4 at ui/iterators/into-iter-on-arrays-2018.rs:25:28: 25:52
        _14 = <&[i32; 10] as IntoIterator>::into_iter(move _15) -> bb10; // scope 4 at ui/iterators/into-iter-on-arrays-2018.rs:25:28: 25:52
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-2018.rs:25:41: 25:50
                                         // + literal: Const { ty: fn(&[i32; 10]) -> <&[i32; 10] as IntoIterator>::IntoIter {<&[i32; 10] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb10: {
        _21 = _1;                        // scope 5 at ui/iterators/into-iter-on-arrays-2018.rs:30:56: 30:61
        _20 = <[i32; 10] as IntoIterator>::into_iter(move _21) -> bb11; // scope 5 at ui/iterators/into-iter-on-arrays-2018.rs:30:32: 30:62
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-2018.rs:30:32: 30:55
                                         // + literal: Const { ty: fn([i32; 10]) -> <[i32; 10] as IntoIterator>::IntoIter {<[i32; 10] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb11: {
        drop(_20) -> bb12;               // scope 5 at ui/iterators/into-iter-on-arrays-2018.rs:30:62: 30:63
    }

    bb12: {
        _30 = const _;                   // scope 6 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
                                         // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _24 = _30;                       // scope 6 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
        _23 = <&[i32; 3] as IntoIterator>::into_iter(move _24) -> bb13; // scope 6 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-2018.rs:32:24: 32:33
                                         // + literal: Const { ty: fn(&[i32; 3]) -> <&[i32; 3] as IntoIterator>::IntoIter {<&[i32; 3] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb13: {
        _22 = <std::slice::Iter<'_, i32> as IntoIterator>::into_iter(move _23) -> bb14; // scope 6 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, i32>) -> <std::slice::Iter<'_, i32> as IntoIterator>::IntoIter {<std::slice::Iter<'_, i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb14: {
        _25 = move _22;                  // scope 6 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
        goto -> bb15;                    // scope 7 at ui/iterators/into-iter-on-arrays-2018.rs:32:5: 32:38
    }

    bb15: {
        _28 = &mut _25;                  // scope 7 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
        _27 = &mut (*_28);               // scope 7 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
        _26 = <std::slice::Iter<'_, i32> as Iterator>::next(move _27) -> bb16; // scope 7 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
                                         // mir::Constant
                                         // + span: ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, i32>) -> Option<<std::slice::Iter<'_, i32> as Iterator>::Item> {<std::slice::Iter<'_, i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb16: {
        _29 = discriminant(_26);         // scope 7 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
        switchInt(move _29) -> [0: bb18, 1: bb15, otherwise: bb17]; // scope 7 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
    }

    bb17: {
        unreachable;                     // scope 7 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
    }

    bb18: {
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:35:2: 35:2
    }

    bb19 (cleanup): {
        drop(_12) -> bb21;               // scope 3 at ui/iterators/into-iter-on-arrays-2018.rs:22:54: 22:55
    }

    bb20 (cleanup): {
        drop(_6) -> bb21;                // scope 2 at ui/iterators/into-iter-on-arrays-2018.rs:18:55: 18:56
    }

    bb21 (cleanup): {
        resume;                          // scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:9:1: 35:2
    }
}

promoted[0] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];               // return place in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
    let mut _1: [i32; 3];                // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:23

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:23
        _0 = &_1;                        // scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:32:14: 32:35
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:10:21: 10:23

    bb0: {
        _0 = const 10_usize;             // scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:10:21: 10:23
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:10:21: 10:23
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:30:26: 30:28

    bb0: {
        _0 = const 10_usize;             // scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:30:26: 30:28
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:30:26: 30:28
    }
}

Array::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:38:20: 38:22

    bb0: {
        _0 = const 10_usize;             // scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:38:20: 38:22
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:38:20: 38:22
    }
}

<impl at ui/iterators/into-iter-on-arrays-2018.rs:40:1: 40:21>::Target::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:41:25: 41:27

    bb0: {
        _0 = const 10_usize;             // scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:41:25: 41:27
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:41:25: 41:27
    }
}

fn <impl at ui/iterators/into-iter-on-arrays-2018.rs:40:1: 40:21>::deref(_1: &Array) -> &[i32; 10] {
    debug self => _1;                    // in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:43:14: 43:19
    let mut _0: &[i32; 10];              // return place in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:44:9: 44:16

    bb0: {
        _0 = &((*_1).0: [i32; 10]);      // scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:44:9: 44:16
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:45:6: 45:6
    }
}

fn Array(_1: [i32; 10]) -> Array {
    let mut _0: Array;                   // return place in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:38:1: 38:13

    bb0: {
        _0 = Array(move _1);             // scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:38:1: 38:13
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:38:1: 38:13
    }
}

// MIR FOR CTFE
fn Array(_1: [i32; 10]) -> Array {
    let mut _0: Array;                   // return place in scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:38:1: 38:13

    bb0: {
        _0 = Array(move _1);             // scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:38:1: 38:13
        return;                          // scope 0 at ui/iterators/into-iter-on-arrays-2018.rs:38:1: 38:13
    }
}
