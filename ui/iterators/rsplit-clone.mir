// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/iterators/rsplit-clone.rs:7:11: 7:11
    let _1: [NotClone; 3];               // in scope 0 at ui/iterators/rsplit-clone.rs:8:9: 8:17
    let mut _3: &[NotClone];             // in scope 0 at ui/iterators/rsplit-clone.rs:9:18: 9:44
    let mut _4: &[NotClone; 3];          // in scope 0 at ui/iterators/rsplit-clone.rs:9:18: 9:44
    let mut _5: [closure@ui/iterators/rsplit-clone.rs:9:34: 9:37]; // in scope 0 at ui/iterators/rsplit-clone.rs:9:34: 9:43
    let _6: std::slice::RSplit<'_, NotClone, [closure@ui/iterators/rsplit-clone.rs:9:34: 9:37]>; // in scope 0 at ui/iterators/rsplit-clone.rs:10:5: 10:19
    let mut _7: &std::slice::RSplit<'_, NotClone, [closure@ui/iterators/rsplit-clone.rs:9:34: 9:37]>; // in scope 0 at ui/iterators/rsplit-clone.rs:10:5: 10:19
    scope 1 {
        debug elements => _1;            // in scope 1 at ui/iterators/rsplit-clone.rs:8:9: 8:17
        let _2: std::slice::RSplit<'_, NotClone, [closure@ui/iterators/rsplit-clone.rs:9:34: 9:37]>; // in scope 1 at ui/iterators/rsplit-clone.rs:9:9: 9:15
        scope 2 {
            debug rsplit => _2;          // in scope 2 at ui/iterators/rsplit-clone.rs:9:9: 9:15
        }
    }

    bb0: {
        _4 = &_1;                        // scope 1 at ui/iterators/rsplit-clone.rs:9:18: 9:44
        _3 = move _4 as &[NotClone] (Pointer(Unsize)); // scope 1 at ui/iterators/rsplit-clone.rs:9:18: 9:44
        _2 = core::slice::<impl [NotClone]>::rsplit::<[closure@ui/iterators/rsplit-clone.rs:9:34: 9:37]>(move _3, move _5) -> bb1; // scope 1 at ui/iterators/rsplit-clone.rs:9:18: 9:44
                                         // mir::Constant
                                         // + span: ui/iterators/rsplit-clone.rs:9:27: 9:33
                                         // + literal: Const { ty: for<'a> fn(&'a [NotClone], [closure@ui/iterators/rsplit-clone.rs:9:34: 9:37]) -> std::slice::RSplit<'a, NotClone, [closure@ui/iterators/rsplit-clone.rs:9:34: 9:37]> {core::slice::<impl [NotClone]>::rsplit::<[closure@ui/iterators/rsplit-clone.rs:9:34: 9:37]>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_2;                        // scope 2 at ui/iterators/rsplit-clone.rs:10:5: 10:19
        _6 = <std::slice::RSplit<'_, NotClone, [closure@ui/iterators/rsplit-clone.rs:9:34: 9:37]> as Clone>::clone(move _7) -> bb2; // scope 2 at ui/iterators/rsplit-clone.rs:10:5: 10:19
                                         // mir::Constant
                                         // + span: ui/iterators/rsplit-clone.rs:10:12: 10:17
                                         // + literal: Const { ty: for<'a> fn(&'a std::slice::RSplit<'_, NotClone, [closure@ui/iterators/rsplit-clone.rs:9:34: 9:37]>) -> std::slice::RSplit<'_, NotClone, [closure@ui/iterators/rsplit-clone.rs:9:34: 9:37]> {<std::slice::RSplit<'_, NotClone, [closure@ui/iterators/rsplit-clone.rs:9:34: 9:37]> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/iterators/rsplit-clone.rs:11:2: 11:2
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/iterators/rsplit-clone.rs:9:34: 9:37], _2: &NotClone) -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/iterators/rsplit-clone.rs:9:38: 9:38

    bb0: {
        _0 = const false;                // scope 0 at ui/iterators/rsplit-clone.rs:9:38: 9:43
        return;                          // scope 0 at ui/iterators/rsplit-clone.rs:9:43: 9:43
    }
}
