// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/iterators/array-of-ranges.rs:3:11: 3:11
    let mut _1: std::array::IntoIter<std::ops::Range<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:4:14: 4:20
    let mut _2: [std::ops::Range<i32>; 1]; // in scope 0 at ui/iterators/array-of-ranges.rs:4:14: 4:20
    let mut _3: std::ops::Range<i32>;    // in scope 0 at ui/iterators/array-of-ranges.rs:4:15: 4:19
    let mut _4: std::array::IntoIter<std::ops::Range<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:4:14: 4:20
    let mut _5: std::option::Option<std::ops::Range<i32>>; // in scope 0 at ui/iterators/array-of-ranges.rs:4:14: 4:20
    let mut _6: &mut std::array::IntoIter<std::ops::Range<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:4:14: 4:20
    let mut _7: &mut std::array::IntoIter<std::ops::Range<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:4:14: 4:20
    let mut _8: isize;                   // in scope 0 at ui/iterators/array-of-ranges.rs:4:5: 4:23
    let mut _9: std::array::IntoIter<std::ops::RangeInclusive<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:5:14: 5:21
    let mut _10: [std::ops::RangeInclusive<i32>; 1]; // in scope 0 at ui/iterators/array-of-ranges.rs:5:14: 5:21
    let mut _11: std::ops::RangeInclusive<i32>; // in scope 0 at ui/iterators/array-of-ranges.rs:5:15: 5:20
    let mut _12: std::array::IntoIter<std::ops::RangeInclusive<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:5:14: 5:21
    let mut _13: std::option::Option<std::ops::RangeInclusive<i32>>; // in scope 0 at ui/iterators/array-of-ranges.rs:5:14: 5:21
    let mut _14: &mut std::array::IntoIter<std::ops::RangeInclusive<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:5:14: 5:21
    let mut _15: &mut std::array::IntoIter<std::ops::RangeInclusive<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:5:14: 5:21
    let mut _16: isize;                  // in scope 0 at ui/iterators/array-of-ranges.rs:5:5: 5:24
    let mut _17: std::array::IntoIter<std::ops::RangeFrom<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:6:14: 6:19
    let mut _18: [std::ops::RangeFrom<i32>; 1]; // in scope 0 at ui/iterators/array-of-ranges.rs:6:14: 6:19
    let mut _19: std::ops::RangeFrom<i32>; // in scope 0 at ui/iterators/array-of-ranges.rs:6:15: 6:18
    let mut _20: std::array::IntoIter<std::ops::RangeFrom<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:6:14: 6:19
    let mut _21: std::option::Option<std::ops::RangeFrom<i32>>; // in scope 0 at ui/iterators/array-of-ranges.rs:6:14: 6:19
    let mut _22: &mut std::array::IntoIter<std::ops::RangeFrom<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:6:14: 6:19
    let mut _23: &mut std::array::IntoIter<std::ops::RangeFrom<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:6:14: 6:19
    let mut _24: isize;                  // in scope 0 at ui/iterators/array-of-ranges.rs:6:5: 6:22
    let mut _25: std::array::IntoIter<std::ops::RangeTo<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:7:14: 7:19
    let mut _26: [std::ops::RangeTo<i32>; 1]; // in scope 0 at ui/iterators/array-of-ranges.rs:7:14: 7:19
    let mut _27: std::ops::RangeTo<i32>; // in scope 0 at ui/iterators/array-of-ranges.rs:7:15: 7:18
    let mut _28: std::array::IntoIter<std::ops::RangeTo<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:7:14: 7:19
    let mut _29: std::option::Option<std::ops::RangeTo<i32>>; // in scope 0 at ui/iterators/array-of-ranges.rs:7:14: 7:19
    let mut _30: &mut std::array::IntoIter<std::ops::RangeTo<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:7:14: 7:19
    let mut _31: &mut std::array::IntoIter<std::ops::RangeTo<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:7:14: 7:19
    let mut _32: isize;                  // in scope 0 at ui/iterators/array-of-ranges.rs:7:5: 7:22
    let mut _33: std::array::IntoIter<std::ops::RangeToInclusive<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:8:14: 8:20
    let mut _34: [std::ops::RangeToInclusive<i32>; 1]; // in scope 0 at ui/iterators/array-of-ranges.rs:8:14: 8:20
    let mut _35: std::ops::RangeToInclusive<i32>; // in scope 0 at ui/iterators/array-of-ranges.rs:8:15: 8:19
    let mut _36: std::array::IntoIter<std::ops::RangeToInclusive<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:8:14: 8:20
    let mut _37: std::option::Option<std::ops::RangeToInclusive<i32>>; // in scope 0 at ui/iterators/array-of-ranges.rs:8:14: 8:20
    let mut _38: &mut std::array::IntoIter<std::ops::RangeToInclusive<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:8:14: 8:20
    let mut _39: &mut std::array::IntoIter<std::ops::RangeToInclusive<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:8:14: 8:20
    let mut _40: isize;                  // in scope 0 at ui/iterators/array-of-ranges.rs:8:5: 8:23
    let _41: i32;                        // in scope 0 at ui/iterators/array-of-ranges.rs:9:9: 9:14
    let mut _43: std::array::IntoIter<std::ops::Range<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:11:14: 11:26
    let mut _44: [std::ops::Range<i32>; 1]; // in scope 0 at ui/iterators/array-of-ranges.rs:11:14: 11:26
    let mut _45: std::ops::Range<i32>;   // in scope 0 at ui/iterators/array-of-ranges.rs:11:15: 11:25
    let mut _46: i32;                    // in scope 0 at ui/iterators/array-of-ranges.rs:11:15: 11:20
    let mut _47: i32;                    // in scope 0 at ui/iterators/array-of-ranges.rs:11:22: 11:25
    let mut _49: std::option::Option<std::ops::Range<i32>>; // in scope 0 at ui/iterators/array-of-ranges.rs:11:14: 11:26
    let mut _50: &mut std::array::IntoIter<std::ops::Range<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:11:14: 11:26
    let mut _51: &mut std::array::IntoIter<std::ops::Range<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:11:14: 11:26
    let mut _52: isize;                  // in scope 0 at ui/iterators/array-of-ranges.rs:11:5: 11:29
    let mut _54: std::ops::Range<i32>;   // in scope 0 at ui/iterators/array-of-ranges.rs:12:27: 12:37
    let mut _55: i32;                    // in scope 0 at ui/iterators/array-of-ranges.rs:12:27: 12:32
    let mut _56: i32;                    // in scope 0 at ui/iterators/array-of-ranges.rs:12:34: 12:37
    let mut _57: std::array::IntoIter<std::ops::Range<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:13:14: 13:28
    let mut _58: [std::ops::Range<i32>; 1]; // in scope 0 at ui/iterators/array-of-ranges.rs:13:14: 13:28
    let mut _60: std::option::Option<std::ops::Range<i32>>; // in scope 0 at ui/iterators/array-of-ranges.rs:13:14: 13:28
    let mut _61: &mut std::array::IntoIter<std::ops::Range<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:13:14: 13:28
    let mut _62: &mut std::array::IntoIter<std::ops::Range<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:13:14: 13:28
    let mut _63: isize;                  // in scope 0 at ui/iterators/array-of-ranges.rs:13:5: 13:31
    let mut _64: std::array::IntoIter<std::ops::Range<i32>, 2>; // in scope 0 at ui/iterators/array-of-ranges.rs:14:14: 14:26
    let mut _65: [std::ops::Range<i32>; 2]; // in scope 0 at ui/iterators/array-of-ranges.rs:14:14: 14:26
    let mut _66: std::ops::Range<i32>;   // in scope 0 at ui/iterators/array-of-ranges.rs:14:15: 14:19
    let mut _67: std::ops::Range<i32>;   // in scope 0 at ui/iterators/array-of-ranges.rs:14:21: 14:25
    let mut _69: std::option::Option<std::ops::Range<i32>>; // in scope 0 at ui/iterators/array-of-ranges.rs:14:14: 14:26
    let mut _70: &mut std::array::IntoIter<std::ops::Range<i32>, 2>; // in scope 0 at ui/iterators/array-of-ranges.rs:14:14: 14:26
    let mut _71: &mut std::array::IntoIter<std::ops::Range<i32>, 2>; // in scope 0 at ui/iterators/array-of-ranges.rs:14:14: 14:26
    let mut _72: isize;                  // in scope 0 at ui/iterators/array-of-ranges.rs:14:5: 14:29
    let mut _73: std::array::IntoIter<std::ops::RangeInclusive<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:15:14: 15:21
    let mut _74: [std::ops::RangeInclusive<i32>; 1]; // in scope 0 at ui/iterators/array-of-ranges.rs:15:14: 15:21
    let mut _75: std::ops::RangeInclusive<i32>; // in scope 0 at ui/iterators/array-of-ranges.rs:15:15: 15:20
    let mut _77: std::option::Option<std::ops::RangeInclusive<i32>>; // in scope 0 at ui/iterators/array-of-ranges.rs:15:14: 15:21
    let mut _78: &mut std::array::IntoIter<std::ops::RangeInclusive<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:15:14: 15:21
    let mut _79: &mut std::array::IntoIter<std::ops::RangeInclusive<i32>, 1>; // in scope 0 at ui/iterators/array-of-ranges.rs:15:14: 15:21
    let mut _80: isize;                  // in scope 0 at ui/iterators/array-of-ranges.rs:15:5: 15:24
    scope 1 {
        debug iter => _4;                // in scope 1 at ui/iterators/array-of-ranges.rs:4:14: 4:20
    }
    scope 2 {
        debug iter => _12;               // in scope 2 at ui/iterators/array-of-ranges.rs:5:14: 5:21
    }
    scope 3 {
        debug iter => _20;               // in scope 3 at ui/iterators/array-of-ranges.rs:6:14: 6:19
    }
    scope 4 {
        debug iter => _28;               // in scope 4 at ui/iterators/array-of-ranges.rs:7:14: 7:19
    }
    scope 5 {
        debug iter => _36;               // in scope 5 at ui/iterators/array-of-ranges.rs:8:14: 8:20
    }
    scope 6 {
        debug start => _41;              // in scope 6 at ui/iterators/array-of-ranges.rs:9:9: 9:14
        let _42: i32;                    // in scope 6 at ui/iterators/array-of-ranges.rs:10:9: 10:12
        scope 7 {
            debug end => _42;            // in scope 7 at ui/iterators/array-of-ranges.rs:10:9: 10:12
            let mut _48: std::array::IntoIter<std::ops::Range<i32>, 1>; // in scope 7 at ui/iterators/array-of-ranges.rs:11:14: 11:26
            let _53: [std::ops::Range<i32>; 1]; // in scope 7 at ui/iterators/array-of-ranges.rs:12:9: 12:23
            scope 8 {
                debug iter => _48;       // in scope 8 at ui/iterators/array-of-ranges.rs:11:14: 11:26
            }
            scope 9 {
                debug array_of_range => _53; // in scope 9 at ui/iterators/array-of-ranges.rs:12:9: 12:23
                let mut _59: std::array::IntoIter<std::ops::Range<i32>, 1>; // in scope 9 at ui/iterators/array-of-ranges.rs:13:14: 13:28
                let mut _68: std::array::IntoIter<std::ops::Range<i32>, 2>; // in scope 9 at ui/iterators/array-of-ranges.rs:14:14: 14:26
                let mut _76: std::array::IntoIter<std::ops::RangeInclusive<i32>, 1>; // in scope 9 at ui/iterators/array-of-ranges.rs:15:14: 15:21
                scope 10 {
                    debug iter => _59;   // in scope 10 at ui/iterators/array-of-ranges.rs:13:14: 13:28
                }
                scope 11 {
                    debug iter => _68;   // in scope 11 at ui/iterators/array-of-ranges.rs:14:14: 14:26
                }
                scope 12 {
                    debug iter => _76;   // in scope 12 at ui/iterators/array-of-ranges.rs:15:14: 15:21
                }
            }
        }
    }

    bb0: {
        _3 = std::ops::Range::<i32> { start: const 0_i32, end: const 1_i32 }; // scope 0 at ui/iterators/array-of-ranges.rs:4:15: 4:19
        _2 = [move _3];                  // scope 0 at ui/iterators/array-of-ranges.rs:4:14: 4:20
        _1 = <[std::ops::Range<i32>; 1] as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at ui/iterators/array-of-ranges.rs:4:14: 4:20
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:4:14: 4:20
                                         // + literal: Const { ty: fn([std::ops::Range<i32>; 1]) -> <[std::ops::Range<i32>; 1] as IntoIterator>::IntoIter {<[std::ops::Range<i32>; 1] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = move _1;                    // scope 0 at ui/iterators/array-of-ranges.rs:4:14: 4:20
        goto -> bb2;                     // scope 1 at ui/iterators/array-of-ranges.rs:4:5: 4:23
    }

    bb2: {
        _7 = &mut _4;                    // scope 1 at ui/iterators/array-of-ranges.rs:4:14: 4:20
        _6 = &mut (*_7);                 // scope 1 at ui/iterators/array-of-ranges.rs:4:14: 4:20
        _5 = <std::array::IntoIter<std::ops::Range<i32>, 1> as Iterator>::next(move _6) -> [return: bb3, unwind: bb65]; // scope 1 at ui/iterators/array-of-ranges.rs:4:14: 4:20
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:4:14: 4:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::array::IntoIter<std::ops::Range<i32>, 1>) -> Option<<std::array::IntoIter<std::ops::Range<i32>, 1> as Iterator>::Item> {<std::array::IntoIter<std::ops::Range<i32>, 1> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = discriminant(_5);           // scope 1 at ui/iterators/array-of-ranges.rs:4:14: 4:20
        switchInt(move _8) -> [0: bb5, 1: bb2, otherwise: bb4]; // scope 1 at ui/iterators/array-of-ranges.rs:4:14: 4:20
    }

    bb4: {
        unreachable;                     // scope 1 at ui/iterators/array-of-ranges.rs:4:14: 4:20
    }

    bb5: {
        drop(_4) -> bb6;                 // scope 0 at ui/iterators/array-of-ranges.rs:4:22: 4:23
    }

    bb6: {
        _11 = RangeInclusive::<i32>::new(const 0_i32, const 1_i32) -> bb7; // scope 0 at ui/iterators/array-of-ranges.rs:5:15: 5:20
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:5:15: 5:20
                                         // + literal: Const { ty: fn(i32, i32) -> RangeInclusive<i32> {RangeInclusive::<i32>::new}, val: Value(<ZST>) }
    }

    bb7: {
        _10 = [move _11];                // scope 0 at ui/iterators/array-of-ranges.rs:5:14: 5:21
        _9 = <[RangeInclusive<i32>; 1] as IntoIterator>::into_iter(move _10) -> bb8; // scope 0 at ui/iterators/array-of-ranges.rs:5:14: 5:21
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:5:14: 5:21
                                         // + literal: Const { ty: fn([RangeInclusive<i32>; 1]) -> <[RangeInclusive<i32>; 1] as IntoIterator>::IntoIter {<[RangeInclusive<i32>; 1] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb8: {
        _12 = move _9;                   // scope 0 at ui/iterators/array-of-ranges.rs:5:14: 5:21
        goto -> bb9;                     // scope 2 at ui/iterators/array-of-ranges.rs:5:5: 5:24
    }

    bb9: {
        _15 = &mut _12;                  // scope 2 at ui/iterators/array-of-ranges.rs:5:14: 5:21
        _14 = &mut (*_15);               // scope 2 at ui/iterators/array-of-ranges.rs:5:14: 5:21
        _13 = <std::array::IntoIter<RangeInclusive<i32>, 1> as Iterator>::next(move _14) -> [return: bb10, unwind: bb64]; // scope 2 at ui/iterators/array-of-ranges.rs:5:14: 5:21
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:5:14: 5:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::array::IntoIter<RangeInclusive<i32>, 1>) -> Option<<std::array::IntoIter<RangeInclusive<i32>, 1> as Iterator>::Item> {<std::array::IntoIter<RangeInclusive<i32>, 1> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb10: {
        _16 = discriminant(_13);         // scope 2 at ui/iterators/array-of-ranges.rs:5:14: 5:21
        switchInt(move _16) -> [0: bb12, 1: bb9, otherwise: bb11]; // scope 2 at ui/iterators/array-of-ranges.rs:5:14: 5:21
    }

    bb11: {
        unreachable;                     // scope 2 at ui/iterators/array-of-ranges.rs:5:14: 5:21
    }

    bb12: {
        drop(_12) -> bb13;               // scope 0 at ui/iterators/array-of-ranges.rs:5:23: 5:24
    }

    bb13: {
        _19 = const RangeFrom::<i32> {{ start: 0_i32 }}; // scope 0 at ui/iterators/array-of-ranges.rs:6:15: 6:18
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:6:15: 6:18
                                         // + literal: Const { ty: RangeFrom<i32>, val: Value(Scalar(0x00000000)) }
        _18 = [move _19];                // scope 0 at ui/iterators/array-of-ranges.rs:6:14: 6:19
        _17 = <[RangeFrom<i32>; 1] as IntoIterator>::into_iter(move _18) -> bb14; // scope 0 at ui/iterators/array-of-ranges.rs:6:14: 6:19
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:6:14: 6:19
                                         // + literal: Const { ty: fn([RangeFrom<i32>; 1]) -> <[RangeFrom<i32>; 1] as IntoIterator>::IntoIter {<[RangeFrom<i32>; 1] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb14: {
        _20 = move _17;                  // scope 0 at ui/iterators/array-of-ranges.rs:6:14: 6:19
        goto -> bb15;                    // scope 3 at ui/iterators/array-of-ranges.rs:6:5: 6:22
    }

    bb15: {
        _23 = &mut _20;                  // scope 3 at ui/iterators/array-of-ranges.rs:6:14: 6:19
        _22 = &mut (*_23);               // scope 3 at ui/iterators/array-of-ranges.rs:6:14: 6:19
        _21 = <std::array::IntoIter<RangeFrom<i32>, 1> as Iterator>::next(move _22) -> [return: bb16, unwind: bb63]; // scope 3 at ui/iterators/array-of-ranges.rs:6:14: 6:19
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:6:14: 6:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::array::IntoIter<RangeFrom<i32>, 1>) -> Option<<std::array::IntoIter<RangeFrom<i32>, 1> as Iterator>::Item> {<std::array::IntoIter<RangeFrom<i32>, 1> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb16: {
        _24 = discriminant(_21);         // scope 3 at ui/iterators/array-of-ranges.rs:6:14: 6:19
        switchInt(move _24) -> [0: bb18, 1: bb15, otherwise: bb17]; // scope 3 at ui/iterators/array-of-ranges.rs:6:14: 6:19
    }

    bb17: {
        unreachable;                     // scope 3 at ui/iterators/array-of-ranges.rs:6:14: 6:19
    }

    bb18: {
        drop(_20) -> bb19;               // scope 0 at ui/iterators/array-of-ranges.rs:6:21: 6:22
    }

    bb19: {
        _27 = const RangeTo::<i32> {{ end: 1_i32 }}; // scope 0 at ui/iterators/array-of-ranges.rs:7:15: 7:18
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:7:15: 7:18
                                         // + literal: Const { ty: RangeTo<i32>, val: Value(Scalar(0x00000001)) }
        _26 = [move _27];                // scope 0 at ui/iterators/array-of-ranges.rs:7:14: 7:19
        _25 = <[RangeTo<i32>; 1] as IntoIterator>::into_iter(move _26) -> bb20; // scope 0 at ui/iterators/array-of-ranges.rs:7:14: 7:19
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:7:14: 7:19
                                         // + literal: Const { ty: fn([RangeTo<i32>; 1]) -> <[RangeTo<i32>; 1] as IntoIterator>::IntoIter {<[RangeTo<i32>; 1] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb20: {
        _28 = move _25;                  // scope 0 at ui/iterators/array-of-ranges.rs:7:14: 7:19
        goto -> bb21;                    // scope 4 at ui/iterators/array-of-ranges.rs:7:5: 7:22
    }

    bb21: {
        _31 = &mut _28;                  // scope 4 at ui/iterators/array-of-ranges.rs:7:14: 7:19
        _30 = &mut (*_31);               // scope 4 at ui/iterators/array-of-ranges.rs:7:14: 7:19
        _29 = <std::array::IntoIter<RangeTo<i32>, 1> as Iterator>::next(move _30) -> [return: bb22, unwind: bb62]; // scope 4 at ui/iterators/array-of-ranges.rs:7:14: 7:19
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:7:14: 7:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::array::IntoIter<RangeTo<i32>, 1>) -> Option<<std::array::IntoIter<RangeTo<i32>, 1> as Iterator>::Item> {<std::array::IntoIter<RangeTo<i32>, 1> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb22: {
        _32 = discriminant(_29);         // scope 4 at ui/iterators/array-of-ranges.rs:7:14: 7:19
        switchInt(move _32) -> [0: bb24, 1: bb21, otherwise: bb23]; // scope 4 at ui/iterators/array-of-ranges.rs:7:14: 7:19
    }

    bb23: {
        unreachable;                     // scope 4 at ui/iterators/array-of-ranges.rs:7:14: 7:19
    }

    bb24: {
        drop(_28) -> bb25;               // scope 0 at ui/iterators/array-of-ranges.rs:7:21: 7:22
    }

    bb25: {
        _35 = const RangeToInclusive::<i32> {{ end: 1_i32 }}; // scope 0 at ui/iterators/array-of-ranges.rs:8:15: 8:19
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:8:15: 8:19
                                         // + literal: Const { ty: RangeToInclusive<i32>, val: Value(Scalar(0x00000001)) }
        _34 = [move _35];                // scope 0 at ui/iterators/array-of-ranges.rs:8:14: 8:20
        _33 = <[RangeToInclusive<i32>; 1] as IntoIterator>::into_iter(move _34) -> bb26; // scope 0 at ui/iterators/array-of-ranges.rs:8:14: 8:20
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:8:14: 8:20
                                         // + literal: Const { ty: fn([RangeToInclusive<i32>; 1]) -> <[RangeToInclusive<i32>; 1] as IntoIterator>::IntoIter {<[RangeToInclusive<i32>; 1] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb26: {
        _36 = move _33;                  // scope 0 at ui/iterators/array-of-ranges.rs:8:14: 8:20
        goto -> bb27;                    // scope 5 at ui/iterators/array-of-ranges.rs:8:5: 8:23
    }

    bb27: {
        _39 = &mut _36;                  // scope 5 at ui/iterators/array-of-ranges.rs:8:14: 8:20
        _38 = &mut (*_39);               // scope 5 at ui/iterators/array-of-ranges.rs:8:14: 8:20
        _37 = <std::array::IntoIter<RangeToInclusive<i32>, 1> as Iterator>::next(move _38) -> [return: bb28, unwind: bb61]; // scope 5 at ui/iterators/array-of-ranges.rs:8:14: 8:20
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:8:14: 8:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::array::IntoIter<RangeToInclusive<i32>, 1>) -> Option<<std::array::IntoIter<RangeToInclusive<i32>, 1> as Iterator>::Item> {<std::array::IntoIter<RangeToInclusive<i32>, 1> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb28: {
        _40 = discriminant(_37);         // scope 5 at ui/iterators/array-of-ranges.rs:8:14: 8:20
        switchInt(move _40) -> [0: bb30, 1: bb27, otherwise: bb29]; // scope 5 at ui/iterators/array-of-ranges.rs:8:14: 8:20
    }

    bb29: {
        unreachable;                     // scope 5 at ui/iterators/array-of-ranges.rs:8:14: 8:20
    }

    bb30: {
        drop(_36) -> bb31;               // scope 0 at ui/iterators/array-of-ranges.rs:8:22: 8:23
    }

    bb31: {
        _41 = const 0_i32;               // scope 0 at ui/iterators/array-of-ranges.rs:9:17: 9:18
        _42 = const 0_i32;               // scope 6 at ui/iterators/array-of-ranges.rs:10:15: 10:16
        _46 = const 0_i32;               // scope 7 at ui/iterators/array-of-ranges.rs:11:15: 11:20
        _47 = const 0_i32;               // scope 7 at ui/iterators/array-of-ranges.rs:11:22: 11:25
        _45 = std::ops::Range::<i32> { start: move _46, end: move _47 }; // scope 7 at ui/iterators/array-of-ranges.rs:11:15: 11:25
        _44 = [move _45];                // scope 7 at ui/iterators/array-of-ranges.rs:11:14: 11:26
        _43 = <[std::ops::Range<i32>; 1] as IntoIterator>::into_iter(move _44) -> bb32; // scope 7 at ui/iterators/array-of-ranges.rs:11:14: 11:26
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:11:14: 11:26
                                         // + literal: Const { ty: fn([std::ops::Range<i32>; 1]) -> <[std::ops::Range<i32>; 1] as IntoIterator>::IntoIter {<[std::ops::Range<i32>; 1] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb32: {
        _48 = move _43;                  // scope 7 at ui/iterators/array-of-ranges.rs:11:14: 11:26
        goto -> bb33;                    // scope 8 at ui/iterators/array-of-ranges.rs:11:5: 11:29
    }

    bb33: {
        _51 = &mut _48;                  // scope 8 at ui/iterators/array-of-ranges.rs:11:14: 11:26
        _50 = &mut (*_51);               // scope 8 at ui/iterators/array-of-ranges.rs:11:14: 11:26
        _49 = <std::array::IntoIter<std::ops::Range<i32>, 1> as Iterator>::next(move _50) -> [return: bb34, unwind: bb60]; // scope 8 at ui/iterators/array-of-ranges.rs:11:14: 11:26
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:11:14: 11:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::array::IntoIter<std::ops::Range<i32>, 1>) -> Option<<std::array::IntoIter<std::ops::Range<i32>, 1> as Iterator>::Item> {<std::array::IntoIter<std::ops::Range<i32>, 1> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb34: {
        _52 = discriminant(_49);         // scope 8 at ui/iterators/array-of-ranges.rs:11:14: 11:26
        switchInt(move _52) -> [0: bb36, 1: bb33, otherwise: bb35]; // scope 8 at ui/iterators/array-of-ranges.rs:11:14: 11:26
    }

    bb35: {
        unreachable;                     // scope 8 at ui/iterators/array-of-ranges.rs:11:14: 11:26
    }

    bb36: {
        drop(_48) -> bb37;               // scope 7 at ui/iterators/array-of-ranges.rs:11:28: 11:29
    }

    bb37: {
        _55 = _41;                       // scope 7 at ui/iterators/array-of-ranges.rs:12:27: 12:32
        _56 = _42;                       // scope 7 at ui/iterators/array-of-ranges.rs:12:34: 12:37
        _54 = std::ops::Range::<i32> { start: move _55, end: move _56 }; // scope 7 at ui/iterators/array-of-ranges.rs:12:27: 12:37
        _53 = [move _54];                // scope 7 at ui/iterators/array-of-ranges.rs:12:26: 12:38
        _58 = move _53;                  // scope 9 at ui/iterators/array-of-ranges.rs:13:14: 13:28
        _57 = <[std::ops::Range<i32>; 1] as IntoIterator>::into_iter(move _58) -> bb38; // scope 9 at ui/iterators/array-of-ranges.rs:13:14: 13:28
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:13:14: 13:28
                                         // + literal: Const { ty: fn([std::ops::Range<i32>; 1]) -> <[std::ops::Range<i32>; 1] as IntoIterator>::IntoIter {<[std::ops::Range<i32>; 1] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb38: {
        _59 = move _57;                  // scope 9 at ui/iterators/array-of-ranges.rs:13:14: 13:28
        goto -> bb39;                    // scope 10 at ui/iterators/array-of-ranges.rs:13:5: 13:31
    }

    bb39: {
        _62 = &mut _59;                  // scope 10 at ui/iterators/array-of-ranges.rs:13:14: 13:28
        _61 = &mut (*_62);               // scope 10 at ui/iterators/array-of-ranges.rs:13:14: 13:28
        _60 = <std::array::IntoIter<std::ops::Range<i32>, 1> as Iterator>::next(move _61) -> [return: bb40, unwind: bb59]; // scope 10 at ui/iterators/array-of-ranges.rs:13:14: 13:28
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:13:14: 13:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::array::IntoIter<std::ops::Range<i32>, 1>) -> Option<<std::array::IntoIter<std::ops::Range<i32>, 1> as Iterator>::Item> {<std::array::IntoIter<std::ops::Range<i32>, 1> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb40: {
        _63 = discriminant(_60);         // scope 10 at ui/iterators/array-of-ranges.rs:13:14: 13:28
        switchInt(move _63) -> [0: bb42, 1: bb39, otherwise: bb41]; // scope 10 at ui/iterators/array-of-ranges.rs:13:14: 13:28
    }

    bb41: {
        unreachable;                     // scope 10 at ui/iterators/array-of-ranges.rs:13:14: 13:28
    }

    bb42: {
        drop(_59) -> bb43;               // scope 9 at ui/iterators/array-of-ranges.rs:13:30: 13:31
    }

    bb43: {
        _66 = std::ops::Range::<i32> { start: const 0_i32, end: const 1_i32 }; // scope 9 at ui/iterators/array-of-ranges.rs:14:15: 14:19
        _67 = std::ops::Range::<i32> { start: const 2_i32, end: const 3_i32 }; // scope 9 at ui/iterators/array-of-ranges.rs:14:21: 14:25
        _65 = [move _66, move _67];      // scope 9 at ui/iterators/array-of-ranges.rs:14:14: 14:26
        _64 = <[std::ops::Range<i32>; 2] as IntoIterator>::into_iter(move _65) -> bb44; // scope 9 at ui/iterators/array-of-ranges.rs:14:14: 14:26
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:14:14: 14:26
                                         // + literal: Const { ty: fn([std::ops::Range<i32>; 2]) -> <[std::ops::Range<i32>; 2] as IntoIterator>::IntoIter {<[std::ops::Range<i32>; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb44: {
        _68 = move _64;                  // scope 9 at ui/iterators/array-of-ranges.rs:14:14: 14:26
        goto -> bb45;                    // scope 11 at ui/iterators/array-of-ranges.rs:14:5: 14:29
    }

    bb45: {
        _71 = &mut _68;                  // scope 11 at ui/iterators/array-of-ranges.rs:14:14: 14:26
        _70 = &mut (*_71);               // scope 11 at ui/iterators/array-of-ranges.rs:14:14: 14:26
        _69 = <std::array::IntoIter<std::ops::Range<i32>, 2> as Iterator>::next(move _70) -> [return: bb46, unwind: bb58]; // scope 11 at ui/iterators/array-of-ranges.rs:14:14: 14:26
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:14:14: 14:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::array::IntoIter<std::ops::Range<i32>, 2>) -> Option<<std::array::IntoIter<std::ops::Range<i32>, 2> as Iterator>::Item> {<std::array::IntoIter<std::ops::Range<i32>, 2> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb46: {
        _72 = discriminant(_69);         // scope 11 at ui/iterators/array-of-ranges.rs:14:14: 14:26
        switchInt(move _72) -> [0: bb48, 1: bb45, otherwise: bb47]; // scope 11 at ui/iterators/array-of-ranges.rs:14:14: 14:26
    }

    bb47: {
        unreachable;                     // scope 11 at ui/iterators/array-of-ranges.rs:14:14: 14:26
    }

    bb48: {
        drop(_68) -> bb49;               // scope 9 at ui/iterators/array-of-ranges.rs:14:28: 14:29
    }

    bb49: {
        _75 = RangeInclusive::<i32>::new(const 0_i32, const 1_i32) -> bb50; // scope 9 at ui/iterators/array-of-ranges.rs:15:15: 15:20
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:15:15: 15:20
                                         // + literal: Const { ty: fn(i32, i32) -> RangeInclusive<i32> {RangeInclusive::<i32>::new}, val: Value(<ZST>) }
    }

    bb50: {
        _74 = [move _75];                // scope 9 at ui/iterators/array-of-ranges.rs:15:14: 15:21
        _73 = <[RangeInclusive<i32>; 1] as IntoIterator>::into_iter(move _74) -> bb51; // scope 9 at ui/iterators/array-of-ranges.rs:15:14: 15:21
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:15:14: 15:21
                                         // + literal: Const { ty: fn([RangeInclusive<i32>; 1]) -> <[RangeInclusive<i32>; 1] as IntoIterator>::IntoIter {<[RangeInclusive<i32>; 1] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb51: {
        _76 = move _73;                  // scope 9 at ui/iterators/array-of-ranges.rs:15:14: 15:21
        goto -> bb52;                    // scope 12 at ui/iterators/array-of-ranges.rs:15:5: 15:24
    }

    bb52: {
        _79 = &mut _76;                  // scope 12 at ui/iterators/array-of-ranges.rs:15:14: 15:21
        _78 = &mut (*_79);               // scope 12 at ui/iterators/array-of-ranges.rs:15:14: 15:21
        _77 = <std::array::IntoIter<RangeInclusive<i32>, 1> as Iterator>::next(move _78) -> [return: bb53, unwind: bb57]; // scope 12 at ui/iterators/array-of-ranges.rs:15:14: 15:21
                                         // mir::Constant
                                         // + span: ui/iterators/array-of-ranges.rs:15:14: 15:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::array::IntoIter<RangeInclusive<i32>, 1>) -> Option<<std::array::IntoIter<RangeInclusive<i32>, 1> as Iterator>::Item> {<std::array::IntoIter<RangeInclusive<i32>, 1> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb53: {
        _80 = discriminant(_77);         // scope 12 at ui/iterators/array-of-ranges.rs:15:14: 15:21
        switchInt(move _80) -> [0: bb55, 1: bb52, otherwise: bb54]; // scope 12 at ui/iterators/array-of-ranges.rs:15:14: 15:21
    }

    bb54: {
        unreachable;                     // scope 12 at ui/iterators/array-of-ranges.rs:15:14: 15:21
    }

    bb55: {
        drop(_76) -> bb56;               // scope 9 at ui/iterators/array-of-ranges.rs:15:23: 15:24
    }

    bb56: {
        return;                          // scope 0 at ui/iterators/array-of-ranges.rs:16:2: 16:2
    }

    bb57 (cleanup): {
        drop(_76) -> bb66;               // scope 9 at ui/iterators/array-of-ranges.rs:15:23: 15:24
    }

    bb58 (cleanup): {
        drop(_68) -> bb66;               // scope 9 at ui/iterators/array-of-ranges.rs:14:28: 14:29
    }

    bb59 (cleanup): {
        drop(_59) -> bb66;               // scope 9 at ui/iterators/array-of-ranges.rs:13:30: 13:31
    }

    bb60 (cleanup): {
        drop(_48) -> bb66;               // scope 7 at ui/iterators/array-of-ranges.rs:11:28: 11:29
    }

    bb61 (cleanup): {
        drop(_36) -> bb66;               // scope 0 at ui/iterators/array-of-ranges.rs:8:22: 8:23
    }

    bb62 (cleanup): {
        drop(_28) -> bb66;               // scope 0 at ui/iterators/array-of-ranges.rs:7:21: 7:22
    }

    bb63 (cleanup): {
        drop(_20) -> bb66;               // scope 0 at ui/iterators/array-of-ranges.rs:6:21: 6:22
    }

    bb64 (cleanup): {
        drop(_12) -> bb66;               // scope 0 at ui/iterators/array-of-ranges.rs:5:23: 5:24
    }

    bb65 (cleanup): {
        drop(_4) -> bb66;                // scope 0 at ui/iterators/array-of-ranges.rs:4:22: 4:23
    }

    bb66 (cleanup): {
        resume;                          // scope 0 at ui/iterators/array-of-ranges.rs:3:1: 16:2
    }
}
