// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let mut _4: &mut std::ops::Range<usize>;
    let mut _5: &mut std::ops::Range<usize>;
    let mut _6: &mut std::ops::Range<usize>;
    let mut _7: std::ops::Range<usize>;
    let _8: &usize;
    let _9: &usize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&usize, &usize);
    let mut _18: &usize;
    let _19: usize;
    let mut _20: &mut std::ops::RangeInclusive<usize>;
    let mut _21: &mut std::ops::RangeInclusive<usize>;
    let mut _22: &mut std::ops::RangeInclusive<usize>;
    let mut _23: std::ops::RangeInclusive<usize>;
    let _24: &usize;
    let _25: &usize;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: usize;
    let mut _29: usize;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: &usize;
    let mut _34: &usize;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }
    scope 3 {
        debug left_val => _24;
        debug right_val => _25;
        let _30: core::panicking::AssertKind;
        scope 4 {
            debug kind => _30;
        }
    }

    bb0: {
        _7 = std::ops::Range::<usize> { start: const 0_usize, end: const _ };
        _6 = &mut _7;
        _5 = <std::ops::Range<usize> as Iterator>::by_ref(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = _5;
        _3 = <&mut std::ops::Range<usize> as Iterator>::count(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = &_3;
        _34 = const _;
        _1 = (move _2, _34);
        _8 = (_1.0: &usize);
        _9 = (_1.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb4: {
        _23 = RangeInclusive::<usize>::new(const 0_usize, const _) -> [return: bb5, unwind continue];
    }

    bb5: {
        _22 = &mut _23;
        _21 = <RangeInclusive<usize> as Iterator>::by_ref(move _22) -> [return: bb6, unwind continue];
    }

    bb6: {
        _20 = _21;
        _19 = <&mut RangeInclusive<usize> as Iterator>::count(move _20) -> [return: bb7, unwind continue];
    }

    bb7: {
        _18 = &_19;
        _33 = const _;
        _17 = (move _18, _33);
        _24 = (_17.0: &usize);
        _25 = (_17.1: &usize);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<usize, usize>(move _30, _24, _25, move _32) -> unwind continue;
    }

    bb9: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
