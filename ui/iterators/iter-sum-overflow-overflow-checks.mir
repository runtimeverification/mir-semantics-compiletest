// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:7:11: 7:11
    let _1: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:8:9: 8:10
    let mut _2: [closure@ui/iterators/iter-sum-overflow-overflow-checks.rs:8:33: 8:35]; // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:8:33: 10:6
    let mut _3: bool;                    // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:11:5: 11:24
    let mut _4: bool;                    // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:11:13: 11:23
    let mut _5: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:11:13: 11:23
    let mut _6: !;                       // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:11:5: 11:24
    let mut _8: [closure@ui/iterators/iter-sum-overflow-overflow-checks.rs:13:33: 13:35]; // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:13:33: 15:6
    let mut _9: bool;                    // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:16:5: 16:24
    let mut _10: bool;                   // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:16:13: 16:23
    let mut _11: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:16:13: 16:23
    let mut _12: !;                      // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:16:5: 16:24
    let mut _14: [closure@ui/iterators/iter-sum-overflow-overflow-checks.rs:18:33: 18:35]; // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:18:33: 20:6
    let mut _15: bool;                   // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:21:5: 21:24
    let mut _16: bool;                   // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:21:13: 21:23
    let mut _17: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:21:13: 21:23
    let mut _18: !;                      // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:21:5: 21:24
    let mut _20: [closure@ui/iterators/iter-sum-overflow-overflow-checks.rs:23:33: 23:35]; // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:23:33: 25:6
    let mut _21: bool;                   // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:26:5: 26:24
    let mut _22: bool;                   // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:26:13: 26:23
    let mut _23: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:26:13: 26:23
    let mut _24: !;                      // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:26:5: 26:24
    scope 1 {
        debug r => _1;                   // in scope 1 at ui/iterators/iter-sum-overflow-overflow-checks.rs:8:9: 8:10
        let _7: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 1 at ui/iterators/iter-sum-overflow-overflow-checks.rs:13:9: 13:10
        scope 2 {
            debug r => _7;               // in scope 2 at ui/iterators/iter-sum-overflow-overflow-checks.rs:13:9: 13:10
            let _13: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 2 at ui/iterators/iter-sum-overflow-overflow-checks.rs:18:9: 18:10
            scope 3 {
                debug r => _13;          // in scope 3 at ui/iterators/iter-sum-overflow-overflow-checks.rs:18:9: 18:10
                let _19: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 3 at ui/iterators/iter-sum-overflow-overflow-checks.rs:23:9: 23:10
                scope 4 {
                    debug r => _19;      // in scope 4 at ui/iterators/iter-sum-overflow-overflow-checks.rs:23:9: 23:10
                }
            }
        }
    }

    bb0: {
        _1 = catch_unwind::<[closure@ui/iterators/iter-sum-overflow-overflow-checks.rs:8:33: 8:35], ()>(move _2) -> bb1; // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:8:13: 10:7
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:8:13: 8:32
                                         // + literal: Const { ty: fn([closure@ui/iterators/iter-sum-overflow-overflow-checks.rs:8:33: 8:35]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/iterators/iter-sum-overflow-overflow-checks.rs:8:33: 8:35], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_1;                        // scope 1 at ui/iterators/iter-sum-overflow-overflow-checks.rs:11:13: 11:23
        _4 = Result::<(), Box<dyn Any + Send>>::is_err(move _5) -> [return: bb2, unwind: bb24]; // scope 1 at ui/iterators/iter-sum-overflow-overflow-checks.rs:11:13: 11:23
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:11:15: 11:21
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Not(move _4);               // scope 1 at ui/iterators/iter-sum-overflow-overflow-checks.rs:11:5: 11:24
        switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 1 at ui/iterators/iter-sum-overflow-overflow-checks.rs:11:5: 11:24
    }

    bb3: {
        _6 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb24; // scope 1 at ui/iterators/iter-sum-overflow-overflow-checks.rs:11:5: 11:24
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:11:5: 11:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _7 = catch_unwind::<[closure@ui/iterators/iter-sum-overflow-overflow-checks.rs:13:33: 13:35], ()>(move _8) -> [return: bb5, unwind: bb24]; // scope 1 at ui/iterators/iter-sum-overflow-overflow-checks.rs:13:13: 15:7
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:13:13: 13:32
                                         // + literal: Const { ty: fn([closure@ui/iterators/iter-sum-overflow-overflow-checks.rs:13:33: 13:35]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/iterators/iter-sum-overflow-overflow-checks.rs:13:33: 13:35], ()>}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = &_7;                       // scope 2 at ui/iterators/iter-sum-overflow-overflow-checks.rs:16:13: 16:23
        _10 = Result::<(), Box<dyn Any + Send>>::is_err(move _11) -> [return: bb6, unwind: bb23]; // scope 2 at ui/iterators/iter-sum-overflow-overflow-checks.rs:16:13: 16:23
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:16:15: 16:21
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb6: {
        _9 = Not(move _10);              // scope 2 at ui/iterators/iter-sum-overflow-overflow-checks.rs:16:5: 16:24
        switchInt(move _9) -> [0: bb8, otherwise: bb7]; // scope 2 at ui/iterators/iter-sum-overflow-overflow-checks.rs:16:5: 16:24
    }

    bb7: {
        _12 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb23; // scope 2 at ui/iterators/iter-sum-overflow-overflow-checks.rs:16:5: 16:24
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:16:5: 16:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb8: {
        _13 = catch_unwind::<[closure@ui/iterators/iter-sum-overflow-overflow-checks.rs:18:33: 18:35], ()>(move _14) -> [return: bb9, unwind: bb23]; // scope 2 at ui/iterators/iter-sum-overflow-overflow-checks.rs:18:13: 20:7
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:18:13: 18:32
                                         // + literal: Const { ty: fn([closure@ui/iterators/iter-sum-overflow-overflow-checks.rs:18:33: 18:35]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/iterators/iter-sum-overflow-overflow-checks.rs:18:33: 18:35], ()>}, val: Value(<ZST>) }
    }

    bb9: {
        _17 = &_13;                      // scope 3 at ui/iterators/iter-sum-overflow-overflow-checks.rs:21:13: 21:23
        _16 = Result::<(), Box<dyn Any + Send>>::is_err(move _17) -> [return: bb10, unwind: bb22]; // scope 3 at ui/iterators/iter-sum-overflow-overflow-checks.rs:21:13: 21:23
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:21:15: 21:21
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb10: {
        _15 = Not(move _16);             // scope 3 at ui/iterators/iter-sum-overflow-overflow-checks.rs:21:5: 21:24
        switchInt(move _15) -> [0: bb12, otherwise: bb11]; // scope 3 at ui/iterators/iter-sum-overflow-overflow-checks.rs:21:5: 21:24
    }

    bb11: {
        _18 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb22; // scope 3 at ui/iterators/iter-sum-overflow-overflow-checks.rs:21:5: 21:24
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:21:5: 21:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _19 = catch_unwind::<[closure@ui/iterators/iter-sum-overflow-overflow-checks.rs:23:33: 23:35], ()>(move _20) -> [return: bb13, unwind: bb22]; // scope 3 at ui/iterators/iter-sum-overflow-overflow-checks.rs:23:13: 25:7
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:23:13: 23:32
                                         // + literal: Const { ty: fn([closure@ui/iterators/iter-sum-overflow-overflow-checks.rs:23:33: 23:35]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/iterators/iter-sum-overflow-overflow-checks.rs:23:33: 23:35], ()>}, val: Value(<ZST>) }
    }

    bb13: {
        _23 = &_19;                      // scope 4 at ui/iterators/iter-sum-overflow-overflow-checks.rs:26:13: 26:23
        _22 = Result::<(), Box<dyn Any + Send>>::is_err(move _23) -> [return: bb14, unwind: bb21]; // scope 4 at ui/iterators/iter-sum-overflow-overflow-checks.rs:26:13: 26:23
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:26:15: 26:21
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb14: {
        _21 = Not(move _22);             // scope 4 at ui/iterators/iter-sum-overflow-overflow-checks.rs:26:5: 26:24
        switchInt(move _21) -> [0: bb16, otherwise: bb15]; // scope 4 at ui/iterators/iter-sum-overflow-overflow-checks.rs:26:5: 26:24
    }

    bb15: {
        _24 = core::panicking::panic(const "assertion failed: r.is_err()") -> bb21; // scope 4 at ui/iterators/iter-sum-overflow-overflow-checks.rs:26:5: 26:24
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:26:5: 26:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb16: {
        drop(_19) -> [return: bb17, unwind: bb22]; // scope 3 at ui/iterators/iter-sum-overflow-overflow-checks.rs:27:1: 27:2
    }

    bb17: {
        drop(_13) -> [return: bb18, unwind: bb23]; // scope 2 at ui/iterators/iter-sum-overflow-overflow-checks.rs:27:1: 27:2
    }

    bb18: {
        drop(_7) -> [return: bb19, unwind: bb24]; // scope 1 at ui/iterators/iter-sum-overflow-overflow-checks.rs:27:1: 27:2
    }

    bb19: {
        drop(_1) -> bb20;                // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:27:1: 27:2
    }

    bb20: {
        return;                          // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:27:2: 27:2
    }

    bb21 (cleanup): {
        drop(_19) -> bb22;               // scope 3 at ui/iterators/iter-sum-overflow-overflow-checks.rs:27:1: 27:2
    }

    bb22 (cleanup): {
        drop(_13) -> bb23;               // scope 2 at ui/iterators/iter-sum-overflow-overflow-checks.rs:27:1: 27:2
    }

    bb23 (cleanup): {
        drop(_7) -> bb24;                // scope 1 at ui/iterators/iter-sum-overflow-overflow-checks.rs:27:1: 27:2
    }

    bb24 (cleanup): {
        drop(_1) -> bb25;                // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:27:1: 27:2
    }

    bb25 (cleanup): {
        resume;                          // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:7:1: 27:2
    }
}

fn main::{closure#0}(_1: [closure@ui/iterators/iter-sum-overflow-overflow-checks.rs:8:33: 8:35]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:8:36: 8:36
    let _2: i32;                         // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:9:9: 9:42
    let mut _3: std::slice::Iter<'_, i32>; // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:9:9: 9:29
    let mut _4: &[i32];                  // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:9:9: 9:29
    let mut _5: &[i32; 2];               // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:9:9: 9:29
    let mut _6: &[i32; 2];               // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:9:9: 9:29

    bb0: {
        _6 = const _;                    // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:9:9: 9:29
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:9:9: 9:29
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _5 = _6;                         // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:9:9: 9:29
        _4 = move _5 as &[i32] (Pointer(Unsize)); // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:9:9: 9:29
        _3 = core::slice::<impl [i32]>::iter(move _4) -> bb1; // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:9:9: 9:29
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:9:23: 9:27
                                         // + literal: Const { ty: for<'a> fn(&'a [i32]) -> std::slice::Iter<'a, i32> {core::slice::<impl [i32]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <std::slice::Iter<'_, i32> as Iterator>::sum::<i32>(move _3) -> bb2; // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:9:9: 9:42
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:9:30: 9:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, i32>) -> i32 {<std::slice::Iter<'_, i32> as Iterator>::sum::<i32>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:10:6: 10:6
    }
}

promoted[0] in main::{closure#0}: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:9:9: 9:29
    let mut _1: [i32; 2];                // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:9:9: 9:22

    bb0: {
        _1 = [const 1_i32, const _];     // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:9:9: 9:22
        _0 = &_1;                        // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:9:9: 9:29
        return;                          // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:9:9: 9:29
    }
}

fn main::{closure#1}(_1: [closure@ui/iterators/iter-sum-overflow-overflow-checks.rs:13:33: 13:35]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:13:36: 13:36
    let _2: i32;                         // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:14:9: 14:46
    let mut _3: std::slice::Iter<'_, i32>; // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:14:9: 14:29
    let mut _4: &[i32];                  // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:14:9: 14:29
    let mut _5: &[i32; 2];               // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:14:9: 14:29
    let mut _6: &[i32; 2];               // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:14:9: 14:29

    bb0: {
        _6 = const _;                    // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:14:9: 14:29
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:14:9: 14:29
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(main::{closure#1}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _5 = _6;                         // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:14:9: 14:29
        _4 = move _5 as &[i32] (Pointer(Unsize)); // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:14:9: 14:29
        _3 = core::slice::<impl [i32]>::iter(move _4) -> bb1; // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:14:9: 14:29
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:14:23: 14:27
                                         // + literal: Const { ty: for<'a> fn(&'a [i32]) -> std::slice::Iter<'a, i32> {core::slice::<impl [i32]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <std::slice::Iter<'_, i32> as Iterator>::product::<i32>(move _3) -> bb2; // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:14:9: 14:46
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:14:30: 14:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, i32>) -> i32 {<std::slice::Iter<'_, i32> as Iterator>::product::<i32>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:15:6: 15:6
    }
}

promoted[0] in main::{closure#1}: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:14:9: 14:29
    let mut _1: [i32; 2];                // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:14:9: 14:22

    bb0: {
        _1 = [const 2_i32, const _];     // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:14:9: 14:22
        _0 = &_1;                        // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:14:9: 14:29
        return;                          // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:14:9: 14:29
    }
}

fn main::{closure#2}(_1: [closure@ui/iterators/iter-sum-overflow-overflow-checks.rs:18:33: 18:35]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:18:36: 18:36
    let _2: i32;                         // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:19:9: 19:51
    let mut _3: std::iter::Cloned<std::slice::Iter<'_, i32>>; // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:19:9: 19:38
    let mut _4: std::slice::Iter<'_, i32>; // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:19:9: 19:29
    let mut _5: &[i32];                  // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:19:9: 19:29
    let mut _6: &[i32; 2];               // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:19:9: 19:29
    let mut _7: &[i32; 2];               // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:19:9: 19:29

    bb0: {
        _7 = const _;                    // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:19:9: 19:29
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:19:9: 19:29
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(main::{closure#2}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _6 = _7;                         // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:19:9: 19:29
        _5 = move _6 as &[i32] (Pointer(Unsize)); // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:19:9: 19:29
        _4 = core::slice::<impl [i32]>::iter(move _5) -> bb1; // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:19:9: 19:29
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:19:23: 19:27
                                         // + literal: Const { ty: for<'a> fn(&'a [i32]) -> std::slice::Iter<'a, i32> {core::slice::<impl [i32]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <std::slice::Iter<'_, i32> as Iterator>::cloned::<'_, i32>(move _4) -> bb2; // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:19:9: 19:38
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:19:30: 19:36
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, i32>) -> Cloned<std::slice::Iter<'_, i32>> {<std::slice::Iter<'_, i32> as Iterator>::cloned::<'_, i32>}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = <Cloned<std::slice::Iter<'_, i32>> as Iterator>::sum::<i32>(move _3) -> bb3; // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:19:9: 19:51
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:19:39: 19:42
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Cloned<std::slice::Iter<'_, i32>>) -> i32 {<Cloned<std::slice::Iter<'_, i32>> as Iterator>::sum::<i32>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:20:6: 20:6
    }
}

promoted[0] in main::{closure#2}: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:19:9: 19:29
    let mut _1: [i32; 2];                // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:19:9: 19:22

    bb0: {
        _1 = [const 1_i32, const _];     // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:19:9: 19:22
        _0 = &_1;                        // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:19:9: 19:29
        return;                          // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:19:9: 19:29
    }
}

fn main::{closure#3}(_1: [closure@ui/iterators/iter-sum-overflow-overflow-checks.rs:23:33: 23:35]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:23:36: 23:36
    let _2: i32;                         // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:24:9: 24:55
    let mut _3: std::iter::Cloned<std::slice::Iter<'_, i32>>; // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:24:9: 24:38
    let mut _4: std::slice::Iter<'_, i32>; // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:24:9: 24:29
    let mut _5: &[i32];                  // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:24:9: 24:29
    let mut _6: &[i32; 2];               // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:24:9: 24:29
    let mut _7: &[i32; 2];               // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:24:9: 24:29

    bb0: {
        _7 = const _;                    // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:24:9: 24:29
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:24:9: 24:29
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(main::{closure#3}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _6 = _7;                         // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:24:9: 24:29
        _5 = move _6 as &[i32] (Pointer(Unsize)); // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:24:9: 24:29
        _4 = core::slice::<impl [i32]>::iter(move _5) -> bb1; // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:24:9: 24:29
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:24:23: 24:27
                                         // + literal: Const { ty: for<'a> fn(&'a [i32]) -> std::slice::Iter<'a, i32> {core::slice::<impl [i32]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <std::slice::Iter<'_, i32> as Iterator>::cloned::<'_, i32>(move _4) -> bb2; // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:24:9: 24:38
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:24:30: 24:36
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, i32>) -> Cloned<std::slice::Iter<'_, i32>> {<std::slice::Iter<'_, i32> as Iterator>::cloned::<'_, i32>}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = <Cloned<std::slice::Iter<'_, i32>> as Iterator>::product::<i32>(move _3) -> bb3; // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:24:9: 24:55
                                         // mir::Constant
                                         // + span: ui/iterators/iter-sum-overflow-overflow-checks.rs:24:39: 24:46
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Cloned<std::slice::Iter<'_, i32>>) -> i32 {<Cloned<std::slice::Iter<'_, i32>> as Iterator>::product::<i32>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:25:6: 25:6
    }
}

promoted[0] in main::{closure#3}: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:24:9: 24:29
    let mut _1: [i32; 2];                // in scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:24:9: 24:22

    bb0: {
        _1 = [const 2_i32, const _];     // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:24:9: 24:22
        _0 = &_1;                        // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:24:9: 24:29
        return;                          // scope 0 at ui/iterators/iter-sum-overflow-overflow-checks.rs:24:9: 24:29
    }
}
