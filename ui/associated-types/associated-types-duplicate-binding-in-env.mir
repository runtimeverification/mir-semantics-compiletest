// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env.rs:14:16: 14:18

    bb0: {
        _0 = <T as Foo>::get() -> bb1;   // scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env.rs:17:5: 17:22
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-duplicate-binding-in-env.rs:17:5: 17:20
                                         // + literal: Const { ty: fn() -> <T as Foo>::B {<T as Foo>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env.rs:18:2: 18:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env.rs:20:11: 20:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env.rs:21:2: 21:2
    }
}
