// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_bar(_1: &B) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-24159.rs:16:34: 16:34

    bb0: {
        return;                          // scope 0 at ui/associated-types/issue-24159.rs:16:36: 16:36
    }
}

fn test(_1: &F) -> () {
    debug f => _1;                       // in scope 0 at ui/associated-types/issue-24159.rs:18:27: 18:28
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-24159.rs:18:34: 18:34
    let _2: ();                          // in scope 0 at ui/associated-types/issue-24159.rs:19:5: 19:24
    let mut _3: &<F as Foo>::B;          // in scope 0 at ui/associated-types/issue-24159.rs:19:14: 19:23
    let _4: &<F as Foo>::B;              // in scope 0 at ui/associated-types/issue-24159.rs:19:14: 19:23
    let mut _5: &F;                      // in scope 0 at ui/associated-types/issue-24159.rs:19:14: 19:23

    bb0: {
        _5 = _1;                         // scope 0 at ui/associated-types/issue-24159.rs:19:14: 19:23
        _4 = <F as Foo>::get_b(move _5) -> bb1; // scope 0 at ui/associated-types/issue-24159.rs:19:14: 19:23
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-24159.rs:19:16: 19:21
                                         // + literal: Const { ty: for<'a> fn(&'a F) -> &'a <F as Foo>::B {<F as Foo>::get_b}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at ui/associated-types/issue-24159.rs:19:14: 19:23
        _2 = test_bar::<A, <F as Foo>::B>(move _3) -> bb2; // scope 0 at ui/associated-types/issue-24159.rs:19:5: 19:24
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-24159.rs:19:5: 19:13
                                         // + literal: Const { ty: for<'a> fn(&'a <F as Foo>::B) {test_bar::<A, <F as Foo>::B>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/associated-types/issue-24159.rs:20:2: 20:2
    }
}

fn test1() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-24159.rs:28:18: 28:18

    bb0: {
        return;                          // scope 0 at ui/associated-types/issue-24159.rs:28:53: 28:53
    }
}

fn test2() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-24159.rs:35:29: 35:29

    bb0: {
        return;                          // scope 0 at ui/associated-types/issue-24159.rs:35:31: 35:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-24159.rs:37:11: 37:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/issue-24159.rs:37:13: 37:13
    }
}
