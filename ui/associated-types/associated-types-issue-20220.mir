// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/associated-types-issue-20220.rs:14:1: 14:33>::into_iter_x(_1: Vec<T>) -> std::vec::IntoIter<T> {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-issue-20220.rs:18:20: 18:24
    let mut _0: std::vec::IntoIter<T>;   // return place in scope 0 at ui/associated-types/associated-types-issue-20220.rs:18:29: 18:45
    let mut _2: std::vec::Vec<T>;        // in scope 0 at ui/associated-types/associated-types-issue-20220.rs:19:9: 19:13

    bb0: {
        _2 = move _1;                    // scope 0 at ui/associated-types/associated-types-issue-20220.rs:19:9: 19:13
        _0 = <Vec<T> as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at ui/associated-types/associated-types-issue-20220.rs:19:9: 19:25
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-issue-20220.rs:19:14: 19:23
                                         // + literal: Const { ty: fn(Vec<T>) -> <Vec<T> as IntoIterator>::IntoIter {<Vec<T> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/associated-types-issue-20220.rs:20:6: 20:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-issue-20220.rs:23:11: 23:11
    let _1: std::vec::Vec<usize>;        // in scope 0 at ui/associated-types/associated-types-issue-20220.rs:24:9: 24:12
    let mut _2: std::boxed::Box<[usize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[usize; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[usize; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::iter::Enumerate<std::vec::IntoIter<usize>>; // in scope 0 at ui/associated-types/associated-types-issue-20220.rs:25:19: 25:46
    let mut _9: std::iter::Enumerate<std::vec::IntoIter<usize>>; // in scope 0 at ui/associated-types/associated-types-issue-20220.rs:25:19: 25:46
    let mut _10: std::vec::IntoIter<usize>; // in scope 0 at ui/associated-types/associated-types-issue-20220.rs:25:19: 25:34
    let mut _11: std::vec::Vec<usize>;   // in scope 0 at ui/associated-types/associated-types-issue-20220.rs:25:19: 25:22
    let mut _13: std::option::Option<(usize, usize)>; // in scope 0 at ui/associated-types/associated-types-issue-20220.rs:25:19: 25:46
    let mut _14: &mut std::iter::Enumerate<std::vec::IntoIter<usize>>; // in scope 0 at ui/associated-types/associated-types-issue-20220.rs:25:19: 25:46
    let mut _15: &mut std::iter::Enumerate<std::vec::IntoIter<usize>>; // in scope 0 at ui/associated-types/associated-types-issue-20220.rs:25:19: 25:46
    let mut _16: isize;                  // in scope 0 at ui/associated-types/associated-types-issue-20220.rs:25:5: 27:6
    let mut _19: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _21: usize;                      // in scope 0 at ui/associated-types/associated-types-issue-20220.rs:26:20: 26:23
    let mut _22: usize;                  // in scope 0 at ui/associated-types/associated-types-issue-20220.rs:26:20: 26:21
    let mut _23: (usize, bool);          // in scope 0 at ui/associated-types/associated-types-issue-20220.rs:26:20: 26:23
    let mut _24: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _29: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _30: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _32: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _33: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _34: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _35: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _36: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _37: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _39: *const [usize; 3];      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug vec => _1;                 // in scope 1 at ui/associated-types/associated-types-issue-20220.rs:24:9: 24:12
        let mut _12: std::iter::Enumerate<std::vec::IntoIter<usize>>; // in scope 1 at ui/associated-types/associated-types-issue-20220.rs:25:19: 25:46
        scope 3 {
            debug iter => _12;           // in scope 3 at ui/associated-types/associated-types-issue-20220.rs:25:19: 25:46
            let _17: usize;              // in scope 3 at ui/associated-types/associated-types-issue-20220.rs:25:10: 25:11
            let _18: usize;              // in scope 3 at ui/associated-types/associated-types-issue-20220.rs:25:13: 25:14
            scope 4 {
                debug i => _17;          // in scope 4 at ui/associated-types/associated-types-issue-20220.rs:25:10: 25:11
                debug e => _18;          // in scope 4 at ui/associated-types/associated-types-issue-20220.rs:25:13: 25:14
                let _25: &usize;         // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _26: &usize;         // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                scope 5 {
                    debug left_val => _25; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _26; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _31: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 6 {
                        debug kind => _31; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = const 24_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [usize; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _39 = (((_7.0: std::ptr::Unique<[usize; 3]>).0: std::ptr::NonNull<[usize; 3]>).0: *const [usize; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_39) = [const 1_usize, const 2_usize, const 3_usize]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[usize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[usize]>) -> Vec<usize> {slice::<impl [usize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = move _1;                   // scope 1 at ui/associated-types/associated-types-issue-20220.rs:25:19: 25:22
        _10 = <Vec<usize> as IntoIterator>::into_iter(move _11) -> bb3; // scope 1 at ui/associated-types/associated-types-issue-20220.rs:25:19: 25:34
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-issue-20220.rs:25:23: 25:32
                                         // + literal: Const { ty: fn(Vec<usize>) -> <Vec<usize> as IntoIterator>::IntoIter {<Vec<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = <std::vec::IntoIter<usize> as Iterator>::enumerate(move _10) -> bb4; // scope 1 at ui/associated-types/associated-types-issue-20220.rs:25:19: 25:46
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-issue-20220.rs:25:35: 25:44
                                         // + literal: Const { ty: fn(std::vec::IntoIter<usize>) -> Enumerate<std::vec::IntoIter<usize>> {<std::vec::IntoIter<usize> as Iterator>::enumerate}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = <Enumerate<std::vec::IntoIter<usize>> as IntoIterator>::into_iter(move _9) -> bb5; // scope 1 at ui/associated-types/associated-types-issue-20220.rs:25:19: 25:46
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-issue-20220.rs:25:19: 25:46
                                         // + literal: Const { ty: fn(Enumerate<std::vec::IntoIter<usize>>) -> <Enumerate<std::vec::IntoIter<usize>> as IntoIterator>::IntoIter {<Enumerate<std::vec::IntoIter<usize>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = move _8;                   // scope 1 at ui/associated-types/associated-types-issue-20220.rs:25:19: 25:46
        goto -> bb6;                     // scope 3 at ui/associated-types/associated-types-issue-20220.rs:25:5: 27:6
    }

    bb6: {
        _15 = &mut _12;                  // scope 3 at ui/associated-types/associated-types-issue-20220.rs:25:19: 25:46
        _14 = &mut (*_15);               // scope 3 at ui/associated-types/associated-types-issue-20220.rs:25:19: 25:46
        _13 = <Enumerate<std::vec::IntoIter<usize>> as Iterator>::next(move _14) -> [return: bb7, unwind: bb14]; // scope 3 at ui/associated-types/associated-types-issue-20220.rs:25:19: 25:46
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-issue-20220.rs:25:19: 25:46
                                         // + literal: Const { ty: for<'a> fn(&'a mut Enumerate<std::vec::IntoIter<usize>>) -> Option<<Enumerate<std::vec::IntoIter<usize>> as Iterator>::Item> {<Enumerate<std::vec::IntoIter<usize>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = discriminant(_13);         // scope 3 at ui/associated-types/associated-types-issue-20220.rs:25:19: 25:46
        switchInt(move _16) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 3 at ui/associated-types/associated-types-issue-20220.rs:25:19: 25:46
    }

    bb8: {
        _17 = (((_13 as Some).0: (usize, usize)).0: usize); // scope 3 at ui/associated-types/associated-types-issue-20220.rs:25:10: 25:11
        _18 = (((_13 as Some).0: (usize, usize)).1: usize); // scope 3 at ui/associated-types/associated-types-issue-20220.rs:25:13: 25:14
        _22 = _17;                       // scope 4 at ui/associated-types/associated-types-issue-20220.rs:26:20: 26:21
        _23 = CheckedAdd(_22, const 1_usize); // scope 4 at ui/associated-types/associated-types-issue-20220.rs:26:20: 26:23
        assert(!move (_23.1: bool), "attempt to compute `{} + {}`, which would overflow", move _22, const 1_usize) -> [success: bb11, unwind: bb14]; // scope 4 at ui/associated-types/associated-types-issue-20220.rs:26:20: 26:23
    }

    bb9: {
        unreachable;                     // scope 3 at ui/associated-types/associated-types-issue-20220.rs:25:19: 25:46
    }

    bb10: {
        drop(_12) -> bb13;               // scope 1 at ui/associated-types/associated-types-issue-20220.rs:27:5: 27:6
    }

    bb11: {
        _21 = move (_23.0: usize);       // scope 4 at ui/associated-types/associated-types-issue-20220.rs:26:20: 26:23
        _20 = &_21;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = &_18;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _24);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _25 = (_19.0: &usize);           // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _26 = (_19.1: &usize);           // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _29 = (*_25);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _30 = (*_26);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _28 = Eq(move _29, move _30);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _27 = Not(move _28);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _27) -> [0: bb6, otherwise: bb12]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb12: {
        _31 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = _25;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _35;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _26;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = _37;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _32 = core::panicking::assert_failed::<usize, usize>(move _33, move _34, move _36, move _38) -> bb14; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb13: {
        return;                          // scope 0 at ui/associated-types/associated-types-issue-20220.rs:28:2: 28:2
    }

    bb14 (cleanup): {
        drop(_12) -> bb15;               // scope 1 at ui/associated-types/associated-types-issue-20220.rs:27:5: 27:6
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/associated-types-issue-20220.rs:23:1: 28:2
    }
}
