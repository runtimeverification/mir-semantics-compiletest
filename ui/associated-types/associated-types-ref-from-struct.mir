// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/associated-types-ref-from-struct.rs:17:1: 17:27>::new(_1: T, _2: <T as Test>::V) -> TesterPair<T> {
    debug tester => _1;                  // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:18:12: 18:18
    debug value => _2;                   // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:18:23: 18:28
    let mut _0: TesterPair<T>;           // return place in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:18:39: 18:52
    let mut _3: T;                       // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:19:30: 19:36
    let mut _4: <T as Test>::V;          // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:19:45: 19:50

    bb0: {
        _3 = move _1;                    // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:19:30: 19:36
        _4 = move _2;                    // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:19:45: 19:50
        _0 = TesterPair::<T> { tester: move _3, value: move _4 }; // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:19:9: 19:52
        return;                          // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:20:6: 20:6
    }
}

fn <impl at ui/associated-types/associated-types-ref-from-struct.rs:17:1: 17:27>::test(_1: &TesterPair<T>) -> bool {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:22:13: 22:18
    let mut _0: bool;                    // return place in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:22:23: 22:27
    let mut _2: &T;                      // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:23:9: 23:38
    let mut _3: &<T as Test>::V;         // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:23:26: 23:37
    let _4: &<T as Test>::V;             // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:23:26: 23:37

    bb0: {
        _2 = &((*_1).0: T);              // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:23:9: 23:38
        _4 = &((*_1).1: <T as Test>::V); // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:23:26: 23:37
        _3 = _4;                         // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:23:26: 23:37
        _0 = <T as Test>::test(move _2, move _3) -> bb1; // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:23:9: 23:38
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-ref-from-struct.rs:23:21: 23:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b <T as Test>::V) -> bool {<T as Test>::test}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:24:6: 24:6
    }
}

fn <impl at ui/associated-types/associated-types-ref-from-struct.rs:28:1: 28:20>::test(_1: &EqU32, _2: &u32) -> bool {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:31:13: 31:18
    debug value => _2;                   // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:31:20: 31:25
    let mut _0: bool;                    // return place in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:31:36: 31:40
    let mut _3: u32;                     // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:32:9: 32:15
    let mut _4: u32;                     // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:32:19: 32:25

    bb0: {
        _3 = ((*_1).0: u32);             // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:32:9: 32:15
        _4 = (*_2);                      // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:32:19: 32:25
        _0 = Eq(move _3, move _4);       // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:32:9: 32:25
        return;                          // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:33:6: 33:6
    }
}

fn <impl at ui/associated-types/associated-types-ref-from-struct.rs:37:1: 37:20>::test(_1: &EqI32, _2: &i32) -> bool {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:40:13: 40:18
    debug value => _2;                   // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:40:20: 40:25
    let mut _0: bool;                    // return place in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:40:36: 40:40
    let mut _3: i32;                     // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:41:9: 41:15
    let mut _4: i32;                     // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:41:19: 41:25

    bb0: {
        _3 = ((*_1).0: i32);             // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:41:9: 41:15
        _4 = (*_2);                      // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:41:19: 41:25
        _0 = Eq(move _3, move _4);       // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:41:9: 41:25
        return;                          // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:42:6: 42:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:45:11: 45:11
    let _1: TesterPair<EqU32>;           // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:46:9: 46:15
    let mut _2: EqU32;                   // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:46:34: 46:43
    let _3: bool;                        // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:47:5: 47:18
    let mut _4: &TesterPair<EqU32>;      // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:47:5: 47:18
    let mut _6: EqI32;                   // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:49:34: 49:43
    let _7: bool;                        // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:50:5: 50:18
    let mut _8: &TesterPair<EqI32>;      // in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:50:5: 50:18
    scope 1 {
        debug tester => _1;              // in scope 1 at ui/associated-types/associated-types-ref-from-struct.rs:46:9: 46:15
        let _5: TesterPair<EqI32>;       // in scope 1 at ui/associated-types/associated-types-ref-from-struct.rs:49:9: 49:15
        scope 2 {
            debug tester => _5;          // in scope 2 at ui/associated-types/associated-types-ref-from-struct.rs:49:9: 49:15
        }
    }

    bb0: {
        _2 = const EqU32(22_u32);        // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:46:34: 46:43
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-ref-from-struct.rs:46:34: 46:43
                                         // + literal: Const { ty: EqU32, val: Value(Scalar(0x00000016)) }
        _1 = TesterPair::<EqU32>::new(move _2, const 23_u32) -> bb1; // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:46:18: 46:48
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-ref-from-struct.rs:46:18: 46:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(EqU32, <EqU32 as Test>::V) -> TesterPair<EqU32> {TesterPair::<EqU32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_1;                        // scope 1 at ui/associated-types/associated-types-ref-from-struct.rs:47:5: 47:18
        _3 = TesterPair::<EqU32>::test(move _4) -> bb2; // scope 1 at ui/associated-types/associated-types-ref-from-struct.rs:47:5: 47:18
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-ref-from-struct.rs:47:12: 47:16
                                         // + literal: Const { ty: for<'a> fn(&'a TesterPair<EqU32>) -> bool {TesterPair::<EqU32>::test}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = const EqI32(22_i32);        // scope 1 at ui/associated-types/associated-types-ref-from-struct.rs:49:34: 49:43
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-ref-from-struct.rs:49:34: 49:43
                                         // + literal: Const { ty: EqI32, val: Value(Scalar(0x00000016)) }
        _5 = TesterPair::<EqI32>::new(move _6, const 23_i32) -> bb3; // scope 1 at ui/associated-types/associated-types-ref-from-struct.rs:49:18: 49:48
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-ref-from-struct.rs:49:18: 49:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(EqI32, <EqI32 as Test>::V) -> TesterPair<EqI32> {TesterPair::<EqI32>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = &_5;                        // scope 2 at ui/associated-types/associated-types-ref-from-struct.rs:50:5: 50:18
        _7 = TesterPair::<EqI32>::test(move _8) -> bb4; // scope 2 at ui/associated-types/associated-types-ref-from-struct.rs:50:5: 50:18
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-ref-from-struct.rs:50:12: 50:16
                                         // + literal: Const { ty: for<'a> fn(&'a TesterPair<EqI32>) -> bool {TesterPair::<EqI32>::test}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:51:2: 51:2
    }
}

fn EqU32(_1: u32) -> EqU32 {
    let mut _0: EqU32;                   // return place in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:27:1: 27:13

    bb0: {
        _0 = EqU32(move _1);             // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:27:1: 27:13
        return;                          // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:27:1: 27:13
    }
}

// MIR FOR CTFE
fn EqU32(_1: u32) -> EqU32 {
    let mut _0: EqU32;                   // return place in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:27:1: 27:13

    bb0: {
        _0 = EqU32(move _1);             // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:27:1: 27:13
        return;                          // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:27:1: 27:13
    }
}

fn EqI32(_1: i32) -> EqI32 {
    let mut _0: EqI32;                   // return place in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:36:1: 36:13

    bb0: {
        _0 = EqI32(move _1);             // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:36:1: 36:13
        return;                          // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:36:1: 36:13
    }
}

// MIR FOR CTFE
fn EqI32(_1: i32) -> EqI32 {
    let mut _0: EqI32;                   // return place in scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:36:1: 36:13

    bb0: {
        _0 = EqI32(move _1);             // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:36:1: 36:13
        return;                          // scope 0 at ui/associated-types/associated-types-ref-from-struct.rs:36:1: 36:13
    }
}
