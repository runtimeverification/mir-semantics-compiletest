// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: G) -> isize {
    debug g => _1;                       // in scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:16:11: 16:12
    let mut _0: isize;                   // return place in scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:16:20: 16:25
    let mut _2: &<G as GetToInt>::R;     // in scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:19:19: 19:27
    let _3: &<G as GetToInt>::R;         // in scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:19:19: 19:27
    let _4: <G as GetToInt>::R;          // in scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:19:20: 19:27
    let mut _5: &G;                      // in scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:19:20: 19:27

    bb0: {
        _5 = &_1;                        // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:19:20: 19:27
        _4 = <G as GetToInt>::get(move _5) -> [return: bb1, unwind: bb6]; // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:19:20: 19:27
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-bound-failure_fixed.rs:19:22: 19:25
                                         // + literal: Const { ty: for<'a> fn(&'a G) -> <G as GetToInt>::R {<G as GetToInt>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:19:19: 19:27
        _2 = _3;                         // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:19:19: 19:27
        _0 = <<G as GetToInt>::R as ToInt>::to_int(move _2) -> [return: bb2, unwind: bb5]; // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:19:5: 19:28
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-bound-failure_fixed.rs:19:5: 19:18
                                         // + literal: Const { ty: for<'a> fn(&'a <G as GetToInt>::R) -> isize {<<G as GetToInt>::R as ToInt>::to_int}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_4) -> [return: bb3, unwind: bb6]; // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:20:1: 20:2
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:20:1: 20:2
    }

    bb4: {
        return;                          // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:20:2: 20:2
    }

    bb5 (cleanup): {
        drop(_4) -> bb6;                 // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:20:1: 20:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:20:1: 20:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:16:1: 20:2
    }
}

fn bar(_1: G) -> isize {
    debug g => _1;                       // in scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:22:22: 22:23
    let mut _0: isize;                   // return place in scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:22:31: 22:36
    let mut _2: &<G as GetToInt>::R;     // in scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:25:19: 25:27
    let _3: &<G as GetToInt>::R;         // in scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:25:19: 25:27
    let _4: <G as GetToInt>::R;          // in scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:25:20: 25:27
    let mut _5: &G;                      // in scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:25:20: 25:27

    bb0: {
        _5 = &_1;                        // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:25:20: 25:27
        _4 = <G as GetToInt>::get(move _5) -> [return: bb1, unwind: bb6]; // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:25:20: 25:27
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-bound-failure_fixed.rs:25:22: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a G) -> <G as GetToInt>::R {<G as GetToInt>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:25:19: 25:27
        _2 = _3;                         // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:25:19: 25:27
        _0 = <<G as GetToInt>::R as ToInt>::to_int(move _2) -> [return: bb2, unwind: bb5]; // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:25:5: 25:28
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-bound-failure_fixed.rs:25:5: 25:18
                                         // + literal: Const { ty: for<'a> fn(&'a <G as GetToInt>::R) -> isize {<<G as GetToInt>::R as ToInt>::to_int}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_4) -> [return: bb3, unwind: bb6]; // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:26:1: 26:2
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:26:1: 26:2
    }

    bb4: {
        return;                          // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:26:2: 26:2
    }

    bb5 (cleanup): {
        drop(_4) -> bb6;                 // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:26:1: 26:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:26:1: 26:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:22:1: 26:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:28:15: 28:15

    bb0: {
        return;                          // scope 0 at ui/associated-types/associated-types-bound-failure_fixed.rs:29:2: 29:2
    }
}
