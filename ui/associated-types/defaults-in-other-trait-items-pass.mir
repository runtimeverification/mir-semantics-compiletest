// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<u8>;
    scope 1 {
        debug _container => _1;
        scope 2 {
            debug _item => const 0_u8;
            let _2: std::vec::Vec<u16>;
            scope 3 {
                debug _container => _2;
                scope 4 {
                    debug _item => const 0_u16;
                    let _3: std::string::String;
                    scope 5 {
                        debug _container => _3;
                        scope 6 {
                            debug _item => const 0_u8;
                            let _4: std::vec::Vec<()>;
                            scope 7 {
                                debug _container => _4;
                                scope 8 {
                                    debug _item => const 0_u32;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Vec::<u8>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Vec::<u16>::new() -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _3 = String::new() -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _4 = Vec::<()>::new() -> [return: bb4, unwind: bb9];
    }

    bb4: {
        drop(_4) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        drop(_3) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        drop(_2) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        drop(_1) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        drop(_1) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        resume;
    }
}
