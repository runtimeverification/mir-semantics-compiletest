// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Int::dummy(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:9:14: 9:19
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:9:21: 9:21

    bb0: {
        return;                          // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:9:24: 9:24
    }
}

fn <impl at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:22:1: 22:33>::non_zero(_1: i32) -> bool {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:22:48: 22:52
    let mut _0: bool;                    // return place in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:22:57: 22:61
    let mut _2: i32;                     // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:22:64: 22:68

    bb0: {
        _2 = _1;                         // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:22:64: 22:68
        _0 = Ne(move _2, const 0_i32);   // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:22:64: 22:73
        return;                          // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:22:75: 22:75
    }
}

fn <impl at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:23:1: 23:33>::non_zero(_1: i64) -> bool {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:23:48: 23:52
    let mut _0: bool;                    // return place in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:23:57: 23:61
    let mut _2: i64;                     // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:23:64: 23:68

    bb0: {
        _2 = _1;                         // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:23:64: 23:68
        _0 = Ne(move _2, const 0_i64);   // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:23:64: 23:73
        return;                          // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:23:75: 23:75
    }
}

fn <impl at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:24:1: 24:33>::non_zero(_1: u32) -> bool {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:24:48: 24:52
    let mut _0: bool;                    // return place in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:24:57: 24:61
    let mut _2: u32;                     // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:24:64: 24:68

    bb0: {
        _2 = _1;                         // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:24:64: 24:68
        _0 = Ne(move _2, const 0_u32);   // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:24:64: 24:73
        return;                          // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:24:75: 24:75
    }
}

fn <impl at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:25:1: 25:33>::non_zero(_1: u64) -> bool {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:25:48: 25:52
    let mut _0: bool;                    // return place in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:25:57: 25:61
    let mut _2: u64;                     // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:25:64: 25:68

    bb0: {
        _2 = _1;                         // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:25:64: 25:68
        _0 = Ne(move _2, const 0_u64);   // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:25:64: 25:73
        return;                          // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:25:75: 25:75
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:28:1: 28:1
    let mut _1: bool;                    // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:29:5: 29:39
    let mut _2: bool;                    // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:29:13: 29:38
    let mut _3: !;                       // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:29:5: 29:39
    let mut _4: bool;                    // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:30:5: 30:39
    let mut _5: bool;                    // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:30:13: 30:38
    let mut _6: !;                       // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:30:5: 30:39
    let mut _7: bool;                    // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:31:5: 31:39
    let mut _8: bool;                    // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:31:13: 31:38
    let mut _9: !;                       // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:31:5: 31:39
    let mut _10: bool;                   // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:32:5: 32:39
    let mut _11: bool;                   // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:32:13: 32:38
    let mut _12: !;                      // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:32:5: 32:39
    let mut _13: bool;                   // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:34:5: 34:39
    let mut _14: bool;                   // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:34:13: 34:38
    let mut _15: bool;                   // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:34:14: 34:38
    let mut _16: !;                      // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:34:5: 34:39
    let mut _17: bool;                   // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:35:5: 35:39
    let mut _18: bool;                   // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:35:13: 35:38
    let mut _19: bool;                   // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:35:14: 35:38
    let mut _20: !;                      // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:35:5: 35:39
    let mut _21: bool;                   // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:36:5: 36:39
    let mut _22: bool;                   // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:36:13: 36:38
    let mut _23: bool;                   // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:36:14: 36:38
    let mut _24: !;                      // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:36:5: 36:39
    let mut _25: bool;                   // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:37:5: 37:39
    let mut _26: bool;                   // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:37:13: 37:38
    let mut _27: bool;                   // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:37:14: 37:38
    let mut _28: !;                      // in scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:37:5: 37:39

    bb0: {
        _2 = <i32 as NonZero>::non_zero(const 22_i32) -> bb1; // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:29:13: 29:38
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:29:13: 29:30
                                         // + literal: Const { ty: fn(i32) -> bool {<i32 as NonZero>::non_zero}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Not(move _2);               // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:29:5: 29:39
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:29:5: 29:39
    }

    bb2: {
        _3 = core::panicking::panic(const "assertion failed: NonZero::non_zero(22_i32)"); // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:29:5: 29:39
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:29:5: 29:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _5 = <i64 as NonZero>::non_zero(const 22_i64) -> bb4; // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:30:13: 30:38
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:30:13: 30:30
                                         // + literal: Const { ty: fn(i64) -> bool {<i64 as NonZero>::non_zero}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = Not(move _5);               // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:30:5: 30:39
        switchInt(move _4) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:30:5: 30:39
    }

    bb5: {
        _6 = core::panicking::panic(const "assertion failed: NonZero::non_zero(22_i64)"); // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:30:5: 30:39
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:30:5: 30:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _8 = <u32 as NonZero>::non_zero(const 22_u32) -> bb7; // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:31:13: 31:38
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:31:13: 31:30
                                         // + literal: Const { ty: fn(u32) -> bool {<u32 as NonZero>::non_zero}, val: Value(<ZST>) }
    }

    bb7: {
        _7 = Not(move _8);               // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:31:5: 31:39
        switchInt(move _7) -> [0: bb9, otherwise: bb8]; // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:31:5: 31:39
    }

    bb8: {
        _9 = core::panicking::panic(const "assertion failed: NonZero::non_zero(22_u32)"); // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:31:5: 31:39
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:31:5: 31:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _11 = <u64 as NonZero>::non_zero(const 22_u64) -> bb10; // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:32:13: 32:38
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:32:13: 32:30
                                         // + literal: Const { ty: fn(u64) -> bool {<u64 as NonZero>::non_zero}, val: Value(<ZST>) }
    }

    bb10: {
        _10 = Not(move _11);             // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:32:5: 32:39
        switchInt(move _10) -> [0: bb12, otherwise: bb11]; // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:32:5: 32:39
    }

    bb11: {
        _12 = core::panicking::panic(const "assertion failed: NonZero::non_zero(22_u64)"); // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:32:5: 32:39
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:32:5: 32:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _15 = <i32 as NonZero>::non_zero(const 0_i32) -> bb13; // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:34:14: 34:38
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:34:14: 34:31
                                         // + literal: Const { ty: fn(i32) -> bool {<i32 as NonZero>::non_zero}, val: Value(<ZST>) }
    }

    bb13: {
        _14 = Not(move _15);             // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:34:13: 34:38
        _13 = Not(move _14);             // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:34:5: 34:39
        switchInt(move _13) -> [0: bb15, otherwise: bb14]; // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:34:5: 34:39
    }

    bb14: {
        _16 = core::panicking::panic(const "assertion failed: !NonZero::non_zero(0_i32)"); // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:34:5: 34:39
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:34:5: 34:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _19 = <i64 as NonZero>::non_zero(const 0_i64) -> bb16; // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:35:14: 35:38
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:35:14: 35:31
                                         // + literal: Const { ty: fn(i64) -> bool {<i64 as NonZero>::non_zero}, val: Value(<ZST>) }
    }

    bb16: {
        _18 = Not(move _19);             // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:35:13: 35:38
        _17 = Not(move _18);             // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:35:5: 35:39
        switchInt(move _17) -> [0: bb18, otherwise: bb17]; // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:35:5: 35:39
    }

    bb17: {
        _20 = core::panicking::panic(const "assertion failed: !NonZero::non_zero(0_i64)"); // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:35:5: 35:39
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:35:5: 35:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _23 = <u32 as NonZero>::non_zero(const 0_u32) -> bb19; // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:36:14: 36:38
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:36:14: 36:31
                                         // + literal: Const { ty: fn(u32) -> bool {<u32 as NonZero>::non_zero}, val: Value(<ZST>) }
    }

    bb19: {
        _22 = Not(move _23);             // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:36:13: 36:38
        _21 = Not(move _22);             // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:36:5: 36:39
        switchInt(move _21) -> [0: bb21, otherwise: bb20]; // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:36:5: 36:39
    }

    bb20: {
        _24 = core::panicking::panic(const "assertion failed: !NonZero::non_zero(0_u32)"); // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:36:5: 36:39
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:36:5: 36:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _27 = <u64 as NonZero>::non_zero(const 0_u64) -> bb22; // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:37:14: 37:38
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:37:14: 37:31
                                         // + literal: Const { ty: fn(u64) -> bool {<u64 as NonZero>::non_zero}, val: Value(<ZST>) }
    }

    bb22: {
        _26 = Not(move _27);             // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:37:13: 37:38
        _25 = Not(move _26);             // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:37:5: 37:39
        switchInt(move _25) -> [0: bb24, otherwise: bb23]; // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:37:5: 37:39
    }

    bb23: {
        _28 = core::panicking::panic(const "assertion failed: !NonZero::non_zero(0_u64)"); // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:37:5: 37:39
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:37:5: 37:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb24: {
        return;                          // scope 0 at ui/associated-types/associated-types-projection-from-known-type-in-impl.rs:38:2: 38:2
    }
}
