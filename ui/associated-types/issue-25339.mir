// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/issue-25339.rs:24:1: 24:35>::create(_1: &str, _2: T) -> () {
    debug mount => _1;                   // in scope 0 at ui/associated-types/issue-25339.rs:25:44: 25:49
    debug input => _2;                   // in scope 0 at ui/associated-types/issue-25339.rs:25:57: 25:62
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-25339.rs:25:67: 25:67
    let _3: R;                           // in scope 0 at ui/associated-types/issue-25339.rs:26:9: 26:27
    let mut _4: T;                       // in scope 0 at ui/associated-types/issue-25339.rs:26:9: 26:14

    bb0: {
        _4 = move _2;                    // scope 0 at ui/associated-types/issue-25339.rs:26:9: 26:14
        _3 = <T as ToRouting>::to_routing(move _4) -> bb1; // scope 0 at ui/associated-types/issue-25339.rs:26:9: 26:27
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-25339.rs:26:15: 26:25
                                         // + literal: Const { ty: fn(T) -> <T as ToRouting>::Routing {<T as ToRouting>::to_routing}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_3) -> bb2;                 // scope 0 at ui/associated-types/issue-25339.rs:26:27: 26:28
    }

    bb2: {
        return;                          // scope 0 at ui/associated-types/issue-25339.rs:27:6: 27:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-25339.rs:30:11: 30:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/issue-25339.rs:31:2: 31:2
    }
}
