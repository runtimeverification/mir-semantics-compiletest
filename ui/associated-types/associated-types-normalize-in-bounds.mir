// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/associated-types-normalize-in-bounds.rs:22:1: 22:26>::split2(_1: &[T], _2: P) -> Splits<'_, T, P> {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:25:18: 25:23
    debug pred => _2;                    // in scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:25:25: 25:29
    let mut _0: Splits<'_, T, P>;        // return place in scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:25:37: 25:49

    bb0: {
        goto -> bb1;                     // scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:26:9: 26:16
    }

    bb1: {
        goto -> bb1;                     // scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:26:9: 26:16
    }
}

fn <impl at ui/associated-types/associated-types-normalize-in-bounds.rs:22:1: 22:26>::splitn2(_1: &[T], _2: usize, _3: P) -> SplitsN<Splits<'_, T, P>> {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:29:19: 29:24
    debug n => _2;                       // in scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:29:26: 29:27
    debug pred => _3;                    // in scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:29:36: 29:40
    let mut _0: SplitsN<Splits<'_, T, P>>; // return place in scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:29:48: 29:69
    let _4: Splits<'_, T, P>;            // in scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:30:9: 30:26
    let mut _5: &[T];                    // in scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:30:9: 30:26
    let mut _6: P;                       // in scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:30:21: 30:25

    bb0: {
        _5 = _1;                         // scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:30:9: 30:26
        _6 = move _3;                    // scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:30:21: 30:25
        _4 = <[T] as SliceExt2>::split2::<P>(move _5, move _6) -> bb1; // scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:30:9: 30:26
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-normalize-in-bounds.rs:30:14: 30:20
                                         // + literal: Const { ty: for<'a> fn(&'a [T], P) -> Splits<'a, <[T] as SliceExt2>::Item, P> {<[T] as SliceExt2>::split2::<P>}, val: Value(<ZST>) }
    }

    bb1: {
        goto -> bb1;                     // scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:31:9: 31:16
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:35:11: 35:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:35:14: 35:14
    }
}

fn Splits(_1: PhantomData<(&(), T, P)>) -> Splits<'_, T, P> {
    let mut _0: Splits<'_, T, P>;        // return place in scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:10:1: 10:24

    bb0: {
        _0 = Splits::<'_, T, P>(move _1); // scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:10:1: 10:24
        return;                          // scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:10:1: 10:24
    }
}

// MIR FOR CTFE
fn Splits(_1: PhantomData<(&(), T, P)>) -> Splits<'_, T, P> {
    let mut _0: Splits<'_, T, P>;        // return place in scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:10:1: 10:24

    bb0: {
        _0 = Splits::<'_, T, P>(move _1); // scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:10:1: 10:24
        return;                          // scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:10:1: 10:24
    }
}

fn SplitsN(_1: PhantomData<I>) -> SplitsN<I> {
    let mut _0: SplitsN<I>;              // return place in scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:11:1: 11:18

    bb0: {
        _0 = SplitsN::<I>(move _1);      // scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:11:1: 11:18
        return;                          // scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:11:1: 11:18
    }
}

// MIR FOR CTFE
fn SplitsN(_1: PhantomData<I>) -> SplitsN<I> {
    let mut _0: SplitsN<I>;              // return place in scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:11:1: 11:18

    bb0: {
        _0 = SplitsN::<I>(move _1);      // scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:11:1: 11:18
        return;                          // scope 0 at ui/associated-types/associated-types-normalize-in-bounds.rs:11:1: 11:18
    }
}
