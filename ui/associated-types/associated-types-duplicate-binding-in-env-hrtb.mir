// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: T) -> i32 {
    debug t => _1;
    let mut _0: i32;
    let mut _2: &T;
    let mut _3: (&u8,);
    let mut _4: &u8;

    bb0: {
        _2 = &_1;
        _4 = const _;
        _3 = (_4,);
        _0 = <T as Fn<(&u8,)>>::call(move _2, move _3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

promoted[0] in foo: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 3_u8;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
