// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: T) -> i32 {
    debug t => _1;                       // in scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:9:11: 9:12
    let mut _0: i32;                     // return place in scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:9:20: 9:23
    let mut _2: &T;                      // in scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:13:5: 13:6
    let mut _3: (&u8,);                  // in scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:13:5: 13:10
    let mut _4: &u8;                     // in scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:13:7: 13:9
    let _5: &u8;                         // in scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:13:7: 13:9
    let mut _6: &u8;                     // in scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:13:7: 13:9

    bb0: {
        _2 = &_1;                        // scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:13:5: 13:6
        _6 = const _;                    // scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:13:7: 13:9
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:13:7: 13:9
                                         // + literal: Const { ty: &u8, val: Unevaluated(foo, [T], Some(promoted[0])) }
        _5 = _6;                         // scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:13:7: 13:9
        _4 = _5;                         // scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:13:7: 13:9
        _3 = (move _4,);                 // scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:13:5: 13:10
        _0 = <T as Fn<(&u8,)>>::call(move _2, move _3) -> [return: bb1, unwind: bb3]; // scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:13:5: 13:10
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:13:5: 13:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a T, (&u8,)) -> <T as FnOnce<(&u8,)>>::Output {<T as Fn<(&u8,)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:14:1: 14:2
    }

    bb2: {
        return;                          // scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:14:2: 14:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:14:1: 14:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:9:1: 14:2
    }
}

promoted[0] in foo: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:13:7: 13:9
    let mut _1: u8;                      // in scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:13:8: 13:9

    bb0: {
        _1 = const 3_u8;                 // scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:13:8: 13:9
        _0 = &_1;                        // scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:13:7: 13:9
        return;                          // scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:13:7: 13:9
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:16:11: 16:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs:17:2: 17:2
    }
}
