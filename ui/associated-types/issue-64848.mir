// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const <impl at ui/associated-types/issue-64848.rs:7:1: 7:36>::DATA: () = {
    let mut _0: ();

    bb0: {
        _0 = const _;
        return;
    }
}

const <impl at ui/associated-types/issue-64848.rs:15:1: 15:31>::DATA: () = {
    let mut _0: ();

    bb0: {
        _0 = ();
        return;
    }
}

fn foo() -> impl AssociatedConstant {
    let mut _0: impl AssociatedConstant;

    bb0: {
        return;
    }
}

fn get_data(_1: T) -> &() {
    let mut _0: &();

    bb0: {
        _0 = const _;
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in get_data: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &();

    bb0: {
        _1 = get_data::<fn() -> impl AssociatedConstant {foo}>(foo) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
