// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const <impl at ui/associated-types/issue-64848.rs:7:1: 7:36>::DATA: () = {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-64848.rs:12:17: 12:19

    bb0: {
        _0 = const _;                    // scope 0 at ui/associated-types/issue-64848.rs:12:22: 12:29
        return;                          // scope 0 at ui/associated-types/issue-64848.rs:12:5: 12:30
    }
}

const <impl at ui/associated-types/issue-64848.rs:15:1: 15:31>::DATA: () = {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-64848.rs:16:17: 16:19

    bb0: {
        _0 = ();                         // scope 0 at ui/associated-types/issue-64848.rs:16:22: 16:24
        return;                          // scope 0 at ui/associated-types/issue-64848.rs:16:5: 16:25
    }
}

fn foo() -> impl AssociatedConstant {
    let mut _0: impl AssociatedConstant; // return place in scope 0 at ui/associated-types/issue-64848.rs:19:13: 19:36

    bb0: {
        return;                          // scope 0 at ui/associated-types/issue-64848.rs:21:2: 21:2
    }
}

fn get_data(_1: T) -> &() {
    let mut _0: &();                     // return place in scope 0 at ui/associated-types/issue-64848.rs:24:5: 24:13
    let mut _2: &();                     // in scope 0 at ui/associated-types/issue-64848.rs:24:5: 24:13

    bb0: {
        _2 = const _;                    // scope 0 at ui/associated-types/issue-64848.rs:24:5: 24:13
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-64848.rs:24:5: 24:13
                                         // + literal: Const { ty: &(), val: Unevaluated(get_data, [T], Some(promoted[0])) }
        _0 = _2;                         // scope 0 at ui/associated-types/issue-64848.rs:24:5: 24:13
        drop(_1) -> bb1;                 // scope 0 at ui/associated-types/issue-64848.rs:25:1: 25:2
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/issue-64848.rs:25:2: 25:2
    }
}

promoted[0] in get_data: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/associated-types/issue-64848.rs:24:5: 24:13
    let mut _1: ();                      // in scope 0 at ui/associated-types/issue-64848.rs:24:6: 24:13

    bb0: {
        _1 = const _;                    // scope 0 at ui/associated-types/issue-64848.rs:24:6: 24:13
        _0 = &_1;                        // scope 0 at ui/associated-types/issue-64848.rs:24:5: 24:13
        return;                          // scope 0 at ui/associated-types/issue-64848.rs:24:5: 24:13
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-64848.rs:27:11: 27:11
    let _1: &();                         // in scope 0 at ui/associated-types/issue-64848.rs:28:5: 28:18

    bb0: {
        _1 = get_data::<fn() -> impl AssociatedConstant {foo}>(foo) -> bb1; // scope 0 at ui/associated-types/issue-64848.rs:28:5: 28:18
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-64848.rs:28:5: 28:13
                                         // + literal: Const { ty: fn(fn() -> impl AssociatedConstant {foo}) -> &'static () {get_data::<fn() -> impl AssociatedConstant {foo}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-64848.rs:28:14: 28:17
                                         // + literal: Const { ty: fn() -> impl AssociatedConstant {foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/issue-64848.rs:29:2: 29:2
    }
}
