// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn oh_no() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-91069.rs:16:1: 16:1
    let _1: <Wrap<'_> as Associate>::Associated; // in scope 0 at ui/associated-types/issue-91069.rs:20:5: 20:50

    bb0: {
        _1 = <<Wrap<'_> as Associate>::Associated as Create<T>>::create() -> bb1; // scope 0 at ui/associated-types/issue-91069.rs:20:5: 20:50
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-91069.rs:20:5: 20:48
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> <Wrap<'_> as Associate>::Associated {<<Wrap<'_> as Associate>::Associated as Create<T>>::create}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/associated-types/issue-91069.rs:20:50: 20:51
    }

    bb2: {
        return;                          // scope 0 at ui/associated-types/issue-91069.rs:21:2: 21:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-91069.rs:24:15: 24:15

    bb0: {
        return;                          // scope 0 at ui/associated-types/issue-91069.rs:24:17: 24:17
    }
}
