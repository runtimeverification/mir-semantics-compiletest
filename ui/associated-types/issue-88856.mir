// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/associated-types/issue-88856.rs:13:1: 13:43>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/associated-types/issue-88856.rs:14:11: 14:14
    let mut _1: bool;                    // in scope 0 at ui/associated-types/issue-88856.rs:14:11: 14:14

    bb0: {
        _1 = Eq(const 2_usize, const 0_usize); // scope 0 at ui/associated-types/issue-88856.rs:14:11: 14:14
        assert(!move _1, "attempt to divide `{}` by zero", const N) -> bb1; // scope 0 at ui/associated-types/issue-88856.rs:14:11: 14:14
    }

    bb1: {
        _0 = Div(const N, const 2_usize); // scope 0 at ui/associated-types/issue-88856.rs:14:11: 14:14
        return;                          // scope 0 at ui/associated-types/issue-88856.rs:14:11: 14:14
    }
}

<impl at ui/associated-types/issue-88856.rs:13:1: 13:43>::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/associated-types/issue-88856.rs:13:41: 13:42

    bb0: {
        _0 = const N;                    // scope 0 at ui/associated-types/issue-88856.rs:13:41: 13:42
        return;                          // scope 0 at ui/associated-types/issue-88856.rs:13:41: 13:42
    }
}

fn <impl at ui/associated-types/issue-88856.rs:13:1: 13:43>::func(_1: TraitImpl<N>) -> TraitImpl<N> {
    debug self => _1;                    // in scope 0 at ui/associated-types/issue-88856.rs:17:13: 17:17
    let mut _0: TraitImpl<N>;            // return place in scope 0 at ui/associated-types/issue-88856.rs:17:20: 17:27

    bb0: {
        _0 = move _1;                    // scope 0 at ui/associated-types/issue-88856.rs:18:9: 18:13
        return;                          // scope 0 at ui/associated-types/issue-88856.rs:19:6: 19:6
    }
}

fn sample(_1: P, _2: Convert) -> i32 {
    debug p => _1;                       // in scope 0 at ui/associated-types/issue-88856.rs:22:22: 22:23
    debug f => _2;                       // in scope 0 at ui/associated-types/issue-88856.rs:22:26: 22:27
    let mut _0: i32;                     // return place in scope 0 at ui/associated-types/issue-88856.rs:22:40: 22:43
    let mut _3: &Convert;                // in scope 0 at ui/associated-types/issue-88856.rs:26:5: 26:6
    let mut _4: (<P as Trait>::R,);      // in scope 0 at ui/associated-types/issue-88856.rs:26:5: 26:16
    let mut _5: <P as Trait>::R;         // in scope 0 at ui/associated-types/issue-88856.rs:26:7: 26:15
    let mut _6: P;                       // in scope 0 at ui/associated-types/issue-88856.rs:26:7: 26:8

    bb0: {
        _3 = &_2;                        // scope 0 at ui/associated-types/issue-88856.rs:26:5: 26:6
        _6 = move _1;                    // scope 0 at ui/associated-types/issue-88856.rs:26:7: 26:8
        _5 = <P as Trait>::func(move _6) -> [return: bb1, unwind: bb4]; // scope 0 at ui/associated-types/issue-88856.rs:26:7: 26:15
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-88856.rs:26:9: 26:13
                                         // + literal: Const { ty: fn(P) -> <P as Trait>::R {<P as Trait>::func}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = (move _5,);                 // scope 0 at ui/associated-types/issue-88856.rs:26:5: 26:16
        _0 = <Convert as Fn<(<P as Trait>::R,)>>::call(move _3, move _4) -> [return: bb2, unwind: bb4]; // scope 0 at ui/associated-types/issue-88856.rs:26:5: 26:16
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-88856.rs:26:5: 26:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a Convert, (<P as Trait>::R,)) -> <Convert as FnOnce<(<P as Trait>::R,)>>::Output {<Convert as Fn<(<P as Trait>::R,)>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> bb3;                 // scope 0 at ui/associated-types/issue-88856.rs:27:1: 27:2
    }

    bb3: {
        return;                          // scope 0 at ui/associated-types/issue-88856.rs:27:2: 27:2
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/associated-types/issue-88856.rs:27:1: 27:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/issue-88856.rs:22:1: 27:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-88856.rs:29:11: 29:11
    let _1: TraitImpl<10>;               // in scope 0 at ui/associated-types/issue-88856.rs:30:9: 30:10
    let _2: i32;                         // in scope 0 at ui/associated-types/issue-88856.rs:31:5: 31:21
    let mut _3: TraitImpl<10>;           // in scope 0 at ui/associated-types/issue-88856.rs:31:12: 31:13
    let mut _4: [closure@ui/associated-types/issue-88856.rs:31:14: 31:17]; // in scope 0 at ui/associated-types/issue-88856.rs:31:14: 31:20
    scope 1 {
        debug t => _1;                   // in scope 1 at ui/associated-types/issue-88856.rs:30:9: 30:10
    }

    bb0: {
        _1 = const TraitImpl::<10>(4_i32); // scope 0 at ui/associated-types/issue-88856.rs:30:13: 30:31
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-88856.rs:30:13: 30:31
                                         // + literal: Const { ty: TraitImpl<10>, val: Value(Scalar(0x00000004)) }
        _3 = const TraitImpl::<10>(4_i32); // scope 1 at ui/associated-types/issue-88856.rs:31:12: 31:13
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-88856.rs:31:12: 31:13
                                         // + literal: Const { ty: TraitImpl<10>, val: Value(Scalar(0x00000004)) }
        _2 = sample::<TraitImpl<10>, [closure@ui/associated-types/issue-88856.rs:31:14: 31:17]>(move _3, move _4) -> bb1; // scope 1 at ui/associated-types/issue-88856.rs:31:5: 31:21
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-88856.rs:31:5: 31:11
                                         // + literal: Const { ty: fn(TraitImpl<10>, [closure@ui/associated-types/issue-88856.rs:31:14: 31:17]) -> i32 {sample::<TraitImpl<10>, [closure@ui/associated-types/issue-88856.rs:31:14: 31:17]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/issue-88856.rs:32:2: 32:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/associated-types/issue-88856.rs:30:25: 30:27

    bb0: {
        _0 = const 10_usize;             // scope 0 at ui/associated-types/issue-88856.rs:30:25: 30:27
        return;                          // scope 0 at ui/associated-types/issue-88856.rs:30:25: 30:27
    }
}

fn main::{closure#0}(_1: &[closure@ui/associated-types/issue-88856.rs:31:14: 31:17], _2: TraitImpl<10>) -> i32 {
    debug x => _2;                       // in scope 0 at ui/associated-types/issue-88856.rs:31:15: 31:16
    let mut _0: i32;                     // return place in scope 0 at ui/associated-types/issue-88856.rs:31:17: 31:17

    bb0: {
        _0 = (_2.0: i32);                // scope 0 at ui/associated-types/issue-88856.rs:31:17: 31:20
        return;                          // scope 0 at ui/associated-types/issue-88856.rs:31:20: 31:20
    }
}

fn TraitImpl(_1: i32) -> TraitImpl<N> {
    let mut _0: TraitImpl<N>;            // return place in scope 0 at ui/associated-types/issue-88856.rs:11:1: 11:36

    bb0: {
        _0 = TraitImpl::<N>(move _1);    // scope 0 at ui/associated-types/issue-88856.rs:11:1: 11:36
        return;                          // scope 0 at ui/associated-types/issue-88856.rs:11:1: 11:36
    }
}

// MIR FOR CTFE
fn TraitImpl(_1: i32) -> TraitImpl<N> {
    let mut _0: TraitImpl<N>;            // return place in scope 0 at ui/associated-types/issue-88856.rs:11:1: 11:36

    bb0: {
        _0 = TraitImpl::<N>(move _1);    // scope 0 at ui/associated-types/issue-88856.rs:11:1: 11:36
        return;                          // scope 0 at ui/associated-types/issue-88856.rs:11:1: 11:36
    }
}
