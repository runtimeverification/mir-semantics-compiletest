// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/issue-25700-1.rs:8:1: 8:32>::clone(_1: &S<T>) -> S<T> {
    debug self => _1;                    // in scope 0 at ui/associated-types/issue-25700-1.rs:9:14: 9:19
    let mut _0: S<T>;                    // return place in scope 0 at ui/associated-types/issue-25700-1.rs:9:24: 9:28

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/associated-types/issue-25700-1.rs:9:31: 9:36
        return;                          // scope 0 at ui/associated-types/issue-25700-1.rs:9:38: 9:38
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-25700-1.rs:11:11: 11:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/issue-25700-1.rs:13:2: 13:2
    }
}

fn S(_1: Option<&T>) -> S<T> {
    let mut _0: S<T>;                    // return place in scope 0 at ui/associated-types/issue-25700-1.rs:2:1: 2:21

    bb0: {
        _0 = S::<T>(move _1);            // scope 0 at ui/associated-types/issue-25700-1.rs:2:1: 2:21
        return;                          // scope 0 at ui/associated-types/issue-25700-1.rs:2:1: 2:21
    }
}

// MIR FOR CTFE
fn S(_1: Option<&T>) -> S<T> {
    let mut _0: S<T>;                    // return place in scope 0 at ui/associated-types/issue-25700-1.rs:2:1: 2:21

    bb0: {
        _0 = S::<T>(move _1);            // scope 0 at ui/associated-types/issue-25700-1.rs:2:1: 2:21
        return;                          // scope 0 at ui/associated-types/issue-25700-1.rs:2:1: 2:21
    }
}
