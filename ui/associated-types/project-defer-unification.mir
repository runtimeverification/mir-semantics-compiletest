// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Luma::data::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/associated-types/project-defer-unification.rs:12:47: 12:48

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/associated-types/project-defer-unification.rs:12:47: 12:48
        return;                          // scope 0 at ui/associated-types/project-defer-unification.rs:12:47: 12:48
    }
}

fn <impl at ui/associated-types/project-defer-unification.rs:11:16: 11:21>::clone(_1: &Luma<T>) -> Luma<T> {
    debug self => _1;                    // in scope 0 at ui/associated-types/project-defer-unification.rs:11:16: 11:21
    let mut _0: Luma<T>;                 // return place in scope 0 at ui/associated-types/project-defer-unification.rs:11:16: 11:21
    let mut _2: [T; 1];                  // in scope 0 at ui/associated-types/project-defer-unification.rs:12:33: 12:49
    let mut _3: &[T; 1];                 // in scope 0 at ui/associated-types/project-defer-unification.rs:12:33: 12:49
    let _4: &[T; 1];                     // in scope 0 at ui/associated-types/project-defer-unification.rs:12:33: 12:49

    bb0: {
        _4 = &((*_1).0: [T; 1]);         // scope 0 at ui/associated-types/project-defer-unification.rs:12:33: 12:49
        _3 = _4;                         // scope 0 at ui/associated-types/project-defer-unification.rs:12:33: 12:49
        _2 = <[T; 1] as Clone>::clone(move _3) -> bb1; // scope 0 at ui/associated-types/project-defer-unification.rs:12:33: 12:49
                                         // mir::Constant
                                         // + span: ui/associated-types/project-defer-unification.rs:12:33: 12:49
                                         // + literal: Const { ty: for<'a> fn(&'a [T; 1]) -> [T; 1] {<[T; 1] as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Luma::<T> { data: move _2 }; // scope 0 at ui/associated-types/project-defer-unification.rs:11:16: 11:21
        return;                          // scope 0 at ui/associated-types/project-defer-unification.rs:11:21: 11:21
    }
}

fn <impl at ui/associated-types/project-defer-unification.rs:44:1: 44:45>::pixels(_1: &ImageBuffer<P, Container>) -> Pixels<'_, ImageBuffer<P, Container>> {
    debug self => _1;                    // in scope 0 at ui/associated-types/project-defer-unification.rs:49:23: 49:31
    let mut _0: Pixels<'_, ImageBuffer<P, Container>>; // return place in scope 0 at ui/associated-types/project-defer-unification.rs:49:36: 49:52

    bb0: {
        goto -> bb1;                     // scope 0 at ui/associated-types/project-defer-unification.rs:50:9: 50:17
    }

    bb1: {
        goto -> bb1;                     // scope 0 at ui/associated-types/project-defer-unification.rs:50:9: 50:17
    }
}

fn <impl at ui/associated-types/project-defer-unification.rs:44:1: 44:45>::pixels_mut(_1: &mut ImageBuffer<P, Container>) -> PixelsMut<'_, P> {
    debug self => _1;                    // in scope 0 at ui/associated-types/project-defer-unification.rs:53:23: 53:32
    let mut _0: PixelsMut<'_, P>;        // return place in scope 0 at ui/associated-types/project-defer-unification.rs:53:37: 53:49

    bb0: {
        goto -> bb1;                     // scope 0 at ui/associated-types/project-defer-unification.rs:54:9: 54:17
    }

    bb1: {
        goto -> bb1;                     // scope 0 at ui/associated-types/project-defer-unification.rs:54:9: 54:17
    }
}

fn <impl at ui/associated-types/project-defer-unification.rs:66:1: 66:53>::next(_1: &mut Pixels<'_, I>) -> Option<(u32, u32, <I as GenericImage>::Pixel)> {
    debug self => _1;                    // in scope 0 at ui/associated-types/project-defer-unification.rs:69:13: 69:22
    let mut _0: std::option::Option<(u32, u32, <I as GenericImage>::Pixel)>; // return place in scope 0 at ui/associated-types/project-defer-unification.rs:69:27: 69:55

    bb0: {
        goto -> bb1;                     // scope 0 at ui/associated-types/project-defer-unification.rs:70:9: 70:17
    }

    bb1: {
        goto -> bb1;                     // scope 0 at ui/associated-types/project-defer-unification.rs:70:9: 70:17
    }
}

fn <impl at ui/associated-types/project-defer-unification.rs:78:1: 78:54>::next(_1: &mut PixelsMut<'_, P>) -> Option<&mut P> {
    debug self => _1;                    // in scope 0 at ui/associated-types/project-defer-unification.rs:81:13: 81:22
    let mut _0: std::option::Option<&mut P>; // return place in scope 0 at ui/associated-types/project-defer-unification.rs:81:27: 81:44

    bb0: {
        goto -> bb1;                     // scope 0 at ui/associated-types/project-defer-unification.rs:82:9: 82:17
    }

    bb1: {
        goto -> bb1;                     // scope 0 at ui/associated-types/project-defer-unification.rs:82:9: 82:17
    }
}

fn index_colors(_1: &ImageBuffer<Pix, Vec<u8>>) -> ImageBuffer<Luma<u8>, Vec<u8>> {
    debug image => _1;                   // in scope 0 at ui/associated-types/project-defer-unification.rs:86:26: 86:31
    let mut _0: ImageBuffer<Luma<u8>, std::vec::Vec<u8>>; // return place in scope 0 at ui/associated-types/project-defer-unification.rs:87:29: 87:59
    let mut _2: ImageBuffer<Luma<u8>, std::vec::Vec<u8>>; // in scope 0 at ui/associated-types/project-defer-unification.rs:94:9: 94:20
    scope 1 {
        debug indices => _2;             // in scope 1 at ui/associated-types/project-defer-unification.rs:94:9: 94:20
        let mut _3: std::iter::Zip<Pixels<'_, ImageBuffer<Pix, std::vec::Vec<u8>>>, PixelsMut<'_, Luma<u8>>>; // in scope 1 at ui/associated-types/project-defer-unification.rs:95:25: 95:65
        scope 2 {
            debug iter => _3;            // in scope 2 at ui/associated-types/project-defer-unification.rs:95:25: 95:65
            let _4: (u32, u32, Pix);     // in scope 2 at ui/associated-types/project-defer-unification.rs:95:10: 95:15
            let _5: &mut Luma<u8>;       // in scope 2 at ui/associated-types/project-defer-unification.rs:95:17: 95:20
            scope 3 {
                debug pixel => _4;       // in scope 3 at ui/associated-types/project-defer-unification.rs:95:10: 95:15
                debug idx => _5;         // in scope 3 at ui/associated-types/project-defer-unification.rs:95:17: 95:20
            }
        }
    }

    bb0: {
        goto -> bb1;                     // scope 0 at ui/associated-types/project-defer-unification.rs:94:46: 94:54
    }

    bb1: {
        goto -> bb1;                     // scope 0 at ui/associated-types/project-defer-unification.rs:94:46: 94:54
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/project-defer-unification.rs:104:11: 104:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/project-defer-unification.rs:104:14: 104:14
    }
}
