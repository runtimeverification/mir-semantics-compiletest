// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/associated-types-stream.rs:13:1: 13:19>::car(_1: &()) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/associated-types/associated-types-stream.rs:13:1: 13:19>::cdr(_1: ()) -> () {
    debug self => const ();
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/associated-types/associated-types-stream.rs:20:1: 20:28>::car(_1: &(T, U)) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _2: &T;

    bb0: {
        _2 = &((*_1).0: T);
        _0 = <T as Clone>::clone(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/associated-types/associated-types-stream.rs:20:1: 20:28>::cdr(_1: (T, U)) -> U {
    debug self => _1;
    let mut _0: U;

    bb0: {
        _0 = move (_1.1: U);
        drop((_1.0: T)) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: (i32, (i32, (i32, ())));
    let mut _2: (i32, (i32, ()));
    let mut _3: (i32, ());
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let _6: i32;
    let mut _7: &(i32, (i32, (i32, ())));
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (i32, (i32, (i32, ())));
    let mut _19: (&i32, &i32);
    let mut _20: &i32;
    let _21: i32;
    let mut _22: &(i32, (i32, ()));
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: i32;
    let mut _28: i32;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (i32, (i32, ()));
    let mut _34: (&i32, &i32);
    let mut _35: &i32;
    let _36: i32;
    let mut _37: &(i32, ());
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: i32;
    let mut _43: i32;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug p => _1;
        let _8: &i32;
        let _9: &i32;
        let _17: (i32, (i32, ()));
        let mut _49: &i32;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug p => _17;
            let _23: &i32;
            let _24: &i32;
            let _32: (i32, ());
            let mut _48: &i32;
            scope 5 {
                debug left_val => _23;
                debug right_val => _24;
                let _29: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _29;
                }
            }
            scope 7 {
                debug p => _32;
                let _38: &i32;
                let _39: &i32;
                let mut _47: &i32;
                scope 8 {
                    debug left_val => _38;
                    debug right_val => _39;
                    let _44: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _44;
                    }
                }
            }
        }
    }

    bb0: {
        _3 = (const 66_i32, const ());
        _2 = (const 44_i32, move _3);
        _1 = (const 22_i32, move _2);
        _7 = &_1;
        _6 = <(i32, (i32, (i32, ()))) as Stream>::car(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _49 = const _;
        _4 = (move _5, _49);
        _8 = (_4.0: &i32);
        _9 = (_4.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb3: {
        _18 = _1;
        _17 = <(i32, (i32, (i32, ()))) as Stream>::cdr(move _18) -> [return: bb4, unwind continue];
    }

    bb4: {
        _22 = &_17;
        _21 = <(i32, (i32, ())) as Stream>::car(move _22) -> [return: bb5, unwind continue];
    }

    bb5: {
        _20 = &_21;
        _48 = const _;
        _19 = (move _20, _48);
        _23 = (_19.0: &i32);
        _24 = (_19.1: &i32);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<i32, i32>(move _29, _23, _24, move _31) -> unwind continue;
    }

    bb7: {
        _33 = _17;
        _32 = <(i32, (i32, ())) as Stream>::cdr(move _33) -> [return: bb8, unwind continue];
    }

    bb8: {
        _37 = &_32;
        _36 = <(i32, ()) as Stream>::car(move _37) -> [return: bb9, unwind continue];
    }

    bb9: {
        _35 = &_36;
        _47 = const _;
        _34 = (move _35, _47);
        _38 = (_34.0: &i32);
        _39 = (_34.1: &i32);
        _42 = (*_38);
        _43 = (*_39);
        _41 = Eq(move _42, move _43);
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<i32, i32>(move _44, _38, _39, move _46) -> unwind continue;
    }

    bb11: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 66_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 44_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 22_i32;
        _0 = &_1;
        return;
    }
}
