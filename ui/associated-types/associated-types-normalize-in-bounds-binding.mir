// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn FnLike::dummy(_1: &Self, _2: A) -> <Self as FnLike<A>>::R {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-normalize-in-bounds-binding.rs:25:14: 25:19
    debug a => _2;                       // in scope 0 at ui/associated-types/associated-types-normalize-in-bounds-binding.rs:25:21: 25:22
    let mut _0: <Self as FnLike<A>>::R;  // return place in scope 0 at ui/associated-types/associated-types-normalize-in-bounds-binding.rs:25:30: 25:37

    bb0: {
        goto -> bb1;                     // scope 0 at ui/associated-types/associated-types-normalize-in-bounds-binding.rs:25:40: 25:48
    }

    bb1: {
        goto -> bb1;                     // scope 0 at ui/associated-types/associated-types-normalize-in-bounds-binding.rs:25:40: 25:48
    }
}

fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-normalize-in-bounds-binding.rs:29:5: 29:5
    let _1: ();                          // in scope 0 at ui/associated-types/associated-types-normalize-in-bounds-binding.rs:31:5: 31:15

    bb0: {
        _1 = bar::<T>() -> bb1;          // scope 0 at ui/associated-types/associated-types-normalize-in-bounds-binding.rs:31:5: 31:15
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-normalize-in-bounds-binding.rs:31:5: 31:13
                                         // + literal: Const { ty: fn() {bar::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/associated-types-normalize-in-bounds-binding.rs:32:2: 32:2
    }
}

fn bar() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-normalize-in-bounds-binding.rs:35:5: 35:5

    bb0: {
        return;                          // scope 0 at ui/associated-types/associated-types-normalize-in-bounds-binding.rs:36:3: 36:3
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-normalize-in-bounds-binding.rs:38:11: 38:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/associated-types-normalize-in-bounds-binding.rs:38:14: 38:14
    }
}
