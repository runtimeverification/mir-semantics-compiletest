// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/issue-23208.rs:14:1: 14:32>::get(_1: &i32) -> u32 {
    debug self => _1;                    // in scope 0 at ui/associated-types/issue-23208.rs:15:12: 15:17
    let mut _0: u32;                     // return place in scope 0 at ui/associated-types/issue-23208.rs:15:22: 15:25
    let mut _2: i32;                     // in scope 0 at ui/associated-types/issue-23208.rs:16:9: 16:14

    bb0: {
        _2 = (*_1);                      // scope 0 at ui/associated-types/issue-23208.rs:16:9: 16:14
        _0 = move _2 as u32 (IntToInt);  // scope 0 at ui/associated-types/issue-23208.rs:16:9: 16:21
        return;                          // scope 0 at ui/associated-types/issue-23208.rs:17:6: 17:6
    }
}

fn foo(_1: &T) -> u32 {
    debug t => _1;                       // in scope 0 at ui/associated-types/issue-23208.rs:20:30: 20:31
    let mut _0: u32;                     // return place in scope 0 at ui/associated-types/issue-23208.rs:20:40: 20:43
    let mut _2: &T;                      // in scope 0 at ui/associated-types/issue-23208.rs:21:5: 21:12

    bb0: {
        _2 = _1;                         // scope 0 at ui/associated-types/issue-23208.rs:21:5: 21:12
        _0 = <T as TheSuperTrait<u32>>::get(move _2) -> bb1; // scope 0 at ui/associated-types/issue-23208.rs:21:5: 21:12
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-23208.rs:21:7: 21:10
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> u32 {<T as TheSuperTrait<u32>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/issue-23208.rs:22:2: 22:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-23208.rs:24:11: 24:11
    let _1: u32;                         // in scope 0 at ui/associated-types/issue-23208.rs:25:5: 25:20
    let mut _2: &i32;                    // in scope 0 at ui/associated-types/issue-23208.rs:25:16: 25:19
    let _3: &i32;                        // in scope 0 at ui/associated-types/issue-23208.rs:25:16: 25:19
    let mut _4: &i32;                    // in scope 0 at ui/associated-types/issue-23208.rs:25:16: 25:19

    bb0: {
        _4 = const _;                    // scope 0 at ui/associated-types/issue-23208.rs:25:16: 25:19
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-23208.rs:25:16: 25:19
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _4;                         // scope 0 at ui/associated-types/issue-23208.rs:25:16: 25:19
        _2 = _3;                         // scope 0 at ui/associated-types/issue-23208.rs:25:16: 25:19
        _1 = foo::<i32>(move _2) -> bb1; // scope 0 at ui/associated-types/issue-23208.rs:25:5: 25:20
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-23208.rs:25:5: 25:15
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> u32 {foo::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/issue-23208.rs:26:2: 26:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/associated-types/issue-23208.rs:25:16: 25:19
    let mut _1: i32;                     // in scope 0 at ui/associated-types/issue-23208.rs:25:17: 25:19

    bb0: {
        _1 = const 22_i32;               // scope 0 at ui/associated-types/issue-23208.rs:25:17: 25:19
        _0 = &_1;                        // scope 0 at ui/associated-types/issue-23208.rs:25:16: 25:19
        return;                          // scope 0 at ui/associated-types/issue-23208.rs:25:16: 25:19
    }
}
