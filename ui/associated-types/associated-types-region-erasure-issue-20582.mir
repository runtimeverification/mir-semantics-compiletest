// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/associated-types-region-erasure-issue-20582.rs:12:1: 12:30>::next(_1: &mut Foo<'_>) -> Option<&[u8]> {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-region-erasure-issue-20582.rs:15:13: 15:22
    let mut _0: std::option::Option<&[u8]>; // return place in scope 0 at ui/associated-types/associated-types-region-erasure-issue-20582.rs:15:27: 15:59
    let mut _2: &[u8];                   // in scope 0 at ui/associated-types/associated-types-region-erasure-issue-20582.rs:16:14: 16:22
    let mut _3: &[u8];                   // in scope 0 at ui/associated-types/associated-types-region-erasure-issue-20582.rs:15:13: 15:22

    bb0: {
        _3 = deref_copy ((*_1).0: &[u8]); // scope 0 at ui/associated-types/associated-types-region-erasure-issue-20582.rs:16:14: 16:22
        _2 = _3;                         // scope 0 at ui/associated-types/associated-types-region-erasure-issue-20582.rs:16:14: 16:22
        _0 = Option::<&[u8]>::Some(move _2); // scope 0 at ui/associated-types/associated-types-region-erasure-issue-20582.rs:16:9: 16:23
        return;                          // scope 0 at ui/associated-types/associated-types-region-erasure-issue-20582.rs:17:6: 17:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-region-erasure-issue-20582.rs:20:11: 20:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/associated-types-region-erasure-issue-20582.rs:21:2: 21:2
    }
}
