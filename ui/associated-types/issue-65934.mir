// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn unit() -> impl Into<<() as Trait>::Assoc> {
    let mut _0: impl std::convert::Into<<() as Trait>::Assoc>; // return place in scope 0 at ui/associated-types/issue-65934.rs:11:14: 11:45

    bb0: {
        return;                          // scope 0 at ui/associated-types/issue-65934.rs:11:48: 11:48
    }
}

fn ice() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-65934.rs:13:14: 13:14
    let _1: ();                          // in scope 0 at ui/associated-types/issue-65934.rs:14:5: 14:23
    let mut _2: impl std::convert::Into<<() as Trait>::Assoc>; // in scope 0 at ui/associated-types/issue-65934.rs:14:16: 14:22

    bb0: {
        _2 = unit() -> bb1;              // scope 0 at ui/associated-types/issue-65934.rs:14:16: 14:22
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-65934.rs:14:16: 14:20
                                         // + literal: Const { ty: fn() -> impl Into<<() as Trait>::Assoc> {unit}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <impl Into<<() as Trait>::Assoc> as Into<()>>::into(move _2) -> bb2; // scope 0 at ui/associated-types/issue-65934.rs:14:5: 14:23
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-65934.rs:14:5: 14:15
                                         // + literal: Const { ty: fn(impl Into<<() as Trait>::Assoc>) {<impl Into<<() as Trait>::Assoc> as Into<()>>::into}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/associated-types/issue-65934.rs:15:2: 15:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-65934.rs:17:11: 17:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/issue-65934.rs:17:13: 17:13
    }
}
