// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/normalization-generality.rs:16:1: 16:38>::project(_1: &Yoke<Y>, _2: for<'a> fn(<Y as Yokeable<'a>>::Output, &'a ()) -> <P as Yokeable<'a>>::Output) -> Yoke<P> {
    debug self => _1;                    // in scope 0 at ui/associated-types/normalization-generality.rs:18:9: 18:20
    debug _f => _2;                      // in scope 0 at ui/associated-types/normalization-generality.rs:19:9: 19:11
    let mut _0: Yoke<P>;                 // return place in scope 0 at ui/associated-types/normalization-generality.rs:20:10: 20:17
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52

    bb0: {
        _3 = core::panicking::panic(const "not implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn slice(_1: Yoke<&()>) -> Yoke<&()> {
    debug y => _1;                       // in scope 0 at ui/associated-types/normalization-generality.rs:28:14: 28:15
    let mut _0: Yoke<&()>;               // return place in scope 0 at ui/associated-types/normalization-generality.rs:28:39: 28:56
    let mut _2: &Yoke<&()>;              // in scope 0 at ui/associated-types/normalization-generality.rs:29:5: 29:31
    let mut _3: for<'a> fn(&'a (), &'a ()) -> <&() as Yokeable<'a>>::Output; // in scope 0 at ui/associated-types/normalization-generality.rs:29:15: 29:30
    let mut _4: [closure@ui/associated-types/normalization-generality.rs:29:15: 29:27]; // in scope 0 at ui/associated-types/normalization-generality.rs:29:15: 29:30

    bb0: {
        _2 = &_1;                        // scope 0 at ui/associated-types/normalization-generality.rs:29:5: 29:31
        _3 = move _4 as for<'a> fn(&'a (), &'a ()) -> <&() as Yokeable<'a>>::Output (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/associated-types/normalization-generality.rs:29:15: 29:30
        _0 = Yoke::<&()>::project::<&()>(move _2, move _3) -> bb1; // scope 0 at ui/associated-types/normalization-generality.rs:29:5: 29:31
                                         // mir::Constant
                                         // + span: ui/associated-types/normalization-generality.rs:29:7: 29:14
                                         // + literal: Const { ty: for<'this> fn(&'this Yoke<&()>, for<'a> fn(<&() as Yokeable<'a>>::Output, &'a ()) -> <&() as Yokeable<'a>>::Output) -> Yoke<&()> {Yoke::<&()>::project::<&()>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/normalization-generality.rs:30:2: 30:2
    }
}

fn slice::{closure#0}(_1: &[closure@ui/associated-types/normalization-generality.rs:29:15: 29:27], _2: &(), _3: &()) -> &() {
    debug yk => _2;                      // in scope 0 at ui/associated-types/normalization-generality.rs:29:21: 29:23
    let mut _0: &();                     // return place in scope 0 at ui/associated-types/normalization-generality.rs:29:28: 29:28

    bb0: {
        _0 = _2;                         // scope 0 at ui/associated-types/normalization-generality.rs:29:28: 29:30
        return;                          // scope 0 at ui/associated-types/normalization-generality.rs:29:30: 29:30
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/normalization-generality.rs:36:11: 36:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/normalization-generality.rs:36:13: 36:13
    }
}
