// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::string::String, &&str);
    let mut _2: &std::string::String;
    let _3: std::string::String;
    let mut _4: &u32;
    let _5: u32;
    let _6: &std::string::String;
    let _7: &&str;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&std::string::String, &&str);
    let mut _14: &std::string::String;
    let _15: std::string::String;
    let mut _16: &bool;
    let _17: bool;
    let _18: &std::string::String;
    let _19: &&str;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: &&str;
    let mut _26: &&str;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }

    bb0: {
        _5 = <u32 as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_5;
        _3 = <u32 as ToString>::to_string(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = &_3;
        _26 = const _;
        _1 = (move _2, _26);
        _6 = (_1.0: &std::string::String);
        _7 = (_1.1: &&str);
        _9 = <String as PartialEq<&str>>::eq(_6, _7) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<String, &str>(move _10, _6, _7, move _12) -> bb14;
    }

    bb5: {
        drop(_3) -> [return: bb6, unwind continue];
    }

    bb6: {
        _17 = <bool as Default>::default() -> [return: bb7, unwind continue];
    }

    bb7: {
        _16 = &_17;
        _15 = <bool as ToString>::to_string(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        _14 = &_15;
        _25 = const _;
        _13 = (move _14, _25);
        _18 = (_13.0: &std::string::String);
        _19 = (_13.1: &&str);
        _21 = <String as PartialEq<&str>>::eq(_18, _19) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<String, &str>(move _22, _18, _19, move _24) -> bb13;
    }

    bb11: {
        drop(_15) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_15) -> [return: bb15, unwind terminate];
    }

    bb14 (cleanup): {
        drop(_3) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "false";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "0";
        _0 = &_1;
        return;
    }
}
