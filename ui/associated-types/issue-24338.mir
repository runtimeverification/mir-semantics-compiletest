// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn DictLike::get(_1: <Self as DictLike<'_>>::ItemsIterator) -> () {
    debug c => _1;                       // in scope 0 at ui/associated-types/issue-24338.rs:6:12: 6:13
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-24338.rs:6:36: 6:36
    let _2: <Self as DictLike<'_>>::ItemsIterator; // in scope 0 at ui/associated-types/issue-24338.rs:7:9: 7:22
    let mut _3: <Self as DictLike<'_>>::ItemsIterator; // in scope 0 at ui/associated-types/issue-24338.rs:7:9: 7:10

    bb0: {
        _3 = move _1;                    // scope 0 at ui/associated-types/issue-24338.rs:7:9: 7:10
        _2 = <<Self as DictLike<'_>>::ItemsIterator as IntoIterator>::into_iter(move _3) -> bb1; // scope 0 at ui/associated-types/issue-24338.rs:7:9: 7:22
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-24338.rs:7:11: 7:20
                                         // + literal: Const { ty: fn(<Self as DictLike<'_>>::ItemsIterator) -> <<Self as DictLike<'_>>::ItemsIterator as IntoIterator>::IntoIter {<<Self as DictLike<'_>>::ItemsIterator as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at ui/associated-types/issue-24338.rs:7:22: 7:23
    }

    bb2: {
        return;                          // scope 0 at ui/associated-types/issue-24338.rs:8:6: 8:6
    }
}

fn DictLike2::get(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/associated-types/issue-24338.rs:16:12: 16:17
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-24338.rs:16:20: 16:20
    let mut _2: <Self as DictLike2<'_>>::ItemsIterator; // in scope 0 at ui/associated-types/issue-24338.rs:17:18: 17:30
    let mut _3: <Self as DictLike2<'_>>::ItemsIterator; // in scope 0 at ui/associated-types/issue-24338.rs:17:18: 17:30
    let mut _4: &Self;                   // in scope 0 at ui/associated-types/issue-24338.rs:17:18: 17:30
    let mut _5: <Self as DictLike2<'_>>::ItemsIterator; // in scope 0 at ui/associated-types/issue-24338.rs:17:18: 17:30
    let mut _6: std::option::Option<u8>; // in scope 0 at ui/associated-types/issue-24338.rs:17:18: 17:30
    let mut _7: &mut <Self as DictLike2<'_>>::ItemsIterator; // in scope 0 at ui/associated-types/issue-24338.rs:17:18: 17:30
    let mut _8: &mut <Self as DictLike2<'_>>::ItemsIterator; // in scope 0 at ui/associated-types/issue-24338.rs:17:18: 17:30
    let mut _9: isize;                   // in scope 0 at ui/associated-types/issue-24338.rs:17:9: 17:33
    scope 1 {
        debug iter => _5;                // in scope 1 at ui/associated-types/issue-24338.rs:17:18: 17:30
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/associated-types/issue-24338.rs:17:18: 17:30
        _3 = <Self as DictLike2<'_>>::items(move _4) -> bb1; // scope 0 at ui/associated-types/issue-24338.rs:17:18: 17:30
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-24338.rs:17:23: 17:28
                                         // + literal: Const { ty: for<'a> fn(&'a Self) -> <Self as DictLike2<'_>>::ItemsIterator {<Self as DictLike2<'_>>::items}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <<Self as DictLike2<'_>>::ItemsIterator as IntoIterator>::into_iter(move _3) -> bb2; // scope 0 at ui/associated-types/issue-24338.rs:17:18: 17:30
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-24338.rs:17:18: 17:30
                                         // + literal: Const { ty: fn(<Self as DictLike2<'_>>::ItemsIterator) -> <<Self as DictLike2<'_>>::ItemsIterator as IntoIterator>::IntoIter {<<Self as DictLike2<'_>>::ItemsIterator as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = move _2;                    // scope 0 at ui/associated-types/issue-24338.rs:17:18: 17:30
        goto -> bb3;                     // scope 1 at ui/associated-types/issue-24338.rs:17:9: 17:33
    }

    bb3: {
        _8 = &mut _5;                    // scope 1 at ui/associated-types/issue-24338.rs:17:18: 17:30
        _7 = &mut (*_8);                 // scope 1 at ui/associated-types/issue-24338.rs:17:18: 17:30
        _6 = <<Self as DictLike2<'_>>::ItemsIterator as Iterator>::next(move _7) -> [return: bb4, unwind: bb8]; // scope 1 at ui/associated-types/issue-24338.rs:17:18: 17:30
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-24338.rs:17:18: 17:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut <Self as DictLike2<'_>>::ItemsIterator) -> Option<<<Self as DictLike2<'_>>::ItemsIterator as Iterator>::Item> {<<Self as DictLike2<'_>>::ItemsIterator as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = discriminant(_6);           // scope 1 at ui/associated-types/issue-24338.rs:17:18: 17:30
        switchInt(move _9) -> [0: bb6, 1: bb3, otherwise: bb5]; // scope 1 at ui/associated-types/issue-24338.rs:17:18: 17:30
    }

    bb5: {
        unreachable;                     // scope 1 at ui/associated-types/issue-24338.rs:17:18: 17:30
    }

    bb6: {
        drop(_5) -> bb7;                 // scope 0 at ui/associated-types/issue-24338.rs:17:32: 17:33
    }

    bb7: {
        return;                          // scope 0 at ui/associated-types/issue-24338.rs:18:6: 18:6
    }

    bb8 (cleanup): {
        drop(_5) -> bb9;                 // scope 0 at ui/associated-types/issue-24338.rs:17:32: 17:33
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/issue-24338.rs:16:5: 18:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-24338.rs:21:11: 21:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/issue-24338.rs:21:13: 21:13
    }
}
