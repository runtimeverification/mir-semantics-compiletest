// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/associated-types-return.rs:10:10: 10:19>::eq(_1: &Bar, _2: &Bar) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/associated-types/associated-types-return.rs:10:21: 10:26>::fmt(_1: &Bar, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Bar";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/associated-types/associated-types-return.rs:13:1: 13:19>::boo(_1: &isize) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = const 42_usize;
        return;
    }
}

fn <impl at ui/associated-types/associated-types-return.rs:18:1: 18:17>::boo(_1: &Bar) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 43_isize;
        return;
    }
}

fn <impl at ui/associated-types/associated-types-return.rs:23:1: 23:18>::boo(_1: &char) -> Bar {
    debug self => _1;
    let mut _0: Bar;

    bb0: {
        return;
    }
}

fn foo1(_1: I) -> Bar {
    debug x => _1;
    let mut _0: Bar;
    let mut _2: &I;

    bb0: {
        _2 = &_1;
        _0 = <I as Foo>::boo(move _2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn foo2(_1: I) -> <I as Foo>::A {
    debug x => _1;
    let mut _0: <I as Foo>::A;
    let mut _2: &I;

    bb0: {
        _2 = &_1;
        _0 = <I as Foo>::boo(move _2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: isize;
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let _4: usize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&isize, &isize);
    let mut _15: &isize;
    let _16: isize;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: isize;
    let mut _22: isize;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let _27: Bar;
    let mut _28: (&Bar, &Bar);
    let mut _29: &Bar;
    let _30: Bar;
    let mut _33: bool;
    let mut _34: bool;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => const 42_isize;
        let _5: &usize;
        let _6: &usize;
        let mut _40: &usize;
        scope 2 {
            debug left_val => _5;
            debug right_val => _6;
            let _11: core::panicking::AssertKind;
            scope 3 {
                debug kind => _11;
            }
        }
        scope 4 {
            debug a => const Bar;
            let _17: &isize;
            let _18: &isize;
            let _26: char;
            let mut _39: &isize;
            scope 5 {
                debug left_val => _17;
                debug right_val => _18;
                let _23: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _23;
                }
            }
            scope 7 {
                debug a => const 'a';
                let _31: &Bar;
                let _32: &Bar;
                let mut _38: &Bar;
                scope 8 {
                    debug left_val => _31;
                    debug right_val => _32;
                    let _35: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _35;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 42_isize;
        _4 = foo2::<isize>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _40 = const _;
        _2 = (move _3, _40);
        _5 = (_2.0: &usize);
        _6 = (_2.1: &usize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<usize, usize>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb3: {
        _16 = foo2::<Bar>(const Bar) -> [return: bb4, unwind continue];
    }

    bb4: {
        _15 = &_16;
        _39 = const _;
        _14 = (move _15, _39);
        _17 = (_14.0: &isize);
        _18 = (_14.1: &isize);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<isize, isize>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb6: {
        _26 = const 'a';
        _27 = foo1::<char>(_26) -> [return: bb7, unwind continue];
    }

    bb7: {
        _30 = foo2::<char>(_26) -> [return: bb8, unwind continue];
    }

    bb8: {
        _29 = &_30;
        _38 = const _;
        _28 = (move _29, _38);
        _31 = (_28.0: &Bar);
        _32 = (_28.1: &Bar);
        _34 = <Bar as PartialEq>::eq(_31, _32) -> [return: bb9, unwind continue];
    }

    bb9: {
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<Bar, Bar>(move _35, _31, _32, move _37) -> unwind continue;
    }

    bb11: {
        return;
    }
}

promoted[0] in main: &Bar = {
    let mut _0: &Bar;
    let mut _1: Bar;

    bb0: {
        _1 = Bar;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 43_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 42_usize;
        _0 = &_1;
        return;
    }
}
