// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Parser::parse(_1: <Self as Parser>::Input) -> () {
    debug input => _1;                   // in scope 0 at ui/associated-types/associated-types-issue-21212.rs:12:14: 12:19
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-issue-21212.rs:12:46: 12:46
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _2 = begin_panic::<&str>(const "explicit panic") -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_1) -> bb2;                 // scope 0 at ui/associated-types/associated-types-issue-21212.rs:14:5: 14:6
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/associated-types-issue-21212.rs:12:5: 14:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-issue-21212.rs:21:11: 21:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/associated-types-issue-21212.rs:22:2: 22:2
    }
}
