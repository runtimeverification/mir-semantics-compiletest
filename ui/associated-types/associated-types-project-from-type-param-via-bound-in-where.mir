// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static COUNTER: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize; // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:10:17: 10:28

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:10:31: 10:50
        _0 = AtomicUsize::new(const 0_usize) -> bb1; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:10:31: 10:50
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:10:31: 10:47
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:10:1: 10:51
    }
}

fn <impl at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:21:1: 21:7>::foo(_1: <T as Trait>::Item) -> () {
    debug _x => _1;                      // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:22:15: 22:17
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:22:28: 22:28
    let _2: usize;                       // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:23:9: 23:37
    let mut _3: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:23:9: 23:37
    let _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:23:9: 23:16
    let mut _5: std::sync::atomic::Ordering; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:23:30: 23:36

    bb0: {
        _4 = const {alloc1: &AtomicUsize}; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:23:9: 23:16
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:23:9: 23:16
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _3 = _4;                         // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:23:9: 23:37
        _5 = const SeqCst;               // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:23:30: 23:36
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:23:30: 23:36
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _2 = AtomicUsize::fetch_add(move _3, const 1_usize, move _5) -> [return: bb1, unwind: bb3]; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:23:9: 23:37
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:23:17: 23:26
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:24:5: 24:6
    }

    bb2: {
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:24:6: 24:6
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:24:5: 24:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:22:5: 24:6
    }
}

alloc1 (static: COUNTER, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:29:1: 29:13>::foo(_1: <T as Trait>::Item) -> () {
    debug _x => _1;                      // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:30:12: 30:14
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:30:25: 30:25
    let _2: usize;                       // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:31:9: 31:38
    let mut _3: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:31:9: 31:38
    let _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:31:9: 31:16
    let mut _5: std::sync::atomic::Ordering; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:31:31: 31:37

    bb0: {
        _4 = const {alloc1: &AtomicUsize}; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:31:9: 31:16
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:31:9: 31:16
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _3 = _4;                         // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:31:9: 31:38
        _5 = const SeqCst;               // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:31:31: 31:37
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:31:31: 31:37
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _2 = AtomicUsize::fetch_add(move _3, const 10_usize, move _5) -> [return: bb1, unwind: bb3]; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:31:9: 31:38
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:31:17: 31:26
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:32:5: 32:6
    }

    bb2: {
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:32:6: 32:6
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:32:5: 32:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:30:5: 32:6
    }
}

alloc1 (static: COUNTER, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn c(_1: <T as Trait>::Item) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:36:21: 36:21
    let _2: usize;                       // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:37:5: 37:35
    let mut _3: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:37:5: 37:35
    let _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:37:5: 37:12
    let mut _5: std::sync::atomic::Ordering; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:37:28: 37:34

    bb0: {
        _4 = const {alloc1: &AtomicUsize}; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:37:5: 37:12
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:37:5: 37:12
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _3 = _4;                         // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:37:5: 37:35
        _5 = const SeqCst;               // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:37:28: 37:34
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:37:28: 37:34
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _2 = AtomicUsize::fetch_add(move _3, const 100_usize, move _5) -> [return: bb1, unwind: bb3]; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:37:5: 37:35
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:37:13: 37:22
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:38:1: 38:2
    }

    bb2: {
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:38:2: 38:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:38:1: 38:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:36:1: 38:2
    }
}

alloc1 (static: COUNTER, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn AnotherTrait::default_method(_1: &Self, _2: <T as Trait>::Item) -> () {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:43:26: 43:31
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:43:45: 43:45
    let _3: usize;                       // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:44:9: 44:40
    let mut _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:44:9: 44:40
    let _5: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:44:9: 44:16
    let mut _6: std::sync::atomic::Ordering; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:44:33: 44:39

    bb0: {
        _5 = const {alloc1: &AtomicUsize}; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:44:9: 44:16
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:44:9: 44:16
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _4 = _5;                         // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:44:9: 44:40
        _6 = const SeqCst;               // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:44:33: 44:39
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:44:33: 44:39
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _3 = AtomicUsize::fetch_add(move _4, const 1000_usize, move _6) -> [return: bb1, unwind: bb3]; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:44:9: 44:40
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:44:17: 44:26
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:45:5: 45:6
    }

    bb2: {
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:45:6: 45:6
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:45:5: 45:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:43:5: 45:6
    }
}

alloc1 (static: COUNTER, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:48:1: 48:24>::method(_1: &D, _2: <T as Trait>::Item) -> () {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:49:18: 49:23
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:49:37: 49:37
    let _3: usize;                       // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:50:9: 50:41
    let mut _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:50:9: 50:41
    let _5: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:50:9: 50:16
    let mut _6: std::sync::atomic::Ordering; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:50:34: 50:40

    bb0: {
        _5 = const {alloc1: &AtomicUsize}; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:50:9: 50:16
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:50:9: 50:16
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _4 = _5;                         // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:50:9: 50:41
        _6 = const SeqCst;               // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:50:34: 50:40
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:50:34: 50:40
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _3 = AtomicUsize::fetch_add(move _4, const 10000_usize, move _6) -> [return: bb1, unwind: bb3]; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:50:9: 50:41
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:50:17: 50:26
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:51:5: 51:6
    }

    bb2: {
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:51:6: 51:6
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:51:5: 51:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:49:5: 51:6
    }
}

alloc1 (static: COUNTER, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn YetAnotherTrait::default_method(_1: &Self, _2: <T as Trait>::Item) -> () {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:59:23: 59:28
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:59:42: 59:42
    let _3: usize;                       // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:60:9: 60:42
    let mut _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:60:9: 60:42
    let _5: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:60:9: 60:16
    let mut _6: std::sync::atomic::Ordering; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:60:35: 60:41

    bb0: {
        _5 = const {alloc1: &AtomicUsize}; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:60:9: 60:16
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:60:9: 60:16
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _4 = _5;                         // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:60:9: 60:42
        _6 = const SeqCst;               // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:60:35: 60:41
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:60:35: 60:41
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _3 = AtomicUsize::fetch_add(move _4, const 100000_usize, move _6) -> [return: bb1, unwind: bb3]; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:60:9: 60:42
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:60:17: 60:26
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:61:5: 61:6
    }

    bb2: {
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:61:6: 61:6
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:61:5: 61:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:59:5: 61:6
    }
}

alloc1 (static: COUNTER, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:64:1: 64:36>::method(_1: &E<T>, _2: <T as Trait>::Item) -> () {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:67:15: 67:20
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:67:34: 67:34
    let _3: usize;                       // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:68:9: 68:43
    let mut _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:68:9: 68:43
    let _5: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:68:9: 68:16
    let mut _6: std::sync::atomic::Ordering; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:68:36: 68:42

    bb0: {
        _5 = const {alloc1: &AtomicUsize}; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:68:9: 68:16
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:68:9: 68:16
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _4 = _5;                         // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:68:9: 68:43
        _6 = const SeqCst;               // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:68:36: 68:42
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:68:36: 68:42
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _3 = AtomicUsize::fetch_add(move _4, const 1000000_usize, move _6) -> [return: bb1, unwind: bb3]; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:68:9: 68:43
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:68:17: 68:26
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:69:5: 69:6
    }

    bb2: {
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:69:6: 69:6
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:69:5: 69:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:67:5: 69:6
    }
}

alloc1 (static: COUNTER, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:74:1: 74:13>::method(_1: &F<T>, _2: <T as Trait>::Item) -> () {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:75:15: 75:20
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:75:34: 75:34
    let _3: usize;                       // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:76:9: 76:44
    let mut _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:76:9: 76:44
    let _5: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:76:9: 76:16
    let mut _6: std::sync::atomic::Ordering; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:76:37: 76:43

    bb0: {
        _5 = const {alloc1: &AtomicUsize}; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:76:9: 76:16
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:76:9: 76:16
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _4 = _5;                         // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:76:9: 76:44
        _6 = const SeqCst;               // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:76:37: 76:43
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:76:37: 76:43
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _3 = AtomicUsize::fetch_add(move _4, const 10000000_usize, move _6) -> [return: bb1, unwind: bb3]; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:76:9: 76:44
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:76:17: 76:26
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:77:5: 77:6
    }

    bb2: {
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:77:6: 77:6
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:77:5: 77:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:75:5: 77:6
    }
}

alloc1 (static: COUNTER, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:87:11: 87:11
    let _1: ();                          // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:88:5: 88:25
    let _2: ();                          // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:89:5: 89:25
    let _3: ();                          // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:90:5: 90:20
    let _4: ();                          // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:91:5: 91:27
    let mut _5: &D;                      // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:91:5: 91:27
    let _6: ();                          // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:92:5: 92:35
    let mut _7: &D;                      // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:92:5: 92:35
    let _8: ();                          // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:93:5: 93:40
    let mut _9: &E<Struct>;              // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:93:5: 93:40
    let _10: ();                         // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:94:5: 94:48
    let mut _11: &E<Struct>;             // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:94:5: 94:48
    let _12: ();                         // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:95:5: 95:40
    let mut _13: &F<Struct>;             // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:95:5: 95:40
    let mut _14: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _15: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _16: usize;                      // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:97:16: 97:36
    let mut _17: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:97:16: 97:36
    let _18: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:97:16: 97:23
    let mut _19: std::sync::atomic::Ordering; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:97:29: 97:35
    let mut _20: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _21: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _22: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _23: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _24: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _25: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _26: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _28: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _29: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _30: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _31: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _32: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _33: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _35: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _36: &F<Struct>;             // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:95:5: 95:40
    let mut _37: &E<Struct>;             // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:94:5: 94:48
    let mut _38: &E<Struct>;             // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:93:5: 93:40
    let mut _39: &D;                     // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:92:5: 92:35
    let mut _40: &D;                     // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:91:5: 91:27
    scope 1 {
        debug left_val => _21;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _22;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _27: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _27;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _1 = A::foo::<Struct>(const 22_u32) -> bb1; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:88:5: 88:25
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:88:5: 88:21
                                         // + literal: Const { ty: fn(<Struct as Trait>::Item) {A::foo::<Struct>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = B::<Struct>::foo(const 22_u32) -> bb2; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:89:5: 89:25
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:89:5: 89:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(<Struct as Trait>::Item) {B::<Struct>::foo}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = c::<Struct>(const 22_u32) -> bb3; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:90:5: 90:20
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:90:5: 90:16
                                         // + literal: Const { ty: fn(<Struct as Trait>::Item) {c::<Struct>}, val: Value(<ZST>) }
    }

    bb3: {
        _40 = const _;                   // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:91:5: 91:27
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:91:5: 91:27
                                         // + literal: Const { ty: &D, val: Unevaluated(main, [], Some(promoted[5])) }
        _5 = _40;                        // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:91:5: 91:27
        _4 = <D as AnotherTrait>::method::<Struct>(move _5, const 22_u32) -> bb4; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:91:5: 91:27
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:91:7: 91:13
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a D, <Struct as Trait>::Item) {<D as AnotherTrait>::method::<Struct>}, val: Value(<ZST>) }
    }

    bb4: {
        _39 = const _;                   // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:92:5: 92:35
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:92:5: 92:35
                                         // + literal: Const { ty: &D, val: Unevaluated(main, [], Some(promoted[4])) }
        _7 = _39;                        // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:92:5: 92:35
        _6 = <D as AnotherTrait>::default_method::<Struct>(move _7, const 22_u32) -> bb5; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:92:5: 92:35
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:92:7: 92:21
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a> fn(&'a D, <Struct as Trait>::Item) {<D as AnotherTrait>::default_method::<Struct>}, val: Value(<ZST>) }
    }

    bb5: {
        _38 = const _;                   // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:93:5: 93:40
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:93:5: 93:40
                                         // + literal: Const { ty: &E<Struct>, val: Unevaluated(main, [], Some(promoted[3])) }
        _9 = _38;                        // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:93:5: 93:40
        _8 = <E<Struct> as YetAnotherTrait<Struct>>::method(move _9, const 22_u32) -> bb6; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:93:5: 93:40
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:93:30: 93:36
                                         // + literal: Const { ty: for<'a> fn(&'a E<Struct>, <Struct as Trait>::Item) {<E<Struct> as YetAnotherTrait<Struct>>::method}, val: Value(<ZST>) }
    }

    bb6: {
        _37 = const _;                   // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:94:5: 94:48
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:94:5: 94:48
                                         // + literal: Const { ty: &E<Struct>, val: Unevaluated(main, [], Some(promoted[2])) }
        _11 = _37;                       // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:94:5: 94:48
        _10 = <E<Struct> as YetAnotherTrait<Struct>>::default_method(move _11, const 22_u32) -> bb7; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:94:5: 94:48
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:94:30: 94:44
                                         // + literal: Const { ty: for<'a> fn(&'a E<Struct>, <Struct as Trait>::Item) {<E<Struct> as YetAnotherTrait<Struct>>::default_method}, val: Value(<ZST>) }
    }

    bb7: {
        _36 = const _;                   // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:95:5: 95:40
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:95:5: 95:40
                                         // + literal: Const { ty: &F<Struct>, val: Unevaluated(main, [], Some(promoted[1])) }
        _13 = _36;                       // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:95:5: 95:40
        _12 = F::<Struct>::method(move _13, const 22_u32) -> bb8; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:95:5: 95:40
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:95:30: 95:36
                                         // + literal: Const { ty: for<'a> fn(&'a F<Struct>, <Struct as Trait>::Item) {F::<Struct>::method}, val: Value(<ZST>) }
    }

    bb8: {
        _18 = const {alloc1: &AtomicUsize}; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:97:16: 97:23
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:97:16: 97:23
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _17 = _18;                       // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:97:16: 97:36
        _19 = const SeqCst;              // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:97:29: 97:35
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:97:29: 97:35
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _16 = AtomicUsize::load(move _17, move _19) -> bb9; // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:97:16: 97:36
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:97:24: 97:28
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = &_16;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _35 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _20 = _35;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _14 = (move _15, move _20);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _21 = (_14.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _22 = (_14.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _25 = (*_21);                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _26 = const 11111111_usize;      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _24 = Eq(move _25, move _26);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _23 = Not(move _24);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _23) -> [0: bb11, otherwise: bb10]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _27 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _29 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _31 = _21;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _30 = _31;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _33 = _22;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _32 = _33;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _34 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _28 = core::panicking::assert_failed::<usize, usize>(move _29, move _30, move _32, move _34); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb11: {
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:98:2: 98:2
    }
}

alloc1 (static: COUNTER, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:97:38: 97:46

    bb0: {
        _1 = const 11111111_usize;       // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:97:38: 97:46
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &F<Struct> = {
    let mut _0: &F<Struct>;              // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:95:5: 95:40
    let mut _1: F<Struct>;               // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:95:5: 95:29
    let mut _2: std::marker::PhantomData<Struct>; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:95:7: 95:28

    bb0: {
        _2 = PhantomData::<Struct>;      // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:95:7: 95:28
        _1 = F::<Struct>(move _2);       // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:95:5: 95:29
        _0 = &_1;                        // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:95:5: 95:40
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:95:5: 95:40
    }
}

promoted[2] in main: &E<Struct> = {
    let mut _0: &E<Struct>;              // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:94:5: 94:48
    let mut _1: E<Struct>;               // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:94:5: 94:29
    let mut _2: std::marker::PhantomData<Struct>; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:94:7: 94:28

    bb0: {
        _2 = PhantomData::<Struct>;      // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:94:7: 94:28
        _1 = E::<Struct>(move _2);       // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:94:5: 94:29
        _0 = &_1;                        // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:94:5: 94:48
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:94:5: 94:48
    }
}

promoted[3] in main: &E<Struct> = {
    let mut _0: &E<Struct>;              // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:93:5: 93:40
    let mut _1: E<Struct>;               // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:93:5: 93:29
    let mut _2: std::marker::PhantomData<Struct>; // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:93:7: 93:28

    bb0: {
        _2 = PhantomData::<Struct>;      // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:93:7: 93:28
        _1 = E::<Struct>(move _2);       // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:93:5: 93:29
        _0 = &_1;                        // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:93:5: 93:40
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:93:5: 93:40
    }
}

promoted[4] in main: &D = {
    let mut _0: &D;                      // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:92:5: 92:35
    let mut _1: D;                       // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:92:5: 92:6

    bb0: {
        _1 = D;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:92:5: 92:6
        _0 = &_1;                        // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:92:5: 92:35
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:92:5: 92:35
    }
}

promoted[5] in main: &D = {
    let mut _0: &D;                      // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:91:5: 91:27
    let mut _1: D;                       // in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:91:5: 91:6

    bb0: {
        _1 = D;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:91:5: 91:6
        _0 = &_1;                        // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:91:5: 91:27
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:91:5: 91:27
    }
}

fn B(_1: PhantomData<T>) -> B<T> {
    let mut _0: B<T>;                    // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:28:1: 28:12

    bb0: {
        _0 = B::<T>(move _1);            // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:28:1: 28:12
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:28:1: 28:12
    }
}

// MIR FOR CTFE
fn B(_1: PhantomData<T>) -> B<T> {
    let mut _0: B<T>;                    // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:28:1: 28:12

    bb0: {
        _0 = B::<T>(move _1);            // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:28:1: 28:12
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:28:1: 28:12
    }
}

fn E(_1: PhantomData<T>) -> E<T> {
    let mut _0: E<T>;                    // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:63:1: 63:12

    bb0: {
        _0 = E::<T>(move _1);            // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:63:1: 63:12
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:63:1: 63:12
    }
}

// MIR FOR CTFE
fn E(_1: PhantomData<T>) -> E<T> {
    let mut _0: E<T>;                    // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:63:1: 63:12

    bb0: {
        _0 = E::<T>(move _1);            // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:63:1: 63:12
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:63:1: 63:12
    }
}

fn F(_1: PhantomData<T>) -> F<T> {
    let mut _0: F<T>;                    // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:73:1: 73:12

    bb0: {
        _0 = F::<T>(move _1);            // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:73:1: 73:12
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:73:1: 73:12
    }
}

// MIR FOR CTFE
fn F(_1: PhantomData<T>) -> F<T> {
    let mut _0: F<T>;                    // return place in scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:73:1: 73:12

    bb0: {
        _0 = F::<T>(move _1);            // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:73:1: 73:12
        return;                          // scope 0 at ui/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs:73:1: 73:12
    }
}
