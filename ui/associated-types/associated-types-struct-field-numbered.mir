// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn UnifyKey::dummy(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn foo(_1: &Node<K>) -> Option<V> {
    debug node => _1;
    let mut _0: std::option::Option<V>;
    let mut _2: &std::option::Option<V>;

    bb0: {
        _2 = &((*_1).1: std::option::Option<V>);
        _0 = <Option<V> as Clone>::clone(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Node<i32>;
    let mut _2: std::option::Option<u32>;
    let mut _3: (&std::option::Option<u32>, &std::option::Option<u32>);
    let mut _4: &std::option::Option<u32>;
    let _5: std::option::Option<u32>;
    let _6: &Node<i32>;
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: std::option::Option<i32>;
    let mut _16: (&std::option::Option<i32>, &std::option::Option<i32>);
    let mut _17: &std::option::Option<i32>;
    let _18: std::option::Option<i32>;
    let _19: &Node<u32>;
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug node => _1;
        let _7: &std::option::Option<u32>;
        let _8: &std::option::Option<u32>;
        let _14: Node<u32>;
        let mut _28: &std::option::Option<u32>;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _11: core::panicking::AssertKind;
            scope 3 {
                debug kind => _11;
            }
        }
        scope 4 {
            debug node => _14;
            let _20: &std::option::Option<i32>;
            let _21: &std::option::Option<i32>;
            let mut _27: &std::option::Option<i32>;
            scope 5 {
                debug left_val => _20;
                debug right_val => _21;
                let _24: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _24;
                }
            }
        }
    }

    bb0: {
        _2 = Option::<u32>::Some(const 22_u32);
        _1 = Node::<i32>(const 1_i32, move _2);
        _6 = &_1;
        _5 = foo::<i32, u32>(_6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_5;
        _28 = const _;
        _3 = (move _4, _28);
        _7 = (_3.0: &std::option::Option<u32>);
        _8 = (_3.1: &std::option::Option<u32>);
        _10 = <Option<u32> as PartialEq>::eq(_7, _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<Option<u32>, Option<u32>>(move _11, _7, _8, move _13) -> unwind continue;
    }

    bb4: {
        _15 = Option::<i32>::Some(const 22_i32);
        _14 = Node::<u32>(const 1_u32, move _15);
        _19 = &_14;
        _18 = foo::<u32, i32>(_19) -> [return: bb5, unwind continue];
    }

    bb5: {
        _17 = &_18;
        _27 = const _;
        _16 = (move _17, _27);
        _20 = (_16.0: &std::option::Option<i32>);
        _21 = (_16.1: &std::option::Option<i32>);
        _23 = <Option<i32> as PartialEq>::eq(_20, _21) -> [return: bb6, unwind continue];
    }

    bb6: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _24, _20, _21, move _26) -> unwind continue;
    }

    bb8: {
        return;
    }
}

promoted[0] in main: &Option<i32> = {
    let mut _0: &std::option::Option<i32>;
    let mut _1: std::option::Option<i32>;

    bb0: {
        _1 = Option::<i32>::Some(const 22_i32);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Option<u32> = {
    let mut _0: &std::option::Option<u32>;
    let mut _1: std::option::Option<u32>;

    bb0: {
        _1 = Option::<u32>::Some(const 22_u32);
        _0 = &_1;
        return;
    }
}

fn Node(_1: K, _2: <K as UnifyKey>::Value) -> Node<K> {
    let mut _0: Node<K>;

    bb0: {
        _0 = Node::<K>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Node(_1: K, _2: <K as UnifyKey>::Value) -> Node<K> {
    let mut _0: Node<K>;

    bb0: {
        _0 = Node::<K>(move _1, move _2);
        return;
    }
}
