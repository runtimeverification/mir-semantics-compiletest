// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn IteratorExt::by_ref(_1: &mut Self) -> ByRef<'_, Self> {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:23:15: 23:24
    let mut _0: ByRef<'_, Self>;         // return place in scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:23:29: 23:40
    let mut _2: &mut Self;               // in scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:24:15: 24:19

    bb0: {
        _2 = &mut (*_1);                 // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:24:15: 24:19
        _0 = ByRef::<'_, Self>(move _2); // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:24:9: 24:20
        return;                          // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:25:6: 25:6
    }
}

fn <impl at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:32:1: 32:41>::next(_1: &mut ByRef<'_, I>) -> Option<A> {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:35:13: 35:22
    let mut _0: std::option::Option<A>;  // return place in scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:35:27: 35:58
    let mut _2: &mut I;                  // in scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:36:9: 36:22
    let mut _3: &mut I;                  // in scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:35:13: 35:22

    bb0: {
        _3 = deref_copy ((*_1).0: &mut I); // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:36:9: 36:22
        _2 = &mut (*_3);                 // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:36:9: 36:22
        _0 = <I as Iterator>::next(move _2) -> bb1; // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:36:9: 36:22
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:36:16: 36:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut I) -> Option<<I as Iterator>::Item> {<I as Iterator>::next}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:37:6: 37:6
    }
}

fn is_iterator_of(_1: &I) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:40:50: 40:50

    bb0: {
        return;                          // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:40:52: 40:52
    }
}

fn test(_1: I) -> () {
    debug it => _1;                      // in scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:42:33: 42:39
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:42:44: 42:44
    let _2: ();                          // in scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:43:5: 43:41
    let mut _3: &ByRef<'_, I>;           // in scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:43:28: 43:40
    let _4: &ByRef<'_, I>;               // in scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:43:28: 43:40
    let _5: ByRef<'_, I>;                // in scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:43:29: 43:40
    let mut _6: &mut I;                  // in scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:43:29: 43:40

    bb0: {
        _6 = &mut _1;                    // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:43:29: 43:40
        _5 = <I as IteratorExt>::by_ref(move _6) -> [return: bb1, unwind: bb4]; // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:43:29: 43:40
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:43:32: 43:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut I) -> ByRef<'a, I> {<I as IteratorExt>::by_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:43:28: 43:40
        _3 = _4;                         // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:43:28: 43:40
        _2 = is_iterator_of::<A, ByRef<'_, I>>(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:43:5: 43:41
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:43:5: 43:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a ByRef<'_, I>) {is_iterator_of::<A, ByRef<'_, I>>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:44:1: 44:2
    }

    bb3: {
        return;                          // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:44:2: 44:2
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:44:1: 44:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:42:1: 44:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:46:11: 46:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:46:14: 46:14
    }
}

fn ByRef(_1: &mut I) -> ByRef<'_, I> {
    let mut _0: ByRef<'_, I>;            // return place in scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:30:1: 30:35

    bb0: {
        _0 = ByRef::<'_, I>(move _1);    // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:30:1: 30:35
        return;                          // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:30:1: 30:35
    }
}

// MIR FOR CTFE
fn ByRef(_1: &mut I) -> ByRef<'_, I> {
    let mut _0: ByRef<'_, I>;            // return place in scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:30:1: 30:35

    bb0: {
        _0 = ByRef::<'_, I>(move _1);    // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:30:1: 30:35
        return;                          // scope 0 at ui/associated-types/associated-types-where-clause-impl-ambiguity.rs:30:1: 30:35
    }
}
