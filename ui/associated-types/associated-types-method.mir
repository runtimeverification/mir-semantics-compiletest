// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Tr::present(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-method.rs:12:16: 12:21
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-method.rs:12:23: 12:23

    bb0: {
        return;                          // scope 0 at ui/associated-types/associated-types-method.rs:12:25: 12:25
    }
}

fn <impl at ui/associated-types/associated-types-method.rs:15:1: 15:44>::present(_1: &Foo<D, <D as Device>::Resources>) -> () {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-method.rs:16:16: 16:21
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-method.rs:16:23: 16:23

    bb0: {
        return;                          // scope 0 at ui/associated-types/associated-types-method.rs:16:25: 16:25
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-method.rs:25:11: 25:11
    let _1: Foo<Dev, Res>;               // in scope 0 at ui/associated-types/associated-types-method.rs:26:9: 26:12
    let _2: ();                          // in scope 0 at ui/associated-types/associated-types-method.rs:27:5: 27:18
    let mut _3: &Foo<Dev, Res>;          // in scope 0 at ui/associated-types/associated-types-method.rs:27:5: 27:18
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/associated-types/associated-types-method.rs:26:9: 26:12
    }

    bb0: {
        _3 = &_1;                        // scope 1 at ui/associated-types/associated-types-method.rs:27:5: 27:18
        _2 = <Foo<Dev, Res> as Tr>::present(move _3) -> bb1; // scope 1 at ui/associated-types/associated-types-method.rs:27:5: 27:18
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-method.rs:27:9: 27:16
                                         // + literal: Const { ty: for<'a> fn(&'a Foo<Dev, Res>) {<Foo<Dev, Res> as Tr>::present}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/associated-types-method.rs:28:2: 28:2
    }
}

fn Foo(_1: D, _2: R) -> Foo<D, R> {
    let mut _0: Foo<D, R>;               // return place in scope 0 at ui/associated-types/associated-types-method.rs:9:1: 9:17

    bb0: {
        _0 = Foo::<D, R>(move _1, move _2); // scope 0 at ui/associated-types/associated-types-method.rs:9:1: 9:17
        return;                          // scope 0 at ui/associated-types/associated-types-method.rs:9:1: 9:17
    }
}

// MIR FOR CTFE
fn Foo(_1: D, _2: R) -> Foo<D, R> {
    let mut _0: Foo<D, R>;               // return place in scope 0 at ui/associated-types/associated-types-method.rs:9:1: 9:17

    bb0: {
        _0 = Foo::<D, R>(move _1, move _2); // scope 0 at ui/associated-types/associated-types-method.rs:9:1: 9:17
        return;                          // scope 0 at ui/associated-types/associated-types-method.rs:9:1: 9:17
    }
}
