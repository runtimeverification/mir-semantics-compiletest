// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/issue-18655.rs:7:1: 7:21>::create(_1: &f64) -> f64 {
    debug self => _1;                    // in scope 0 at ui/associated-types/issue-18655.rs:9:15: 9:20
    let mut _0: f64;                     // return place in scope 0 at ui/associated-types/issue-18655.rs:9:25: 9:28
    let mut _2: f64;                     // in scope 0 at ui/associated-types/issue-18655.rs:9:31: 9:36
    let mut _3: f64;                     // in scope 0 at ui/associated-types/issue-18655.rs:9:39: 9:44

    bb0: {
        _2 = (*_1);                      // scope 0 at ui/associated-types/issue-18655.rs:9:31: 9:36
        _3 = (*_1);                      // scope 0 at ui/associated-types/issue-18655.rs:9:39: 9:44
        _0 = Mul(move _2, move _3);      // scope 0 at ui/associated-types/issue-18655.rs:9:31: 9:44
        return;                          // scope 0 at ui/associated-types/issue-18655.rs:9:46: 9:46
    }
}

fn <impl at ui/associated-types/issue-18655.rs:12:1: 12:48>::create(_1: &(A, B)) -> (<A as Factory>::Product, <B as Factory>::Product) {
    debug self => _1;                    // in scope 0 at ui/associated-types/issue-18655.rs:14:15: 14:20
    let mut _0: (<A as Factory>::Product, <B as Factory>::Product); // return place in scope 0 at ui/associated-types/issue-18655.rs:14:25: 14:75
    let _2: &A;                          // in scope 0 at ui/associated-types/issue-18655.rs:15:14: 15:19
    let _3: &B;                          // in scope 0 at ui/associated-types/issue-18655.rs:15:21: 15:26
    let mut _4: <A as Factory>::Product; // in scope 0 at ui/associated-types/issue-18655.rs:16:10: 16:20
    let mut _5: &A;                      // in scope 0 at ui/associated-types/issue-18655.rs:16:10: 16:20
    let mut _6: <B as Factory>::Product; // in scope 0 at ui/associated-types/issue-18655.rs:16:22: 16:32
    let mut _7: &B;                      // in scope 0 at ui/associated-types/issue-18655.rs:16:22: 16:32
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/associated-types/issue-18655.rs:15:14: 15:19
        debug b => _3;                   // in scope 1 at ui/associated-types/issue-18655.rs:15:21: 15:26
    }

    bb0: {
        _2 = &((*_1).0: A);              // scope 0 at ui/associated-types/issue-18655.rs:15:14: 15:19
        _3 = &((*_1).1: B);              // scope 0 at ui/associated-types/issue-18655.rs:15:21: 15:26
        _5 = _2;                         // scope 1 at ui/associated-types/issue-18655.rs:16:10: 16:20
        _4 = <A as Factory>::create(move _5) -> bb1; // scope 1 at ui/associated-types/issue-18655.rs:16:10: 16:20
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-18655.rs:16:12: 16:18
                                         // + literal: Const { ty: for<'a> fn(&'a A) -> <A as Factory>::Product {<A as Factory>::create}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _3;                         // scope 1 at ui/associated-types/issue-18655.rs:16:22: 16:32
        _6 = <B as Factory>::create(move _7) -> [return: bb2, unwind: bb3]; // scope 1 at ui/associated-types/issue-18655.rs:16:22: 16:32
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-18655.rs:16:24: 16:30
                                         // + literal: Const { ty: for<'a> fn(&'a B) -> <B as Factory>::Product {<B as Factory>::create}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = (move _4, move _6);         // scope 1 at ui/associated-types/issue-18655.rs:16:9: 16:33
        return;                          // scope 0 at ui/associated-types/issue-18655.rs:17:6: 17:6
    }

    bb3 (cleanup): {
        drop(_4) -> bb4;                 // scope 1 at ui/associated-types/issue-18655.rs:16:32: 16:33
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/issue-18655.rs:14:5: 17:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-18655.rs:20:11: 20:11
    let mut _1: (&(f64, f64), &(f64, f64)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &(f64, f64);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &(f64, f64);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: (f64, f64);                  // in scope 0 at ui/associated-types/issue-18655.rs:21:28: 21:45
    let mut _5: &(f64, f64);             // in scope 0 at ui/associated-types/issue-18655.rs:21:28: 21:45
    let _6: &(f64, f64);                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &(f64, f64);                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &(f64, f64);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &(f64, f64);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &(f64, f64);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &(f64, f64);                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &(f64, f64);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &(f64, f64);                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: &(f64, f64);            // in scope 0 at ui/associated-types/issue-18655.rs:21:28: 21:45
    let mut _21: &(f64, f64);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _21 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &(f64, f64), val: Unevaluated(main, [], Some(promoted[1])) }
        _2 = _21;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _20 = const _;                   // scope 0 at ui/associated-types/issue-18655.rs:21:28: 21:45
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-18655.rs:21:28: 21:45
                                         // + literal: Const { ty: &(f64, f64), val: Unevaluated(main, [], Some(promoted[0])) }
        _5 = _20;                        // scope 0 at ui/associated-types/issue-18655.rs:21:28: 21:45
        _4 = <(f64, f64) as Factory>::create(move _5) -> bb1; // scope 0 at ui/associated-types/issue-18655.rs:21:28: 21:45
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-18655.rs:21:37: 21:43
                                         // + literal: Const { ty: for<'a> fn(&'a (f64, f64)) -> <(f64, f64) as Factory>::Product {<(f64, f64) as Factory>::create}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_1.0: &(f64, f64));        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_1.1: &(f64, f64));        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <(f64, f64) as PartialEq>::eq(move _10, move _11) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (f64, f64), &'b (f64, f64)) -> bool {<(f64, f64) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<(f64, f64), (f64, f64)>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (f64, f64), &'b (f64, f64), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(f64, f64), (f64, f64)>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/associated-types/issue-18655.rs:22:2: 22:2
    }
}

promoted[0] in main: &(f64, f64) = {
    let mut _0: &(f64, f64);             // return place in scope 0 at ui/associated-types/issue-18655.rs:21:28: 21:45
    let mut _1: (f64, f64);              // in scope 0 at ui/associated-types/issue-18655.rs:21:28: 21:36

    bb0: {
        _1 = (const 4f64, const 5f64);   // scope 0 at ui/associated-types/issue-18655.rs:21:28: 21:36
        _0 = &_1;                        // scope 0 at ui/associated-types/issue-18655.rs:21:28: 21:45
        return;                          // scope 0 at ui/associated-types/issue-18655.rs:21:28: 21:45
    }
}

promoted[1] in main: &(f64, f64) = {
    let mut _0: &(f64, f64);             // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: (f64, f64);              // in scope 0 at ui/associated-types/issue-18655.rs:21:16: 21:26

    bb0: {
        _1 = (const 16f64, const 25f64); // scope 0 at ui/associated-types/issue-18655.rs:21:16: 21:26
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}
