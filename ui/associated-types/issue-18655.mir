// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/issue-18655.rs:7:1: 7:21>::create(_1: &f64) -> f64 {
    debug self => _1;
    let mut _0: f64;
    let mut _2: f64;
    let mut _3: f64;

    bb0: {
        _2 = (*_1);
        _3 = (*_1);
        _0 = Mul(move _2, move _3);
        return;
    }
}

fn <impl at ui/associated-types/issue-18655.rs:12:1: 12:48>::create(_1: &(A, B)) -> (<A as Factory>::Product, <B as Factory>::Product) {
    debug self => _1;
    let mut _0: (<A as Factory>::Product, <B as Factory>::Product);
    let _2: &A;
    let _3: &B;
    let mut _4: <A as Factory>::Product;
    let mut _5: <B as Factory>::Product;
    scope 1 {
        debug a => _2;
        debug b => _3;
    }

    bb0: {
        _2 = &((*_1).0: A);
        _3 = &((*_1).1: B);
        _4 = <A as Factory>::create(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = <B as Factory>::create(_3) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = (move _4, move _5);
        return;
    }

    bb3 (cleanup): {
        drop(_4) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&(f64, f64), &(f64, f64));
    let mut _2: &(f64, f64);
    let _3: (f64, f64);
    let _4: &(f64, f64);
    let _5: &(f64, f64);
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: &(f64, f64);
    let mut _12: &(f64, f64);
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }

    bb0: {
        _12 = const _;
        _11 = const _;
        _3 = <(f64, f64) as Factory>::create(_11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _1 = (_12, move _2);
        _4 = (_1.0: &(f64, f64));
        _5 = (_1.1: &(f64, f64));
        _7 = <(f64, f64) as PartialEq>::eq(_4, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<(f64, f64), (f64, f64)>(move _8, _4, _5, move _10) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &(f64, f64) = {
    let mut _0: &(f64, f64);
    let mut _1: (f64, f64);

    bb0: {
        _1 = (const 4f64, const 5f64);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &(f64, f64) = {
    let mut _0: &(f64, f64);
    let mut _1: (f64, f64);

    bb0: {
        _1 = (const 16f64, const 25f64);
        _0 = &_1;
        return;
    }
}
