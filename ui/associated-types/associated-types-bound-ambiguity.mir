// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn PrimeField::method() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-bound-ambiguity.rs:12:17: 12:17
    let _1: <Self as PrimeField>::Repr;  // in scope 0 at ui/associated-types/associated-types-bound-ambiguity.rs:13:9: 13:29
    let _2: <Self as PrimeField>::Repr2; // in scope 0 at ui/associated-types/associated-types-bound-ambiguity.rs:14:9: 14:30

    bb0: {
        _1 = <<Self as PrimeField>::Repr as From<u64>>::from(const 10_u64) -> bb1; // scope 0 at ui/associated-types/associated-types-bound-ambiguity.rs:13:9: 13:29
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-bound-ambiguity.rs:13:9: 13:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u64) -> <Self as PrimeField>::Repr {<<Self as PrimeField>::Repr as From<u64>>::from}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/associated-types/associated-types-bound-ambiguity.rs:13:29: 13:30
    }

    bb2: {
        _2 = <<Self as PrimeField>::Repr2 as From<u64>>::from(const 10_u64) -> bb3; // scope 0 at ui/associated-types/associated-types-bound-ambiguity.rs:14:9: 14:30
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-bound-ambiguity.rs:14:9: 14:26
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(u64) -> <Self as PrimeField>::Repr2 {<<Self as PrimeField>::Repr2 as From<u64>>::from}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_2) -> bb4;                 // scope 0 at ui/associated-types/associated-types-bound-ambiguity.rs:14:30: 14:31
    }

    bb4: {
        return;                          // scope 0 at ui/associated-types/associated-types-bound-ambiguity.rs:15:6: 15:6
    }
}

fn function() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-bound-ambiguity.rs:18:30: 18:30
    let _1: <T as PrimeField>::Repr;     // in scope 0 at ui/associated-types/associated-types-bound-ambiguity.rs:19:5: 19:22
    let _2: <T as PrimeField>::Repr2;    // in scope 0 at ui/associated-types/associated-types-bound-ambiguity.rs:20:5: 20:23

    bb0: {
        _1 = <<T as PrimeField>::Repr as From<u64>>::from(const 10_u64) -> bb1; // scope 0 at ui/associated-types/associated-types-bound-ambiguity.rs:19:5: 19:22
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-bound-ambiguity.rs:19:5: 19:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u64) -> <T as PrimeField>::Repr {<<T as PrimeField>::Repr as From<u64>>::from}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/associated-types/associated-types-bound-ambiguity.rs:19:22: 19:23
    }

    bb2: {
        _2 = <<T as PrimeField>::Repr2 as From<u64>>::from(const 10_u64) -> bb3; // scope 0 at ui/associated-types/associated-types-bound-ambiguity.rs:20:5: 20:23
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-bound-ambiguity.rs:20:5: 20:19
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(u64) -> <T as PrimeField>::Repr2 {<<T as PrimeField>::Repr2 as From<u64>>::from}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_2) -> bb4;                 // scope 0 at ui/associated-types/associated-types-bound-ambiguity.rs:20:23: 20:24
    }

    bb4: {
        return;                          // scope 0 at ui/associated-types/associated-types-bound-ambiguity.rs:21:2: 21:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-bound-ambiguity.rs:23:11: 23:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/associated-types-bound-ambiguity.rs:23:13: 23:13
    }
}
