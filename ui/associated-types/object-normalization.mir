// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn next(_1: &mut dyn SVec<Output = T, Item = T>) -> () {
    debug s => _1;                       // in scope 0 at ui/associated-types/object-normalization.rs:9:16: 9:17
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/object-normalization.rs:9:59: 9:59
    let mut _2: usize;                   // in scope 0 at ui/associated-types/object-normalization.rs:17:13: 17:20
    let mut _3: &dyn SVec<Output = T, Item = T>; // in scope 0 at ui/associated-types/object-normalization.rs:17:13: 17:20
    scope 1 {
    }

    bb0: {
        _3 = &(*_1);                     // scope 0 at ui/associated-types/object-normalization.rs:17:13: 17:20
        _2 = <dyn SVec<Output = T, Item = T> as SVec>::len(move _3) -> bb1; // scope 0 at ui/associated-types/object-normalization.rs:17:13: 17:20
                                         // mir::Constant
                                         // + span: ui/associated-types/object-normalization.rs:17:15: 17:18
                                         // + literal: Const { ty: for<'a> fn(&'a dyn SVec<Output = T, Item = T>) -> usize {<dyn SVec<Output = T, Item = T> as SVec>::len}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/object-normalization.rs:18:2: 18:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/object-normalization.rs:26:11: 26:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/object-normalization.rs:26:13: 26:13
    }
}
