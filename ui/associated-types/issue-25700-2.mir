// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn record_type(_1: <Id as AstId>::Untyped) -> u8 {
    debug i => _1;
    let mut _0: u8;
    let mut _2: Iter<Map<<Id as AstId>::Untyped, [closure@ui/associated-types/issue-25700-2.rs:18:17: 18:33]>>;
    let mut _3: Map<<Id as AstId>::Untyped, [closure@ui/associated-types/issue-25700-2.rs:18:17: 18:33]>;

    bb0: {
        _3 = Map::<<Id as AstId>::Untyped, [closure@ui/associated-types/issue-25700-2.rs:18:17: 18:33]>(move _1, const ZeroSized: [closure@ui/associated-types/issue-25700-2.rs:18:17: 18:33]);
        _2 = Iter::<Map<<Id as AstId>::Untyped, [closure@ui/associated-types/issue-25700-2.rs:18:17: 18:33]>>(move _3, const 42_u8);
        _0 = (_2.1: u8);
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn record_type::{closure#0}(_1: &[closure@ui/associated-types/issue-25700-2.rs:18:17: 18:33], _2: <Id as AstId>::Untyped) -> () {
    let mut _0: ();

    bb0: {
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u8, &u8);
    let mut _2: &u8;
    let _3: u8;
    let _4: &u8;
    let _5: &u8;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: u8;
    let mut _9: u8;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: &u8;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }

    bb0: {
        _3 = record_type::<u32>(const 3_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _13 = const _;
        _1 = (move _2, _13);
        _4 = (_1.0: &u8);
        _5 = (_1.1: &u8);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<u8, u8>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 42_u8;
        _0 = &_1;
        return;
    }
}

fn Iter(_1: P, _2: <P as Parser>::Input) -> Iter<P> {
    let mut _0: Iter<P>;

    bb0: {
        _0 = Iter::<P>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Iter(_1: P, _2: <P as Parser>::Input) -> Iter<P> {
    let mut _0: Iter<P>;

    bb0: {
        _0 = Iter::<P>(move _1, move _2);
        return;
    }
}

fn Map(_1: P, _2: F) -> Map<P, F> {
    let mut _0: Map<P, F>;

    bb0: {
        _0 = Map::<P, F>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Map(_1: P, _2: F) -> Map<P, F> {
    let mut _0: Map<P, F>;

    bb0: {
        _0 = Map::<P, F>(move _1, move _2);
        return;
    }
}
