// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-37808.rs:19:11: 19:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/issue-37808.rs:19:13: 19:13
    }
}

fn ChildWrapper(_1: T) -> ChildWrapper<T> {
    let mut _0: ChildWrapper<T>;         // return place in scope 0 at ui/associated-types/issue-37808.rs:10:1: 10:23

    bb0: {
        _0 = ChildWrapper::<T>(move _1); // scope 0 at ui/associated-types/issue-37808.rs:10:1: 10:23
        return;                          // scope 0 at ui/associated-types/issue-37808.rs:10:1: 10:23
    }
}

// MIR FOR CTFE
fn ChildWrapper(_1: T) -> ChildWrapper<T> {
    let mut _0: ChildWrapper<T>;         // return place in scope 0 at ui/associated-types/issue-37808.rs:10:1: 10:23

    bb0: {
        _0 = ChildWrapper::<T>(move _1); // scope 0 at ui/associated-types/issue-37808.rs:10:1: 10:23
        return;                          // scope 0 at ui/associated-types/issue-37808.rs:10:1: 10:23
    }
}

fn ParentWrapper(_1: T) -> ParentWrapper<T> {
    let mut _0: ParentWrapper<T>;        // return place in scope 0 at ui/associated-types/issue-37808.rs:13:1: 13:24

    bb0: {
        _0 = ParentWrapper::<T>(move _1); // scope 0 at ui/associated-types/issue-37808.rs:13:1: 13:24
        return;                          // scope 0 at ui/associated-types/issue-37808.rs:13:1: 13:24
    }
}

// MIR FOR CTFE
fn ParentWrapper(_1: T) -> ParentWrapper<T> {
    let mut _0: ParentWrapper<T>;        // return place in scope 0 at ui/associated-types/issue-37808.rs:13:1: 13:24

    bb0: {
        _0 = ParentWrapper::<T>(move _1); // scope 0 at ui/associated-types/issue-37808.rs:13:1: 13:24
        return;                          // scope 0 at ui/associated-types/issue-37808.rs:13:1: 13:24
    }
}
