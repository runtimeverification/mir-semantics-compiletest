// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn pairwise_sub(_1: Box<dyn DoubleEndedIterator<Item = isize>>) -> isize {
    debug t => _1;                       // in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:3:17: 3:22
    let mut _0: isize;                   // return place in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:4:9: 4:19
    let mut _3: &mut std::boxed::Box<dyn std::iter::DoubleEndedIterator<Item = isize>>; // in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:6:21: 6:29
    let mut _5: &mut std::boxed::Box<dyn std::iter::DoubleEndedIterator<Item = isize>>; // in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:7:20: 7:33
    let mut _6: (std::option::Option<isize>, std::option::Option<isize>); // in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:8:15: 8:28
    let mut _7: std::option::Option<isize>; // in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:8:16: 8:21
    let mut _8: std::option::Option<isize>; // in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:8:23: 8:27
    let mut _9: isize;                   // in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:23: 9:30
    let mut _10: isize;                  // in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:14: 9:21
    let mut _13: isize;                  // in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:47: 9:52
    let mut _14: isize;                  // in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:47: 9:48
    let mut _15: isize;                  // in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:51: 9:52
    let mut _16: (isize, bool);          // in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:47: 9:52
    let mut _17: (isize, bool);          // in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:37: 9:52
    scope 1 {
        debug result => _0;              // in scope 1 at ui/associated-types/associated-types-doubleendediterator-object.rs:4:9: 4:19
        let _2: std::option::Option<isize>; // in scope 1 at ui/associated-types/associated-types-doubleendediterator-object.rs:6:13: 6:18
        scope 2 {
            debug front => _2;           // in scope 2 at ui/associated-types/associated-types-doubleendediterator-object.rs:6:13: 6:18
            let _4: std::option::Option<isize>; // in scope 2 at ui/associated-types/associated-types-doubleendediterator-object.rs:7:13: 7:17
            scope 3 {
                debug back => _4;        // in scope 3 at ui/associated-types/associated-types-doubleendediterator-object.rs:7:13: 7:17
                let _11: isize;          // in scope 3 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:19: 9:20
                let _12: isize;          // in scope 3 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:28: 9:29
                scope 4 {
                    debug f => _11;      // in scope 4 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:19: 9:20
                    debug b => _12;      // in scope 4 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:28: 9:29
                }
            }
        }
    }

    bb0: {
        _0 = const 0_isize;              // scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:4:22: 4:23
        goto -> bb1;                     // scope 1 at ui/associated-types/associated-types-doubleendediterator-object.rs:5:5: 12:6
    }

    bb1: {
        _3 = &mut _1;                    // scope 1 at ui/associated-types/associated-types-doubleendediterator-object.rs:6:21: 6:29
        _2 = <Box<dyn DoubleEndedIterator<Item = isize>> as Iterator>::next(move _3) -> [return: bb2, unwind: bb10]; // scope 1 at ui/associated-types/associated-types-doubleendediterator-object.rs:6:21: 6:29
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-doubleendediterator-object.rs:6:23: 6:27
                                         // + literal: Const { ty: for<'a> fn(&'a mut Box<dyn DoubleEndedIterator<Item = isize>>) -> Option<<Box<dyn DoubleEndedIterator<Item = isize>> as Iterator>::Item> {<Box<dyn DoubleEndedIterator<Item = isize>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &mut _1;                    // scope 2 at ui/associated-types/associated-types-doubleendediterator-object.rs:7:20: 7:33
        _4 = <Box<dyn DoubleEndedIterator<Item = isize>> as DoubleEndedIterator>::next_back(move _5) -> [return: bb3, unwind: bb10]; // scope 2 at ui/associated-types/associated-types-doubleendediterator-object.rs:7:20: 7:33
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-doubleendediterator-object.rs:7:22: 7:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut Box<dyn DoubleEndedIterator<Item = isize>>) -> Option<<Box<dyn DoubleEndedIterator<Item = isize>> as Iterator>::Item> {<Box<dyn DoubleEndedIterator<Item = isize>> as DoubleEndedIterator>::next_back}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = _2;                         // scope 3 at ui/associated-types/associated-types-doubleendediterator-object.rs:8:16: 8:21
        _8 = _4;                         // scope 3 at ui/associated-types/associated-types-doubleendediterator-object.rs:8:23: 8:27
        _6 = (move _7, move _8);         // scope 3 at ui/associated-types/associated-types-doubleendediterator-object.rs:8:15: 8:28
        _10 = discriminant((_6.0: std::option::Option<isize>)); // scope 3 at ui/associated-types/associated-types-doubleendediterator-object.rs:8:15: 8:28
        switchInt(move _10) -> [1: bb5, otherwise: bb4]; // scope 3 at ui/associated-types/associated-types-doubleendediterator-object.rs:8:9: 8:28
    }

    bb4: {
        drop(_1) -> bb9;                 // scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:13:1: 13:2
    }

    bb5: {
        _9 = discriminant((_6.1: std::option::Option<isize>)); // scope 3 at ui/associated-types/associated-types-doubleendediterator-object.rs:8:15: 8:28
        switchInt(move _9) -> [1: bb6, otherwise: bb4]; // scope 3 at ui/associated-types/associated-types-doubleendediterator-object.rs:8:9: 8:28
    }

    bb6: {
        _11 = (((_6.0: std::option::Option<isize>) as Some).0: isize); // scope 3 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:19: 9:20
        _12 = (((_6.1: std::option::Option<isize>) as Some).0: isize); // scope 3 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:28: 9:29
        _14 = _12;                       // scope 4 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:47: 9:48
        _15 = _11;                       // scope 4 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:51: 9:52
        _16 = CheckedSub(_14, _15);      // scope 4 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:47: 9:52
        assert(!move (_16.1: bool), "attempt to compute `{} - {}`, which would overflow", move _14, move _15) -> [success: bb7, unwind: bb10]; // scope 4 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:47: 9:52
    }

    bb7: {
        _13 = move (_16.0: isize);       // scope 4 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:47: 9:52
        _17 = CheckedAdd(_0, _13);       // scope 4 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:37: 9:52
        assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", _0, move _13) -> [success: bb8, unwind: bb10]; // scope 4 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:37: 9:52
    }

    bb8: {
        _0 = move (_17.0: isize);        // scope 4 at ui/associated-types/associated-types-doubleendediterator-object.rs:9:37: 9:52
        goto -> bb1;                     // scope 1 at ui/associated-types/associated-types-doubleendediterator-object.rs:5:5: 12:6
    }

    bb9: {
        return;                          // scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:13:2: 13:2
    }

    bb10 (cleanup): {
        drop(_1) -> bb11;                // scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:13:1: 13:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:3:1: 13:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:15:11: 15:11
    let _1: std::vec::Vec<isize>;        // in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:16:9: 16:10
    let mut _2: std::boxed::Box<[isize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[isize; 6]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[isize; 6]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: std::boxed::Box<dyn std::iter::DoubleEndedIterator<Item = isize>>; // in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:17:26: 17:49
    let mut _10: std::boxed::Box<std::vec::IntoIter<isize>>; // in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:17:26: 17:49
    let mut _11: std::vec::IntoIter<isize>; // in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:17:35: 17:48
    let mut _12: std::vec::Vec<isize>;   // in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:17:35: 17:36
    let mut _13: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _14: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _15: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _20: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _21: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _23: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _24: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _25: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _26: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _27: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _28: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _31: *const [isize; 6];      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/associated-types/associated-types-doubleendediterator-object.rs:16:9: 16:10
        let _8: isize;                   // in scope 1 at ui/associated-types/associated-types-doubleendediterator-object.rs:17:9: 17:10
        scope 3 {
            debug r => _8;               // in scope 3 at ui/associated-types/associated-types-doubleendediterator-object.rs:17:9: 17:10
            let _16: &isize;             // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _17: &isize;             // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _30: &isize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 4 {
                debug left_val => _16;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _17;  // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _22: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 5 {
                    debug kind => _22;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = const 48_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [isize; 6]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _31 = (((_7.0: std::ptr::Unique<[isize; 6]>).0: std::ptr::NonNull<[isize; 6]>).0: *const [isize; 6]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_31) = [const 1_isize, const 2_isize, const 3_isize, const 4_isize, const 5_isize, const 6_isize]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[isize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[isize]>) -> Vec<isize> {slice::<impl [isize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = move _1;                   // scope 1 at ui/associated-types/associated-types-doubleendediterator-object.rs:17:35: 17:36
        _11 = <Vec<isize> as IntoIterator>::into_iter(move _12) -> bb3; // scope 1 at ui/associated-types/associated-types-doubleendediterator-object.rs:17:35: 17:48
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-doubleendediterator-object.rs:17:37: 17:46
                                         // + literal: Const { ty: fn(Vec<isize>) -> <Vec<isize> as IntoIterator>::IntoIter {<Vec<isize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = Box::<std::vec::IntoIter<isize>>::new(move _11) -> bb4; // scope 1 at ui/associated-types/associated-types-doubleendediterator-object.rs:17:26: 17:49
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-doubleendediterator-object.rs:17:26: 17:34
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(std::vec::IntoIter<isize>) -> Box<std::vec::IntoIter<isize>> {Box::<std::vec::IntoIter<isize>>::new}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = move _10 as std::boxed::Box<dyn std::iter::DoubleEndedIterator<Item = isize>> (Pointer(Unsize)); // scope 1 at ui/associated-types/associated-types-doubleendediterator-object.rs:17:26: 17:49
        _8 = pairwise_sub(move _9) -> bb5; // scope 1 at ui/associated-types/associated-types-doubleendediterator-object.rs:17:13: 17:50
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-doubleendediterator-object.rs:17:13: 17:25
                                         // + literal: Const { ty: fn(Box<(dyn DoubleEndedIterator<Item = isize> + 'static)>) -> isize {pairwise_sub}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = &_8;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _30 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _15 = _30;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _13 = (move _14, move _15);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _16 = (_13.0: &isize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _17 = (_13.1: &isize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _20 = (*_16);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _21 = const 9_isize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _19 = Eq(move _20, move _21);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _18 = Not(move _19);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _18) -> [0: bb7, otherwise: bb6]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _22 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = _16;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _26;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _17;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _23 = core::panicking::assert_failed::<isize, isize>(move _24, move _25, move _27, move _29); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:19:2: 19:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:18:19: 18:20

    bb0: {
        _1 = const 9_isize;              // scope 0 at ui/associated-types/associated-types-doubleendediterator-object.rs:18:19: 18:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
