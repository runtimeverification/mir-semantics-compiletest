// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn IteratorExt::by_ref(_1: &mut Self) -> ByRef<'_, Self> {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:24:15: 24:24
    let mut _0: ByRef<'_, Self>;         // return place in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:24:29: 24:40
    let mut _2: &mut Self;               // in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:25:15: 25:19

    bb0: {
        _2 = &mut (*_1);                 // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:25:15: 25:19
        _0 = ByRef::<'_, Self>(move _2); // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:25:9: 25:20
        return;                          // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:26:6: 26:6
    }
}

fn <impl at ui/associated-types/associated-types-impl-redirect.rs:33:1: 33:48>::next(_1: &mut ByRef<'_, I>) -> Option<<I as Iterator>::Item> {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:36:13: 36:22
    let mut _0: std::option::Option<<I as Iterator>::Item>; // return place in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:36:27: 36:58
    let mut _2: &mut I;                  // in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:37:9: 37:22
    let mut _3: &mut I;                  // in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:36:13: 36:22

    bb0: {
        _3 = deref_copy ((*_1).0: &mut I); // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:37:9: 37:22
        _2 = &mut (*_3);                 // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:37:9: 37:22
        _0 = <I as Iterator>::next(move _2) -> bb1; // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:37:9: 37:22
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-impl-redirect.rs:37:16: 37:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut I) -> Option<<I as Iterator>::Item> {<I as Iterator>::next}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:38:6: 38:6
    }
}

fn is_iterator_of(_1: &I) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:41:50: 41:50

    bb0: {
        return;                          // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:41:52: 41:52
    }
}

fn test(_1: I) -> () {
    debug it => _1;                      // in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:43:33: 43:39
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:43:44: 43:44
    let _2: ();                          // in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:44:5: 44:41
    let mut _3: &ByRef<'_, I>;           // in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:44:28: 44:40
    let _4: &ByRef<'_, I>;               // in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:44:28: 44:40
    let _5: ByRef<'_, I>;                // in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:44:29: 44:40
    let mut _6: &mut I;                  // in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:44:29: 44:40

    bb0: {
        _6 = &mut _1;                    // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:44:29: 44:40
        _5 = <I as IteratorExt>::by_ref(move _6) -> [return: bb1, unwind: bb4]; // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:44:29: 44:40
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-impl-redirect.rs:44:32: 44:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut I) -> ByRef<'a, I> {<I as IteratorExt>::by_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:44:28: 44:40
        _3 = _4;                         // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:44:28: 44:40
        _2 = is_iterator_of::<A, ByRef<'_, I>>(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:44:5: 44:41
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-impl-redirect.rs:44:5: 44:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a ByRef<'_, I>) {is_iterator_of::<A, ByRef<'_, I>>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:45:1: 45:2
    }

    bb3: {
        return;                          // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:45:2: 45:2
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:45:1: 45:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:43:1: 45:2
    }
}

fn test2(_1: I2) -> () {
    debug it => _1;                      // in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:47:64: 47:70
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:47:76: 47:76
    let mut _2: &I2;                     // in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:48:28: 48:31
    let _3: &I2;                         // in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:48:28: 48:31

    bb0: {
        _3 = &_1;                        // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:48:28: 48:31
        _2 = _3;                         // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:48:28: 48:31
        _0 = is_iterator_of::<A, I2>(move _2) -> [return: bb1, unwind: bb3]; // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:48:5: 48:32
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-impl-redirect.rs:48:5: 48:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a I2) {is_iterator_of::<A, I2>}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:49:1: 49:2
    }

    bb2: {
        return;                          // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:49:2: 49:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:49:1: 49:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:47:1: 49:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:51:11: 51:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:51:14: 51:14
    }
}

fn ByRef(_1: &mut I) -> ByRef<'_, I> {
    let mut _0: ByRef<'_, I>;            // return place in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:31:1: 31:35

    bb0: {
        _0 = ByRef::<'_, I>(move _1);    // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:31:1: 31:35
        return;                          // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:31:1: 31:35
    }
}

// MIR FOR CTFE
fn ByRef(_1: &mut I) -> ByRef<'_, I> {
    let mut _0: ByRef<'_, I>;            // return place in scope 0 at ui/associated-types/associated-types-impl-redirect.rs:31:1: 31:35

    bb0: {
        _0 = ByRef::<'_, I>(move _1);    // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:31:1: 31:35
        return;                          // scope 0 at ui/associated-types/associated-types-impl-redirect.rs:31:1: 31:35
    }
}
