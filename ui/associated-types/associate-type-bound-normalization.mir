// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn is_mul() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associate-type-bound-normalization.rs:16:40: 16:40

    bb0: {
        return;                          // scope 0 at ui/associated-types/associate-type-bound-normalization.rs:16:42: 16:42
    }
}

fn f() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associate-type-bound-normalization.rs:18:19: 18:19
    let _1: ();                          // in scope 0 at ui/associated-types/associate-type-bound-normalization.rs:22:5: 22:37

    bb0: {
        _1 = is_mul::<<T as Matrix>::Row, <T as Matrix>::Transpose>() -> bb1; // scope 0 at ui/associated-types/associate-type-bound-normalization.rs:22:5: 22:37
                                         // mir::Constant
                                         // + span: ui/associated-types/associate-type-bound-normalization.rs:22:5: 22:35
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {is_mul::<<T as Matrix>::Row, <T as Matrix>::Transpose>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/associate-type-bound-normalization.rs:23:2: 23:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associate-type-bound-normalization.rs:25:11: 25:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/associate-type-bound-normalization.rs:25:13: 25:13
    }
}
