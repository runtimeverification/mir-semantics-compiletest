// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn LineFormatter::dimensions(_1: &Self, _2: &str) -> () {
    debug self => _1;                    // in scope 0 at ui/associated-types/issue-22066.rs:6:19: 6:27
    debug line => _2;                    // in scope 0 at ui/associated-types/issue-22066.rs:6:29: 6:33
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-22066.rs:6:44: 6:44
    let _3: <Self as LineFormatter<'_>>::Iter; // in scope 0 at ui/associated-types/issue-22066.rs:7:13: 7:17
    let mut _4: &Self;                   // in scope 0 at ui/associated-types/issue-22066.rs:7:32: 7:47
    let mut _5: &str;                    // in scope 0 at ui/associated-types/issue-22066.rs:7:42: 7:46
    let _6: <Self as LineFormatter<'_>>::Iter; // in scope 0 at ui/associated-types/issue-22066.rs:8:9: 8:45
    let mut _7: <Self as LineFormatter<'_>>::Iter; // in scope 0 at ui/associated-types/issue-22066.rs:8:40: 8:44
    scope 1 {
        debug iter => _3;                // in scope 1 at ui/associated-types/issue-22066.rs:7:13: 7:17
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/associated-types/issue-22066.rs:7:32: 7:47
        _5 = _2;                         // scope 0 at ui/associated-types/issue-22066.rs:7:42: 7:46
        _3 = <Self as LineFormatter<'_>>::iter(move _4, move _5) -> bb1; // scope 0 at ui/associated-types/issue-22066.rs:7:32: 7:47
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-22066.rs:7:37: 7:41
                                         // + literal: Const { ty: fn(&Self, &str) -> <Self as LineFormatter<'_>>::Iter {<Self as LineFormatter<'_>>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = move _3;                    // scope 1 at ui/associated-types/issue-22066.rs:8:40: 8:44
        _6 = <<Self as LineFormatter<'_>>::Iter as IntoIterator>::into_iter(move _7) -> bb2; // scope 1 at ui/associated-types/issue-22066.rs:8:9: 8:45
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-22066.rs:8:9: 8:39
                                         // + literal: Const { ty: fn(<Self as LineFormatter<'_>>::Iter) -> <<Self as LineFormatter<'_>>::Iter as IntoIterator>::IntoIter {<<Self as LineFormatter<'_>>::Iter as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_6) -> bb3;                 // scope 1 at ui/associated-types/issue-22066.rs:8:45: 8:46
    }

    bb3: {
        return;                          // scope 0 at ui/associated-types/issue-22066.rs:9:6: 9:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-22066.rs:12:11: 12:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/issue-22066.rs:12:13: 12:13
    }
}
