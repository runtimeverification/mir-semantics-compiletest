// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn convenience_operators::<impl at ui/associated-types/issue-82079.rs:11:5: 11:28>::map(_1: Relation<C>, _2: F) -> Relation<impl Op<D = D2, R = <C as Op>::R>> {
    debug self => _1;                    // in scope 0 at ui/associated-types/issue-82079.rs:13:13: 13:17
    debug f => _2;                       // in scope 0 at ui/associated-types/issue-82079.rs:14:13: 14:14
    let mut _0: core::Relation<impl core::operator::Op<D = D2, R = <C as core::operator::Op>::R>>; // return place in scope 0 at ui/associated-types/issue-82079.rs:15:14: 15:49
    let mut _3: core::Relation<C>;       // in scope 0 at ui/associated-types/issue-82079.rs:16:13: 16:17
    let mut _4: [closure@ui/associated-types/issue-82079.rs:16:25: 16:36]; // in scope 0 at ui/associated-types/issue-82079.rs:16:25: 16:46

    bb0: {
        _3 = move _1;                    // scope 0 at ui/associated-types/issue-82079.rs:16:13: 16:17
        _4 = [closure@ui/associated-types/issue-82079.rs:16:25: 16:36] { f: move _2 }; // scope 0 at ui/associated-types/issue-82079.rs:16:25: 16:46
                                         // closure
                                         // + def_id: DefId(0:14 ~ issue_82079[4d8a]::convenience_operators::{impl#0}::map::{closure#0})
                                         // + substs: [
                                         //     C,
                                         //     F,
                                         //     D2,
                                         //     i8,
                                         //     extern "rust-call" fn((<C as core::operator::Op>::D, <C as core::operator::Op>::R)) -> (D2, <C as core::operator::Op>::R),
                                         //     (F,),
                                         // ]
        _0 = map::<impl Relation<C>>::map_dr::<[closure@ui/associated-types/issue-82079.rs:16:25: 16:36], D2, <C as Op>::R>(move _3, move _4) -> bb1; // scope 0 at ui/associated-types/issue-82079.rs:16:13: 16:47
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-82079.rs:16:18: 16:24
                                         // + literal: Const { ty: fn(Relation<C>, [closure@ui/associated-types/issue-82079.rs:16:25: 16:36]) -> Relation<impl Op<D = D2, R = <C as Op>::R>> {map::<impl Relation<C>>::map_dr::<[closure@ui/associated-types/issue-82079.rs:16:25: 16:36], D2, <C as Op>::R>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/issue-82079.rs:17:10: 17:10
    }
}

fn convenience_operators::<impl at ui/associated-types/issue-82079.rs:11:5: 11:28>::map::{closure#0}(_1: &[closure@ui/associated-types/issue-82079.rs:16:25: 16:36], _2: <C as Op>::D, _3: <C as Op>::R) -> (D2, <C as Op>::R) {
    debug x => _2;                       // in scope 0 at ui/associated-types/issue-82079.rs:16:31: 16:32
    debug r => _3;                       // in scope 0 at ui/associated-types/issue-82079.rs:16:34: 16:35
    debug f => ((*_1).0: F);             // in scope 0 at ui/associated-types/issue-82079.rs:14:13: 14:14
    let mut _0: (D2, <C as core::operator::Op>::R); // return place in scope 0 at ui/associated-types/issue-82079.rs:16:37: 16:37
    let mut _4: D2;                      // in scope 0 at ui/associated-types/issue-82079.rs:16:38: 16:42
    let mut _5: &F;                      // in scope 0 at ui/associated-types/issue-82079.rs:16:38: 16:39
    let mut _6: (<C as core::operator::Op>::D,); // in scope 0 at ui/associated-types/issue-82079.rs:16:38: 16:42
    let mut _7: <C as core::operator::Op>::D; // in scope 0 at ui/associated-types/issue-82079.rs:16:40: 16:41
    let mut _8: <C as core::operator::Op>::R; // in scope 0 at ui/associated-types/issue-82079.rs:16:44: 16:45

    bb0: {
        _5 = &((*_1).0: F);              // scope 0 at ui/associated-types/issue-82079.rs:16:38: 16:39
        _7 = move _2;                    // scope 0 at ui/associated-types/issue-82079.rs:16:40: 16:41
        _6 = (move _7,);                 // scope 0 at ui/associated-types/issue-82079.rs:16:38: 16:42
        _4 = <F as Fn<(<C as Op>::D,)>>::call(move _5, move _6) -> [return: bb1, unwind: bb2]; // scope 0 at ui/associated-types/issue-82079.rs:16:38: 16:42
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-82079.rs:16:38: 16:39
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a F, (<C as Op>::D,)) -> <F as FnOnce<(<C as Op>::D,)>>::Output {<F as Fn<(<C as Op>::D,)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = move _3;                    // scope 0 at ui/associated-types/issue-82079.rs:16:44: 16:45
        _0 = (move _4, move _8);         // scope 0 at ui/associated-types/issue-82079.rs:16:37: 16:46
        return;                          // scope 0 at ui/associated-types/issue-82079.rs:16:46: 16:46
    }

    bb2 (cleanup): {
        drop(_3) -> bb3;                 // scope 0 at ui/associated-types/issue-82079.rs:16:45: 16:46
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/issue-82079.rs:16:25: 16:46
    }
}

fn convenience_operators::<impl at ui/associated-types/issue-82079.rs:20:5: 20:64>::semijoin(_1: Relation<C>, _2: Relation<C2>) -> Relation<impl Op<D = <C as Op>::D, R = R3>> {
    debug self => _1;                    // in scope 0 at ui/associated-types/issue-82079.rs:22:13: 22:17
    debug other => _2;                   // in scope 0 at ui/associated-types/issue-82079.rs:23:13: 23:18
    let mut _0: core::Relation<impl core::operator::Op<D = <C as core::operator::Op>::D, R = R3>>; // return place in scope 0 at ui/associated-types/issue-82079.rs:24:14: 24:49
    let mut _3: core::Relation<impl core::operator::Op<D = (K, V, ()), R = R3>>; // in scope 0 at ui/associated-types/issue-82079.rs:28:13: 28:46
    let mut _4: core::Relation<C>;       // in scope 0 at ui/associated-types/issue-82079.rs:28:13: 28:17
    let mut _5: core::Relation<impl core::operator::Op<D = (K, ()), R = <C2 as core::operator::Op>::R>>; // in scope 0 at ui/associated-types/issue-82079.rs:28:23: 28:45
    let mut _6: core::Relation<C2>;      // in scope 0 at ui/associated-types/issue-82079.rs:28:23: 28:28
    let mut _7: [closure@ui/associated-types/issue-82079.rs:28:33: 28:36]; // in scope 0 at ui/associated-types/issue-82079.rs:28:33: 28:44
    let mut _8: [closure@ui/associated-types/issue-82079.rs:28:51: 28:63]; // in scope 0 at ui/associated-types/issue-82079.rs:28:51: 28:70
    let mut _9: bool;                    // in scope 0 at ui/associated-types/issue-82079.rs:28:45: 28:46

    bb0: {
        _9 = const false;                // scope 0 at ui/associated-types/issue-82079.rs:28:13: 28:46
        _9 = const true;                 // scope 0 at ui/associated-types/issue-82079.rs:28:13: 28:17
        _4 = move _1;                    // scope 0 at ui/associated-types/issue-82079.rs:28:13: 28:17
        _6 = move _2;                    // scope 0 at ui/associated-types/issue-82079.rs:28:23: 28:28
        _5 = convenience_operators::<impl Relation<C2>>::map::<[closure@ui/associated-types/issue-82079.rs:28:33: 28:36], (K, ())>(move _6, move _7) -> [return: bb1, unwind: bb6]; // scope 0 at ui/associated-types/issue-82079.rs:28:23: 28:45
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-82079.rs:28:29: 28:32
                                         // + literal: Const { ty: fn(Relation<C2>, [closure@ui/associated-types/issue-82079.rs:28:33: 28:36]) -> Relation<impl Op<D = (K, ()), R = <C2 as Op>::R>> {convenience_operators::<impl Relation<C2>>::map::<[closure@ui/associated-types/issue-82079.rs:28:33: 28:36], (K, ())>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = const false;                // scope 0 at ui/associated-types/issue-82079.rs:28:13: 28:46
        _3 = join::<impl Relation<C>>::join::<impl Op<D = (K, ()), R = <C2 as Op>::R>, (), R3>(move _4, move _5) -> [return: bb2, unwind: bb6]; // scope 0 at ui/associated-types/issue-82079.rs:28:13: 28:46
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-82079.rs:28:18: 28:22
                                         // + literal: Const { ty: fn(Relation<C>, Relation<impl Op<D = (K, ()), R = <C2 as Op>::R>>) -> Relation<impl Op<D = (K, V, ()), R = R3>> {join::<impl Relation<C>>::join::<impl Op<D = (K, ()), R = <C2 as Op>::R>, (), R3>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = const false;                // scope 0 at ui/associated-types/issue-82079.rs:28:45: 28:46
        _0 = convenience_operators::<impl Relation<impl Op<D = (K, V, ()), R = R3>>>::map::<[closure@ui/associated-types/issue-82079.rs:28:51: 28:63], (K, V)>(move _3, move _8) -> bb3; // scope 0 at ui/associated-types/issue-82079.rs:28:13: 28:71
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-82079.rs:28:47: 28:50
                                         // + literal: Const { ty: fn(Relation<impl Op<D = (K, V, ()), R = R3>>, [closure@ui/associated-types/issue-82079.rs:28:51: 28:63]) -> Relation<impl Op<D = (K, V), R = <impl Op<D = (K, V, ()), R = R3> as Op>::R>> {convenience_operators::<impl Relation<impl Op<D = (K, V, ()), R = R3>>>::map::<[closure@ui/associated-types/issue-82079.rs:28:51: 28:63], (K, V)>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/associated-types/issue-82079.rs:29:10: 29:10
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/issue-82079.rs:21:9: 29:10
    }

    bb5 (cleanup): {
        drop(_4) -> bb4;                 // scope 0 at ui/associated-types/issue-82079.rs:28:45: 28:46
    }

    bb6 (cleanup): {
        switchInt(_9) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/associated-types/issue-82079.rs:28:45: 28:46
    }
}

fn convenience_operators::<impl at ui/associated-types/issue-82079.rs:20:5: 20:64>::semijoin::{closure#0}(_1: &[closure@ui/associated-types/issue-82079.rs:28:33: 28:36], _2: K) -> (K, ()) {
    debug x => _2;                       // in scope 0 at ui/associated-types/issue-82079.rs:28:34: 28:35
    let mut _0: (K, ());                 // return place in scope 0 at ui/associated-types/issue-82079.rs:28:37: 28:37
    let mut _3: K;                       // in scope 0 at ui/associated-types/issue-82079.rs:28:38: 28:39
    let mut _4: ();                      // in scope 0 at ui/associated-types/issue-82079.rs:28:41: 28:43

    bb0: {
        _3 = move _2;                    // scope 0 at ui/associated-types/issue-82079.rs:28:38: 28:39
        _0 = (move _3, move _4);         // scope 0 at ui/associated-types/issue-82079.rs:28:37: 28:44
        return;                          // scope 0 at ui/associated-types/issue-82079.rs:28:44: 28:44
    }
}

fn convenience_operators::<impl at ui/associated-types/issue-82079.rs:20:5: 20:64>::semijoin::{closure#1}(_1: &[closure@ui/associated-types/issue-82079.rs:28:51: 28:63], _2: (K, V, ())) -> (K, V) {
    let mut _0: (K, V);                  // return place in scope 0 at ui/associated-types/issue-82079.rs:28:64: 28:64
    let _3: K;                           // in scope 0 at ui/associated-types/issue-82079.rs:28:53: 28:54
    let _4: V;                           // in scope 0 at ui/associated-types/issue-82079.rs:28:56: 28:57
    let mut _5: K;                       // in scope 0 at ui/associated-types/issue-82079.rs:28:65: 28:66
    let mut _6: V;                       // in scope 0 at ui/associated-types/issue-82079.rs:28:68: 28:69
    scope 1 {
        debug k => _3;                   // in scope 1 at ui/associated-types/issue-82079.rs:28:53: 28:54
        debug x => _4;                   // in scope 1 at ui/associated-types/issue-82079.rs:28:56: 28:57
    }

    bb0: {
        _3 = move (_2.0: K);             // scope 0 at ui/associated-types/issue-82079.rs:28:53: 28:54
        _4 = move (_2.1: V);             // scope 0 at ui/associated-types/issue-82079.rs:28:56: 28:57
        _5 = move _3;                    // scope 1 at ui/associated-types/issue-82079.rs:28:65: 28:66
        _6 = move _4;                    // scope 1 at ui/associated-types/issue-82079.rs:28:68: 28:69
        _0 = (move _5, move _6);         // scope 1 at ui/associated-types/issue-82079.rs:28:64: 28:70
        return;                          // scope 0 at ui/associated-types/issue-82079.rs:28:70: 28:70
    }
}

fn join::<impl at ui/associated-types/issue-82079.rs:57:13: 57:72>::join(_1: Relation<C>, _2: Relation<C2>) -> Relation<impl Op<D = (K, D, D2), R = OR>> {
    debug self => _1;                    // in scope 0 at ui/associated-types/issue-82079.rs:59:21: 59:25
    debug other => _2;                   // in scope 0 at ui/associated-types/issue-82079.rs:60:21: 60:26
    let mut _0: core::Relation<impl core::operator::Op<D = (K, D, D2), R = OR>>; // return place in scope 0 at ui/associated-types/issue-82079.rs:61:22: 61:63
    let mut _3: core::operator::join::Join<C, C2>; // in scope 0 at ui/associated-types/issue-82079.rs:66:32: 69:26
    let mut _4: C;                       // in scope 0 at ui/associated-types/issue-82079.rs:67:36: 67:46
    let mut _5: C2;                      // in scope 0 at ui/associated-types/issue-82079.rs:68:37: 68:48

    bb0: {
        _4 = move (_1.0: C);             // scope 0 at ui/associated-types/issue-82079.rs:67:36: 67:46
        _5 = move (_2.0: C2);            // scope 0 at ui/associated-types/issue-82079.rs:68:37: 68:48
        _3 = join::Join::<C, C2> { _left: move _4, _right: move _5 }; // scope 0 at ui/associated-types/issue-82079.rs:66:32: 69:26
        _0 = Relation::<join::Join<C, C2>> { inner: move _3 }; // scope 0 at ui/associated-types/issue-82079.rs:65:21: 70:22
        return;                          // scope 0 at ui/associated-types/issue-82079.rs:71:18: 71:18
    }
}

fn map::<impl at ui/associated-types/issue-82079.rs:94:13: 94:36>::map_dr(_1: Relation<C>, _2: F) -> Relation<impl Op<D = D2, R = R2>> {
    debug self => _1;                    // in scope 0 at ui/associated-types/issue-82079.rs:96:21: 96:25
    debug f => _2;                       // in scope 0 at ui/associated-types/issue-82079.rs:97:21: 97:22
    let mut _0: core::Relation<impl core::operator::Op<D = D2, R = R2>>; // return place in scope 0 at ui/associated-types/issue-82079.rs:98:22: 98:55
    let mut _3: core::operator::map::Map<C, F>; // in scope 0 at ui/associated-types/issue-82079.rs:100:32: 103:26
    let mut _4: C;                       // in scope 0 at ui/associated-types/issue-82079.rs:101:37: 101:47
    let mut _5: F;                       // in scope 0 at ui/associated-types/issue-82079.rs:102:34: 102:35

    bb0: {
        _4 = move (_1.0: C);             // scope 0 at ui/associated-types/issue-82079.rs:101:37: 101:47
        _5 = move _2;                    // scope 0 at ui/associated-types/issue-82079.rs:102:34: 102:35
        _3 = map::Map::<C, F> { _inner: move _4, _op: move _5 }; // scope 0 at ui/associated-types/issue-82079.rs:100:32: 103:26
        _0 = Relation::<map::Map<C, F>> { inner: move _3 }; // scope 0 at ui/associated-types/issue-82079.rs:99:21: 104:22
        return;                          // scope 0 at ui/associated-types/issue-82079.rs:105:18: 105:18
    }
}

fn core::<impl at ui/associated-types/issue-82079.rs:115:14: 115:19>::clone(_1: &Relation<C>) -> Relation<C> {
    debug self => _1;                    // in scope 0 at ui/associated-types/issue-82079.rs:115:14: 115:19
    let mut _0: core::Relation<C>;       // return place in scope 0 at ui/associated-types/issue-82079.rs:115:14: 115:19
    let mut _2: C;                       // in scope 0 at ui/associated-types/issue-82079.rs:117:9: 117:17
    let mut _3: &C;                      // in scope 0 at ui/associated-types/issue-82079.rs:117:9: 117:17
    let _4: &C;                          // in scope 0 at ui/associated-types/issue-82079.rs:117:9: 117:17

    bb0: {
        _4 = &((*_1).0: C);              // scope 0 at ui/associated-types/issue-82079.rs:117:9: 117:17
        _3 = _4;                         // scope 0 at ui/associated-types/issue-82079.rs:117:9: 117:17
        _2 = <C as Clone>::clone(move _3) -> bb1; // scope 0 at ui/associated-types/issue-82079.rs:117:9: 117:17
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-82079.rs:117:9: 117:17
                                         // + literal: Const { ty: for<'a> fn(&'a C) -> C {<C as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Relation::<C> { inner: move _2 }; // scope 0 at ui/associated-types/issue-82079.rs:115:14: 115:19
        return;                          // scope 0 at ui/associated-types/issue-82079.rs:115:19: 115:19
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-82079.rs:124:11: 124:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/issue-82079.rs:124:13: 124:13
    }
}
