// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/associated-types-conditional-dispatch.rs:17:1: 17:29>::eq(_1: &[A], _2: &[B]) -> bool {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:20:11: 20:16
    debug other => _2;                   // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:20:18: 20:23
    let mut _0: bool;                    // return place in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:20:34: 20:38
    let mut _3: bool;                    // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:21:9: 21:34
    let mut _4: usize;                   // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:21:9: 21:19
    let mut _5: &[A];                    // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:21:9: 21:19
    let mut _6: usize;                   // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:21:23: 21:34
    let mut _7: &[B];                    // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:21:23: 21:34
    let mut _8: bool;                    // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:13: 22:64
    let mut _9: &mut std::iter::Zip<std::slice::Iter<'_, A>, std::slice::Iter<'_, B>>; // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:13: 22:64
    let mut _10: std::iter::Zip<std::slice::Iter<'_, A>, std::slice::Iter<'_, B>>; // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:13: 22:35
    let mut _11: std::slice::Iter<'_, A>; // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:13: 22:24
    let mut _12: &[A];                   // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:13: 22:24
    let mut _13: &[B];                   // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:29: 22:34
    let mut _14: [closure@ui/associated-types/associated-types-conditional-dispatch.rs:22:40: 22:48]; // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:40: 22:63

    bb0: {
        _5 = _1;                         // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:21:9: 21:19
        _4 = Len((*_5));                 // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:21:9: 21:19
        _7 = _2;                         // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:21:23: 21:34
        _6 = Len((*_7));                 // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:21:23: 21:34
        _3 = Eq(move _4, move _6);       // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:21:9: 21:34
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:21:9: 22:64
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:21:9: 22:64
        goto -> bb3;                     // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:21:9: 22:64
    }

    bb2: {
        _12 = _1;                        // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:13: 22:24
        _11 = core::slice::<impl [A]>::iter(move _12) -> bb4; // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:13: 22:24
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-conditional-dispatch.rs:22:18: 22:22
                                         // + literal: Const { ty: for<'a> fn(&'a [A]) -> std::slice::Iter<'a, A> {core::slice::<impl [A]>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:23:6: 23:6
    }

    bb4: {
        _13 = _2;                        // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:29: 22:34
        _10 = <std::slice::Iter<'_, A> as Iterator>::zip::<&[B]>(move _11, move _13) -> bb5; // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:13: 22:35
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-conditional-dispatch.rs:22:25: 22:28
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, A>, &[B]) -> Zip<std::slice::Iter<'_, A>, <&[B] as IntoIterator>::IntoIter> {<std::slice::Iter<'_, A> as Iterator>::zip::<&[B]>}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = &mut _10;                   // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:13: 22:64
        _8 = <Zip<std::slice::Iter<'_, A>, std::slice::Iter<'_, B>> as Iterator>::all::<[closure@ui/associated-types/associated-types-conditional-dispatch.rs:22:40: 22:48]>(move _9, move _14) -> bb6; // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:13: 22:64
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-conditional-dispatch.rs:22:36: 22:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut Zip<std::slice::Iter<'_, A>, std::slice::Iter<'_, B>>, [closure@ui/associated-types/associated-types-conditional-dispatch.rs:22:40: 22:48]) -> bool {<Zip<std::slice::Iter<'_, A>, std::slice::Iter<'_, B>> as Iterator>::all::<[closure@ui/associated-types/associated-types-conditional-dispatch.rs:22:40: 22:48]>}, val: Value(<ZST>) }
    }

    bb6: {
        _0 = move _8;                    // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:21:9: 22:64
        goto -> bb3;                     // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:21:9: 22:64
    }
}

fn <impl at ui/associated-types/associated-types-conditional-dispatch.rs:17:1: 17:29>::eq::{closure#0}(_1: &mut [closure@ui/associated-types/associated-types-conditional-dispatch.rs:22:40: 22:48], _2: (&A, &B)) -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:49: 22:49
    let _3: &A;                          // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:42: 22:43
    let _4: &B;                          // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:45: 22:46
    let mut _5: &A;                      // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:58: 22:59
    let mut _6: &B;                      // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:61: 22:62
    scope 1 {
        debug a => _3;                   // in scope 1 at ui/associated-types/associated-types-conditional-dispatch.rs:22:42: 22:43
        debug b => _4;                   // in scope 1 at ui/associated-types/associated-types-conditional-dispatch.rs:22:45: 22:46
    }

    bb0: {
        _3 = (_2.0: &A);                 // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:42: 22:43
        _4 = (_2.1: &B);                 // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:45: 22:46
        _5 = _3;                         // scope 1 at ui/associated-types/associated-types-conditional-dispatch.rs:22:58: 22:59
        _6 = _4;                         // scope 1 at ui/associated-types/associated-types-conditional-dispatch.rs:22:61: 22:62
        _0 = <A as MyEq<B>>::eq(move _5, move _6) -> bb1; // scope 1 at ui/associated-types/associated-types-conditional-dispatch.rs:22:49: 22:63
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-conditional-dispatch.rs:22:49: 22:57
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a A, &'b B) -> bool {<A as MyEq<B>>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:22:63: 22:63
    }
}

<impl at ui/associated-types/associated-types-conditional-dispatch.rs:28:1: 28:41>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:28:30: 28:31

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:28:30: 28:31
        return;                          // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:28:30: 28:31
    }
}

fn <impl at ui/associated-types/associated-types-conditional-dispatch.rs:28:1: 28:41>::eq(_1: &Lhs, _2: &[B; 0]) -> bool {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:31:11: 31:16
    debug other => _2;                   // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:31:18: 31:23
    let mut _0: bool;                    // return place in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:31:37: 31:41
    let mut _3: &[A];                    // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:32:18: 32:25
    let _4: &[A];                        // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:32:18: 32:25
    let _5: &[A];                        // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:32:19: 32:25
    let mut _6: &Lhs;                    // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:32:20: 32:25
    let mut _7: &[B];                    // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:32:27: 32:32
    let mut _8: &[B; 0];                 // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:32:27: 32:32

    bb0: {
        _6 = _1;                         // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:32:20: 32:25
        _5 = <Lhs as Deref>::deref(move _6) -> bb1; // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:32:19: 32:25
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-conditional-dispatch.rs:32:19: 32:25
                                         // + literal: Const { ty: for<'a> fn(&'a Lhs) -> &'a <Lhs as Deref>::Target {<Lhs as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:32:18: 32:25
        _3 = _4;                         // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:32:18: 32:25
        _8 = _2;                         // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:32:27: 32:32
        _7 = move _8 as &[B] (Pointer(Unsize)); // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:32:27: 32:32
        _0 = <[A] as MyEq<[B]>>::eq(move _3, move _7) -> bb2; // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:32:9: 32:33
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-conditional-dispatch.rs:32:9: 32:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [A], &'b [B]) -> bool {<[A] as MyEq<[B]>>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:33:6: 33:6
    }
}

<impl at ui/associated-types/associated-types-conditional-dispatch.rs:28:1: 28:41>::eq::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:31:30: 31:31

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:31:30: 31:31
        return;                          // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:31:30: 31:31
    }
}

fn <impl at ui/associated-types/associated-types-conditional-dispatch.rs:45:1: 45:32>::helper_borrow(_1: &Option<T>) -> &T {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:46:22: 46:27
    let mut _0: &T;                      // return place in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:47:9: 47:31
    let mut _2: std::option::Option<&T>; // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:47:9: 47:22
    let mut _3: &std::option::Option<T>; // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:47:9: 47:22

    bb0: {
        _3 = _1;                         // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:47:9: 47:22
        _2 = Option::<T>::as_ref(move _3) -> bb1; // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:47:9: 47:22
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-conditional-dispatch.rs:47:14: 47:20
                                         // + literal: Const { ty: for<'a> fn(&'a Option<T>) -> Option<&'a T> {Option::<T>::as_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Option::<&T>::unwrap(move _2) -> bb2; // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:47:9: 47:31
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-conditional-dispatch.rs:47:23: 47:29
                                         // + literal: Const { ty: fn(Option<&T>) -> &T {Option::<&T>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:48:6: 48:6
    }
}

fn <impl at ui/associated-types/associated-types-conditional-dispatch.rs:51:1: 51:54>::deref(_1: &DerefWithHelper<H, T>) -> &T {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:54:14: 54:19
    let mut _0: &T;                      // return place in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:55:9: 55:36
    let mut _2: &H;                      // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:55:9: 55:36

    bb0: {
        _2 = &((*_1).0: H);              // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:55:9: 55:36
        _0 = <H as Helper<T>>::helper_borrow(move _2) -> bb1; // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:55:9: 55:36
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-conditional-dispatch.rs:55:21: 55:34
                                         // + literal: Const { ty: for<'a> fn(&'a H) -> &'a T {<H as Helper<T>>::helper_borrow}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:56:6: 56:6
    }
}

fn check(_1: T, _2: T) -> bool {
    debug x => _1;                       // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:59:23: 59:24
    debug y => _2;                       // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:59:29: 59:30
    let mut _0: bool;                    // return place in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:59:38: 59:42
    let _3: DerefWithHelper<std::option::Option<T>, T>; // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:60:9: 60:10
    let mut _4: std::option::Option<T>;  // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:60:70: 60:77
    let mut _5: T;                       // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:60:75: 60:76
    let mut _6: std::marker::PhantomData<T>; // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:61:70: 61:81
    let mut _7: &T;                      // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:62:5: 62:13
    let _8: &T;                          // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:62:5: 62:13
    let mut _9: &DerefWithHelper<std::option::Option<T>, T>; // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:62:5: 62:13
    let mut _10: &T;                     // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:62:10: 62:12
    let _11: &T;                         // in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:62:10: 62:12
    scope 1 {
        debug d => _3;                   // in scope 1 at ui/associated-types/associated-types-conditional-dispatch.rs:60:9: 60:10
    }

    bb0: {
        _5 = move _1;                    // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:60:75: 60:76
        _4 = Option::<T>::Some(move _5); // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:60:70: 60:77
        _3 = DerefWithHelper::<Option<T>, T> { helper: move _4, marker: move _6 }; // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:60:44: 61:83
        _9 = &_3;                        // scope 1 at ui/associated-types/associated-types-conditional-dispatch.rs:62:5: 62:13
        _8 = <DerefWithHelper<Option<T>, T> as Deref>::deref(move _9) -> [return: bb1, unwind: bb5]; // scope 1 at ui/associated-types/associated-types-conditional-dispatch.rs:62:5: 62:13
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-conditional-dispatch.rs:62:5: 62:13
                                         // + literal: Const { ty: for<'a> fn(&'a DerefWithHelper<Option<T>, T>) -> &'a <DerefWithHelper<Option<T>, T> as Deref>::Target {<DerefWithHelper<Option<T>, T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _8;                         // scope 1 at ui/associated-types/associated-types-conditional-dispatch.rs:62:5: 62:13
        _11 = &_2;                       // scope 1 at ui/associated-types/associated-types-conditional-dispatch.rs:62:10: 62:12
        _10 = _11;                       // scope 1 at ui/associated-types/associated-types-conditional-dispatch.rs:62:10: 62:12
        _0 = <T as MyEq>::eq(move _7, move _10) -> [return: bb2, unwind: bb5]; // scope 1 at ui/associated-types/associated-types-conditional-dispatch.rs:62:5: 62:13
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-conditional-dispatch.rs:62:7: 62:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as MyEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_3) -> [return: bb3, unwind: bb6]; // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:63:1: 63:2
    }

    bb3: {
        drop(_2) -> bb4;                 // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:63:1: 63:2
    }

    bb4: {
        return;                          // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:63:2: 63:2
    }

    bb5 (cleanup): {
        drop(_3) -> bb6;                 // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:63:1: 63:2
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:63:1: 63:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:59:1: 63:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:65:15: 65:15

    bb0: {
        return;                          // scope 0 at ui/associated-types/associated-types-conditional-dispatch.rs:66:2: 66:2
    }
}
