// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-21726.rs:9:11: 9:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/issue-21726.rs:9:14: 9:14
    }
}

fn foo(_1: &str) -> () {
    debug s => _1;                       // in scope 0 at ui/associated-types/issue-21726.rs:11:12: 11:13
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-21726.rs:11:24: 11:24
    let _2: B<'_, ()>;                   // in scope 0 at ui/associated-types/issue-21726.rs:12:9: 12:10
    let mut _3: &str;                    // in scope 0 at ui/associated-types/issue-21726.rs:12:27: 12:28
    let mut _4: ();                      // in scope 0 at ui/associated-types/issue-21726.rs:12:30: 12:32
    let _5: &str;                        // in scope 0 at ui/associated-types/issue-21726.rs:13:5: 13:18
    let mut _6: &B<'_, ()>;              // in scope 0 at ui/associated-types/issue-21726.rs:13:5: 13:18
    scope 1 {
        debug b => _2;                   // in scope 1 at ui/associated-types/issue-21726.rs:12:9: 12:10
    }

    bb0: {
        _3 = _1;                         // scope 0 at ui/associated-types/issue-21726.rs:12:27: 12:28
        _2 = B::<'_, ()>::new(move _3, move _4) -> bb1; // scope 0 at ui/associated-types/issue-21726.rs:12:20: 12:33
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-21726.rs:12:20: 12:26
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&str, ()) -> B<'_, ()> {B::<'_, ()>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_2;                        // scope 1 at ui/associated-types/issue-21726.rs:13:5: 13:18
        _5 = B::<'_, ()>::get_short(move _6) -> bb2; // scope 1 at ui/associated-types/issue-21726.rs:13:5: 13:18
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-21726.rs:13:7: 13:16
                                         // + literal: Const { ty: for<'a> fn(&'a B<'_, ()>) -> <() as IntoRef<'_>>::T {B::<'_, ()>::get_short}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/associated-types/issue-21726.rs:14:2: 14:2
    }
}

fn <impl at ui/associated-types/issue-21726.rs:21:1: 21:28>::into_ref(_1: (), _2: &str) -> &str {
    debug self => _1;                    // in scope 0 at ui/associated-types/issue-21726.rs:23:17: 23:21
    debug s => _2;                       // in scope 0 at ui/associated-types/issue-21726.rs:23:23: 23:24
    let mut _0: &str;                    // return place in scope 0 at ui/associated-types/issue-21726.rs:23:38: 23:45

    bb0: {
        _0 = _2;                         // scope 0 at ui/associated-types/issue-21726.rs:24:9: 24:10
        return;                          // scope 0 at ui/associated-types/issue-21726.rs:25:6: 25:6
    }
}

fn <impl at ui/associated-types/issue-21726.rs:30:1: 30:34>::new(_1: &str, _2: P) -> B<'_, P> {
    debug s => _1;                       // in scope 0 at ui/associated-types/issue-21726.rs:31:12: 31:13
    debug i => _2;                       // in scope 0 at ui/associated-types/issue-21726.rs:31:24: 31:25
    let mut _0: B<'_, P>;                // return place in scope 0 at ui/associated-types/issue-21726.rs:31:33: 31:41
    let mut _3: <P as IntoRef<'_>>::T;   // in scope 0 at ui/associated-types/issue-21726.rs:32:11: 32:24
    let mut _4: P;                       // in scope 0 at ui/associated-types/issue-21726.rs:32:11: 32:12
    let mut _5: &str;                    // in scope 0 at ui/associated-types/issue-21726.rs:32:22: 32:23

    bb0: {
        _4 = move _2;                    // scope 0 at ui/associated-types/issue-21726.rs:32:11: 32:12
        _5 = _1;                         // scope 0 at ui/associated-types/issue-21726.rs:32:22: 32:23
        _3 = <P as IntoRef<'_>>::into_ref(move _4, move _5) -> bb1; // scope 0 at ui/associated-types/issue-21726.rs:32:11: 32:24
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-21726.rs:32:13: 32:21
                                         // + literal: Const { ty: fn(P, &str) -> <P as IntoRef<'_>>::T {<P as IntoRef<'_>>::into_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = B::<'_, P>(move _3);        // scope 0 at ui/associated-types/issue-21726.rs:32:9: 32:25
        return;                          // scope 0 at ui/associated-types/issue-21726.rs:33:6: 33:6
    }
}

fn <impl at ui/associated-types/issue-21726.rs:30:1: 30:34>::get_short(_1: &B<'_, P>) -> <P as IntoRef<'_>>::T {
    debug self => _1;                    // in scope 0 at ui/associated-types/issue-21726.rs:35:18: 35:23
    let mut _0: <P as IntoRef<'_>>::T;   // return place in scope 0 at ui/associated-types/issue-21726.rs:35:28: 35:32
    let mut _2: &<P as IntoRef<'_>>::T;  // in scope 0 at ui/associated-types/issue-21726.rs:36:9: 36:23

    bb0: {
        _2 = &((*_1).0: <P as IntoRef<'_>>::T); // scope 0 at ui/associated-types/issue-21726.rs:36:9: 36:23
        _0 = <<P as IntoRef<'_>>::T as Clone>::clone(move _2) -> bb1; // scope 0 at ui/associated-types/issue-21726.rs:36:9: 36:23
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-21726.rs:36:16: 36:21
                                         // + literal: Const { ty: for<'a> fn(&'a <P as IntoRef<'_>>::T) -> <P as IntoRef<'_>>::T {<<P as IntoRef<'_>>::T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/issue-21726.rs:37:6: 37:6
    }
}

fn B(_1: <P as IntoRef<'_>>::T) -> B<'_, P> {
    let mut _0: B<'_, P>;                // return place in scope 0 at ui/associated-types/issue-21726.rs:28:1: 28:29

    bb0: {
        _0 = B::<'_, P>(move _1);        // scope 0 at ui/associated-types/issue-21726.rs:28:1: 28:29
        return;                          // scope 0 at ui/associated-types/issue-21726.rs:28:1: 28:29
    }
}

// MIR FOR CTFE
fn B(_1: <P as IntoRef<'_>>::T) -> B<'_, P> {
    let mut _0: B<'_, P>;                // return place in scope 0 at ui/associated-types/issue-21726.rs:28:1: 28:29

    bb0: {
        _0 = B::<'_, P>(move _1);        // scope 0 at ui/associated-types/issue-21726.rs:28:1: 28:29
        return;                          // scope 0 at ui/associated-types/issue-21726.rs:28:1: 28:29
    }
}
