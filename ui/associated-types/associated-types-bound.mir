// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/associated-types-bound.rs:9:1: 9:19>::to_i32(_1: &i32) -> i32 {
    debug self => _1;
    let mut _0: i32;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/associated-types/associated-types-bound.rs:13:1: 13:19>::to_i32(_1: &u32) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _2: u32;

    bb0: {
        _2 = (*_1);
        _0 = move _2 as i32 (IntToInt);
        return;
    }
}

fn <impl at ui/associated-types/associated-types-bound.rs:24:1: 24:22>::get(_1: &i32) -> i32 {
    debug self => _1;
    let mut _0: i32;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/associated-types/associated-types-bound.rs:29:1: 29:22>::get(_1: &u32) -> u32 {
    debug self => _1;
    let mut _0: u32;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn foo(_1: G) -> i32 {
    debug g => _1;
    let mut _0: i32;
    let _2: &<G as GetToI32>::R;
    let _3: <G as GetToI32>::R;
    let mut _4: &G;

    bb0: {
        _4 = &_1;
        _3 = <G as GetToI32>::get(move _4) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _2 = &_3;
        _0 = <<G as GetToI32>::R as ToI32>::to_i32(_2) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        drop(_3) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        drop(_1) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_3) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let _4: &i32;
    let _5: &i32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: i32;
    let mut _9: i32;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&i32, &i32);
    let mut _14: &i32;
    let _15: i32;
    let _16: &i32;
    let _17: &i32;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: i32;
    let mut _21: i32;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: &i32;
    let mut _26: &i32;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _16;
        debug right_val => _17;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }

    bb0: {
        _3 = foo::<i32>(const 22_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _26 = const _;
        _1 = (move _2, _26);
        _4 = (_1.0: &i32);
        _5 = (_1.1: &i32);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<i32, i32>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        _15 = foo::<u32>(const 22_u32) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = &_15;
        _25 = const _;
        _13 = (move _14, _25);
        _16 = (_13.0: &i32);
        _17 = (_13.1: &i32);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<i32, i32>(move _22, _16, _17, move _24) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 22_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 22_i32;
        _0 = &_1;
        return;
    }
}
