// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test(_1: i32) -> T {
    debug b => _1;                       // in scope 0 at ui/associated-types/issue-24204.rs:18:28: 18:29
    let mut _0: T;                       // return place in scope 0 at ui/associated-types/issue-24204.rs:18:39: 18:40
    let mut _2: i32;                     // in scope 0 at ui/associated-types/issue-24204.rs:22:12: 22:13

    bb0: {
        _2 = _1;                         // scope 0 at ui/associated-types/issue-24204.rs:22:12: 22:13
        _0 = <T as Trait>::new::<i32>(move _2) -> bb1; // scope 0 at ui/associated-types/issue-24204.rs:22:5: 22:14
                                         // mir::Constant
                                         // + span: ui/associated-types/issue-24204.rs:22:5: 22:11
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(i32) -> <<T as Trait>::A as MultiDispatch<i32>>::O {<T as Trait>::new::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/issue-24204.rs:23:2: 23:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/issue-24204.rs:25:11: 25:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/issue-24204.rs:25:13: 25:13
    }
}
