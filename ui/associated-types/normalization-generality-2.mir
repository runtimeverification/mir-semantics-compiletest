// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/normalization-generality-2.rs:13:1: 13:38>::project(_1: &Yoke<Y>, _2: for<'b, 'a> fn(&'b <Y as Yokeable<'a>>::Output, &'a ()) -> <P as Yokeable<'a>>::Output) -> Yoke<P> {
    debug self => _1;                    // in scope 0 at ui/associated-types/normalization-generality-2.rs:15:9: 15:14
    debug _f => _2;                      // in scope 0 at ui/associated-types/normalization-generality-2.rs:16:9: 16:11
    let mut _0: Yoke<P>;                 // return place in scope 0 at ui/associated-types/normalization-generality-2.rs:17:10: 17:17
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52

    bb0: {
        _3 = core::panicking::panic(const "not implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn slice(_1: Yoke<&str>) -> Yoke<&[u8]> {
    debug y => _1;                       // in scope 0 at ui/associated-types/normalization-generality-2.rs:24:14: 24:15
    let mut _0: Yoke<&[u8]>;             // return place in scope 0 at ui/associated-types/normalization-generality-2.rs:24:40: 24:59
    let mut _2: &Yoke<&str>;             // in scope 0 at ui/associated-types/normalization-generality-2.rs:25:5: 25:42
    let mut _3: for<'a, 'b> fn(&'a &'b str, &'b ()) -> <&[u8] as Yokeable<'b>>::Output; // in scope 0 at ui/associated-types/normalization-generality-2.rs:25:15: 25:41
    let mut _4: [closure@ui/associated-types/normalization-generality-2.rs:25:15: 25:27]; // in scope 0 at ui/associated-types/normalization-generality-2.rs:25:15: 25:41

    bb0: {
        _2 = &_1;                        // scope 0 at ui/associated-types/normalization-generality-2.rs:25:5: 25:42
        _3 = move _4 as for<'a, 'b> fn(&'a &'b str, &'b ()) -> <&[u8] as Yokeable<'b>>::Output (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/associated-types/normalization-generality-2.rs:25:15: 25:41
        _0 = Yoke::<&str>::project::<&[u8]>(move _2, move _3) -> bb1; // scope 0 at ui/associated-types/normalization-generality-2.rs:25:5: 25:42
                                         // mir::Constant
                                         // + span: ui/associated-types/normalization-generality-2.rs:25:7: 25:14
                                         // + literal: Const { ty: for<'b> fn(&'b Yoke<&str>, for<'b, 'a> fn(&'b <&str as Yokeable<'a>>::Output, &'a ()) -> <&[u8] as Yokeable<'a>>::Output) -> Yoke<&[u8]> {Yoke::<&str>::project::<&[u8]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/normalization-generality-2.rs:26:2: 26:2
    }
}

fn slice::{closure#0}(_1: &[closure@ui/associated-types/normalization-generality-2.rs:25:15: 25:27], _2: &&str, _3: &()) -> &[u8] {
    debug yk => _2;                      // in scope 0 at ui/associated-types/normalization-generality-2.rs:25:21: 25:23
    let mut _0: &[u8];                   // return place in scope 0 at ui/associated-types/normalization-generality-2.rs:25:28: 25:41
    let mut _4: &str;                    // in scope 0 at ui/associated-types/normalization-generality-2.rs:25:28: 25:41
    let mut _5: &str;                    // in scope 0 at ui/associated-types/normalization-generality-2.rs:25:21: 25:23

    bb0: {
        _5 = deref_copy (*_2);           // scope 0 at ui/associated-types/normalization-generality-2.rs:25:28: 25:41
        _4 = _5;                         // scope 0 at ui/associated-types/normalization-generality-2.rs:25:28: 25:41
        _0 = core::str::<impl str>::as_bytes(move _4) -> bb1; // scope 0 at ui/associated-types/normalization-generality-2.rs:25:28: 25:41
                                         // mir::Constant
                                         // + span: ui/associated-types/normalization-generality-2.rs:25:31: 25:39
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/normalization-generality-2.rs:25:41: 25:41
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/normalization-generality-2.rs:30:11: 30:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/normalization-generality-2.rs:30:13: 30:13
    }
}
