// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: ();
    let mut _3: (&f32, &f32);
    let mut _4: &f32;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: f32;
    let mut _10: f32;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: ();
    let mut _16: (&i32, &i32);
    let mut _17: &i32;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: i32;
    let mut _23: i32;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        let _2: f32;
        scope 2 {
            debug r => _2;
            let _5: &f32;
            let _6: &f32;
            let mut _28: &f32;
            scope 3 {
                debug left_val => _5;
                debug right_val => _6;
                let _11: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _11;
                }
            }
            scope 5 {
                let _15: i32;
                scope 6 {
                    debug r => _15;
                    let _18: &i32;
                    let _19: &i32;
                    let mut _27: &i32;
                    scope 7 {
                        debug left_val => _18;
                        debug right_val => _19;
                        let _24: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _24;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = overload2::<(), i32, bool>(const 42_i32, const true) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = overload2::<f32, &str, f32>(const "Hello world", const 13f32) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = &_2;
        _28 = const _;
        _3 = (move _4, _28);
        _5 = (_3.0: &f32);
        _6 = (_3.1: &f32);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<f32, f32>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb4: {
        _14 = overload3::<(), i32, bool, f32>(const 42_i32, const true, const 42.5f32) -> [return: bb5, unwind continue];
    }

    bb5: {
        _15 = overload3::<i32, &str, f32, i32>(const "Hello world", const 13f32, const 42_i32) -> [return: bb6, unwind continue];
    }

    bb6: {
        _17 = &_15;
        _27 = const _;
        _16 = (move _17, _27);
        _18 = (_16.0: &i32);
        _19 = (_16.1: &i32);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<i32, i32>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb8: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 13f32;
        _0 = &_1;
        return;
    }
}

fn overload::<impl at ui/associated-types/issue-54182-1.rs:45:5: 45:34>::overload(_1: (i32, bool)) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: i32;
    let _3: bool;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &(i32, bool);
    let _12: (i32, bool);
    scope 1 {
        debug a => _2;
        debug b => _3;
        let mut _13: &[&str; 2];
    }

    bb0: {
        _2 = (_1.0: i32);
        _3 = (_1.1: bool);
        _13 = const _;
        _6 = _13 as &[&str] (Pointer(Unsize));
        _12 = (_2, _3);
        _11 = &_12;
        _10 = core::fmt::rt::Argument::<'_>::new_debug::<(i32, bool)>(_11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = _print(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in overload::<impl at ui/associated-types/issue-54182-1.rs:45:5: 45:34>::overload: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "i32 and bool ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn overload::<impl at ui/associated-types/issue-54182-1.rs:56:5: 56:41>::overload(_1: (&str, f32)) -> f32 {
    debug self => _1;
    let mut _0: f32;
    let _2: &str;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &(&str, f32);
    let _11: (&str, f32);
    scope 1 {
        debug a => _2;
        debug b => _0;
        let mut _12: &[&str; 2];
    }

    bb0: {
        _2 = (_1.0: &str);
        _0 = (_1.1: f32);
        _12 = const _;
        _5 = _12 as &[&str] (Pointer(Unsize));
        _11 = (_2, _0);
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<(&str, f32)>(_10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = _print(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in overload::<impl at ui/associated-types/issue-54182-1.rs:56:5: 56:41>::overload: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "&str and f32 ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn overload::<impl at ui/associated-types/issue-54182-1.rs:66:5: 66:39>::overload(_1: (i32, bool, f32)) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: i32;
    let _3: bool;
    let _4: f32;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &(i32, bool, f32);
    let _13: (i32, bool, f32);
    scope 1 {
        debug a => _2;
        debug b => _3;
        debug c => _4;
        let mut _14: &[&str; 2];
    }

    bb0: {
        _2 = (_1.0: i32);
        _3 = (_1.1: bool);
        _4 = (_1.2: f32);
        _14 = const _;
        _7 = _14 as &[&str] (Pointer(Unsize));
        _13 = (_2, _3, _4);
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_debug::<(i32, bool, f32)>(_12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = _print(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in overload::<impl at ui/associated-types/issue-54182-1.rs:66:5: 66:39>::overload: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "i32 and bool and f32 ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn overload::<impl at ui/associated-types/issue-54182-1.rs:73:5: 73:46>::overload(_1: (&str, f32, i32)) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let _2: &str;
    let _3: f32;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &(&str, f32, i32);
    let _12: (&str, f32, i32);
    scope 1 {
        debug a => _2;
        debug b => _3;
        debug c => _0;
        let mut _13: &[&str; 2];
    }

    bb0: {
        _2 = (_1.0: &str);
        _3 = (_1.1: f32);
        _0 = (_1.2: i32);
        _13 = const _;
        _6 = _13 as &[&str] (Pointer(Unsize));
        _12 = (_2, _3, _0);
        _11 = &_12;
        _10 = core::fmt::rt::Argument::<'_>::new_debug::<(&str, f32, i32)>(_11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = _print(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in overload::<impl at ui/associated-types/issue-54182-1.rs:73:5: 73:46>::overload: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "&str and f32 and i32: ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn overload2(_1: A, _2: B) -> R {
    debug a => _1;
    debug b => _2;
    let mut _0: R;
    let mut _3: (A, B);

    bb0: {
        _3 = (move _1, move _2);
        _0 = <(A, B) as Overload>::overload(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn overload3(_1: A, _2: B, _3: C) -> R {
    debug a => _1;
    debug b => _2;
    debug c => _3;
    let mut _0: R;
    let mut _4: (A, B, C);

    bb0: {
        _4 = (move _1, move _2, move _3);
        _0 = <(A, B, C) as Overload>::overload(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
