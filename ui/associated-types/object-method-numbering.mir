// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn get_int(_1: &T) -> i32 {
    debug x => _1;                       // in scope 0 at ui/associated-types/object-method-numbering.rs:12:46: 12:47
    let mut _0: i32;                     // return place in scope 0 at ui/associated-types/object-method-numbering.rs:12:56: 12:59
    let mut _2: &T;                      // in scope 0 at ui/associated-types/object-method-numbering.rs:13:5: 13:12

    bb0: {
        _2 = _1;                         // scope 0 at ui/associated-types/object-method-numbering.rs:13:5: 13:12
        _0 = <T as SomeTrait>::get(move _2) -> bb1; // scope 0 at ui/associated-types/object-method-numbering.rs:13:5: 13:12
                                         // mir::Constant
                                         // + span: ui/associated-types/object-method-numbering.rs:13:7: 13:10
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> <T as SomeTrait>::SomeType {<T as SomeTrait>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/object-method-numbering.rs:14:2: 14:2
    }
}

fn <impl at ui/associated-types/object-method-numbering.rs:16:1: 16:23>::get(_1: &i32) -> i32 {
    debug self => _1;                    // in scope 0 at ui/associated-types/object-method-numbering.rs:18:12: 18:17
    let mut _0: i32;                     // return place in scope 0 at ui/associated-types/object-method-numbering.rs:18:22: 18:25

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/associated-types/object-method-numbering.rs:19:9: 19:14
        return;                          // scope 0 at ui/associated-types/object-method-numbering.rs:20:6: 20:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/object-method-numbering.rs:23:11: 23:11
    let _1: i32;                         // in scope 0 at ui/associated-types/object-method-numbering.rs:24:9: 24:10
    let mut _3: &i32;                    // in scope 0 at ui/associated-types/object-method-numbering.rs:25:44: 25:46
    let _4: &i32;                        // in scope 0 at ui/associated-types/object-method-numbering.rs:25:44: 25:46
    let mut _6: &dyn SomeTrait<SomeType = i32>; // in scope 0 at ui/associated-types/object-method-numbering.rs:26:21: 26:23
    let mut _7: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _9: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/associated-types/object-method-numbering.rs:24:9: 24:10
        let _2: &dyn SomeTrait<SomeType = i32>; // in scope 1 at ui/associated-types/object-method-numbering.rs:25:9: 25:11
        scope 2 {
            debug x1 => _2;              // in scope 2 at ui/associated-types/object-method-numbering.rs:25:9: 25:11
            let _5: i32;                 // in scope 2 at ui/associated-types/object-method-numbering.rs:26:9: 26:10
            scope 3 {
                debug y => _5;           // in scope 3 at ui/associated-types/object-method-numbering.rs:26:9: 26:10
                let _10: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _11: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                scope 4 {
                    debug left_val => _10; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _11; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _16: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _16; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 22_i32;               // scope 0 at ui/associated-types/object-method-numbering.rs:24:13: 24:15
        _4 = &_1;                        // scope 1 at ui/associated-types/object-method-numbering.rs:25:44: 25:46
        _3 = _4;                         // scope 1 at ui/associated-types/object-method-numbering.rs:25:44: 25:46
        _2 = move _3 as &dyn SomeTrait<SomeType = i32> (Pointer(Unsize)); // scope 1 at ui/associated-types/object-method-numbering.rs:25:44: 25:46
        _6 = _2;                         // scope 2 at ui/associated-types/object-method-numbering.rs:26:21: 26:23
        _5 = get_int::<dyn SomeTrait<SomeType = i32>>(move _6) -> bb1; // scope 2 at ui/associated-types/object-method-numbering.rs:26:13: 26:24
                                         // mir::Constant
                                         // + span: ui/associated-types/object-method-numbering.rs:26:13: 26:20
                                         // + literal: Const { ty: for<'a> fn(&'a dyn SomeTrait<SomeType = i32>) -> i32 {get_int::<dyn SomeTrait<SomeType = i32>>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &_1;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _9 = &_5;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _9);         // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_7.0: &i32);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_7.1: &i32);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = (*_11);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb3, otherwise: bb2]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _16 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<i32, i32>(move _18, move _19, move _21, move _23); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/associated-types/object-method-numbering.rs:28:2: 28:2
    }
}
