// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn get(_1: &Vec<VarValue<K>>, _2: &K) -> &Option<V> {
    debug table => _1;
    debug key => _2;
    let mut _0: &std::option::Option<V>;
    let _3: &std::option::Option<V>;
    let mut _4: &VarValue<K>;
    let mut _5: usize;
    let mut _6: isize;
    let _7: &K;
    let _8: &std::option::Option<V>;
    let _9: &std::option::Option<V>;
    scope 1 {
        debug k => _7;
    }
    scope 2 {
        debug v => _9;
    }

    bb0: {
        _5 = <K as UnifyKey>::to_index(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <Vec<VarValue<K>> as Index<usize>>::index(_1, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant((*_4));
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _9 = &(((*_4) as Root).0: std::option::Option<V>);
        _3 = _9;
        goto -> bb7;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = &(((*_4) as Redirect).0: K);
        _8 = get::<K, V>(_1, _7) -> [return: bb6, unwind continue];
    }

    bb6: {
        _3 = _8;
        goto -> bb7;
    }

    bb7: {
        _0 = _3;
        return;
    }
}

fn <impl at ui/associated-types/associated-types-enum-field-named.rs:24:1: 24:24>::to_index(_1: &usize) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<VarValue<usize>>;
    let mut _2: std::boxed::Box<[VarValue<usize>]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[VarValue<usize>; 4]>;
    let mut _7: VarValue<usize>;
    let mut _8: VarValue<usize>;
    let mut _9: VarValue<usize>;
    let mut _10: std::option::Option<char>;
    let mut _11: VarValue<usize>;
    let mut _12: (&&std::option::Option<char>, &&std::option::Option<char>);
    let mut _13: &&std::option::Option<char>;
    let _14: &std::option::Option<char>;
    let _15: &std::vec::Vec<VarValue<usize>>;
    let mut _18: bool;
    let mut _19: bool;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: *const [VarValue<usize>; 4];
    let mut _26: *const ();
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: usize;
    let mut _30: usize;
    let mut _31: bool;
    scope 1 {
        debug table => _1;
        let _16: &&std::option::Option<char>;
        let _17: &&std::option::Option<char>;
        let mut _23: &&std::option::Option<char>;
        let mut _24: &usize;
        scope 3 {
            debug left_val => _16;
            debug right_val => _17;
            let _20: core::panicking::AssertKind;
            scope 4 {
                debug kind => _20;
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([VarValue<usize>; 4]);
        _4 = AlignOf([VarValue<usize>; 4]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [VarValue<usize>; 4]);
        _7 = VarValue::<usize>::Redirect { to: const 1_usize };
        _8 = VarValue::<usize>::Redirect { to: const 3_usize };
        _10 = Option::<char>::Some(const 'x');
        _9 = VarValue::<usize>::Root { value: move _10, rank: const 0_usize };
        _11 = VarValue::<usize>::Redirect { to: const 2_usize };
        _25 = (((_6.0: std::ptr::Unique<[VarValue<usize>; 4]>).0: std::ptr::NonNull<[VarValue<usize>; 4]>).0: *const [VarValue<usize>; 4]);
        _26 = _25 as *const () (PtrToPtr);
        _27 = _26 as usize (Transmute);
        _28 = AlignOf(VarValue<usize>);
        _29 = Sub(_28, const 1_usize);
        _30 = BitAnd(_27, _29);
        _31 = Eq(_30, const 0_usize);
        assert(_31, "misaligned pointer dereference: address must be a multiple of {} but is {}", _28, _27) -> [success: bb10, unwind unreachable];
    }

    bb2: {
        _15 = &_1;
        _24 = const _;
        _14 = get::<usize, char>(_15, _24) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _13 = &_14;
        _23 = const _;
        _12 = (move _13, _23);
        _16 = (_12.0: &&std::option::Option<char>);
        _17 = (_12.1: &&std::option::Option<char>);
        _19 = <&Option<char> as PartialEq>::eq(_16, _17) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<&Option<char>, &Option<char>>(move _20, _16, _17, move _22) -> bb8;
    }

    bb6: {
        drop(_1) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }

    bb10: {
        (*_25) = [move _7, move _8, move _9, move _11];
        _2 = move _6 as std::boxed::Box<[VarValue<usize>]> (Pointer(Unsize));
        _1 = slice::<impl [VarValue<usize>]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &&Option<char> = {
    let mut _0: &&std::option::Option<char>;
    let mut _1: &std::option::Option<char>;
    let mut _2: std::option::Option<char>;

    bb0: {
        _2 = Option::<char>::Some(const 'x');
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}
