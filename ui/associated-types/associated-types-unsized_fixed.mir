// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: T) -> () {
    debug t => _1;                       // in scope 0 at ui/associated-types/associated-types-unsized_fixed.rs:9:15: 9:16
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-unsized_fixed.rs:9:21: 9:21
    let _2: <T as Get>::Value;           // in scope 0 at ui/associated-types/associated-types-unsized_fixed.rs:10:9: 10:10
    let mut _3: &T;                      // in scope 0 at ui/associated-types/associated-types-unsized_fixed.rs:10:13: 10:20
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/associated-types/associated-types-unsized_fixed.rs:10:9: 10:10
    }

    bb0: {
        _3 = &_1;                        // scope 0 at ui/associated-types/associated-types-unsized_fixed.rs:10:13: 10:20
        _2 = <T as Get>::get(move _3) -> [return: bb1, unwind: bb4]; // scope 0 at ui/associated-types/associated-types-unsized_fixed.rs:10:13: 10:20
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-unsized_fixed.rs:10:15: 10:18
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> <T as Get>::Value {<T as Get>::get}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind: bb4]; // scope 0 at ui/associated-types/associated-types-unsized_fixed.rs:11:1: 11:2
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/associated-types/associated-types-unsized_fixed.rs:11:1: 11:2
    }

    bb3: {
        return;                          // scope 0 at ui/associated-types/associated-types-unsized_fixed.rs:11:2: 11:2
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/associated-types/associated-types-unsized_fixed.rs:11:1: 11:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/associated-types-unsized_fixed.rs:9:1: 11:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-unsized_fixed.rs:13:11: 13:11

    bb0: {
        return;                          // scope 0 at ui/associated-types/associated-types-unsized_fixed.rs:14:2: 14:2
    }
}
