// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/associated-types/associated-types-nested-projections.rs:19:1: 19:40>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn <impl at ui/associated-types/associated-types-nested-projections.rs:19:1: 19:40>::into_iter(_1: &[T; 3]) -> std::slice::Iter<'_, T> {
    debug self => _1;
    let mut _0: std::slice::Iter<'_, T>;
    let mut _2: &[T];

    bb0: {
        _2 = _1 as &[T] (Pointer(Unsize));
        _0 = core::slice::<impl [T]>::iter(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn foo(_1: X) -> () {
    debug x => _1;
    let mut _0: ();

    bb0: {
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn bar(_1: X) -> () {
    debug x => _1;
    let mut _0: ();

    bb0: {
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let mut _3: &[i32; 3];
    let mut _4: &[i32; 3];

    bb0: {
        _4 = const _;
        _1 = foo::<&[i32; 3]>(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = const _;
        _2 = bar::<&i32, std::slice::Iter<'_, i32>, &[i32; 3]>(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];
    let mut _1: [i32; 3];

    bb0: {
        _1 = [const 0_i32, const 1_i32, const 2_i32];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];
    let mut _1: [i32; 3];

    bb0: {
        _1 = [const 0_i32, const 1_i32, const 2_i32];
        _0 = &_1;
        return;
    }
}
