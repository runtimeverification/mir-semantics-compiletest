// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/associated-types/associated-types-nested-projections.rs:19:1: 19:40>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/associated-types/associated-types-nested-projections.rs:19:38: 19:39

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/associated-types/associated-types-nested-projections.rs:19:38: 19:39
        return;                          // scope 0 at ui/associated-types/associated-types-nested-projections.rs:19:38: 19:39
    }
}

fn <impl at ui/associated-types/associated-types-nested-projections.rs:19:1: 19:40>::into_iter(_1: &[T; 3]) -> std::slice::Iter<'_, T> {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-nested-projections.rs:22:18: 22:22
    let mut _0: std::slice::Iter<'_, T>; // return place in scope 0 at ui/associated-types/associated-types-nested-projections.rs:22:27: 22:45
    let mut _2: &[T];                    // in scope 0 at ui/associated-types/associated-types-nested-projections.rs:23:9: 23:20
    let mut _3: &[T; 3];                 // in scope 0 at ui/associated-types/associated-types-nested-projections.rs:23:9: 23:20

    bb0: {
        _3 = _1;                         // scope 0 at ui/associated-types/associated-types-nested-projections.rs:23:9: 23:20
        _2 = move _3 as &[T] (Pointer(Unsize)); // scope 0 at ui/associated-types/associated-types-nested-projections.rs:23:9: 23:20
        _0 = core::slice::<impl [T]>::iter(move _2) -> bb1; // scope 0 at ui/associated-types/associated-types-nested-projections.rs:23:9: 23:20
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-nested-projections.rs:23:14: 23:18
                                         // + literal: Const { ty: for<'a> fn(&'a [T]) -> std::slice::Iter<'a, T> {core::slice::<impl [T]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/associated-types-nested-projections.rs:24:6: 24:6
    }
}

fn foo(_1: X) -> () {
    debug x => _1;                       // in scope 0 at ui/associated-types/associated-types-nested-projections.rs:27:11: 27:12
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-nested-projections.rs:27:17: 27:17

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/associated-types/associated-types-nested-projections.rs:31:1: 31:2
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/associated-types-nested-projections.rs:31:2: 31:2
    }
}

fn bar(_1: X) -> () {
    debug x => _1;                       // in scope 0 at ui/associated-types/associated-types-nested-projections.rs:33:17: 33:18
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-nested-projections.rs:33:23: 33:23

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/associated-types/associated-types-nested-projections.rs:39:1: 39:2
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/associated-types-nested-projections.rs:39:2: 39:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-nested-projections.rs:41:11: 41:11
    let _1: ();                          // in scope 0 at ui/associated-types/associated-types-nested-projections.rs:42:5: 42:20
    let mut _2: &[i32; 3];               // in scope 0 at ui/associated-types/associated-types-nested-projections.rs:42:9: 42:19
    let _3: ();                          // in scope 0 at ui/associated-types/associated-types-nested-projections.rs:43:5: 43:20
    let mut _4: &[i32; 3];               // in scope 0 at ui/associated-types/associated-types-nested-projections.rs:43:9: 43:19
    let mut _5: &[i32; 3];               // in scope 0 at ui/associated-types/associated-types-nested-projections.rs:43:9: 43:19
    let mut _6: &[i32; 3];               // in scope 0 at ui/associated-types/associated-types-nested-projections.rs:42:9: 42:19

    bb0: {
        _6 = const _;                    // scope 0 at ui/associated-types/associated-types-nested-projections.rs:42:9: 42:19
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-nested-projections.rs:42:9: 42:19
                                         // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[1])) }
        _2 = _6;                         // scope 0 at ui/associated-types/associated-types-nested-projections.rs:42:9: 42:19
        _1 = foo::<&[i32; 3]>(move _2) -> bb1; // scope 0 at ui/associated-types/associated-types-nested-projections.rs:42:5: 42:20
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-nested-projections.rs:42:5: 42:8
                                         // + literal: Const { ty: fn(&[i32; 3]) {foo::<&[i32; 3]>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = const _;                    // scope 0 at ui/associated-types/associated-types-nested-projections.rs:43:9: 43:19
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-nested-projections.rs:43:9: 43:19
                                         // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _5;                         // scope 0 at ui/associated-types/associated-types-nested-projections.rs:43:9: 43:19
        _3 = bar::<&i32, std::slice::Iter<'_, i32>, &[i32; 3]>(move _4) -> bb2; // scope 0 at ui/associated-types/associated-types-nested-projections.rs:43:5: 43:20
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-nested-projections.rs:43:5: 43:8
                                         // + literal: Const { ty: fn(&[i32; 3]) {bar::<&i32, std::slice::Iter<'_, i32>, &[i32; 3]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/associated-types/associated-types-nested-projections.rs:44:2: 44:2
    }
}

promoted[0] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];               // return place in scope 0 at ui/associated-types/associated-types-nested-projections.rs:43:9: 43:19
    let mut _1: [i32; 3];                // in scope 0 at ui/associated-types/associated-types-nested-projections.rs:43:10: 43:19

    bb0: {
        _1 = [const 0_i32, const 1_i32, const 2_i32]; // scope 0 at ui/associated-types/associated-types-nested-projections.rs:43:10: 43:19
        _0 = &_1;                        // scope 0 at ui/associated-types/associated-types-nested-projections.rs:43:9: 43:19
        return;                          // scope 0 at ui/associated-types/associated-types-nested-projections.rs:43:9: 43:19
    }
}

promoted[1] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];               // return place in scope 0 at ui/associated-types/associated-types-nested-projections.rs:42:9: 42:19
    let mut _1: [i32; 3];                // in scope 0 at ui/associated-types/associated-types-nested-projections.rs:42:10: 42:19

    bb0: {
        _1 = [const 0_i32, const 1_i32, const 2_i32]; // scope 0 at ui/associated-types/associated-types-nested-projections.rs:42:10: 42:19
        _0 = &_1;                        // scope 0 at ui/associated-types/associated-types-nested-projections.rs:42:9: 42:19
        return;                          // scope 0 at ui/associated-types/associated-types-nested-projections.rs:42:9: 42:19
    }
}
