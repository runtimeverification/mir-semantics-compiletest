// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/associated-types-binding-in-trait.rs:13:1: 13:27>::bit_iter(_1: Vec<bool>) -> std::vec::IntoIter<bool> {
    debug self => _1;
    let mut _0: std::vec::IntoIter<bool>;

    bb0: {
        _0 = <Vec<bool> as IntoIterator>::into_iter(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn count(_1: T) -> usize {
    debug arg => _1;
    let mut _0: usize;
    let mut _2: usize;
    let mut _3: <T as BitIter>::Iter;
    let mut _4: <T as BitIter>::Iter;
    let mut _6: std::option::Option<bool>;
    let mut _7: &mut <T as BitIter>::Iter;
    let mut _8: isize;
    scope 1 {
        debug sum => _2;
        let mut _5: <T as BitIter>::Iter;
        scope 2 {
            debug iter => _5;
            let _9: bool;
            scope 3 {
                debug i => _9;
            }
        }
    }

    bb0: {
        _2 = const 0_usize;
        _4 = <T as BitIter>::bit_iter(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <<T as BitIter>::Iter as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = move _3;
        goto -> bb3;
    }

    bb3: {
        _7 = &mut _5;
        _6 = <<T as BitIter>::Iter as Iterator>::next(_7) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _9 = ((_6 as Some).0: bool);
        switchInt(_9) -> [0: bb3, otherwise: bb8];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        drop(_5) -> [return: bb9, unwind continue];
    }

    bb8: {
        _2 = Add(_2, const 1_usize);
        goto -> bb3;
    }

    bb9: {
        _0 = _2;
        return;
    }

    bb10 (cleanup): {
        drop(_5) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<bool>;
    let mut _2: std::boxed::Box<[bool]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[bool; 3]>;
    let mut _8: std::vec::Vec<bool>;
    let mut _9: (&usize, &usize);
    let mut _10: &usize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: *const [bool; 3];
    scope 1 {
        debug v => _1;
        let _7: usize;
        scope 3 {
            debug c => _7;
            let _11: &usize;
            let _12: &usize;
            let mut _20: &usize;
            scope 4 {
                debug left_val => _11;
                debug right_val => _12;
                let _17: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _17;
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([bool; 3]);
        _4 = AlignOf([bool; 3]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [bool; 3]);
        _21 = (((_6.0: std::ptr::Unique<[bool; 3]>).0: std::ptr::NonNull<[bool; 3]>).0: *const [bool; 3]);
        (*_21) = [const true, const false, const true];
        _2 = move _6 as std::boxed::Box<[bool]> (Pointer(Unsize));
        _1 = slice::<impl [bool]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = move _1;
        _7 = count::<Vec<bool>>(move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _10 = &_7;
        _20 = const _;
        _9 = (move _10, _20);
        _11 = (_9.0: &usize);
        _12 = (_9.1: &usize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<usize, usize>(move _17, _11, _12, move _19) -> unwind continue;
    }

    bb5: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}
