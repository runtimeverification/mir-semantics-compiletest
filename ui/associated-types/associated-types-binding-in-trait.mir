// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/associated-types/associated-types-binding-in-trait.rs:13:1: 13:27>::bit_iter(_1: Vec<bool>) -> std::vec::IntoIter<bool> {
    debug self => _1;                    // in scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:15:17: 15:21
    let mut _0: std::vec::IntoIter<bool>; // return place in scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:15:26: 15:49
    let mut _2: std::vec::Vec<bool>;     // in scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:16:9: 16:13

    bb0: {
        _2 = move _1;                    // scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:16:9: 16:13
        _0 = <Vec<bool> as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:16:9: 16:25
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-binding-in-trait.rs:16:14: 16:23
                                         // + literal: Const { ty: fn(Vec<bool>) -> <Vec<bool> as IntoIterator>::IntoIter {<Vec<bool> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:17:6: 17:6
    }
}

fn count(_1: T) -> usize {
    debug arg => _1;                     // in scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:20:13: 20:16
    let mut _0: usize;                   // return place in scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:23:9: 23:16
    let mut _2: <T as BitIter>::Iter;    // in scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:24:14: 24:28
    let mut _3: <T as BitIter>::Iter;    // in scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:24:14: 24:28
    let mut _4: T;                       // in scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:24:14: 24:17
    let mut _6: std::option::Option<bool>; // in scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:24:14: 24:28
    let mut _7: &mut <T as BitIter>::Iter; // in scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:24:14: 24:28
    let mut _8: &mut <T as BitIter>::Iter; // in scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:24:14: 24:28
    let mut _9: isize;                   // in scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:24:5: 28:6
    let mut _11: bool;                   // in scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:25:12: 25:13
    let mut _12: (usize, bool);          // in scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:26:13: 26:21
    scope 1 {
        debug sum => _0;                 // in scope 1 at ui/associated-types/associated-types-binding-in-trait.rs:23:9: 23:16
        let mut _5: <T as BitIter>::Iter; // in scope 1 at ui/associated-types/associated-types-binding-in-trait.rs:24:14: 24:28
        scope 2 {
            debug iter => _5;            // in scope 2 at ui/associated-types/associated-types-binding-in-trait.rs:24:14: 24:28
            let _10: bool;               // in scope 2 at ui/associated-types/associated-types-binding-in-trait.rs:24:9: 24:10
            scope 3 {
                debug i => _10;          // in scope 3 at ui/associated-types/associated-types-binding-in-trait.rs:24:9: 24:10
            }
        }
    }

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:23:19: 23:20
        _4 = move _1;                    // scope 1 at ui/associated-types/associated-types-binding-in-trait.rs:24:14: 24:17
        _3 = <T as BitIter>::bit_iter(move _4) -> bb1; // scope 1 at ui/associated-types/associated-types-binding-in-trait.rs:24:14: 24:28
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-binding-in-trait.rs:24:18: 24:26
                                         // + literal: Const { ty: fn(T) -> <T as BitIter>::Iter {<T as BitIter>::bit_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <<T as BitIter>::Iter as IntoIterator>::into_iter(move _3) -> bb2; // scope 1 at ui/associated-types/associated-types-binding-in-trait.rs:24:14: 24:28
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-binding-in-trait.rs:24:14: 24:28
                                         // + literal: Const { ty: fn(<T as BitIter>::Iter) -> <<T as BitIter>::Iter as IntoIterator>::IntoIter {<<T as BitIter>::Iter as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = move _2;                    // scope 1 at ui/associated-types/associated-types-binding-in-trait.rs:24:14: 24:28
        goto -> bb3;                     // scope 2 at ui/associated-types/associated-types-binding-in-trait.rs:24:5: 28:6
    }

    bb3: {
        _8 = &mut _5;                    // scope 2 at ui/associated-types/associated-types-binding-in-trait.rs:24:14: 24:28
        _7 = &mut (*_8);                 // scope 2 at ui/associated-types/associated-types-binding-in-trait.rs:24:14: 24:28
        _6 = <<T as BitIter>::Iter as Iterator>::next(move _7) -> [return: bb4, unwind: bb11]; // scope 2 at ui/associated-types/associated-types-binding-in-trait.rs:24:14: 24:28
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-binding-in-trait.rs:24:14: 24:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut <T as BitIter>::Iter) -> Option<<<T as BitIter>::Iter as Iterator>::Item> {<<T as BitIter>::Iter as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = discriminant(_6);           // scope 2 at ui/associated-types/associated-types-binding-in-trait.rs:24:14: 24:28
        switchInt(move _9) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 2 at ui/associated-types/associated-types-binding-in-trait.rs:24:14: 24:28
    }

    bb5: {
        _10 = ((_6 as Some).0: bool);    // scope 2 at ui/associated-types/associated-types-binding-in-trait.rs:24:9: 24:10
        _11 = _10;                       // scope 3 at ui/associated-types/associated-types-binding-in-trait.rs:25:12: 25:13
        switchInt(move _11) -> [0: bb3, otherwise: bb8]; // scope 3 at ui/associated-types/associated-types-binding-in-trait.rs:25:12: 25:13
    }

    bb6: {
        unreachable;                     // scope 2 at ui/associated-types/associated-types-binding-in-trait.rs:24:14: 24:28
    }

    bb7: {
        drop(_5) -> bb10;                // scope 1 at ui/associated-types/associated-types-binding-in-trait.rs:28:5: 28:6
    }

    bb8: {
        _12 = CheckedAdd(_0, const 1_usize); // scope 3 at ui/associated-types/associated-types-binding-in-trait.rs:26:13: 26:21
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", _0, const 1_usize) -> [success: bb9, unwind: bb11]; // scope 3 at ui/associated-types/associated-types-binding-in-trait.rs:26:13: 26:21
    }

    bb9: {
        _0 = move (_12.0: usize);        // scope 3 at ui/associated-types/associated-types-binding-in-trait.rs:26:13: 26:21
        goto -> bb3;                     // scope 3 at ui/associated-types/associated-types-binding-in-trait.rs:25:9: 27:10
    }

    bb10: {
        return;                          // scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:30:2: 30:2
    }

    bb11 (cleanup): {
        drop(_5) -> bb12;                // scope 1 at ui/associated-types/associated-types-binding-in-trait.rs:28:5: 28:6
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:20:1: 30:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:32:11: 32:11
    let _1: std::vec::Vec<bool>;         // in scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:33:9: 33:10
    let mut _2: std::boxed::Box<[bool]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[bool; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[bool; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: std::vec::Vec<bool>;     // in scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:34:19: 34:20
    let mut _10: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _11: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _12: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _17: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _18: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _20: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _21: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _22: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _23: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _24: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _25: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _28: *const [bool; 3];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/associated-types/associated-types-binding-in-trait.rs:33:9: 33:10
        let _8: usize;                   // in scope 1 at ui/associated-types/associated-types-binding-in-trait.rs:34:9: 34:10
        scope 3 {
            debug c => _8;               // in scope 3 at ui/associated-types/associated-types-binding-in-trait.rs:34:9: 34:10
            let _13: &usize;             // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _14: &usize;             // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _27: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 4 {
                debug left_val => _13;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _14;  // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _19: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 5 {
                    debug kind => _19;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = const 3_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 1_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [bool; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _28 = (((_7.0: std::ptr::Unique<[bool; 3]>).0: std::ptr::NonNull<[bool; 3]>).0: *const [bool; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_28) = [const true, const false, const true]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[bool]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [bool]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[bool]>) -> Vec<bool> {slice::<impl [bool]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = move _1;                    // scope 1 at ui/associated-types/associated-types-binding-in-trait.rs:34:19: 34:20
        _8 = count::<Vec<bool>>(move _9) -> bb3; // scope 1 at ui/associated-types/associated-types-binding-in-trait.rs:34:13: 34:21
                                         // mir::Constant
                                         // + span: ui/associated-types/associated-types-binding-in-trait.rs:34:13: 34:18
                                         // + literal: Const { ty: fn(Vec<bool>) -> usize {count::<Vec<bool>>}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = &_8;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _27 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _12 = _27;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _10 = (move _11, move _12);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _13 = (_10.0: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _14 = (_10.1: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _17 = (*_13);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _18 = const 2_usize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _16 = Eq(move _17, move _18);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _15 = Not(move _16);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _15) -> [0: bb5, otherwise: bb4]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _19 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = _13;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _23;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _14;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = _25;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _20 = core::panicking::assert_failed::<usize, usize>(move _21, move _22, move _24, move _26); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:36:2: 36:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:35:19: 35:20

    bb0: {
        _1 = const 2_usize;              // scope 0 at ui/associated-types/associated-types-binding-in-trait.rs:35:19: 35:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
