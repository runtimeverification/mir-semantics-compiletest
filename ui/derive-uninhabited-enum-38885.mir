// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/derive-uninhabited-enum-38885.rs:7:10: 7:15>::fmt(_1: &Void, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derive-uninhabited-enum-38885.rs:7:10: 7:15
    debug f => _2;                       // in scope 0 at ui/derive-uninhabited-enum-38885.rs:7:10: 7:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derive-uninhabited-enum-38885.rs:7:10: 7:15
    scope 1 {
    }

    bb0: {
        unreachable;                     // scope 1 at ui/derive-uninhabited-enum-38885.rs:7:10: 7:15
    }
}

fn <impl at ui/derive-uninhabited-enum-38885.rs:10:10: 10:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derive-uninhabited-enum-38885.rs:10:10: 10:15
    debug f => _2;                       // in scope 0 at ui/derive-uninhabited-enum-38885.rs:10:10: 10:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derive-uninhabited-enum-38885.rs:10:10: 10:15
    let mut _3: isize;                   // in scope 0 at ui/derive-uninhabited-enum-38885.rs:10:10: 10:15
    let _4: &u8;                         // in scope 0 at ui/derive-uninhabited-enum-38885.rs:12:9: 12:11
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derive-uninhabited-enum-38885.rs:10:10: 10:15
    let mut _6: &str;                    // in scope 0 at ui/derive-uninhabited-enum-38885.rs:10:10: 10:15
    let _7: &str;                        // in scope 0 at ui/derive-uninhabited-enum-38885.rs:10:10: 10:15
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/derive-uninhabited-enum-38885.rs:12:9: 12:11
    let mut _9: &&u8;                    // in scope 0 at ui/derive-uninhabited-enum-38885.rs:12:9: 12:11
    let _10: &&u8;                       // in scope 0 at ui/derive-uninhabited-enum-38885.rs:12:9: 12:11
    let _11: &Void;                      // in scope 0 at ui/derive-uninhabited-enum-38885.rs:13:10: 13:14
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/derive-uninhabited-enum-38885.rs:12:9: 12:11
    }
    scope 2 {
        debug __self_0 => _11;           // in scope 2 at ui/derive-uninhabited-enum-38885.rs:13:10: 13:14
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/derive-uninhabited-enum-38885.rs:10:10: 10:15
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/derive-uninhabited-enum-38885.rs:10:10: 10:15
    }

    bb1: {
        unreachable;                     // scope 0 at ui/derive-uninhabited-enum-38885.rs:10:10: 10:15
    }

    bb2: {
        _4 = &(((*_1) as Bar).0: u8);    // scope 0 at ui/derive-uninhabited-enum-38885.rs:12:9: 12:11
        _5 = &mut (*_2);                 // scope 1 at ui/derive-uninhabited-enum-38885.rs:10:10: 10:15
        _7 = const "Bar";                // scope 1 at ui/derive-uninhabited-enum-38885.rs:10:10: 10:15
                                         // mir::Constant
                                         // + span: ui/derive-uninhabited-enum-38885.rs:10:10: 10:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/derive-uninhabited-enum-38885.rs:10:10: 10:15
        _10 = &_4;                       // scope 1 at ui/derive-uninhabited-enum-38885.rs:12:9: 12:11
        _9 = _10;                        // scope 1 at ui/derive-uninhabited-enum-38885.rs:12:9: 12:11
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/derive-uninhabited-enum-38885.rs:12:9: 12:11
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> bb3; // scope 1 at ui/derive-uninhabited-enum-38885.rs:10:10: 10:15
                                         // mir::Constant
                                         // + span: ui/derive-uninhabited-enum-38885.rs:10:10: 10:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/derive-uninhabited-enum-38885.rs:10:15: 10:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/derive-uninhabited-enum-38885.rs:16:11: 16:11
    let _1: Foo;                         // in scope 0 at ui/derive-uninhabited-enum-38885.rs:17:9: 17:10
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/derive-uninhabited-enum-38885.rs:18:14: 18:20
    let mut _5: &[&str; 2];              // in scope 0 at ui/derive-uninhabited-enum-38885.rs:18:14: 18:20
    let _6: &[&str; 2];                  // in scope 0 at ui/derive-uninhabited-enum-38885.rs:18:14: 18:20
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/derive-uninhabited-enum-38885.rs:18:22: 18:23
    let mut _12: &Foo;                   // in scope 0 at ui/derive-uninhabited-enum-38885.rs:18:22: 18:23
    let _13: &Foo;                       // in scope 0 at ui/derive-uninhabited-enum-38885.rs:18:22: 18:23
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/derive-uninhabited-enum-38885.rs:17:9: 17:10
        let mut _14: &[&str; 2];         // in scope 1 at ui/derive-uninhabited-enum-38885.rs:18:14: 18:20
    }

    bb0: {
        _1 = Foo::Bar(const 42_u8);      // scope 0 at ui/derive-uninhabited-enum-38885.rs:17:13: 17:25
        _14 = const _;                   // scope 1 at ui/derive-uninhabited-enum-38885.rs:18:14: 18:20
                                         // mir::Constant
                                         // + span: ui/derive-uninhabited-enum-38885.rs:18:14: 18:20
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _6 = _14;                        // scope 1 at ui/derive-uninhabited-enum-38885.rs:18:14: 18:20
        _5 = _6;                         // scope 1 at ui/derive-uninhabited-enum-38885.rs:18:14: 18:20
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 1 at ui/derive-uninhabited-enum-38885.rs:18:14: 18:20
        _13 = &_1;                       // scope 1 at ui/derive-uninhabited-enum-38885.rs:18:22: 18:23
        _12 = _13;                       // scope 1 at ui/derive-uninhabited-enum-38885.rs:18:22: 18:23
        _11 = core::fmt::ArgumentV1::<'_>::new_debug::<Foo>(move _12) -> bb1; // scope 1 at ui/derive-uninhabited-enum-38885.rs:18:22: 18:23
                                         // mir::Constant
                                         // + span: ui/derive-uninhabited-enum-38885.rs:18:22: 18:23
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b Foo) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Foo>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> bb3;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/derive-uninhabited-enum-38885.rs:19:2: 19:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/derive-uninhabited-enum-38885.rs:18:14: 18:20
    let mut _1: [&str; 2];               // in scope 0 at ui/derive-uninhabited-enum-38885.rs:18:14: 18:20

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/derive-uninhabited-enum-38885.rs:18:14: 18:20
                                         // mir::Constant
                                         // + span: ui/derive-uninhabited-enum-38885.rs:18:14: 18:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/derive-uninhabited-enum-38885.rs:18:14: 18:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/derive-uninhabited-enum-38885.rs:18:14: 18:20
        return;                          // scope 0 at ui/derive-uninhabited-enum-38885.rs:18:14: 18:20
    }
}

fn Foo::Bar(_1: u8) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/derive-uninhabited-enum-38885.rs:12:5: 12:8

    bb0: {
        _0 = Foo::Bar(move _1);          // scope 0 at ui/derive-uninhabited-enum-38885.rs:12:5: 12:8
        return;                          // scope 0 at ui/derive-uninhabited-enum-38885.rs:12:5: 12:8
    }
}

// MIR FOR CTFE
fn Foo::Bar(_1: u8) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/derive-uninhabited-enum-38885.rs:12:5: 12:8

    bb0: {
        _0 = Foo::Bar(move _1);          // scope 0 at ui/derive-uninhabited-enum-38885.rs:12:5: 12:8
        return;                          // scope 0 at ui/derive-uninhabited-enum-38885.rs:12:5: 12:8
    }
}

fn Foo::Void(_1: Void) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/derive-uninhabited-enum-38885.rs:13:5: 13:9

    bb0: {
        _0 = Foo::Void(move _1);         // scope 0 at ui/derive-uninhabited-enum-38885.rs:13:5: 13:9
        return;                          // scope 0 at ui/derive-uninhabited-enum-38885.rs:13:5: 13:9
    }
}

// MIR FOR CTFE
fn Foo::Void(_1: Void) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/derive-uninhabited-enum-38885.rs:13:5: 13:9

    bb0: {
        _0 = Foo::Void(move _1);         // scope 0 at ui/derive-uninhabited-enum-38885.rs:13:5: 13:9
        return;                          // scope 0 at ui/derive-uninhabited-enum-38885.rs:13:5: 13:9
    }
}
