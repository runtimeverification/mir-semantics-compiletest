// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/auto-traits.rs:7:11: 7:11
    let _1: ();                          // in scope 0 at ui/never-type/auto-traits.rs:12:5: 12:26
    let _2: ();                          // in scope 0 at ui/never-type/auto-traits.rs:13:5: 13:23
    let _3: ();                          // in scope 0 at ui/never-type/auto-traits.rs:16:5: 16:26
    let _4: ();                          // in scope 0 at ui/never-type/auto-traits.rs:17:5: 17:23

    bb0: {
        _1 = assert_auto::<Void>() -> bb1; // scope 0 at ui/never-type/auto-traits.rs:12:5: 12:26
                                         // mir::Constant
                                         // + span: ui/never-type/auto-traits.rs:12:5: 12:24
                                         // + literal: Const { ty: fn() {assert_auto::<Void>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = assert_auto::<!>() -> bb2;  // scope 0 at ui/never-type/auto-traits.rs:13:5: 13:23
                                         // mir::Constant
                                         // + span: ui/never-type/auto-traits.rs:13:5: 13:21
                                         // + literal: Const { ty: fn() {assert_auto::<!>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = assert_send::<Void>() -> bb3; // scope 0 at ui/never-type/auto-traits.rs:16:5: 16:26
                                         // mir::Constant
                                         // + span: ui/never-type/auto-traits.rs:16:5: 16:24
                                         // + literal: Const { ty: fn() {assert_send::<Void>}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = assert_send::<!>() -> bb4;  // scope 0 at ui/never-type/auto-traits.rs:17:5: 17:23
                                         // mir::Constant
                                         // + span: ui/never-type/auto-traits.rs:17:5: 17:21
                                         // + literal: Const { ty: fn() {assert_send::<!>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/never-type/auto-traits.rs:18:2: 18:2
    }
}

fn assert_auto() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/auto-traits.rs:11:31: 11:31

    bb0: {
        return;                          // scope 0 at ui/never-type/auto-traits.rs:11:33: 11:33
    }
}

fn assert_send() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/auto-traits.rs:15:31: 15:31

    bb0: {
        return;                          // scope 0 at ui/never-type/auto-traits.rs:15:33: 15:33
    }
}
