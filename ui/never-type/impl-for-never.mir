// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/never-type/impl-for-never.rs:11:1: 11:25>::stringify_type() -> &str {
    let mut _0: &str;                    // return place in scope 0 at ui/never-type/impl-for-never.rs:12:28: 12:40

    bb0: {
        _0 = const "!";                  // scope 0 at ui/never-type/impl-for-never.rs:13:9: 13:12
                                         // mir::Constant
                                         // + span: ui/never-type/impl-for-never.rs:13:9: 13:12
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at ui/never-type/impl-for-never.rs:14:6: 14:6
    }
}

fn maybe_stringify(_1: Option<T>) -> &str {
    debug opt => _1;                     // in scope 0 at ui/never-type/impl-for-never.rs:17:38: 17:41
    let mut _0: &str;                    // return place in scope 0 at ui/never-type/impl-for-never.rs:17:57: 17:69
    let mut _2: isize;                   // in scope 0 at ui/never-type/impl-for-never.rs:19:9: 19:16

    bb0: {
        _2 = discriminant(_1);           // scope 0 at ui/never-type/impl-for-never.rs:18:11: 18:14
        switchInt(move _2) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 0 at ui/never-type/impl-for-never.rs:18:5: 18:14
    }

    bb1: {
        _0 = const "none";               // scope 0 at ui/never-type/impl-for-never.rs:20:17: 20:23
                                         // mir::Constant
                                         // + span: ui/never-type/impl-for-never.rs:20:17: 20:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb4;                     // scope 0 at ui/never-type/impl-for-never.rs:20:17: 20:23
    }

    bb2: {
        unreachable;                     // scope 0 at ui/never-type/impl-for-never.rs:18:11: 18:14
    }

    bb3: {
        _0 = <T as StringifyType>::stringify_type() -> [return: bb8, unwind: bb6]; // scope 0 at ui/never-type/impl-for-never.rs:19:20: 19:39
                                         // mir::Constant
                                         // + span: ui/never-type/impl-for-never.rs:19:20: 19:37
                                         // + literal: Const { ty: fn() -> &'static str {<T as StringifyType>::stringify_type}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/never-type/impl-for-never.rs:22:1: 22:2
    }

    bb5: {
        return;                          // scope 0 at ui/never-type/impl-for-never.rs:22:2: 22:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/never-type/impl-for-never.rs:22:1: 22:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/never-type/impl-for-never.rs:17:1: 22:2
    }

    bb8: {
        goto -> bb4;                     // scope 0 at ui/never-type/impl-for-never.rs:19:20: 19:39
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/impl-for-never.rs:24:11: 24:11
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _3: &[&str];                 // in scope 0 at ui/never-type/impl-for-never.rs:25:14: 25:23
    let mut _4: &[&str; 2];              // in scope 0 at ui/never-type/impl-for-never.rs:25:14: 25:23
    let _5: &[&str; 2];                  // in scope 0 at ui/never-type/impl-for-never.rs:25:14: 25:23
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/never-type/impl-for-never.rs:25:25: 25:46
    let mut _11: &&str;                  // in scope 0 at ui/never-type/impl-for-never.rs:25:25: 25:46
    let _12: &&str;                      // in scope 0 at ui/never-type/impl-for-never.rs:25:25: 25:46
    let _13: &str;                       // in scope 0 at ui/never-type/impl-for-never.rs:25:25: 25:46
    let _14: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _15: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _16: &[&str];                // in scope 0 at ui/never-type/impl-for-never.rs:26:14: 26:26
    let mut _17: &[&str; 2];             // in scope 0 at ui/never-type/impl-for-never.rs:26:14: 26:26
    let _18: &[&str; 2];                 // in scope 0 at ui/never-type/impl-for-never.rs:26:14: 26:26
    let mut _19: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _20: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _21: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _22: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _23: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/never-type/impl-for-never.rs:26:28: 26:54
    let mut _24: &&str;                  // in scope 0 at ui/never-type/impl-for-never.rs:26:28: 26:54
    let _25: &&str;                      // in scope 0 at ui/never-type/impl-for-never.rs:26:28: 26:54
    let _26: &str;                       // in scope 0 at ui/never-type/impl-for-never.rs:26:28: 26:54
    let mut _27: std::option::Option<!>; // in scope 0 at ui/never-type/impl-for-never.rs:26:44: 26:53
    let mut _28: &[&str; 2];             // in scope 0 at ui/never-type/impl-for-never.rs:26:14: 26:26
    let mut _29: &[&str; 2];             // in scope 0 at ui/never-type/impl-for-never.rs:25:14: 25:23

    bb0: {
        _29 = const _;                   // scope 0 at ui/never-type/impl-for-never.rs:25:14: 25:23
                                         // mir::Constant
                                         // + span: ui/never-type/impl-for-never.rs:25:14: 25:23
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _5 = _29;                        // scope 0 at ui/never-type/impl-for-never.rs:25:14: 25:23
        _4 = _5;                         // scope 0 at ui/never-type/impl-for-never.rs:25:14: 25:23
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/never-type/impl-for-never.rs:25:14: 25:23
        _13 = <! as StringifyType>::stringify_type() -> bb1; // scope 0 at ui/never-type/impl-for-never.rs:25:25: 25:46
                                         // mir::Constant
                                         // + span: ui/never-type/impl-for-never.rs:25:25: 25:44
                                         // + literal: Const { ty: fn() -> &'static str {<! as StringifyType>::stringify_type}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = &_13;                      // scope 0 at ui/never-type/impl-for-never.rs:25:25: 25:46
        _11 = _12;                       // scope 0 at ui/never-type/impl-for-never.rs:25:25: 25:46
        _10 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _11) -> bb2; // scope 0 at ui/never-type/impl-for-never.rs:25:25: 25:46
                                         // mir::Constant
                                         // + span: ui/never-type/impl-for-never.rs:25:25: 25:46
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = [move _10];                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = _print(move _2) -> bb4;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        _28 = const _;                   // scope 0 at ui/never-type/impl-for-never.rs:26:14: 26:26
                                         // mir::Constant
                                         // + span: ui/never-type/impl-for-never.rs:26:14: 26:26
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _18 = _28;                       // scope 0 at ui/never-type/impl-for-never.rs:26:14: 26:26
        _17 = _18;                       // scope 0 at ui/never-type/impl-for-never.rs:26:14: 26:26
        _16 = move _17 as &[&str] (Pointer(Unsize)); // scope 0 at ui/never-type/impl-for-never.rs:26:14: 26:26
        _26 = maybe_stringify::<!>(move _27) -> bb5; // scope 0 at ui/never-type/impl-for-never.rs:26:28: 26:54
                                         // mir::Constant
                                         // + span: ui/never-type/impl-for-never.rs:26:28: 26:43
                                         // + literal: Const { ty: fn(Option<!>) -> &'static str {maybe_stringify::<!>}, val: Value(<ZST>) }
    }

    bb5: {
        _25 = &_26;                      // scope 0 at ui/never-type/impl-for-never.rs:26:28: 26:54
        _24 = _25;                       // scope 0 at ui/never-type/impl-for-never.rs:26:28: 26:54
        _23 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _24) -> bb6; // scope 0 at ui/never-type/impl-for-never.rs:26:28: 26:54
                                         // mir::Constant
                                         // + span: ui/never-type/impl-for-never.rs:26:28: 26:54
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb6: {
        _22 = [move _23];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _21 = &_22;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = _21;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _19 = move _20 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _15 = Arguments::<'_>::new_v1(move _16, move _19) -> bb7; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = _print(move _15) -> bb8;   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/never-type/impl-for-never.rs:27:2: 27:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/never-type/impl-for-never.rs:26:14: 26:26
    let mut _1: [&str; 2];               // in scope 0 at ui/never-type/impl-for-never.rs:26:14: 26:26

    bb0: {
        _1 = [const "None is ", const "\n"]; // scope 0 at ui/never-type/impl-for-never.rs:26:14: 26:26
                                         // mir::Constant
                                         // + span: ui/never-type/impl-for-never.rs:26:14: 26:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/never-type/impl-for-never.rs:26:14: 26:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/never-type/impl-for-never.rs:26:14: 26:26
        return;                          // scope 0 at ui/never-type/impl-for-never.rs:26:14: 26:26
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/never-type/impl-for-never.rs:25:14: 25:23
    let mut _1: [&str; 2];               // in scope 0 at ui/never-type/impl-for-never.rs:25:14: 25:23

    bb0: {
        _1 = [const "! is ", const "\n"]; // scope 0 at ui/never-type/impl-for-never.rs:25:14: 25:23
                                         // mir::Constant
                                         // + span: ui/never-type/impl-for-never.rs:25:14: 25:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/never-type/impl-for-never.rs:25:14: 25:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/never-type/impl-for-never.rs:25:14: 25:23
        return;                          // scope 0 at ui/never-type/impl-for-never.rs:25:14: 25:23
    }
}
