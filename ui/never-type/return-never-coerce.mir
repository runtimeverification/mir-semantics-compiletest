// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn call_another_fn(_1: F) -> T {
    debug f => _1;                       // in scope 0 at ui/never-type/return-never-coerce.rs:7:41: 7:42
    let mut _0: T;                       // return place in scope 0 at ui/never-type/return-never-coerce.rs:7:50: 7:51
    let mut _2: F;                       // in scope 0 at ui/never-type/return-never-coerce.rs:8:5: 8:6
    let mut _3: ();                      // in scope 0 at ui/never-type/return-never-coerce.rs:8:5: 8:8

    bb0: {
        _2 = move _1;                    // scope 0 at ui/never-type/return-never-coerce.rs:8:5: 8:6
        _0 = <F as FnOnce<()>>::call_once(move _2, move _3) -> bb1; // scope 0 at ui/never-type/return-never-coerce.rs:8:5: 8:8
                                         // mir::Constant
                                         // + span: ui/never-type/return-never-coerce.rs:8:5: 8:6
                                         // + literal: Const { ty: extern "rust-call" fn(F, ()) -> <F as FnOnce<()>>::Output {<F as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/never-type/return-never-coerce.rs:9:2: 9:2
    }
}

fn wub() -> ! {
    let mut _0: !;                       // return place in scope 0 at ui/never-type/return-never-coerce.rs:11:13: 11:14
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _1 = begin_panic::<&str>(const "aah!"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/never-type/return-never-coerce.rs:12:12: 12:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/return-never-coerce.rs:15:11: 15:11
    let _1: i32;                         // in scope 0 at ui/never-type/return-never-coerce.rs:16:9: 16:10
    let mut _2: !;                       // in scope 0 at ui/never-type/return-never-coerce.rs:16:18: 16:38
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/never-type/return-never-coerce.rs:16:9: 16:10
        let _3: u32;                     // in scope 1 at ui/never-type/return-never-coerce.rs:17:9: 17:10
        scope 2 {
            debug y => _3;               // in scope 2 at ui/never-type/return-never-coerce.rs:17:9: 17:10
        }
    }

    bb0: {
        _2 = call_another_fn::<!, fn() -> ! {wub}>(wub); // scope 0 at ui/never-type/return-never-coerce.rs:16:18: 16:38
                                         // mir::Constant
                                         // + span: ui/never-type/return-never-coerce.rs:16:18: 16:33
                                         // + literal: Const { ty: fn(fn() -> ! {wub}) -> ! {call_another_fn::<!, fn() -> ! {wub}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/never-type/return-never-coerce.rs:16:34: 16:37
                                         // + literal: Const { ty: fn() -> ! {wub}, val: Value(<ZST>) }
    }
}
