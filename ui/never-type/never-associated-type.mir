// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/never-type/never-associated-type.rs:14:1: 14:18>::smeg(_1: &Blah) -> ! {
    debug self => _1;                    // in scope 0 at ui/never-type/never-associated-type.rs:16:13: 16:18
    let mut _0: !;                       // return place in scope 0 at ui/never-type/never-associated-type.rs:16:23: 16:24
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _2 = begin_panic::<&str>(const "kapow!"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/never-type/never-associated-type.rs:17:16: 17:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/never-associated-type.rs:21:11: 21:11
    let _1: !;                           // in scope 0 at ui/never-type/never-associated-type.rs:22:5: 22:16
    let mut _2: &Blah;                   // in scope 0 at ui/never-type/never-associated-type.rs:22:5: 22:16
    let mut _3: &Blah;                   // in scope 0 at ui/never-type/never-associated-type.rs:22:5: 22:16

    bb0: {
        _3 = const _;                    // scope 0 at ui/never-type/never-associated-type.rs:22:5: 22:16
                                         // mir::Constant
                                         // + span: ui/never-type/never-associated-type.rs:22:5: 22:16
                                         // + literal: Const { ty: &Blah, val: Unevaluated(main, [], Some(promoted[0])) }
        _2 = _3;                         // scope 0 at ui/never-type/never-associated-type.rs:22:5: 22:16
        _1 = <Blah as Foo>::smeg(move _2); // scope 0 at ui/never-type/never-associated-type.rs:22:5: 22:16
                                         // mir::Constant
                                         // + span: ui/never-type/never-associated-type.rs:22:10: 22:14
                                         // + literal: Const { ty: for<'a> fn(&'a Blah) -> <Blah as Foo>::Wow {<Blah as Foo>::smeg}, val: Value(<ZST>) }
    }
}

promoted[0] in main: &Blah = {
    let mut _0: &Blah;                   // return place in scope 0 at ui/never-type/never-associated-type.rs:22:5: 22:16
    let mut _1: Blah;                    // in scope 0 at ui/never-type/never-associated-type.rs:22:5: 22:9

    bb0: {
        _1 = Blah;                       // scope 0 at ui/never-type/never-associated-type.rs:22:5: 22:9
        _0 = &_1;                        // scope 0 at ui/never-type/never-associated-type.rs:22:5: 22:16
        return;                          // scope 0 at ui/never-type/never-associated-type.rs:22:5: 22:16
    }
}
