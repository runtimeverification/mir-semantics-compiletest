// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:51:11: 51:11

    bb0: {
        return;                          // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:51:13: 51:13
    }
}

fn NestedZst(_1: PhantomData<()>, _2: Zst) -> NestedZst {
    let mut _0: NestedZst;               // return place in scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:13:1: 13:17

    bb0: {
        _0 = NestedZst(move _1, move _2); // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:13:1: 13:17
        return;                          // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:13:1: 13:17
    }
}

// MIR FOR CTFE
fn NestedZst(_1: PhantomData<()>, _2: Zst) -> NestedZst {
    let mut _0: NestedZst;               // return place in scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:13:1: 13:17

    bb0: {
        _0 = NestedZst(move _1, move _2); // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:13:1: 13:17
        return;                          // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:13:1: 13:17
    }
}

fn WithUnit(_1: Box<T>, _2: ()) -> WithUnit<T> {
    let mut _0: WithUnit<T>;             // return place in scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:16:1: 16:27

    bb0: {
        _0 = WithUnit::<T>(move _1, move _2); // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:16:1: 16:27
        return;                          // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:16:1: 16:27
    }
}

// MIR FOR CTFE
fn WithUnit(_1: Box<T>, _2: ()) -> WithUnit<T> {
    let mut _0: WithUnit<T>;             // return place in scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:16:1: 16:27

    bb0: {
        _0 = WithUnit::<T>(move _1, move _2); // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:16:1: 16:27
        return;                          // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:16:1: 16:27
    }
}

fn WithPhantom(_1: Box<T>, _2: PhantomData<()>) -> WithPhantom<T> {
    let mut _0: WithPhantom<T>;          // return place in scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:20:1: 20:30

    bb0: {
        _0 = WithPhantom::<T>(move _1, move _2); // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:20:1: 20:30
        return;                          // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:20:1: 20:30
    }
}

// MIR FOR CTFE
fn WithPhantom(_1: Box<T>, _2: PhantomData<()>) -> WithPhantom<T> {
    let mut _0: WithPhantom<T>;          // return place in scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:20:1: 20:30

    bb0: {
        _0 = WithPhantom::<T>(move _1, move _2); // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:20:1: 20:30
        return;                          // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:20:1: 20:30
    }
}

fn WithNever(_1: Box<T>, _2: !) -> WithNever<T> {
    let mut _0: WithNever<T>;            // return place in scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:24:1: 24:28

    bb0: {
        _0 = WithNever::<T>(move _1, move _2); // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:24:1: 24:28
        return;                          // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:24:1: 24:28
    }
}

// MIR FOR CTFE
fn WithNever(_1: Box<T>, _2: !) -> WithNever<T> {
    let mut _0: WithNever<T>;            // return place in scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:24:1: 24:28

    bb0: {
        _0 = WithNever::<T>(move _1, move _2); // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:24:1: 24:28
        return;                          // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:24:1: 24:28
    }
}

fn WithZst(_1: Box<T>, _2: Zst) -> WithZst<T> {
    let mut _0: WithZst<T>;              // return place in scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:28:1: 28:26

    bb0: {
        _0 = WithZst::<T>(move _1, move _2); // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:28:1: 28:26
        return;                          // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:28:1: 28:26
    }
}

// MIR FOR CTFE
fn WithZst(_1: Box<T>, _2: Zst) -> WithZst<T> {
    let mut _0: WithZst<T>;              // return place in scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:28:1: 28:26

    bb0: {
        _0 = WithZst::<T>(move _1, move _2); // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:28:1: 28:26
        return;                          // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:28:1: 28:26
    }
}

fn WithNestedZst(_1: Box<T>, _2: NestedZst) -> WithNestedZst<T> {
    let mut _0: WithNestedZst<T>;        // return place in scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:32:1: 32:32

    bb0: {
        _0 = WithNestedZst::<T>(move _1, move _2); // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:32:1: 32:32
        return;                          // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:32:1: 32:32
    }
}

// MIR FOR CTFE
fn WithNestedZst(_1: Box<T>, _2: NestedZst) -> WithNestedZst<T> {
    let mut _0: WithNestedZst<T>;        // return place in scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:32:1: 32:32

    bb0: {
        _0 = WithNestedZst::<T>(move _1, move _2); // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:32:1: 32:32
        return;                          // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:32:1: 32:32
    }
}

fn Generic(_1: Box<T>, _2: A) -> Generic<T, A> {
    let mut _0: Generic<T, A>;           // return place in scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:37:1: 37:29

    bb0: {
        _0 = Generic::<T, A>(move _1, move _2); // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:37:1: 37:29
        return;                          // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:37:1: 37:29
    }
}

// MIR FOR CTFE
fn Generic(_1: Box<T>, _2: A) -> Generic<T, A> {
    let mut _0: Generic<T, A>;           // return place in scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:37:1: 37:29

    bb0: {
        _0 = Generic::<T, A>(move _1, move _2); // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:37:1: 37:29
        return;                          // scope 0 at ui/never-type/dispatch_from_dyn_zst.rs:37:1: 37:29
    }
}
