// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: !) -> ! {
    debug x => _1;                       // in scope 0 at ui/never-type/never_transmute_never.rs:12:10: 12:11
    let mut _0: !;                       // return place in scope 0 at ui/never-type/never_transmute_never.rs:12:19: 12:20

    bb0: {
        unreachable;                     // scope 0 at ui/never-type/never_transmute_never.rs:13:5: 13:6
    }
}

fn ub() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/never_transmute_never.rs:16:13: 16:13
    let _1: !;                           // in scope 0 at ui/never-type/never_transmute_never.rs:19:9: 19:10
    let mut _2: !;                       // in scope 0 at ui/never-type/never_transmute_never.rs:20:9: 20:43
    let mut _3: Foo;                     // in scope 0 at ui/never-type/never_transmute_never.rs:20:39: 20:42
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/never-type/never_transmute_never.rs:19:9: 19:10
    }
    scope 2 {
    }

    bb0: {
        _2 = transmute::<Foo, !>(move _3); // scope 2 at ui/never-type/never_transmute_never.rs:20:9: 20:43
                                         // mir::Constant
                                         // + span: ui/never-type/never_transmute_never.rs:20:9: 20:38
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(Foo) -> ! {transmute::<Foo, !>}, val: Value(<ZST>) }
    }
}
