// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn never_direct(_1: !) -> () {
    debug x => _1;                       // in scope 0 at ui/never-type/never-type-rvalues.rs:8:17: 8:18
    let mut _0: ();                      // return place in scope 0 at ui/never-type/never-type-rvalues.rs:8:23: 8:23

    bb0: {
        unreachable;                     // scope 0 at ui/never-type/never-type-rvalues.rs:8:23: 10:2
    }
}

fn never_ref_pat(_1: !) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/never-type-rvalues.rs:12:28: 12:28
    let _2: &!;                          // in scope 0 at ui/never-type/never-type-rvalues.rs:12:18: 12:23
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/never-type/never-type-rvalues.rs:12:18: 12:23
    }

    bb0: {
        _2 = &_1;                        // scope 0 at ui/never-type/never-type-rvalues.rs:12:18: 12:23
        unreachable;                     // scope 1 at ui/never-type/never-type-rvalues.rs:12:28: 14:2
    }
}

fn never_ref(_1: &!) -> () {
    debug x => _1;                       // in scope 0 at ui/never-type/never-type-rvalues.rs:16:14: 16:15
    let mut _0: ();                      // return place in scope 0 at ui/never-type/never-type-rvalues.rs:16:21: 16:21
    let _2: !;                           // in scope 0 at ui/never-type/never-type-rvalues.rs:17:10: 17:11
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/never-type/never-type-rvalues.rs:17:10: 17:11
    }

    bb0: {
        unreachable;                     // scope 0 at ui/never-type/never-type-rvalues.rs:16:21: 19:2
    }
}

fn never_pointer(_1: *const !) -> () {
    debug x => _1;                       // in scope 0 at ui/never-type/never-type-rvalues.rs:21:18: 21:19
    let mut _0: ();                      // return place in scope 0 at ui/never-type/never-type-rvalues.rs:21:31: 21:31
    scope 1 {
    }

    bb0: {
        unreachable;                     // scope 0 at ui/never-type/never-type-rvalues.rs:22:5: 24:6
    }
}

fn never_slice(_1: &[!]) -> () {
    debug x => _1;                       // in scope 0 at ui/never-type/never-type-rvalues.rs:27:16: 27:17
    let mut _0: ();                      // return place in scope 0 at ui/never-type/never-type-rvalues.rs:27:25: 27:25
    let _2: usize;                       // in scope 0 at ui/never-type/never-type-rvalues.rs:28:7: 28:8
    let mut _3: usize;                   // in scope 0 at ui/never-type/never-type-rvalues.rs:28:5: 28:9
    let mut _4: bool;                    // in scope 0 at ui/never-type/never-type-rvalues.rs:28:5: 28:9

    bb0: {
        _2 = const 0_usize;              // scope 0 at ui/never-type/never-type-rvalues.rs:28:7: 28:8
        _3 = Len((*_1));                 // scope 0 at ui/never-type/never-type-rvalues.rs:28:5: 28:9
        _4 = Lt(_2, _3);                 // scope 0 at ui/never-type/never-type-rvalues.rs:28:5: 28:9
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1; // scope 0 at ui/never-type/never-type-rvalues.rs:28:5: 28:9
    }

    bb1: {
        unreachable;                     // scope 0 at ui/never-type/never-type-rvalues.rs:27:25: 29:2
    }
}

fn never_match(_1: Result<(), !>) -> () {
    debug x => _1;                       // in scope 0 at ui/never-type/never-type-rvalues.rs:31:16: 31:17
    let mut _0: ();                      // return place in scope 0 at ui/never-type/never-type-rvalues.rs:31:34: 31:34

    bb0: {
        return;                          // scope 0 at ui/never-type/never-type-rvalues.rs:36:2: 36:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/never-type-rvalues.rs:38:15: 38:15

    bb0: {
        return;                          // scope 0 at ui/never-type/never-type-rvalues.rs:38:18: 38:18
    }
}
