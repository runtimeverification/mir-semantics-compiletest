// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/never-type/try_from.rs:29:1: 29:32>::into(_1: Foo<T>) -> Vec<T> {
    debug self => _1;                    // in scope 0 at ui/never-type/try_from.rs:30:13: 30:17
    let mut _0: std::vec::Vec<T>;        // return place in scope 0 at ui/never-type/try_from.rs:30:22: 30:28
    let mut _2: std::boxed::Box<[T]>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[T; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[T; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: T;                       // in scope 0 at ui/never-type/try_from.rs:31:14: 31:20
    let mut _9: bool;                    // in scope 0 at ui/never-type/try_from.rs:32:5: 32:6
    let mut _10: *const [T; 1];          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }

    bb0: {
        _9 = const false;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = const true;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _4 = SizeOf([T; 1]);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = AlignOf([T; 1]);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb1, unwind: bb5]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [T; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = const false;                // scope 0 at ui/never-type/try_from.rs:31:14: 31:20
        _8 = move (_1.0: T);             // scope 0 at ui/never-type/try_from.rs:31:14: 31:20
        _10 = (((_7.0: std::ptr::Unique<[T; 1]>).0: std::ptr::NonNull<[T; 1]>).0: *const [T; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_10) = [move _8];              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[T]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _0 = slice::<impl [T]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind: bb5]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[T]>) -> Vec<T> {slice::<impl [T]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/never-type/try_from.rs:32:6: 32:6
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/never-type/try_from.rs:30:5: 32:6
    }

    bb4 (cleanup): {
        drop((_1.0: T)) -> bb3;          // scope 0 at ui/never-type/try_from.rs:32:5: 32:6
    }

    bb5 (cleanup): {
        switchInt(_9) -> [0: bb3, otherwise: bb4]; // scope 0 at ui/never-type/try_from.rs:32:5: 32:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/try_from.rs:35:15: 35:15
    let mut _1: std::result::Result<std::vec::Vec<i32>, std::convert::Infallible>; // in scope 0 at ui/never-type/try_from.rs:36:43: 36:67
    let mut _2: Foo<i32>;                // in scope 0 at ui/never-type/try_from.rs:36:43: 36:56
    scope 1 {
    }

    bb0: {
        _2 = const Foo::<i32> {{ t: 10_i32 }}; // scope 0 at ui/never-type/try_from.rs:36:43: 36:56
                                         // mir::Constant
                                         // + span: ui/never-type/try_from.rs:36:43: 36:56
                                         // + literal: Const { ty: Foo<i32>, val: Value(Scalar(0x0000000a)) }
        _1 = <Foo<i32> as TryInto<Vec<i32>>>::try_into(move _2) -> bb1; // scope 0 at ui/never-type/try_from.rs:36:43: 36:67
                                         // mir::Constant
                                         // + span: ui/never-type/try_from.rs:36:57: 36:65
                                         // + literal: Const { ty: fn(Foo<i32>) -> Result<Vec<i32>, <Foo<i32> as TryInto<Vec<i32>>>::Error> {<Foo<i32> as TryInto<Vec<i32>>>::try_into}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/never-type/try_from.rs:36:67: 36:68
    }

    bb2: {
        return;                          // scope 0 at ui/never-type/try_from.rs:37:2: 37:2
    }
}
