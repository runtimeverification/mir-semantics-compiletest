// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_a() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/issue-44402.rs:20:13: 20:13
    let _1: std::option::Option<Foo>;    // in scope 0 at ui/never-type/issue-44402.rs:21:9: 21:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/never-type/issue-44402.rs:21:9: 21:10
    }

    bb0: {
        _1 = Option::<Foo>::None;        // scope 0 at ui/never-type/issue-44402.rs:21:26: 21:30
        return;                          // scope 0 at ui/never-type/issue-44402.rs:23:2: 23:2
    }
}

fn test_b() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/issue-44402.rs:25:13: 25:13
    let _1: std::option::Option<Bar>;    // in scope 0 at ui/never-type/issue-44402.rs:26:9: 26:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/never-type/issue-44402.rs:26:9: 26:10
    }

    bb0: {
        _1 = const Option::<Bar>::None;  // scope 0 at ui/never-type/issue-44402.rs:26:26: 26:30
                                         // mir::Constant
                                         // + span: ui/never-type/issue-44402.rs:26:26: 26:30
                                         // + literal: Const { ty: Option<Bar>, val: Value(Scalar(0x0000000000000000)) }
        return;                          // scope 0 at ui/never-type/issue-44402.rs:31:2: 31:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/issue-44402.rs:33:11: 33:11

    bb0: {
        return;                          // scope 0 at ui/never-type/issue-44402.rs:33:14: 33:14
    }
}
