// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: !) -> ! {
    debug x => _1;                       // in scope 0 at ui/never-type/call-fn-never-arg.rs:8:8: 8:9
    let mut _0: !;                       // return place in scope 0 at ui/never-type/call-fn-never-arg.rs:8:17: 8:18

    bb0: {
        unreachable;                     // scope 0 at ui/never-type/call-fn-never-arg.rs:9:5: 9:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/call-fn-never-arg.rs:12:11: 12:11
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _1 = begin_panic::<&str>(const "wowzers!"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/never-type/call-fn-never-arg.rs:13:16: 13:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}
