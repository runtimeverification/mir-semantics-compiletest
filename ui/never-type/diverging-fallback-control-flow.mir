// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/never-type/diverging-fallback-control-flow.rs:18:1: 18:25>::default() -> u32 {
    let mut _0: u32;                     // return place in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:19:21: 19:25

    bb0: {
        _0 = const 0_u32;                // scope 0 at ui/never-type/diverging-fallback-control-flow.rs:20:9: 20:10
        return;                          // scope 0 at ui/never-type/diverging-fallback-control-flow.rs:21:6: 21:6
    }
}

fn <impl at ui/never-type/diverging-fallback-control-flow.rs:24:1: 24:24>::default() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:25:21: 25:23
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn assignment() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:30:17: 30:17
    let _1: ();                          // in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:31:9: 31:10
    let mut _2: ();                      // in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:34:13: 34:35
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/never-type/diverging-fallback-control-flow.rs:31:9: 31:10
    }

    bb0: {
        _2 = <() as UnitDefault>::default() -> bb1; // scope 1 at ui/never-type/diverging-fallback-control-flow.rs:34:13: 34:35
                                         // mir::Constant
                                         // + span: ui/never-type/diverging-fallback-control-flow.rs:34:13: 34:33
                                         // + literal: Const { ty: fn() {<() as UnitDefault>::default}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/never-type/diverging-fallback-control-flow.rs:38:2: 38:2
    }
}

fn assignment_rev() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:40:21: 40:21
    let _1: ();                          // in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:41:9: 41:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/never-type/diverging-fallback-control-flow.rs:41:9: 41:10
    }

    bb0: {
        return;                          // scope 0 at ui/never-type/diverging-fallback-control-flow.rs:48:2: 48:2
    }
}

fn if_then_else() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:50:19: 50:19
    let _1: ();                          // in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:51:9: 51:11
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/never-type/diverging-fallback-control-flow.rs:51:9: 51:11
    }

    bb0: {
        _1 = <() as UnitDefault>::default() -> bb1; // scope 0 at ui/never-type/diverging-fallback-control-flow.rs:52:9: 52:31
                                         // mir::Constant
                                         // + span: ui/never-type/diverging-fallback-control-flow.rs:52:9: 52:29
                                         // + literal: Const { ty: fn() {<() as UnitDefault>::default}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/never-type/diverging-fallback-control-flow.rs:56:2: 56:2
    }
}

fn if_then_else_rev() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:58:23: 58:23
    let _1: ();                          // in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:59:9: 59:11
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/never-type/diverging-fallback-control-flow.rs:59:9: 59:11
    }

    bb0: {
        return;                          // scope 0 at ui/never-type/diverging-fallback-control-flow.rs:64:2: 64:2
    }
}

fn match_arm() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:66:16: 66:16
    let _1: ();                          // in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:67:9: 67:11
    let mut _2: ();                      // in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:67:23: 67:45
    let _3: ();                          // in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:68:12: 68:13
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/never-type/diverging-fallback-control-flow.rs:67:9: 67:11
    }
    scope 2 {
        debug v => _3;                   // in scope 2 at ui/never-type/diverging-fallback-control-flow.rs:68:12: 68:13
    }

    bb0: {
        _2 = <() as UnitDefault>::default() -> bb1; // scope 0 at ui/never-type/diverging-fallback-control-flow.rs:67:23: 67:45
                                         // mir::Constant
                                         // + span: ui/never-type/diverging-fallback-control-flow.rs:67:23: 67:43
                                         // + literal: Const { ty: fn() {<() as UnitDefault>::default}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/never-type/diverging-fallback-control-flow.rs:71:2: 71:2
    }
}

fn match_arm_rev() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:73:20: 73:20
    let _1: ();                          // in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:74:9: 74:11
    let mut _2: ();                      // in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:74:23: 74:45
    let _3: ();                          // in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:76:12: 76:13
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/never-type/diverging-fallback-control-flow.rs:74:9: 74:11
    }
    scope 2 {
        debug v => _3;                   // in scope 2 at ui/never-type/diverging-fallback-control-flow.rs:76:12: 76:13
    }

    bb0: {
        _2 = <() as UnitDefault>::default() -> bb1; // scope 0 at ui/never-type/diverging-fallback-control-flow.rs:74:23: 74:45
                                         // mir::Constant
                                         // + span: ui/never-type/diverging-fallback-control-flow.rs:74:23: 74:43
                                         // + literal: Const { ty: fn() {<() as UnitDefault>::default}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/never-type/diverging-fallback-control-flow.rs:78:2: 78:2
    }
}

fn loop_break() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:80:17: 80:17
    let _1: ();                          // in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:81:9: 81:11
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/never-type/diverging-fallback-control-flow.rs:81:9: 81:11
    }

    bb0: {
        _1 = <() as UnitDefault>::default() -> bb1; // scope 0 at ui/never-type/diverging-fallback-control-flow.rs:85:19: 85:41
                                         // mir::Constant
                                         // + span: ui/never-type/diverging-fallback-control-flow.rs:85:19: 85:39
                                         // + literal: Const { ty: fn() {<() as UnitDefault>::default}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/never-type/diverging-fallback-control-flow.rs:88:2: 88:2
    }
}

fn loop_break_rev() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:90:21: 90:21
    let _1: ();                          // in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:91:9: 91:11
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/never-type/diverging-fallback-control-flow.rs:91:9: 91:11
    }

    bb0: {
        _1 = <() as UnitDefault>::default() -> bb1; // scope 0 at ui/never-type/diverging-fallback-control-flow.rs:95:19: 95:41
                                         // mir::Constant
                                         // + span: ui/never-type/diverging-fallback-control-flow.rs:95:19: 95:39
                                         // + literal: Const { ty: fn() {<() as UnitDefault>::default}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/never-type/diverging-fallback-control-flow.rs:98:2: 98:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/never-type/diverging-fallback-control-flow.rs:100:11: 100:11

    bb0: {
        return;                          // scope 0 at ui/never-type/diverging-fallback-control-flow.rs:100:13: 100:13
    }
}
