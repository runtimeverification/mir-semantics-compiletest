// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/super.rs:7:16: 7:16

    bb0: {
        return;                          // scope 0 at ui/super.rs:7:18: 7:18
    }
}

fn g() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/super.rs:9:16: 9:16
    let _1: ();                          // in scope 0 at ui/super.rs:10:13: 10:23

    bb0: {
        _1 = f() -> bb1;                 // scope 0 at ui/super.rs:10:13: 10:23
                                         // mir::Constant
                                         // + span: ui/super.rs:10:13: 10:21
                                         // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/super.rs:11:10: 11:10
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/super.rs:15:15: 15:15

    bb0: {
        return;                          // scope 0 at ui/super.rs:16:2: 16:2
    }
}
