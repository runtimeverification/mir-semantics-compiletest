// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn take_auto(_1: T) -> () {
    let mut _0: ();

    bb0: {
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn take_auto_unsafe(_1: T) -> () {
    let mut _0: ();

    bb0: {
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let mut _3: AutoBool;
    let _4: ();
    let _5: ();
    let mut _6: AutoBool;
    scope 1 {
    }

    bb0: {
        _1 = take_auto::<i32>(const 0_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = AutoBool(const true);
        _2 = take_auto::<AutoBool>(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = take_auto_unsafe::<i32>(const 0_i32) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = AutoBool(const true);
        _5 = take_auto_unsafe::<AutoBool>(move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

fn AutoBool(_1: bool) -> AutoBool {
    let mut _0: AutoBool;

    bb0: {
        _0 = AutoBool(move _1);
        return;
    }
}

// MIR FOR CTFE
fn AutoBool(_1: bool) -> AutoBool {
    let mut _0: AutoBool;

    bb0: {
        _0 = AutoBool(move _1);
        return;
    }
}
