// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generics/mid-path-type-params.rs:10:1: 10:13>::new(_1: T, _2: U) -> S<T> {
    debug x => _1;                       // in scope 0 at ui/generics/mid-path-type-params.rs:11:15: 11:16
    let mut _0: S<T>;                    // return place in scope 0 at ui/generics/mid-path-type-params.rs:11:30: 11:34
    let mut _3: T;                       // in scope 0 at ui/generics/mid-path-type-params.rs:13:23: 13:24

    bb0: {
        _3 = move _1;                    // scope 0 at ui/generics/mid-path-type-params.rs:13:23: 13:24
        _0 = S::<T> { contents: move _3 }; // scope 0 at ui/generics/mid-path-type-params.rs:12:9: 14:10
        drop(_2) -> bb1;                 // scope 0 at ui/generics/mid-path-type-params.rs:15:5: 15:6
    }

    bb1: {
        return;                          // scope 0 at ui/generics/mid-path-type-params.rs:15:6: 15:6
    }
}

fn <impl at ui/generics/mid-path-type-params.rs:26:1: 26:25>::new(_1: isize, _2: U) -> S2 {
    debug x => _1;                       // in scope 0 at ui/generics/mid-path-type-params.rs:27:15: 27:16
    let mut _0: S2;                      // return place in scope 0 at ui/generics/mid-path-type-params.rs:27:34: 27:36
    let mut _3: isize;                   // in scope 0 at ui/generics/mid-path-type-params.rs:29:23: 29:24

    bb0: {
        _3 = _1;                         // scope 0 at ui/generics/mid-path-type-params.rs:29:23: 29:24
        _0 = S2 { contents: move _3 };   // scope 0 at ui/generics/mid-path-type-params.rs:28:9: 30:10
        drop(_2) -> bb1;                 // scope 0 at ui/generics/mid-path-type-params.rs:31:5: 31:6
    }

    bb1: {
        return;                          // scope 0 at ui/generics/mid-path-type-params.rs:31:6: 31:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generics/mid-path-type-params.rs:34:15: 34:15
    let mut _1: S<isize>;                // in scope 0 at ui/generics/mid-path-type-params.rs:35:13: 35:43
    let mut _2: S2;                      // in scope 0 at ui/generics/mid-path-type-params.rs:36:17: 36:51
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _1 = S::<isize>::new::<f64>(const 1_isize, const 1f64) -> bb1; // scope 0 at ui/generics/mid-path-type-params.rs:35:13: 35:43
                                         // mir::Constant
                                         // + span: ui/generics/mid-path-type-params.rs:35:13: 35:35
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize, f64) -> S<isize> {S::<isize>::new::<f64>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <S2 as Trait<isize>>::new::<f64>(const 1_isize, const 1f64) -> bb2; // scope 1 at ui/generics/mid-path-type-params.rs:36:17: 36:51
                                         // mir::Constant
                                         // + span: ui/generics/mid-path-type-params.rs:36:17: 36:43
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(isize, f64) -> S2 {<S2 as Trait<isize>>::new::<f64>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generics/mid-path-type-params.rs:37:2: 37:2
    }
}
