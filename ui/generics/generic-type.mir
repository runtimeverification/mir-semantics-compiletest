// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: Pair<isize>;
    let mut _2: (&isize, &isize);
    let mut _3: &isize;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: isize;
    let mut _9: isize;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&isize, &isize);
    let mut _14: &isize;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: isize;
    let mut _20: isize;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _4: &isize;
        let _5: &isize;
        let _15: &isize;
        let _16: &isize;
        let mut _24: &isize;
        let mut _25: &isize;
        scope 2 {
            debug left_val => _4;
            debug right_val => _5;
            let _10: core::panicking::AssertKind;
            scope 3 {
                debug kind => _10;
            }
        }
        scope 4 {
            debug left_val => _15;
            debug right_val => _16;
            let _21: core::panicking::AssertKind;
            scope 5 {
                debug kind => _21;
            }
        }
    }

    bb0: {
        _1 = Pair::<isize> { x: const 10_isize, y: const 12_isize };
        _3 = &(_1.0: isize);
        _25 = const _;
        _2 = (move _3, _25);
        _4 = (_2.0: &isize);
        _5 = (_2.1: &isize);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<isize, isize>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb2: {
        _14 = &(_1.1: isize);
        _24 = const _;
        _13 = (move _14, _24);
        _15 = (_13.0: &isize);
        _16 = (_13.1: &isize);
        _19 = (*_15);
        _20 = (*_16);
        _18 = Eq(move _19, move _20);
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<isize, isize>(move _21, _15, _16, move _23) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 12_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}
