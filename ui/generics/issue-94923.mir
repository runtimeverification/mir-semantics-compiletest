// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f0(_1: usize) -> usize {
    debug x => _1;                       // in scope 0 at ui/generics/issue-94923.rs:6:10: 6:15
    let mut _0: usize;                   // return place in scope 0 at ui/generics/issue-94923.rs:6:27: 6:32
    let mut _2: std::ops::Range<i32>;    // in scope 0 at ui/generics/issue-94923.rs:7:14: 7:21
    let mut _3: std::ops::Range<i32>;    // in scope 0 at ui/generics/issue-94923.rs:7:14: 7:21
    let mut _4: std::ops::Range<i32>;    // in scope 0 at ui/generics/issue-94923.rs:7:14: 7:21
    let mut _5: std::option::Option<i32>; // in scope 0 at ui/generics/issue-94923.rs:7:14: 7:21
    let mut _6: &mut std::ops::Range<i32>; // in scope 0 at ui/generics/issue-94923.rs:7:14: 7:21
    let mut _7: &mut std::ops::Range<i32>; // in scope 0 at ui/generics/issue-94923.rs:7:14: 7:21
    let mut _8: isize;                   // in scope 0 at ui/generics/issue-94923.rs:7:5: 10:6
    let mut _9: (usize, bool);           // in scope 0 at ui/generics/issue-94923.rs:8:9: 8:17
    let mut _10: usize;                  // in scope 0 at ui/generics/issue-94923.rs:11:5: 11:6
    let mut _11: (usize, bool);          // in scope 0 at ui/generics/issue-94923.rs:11:5: 11:12
    scope 1 {
        debug iter => _4;                // in scope 1 at ui/generics/issue-94923.rs:7:14: 7:21
    }

    bb0: {
        _3 = std::ops::Range::<i32> { start: const 0_i32, end: const 1000_i32 }; // scope 0 at ui/generics/issue-94923.rs:7:14: 7:21
        _2 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _3) -> bb1; // scope 0 at ui/generics/issue-94923.rs:7:14: 7:21
                                         // mir::Constant
                                         // + span: ui/generics/issue-94923.rs:7:14: 7:21
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/generics/issue-94923.rs:7:14: 7:21
        goto -> bb2;                     // scope 1 at ui/generics/issue-94923.rs:7:5: 10:6
    }

    bb2: {
        _7 = &mut _4;                    // scope 1 at ui/generics/issue-94923.rs:7:14: 7:21
        _6 = &mut (*_7);                 // scope 1 at ui/generics/issue-94923.rs:7:14: 7:21
        _5 = <std::ops::Range<i32> as Iterator>::next(move _6) -> bb3; // scope 1 at ui/generics/issue-94923.rs:7:14: 7:21
                                         // mir::Constant
                                         // + span: ui/generics/issue-94923.rs:7:14: 7:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = discriminant(_5);           // scope 1 at ui/generics/issue-94923.rs:7:14: 7:21
        switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/generics/issue-94923.rs:7:14: 7:21
    }

    bb4: {
        _9 = CheckedMul(_1, const 123_usize); // scope 1 at ui/generics/issue-94923.rs:8:9: 8:17
        assert(!move (_9.1: bool), "attempt to compute `{} * {}`, which would overflow", _1, const 123_usize) -> bb7; // scope 1 at ui/generics/issue-94923.rs:8:9: 8:17
    }

    bb5: {
        unreachable;                     // scope 1 at ui/generics/issue-94923.rs:7:14: 7:21
    }

    bb6: {
        _10 = _1;                        // scope 0 at ui/generics/issue-94923.rs:11:5: 11:6
        _11 = CheckedAdd(_10, const 321_usize); // scope 0 at ui/generics/issue-94923.rs:11:5: 11:12
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, const 321_usize) -> bb8; // scope 0 at ui/generics/issue-94923.rs:11:5: 11:12
    }

    bb7: {
        _1 = move (_9.0: usize);         // scope 1 at ui/generics/issue-94923.rs:8:9: 8:17
        _1 = Rem(_1, const 99_usize);    // scope 1 at ui/generics/issue-94923.rs:9:9: 9:16
        goto -> bb2;                     // scope 1 at ui/generics/issue-94923.rs:7:5: 10:6
    }

    bb8: {
        _0 = move (_11.0: usize);        // scope 0 at ui/generics/issue-94923.rs:11:5: 11:12
        return;                          // scope 0 at ui/generics/issue-94923.rs:12:2: 12:2
    }
}

fn f1(_1: usize) -> usize {
    debug x => _1;                       // in scope 0 at ui/generics/issue-94923.rs:14:10: 14:11
    let mut _0: usize;                   // return place in scope 0 at ui/generics/issue-94923.rs:14:23: 14:28
    let mut _2: usize;                   // in scope 0 at ui/generics/issue-94923.rs:15:19: 15:35
    let mut _3: usize;                   // in scope 0 at ui/generics/issue-94923.rs:15:33: 15:34

    bb0: {
        _3 = _1;                         // scope 0 at ui/generics/issue-94923.rs:15:33: 15:34
        _2 = f0::<(u8, T)>(move _3) -> bb1; // scope 0 at ui/generics/issue-94923.rs:15:19: 15:35
                                         // mir::Constant
                                         // + span: ui/generics/issue-94923.rs:15:19: 15:32
                                         // + literal: Const { ty: fn(usize) -> usize {f0::<(u8, T)>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = f0::<(i8, T)>(move _2) -> bb2; // scope 0 at ui/generics/issue-94923.rs:15:5: 15:36
                                         // mir::Constant
                                         // + span: ui/generics/issue-94923.rs:15:5: 15:18
                                         // + literal: Const { ty: fn(usize) -> usize {f0::<(i8, T)>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generics/issue-94923.rs:16:2: 16:2
    }
}

fn f2(_1: usize) -> usize {
    debug x => _1;                       // in scope 0 at ui/generics/issue-94923.rs:18:10: 18:11
    let mut _0: usize;                   // return place in scope 0 at ui/generics/issue-94923.rs:18:23: 18:28
    let mut _2: usize;                   // in scope 0 at ui/generics/issue-94923.rs:19:19: 19:35
    let mut _3: usize;                   // in scope 0 at ui/generics/issue-94923.rs:19:33: 19:34

    bb0: {
        _3 = _1;                         // scope 0 at ui/generics/issue-94923.rs:19:33: 19:34
        _2 = f1::<(u8, T)>(move _3) -> bb1; // scope 0 at ui/generics/issue-94923.rs:19:19: 19:35
                                         // mir::Constant
                                         // + span: ui/generics/issue-94923.rs:19:19: 19:32
                                         // + literal: Const { ty: fn(usize) -> usize {f1::<(u8, T)>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = f1::<(i8, T)>(move _2) -> bb2; // scope 0 at ui/generics/issue-94923.rs:19:5: 19:36
                                         // mir::Constant
                                         // + span: ui/generics/issue-94923.rs:19:5: 19:18
                                         // + literal: Const { ty: fn(usize) -> usize {f1::<(i8, T)>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generics/issue-94923.rs:20:2: 20:2
    }
}

fn f3(_1: usize) -> usize {
    debug x => _1;                       // in scope 0 at ui/generics/issue-94923.rs:22:10: 22:11
    let mut _0: usize;                   // return place in scope 0 at ui/generics/issue-94923.rs:22:23: 22:28
    let mut _2: usize;                   // in scope 0 at ui/generics/issue-94923.rs:23:19: 23:35
    let mut _3: usize;                   // in scope 0 at ui/generics/issue-94923.rs:23:33: 23:34

    bb0: {
        _3 = _1;                         // scope 0 at ui/generics/issue-94923.rs:23:33: 23:34
        _2 = f2::<(u8, T)>(move _3) -> bb1; // scope 0 at ui/generics/issue-94923.rs:23:19: 23:35
                                         // mir::Constant
                                         // + span: ui/generics/issue-94923.rs:23:19: 23:32
                                         // + literal: Const { ty: fn(usize) -> usize {f2::<(u8, T)>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = f2::<(i8, T)>(move _2) -> bb2; // scope 0 at ui/generics/issue-94923.rs:23:5: 23:36
                                         // mir::Constant
                                         // + span: ui/generics/issue-94923.rs:23:5: 23:18
                                         // + literal: Const { ty: fn(usize) -> usize {f2::<(i8, T)>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generics/issue-94923.rs:24:2: 24:2
    }
}

fn f4(_1: usize) -> usize {
    debug x => _1;                       // in scope 0 at ui/generics/issue-94923.rs:26:10: 26:11
    let mut _0: usize;                   // return place in scope 0 at ui/generics/issue-94923.rs:26:23: 26:28
    let mut _2: usize;                   // in scope 0 at ui/generics/issue-94923.rs:27:19: 27:35
    let mut _3: usize;                   // in scope 0 at ui/generics/issue-94923.rs:27:33: 27:34

    bb0: {
        _3 = _1;                         // scope 0 at ui/generics/issue-94923.rs:27:33: 27:34
        _2 = f3::<(u8, T)>(move _3) -> bb1; // scope 0 at ui/generics/issue-94923.rs:27:19: 27:35
                                         // mir::Constant
                                         // + span: ui/generics/issue-94923.rs:27:19: 27:32
                                         // + literal: Const { ty: fn(usize) -> usize {f3::<(u8, T)>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = f3::<(i8, T)>(move _2) -> bb2; // scope 0 at ui/generics/issue-94923.rs:27:5: 27:36
                                         // mir::Constant
                                         // + span: ui/generics/issue-94923.rs:27:5: 27:18
                                         // + literal: Const { ty: fn(usize) -> usize {f3::<(i8, T)>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generics/issue-94923.rs:28:2: 28:2
    }
}

fn f5(_1: usize) -> usize {
    debug x => _1;                       // in scope 0 at ui/generics/issue-94923.rs:30:10: 30:11
    let mut _0: usize;                   // return place in scope 0 at ui/generics/issue-94923.rs:30:23: 30:28
    let mut _2: usize;                   // in scope 0 at ui/generics/issue-94923.rs:31:19: 31:35
    let mut _3: usize;                   // in scope 0 at ui/generics/issue-94923.rs:31:33: 31:34

    bb0: {
        _3 = _1;                         // scope 0 at ui/generics/issue-94923.rs:31:33: 31:34
        _2 = f4::<(u8, T)>(move _3) -> bb1; // scope 0 at ui/generics/issue-94923.rs:31:19: 31:35
                                         // mir::Constant
                                         // + span: ui/generics/issue-94923.rs:31:19: 31:32
                                         // + literal: Const { ty: fn(usize) -> usize {f4::<(u8, T)>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = f4::<(i8, T)>(move _2) -> bb2; // scope 0 at ui/generics/issue-94923.rs:31:5: 31:36
                                         // mir::Constant
                                         // + span: ui/generics/issue-94923.rs:31:5: 31:18
                                         // + literal: Const { ty: fn(usize) -> usize {f4::<(i8, T)>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generics/issue-94923.rs:32:2: 32:2
    }
}

fn f6(_1: usize) -> usize {
    debug x => _1;                       // in scope 0 at ui/generics/issue-94923.rs:34:10: 34:11
    let mut _0: usize;                   // return place in scope 0 at ui/generics/issue-94923.rs:34:23: 34:28
    let mut _2: usize;                   // in scope 0 at ui/generics/issue-94923.rs:35:19: 35:35
    let mut _3: usize;                   // in scope 0 at ui/generics/issue-94923.rs:35:33: 35:34

    bb0: {
        _3 = _1;                         // scope 0 at ui/generics/issue-94923.rs:35:33: 35:34
        _2 = f5::<(u8, T)>(move _3) -> bb1; // scope 0 at ui/generics/issue-94923.rs:35:19: 35:35
                                         // mir::Constant
                                         // + span: ui/generics/issue-94923.rs:35:19: 35:32
                                         // + literal: Const { ty: fn(usize) -> usize {f5::<(u8, T)>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = f5::<(i8, T)>(move _2) -> bb2; // scope 0 at ui/generics/issue-94923.rs:35:5: 35:36
                                         // mir::Constant
                                         // + span: ui/generics/issue-94923.rs:35:5: 35:18
                                         // + literal: Const { ty: fn(usize) -> usize {f5::<(i8, T)>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generics/issue-94923.rs:36:2: 36:2
    }
}

fn f7(_1: usize) -> usize {
    debug x => _1;                       // in scope 0 at ui/generics/issue-94923.rs:38:10: 38:11
    let mut _0: usize;                   // return place in scope 0 at ui/generics/issue-94923.rs:38:23: 38:28
    let mut _2: usize;                   // in scope 0 at ui/generics/issue-94923.rs:39:19: 39:35
    let mut _3: usize;                   // in scope 0 at ui/generics/issue-94923.rs:39:33: 39:34

    bb0: {
        _3 = _1;                         // scope 0 at ui/generics/issue-94923.rs:39:33: 39:34
        _2 = f6::<(u8, T)>(move _3) -> bb1; // scope 0 at ui/generics/issue-94923.rs:39:19: 39:35
                                         // mir::Constant
                                         // + span: ui/generics/issue-94923.rs:39:19: 39:32
                                         // + literal: Const { ty: fn(usize) -> usize {f6::<(u8, T)>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = f6::<(i8, T)>(move _2) -> bb2; // scope 0 at ui/generics/issue-94923.rs:39:5: 39:36
                                         // mir::Constant
                                         // + span: ui/generics/issue-94923.rs:39:5: 39:18
                                         // + literal: Const { ty: fn(usize) -> usize {f6::<(i8, T)>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generics/issue-94923.rs:40:2: 40:2
    }
}

fn f8(_1: usize) -> usize {
    debug x => _1;                       // in scope 0 at ui/generics/issue-94923.rs:42:10: 42:11
    let mut _0: usize;                   // return place in scope 0 at ui/generics/issue-94923.rs:42:23: 42:28
    let mut _2: usize;                   // in scope 0 at ui/generics/issue-94923.rs:43:19: 43:35
    let mut _3: usize;                   // in scope 0 at ui/generics/issue-94923.rs:43:33: 43:34

    bb0: {
        _3 = _1;                         // scope 0 at ui/generics/issue-94923.rs:43:33: 43:34
        _2 = f7::<(u8, T)>(move _3) -> bb1; // scope 0 at ui/generics/issue-94923.rs:43:19: 43:35
                                         // mir::Constant
                                         // + span: ui/generics/issue-94923.rs:43:19: 43:32
                                         // + literal: Const { ty: fn(usize) -> usize {f7::<(u8, T)>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = f7::<(i8, T)>(move _2) -> bb2; // scope 0 at ui/generics/issue-94923.rs:43:5: 43:36
                                         // mir::Constant
                                         // + span: ui/generics/issue-94923.rs:43:5: 43:18
                                         // + literal: Const { ty: fn(usize) -> usize {f7::<(i8, T)>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generics/issue-94923.rs:44:2: 44:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generics/issue-94923.rs:46:11: 46:11
    let _1: usize;                       // in scope 0 at ui/generics/issue-94923.rs:47:9: 47:10
    let mut _2: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _4: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug y => _1;                   // in scope 1 at ui/generics/issue-94923.rs:47:9: 47:10
        let _5: &usize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _6: &usize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _19: &usize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _5;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _6;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _11: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _11;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = f8::<()>(const 1_usize) -> bb1; // scope 0 at ui/generics/issue-94923.rs:47:13: 47:24
                                         // mir::Constant
                                         // + span: ui/generics/issue-94923.rs:47:13: 47:21
                                         // + literal: Const { ty: fn(usize) -> usize {f8::<()>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _19 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _19;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _4);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_2.0: &usize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_2.1: &usize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = (*_5);                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = const 348_usize;           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = Eq(move _9, move _10);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _7 = Not(move _8);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _11 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<usize, usize>(move _13, move _14, move _16, move _18); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/generics/issue-94923.rs:49:2: 49:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/generics/issue-94923.rs:48:19: 48:22

    bb0: {
        _1 = const 348_usize;            // scope 0 at ui/generics/issue-94923.rs:48:19: 48:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
