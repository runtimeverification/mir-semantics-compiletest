// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn altfoo(_1: foo<T>) -> () {
    debug f => _1;                       // in scope 0 at ui/generics/generic-tag-match.rs:7:14: 7:15
    let mut _0: ();                      // return place in scope 0 at ui/generics/generic-tag-match.rs:7:25: 7:25
    let mut _2: bool;                    // in scope 0 at ui/generics/generic-tag-match.rs:8:9: 8:16
    let _4: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _6: &[&str];                 // in scope 0 at ui/generics/generic-tag-match.rs:9:47: 9:55
    let mut _7: &[&str; 1];              // in scope 0 at ui/generics/generic-tag-match.rs:9:47: 9:55
    let _8: &[&str; 1];                  // in scope 0 at ui/generics/generic-tag-match.rs:9:47: 9:55
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: bool;                   // in scope 0 at ui/generics/generic-tag-match.rs:10:5: 10:19
    let mut _13: bool;                   // in scope 0 at ui/generics/generic-tag-match.rs:10:13: 10:18
    let mut _14: !;                      // in scope 0 at ui/generics/generic-tag-match.rs:10:5: 10:19
    scope 1 {
        debug hit => _2;                 // in scope 1 at ui/generics/generic-tag-match.rs:8:9: 8:16
        let _3: T;                       // in scope 1 at ui/generics/generic-tag-match.rs:9:29: 9:31
        scope 2 {
            debug _x => _3;              // in scope 2 at ui/generics/generic-tag-match.rs:9:29: 9:31
            let mut _15: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
            let mut _16: &[&str; 1];     // in scope 2 at ui/generics/generic-tag-match.rs:9:47: 9:55
        }
    }

    bb0: {
        _2 = const false;                // scope 0 at ui/generics/generic-tag-match.rs:8:19: 8:24
        _3 = move ((_1 as arm).0: T);    // scope 1 at ui/generics/generic-tag-match.rs:9:29: 9:31
        _16 = const _;                   // scope 2 at ui/generics/generic-tag-match.rs:9:47: 9:55
                                         // mir::Constant
                                         // + span: ui/generics/generic-tag-match.rs:9:47: 9:55
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(altfoo, [T], Some(promoted[1])) }
        _8 = _16;                        // scope 2 at ui/generics/generic-tag-match.rs:9:47: 9:55
        _7 = _8;                         // scope 2 at ui/generics/generic-tag-match.rs:9:47: 9:55
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 2 at ui/generics/generic-tag-match.rs:9:47: 9:55
        _15 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(altfoo, [T], Some(promoted[0])) }
        _11 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = _11;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> [return: bb1, unwind: bb6]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _print(move _5) -> [return: bb2, unwind: bb6]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = const true;                 // scope 2 at ui/generics/generic-tag-match.rs:9:58: 9:68
        drop(_3) -> bb3;                 // scope 1 at ui/generics/generic-tag-match.rs:9:70: 9:71
    }

    bb3: {
        _13 = _2;                        // scope 1 at ui/generics/generic-tag-match.rs:10:13: 10:18
        _12 = Not(move _13);             // scope 1 at ui/generics/generic-tag-match.rs:10:5: 10:19
        switchInt(move _12) -> [0: bb5, otherwise: bb4]; // scope 1 at ui/generics/generic-tag-match.rs:10:5: 10:19
    }

    bb4: {
        _14 = core::panicking::panic(const "assertion failed: (hit)"); // scope 1 at ui/generics/generic-tag-match.rs:10:5: 10:19
                                         // mir::Constant
                                         // + span: ui/generics/generic-tag-match.rs:10:5: 10:19
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        return;                          // scope 0 at ui/generics/generic-tag-match.rs:11:2: 11:2
    }

    bb6 (cleanup): {
        drop(_3) -> bb7;                 // scope 1 at ui/generics/generic-tag-match.rs:9:70: 9:71
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/generics/generic-tag-match.rs:7:1: 11:2
    }
}

promoted[0] in altfoo: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in altfoo: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/generics/generic-tag-match.rs:9:47: 9:55
    let mut _1: [&str; 1];               // in scope 0 at ui/generics/generic-tag-match.rs:9:47: 9:55

    bb0: {
        _1 = [const "in arm\n"];         // scope 0 at ui/generics/generic-tag-match.rs:9:47: 9:55
                                         // mir::Constant
                                         // + span: ui/generics/generic-tag-match.rs:9:47: 9:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/generics/generic-tag-match.rs:9:47: 9:55
        return;                          // scope 0 at ui/generics/generic-tag-match.rs:9:47: 9:55
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generics/generic-tag-match.rs:13:15: 13:15
    let _1: ();                          // in scope 0 at ui/generics/generic-tag-match.rs:13:17: 13:55
    let mut _2: foo<isize>;              // in scope 0 at ui/generics/generic-tag-match.rs:13:33: 13:54

    bb0: {
        _2 = const foo::<isize>::arm(10_isize); // scope 0 at ui/generics/generic-tag-match.rs:13:33: 13:54
                                         // mir::Constant
                                         // + span: ui/generics/generic-tag-match.rs:13:33: 13:54
                                         // + literal: Const { ty: foo<isize>, val: Value(Scalar(0x000000000000000a)) }
        _1 = altfoo::<isize>(move _2) -> bb1; // scope 0 at ui/generics/generic-tag-match.rs:13:17: 13:55
                                         // mir::Constant
                                         // + span: ui/generics/generic-tag-match.rs:13:17: 13:32
                                         // + literal: Const { ty: fn(foo<isize>) {altfoo::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generics/generic-tag-match.rs:13:58: 13:58
    }
}

fn foo::arm(_1: T) -> foo<T> {
    let mut _0: foo<T>;                  // return place in scope 0 at ui/generics/generic-tag-match.rs:5:15: 5:18

    bb0: {
        _0 = foo::<T>::arm(move _1);     // scope 0 at ui/generics/generic-tag-match.rs:5:15: 5:18
        return;                          // scope 0 at ui/generics/generic-tag-match.rs:5:15: 5:18
    }
}

// MIR FOR CTFE
fn foo::arm(_1: T) -> foo<T> {
    let mut _0: foo<T>;                  // return place in scope 0 at ui/generics/generic-tag-match.rs:5:15: 5:18

    bb0: {
        _0 = foo::<T>::arm(move _1);     // scope 0 at ui/generics/generic-tag-match.rs:5:15: 5:18
        return;                          // scope 0 at ui/generics/generic-tag-match.rs:5:15: 5:18
    }
}
