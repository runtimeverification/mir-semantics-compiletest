// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn altfoo(_1: foo<T>) -> () {
    debug f => _1;
    let mut _0: ();
    let mut _2: bool;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: !;
    scope 1 {
        debug hit => _2;
        let _3: T;
        scope 2 {
            debug _x => _3;
            let mut _10: &[&str; 1];
        }
    }

    bb0: {
        _2 = const false;
        _3 = move ((_1 as arm).0: T);
        _10 = const _;
        _6 = _10 as &[&str] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_const(move _6) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _4 = _print(move _5) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _2 = const true;
        drop(_3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = _2;
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _9 = core::panicking::panic(const "assertion failed: (hit)") -> unwind continue;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_3) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in altfoo: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "in arm\n"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: foo<isize>;

    bb0: {
        _2 = foo::<isize>::arm(const 10_isize);
        _1 = altfoo::<isize>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn foo::arm(_1: T) -> foo<T> {
    let mut _0: foo<T>;

    bb0: {
        _0 = foo::<T>::arm(move _1);
        return;
    }
}

// MIR FOR CTFE
fn foo::arm(_1: T) -> foo<T> {
    let mut _0: foo<T>;

    bb0: {
        _0 = foo::<T>::arm(move _1);
        return;
    }
}
