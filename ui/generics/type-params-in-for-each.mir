// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn range_(_1: usize, _2: usize, _3: F) -> () {
    debug lo => _1;                      // in scope 0 at ui/generics/type-params-in-for-each.rs:12:14: 12:16
    debug hi => _2;                      // in scope 0 at ui/generics/type-params-in-for-each.rs:12:25: 12:27
    debug it => _3;                      // in scope 0 at ui/generics/type-params-in-for-each.rs:12:36: 12:42
    let mut _0: ();                      // return place in scope 0 at ui/generics/type-params-in-for-each.rs:12:47: 12:47
    let mut _4: usize;                   // in scope 0 at ui/generics/type-params-in-for-each.rs:13:9: 13:16
    let mut _5: bool;                    // in scope 0 at ui/generics/type-params-in-for-each.rs:14:11: 14:19
    let mut _6: usize;                   // in scope 0 at ui/generics/type-params-in-for-each.rs:14:11: 14:14
    let mut _7: usize;                   // in scope 0 at ui/generics/type-params-in-for-each.rs:14:17: 14:19
    let _8: ();                          // in scope 0 at ui/generics/type-params-in-for-each.rs:14:22: 14:29
    let mut _9: &mut F;                  // in scope 0 at ui/generics/type-params-in-for-each.rs:14:22: 14:24
    let mut _10: (usize,);               // in scope 0 at ui/generics/type-params-in-for-each.rs:14:22: 14:29
    let mut _11: usize;                  // in scope 0 at ui/generics/type-params-in-for-each.rs:14:25: 14:28
    let mut _12: (usize, bool);          // in scope 0 at ui/generics/type-params-in-for-each.rs:14:31: 14:39
    scope 1 {
        debug lo_ => _4;                 // in scope 1 at ui/generics/type-params-in-for-each.rs:13:9: 13:16
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/generics/type-params-in-for-each.rs:13:19: 13:21
        goto -> bb1;                     // scope 1 at ui/generics/type-params-in-for-each.rs:14:5: 14:42
    }

    bb1: {
        _6 = _4;                         // scope 1 at ui/generics/type-params-in-for-each.rs:14:11: 14:14
        _7 = _2;                         // scope 1 at ui/generics/type-params-in-for-each.rs:14:17: 14:19
        _5 = Lt(move _6, move _7);       // scope 1 at ui/generics/type-params-in-for-each.rs:14:11: 14:19
        switchInt(move _5) -> [0: bb5, otherwise: bb2]; // scope 1 at ui/generics/type-params-in-for-each.rs:14:11: 14:19
    }

    bb2: {
        _9 = &mut _3;                    // scope 1 at ui/generics/type-params-in-for-each.rs:14:22: 14:24
        _11 = _4;                        // scope 1 at ui/generics/type-params-in-for-each.rs:14:25: 14:28
        _10 = (move _11,);               // scope 1 at ui/generics/type-params-in-for-each.rs:14:22: 14:29
        _8 = <F as FnMut<(usize,)>>::call_mut(move _9, move _10) -> [return: bb3, unwind: bb7]; // scope 1 at ui/generics/type-params-in-for-each.rs:14:22: 14:29
                                         // mir::Constant
                                         // + span: ui/generics/type-params-in-for-each.rs:14:22: 14:24
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (usize,)) -> <F as FnOnce<(usize,)>>::Output {<F as FnMut<(usize,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = CheckedAdd(_4, const 1_usize); // scope 1 at ui/generics/type-params-in-for-each.rs:14:31: 14:39
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", _4, const 1_usize) -> [success: bb4, unwind: bb7]; // scope 1 at ui/generics/type-params-in-for-each.rs:14:31: 14:39
    }

    bb4: {
        _4 = move (_12.0: usize);        // scope 1 at ui/generics/type-params-in-for-each.rs:14:31: 14:39
        goto -> bb1;                     // scope 1 at ui/generics/type-params-in-for-each.rs:14:5: 14:42
    }

    bb5: {
        drop(_3) -> bb6;                 // scope 0 at ui/generics/type-params-in-for-each.rs:15:1: 15:2
    }

    bb6: {
        return;                          // scope 0 at ui/generics/type-params-in-for-each.rs:15:2: 15:2
    }

    bb7 (cleanup): {
        drop(_3) -> bb8;                 // scope 0 at ui/generics/type-params-in-for-each.rs:15:1: 15:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/generics/type-params-in-for-each.rs:12:1: 15:2
    }
}

fn create_index(_1: Vec<S<T>>, _2: extern "C" fn(T) -> usize) -> () {
    debug _index => _1;                  // in scope 0 at ui/generics/type-params-in-for-each.rs:17:20: 17:26
    debug _hash_fn => _2;                // in scope 0 at ui/generics/type-params-in-for-each.rs:17:40: 17:48
    let mut _0: ();                      // return place in scope 0 at ui/generics/type-params-in-for-each.rs:17:77: 17:77
    let mut _3: [closure@ui/generics/type-params-in-for-each.rs:18:20: 18:24]; // in scope 0 at ui/generics/type-params-in-for-each.rs:18:20: 20:6

    bb0: {
        _0 = range_::<[closure@ui/generics/type-params-in-for-each.rs:18:20: 18:24]>(const 0_usize, const 256_usize, move _3) -> [return: bb1, unwind: bb3]; // scope 0 at ui/generics/type-params-in-for-each.rs:18:5: 20:7
                                         // mir::Constant
                                         // + span: ui/generics/type-params-in-for-each.rs:18:5: 18:11
                                         // + literal: Const { ty: fn(usize, usize, [closure@ui/generics/type-params-in-for-each.rs:18:20: 18:24]) {range_::<[closure@ui/generics/type-params-in-for-each.rs:18:20: 18:24]>}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/generics/type-params-in-for-each.rs:21:1: 21:2
    }

    bb2: {
        return;                          // scope 0 at ui/generics/type-params-in-for-each.rs:21:2: 21:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/generics/type-params-in-for-each.rs:21:1: 21:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/generics/type-params-in-for-each.rs:17:1: 21:2
    }
}

fn create_index::{closure#0}(_1: &mut [closure@ui/generics/type-params-in-for-each.rs:18:20: 18:24], _2: usize) -> () {
    debug _i => _2;                      // in scope 0 at ui/generics/type-params-in-for-each.rs:18:21: 18:23
    let mut _0: ();                      // return place in scope 0 at ui/generics/type-params-in-for-each.rs:18:25: 18:25
    let _3: std::vec::Vec<T>;            // in scope 0 at ui/generics/type-params-in-for-each.rs:19:13: 19:20
    scope 1 {
        debug _bucket => _3;             // in scope 1 at ui/generics/type-params-in-for-each.rs:19:13: 19:20
    }

    bb0: {
        _3 = Vec::<T>::new() -> bb1;     // scope 0 at ui/generics/type-params-in-for-each.rs:19:31: 19:41
                                         // mir::Constant
                                         // + span: ui/generics/type-params-in-for-each.rs:19:31: 19:39
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<T> {Vec::<T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_3) -> bb2;                 // scope 0 at ui/generics/type-params-in-for-each.rs:20:5: 20:6
    }

    bb2: {
        return;                          // scope 0 at ui/generics/type-params-in-for-each.rs:20:6: 20:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generics/type-params-in-for-each.rs:23:15: 23:15

    bb0: {
        return;                          // scope 0 at ui/generics/type-params-in-for-each.rs:23:18: 23:18
    }
}
