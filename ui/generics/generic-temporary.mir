// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn mk() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 1_isize;
        return;
    }
}

fn chk(_1: isize) -> () {
    debug a => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &isize;
    let mut _10: (&isize, &isize);
    let mut _11: &isize;
    let _12: &isize;
    let _13: &isize;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: isize;
    let mut _17: isize;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: &isize;
    let mut _22: &[&str; 2];
    scope 1 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 2 {
            debug kind => _18;
        }
    }

    bb0: {
        _22 = const _;
        _4 = _22 as &[&str] (Pointer(Unsize));
        _9 = &_1;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _11 = &_1;
        _21 = const _;
        _10 = (move _11, _21);
        _12 = (_10.0: &isize);
        _13 = (_10.1: &isize);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<isize, isize>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb5: {
        return;
    }
}

promoted[0] in chk: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in chk: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn apply(_1: fn() -> T, _2: fn(T)) -> () {
    debug produce => _1;
    debug consume => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: T;

    bb0: {
        _4 = _1() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = _2(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: fn() -> isize;
    let _3: ();
    scope 1 {
        debug produce => _1;
        let _2: fn(isize);
        scope 2 {
            debug consume => _2;
        }
    }

    bb0: {
        _1 = mk as fn() -> isize (Pointer(ReifyFnPointer));
        _2 = chk as fn(isize) (Pointer(ReifyFnPointer));
        _3 = apply::<isize>(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
