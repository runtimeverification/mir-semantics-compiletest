// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn mk() -> isize {
    let mut _0: isize;                   // return place in scope 0 at ui/generics/generic-temporary.rs:3:12: 3:17

    bb0: {
        _0 = const 1_isize;              // scope 0 at ui/generics/generic-temporary.rs:3:27: 3:28
        return;                          // scope 0 at ui/generics/generic-temporary.rs:3:31: 3:31
    }
}

fn chk(_1: isize) -> () {
    debug a => _1;                       // in scope 0 at ui/generics/generic-temporary.rs:5:8: 5:9
    let mut _0: ();                      // return place in scope 0 at ui/generics/generic-temporary.rs:5:18: 5:18
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/generics/generic-temporary.rs:5:29: 5:33
    let mut _5: &[&str; 2];              // in scope 0 at ui/generics/generic-temporary.rs:5:29: 5:33
    let _6: &[&str; 2];                  // in scope 0 at ui/generics/generic-temporary.rs:5:29: 5:33
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/generics/generic-temporary.rs:5:35: 5:36
    let mut _12: &isize;                 // in scope 0 at ui/generics/generic-temporary.rs:5:35: 5:36
    let _13: &isize;                     // in scope 0 at ui/generics/generic-temporary.rs:5:35: 5:36
    let mut _14: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _15: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _16: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _17: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _18: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _20: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _21: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _22: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _24: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _25: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _26: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _27: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _28: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _29: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _31: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _32: &[&str; 2];             // in scope 0 at ui/generics/generic-temporary.rs:5:29: 5:33
    scope 1 {
        debug left_val => _17;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _18;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _23: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _23;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _32 = const _;                   // scope 0 at ui/generics/generic-temporary.rs:5:29: 5:33
                                         // mir::Constant
                                         // + span: ui/generics/generic-temporary.rs:5:29: 5:33
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(chk, [], Some(promoted[1])) }
        _6 = _32;                        // scope 0 at ui/generics/generic-temporary.rs:5:29: 5:33
        _5 = _6;                         // scope 0 at ui/generics/generic-temporary.rs:5:29: 5:33
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/generics/generic-temporary.rs:5:29: 5:33
        _13 = &_1;                       // scope 0 at ui/generics/generic-temporary.rs:5:35: 5:36
        _12 = _13;                       // scope 0 at ui/generics/generic-temporary.rs:5:35: 5:36
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _12) -> bb1; // scope 0 at ui/generics/generic-temporary.rs:5:35: 5:36
                                         // mir::Constant
                                         // + span: ui/generics/generic-temporary.rs:5:35: 5:36
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _15 = &_1;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _31 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(chk, [], Some(promoted[0])) }
        _16 = _31;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _14 = (move _15, move _16);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _17 = (_14.0: &isize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _18 = (_14.1: &isize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _21 = (*_17);                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _22 = const 1_isize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _20 = Eq(move _21, move _22);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _19 = Not(move _20);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _19) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _23 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _25 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _27 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _26 = _27;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _29 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _28 = _29;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _30 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _24 = core::panicking::assert_failed::<isize, isize>(move _25, move _26, move _28, move _30); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/generics/generic-temporary.rs:5:58: 5:58
    }
}

promoted[0] in chk: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/generics/generic-temporary.rs:5:53: 5:54

    bb0: {
        _1 = const 1_isize;              // scope 0 at ui/generics/generic-temporary.rs:5:53: 5:54
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in chk: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/generics/generic-temporary.rs:5:29: 5:33
    let mut _1: [&str; 2];               // in scope 0 at ui/generics/generic-temporary.rs:5:29: 5:33

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/generics/generic-temporary.rs:5:29: 5:33
                                         // mir::Constant
                                         // + span: ui/generics/generic-temporary.rs:5:29: 5:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/generics/generic-temporary.rs:5:29: 5:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/generics/generic-temporary.rs:5:29: 5:33
        return;                          // scope 0 at ui/generics/generic-temporary.rs:5:29: 5:33
    }
}

fn apply(_1: fn() -> T, _2: fn(T)) -> () {
    debug produce => _1;                 // in scope 0 at ui/generics/generic-temporary.rs:7:13: 7:20
    debug consume => _2;                 // in scope 0 at ui/generics/generic-temporary.rs:8:13: 8:20
    let mut _0: ();                      // return place in scope 0 at ui/generics/generic-temporary.rs:8:29: 8:29
    let _3: ();                          // in scope 0 at ui/generics/generic-temporary.rs:9:5: 9:23
    let mut _4: fn(T);                   // in scope 0 at ui/generics/generic-temporary.rs:9:5: 9:12
    let mut _5: T;                       // in scope 0 at ui/generics/generic-temporary.rs:9:13: 9:22
    let mut _6: fn() -> T;               // in scope 0 at ui/generics/generic-temporary.rs:9:13: 9:20

    bb0: {
        _4 = _2;                         // scope 0 at ui/generics/generic-temporary.rs:9:5: 9:12
        _6 = _1;                         // scope 0 at ui/generics/generic-temporary.rs:9:13: 9:20
        _5 = move _6() -> bb1;           // scope 0 at ui/generics/generic-temporary.rs:9:13: 9:22
    }

    bb1: {
        _3 = move _4(move _5) -> bb2;    // scope 0 at ui/generics/generic-temporary.rs:9:5: 9:23
    }

    bb2: {
        return;                          // scope 0 at ui/generics/generic-temporary.rs:10:2: 10:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generics/generic-temporary.rs:12:15: 12:15
    let _1: fn() -> isize;               // in scope 0 at ui/generics/generic-temporary.rs:13:9: 13:16
    let _3: ();                          // in scope 0 at ui/generics/generic-temporary.rs:15:5: 15:37
    let mut _4: fn() -> isize;           // in scope 0 at ui/generics/generic-temporary.rs:15:20: 15:27
    let mut _5: fn(isize);               // in scope 0 at ui/generics/generic-temporary.rs:15:29: 15:36
    scope 1 {
        debug produce => _1;             // in scope 1 at ui/generics/generic-temporary.rs:13:9: 13:16
        let _2: fn(isize);               // in scope 1 at ui/generics/generic-temporary.rs:14:9: 14:16
        scope 2 {
            debug consume => _2;         // in scope 2 at ui/generics/generic-temporary.rs:14:9: 14:16
        }
    }

    bb0: {
        _1 = mk as fn() -> isize (Pointer(ReifyFnPointer)); // scope 0 at ui/generics/generic-temporary.rs:13:34: 13:36
                                         // mir::Constant
                                         // + span: ui/generics/generic-temporary.rs:13:34: 13:36
                                         // + literal: Const { ty: fn() -> isize {mk}, val: Value(<ZST>) }
        _2 = chk as fn(isize) (Pointer(ReifyFnPointer)); // scope 1 at ui/generics/generic-temporary.rs:14:33: 14:36
                                         // mir::Constant
                                         // + span: ui/generics/generic-temporary.rs:14:33: 14:36
                                         // + literal: Const { ty: fn(isize) {chk}, val: Value(<ZST>) }
        _4 = _1;                         // scope 2 at ui/generics/generic-temporary.rs:15:20: 15:27
        _5 = _2;                         // scope 2 at ui/generics/generic-temporary.rs:15:29: 15:36
        _3 = apply::<isize>(move _4, move _5) -> bb1; // scope 2 at ui/generics/generic-temporary.rs:15:5: 15:37
                                         // mir::Constant
                                         // + span: ui/generics/generic-temporary.rs:15:5: 15:19
                                         // + literal: Const { ty: fn(fn() -> isize, fn(isize)) {apply::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generics/generic-temporary.rs:16:2: 16:2
    }
}
