// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn get_third(_1: (T, T, T)) -> T {
    debug t => _1;
    let mut _0: T;
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _0 = move (_1.2: T);
        drop((_1.0: T)) -> [return: bb4, unwind: bb2];
    }

    bb1 (cleanup): {
        resume;
    }

    bb2 (cleanup): {
        drop((_1.1: T)) -> [return: bb1, unwind terminate];
    }

    bb3: {
        return;
    }

    bb4: {
        drop((_1.1: T)) -> [return: bb3, unwind continue];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &i32;
    let _9: i32;
    let mut _10: (i32, i32, i32);
    let mut _11: (&i32, &i32);
    let mut _12: &i32;
    let _13: i32;
    let mut _14: (i32, i32, i32);
    let _15: &i32;
    let _16: &i32;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: i32;
    let mut _20: i32;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _24: (&u8, &u8);
    let mut _25: &u8;
    let _26: u8;
    let mut _27: (u8, u8, u8);
    let _28: &u8;
    let _29: &u8;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: u8;
    let mut _33: u8;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: &u8;
    let mut _38: &i32;
    let mut _39: &[&str; 2];
    scope 1 {
        debug left_val => _15;
        debug right_val => _16;
        let _21: core::panicking::AssertKind;
        scope 2 {
            debug kind => _21;
        }
    }
    scope 3 {
        debug left_val => _28;
        debug right_val => _29;
        let _34: core::panicking::AssertKind;
        scope 4 {
            debug kind => _34;
        }
    }

    bb0: {
        _39 = const _;
        _3 = _39 as &[&str] (Pointer(Unsize));
        _10 = (const 1_i32, const 2_i32, const 3_i32);
        _9 = get_third::<i32>(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &_9;
        _7 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = [move _7];
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _1 = _print(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = (const 1_i32, const 2_i32, const 3_i32);
        _13 = get_third::<i32>(move _14) -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = &_13;
        _38 = const _;
        _11 = (move _12, _38);
        _15 = (_11.0: &i32);
        _16 = (_11.1: &i32);
        _19 = (*_15);
        _20 = (*_16);
        _18 = Eq(move _19, move _20);
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<i32, i32>(move _21, _15, _16, move _23) -> unwind continue;
    }

    bb7: {
        _27 = (const 5_u8, const 6_u8, const 7_u8);
        _26 = get_third::<u8>(move _27) -> [return: bb8, unwind continue];
    }

    bb8: {
        _25 = &_26;
        _37 = const _;
        _24 = (move _25, _37);
        _28 = (_24.0: &u8);
        _29 = (_24.1: &u8);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<u8, u8>(move _34, _28, _29, move _36) -> unwind continue;
    }

    bb10: {
        return;
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 7_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
