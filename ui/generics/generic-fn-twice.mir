// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generics/generic-fn-twice.rs:8:21: 8:21

    bb0: {
        return;                          // scope 0 at ui/generics/generic-fn-twice.rs:8:24: 8:24
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generics/generic-fn-twice.rs:11:15: 11:15
    let _1: ();                          // in scope 0 at ui/generics/generic-fn-twice.rs:11:17: 11:39
    let _2: ();                          // in scope 0 at ui/generics/generic-fn-twice.rs:11:41: 11:63

    bb0: {
        _1 = foo::<isize>() -> bb1;      // scope 0 at ui/generics/generic-fn-twice.rs:11:17: 11:39
                                         // mir::Constant
                                         // + span: ui/generics/generic-fn-twice.rs:11:17: 11:37
                                         // + literal: Const { ty: fn() {foo::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = foo::<isize>() -> bb2;      // scope 0 at ui/generics/generic-fn-twice.rs:11:41: 11:63
                                         // mir::Constant
                                         // + span: ui/generics/generic-fn-twice.rs:11:41: 11:61
                                         // + literal: Const { ty: fn() {foo::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generics/generic-fn-twice.rs:11:66: 11:66
    }
}
