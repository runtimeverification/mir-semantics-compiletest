// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generics/generic-recursive-tag.rs:6:15: 6:15
    let _1: list<isize>;                 // in scope 0 at ui/generics/generic-recursive-tag.rs:7:9: 7:11
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/generics/generic-recursive-tag.rs:8:29: 8:41
    let mut _3: std::boxed::Box<list<isize>>; // in scope 0 at ui/generics/generic-recursive-tag.rs:9:9: 11:41
    let mut _4: list<isize>;             // in scope 0 at ui/generics/generic-recursive-tag.rs:9:18: 11:40
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/generics/generic-recursive-tag.rs:9:38: 9:50
    let mut _6: std::boxed::Box<list<isize>>; // in scope 0 at ui/generics/generic-recursive-tag.rs:10:9: 11:39
    let mut _7: list<isize>;             // in scope 0 at ui/generics/generic-recursive-tag.rs:10:18: 11:38
    let mut _8: std::boxed::Box<isize>;  // in scope 0 at ui/generics/generic-recursive-tag.rs:10:38: 10:50
    let mut _9: std::boxed::Box<list<isize>>; // in scope 0 at ui/generics/generic-recursive-tag.rs:11:9: 11:37
    let mut _10: list<isize>;            // in scope 0 at ui/generics/generic-recursive-tag.rs:11:18: 11:36
    scope 1 {
        debug _a => _1;                  // in scope 1 at ui/generics/generic-recursive-tag.rs:7:9: 7:11
    }

    bb0: {
        _2 = Box::<isize>::new(const 10_isize) -> bb1; // scope 0 at ui/generics/generic-recursive-tag.rs:8:29: 8:41
                                         // mir::Constant
                                         // + span: ui/generics/generic-recursive-tag.rs:8:29: 8:37
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = Box::<isize>::new(const 12_isize) -> [return: bb2, unwind: bb10]; // scope 0 at ui/generics/generic-recursive-tag.rs:9:38: 9:50
                                         // mir::Constant
                                         // + span: ui/generics/generic-recursive-tag.rs:9:38: 9:46
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = Box::<isize>::new(const 13_isize) -> [return: bb3, unwind: bb9]; // scope 0 at ui/generics/generic-recursive-tag.rs:10:38: 10:50
                                         // mir::Constant
                                         // + span: ui/generics/generic-recursive-tag.rs:10:38: 10:46
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = list::<isize>::nil;        // scope 0 at ui/generics/generic-recursive-tag.rs:11:18: 11:36
        _9 = Box::<list<isize>>::new(move _10) -> [return: bb4, unwind: bb8]; // scope 0 at ui/generics/generic-recursive-tag.rs:11:9: 11:37
                                         // mir::Constant
                                         // + span: ui/generics/generic-recursive-tag.rs:11:9: 11:17
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(list<isize>) -> Box<list<isize>> {Box::<list<isize>>::new}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = list::<isize>::cons(move _8, move _9); // scope 0 at ui/generics/generic-recursive-tag.rs:10:18: 11:38
        _6 = Box::<list<isize>>::new(move _7) -> [return: bb5, unwind: bb9]; // scope 0 at ui/generics/generic-recursive-tag.rs:10:9: 11:39
                                         // mir::Constant
                                         // + span: ui/generics/generic-recursive-tag.rs:10:9: 10:17
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(list<isize>) -> Box<list<isize>> {Box::<list<isize>>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _4 = list::<isize>::cons(move _5, move _6); // scope 0 at ui/generics/generic-recursive-tag.rs:9:18: 11:40
        _3 = Box::<list<isize>>::new(move _4) -> [return: bb6, unwind: bb10]; // scope 0 at ui/generics/generic-recursive-tag.rs:9:9: 11:41
                                         // mir::Constant
                                         // + span: ui/generics/generic-recursive-tag.rs:9:9: 9:17
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(list<isize>) -> Box<list<isize>> {Box::<list<isize>>::new}, val: Value(<ZST>) }
    }

    bb6: {
        _1 = list::<isize>::cons(move _2, move _3); // scope 0 at ui/generics/generic-recursive-tag.rs:8:9: 11:42
        drop(_1) -> bb7;                 // scope 0 at ui/generics/generic-recursive-tag.rs:12:1: 12:2
    }

    bb7: {
        return;                          // scope 0 at ui/generics/generic-recursive-tag.rs:12:2: 12:2
    }

    bb8 (cleanup): {
        drop(_8) -> bb9;                 // scope 0 at ui/generics/generic-recursive-tag.rs:11:37: 11:38
    }

    bb9 (cleanup): {
        drop(_5) -> bb10;                // scope 0 at ui/generics/generic-recursive-tag.rs:11:39: 11:40
    }

    bb10 (cleanup): {
        drop(_2) -> bb11;                // scope 0 at ui/generics/generic-recursive-tag.rs:11:41: 11:42
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/generics/generic-recursive-tag.rs:6:1: 12:2
    }
}

fn list::cons(_1: Box<T>, _2: Box<list<T>>) -> list<T> {
    let mut _0: list<T>;                 // return place in scope 0 at ui/generics/generic-recursive-tag.rs:4:53: 4:57

    bb0: {
        _0 = list::<T>::cons(move _1, move _2); // scope 0 at ui/generics/generic-recursive-tag.rs:4:53: 4:57
        return;                          // scope 0 at ui/generics/generic-recursive-tag.rs:4:53: 4:57
    }
}

// MIR FOR CTFE
fn list::cons(_1: Box<T>, _2: Box<list<T>>) -> list<T> {
    let mut _0: list<T>;                 // return place in scope 0 at ui/generics/generic-recursive-tag.rs:4:53: 4:57

    bb0: {
        _0 = list::<T>::cons(move _1, move _2); // scope 0 at ui/generics/generic-recursive-tag.rs:4:53: 4:57
        return;                          // scope 0 at ui/generics/generic-recursive-tag.rs:4:53: 4:57
    }
}
