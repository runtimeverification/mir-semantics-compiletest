// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn id(_1: T) -> T {
    debug x => _1;
    let mut _0: T;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn <impl at ui/generics/generic-fn.rs:7:16: 7:21>::clone(_1: &Triple) -> Triple {
    debug self => _1;
    let mut _0: Triple;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: isize;
    let mut _7: isize;
    let mut _8: isize;
    let _9: ();
    let mut _10: std::fmt::Arguments<'_>;
    let mut _11: &[&str];
    let mut _12: &[core::fmt::rt::Argument<'_>];
    let _13: &[core::fmt::rt::Argument<'_>; 1];
    let _14: [core::fmt::rt::Argument<'_>; 1];
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &isize;
    let mut _17: (&isize, &isize);
    let mut _18: &isize;
    let mut _19: &isize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: isize;
    let mut _25: isize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: char;
    let mut _30: char;
    let _31: ();
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: &[core::fmt::rt::Argument<'_>];
    let _35: &[core::fmt::rt::Argument<'_>; 1];
    let _36: [core::fmt::rt::Argument<'_>; 1];
    let mut _37: core::fmt::rt::Argument<'_>;
    let _38: &char;
    let mut _39: (&char, &char);
    let mut _40: &char;
    let mut _41: &char;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: char;
    let mut _47: char;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: Triple;
    let mut _52: isize;
    let mut _53: isize;
    let _54: ();
    let mut _55: std::fmt::Arguments<'_>;
    let mut _56: &[&str];
    let mut _57: &[core::fmt::rt::Argument<'_>];
    let _58: &[core::fmt::rt::Argument<'_>; 1];
    let _59: [core::fmt::rt::Argument<'_>; 1];
    let mut _60: core::fmt::rt::Argument<'_>;
    let _61: &isize;
    let mut _62: (&isize, &isize);
    let mut _63: &isize;
    let mut _64: &isize;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: isize;
    let mut _70: isize;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let mut _2: isize;
        scope 2 {
            debug y => _2;
            let _3: char;
            scope 3 {
                debug a => const 'a';
                let mut _4: char;
                scope 4 {
                    debug b => _4;
                    let _5: Triple;
                    scope 5 {
                        debug p => _5;
                        let mut _6: Triple;
                        scope 6 {
                            debug q => _6;
                            let _20: &isize;
                            let _21: &isize;
                            let _42: &char;
                            let _43: &char;
                            let _65: &isize;
                            let _66: &isize;
                            let mut _74: &[&str; 2];
                            let mut _75: &[&str; 2];
                            let mut _76: &[&str; 2];
                            scope 7 {
                                debug left_val => _20;
                                debug right_val => _21;
                                let _26: core::panicking::AssertKind;
                                scope 8 {
                                    debug kind => _26;
                                }
                            }
                            scope 9 {
                                debug left_val => _42;
                                debug right_val => _43;
                                let _48: core::panicking::AssertKind;
                                scope 10 {
                                    debug kind => _48;
                                }
                            }
                            scope 11 {
                                debug left_val => _65;
                                debug right_val => _66;
                                let _71: core::panicking::AssertKind;
                                scope 12 {
                                    debug kind => _71;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 62_isize;
        _2 = const 63_isize;
        _3 = const 'a';
        _4 = const 'b';
        _5 = Triple { x: const 65_isize, y: const 66_isize, z: const 67_isize };
        _6 = Triple { x: const 68_isize, y: const 69_isize, z: const 70_isize };
        _8 = _1;
        _7 = id::<isize>(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = move _7;
        _76 = const _;
        _11 = _76 as &[&str] (Pointer(Unsize));
        _16 = &_2;
        _15 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_16) -> [return: bb2, unwind continue];
    }

    bb2: {
        _14 = [move _15];
        _13 = &_14;
        _12 = _13 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _10 = Arguments::<'_>::new_v1(move _11, move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = _print(move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        _18 = &_1;
        _19 = &_2;
        _17 = (move _18, move _19);
        _20 = (_17.0: &isize);
        _21 = (_17.1: &isize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<isize, isize>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb6: {
        _30 = _3;
        _29 = id::<char>(move _30) -> [return: bb7, unwind continue];
    }

    bb7: {
        _4 = move _29;
        _75 = const _;
        _33 = _75 as &[&str] (Pointer(Unsize));
        _38 = &_4;
        _37 = core::fmt::rt::Argument::<'_>::new_display::<char>(_38) -> [return: bb8, unwind continue];
    }

    bb8: {
        _36 = [move _37];
        _35 = &_36;
        _34 = _35 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _32 = Arguments::<'_>::new_v1(move _33, move _34) -> [return: bb9, unwind continue];
    }

    bb9: {
        _31 = _print(move _32) -> [return: bb10, unwind continue];
    }

    bb10: {
        _40 = &_3;
        _41 = &_4;
        _39 = (move _40, move _41);
        _42 = (_39.0: &char);
        _43 = (_39.1: &char);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<char, char>(move _48, _42, _43, move _50) -> unwind continue;
    }

    bb12: {
        _51 = id::<Triple>(_5) -> [return: bb13, unwind continue];
    }

    bb13: {
        _6 = move _51;
        _52 = (_5.2: isize);
        _1 = move _52;
        _53 = (_6.2: isize);
        _2 = move _53;
        _74 = const _;
        _56 = _74 as &[&str] (Pointer(Unsize));
        _61 = &_2;
        _60 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_61) -> [return: bb14, unwind continue];
    }

    bb14: {
        _59 = [move _60];
        _58 = &_59;
        _57 = _58 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _55 = Arguments::<'_>::new_v1(move _56, move _57) -> [return: bb15, unwind continue];
    }

    bb15: {
        _54 = _print(move _55) -> [return: bb16, unwind continue];
    }

    bb16: {
        _63 = &_1;
        _64 = &_2;
        _62 = (move _63, move _64);
        _65 = (_62.0: &isize);
        _66 = (_62.1: &isize);
        _69 = (*_65);
        _70 = (*_66);
        _68 = Eq(move _69, move _70);
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<isize, isize>(move _71, _65, _66, move _73) -> unwind continue;
    }

    bb18: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
