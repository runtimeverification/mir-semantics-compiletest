// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generics/generic-object.rs:11:1: 11:22>::get(_1: &S) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = ((*_1).0: isize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<S>;
    let mut _2: S;
    let mut _4: std::boxed::Box<dyn Foo<isize>>;
    let mut _5: std::boxed::Box<S>;
    let mut _6: (&isize, &isize);
    let mut _7: &isize;
    let _8: isize;
    let mut _9: &dyn Foo<isize>;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: isize;
    let mut _15: isize;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: *const dyn Foo<isize>;
    scope 1 {
        debug x => _1;
        let _3: std::boxed::Box<dyn Foo<isize>>;
        scope 2 {
            debug y => _3;
            let _10: &isize;
            let _11: &isize;
            let mut _19: &isize;
            scope 3 {
                debug left_val => _10;
                debug right_val => _11;
                let _16: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _16;
                }
            }
        }
    }

    bb0: {
        _2 = S { x: const 1_isize };
        _1 = Box::<S>::new(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = move _1;
        _4 = move _5 as std::boxed::Box<dyn Foo<isize>> (Pointer(Unsize));
        _3 = move _4;
        _20 = (((_3.0: std::ptr::Unique<dyn Foo<isize>>).0: std::ptr::NonNull<dyn Foo<isize>>).0: *const dyn Foo<isize>);
        _9 = &(*_20);
        _8 = <dyn Foo<isize> as Foo<isize>>::get(move _9) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _7 = &_8;
        _19 = const _;
        _6 = (move _7, _19);
        _10 = (_6.0: &isize);
        _11 = (_6.1: &isize);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<isize, isize>(move _16, _10, _11, move _18) -> bb6;
    }

    bb4: {
        drop(_3) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_3) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}
