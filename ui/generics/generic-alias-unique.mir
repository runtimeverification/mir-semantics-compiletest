// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn id(_1: T) -> T {
    debug t => _1;
    let mut _0: T;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<isize>;
    let mut _3: std::boxed::Box<isize>;
    let mut _4: &std::boxed::Box<isize>;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &isize;
    let mut _13: (&isize, &isize);
    let mut _14: &isize;
    let mut _15: &isize;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: isize;
    let mut _21: isize;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _26: *const isize;
    let mut _27: *const isize;
    let mut _28: *const isize;
    scope 1 {
        debug expected => _1;
        let _2: std::boxed::Box<isize>;
        scope 2 {
            debug actual => _2;
            let _16: &isize;
            let _17: &isize;
            let mut _25: &[&str; 2];
            let mut _29: *const ();
            let mut _30: usize;
            let mut _31: usize;
            let mut _32: usize;
            let mut _33: usize;
            let mut _34: bool;
            let mut _35: *const ();
            let mut _36: usize;
            let mut _37: usize;
            let mut _38: usize;
            let mut _39: usize;
            let mut _40: bool;
            let mut _41: *const ();
            let mut _42: usize;
            let mut _43: usize;
            let mut _44: usize;
            let mut _45: usize;
            let mut _46: bool;
            scope 3 {
                debug left_val => _16;
                debug right_val => _17;
                let _22: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _22;
                }
            }
        }
    }

    bb0: {
        _1 = Box::<isize>::new(const 100_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_1;
        _3 = <Box<isize> as Clone>::clone(move _4) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _2 = id::<Box<isize>>(move _3) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _25 = const _;
        _7 = _25 as &[&str] (Pointer(Unsize));
        _26 = (((_2.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _41 = _26 as *const () (PtrToPtr);
        _42 = _41 as usize (Transmute);
        _43 = AlignOf(isize);
        _44 = Sub(_43, const 1_usize);
        _45 = BitAnd(_42, _44);
        _46 = Eq(_45, const 0_usize);
        assert(_46, "misaligned pointer dereference: address must be a multiple of {} but is {}", _43, _42) -> [success: bb16, unwind unreachable];
    }

    bb4: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _5 = _print(move _6) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _27 = (((_1.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _35 = _27 as *const () (PtrToPtr);
        _36 = _35 as usize (Transmute);
        _37 = AlignOf(isize);
        _38 = Sub(_37, const 1_usize);
        _39 = BitAnd(_36, _38);
        _40 = Eq(_39, const 0_usize);
        assert(_40, "misaligned pointer dereference: address must be a multiple of {} but is {}", _37, _36) -> [success: bb15, unwind unreachable];
    }

    bb7: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<isize, isize>(move _22, _16, _17, move _24) -> bb11;
    }

    bb8: {
        drop(_2) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        drop(_1) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        drop(_1) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }

    bb14: {
        _15 = &(*_28);
        _13 = (move _14, move _15);
        _16 = (_13.0: &isize);
        _17 = (_13.1: &isize);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb8, otherwise: bb7];
    }

    bb15: {
        _14 = &(*_27);
        _28 = (((_2.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _29 = _28 as *const () (PtrToPtr);
        _30 = _29 as usize (Transmute);
        _31 = AlignOf(isize);
        _32 = Sub(_31, const 1_usize);
        _33 = BitAnd(_30, _32);
        _34 = Eq(_33, const 0_usize);
        assert(_34, "misaligned pointer dereference: address must be a multiple of {} but is {}", _31, _30) -> [success: bb14, unwind unreachable];
    }

    bb16: {
        _12 = &(*_26);
        _11 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_12) -> [return: bb4, unwind: bb11];
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
