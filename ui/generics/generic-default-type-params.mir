// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generics/generic-default-type-params.rs:6:1: 6:16>::bar_int(_1: &Foo<isize>) -> isize {
    debug self => _1;                    // in scope 0 at ui/generics/generic-default-type-params.rs:7:16: 7:21
    let mut _0: isize;                   // return place in scope 0 at ui/generics/generic-default-type-params.rs:7:26: 7:31

    bb0: {
        _0 = ((*_1).0: isize);           // scope 0 at ui/generics/generic-default-type-params.rs:8:9: 8:15
        return;                          // scope 0 at ui/generics/generic-default-type-params.rs:9:6: 9:6
    }
}

fn <impl at ui/generics/generic-default-type-params.rs:12:1: 12:15>::bar_char(_1: &Foo<char>) -> char {
    debug self => _1;                    // in scope 0 at ui/generics/generic-default-type-params.rs:13:17: 13:22
    let mut _0: char;                    // return place in scope 0 at ui/generics/generic-default-type-params.rs:13:27: 13:31

    bb0: {
        _0 = ((*_1).0: char);            // scope 0 at ui/generics/generic-default-type-params.rs:14:9: 14:15
        return;                          // scope 0 at ui/generics/generic-default-type-params.rs:15:6: 15:6
    }
}

fn <impl at ui/generics/generic-default-type-params.rs:18:1: 18:9>::bar(_1: &Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/generics/generic-default-type-params.rs:19:12: 19:17
    let mut _0: ();                      // return place in scope 0 at ui/generics/generic-default-type-params.rs:19:19: 19:19
    let _2: isize;                       // in scope 0 at ui/generics/generic-default-type-params.rs:20:14: 20:15
    let _3: char;                        // in scope 0 at ui/generics/generic-default-type-params.rs:20:17: 20:18
    let mut _4: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _6: isize;                       // in scope 0 at ui/generics/generic-default-type-params.rs:21:20: 21:42
    let mut _7: &Foo<isize>;             // in scope 0 at ui/generics/generic-default-type-params.rs:21:20: 21:42
    let _8: Foo<isize>;                  // in scope 0 at ui/generics/generic-default-type-params.rs:21:20: 21:32
    let mut _9: isize;                   // in scope 0 at ui/generics/generic-default-type-params.rs:21:29: 21:30
    let mut _10: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _20: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _21: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _22: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _23: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _25: (&char, &char);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _26: &char;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _27: char;                       // in scope 0 at ui/generics/generic-default-type-params.rs:22:20: 22:43
    let mut _28: &Foo<char>;             // in scope 0 at ui/generics/generic-default-type-params.rs:22:20: 22:43
    let _29: Foo<char>;                  // in scope 0 at ui/generics/generic-default-type-params.rs:22:20: 22:32
    let mut _30: char;                   // in scope 0 at ui/generics/generic-default-type-params.rs:22:29: 22:30
    let mut _31: &char;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _34: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _35: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _36: char;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _37: char;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _39: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _40: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _41: &char;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _42: &char;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _43: &char;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _44: &char;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug i => _2;                   // in scope 1 at ui/generics/generic-default-type-params.rs:20:14: 20:15
        debug c => _3;                   // in scope 1 at ui/generics/generic-default-type-params.rs:20:17: 20:18
        let _11: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _12: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _32: &char;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _33: &char;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        scope 2 {
            debug left_val => _11;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _12;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _17: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _17;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _32;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _33;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _38: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _38;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _2 = (((*_1).0: (isize, char)).0: isize); // scope 0 at ui/generics/generic-default-type-params.rs:20:14: 20:15
        _3 = (((*_1).0: (isize, char)).1: char); // scope 0 at ui/generics/generic-default-type-params.rs:20:17: 20:18
        _9 = _2;                         // scope 1 at ui/generics/generic-default-type-params.rs:21:29: 21:30
        _8 = Foo::<isize> { a: move _9 }; // scope 1 at ui/generics/generic-default-type-params.rs:21:20: 21:32
        _7 = &_8;                        // scope 1 at ui/generics/generic-default-type-params.rs:21:20: 21:42
        _6 = Foo::<isize>::bar_int(move _7) -> bb1; // scope 1 at ui/generics/generic-default-type-params.rs:21:20: 21:42
                                         // mir::Constant
                                         // + span: ui/generics/generic-default-type-params.rs:21:33: 21:40
                                         // + literal: Const { ty: for<'a> fn(&'a Foo<isize>) -> isize {Foo::<isize>::bar_int}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _10 = &_2;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _10);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_4.0: &isize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_4.1: &isize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = (*_11);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = (*_12);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = Eq(move _15, move _16);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _13 = Not(move _14);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb3, otherwise: bb2]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _17 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = _11;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = _23;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = core::panicking::assert_failed::<isize, isize>(move _19, move _20, move _22, move _24); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb3: {
        _30 = _3;                        // scope 1 at ui/generics/generic-default-type-params.rs:22:29: 22:30
        _29 = Foo::<char> { a: move _30 }; // scope 1 at ui/generics/generic-default-type-params.rs:22:20: 22:32
        _28 = &_29;                      // scope 1 at ui/generics/generic-default-type-params.rs:22:20: 22:43
        _27 = Foo::<char>::bar_char(move _28) -> bb4; // scope 1 at ui/generics/generic-default-type-params.rs:22:20: 22:43
                                         // mir::Constant
                                         // + span: ui/generics/generic-default-type-params.rs:22:33: 22:41
                                         // + literal: Const { ty: for<'a> fn(&'a Foo<char>) -> char {Foo::<char>::bar_char}, val: Value(<ZST>) }
    }

    bb4: {
        _26 = &_27;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _31 = &_3;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _25 = (move _26, move _31);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _32 = (_25.0: &char);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _33 = (_25.1: &char);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _36 = (*_32);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _37 = (*_33);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _35 = Eq(move _36, move _37);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _34 = Not(move _35);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _34) -> [0: bb6, otherwise: bb5]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _38 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _40 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _42 = _32;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _42;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _44 = _33;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _43 = _44;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _45 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _39 = core::panicking::assert_failed::<char, char>(move _40, move _41, move _43, move _45); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a char, &'b char, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<char, char>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/generics/generic-default-type-params.rs:23:6: 23:6
    }
}

fn <impl at ui/generics/generic-default-type-params.rs:26:1: 26:22>::baz(_1: &Foo<A>) -> A {
    debug self => _1;                    // in scope 0 at ui/generics/generic-default-type-params.rs:27:12: 27:17
    let mut _0: A;                       // return place in scope 0 at ui/generics/generic-default-type-params.rs:27:22: 27:23
    let mut _2: &A;                      // in scope 0 at ui/generics/generic-default-type-params.rs:28:9: 28:23

    bb0: {
        _2 = &((*_1).0: A);              // scope 0 at ui/generics/generic-default-type-params.rs:28:9: 28:23
        _0 = <A as Clone>::clone(move _2) -> bb1; // scope 0 at ui/generics/generic-default-type-params.rs:28:9: 28:23
                                         // mir::Constant
                                         // + span: ui/generics/generic-default-type-params.rs:28:16: 28:21
                                         // + literal: Const { ty: for<'a> fn(&'a A) -> A {<A as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generics/generic-default-type-params.rs:29:6: 29:6
    }
}

fn default_foo(_1: Foo) -> () {
    debug x => _1;                       // in scope 0 at ui/generics/generic-default-type-params.rs:32:16: 32:17
    let mut _0: ();                      // return place in scope 0 at ui/generics/generic-default-type-params.rs:32:24: 32:24
    let _2: isize;                       // in scope 0 at ui/generics/generic-default-type-params.rs:33:10: 33:11
    let _3: char;                        // in scope 0 at ui/generics/generic-default-type-params.rs:33:13: 33:14
    let mut _4: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _6: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _21: (&char, &char);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _22: &char;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _23: &char;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _28: char;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _29: char;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _31: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _32: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _33: &char;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _34: &char;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _35: &char;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _36: &char;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _38: ();                         // in scope 0 at ui/generics/generic-default-type-params.rs:37:5: 37:12
    let mut _39: &Foo;                   // in scope 0 at ui/generics/generic-default-type-params.rs:37:5: 37:12
    let mut _40: (&(isize, char), &(isize, char)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _41: &(isize, char);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _42: (isize, char);              // in scope 0 at ui/generics/generic-default-type-params.rs:38:16: 38:23
    let mut _43: &Foo;                   // in scope 0 at ui/generics/generic-default-type-params.rs:38:16: 38:23
    let mut _44: &(isize, char);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _47: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _48: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _49: &(isize, char);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _50: &(isize, char);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _52: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _53: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _54: &(isize, char);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _55: &(isize, char);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _56: &(isize, char);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _57: &(isize, char);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug i => _2;                   // in scope 1 at ui/generics/generic-default-type-params.rs:33:10: 33:11
        debug c => _3;                   // in scope 1 at ui/generics/generic-default-type-params.rs:33:13: 33:14
        let _7: &isize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _8: &isize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _24: &char;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _25: &char;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _45: &(isize, char);         // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _46: &(isize, char);         // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _59: &(isize, char);     // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _60: &char;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _61: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _7;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _8;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _13: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _13;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _24;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _25;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _30: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _30;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug left_val => _45;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _46;      // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _51: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 7 {
                debug kind => _51;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _2 = ((_1.0: (isize, char)).0: isize); // scope 0 at ui/generics/generic-default-type-params.rs:33:10: 33:11
        _3 = ((_1.0: (isize, char)).1: char); // scope 0 at ui/generics/generic-default-type-params.rs:33:13: 33:14
        _5 = &_2;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _61 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(default_foo, [], Some(promoted[2])) }
        _6 = _61;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _6);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_4.0: &isize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_4.1: &isize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = const 1_isize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<isize, isize>(move _15, move _16, move _18, move _20); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _22 = &_3;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _60 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &char, val: Unevaluated(default_foo, [], Some(promoted[1])) }
        _23 = _60;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _21 = (move _22, move _23);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _24 = (_21.0: &char);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _25 = (_21.1: &char);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _28 = (*_24);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _29 = const 'a';                 // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _27 = Eq(move _28, move _29);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _26 = Not(move _27);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _26) -> [0: bb4, otherwise: bb3]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _30 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _32 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _34 = _24;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _33 = _34;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _25;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _35 = _36;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _37 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _31 = core::panicking::assert_failed::<char, char>(move _32, move _33, move _35, move _37); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a char, &'b char, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<char, char>}, val: Value(<ZST>) }
    }

    bb4: {
        _39 = &_1;                       // scope 1 at ui/generics/generic-default-type-params.rs:37:5: 37:12
        _38 = Foo::bar(move _39) -> bb5; // scope 1 at ui/generics/generic-default-type-params.rs:37:5: 37:12
                                         // mir::Constant
                                         // + span: ui/generics/generic-default-type-params.rs:37:7: 37:10
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) {Foo::bar}, val: Value(<ZST>) }
    }

    bb5: {
        _43 = &_1;                       // scope 1 at ui/generics/generic-default-type-params.rs:38:16: 38:23
        _42 = Foo::baz(move _43) -> bb6; // scope 1 at ui/generics/generic-default-type-params.rs:38:16: 38:23
                                         // mir::Constant
                                         // + span: ui/generics/generic-default-type-params.rs:38:18: 38:21
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) -> (isize, char) {Foo::baz}, val: Value(<ZST>) }
    }

    bb6: {
        _41 = &_42;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _59 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(isize, char), val: Unevaluated(default_foo, [], Some(promoted[0])) }
        _44 = _59;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _40 = (move _41, move _44);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _45 = (_40.0: &(isize, char));   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _46 = (_40.1: &(isize, char));   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _49 = _45;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _50 = _46;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _48 = <(isize, char) as PartialEq>::eq(move _49, move _50) -> bb7; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (isize, char), &'b (isize, char)) -> bool {<(isize, char) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _47 = Not(move _48);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _47) -> [0: bb9, otherwise: bb8]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _51 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _53 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _55 = _45;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _54 = _55;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _46;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _56 = _57;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _58 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _52 = core::panicking::assert_failed::<(isize, char), (isize, char)>(move _53, move _54, move _56, move _58); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (isize, char), &'b (isize, char), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(isize, char), (isize, char)>}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/generics/generic-default-type-params.rs:39:2: 39:2
    }
}

promoted[0] in default_foo: &(isize, char) = {
    let mut _0: &(isize, char);          // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: (isize, char);           // in scope 0 at ui/generics/generic-default-type-params.rs:38:25: 38:33

    bb0: {
        _1 = (const 1_isize, const 'a'); // scope 0 at ui/generics/generic-default-type-params.rs:38:25: 38:33
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in default_foo: &char = {
    let mut _0: &char;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: char;                    // in scope 0 at ui/generics/generic-default-type-params.rs:35:19: 35:22

    bb0: {
        _1 = const 'a';                  // scope 0 at ui/generics/generic-default-type-params.rs:35:19: 35:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in default_foo: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/generics/generic-default-type-params.rs:34:19: 34:20

    bb0: {
        _1 = const 1_isize;              // scope 0 at ui/generics/generic-default-type-params.rs:34:19: 34:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn <impl at ui/generics/generic-default-type-params.rs:41:10: 41:19>::eq(_1: &BazHelper<T>, _2: &BazHelper<T>) -> bool {
    debug self => _1;                    // in scope 0 at ui/generics/generic-default-type-params.rs:41:10: 41:19
    debug other => _2;                   // in scope 0 at ui/generics/generic-default-type-params.rs:41:10: 41:19
    let mut _0: bool;                    // return place in scope 0 at ui/generics/generic-default-type-params.rs:41:10: 41:19
    let mut _3: &T;                      // in scope 0 at ui/generics/generic-default-type-params.rs:42:21: 42:22
    let mut _4: &T;                      // in scope 0 at ui/generics/generic-default-type-params.rs:42:21: 42:22

    bb0: {
        _3 = &((*_1).0: T);              // scope 0 at ui/generics/generic-default-type-params.rs:42:21: 42:22
        _4 = &((*_2).0: T);              // scope 0 at ui/generics/generic-default-type-params.rs:42:21: 42:22
        _0 = <T as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/generics/generic-default-type-params.rs:42:21: 42:22
                                         // mir::Constant
                                         // + span: ui/generics/generic-default-type-params.rs:42:21: 42:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generics/generic-default-type-params.rs:41:19: 41:19
    }
}

fn <impl at ui/generics/generic-default-type-params.rs:41:21: 41:26>::fmt(_1: &BazHelper<T>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/generics/generic-default-type-params.rs:41:21: 41:26
    debug f => _2;                       // in scope 0 at ui/generics/generic-default-type-params.rs:41:21: 41:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/generics/generic-default-type-params.rs:41:21: 41:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/generics/generic-default-type-params.rs:41:21: 41:26
    let mut _4: &str;                    // in scope 0 at ui/generics/generic-default-type-params.rs:41:21: 41:26
    let _5: &str;                        // in scope 0 at ui/generics/generic-default-type-params.rs:41:21: 41:26
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/generics/generic-default-type-params.rs:42:21: 42:22
    let mut _7: &&T;                     // in scope 0 at ui/generics/generic-default-type-params.rs:42:21: 42:22
    let _8: &&T;                         // in scope 0 at ui/generics/generic-default-type-params.rs:42:21: 42:22
    let _9: &T;                          // in scope 0 at ui/generics/generic-default-type-params.rs:42:21: 42:22

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/generics/generic-default-type-params.rs:41:21: 41:26
        _5 = const "BazHelper";          // scope 0 at ui/generics/generic-default-type-params.rs:41:21: 41:26
                                         // mir::Constant
                                         // + span: ui/generics/generic-default-type-params.rs:41:21: 41:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/generics/generic-default-type-params.rs:41:21: 41:26
        _9 = &((*_1).0: T);              // scope 0 at ui/generics/generic-default-type-params.rs:42:21: 42:22
        _8 = &_9;                        // scope 0 at ui/generics/generic-default-type-params.rs:42:21: 42:22
        _7 = _8;                         // scope 0 at ui/generics/generic-default-type-params.rs:42:21: 42:22
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/generics/generic-default-type-params.rs:42:21: 42:22
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/generics/generic-default-type-params.rs:41:21: 41:26
                                         // mir::Constant
                                         // + span: ui/generics/generic-default-type-params.rs:41:21: 41:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generics/generic-default-type-params.rs:41:26: 41:26
    }
}

fn <impl at ui/generics/generic-default-type-params.rs:44:10: 44:19>::eq(_1: &Baz<T, U, V>, _2: &Baz<T, U, V>) -> bool {
    debug self => _1;                    // in scope 0 at ui/generics/generic-default-type-params.rs:44:10: 44:19
    debug other => _2;                   // in scope 0 at ui/generics/generic-default-type-params.rs:44:10: 44:19
    let mut _0: bool;                    // return place in scope 0 at ui/generics/generic-default-type-params.rs:44:10: 44:19
    let mut _3: bool;                    // in scope 0 at ui/generics/generic-default-type-params.rs:46:51: 46:52
    let mut _4: bool;                    // in scope 0 at ui/generics/generic-default-type-params.rs:46:48: 46:49
    let mut _5: &T;                      // in scope 0 at ui/generics/generic-default-type-params.rs:46:48: 46:49
    let mut _6: &T;                      // in scope 0 at ui/generics/generic-default-type-params.rs:46:48: 46:49
    let mut _7: bool;                    // in scope 0 at ui/generics/generic-default-type-params.rs:46:51: 46:52
    let mut _8: &U;                      // in scope 0 at ui/generics/generic-default-type-params.rs:46:51: 46:52
    let mut _9: &U;                      // in scope 0 at ui/generics/generic-default-type-params.rs:46:51: 46:52
    let mut _10: bool;                   // in scope 0 at ui/generics/generic-default-type-params.rs:46:54: 46:55
    let mut _11: &V;                     // in scope 0 at ui/generics/generic-default-type-params.rs:46:54: 46:55
    let mut _12: &V;                     // in scope 0 at ui/generics/generic-default-type-params.rs:46:54: 46:55

    bb0: {
        _5 = &((*_1).0: T);              // scope 0 at ui/generics/generic-default-type-params.rs:46:48: 46:49
        _6 = &((*_2).0: T);              // scope 0 at ui/generics/generic-default-type-params.rs:46:48: 46:49
        _4 = <T as PartialEq>::eq(move _5, move _6) -> bb7; // scope 0 at ui/generics/generic-default-type-params.rs:46:48: 46:49
                                         // mir::Constant
                                         // + span: ui/generics/generic-default-type-params.rs:46:48: 46:49
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/generics/generic-default-type-params.rs:46:54: 46:55
        goto -> bb3;                     // scope 0 at ui/generics/generic-default-type-params.rs:46:54: 46:55
    }

    bb2: {
        _11 = &((*_1).2: V);             // scope 0 at ui/generics/generic-default-type-params.rs:46:54: 46:55
        _12 = &((*_2).2: V);             // scope 0 at ui/generics/generic-default-type-params.rs:46:54: 46:55
        _10 = <V as PartialEq>::eq(move _11, move _12) -> bb9; // scope 0 at ui/generics/generic-default-type-params.rs:46:54: 46:55
                                         // mir::Constant
                                         // + span: ui/generics/generic-default-type-params.rs:46:54: 46:55
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a V, &'b V) -> bool {<V as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/generics/generic-default-type-params.rs:44:19: 44:19
    }

    bb4: {
        _3 = const false;                // scope 0 at ui/generics/generic-default-type-params.rs:46:51: 46:52
        goto -> bb6;                     // scope 0 at ui/generics/generic-default-type-params.rs:46:51: 46:52
    }

    bb5: {
        _8 = &((*_1).1: U);              // scope 0 at ui/generics/generic-default-type-params.rs:46:51: 46:52
        _9 = &((*_2).1: U);              // scope 0 at ui/generics/generic-default-type-params.rs:46:51: 46:52
        _7 = <U as PartialEq>::eq(move _8, move _9) -> bb8; // scope 0 at ui/generics/generic-default-type-params.rs:46:51: 46:52
                                         // mir::Constant
                                         // + span: ui/generics/generic-default-type-params.rs:46:51: 46:52
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U, &'b U) -> bool {<U as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/generics/generic-default-type-params.rs:46:54: 46:55
    }

    bb7: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/generics/generic-default-type-params.rs:46:51: 46:52
    }

    bb8: {
        _3 = move _7;                    // scope 0 at ui/generics/generic-default-type-params.rs:46:51: 46:52
        goto -> bb6;                     // scope 0 at ui/generics/generic-default-type-params.rs:46:51: 46:52
    }

    bb9: {
        _0 = move _10;                   // scope 0 at ui/generics/generic-default-type-params.rs:46:54: 46:55
        goto -> bb3;                     // scope 0 at ui/generics/generic-default-type-params.rs:46:54: 46:55
    }
}

fn <impl at ui/generics/generic-default-type-params.rs:44:21: 44:26>::fmt(_1: &Baz<T, U, V>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/generics/generic-default-type-params.rs:44:21: 44:26
    debug f => _2;                       // in scope 0 at ui/generics/generic-default-type-params.rs:44:21: 44:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/generics/generic-default-type-params.rs:44:21: 44:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/generics/generic-default-type-params.rs:44:21: 44:26
    let mut _4: &str;                    // in scope 0 at ui/generics/generic-default-type-params.rs:44:21: 44:26
    let _5: &str;                        // in scope 0 at ui/generics/generic-default-type-params.rs:44:21: 44:26
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/generics/generic-default-type-params.rs:46:48: 46:49
    let mut _7: &T;                      // in scope 0 at ui/generics/generic-default-type-params.rs:46:48: 46:49
    let _8: &T;                          // in scope 0 at ui/generics/generic-default-type-params.rs:46:48: 46:49
    let mut _9: &dyn std::fmt::Debug;    // in scope 0 at ui/generics/generic-default-type-params.rs:46:51: 46:52
    let mut _10: &U;                     // in scope 0 at ui/generics/generic-default-type-params.rs:46:51: 46:52
    let _11: &U;                         // in scope 0 at ui/generics/generic-default-type-params.rs:46:51: 46:52
    let mut _12: &dyn std::fmt::Debug;   // in scope 0 at ui/generics/generic-default-type-params.rs:46:54: 46:55
    let mut _13: &&V;                    // in scope 0 at ui/generics/generic-default-type-params.rs:46:54: 46:55
    let _14: &&V;                        // in scope 0 at ui/generics/generic-default-type-params.rs:46:54: 46:55
    let _15: &V;                         // in scope 0 at ui/generics/generic-default-type-params.rs:46:54: 46:55

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/generics/generic-default-type-params.rs:44:21: 44:26
        _5 = const "Baz";                // scope 0 at ui/generics/generic-default-type-params.rs:44:21: 44:26
                                         // mir::Constant
                                         // + span: ui/generics/generic-default-type-params.rs:44:21: 44:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/generics/generic-default-type-params.rs:44:21: 44:26
        _8 = &((*_1).0: T);              // scope 0 at ui/generics/generic-default-type-params.rs:46:48: 46:49
        _7 = _8;                         // scope 0 at ui/generics/generic-default-type-params.rs:46:48: 46:49
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/generics/generic-default-type-params.rs:46:48: 46:49
        _11 = &((*_1).1: U);             // scope 0 at ui/generics/generic-default-type-params.rs:46:51: 46:52
        _10 = _11;                       // scope 0 at ui/generics/generic-default-type-params.rs:46:51: 46:52
        _9 = move _10 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/generics/generic-default-type-params.rs:46:51: 46:52
        _15 = &((*_1).2: V);             // scope 0 at ui/generics/generic-default-type-params.rs:46:54: 46:55
        _14 = &_15;                      // scope 0 at ui/generics/generic-default-type-params.rs:46:54: 46:55
        _13 = _14;                       // scope 0 at ui/generics/generic-default-type-params.rs:46:54: 46:55
        _12 = move _13 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/generics/generic-default-type-params.rs:46:54: 46:55
        _0 = Formatter::<'_>::debug_tuple_field3_finish(move _3, move _4, move _6, move _9, move _12) -> bb1; // scope 0 at ui/generics/generic-default-type-params.rs:44:21: 44:26
                                         // mir::Constant
                                         // + span: ui/generics/generic-default-type-params.rs:44:21: 44:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd), &'e (dyn Debug + 'e)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field3_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generics/generic-default-type-params.rs:44:26: 44:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generics/generic-default-type-params.rs:48:11: 48:11
    let _1: ();                          // in scope 0 at ui/generics/generic-default-type-params.rs:49:5: 49:37
    let mut _2: Foo;                     // in scope 0 at ui/generics/generic-default-type-params.rs:49:17: 49:36
    let mut _3: (isize, char);           // in scope 0 at ui/generics/generic-default-type-params.rs:49:26: 49:34
    let _4: Baz<bool>;                   // in scope 0 at ui/generics/generic-default-type-params.rs:51:9: 51:10
    let mut _5: BazHelper<bool>;         // in scope 0 at ui/generics/generic-default-type-params.rs:51:34: 51:50
    let mut _6: std::option::Option<BazHelper<bool>>; // in scope 0 at ui/generics/generic-default-type-params.rs:51:52: 51:73
    let mut _7: (&Baz<bool>, &Baz<bool>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &Baz<bool>;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _9: &Baz<bool>;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: &Baz<bool>;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: &Baz<bool>;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &Baz<bool>;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &Baz<bool>;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &Baz<bool>;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &Baz<bool>;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/generics/generic-default-type-params.rs:51:9: 51:10
        let _10: &Baz<bool>;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _11: &Baz<bool>;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _24: &Baz<bool>;         // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _10;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _11;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _16: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _16;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _3 = const (1_isize, 'a');       // scope 0 at ui/generics/generic-default-type-params.rs:49:26: 49:34
        _2 = Foo { a: move _3 };         // scope 0 at ui/generics/generic-default-type-params.rs:49:17: 49:36
        _1 = default_foo(move _2) -> bb1; // scope 0 at ui/generics/generic-default-type-params.rs:49:5: 49:37
                                         // mir::Constant
                                         // + span: ui/generics/generic-default-type-params.rs:49:5: 49:16
                                         // + literal: Const { ty: fn(Foo) {default_foo}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = const BazHelper::<bool>(false); // scope 0 at ui/generics/generic-default-type-params.rs:51:34: 51:50
                                         // mir::Constant
                                         // + span: ui/generics/generic-default-type-params.rs:51:34: 51:50
                                         // + literal: Const { ty: BazHelper<bool>, val: Value(Scalar(0x00)) }
        _6 = const Option::<BazHelper<bool>>::Some(BazHelper::<bool>(true)); // scope 0 at ui/generics/generic-default-type-params.rs:51:52: 51:73
                                         // mir::Constant
                                         // + span: ui/generics/generic-default-type-params.rs:51:52: 51:73
                                         // + literal: Const { ty: Option<BazHelper<bool>>, val: Value(Scalar(0x01)) }
        _4 = Baz::<bool>(const true, move _5, move _6); // scope 0 at ui/generics/generic-default-type-params.rs:51:24: 51:74
        _8 = &_4;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Baz<bool>, val: Unevaluated(main, [], Some(promoted[0])) }
        _9 = _24;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _9);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_7.0: &Baz<bool>);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_7.1: &Baz<bool>);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = _11;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = <Baz<bool> as PartialEq>::eq(move _14, move _15) -> bb2; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Baz<bool>, &'b Baz<bool>) -> bool {<Baz<bool> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = Not(move _13);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<Baz<bool>, Baz<bool>>(move _18, move _19, move _21, move _23); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Baz<bool>, &'b Baz<bool>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Baz<bool>, Baz<bool>>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/generics/generic-default-type-params.rs:53:2: 53:2
    }
}

promoted[0] in main: &Baz<bool> = {
    let mut _0: &Baz<bool>;              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Baz<bool>;               // in scope 0 at ui/generics/generic-default-type-params.rs:52:19: 52:69
    let mut _2: BazHelper<bool>;         // in scope 0 at ui/generics/generic-default-type-params.rs:52:29: 52:45
    let mut _3: std::option::Option<BazHelper<bool>>; // in scope 0 at ui/generics/generic-default-type-params.rs:52:47: 52:68
    let mut _4: BazHelper<bool>;         // in scope 0 at ui/generics/generic-default-type-params.rs:52:52: 52:67

    bb0: {
        _2 = BazHelper::<bool>(const false); // scope 0 at ui/generics/generic-default-type-params.rs:52:29: 52:45
        _4 = BazHelper::<bool>(const true); // scope 0 at ui/generics/generic-default-type-params.rs:52:52: 52:67
        _3 = Option::<BazHelper<bool>>::Some(move _4); // scope 0 at ui/generics/generic-default-type-params.rs:52:47: 52:68
        _1 = Baz::<bool>(const true, move _2, move _3); // scope 0 at ui/generics/generic-default-type-params.rs:52:19: 52:69
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn BazHelper(_1: T) -> BazHelper<T> {
    let mut _0: BazHelper<T>;            // return place in scope 0 at ui/generics/generic-default-type-params.rs:42:1: 42:20

    bb0: {
        _0 = BazHelper::<T>(move _1);    // scope 0 at ui/generics/generic-default-type-params.rs:42:1: 42:20
        return;                          // scope 0 at ui/generics/generic-default-type-params.rs:42:1: 42:20
    }
}

// MIR FOR CTFE
fn BazHelper(_1: T) -> BazHelper<T> {
    let mut _0: BazHelper<T>;            // return place in scope 0 at ui/generics/generic-default-type-params.rs:42:1: 42:20

    bb0: {
        _0 = BazHelper::<T>(move _1);    // scope 0 at ui/generics/generic-default-type-params.rs:42:1: 42:20
        return;                          // scope 0 at ui/generics/generic-default-type-params.rs:42:1: 42:20
    }
}

fn Baz(_1: T, _2: U, _3: V) -> Baz<T, U, V> {
    let mut _0: Baz<T, U, V>;            // return place in scope 0 at ui/generics/generic-default-type-params.rs:46:1: 46:47

    bb0: {
        _0 = Baz::<T, U, V>(move _1, move _2, move _3); // scope 0 at ui/generics/generic-default-type-params.rs:46:1: 46:47
        return;                          // scope 0 at ui/generics/generic-default-type-params.rs:46:1: 46:47
    }
}

// MIR FOR CTFE
fn Baz(_1: T, _2: U, _3: V) -> Baz<T, U, V> {
    let mut _0: Baz<T, U, V>;            // return place in scope 0 at ui/generics/generic-default-type-params.rs:46:1: 46:47

    bb0: {
        _0 = Baz::<T, U, V>(move _1, move _2, move _3); // scope 0 at ui/generics/generic-default-type-params.rs:46:1: 46:47
        return;                          // scope 0 at ui/generics/generic-default-type-params.rs:46:1: 46:47
    }
}
