// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: X<isize>;
    let _2: ();
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _1 = X::<isize> { a: const 12345678_isize, b: const 9_u8, c: const true, d: const 10_u8, e: const 11_u16, f: const 12_u8, g: const 13_u8 };
        _2 = bar::<isize>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn bar(_1: X<T>) -> () {
    debug x => _1;
    let mut _0: ();
    let mut _2: (&u8, &u8);
    let mut _3: &u8;
    let _4: &u8;
    let _5: &u8;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: u8;
    let mut _9: u8;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&bool, &bool);
    let mut _14: &bool;
    let _15: &bool;
    let _16: &bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _24: (&u8, &u8);
    let mut _25: &u8;
    let _26: &u8;
    let _27: &u8;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: u8;
    let mut _31: u8;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&u16, &u16);
    let mut _36: &u16;
    let _37: &u16;
    let _38: &u16;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: u16;
    let mut _42: u16;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _46: (&u8, &u8);
    let mut _47: &u8;
    let _48: &u8;
    let _49: &u8;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: u8;
    let mut _53: u8;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&u8, &u8);
    let mut _58: &u8;
    let _59: &u8;
    let _60: &u8;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: u8;
    let mut _64: u8;
    let _66: !;
    let mut _67: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _68: &u8;
    let mut _69: &u8;
    let mut _70: &u16;
    let mut _71: &u8;
    let mut _72: &bool;
    let mut _73: &u8;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _15;
        debug right_val => _16;
        let _21: core::panicking::AssertKind;
        scope 4 {
            debug kind => _21;
        }
    }
    scope 5 {
        debug left_val => _26;
        debug right_val => _27;
        let _32: core::panicking::AssertKind;
        scope 6 {
            debug kind => _32;
        }
    }
    scope 7 {
        debug left_val => _37;
        debug right_val => _38;
        let _43: core::panicking::AssertKind;
        scope 8 {
            debug kind => _43;
        }
    }
    scope 9 {
        debug left_val => _48;
        debug right_val => _49;
        let _54: core::panicking::AssertKind;
        scope 10 {
            debug kind => _54;
        }
    }
    scope 11 {
        debug left_val => _59;
        debug right_val => _60;
        let _65: core::panicking::AssertKind;
        scope 12 {
            debug kind => _65;
        }
    }

    bb0: {
        _3 = &(_1.1: u8);
        _73 = const _;
        _2 = (move _3, _73);
        _4 = (_2.0: &u8);
        _5 = (_2.1: &u8);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<u8, u8>(move _10, _4, _5, move _12) -> bb14;
    }

    bb2: {
        _14 = &(_1.2: bool);
        _72 = const _;
        _13 = (move _14, _72);
        _15 = (_13.0: &bool);
        _16 = (_13.1: &bool);
        _19 = (*_15);
        _20 = (*_16);
        _18 = Eq(move _19, move _20);
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<bool, bool>(move _21, _15, _16, move _23) -> bb14;
    }

    bb4: {
        _25 = &(_1.3: u8);
        _71 = const _;
        _24 = (move _25, _71);
        _26 = (_24.0: &u8);
        _27 = (_24.1: &u8);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<u8, u8>(move _32, _26, _27, move _34) -> bb14;
    }

    bb6: {
        _36 = &(_1.4: u16);
        _70 = const _;
        _35 = (move _36, _70);
        _37 = (_35.0: &u16);
        _38 = (_35.1: &u16);
        _41 = (*_37);
        _42 = (*_38);
        _40 = Eq(move _41, move _42);
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<u16, u16>(move _43, _37, _38, move _45) -> bb14;
    }

    bb8: {
        _47 = &(_1.5: u8);
        _69 = const _;
        _46 = (move _47, _69);
        _48 = (_46.0: &u8);
        _49 = (_46.1: &u8);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<u8, u8>(move _54, _48, _49, move _56) -> bb14;
    }

    bb10: {
        _58 = &(_1.6: u8);
        _68 = const _;
        _57 = (move _58, _68);
        _59 = (_57.0: &u8);
        _60 = (_57.1: &u8);
        _63 = (*_59);
        _64 = (*_60);
        _62 = Eq(move _63, move _64);
        _61 = Not(move _62);
        switchInt(move _61) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _65 = core::panicking::AssertKind::Eq;
        _67 = Option::<Arguments<'_>>::None;
        _66 = core::panicking::assert_failed::<u8, u8>(move _65, _59, _60, move _67) -> bb14;
    }

    bb12: {
        drop(_1) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_1) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }
}

promoted[0] in bar: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 13_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in bar: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 12_u8;
        _0 = &_1;
        return;
    }
}

promoted[2] in bar: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 11_u16;
        _0 = &_1;
        return;
    }
}

promoted[3] in bar: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 10_u8;
        _0 = &_1;
        return;
    }
}

promoted[4] in bar: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[5] in bar: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 9_u8;
        _0 = &_1;
        return;
    }
}
