// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generics/generic-tag-corruption.rs:10:15: 10:15
    let _1: thing<std::string::String>;  // in scope 0 at ui/generics/generic-tag-corruption.rs:10:21: 10:23
    let mut _2: std::string::String;     // in scope 0 at ui/generics/generic-tag-corruption.rs:10:38: 10:54
    let mut _3: &str;                    // in scope 0 at ui/generics/generic-tag-corruption.rs:10:38: 10:54
    let _4: &str;                        // in scope 0 at ui/generics/generic-tag-corruption.rs:10:38: 10:42
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/generics/generic-tag-corruption.rs:10:21: 10:23
    }

    bb0: {
        _4 = const "hi";                 // scope 0 at ui/generics/generic-tag-corruption.rs:10:38: 10:42
                                         // mir::Constant
                                         // + span: ui/generics/generic-tag-corruption.rs:10:38: 10:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/generics/generic-tag-corruption.rs:10:38: 10:54
        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at ui/generics/generic-tag-corruption.rs:10:38: 10:54
                                         // mir::Constant
                                         // + span: ui/generics/generic-tag-corruption.rs:10:43: 10:52
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = thing::<String>::some(move _2); // scope 0 at ui/generics/generic-tag-corruption.rs:10:26: 10:55
        drop(_1) -> bb2;                 // scope 0 at ui/generics/generic-tag-corruption.rs:10:57: 10:58
    }

    bb2: {
        return;                          // scope 0 at ui/generics/generic-tag-corruption.rs:10:58: 10:58
    }
}

fn thing::some(_1: K) -> thing<K> {
    let mut _0: thing<K>;                // return place in scope 0 at ui/generics/generic-tag-corruption.rs:8:17: 8:21

    bb0: {
        _0 = thing::<K>::some(move _1);  // scope 0 at ui/generics/generic-tag-corruption.rs:8:17: 8:21
        return;                          // scope 0 at ui/generics/generic-tag-corruption.rs:8:17: 8:21
    }
}

// MIR FOR CTFE
fn thing::some(_1: K) -> thing<K> {
    let mut _0: thing<K>;                // return place in scope 0 at ui/generics/generic-tag-corruption.rs:8:17: 8:21

    bb0: {
        _0 = thing::<K>::some(move _1);  // scope 0 at ui/generics/generic-tag-corruption.rs:8:17: 8:21
        return;                          // scope 0 at ui/generics/generic-tag-corruption.rs:8:17: 8:21
    }
}
