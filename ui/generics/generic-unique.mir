// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn box_it(_1: Triple<T>) -> Box<Triple<T>> {
    debug x => _1;
    let mut _0: std::boxed::Box<Triple<T>>;

    bb0: {
        _0 = Box::<Triple<T>>::new(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<Triple<isize>>;
    let mut _2: Triple<isize>;
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: isize;
    let mut _10: isize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: *const Triple<isize>;
    scope 1 {
        debug x => _1;
        let _5: &isize;
        let _6: &isize;
        let mut _14: &isize;
        let mut _16: *const ();
        let mut _17: usize;
        let mut _18: usize;
        let mut _19: usize;
        let mut _20: usize;
        let mut _21: bool;
        scope 2 {
            debug left_val => _5;
            debug right_val => _6;
            let _11: core::panicking::AssertKind;
            scope 3 {
                debug kind => _11;
            }
        }
    }

    bb0: {
        _2 = Triple::<isize> { x: const 1_isize, y: const 2_isize, z: const 3_isize };
        _1 = box_it::<isize>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _15 = (((_1.0: std::ptr::Unique<Triple<isize>>).0: std::ptr::NonNull<Triple<isize>>).0: *const Triple<isize>);
        _16 = _15 as *const () (PtrToPtr);
        _17 = _16 as usize (Transmute);
        _18 = AlignOf(Triple<isize>);
        _19 = Sub(_18, const 1_usize);
        _20 = BitAnd(_17, _19);
        _21 = Eq(_20, const 0_usize);
        assert(_21, "misaligned pointer dereference: address must be a multiple of {} but is {}", _18, _17) -> [success: bb7, unwind unreachable];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<isize, isize>(move _11, _5, _6, move _13) -> bb5;
    }

    bb3: {
        drop(_1) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_1) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }

    bb7: {
        _4 = &((*_15).1: isize);
        _14 = const _;
        _3 = (move _4, _14);
        _5 = (_3.0: &isize);
        _6 = (_3.1: &isize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}
