// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generics/generic-static-methods.rs:9:1: 9:32>::map_(_1: &Vec<T>, _2: F) -> Vec<U> {
    debug x => _1;                       // in scope 0 at ui/generics/generic-static-methods.rs:10:19: 10:20
    debug f => _2;                       // in scope 0 at ui/generics/generic-static-methods.rs:10:32: 10:37
    let mut _0: std::vec::Vec<U>;        // return place in scope 0 at ui/generics/generic-static-methods.rs:11:13: 11:18
    let mut _3: std::slice::Iter<'_, T>; // in scope 0 at ui/generics/generic-static-methods.rs:12:20: 12:21
    let mut _4: &std::vec::Vec<T>;       // in scope 0 at ui/generics/generic-static-methods.rs:12:20: 12:21
    let mut _6: std::option::Option<&T>; // in scope 0 at ui/generics/generic-static-methods.rs:12:20: 12:21
    let mut _7: &mut std::slice::Iter<'_, T>; // in scope 0 at ui/generics/generic-static-methods.rs:12:20: 12:21
    let mut _8: &mut std::slice::Iter<'_, T>; // in scope 0 at ui/generics/generic-static-methods.rs:12:20: 12:21
    let mut _9: isize;                   // in scope 0 at ui/generics/generic-static-methods.rs:12:9: 14:10
    let _11: ();                         // in scope 0 at ui/generics/generic-static-methods.rs:13:13: 13:27
    let mut _12: &mut std::vec::Vec<U>;  // in scope 0 at ui/generics/generic-static-methods.rs:13:13: 13:27
    let mut _13: U;                      // in scope 0 at ui/generics/generic-static-methods.rs:13:20: 13:26
    let mut _14: &mut F;                 // in scope 0 at ui/generics/generic-static-methods.rs:13:20: 13:21
    let mut _15: (&T,);                  // in scope 0 at ui/generics/generic-static-methods.rs:13:20: 13:26
    let mut _16: &T;                     // in scope 0 at ui/generics/generic-static-methods.rs:13:22: 13:25
    scope 1 {
        debug r => _0;                   // in scope 1 at ui/generics/generic-static-methods.rs:11:13: 11:18
        let mut _5: std::slice::Iter<'_, T>; // in scope 1 at ui/generics/generic-static-methods.rs:12:20: 12:21
        scope 2 {
            debug iter => _5;            // in scope 2 at ui/generics/generic-static-methods.rs:12:20: 12:21
            let _10: &T;                 // in scope 2 at ui/generics/generic-static-methods.rs:12:13: 12:16
            scope 3 {
                debug elt => _10;        // in scope 3 at ui/generics/generic-static-methods.rs:12:13: 12:16
            }
        }
    }

    bb0: {
        _0 = Vec::<U>::new() -> [return: bb1, unwind: bb11]; // scope 0 at ui/generics/generic-static-methods.rs:11:21: 11:31
                                         // mir::Constant
                                         // + span: ui/generics/generic-static-methods.rs:11:21: 11:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<U> {Vec::<U>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _1;                         // scope 1 at ui/generics/generic-static-methods.rs:12:20: 12:21
        _3 = <&Vec<T> as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind: bb10]; // scope 1 at ui/generics/generic-static-methods.rs:12:20: 12:21
                                         // mir::Constant
                                         // + span: ui/generics/generic-static-methods.rs:12:20: 12:21
                                         // + literal: Const { ty: fn(&Vec<T>) -> <&Vec<T> as IntoIterator>::IntoIter {<&Vec<T> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = move _3;                    // scope 1 at ui/generics/generic-static-methods.rs:12:20: 12:21
        goto -> bb3;                     // scope 2 at ui/generics/generic-static-methods.rs:12:9: 14:10
    }

    bb3: {
        _8 = &mut _5;                    // scope 2 at ui/generics/generic-static-methods.rs:12:20: 12:21
        _7 = &mut (*_8);                 // scope 2 at ui/generics/generic-static-methods.rs:12:20: 12:21
        _6 = <std::slice::Iter<'_, T> as Iterator>::next(move _7) -> [return: bb4, unwind: bb10]; // scope 2 at ui/generics/generic-static-methods.rs:12:20: 12:21
                                         // mir::Constant
                                         // + span: ui/generics/generic-static-methods.rs:12:20: 12:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, T>) -> Option<<std::slice::Iter<'_, T> as Iterator>::Item> {<std::slice::Iter<'_, T> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = discriminant(_6);           // scope 2 at ui/generics/generic-static-methods.rs:12:20: 12:21
        switchInt(move _9) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 2 at ui/generics/generic-static-methods.rs:12:20: 12:21
    }

    bb5: {
        _10 = ((_6 as Some).0: &T);      // scope 2 at ui/generics/generic-static-methods.rs:12:13: 12:16
        _12 = &mut _0;                   // scope 3 at ui/generics/generic-static-methods.rs:13:13: 13:27
        _14 = &mut _2;                   // scope 3 at ui/generics/generic-static-methods.rs:13:20: 13:21
        _16 = _10;                       // scope 3 at ui/generics/generic-static-methods.rs:13:22: 13:25
        _15 = (move _16,);               // scope 3 at ui/generics/generic-static-methods.rs:13:20: 13:26
        _13 = <F as FnMut<(&T,)>>::call_mut(move _14, move _15) -> [return: bb8, unwind: bb10]; // scope 3 at ui/generics/generic-static-methods.rs:13:20: 13:26
                                         // mir::Constant
                                         // + span: ui/generics/generic-static-methods.rs:13:20: 13:21
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (&T,)) -> <F as FnOnce<(&T,)>>::Output {<F as FnMut<(&T,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 2 at ui/generics/generic-static-methods.rs:12:20: 12:21
    }

    bb7: {
        drop(_2) -> bb9;                 // scope 0 at ui/generics/generic-static-methods.rs:16:5: 16:6
    }

    bb8: {
        _11 = Vec::<U>::push(move _12, move _13) -> [return: bb13, unwind: bb10]; // scope 3 at ui/generics/generic-static-methods.rs:13:13: 13:27
                                         // mir::Constant
                                         // + span: ui/generics/generic-static-methods.rs:13:15: 13:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<U>, U) {Vec::<U>::push}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/generics/generic-static-methods.rs:16:6: 16:6
    }

    bb10 (cleanup): {
        drop(_0) -> bb11;                // scope 0 at ui/generics/generic-static-methods.rs:16:5: 16:6
    }

    bb11 (cleanup): {
        drop(_2) -> bb12;                // scope 0 at ui/generics/generic-static-methods.rs:16:5: 16:6
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at ui/generics/generic-static-methods.rs:10:5: 16:6
    }

    bb13: {
        goto -> bb3;                     // scope 3 at ui/generics/generic-static-methods.rs:13:13: 13:27
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generics/generic-static-methods.rs:19:15: 19:15
    let mut _1: (&std::vec::Vec<i32>, &[i32; 3]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::vec::Vec<i32>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::vec::Vec<i32>;          // in scope 0 at ui/generics/generic-static-methods.rs:20:16: 20:55
    let mut _4: &std::vec::Vec<i32>;     // in scope 0 at ui/generics/generic-static-methods.rs:20:32: 20:44
    let _5: &std::vec::Vec<i32>;         // in scope 0 at ui/generics/generic-static-methods.rs:20:32: 20:44
    let _6: std::vec::Vec<i32>;          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _7: std::boxed::Box<[i32]>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::boxed::Box<[i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _11: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _12: std::boxed::Box<[i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _13: [closure@ui/generics/generic-static-methods.rs:20:46: 20:50]; // in scope 0 at ui/generics/generic-static-methods.rs:20:46: 20:54
    let mut _14: &[i32; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _15: &std::vec::Vec<i32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _16: &[i32; 3];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _17: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _19: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _20: &[i32; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _22: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _23: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _24: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _25: &std::vec::Vec<i32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _26: &[i32; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _27: &[i32; 3];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _29: &[i32; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _30: *const [i32; 3];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }
    scope 2 {
        debug left_val => _15;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _16;          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _21: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 3 {
            debug kind => _21;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _9 = const 12_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _10 = const 4_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _11 = alloc::alloc::exchange_malloc(move _9, move _10) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = ShallowInitBox(move _11, [i32; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _30 = (((_12.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_30) = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _8 = move _12;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = move _8 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _7) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_6;                        // scope 0 at ui/generics/generic-static-methods.rs:20:32: 20:44
        _4 = _5;                         // scope 0 at ui/generics/generic-static-methods.rs:20:32: 20:44
        _3 = <Vec<i32> as vec_utils<i32>>::map_::<i32, [closure@ui/generics/generic-static-methods.rs:20:46: 20:50]>(move _4, move _13) -> [return: bb3, unwind: bb10]; // scope 0 at ui/generics/generic-static-methods.rs:20:16: 20:55
                                         // mir::Constant
                                         // + span: ui/generics/generic-static-methods.rs:20:16: 20:31
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>, [closure@ui/generics/generic-static-methods.rs:20:46: 20:50]) -> Vec<i32> {<Vec<i32> as vec_utils<i32>>::map_::<i32, [closure@ui/generics/generic-static-methods.rs:20:46: 20:50]>}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _29 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _14 = _29;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _14);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _15 = (_1.0: &std::vec::Vec<i32>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _16 = (_1.1: &[i32; 3]);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _19 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _20 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _18 = <Vec<i32> as PartialEq<[i32; 3]>>::eq(move _19, move _20) -> [return: bb4, unwind: bb9]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<i32>, &'b [i32; 3]) -> bool {<Vec<i32> as PartialEq<[i32; 3]>>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _17 = Not(move _18);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _17) -> [0: bb6, otherwise: bb5]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _21 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _25 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _27 = _16;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = _27;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _28 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _22 = core::panicking::assert_failed::<Vec<i32>, [i32; 3]>(move _23, move _24, move _26, move _28) -> bb9; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<i32>, &'b [i32; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<i32>, [i32; 3]>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_3) -> [return: bb7, unwind: bb10]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb7: {
        drop(_6) -> bb8;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb8: {
        return;                          // scope 0 at ui/generics/generic-static-methods.rs:21:2: 21:2
    }

    bb9 (cleanup): {
        drop(_3) -> bb10;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb10 (cleanup): {
        drop(_6) -> bb11;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/generics/generic-static-methods.rs:19:1: 21:2
    }
}

promoted[0] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [i32; 3];                // in scope 0 at ui/generics/generic-static-methods.rs:20:57: 20:64

    bb0: {
        _1 = [const 2_i32, const 3_i32, const 4_i32]; // scope 0 at ui/generics/generic-static-methods.rs:20:57: 20:64
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/generics/generic-static-methods.rs:20:46: 20:50], _2: &i32) -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/generics/generic-static-methods.rs:20:51: 20:51
    let _3: i32;                         // in scope 0 at ui/generics/generic-static-methods.rs:20:48: 20:49
    let mut _4: i32;                     // in scope 0 at ui/generics/generic-static-methods.rs:20:51: 20:52
    let mut _5: (i32, bool);             // in scope 0 at ui/generics/generic-static-methods.rs:20:51: 20:54
    scope 1 {
        debug x => _3;                   // in scope 1 at ui/generics/generic-static-methods.rs:20:48: 20:49
    }

    bb0: {
        _3 = (*_2);                      // scope 0 at ui/generics/generic-static-methods.rs:20:48: 20:49
        _4 = _3;                         // scope 1 at ui/generics/generic-static-methods.rs:20:51: 20:52
        _5 = CheckedAdd(_4, const 1_i32); // scope 1 at ui/generics/generic-static-methods.rs:20:51: 20:54
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, const 1_i32) -> bb1; // scope 1 at ui/generics/generic-static-methods.rs:20:51: 20:54
    }

    bb1: {
        _0 = move (_5.0: i32);           // scope 1 at ui/generics/generic-static-methods.rs:20:51: 20:54
        return;                          // scope 0 at ui/generics/generic-static-methods.rs:20:54: 20:54
    }
}
