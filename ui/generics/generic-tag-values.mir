// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: noption<isize>;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &isize;
    let mut _11: (&isize, &isize);
    let mut _12: &isize;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: isize;
    let mut _18: isize;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: Pair;
    let _25: ();
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let mut _28: &[core::fmt::rt::Argument<'_>];
    let _29: &[core::fmt::rt::Argument<'_>; 1];
    let _30: [core::fmt::rt::Argument<'_>; 1];
    let mut _31: core::fmt::rt::Argument<'_>;
    let _32: &isize;
    let _33: ();
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let _40: &isize;
    let mut _41: (&isize, &isize);
    let mut _42: &isize;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: isize;
    let mut _48: isize;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: (&isize, &isize);
    let mut _53: &isize;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: isize;
    let mut _59: isize;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug nop => _1;
        let _2: isize;
        let _22: noption<Pair>;
        scope 2 {
            debug n => _2;
            let _13: &isize;
            let _14: &isize;
            let mut _67: &isize;
            let mut _68: &[&str; 2];
            scope 3 {
                debug left_val => _13;
                debug right_val => _14;
                let _19: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _19;
                }
            }
        }
        scope 5 {
            debug nop2 => _22;
            let _24: Pair;
            scope 6 {
                debug t => _24;
                let _43: &isize;
                let _44: &isize;
                let _54: &isize;
                let _55: &isize;
                let mut _63: &isize;
                let mut _64: &isize;
                let mut _65: &[&str; 2];
                let mut _66: &[&str; 2];
                scope 7 {
                    debug left_val => _43;
                    debug right_val => _44;
                    let _49: core::panicking::AssertKind;
                    scope 8 {
                        debug kind => _49;
                    }
                }
                scope 9 {
                    debug left_val => _54;
                    debug right_val => _55;
                    let _60: core::panicking::AssertKind;
                    scope 10 {
                        debug kind => _60;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = noption::<isize>::some(const 5_isize);
        _2 = ((_1 as some).0: isize);
        _68 = const _;
        _5 = _68 as &[&str] (Pointer(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = _print(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _12 = &_2;
        _67 = const _;
        _11 = (move _12, _67);
        _13 = (_11.0: &isize);
        _14 = (_11.1: &isize);
        _17 = (*_13);
        _18 = (*_14);
        _16 = Eq(move _17, move _18);
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<isize, isize>(move _19, _13, _14, move _21) -> unwind continue;
    }

    bb5: {
        _23 = Pair { x: const 17_isize, y: const 42_isize };
        _22 = noption::<Pair>::some(move _23);
        _24 = move ((_22 as some).0: Pair);
        _66 = const _;
        _27 = _66 as &[&str] (Pointer(Unsize));
        _32 = &(_24.0: isize);
        _31 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_32) -> [return: bb6, unwind continue];
    }

    bb6: {
        _30 = [move _31];
        _29 = &_30;
        _28 = _29 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _26 = Arguments::<'_>::new_v1(move _27, move _28) -> [return: bb7, unwind continue];
    }

    bb7: {
        _25 = _print(move _26) -> [return: bb8, unwind continue];
    }

    bb8: {
        _65 = const _;
        _35 = _65 as &[&str] (Pointer(Unsize));
        _40 = &(_24.1: isize);
        _39 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_40) -> [return: bb9, unwind continue];
    }

    bb9: {
        _38 = [move _39];
        _37 = &_38;
        _36 = _37 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _34 = Arguments::<'_>::new_v1(move _35, move _36) -> [return: bb10, unwind continue];
    }

    bb10: {
        _33 = _print(move _34) -> [return: bb11, unwind continue];
    }

    bb11: {
        _42 = &(_24.0: isize);
        _64 = const _;
        _41 = (move _42, _64);
        _43 = (_41.0: &isize);
        _44 = (_41.1: &isize);
        _47 = (*_43);
        _48 = (*_44);
        _46 = Eq(move _47, move _48);
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<isize, isize>(move _49, _43, _44, move _51) -> unwind continue;
    }

    bb13: {
        _53 = &(_24.1: isize);
        _63 = const _;
        _52 = (move _53, _63);
        _54 = (_52.0: &isize);
        _55 = (_52.1: &isize);
        _58 = (*_54);
        _59 = (*_55);
        _57 = Eq(move _58, move _59);
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<isize, isize>(move _60, _54, _55, move _62) -> unwind continue;
    }

    bb15: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 42_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 17_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 5_isize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn noption::some(_1: T) -> noption<T> {
    let mut _0: noption<T>;

    bb0: {
        _0 = noption::<T>::some(move _1);
        return;
    }
}

// MIR FOR CTFE
fn noption::some(_1: T) -> noption<T> {
    let mut _0: noption<T>;

    bb0: {
        _0 = noption::<T>::some(move _1);
        return;
    }
}
