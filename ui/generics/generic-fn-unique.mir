// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: Box<T>) -> Box<T> {
    debug x => _1;
    let mut _0: std::boxed::Box<T>;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<i32>;
    let mut _2: std::boxed::Box<i32>;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &i32;
    let mut _12: *const i32;
    scope 1 {
        debug x => _1;
        let mut _11: &[&str; 2];
        let mut _13: *const ();
        let mut _14: usize;
        let mut _15: usize;
        let mut _16: usize;
        let mut _17: usize;
        let mut _18: bool;
    }

    bb0: {
        _2 = Box::<i32>::new(const 3_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = f::<i32>(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _11 = const _;
        _5 = _11 as &[&str] (Pointer(Unsize));
        _12 = (((_1.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _13 = _12 as *const () (PtrToPtr);
        _14 = _13 as usize (Transmute);
        _15 = AlignOf(i32);
        _16 = Sub(_15, const 1_usize);
        _17 = BitAnd(_14, _16);
        _18 = Eq(_17, const 0_usize);
        assert(_18, "misaligned pointer dereference: address must be a multiple of {} but is {}", _15, _14) -> [success: bb9, unwind unreachable];
    }

    bb3: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _3 = _print(move _4) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_1) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }

    bb9: {
        _10 = &(*_12);
        _9 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_10) -> [return: bb3, unwind: bb7];
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
