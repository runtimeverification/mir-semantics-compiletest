// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generics/generic-ivec-leak.rs:5:15: 5:15
    let _1: wrapper<std::vec::Vec<i32>>; // in scope 0 at ui/generics/generic-ivec-leak.rs:5:21: 5:23
    let mut _2: std::vec::Vec<i32>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _3: std::boxed::Box<[i32]>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: std::boxed::Box<[i32; 5]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::boxed::Box<[i32; 5]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: *const [i32; 5];         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug _w => _1;                  // in scope 1 at ui/generics/generic-ivec-leak.rs:5:21: 5:23
    }
    scope 2 {
    }

    bb0: {
        _5 = const 20_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = const 4_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [i32; 5]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = (((_8.0: std::ptr::Unique<[i32; 5]>).0: std::ptr::NonNull<[i32; 5]>).0: *const [i32; 5]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_9) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _4 = move _8;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = move _4 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _3) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = wrapper::<Vec<i32>>::wrapped(move _2); // scope 0 at ui/generics/generic-ivec-leak.rs:5:26: 5:63
        drop(_1) -> bb3;                 // scope 0 at ui/generics/generic-ivec-leak.rs:5:65: 5:66
    }

    bb3: {
        return;                          // scope 0 at ui/generics/generic-ivec-leak.rs:5:66: 5:66
    }
}

fn wrapper::wrapped(_1: T) -> wrapper<T> {
    let mut _0: wrapper<T>;              // return place in scope 0 at ui/generics/generic-ivec-leak.rs:3:19: 3:26

    bb0: {
        _0 = wrapper::<T>::wrapped(move _1); // scope 0 at ui/generics/generic-ivec-leak.rs:3:19: 3:26
        return;                          // scope 0 at ui/generics/generic-ivec-leak.rs:3:19: 3:26
    }
}

// MIR FOR CTFE
fn wrapper::wrapped(_1: T) -> wrapper<T> {
    let mut _0: wrapper<T>;              // return place in scope 0 at ui/generics/generic-ivec-leak.rs:3:19: 3:26

    bb0: {
        _0 = wrapper::<T>::wrapped(move _1); // scope 0 at ui/generics/generic-ivec-leak.rs:3:19: 3:26
        return;                          // scope 0 at ui/generics/generic-ivec-leak.rs:3:19: 3:26
    }
}
