// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn g(_1: X) -> X {
    debug x => _1;                       // in scope 0 at ui/generics/generic-derived-type.rs:2:9: 2:10
    let mut _0: X;                       // return place in scope 0 at ui/generics/generic-derived-type.rs:2:18: 2:19

    bb0: {
        _0 = move _1;                    // scope 0 at ui/generics/generic-derived-type.rs:2:29: 2:30
        return;                          // scope 0 at ui/generics/generic-derived-type.rs:2:33: 2:33
    }
}

fn <impl at ui/generics/generic-derived-type.rs:4:10: 4:15>::clone(_1: &Pair<T>) -> Pair<T> {
    debug self => _1;                    // in scope 0 at ui/generics/generic-derived-type.rs:4:10: 4:15
    let mut _0: Pair<T>;                 // return place in scope 0 at ui/generics/generic-derived-type.rs:4:10: 4:15
    let mut _2: T;                       // in scope 0 at ui/generics/generic-derived-type.rs:6:5: 6:9
    let mut _3: &T;                      // in scope 0 at ui/generics/generic-derived-type.rs:6:5: 6:9
    let _4: &T;                          // in scope 0 at ui/generics/generic-derived-type.rs:6:5: 6:9
    let mut _5: T;                       // in scope 0 at ui/generics/generic-derived-type.rs:7:5: 7:9
    let mut _6: &T;                      // in scope 0 at ui/generics/generic-derived-type.rs:7:5: 7:9
    let _7: &T;                          // in scope 0 at ui/generics/generic-derived-type.rs:7:5: 7:9

    bb0: {
        _4 = &((*_1).0: T);              // scope 0 at ui/generics/generic-derived-type.rs:6:5: 6:9
        _3 = _4;                         // scope 0 at ui/generics/generic-derived-type.rs:6:5: 6:9
        _2 = <T as Clone>::clone(move _3) -> bb1; // scope 0 at ui/generics/generic-derived-type.rs:6:5: 6:9
                                         // mir::Constant
                                         // + span: ui/generics/generic-derived-type.rs:6:5: 6:9
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &((*_1).1: T);              // scope 0 at ui/generics/generic-derived-type.rs:7:5: 7:9
        _6 = _7;                         // scope 0 at ui/generics/generic-derived-type.rs:7:5: 7:9
        _5 = <T as Clone>::clone(move _6) -> [return: bb2, unwind: bb3]; // scope 0 at ui/generics/generic-derived-type.rs:7:5: 7:9
                                         // mir::Constant
                                         // + span: ui/generics/generic-derived-type.rs:7:5: 7:9
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Pair::<T> { a: move _2, b: move _5 }; // scope 0 at ui/generics/generic-derived-type.rs:4:10: 4:15
        return;                          // scope 0 at ui/generics/generic-derived-type.rs:4:15: 4:15
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/generics/generic-derived-type.rs:4:14: 4:15
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/generics/generic-derived-type.rs:4:10: 4:15
    }
}

fn f(_1: T) -> Pair<T> {
    debug t => _1;                       // in scope 0 at ui/generics/generic-derived-type.rs:10:15: 10:16
    let mut _0: Pair<T>;                 // return place in scope 0 at ui/generics/generic-derived-type.rs:10:24: 10:31
    let _2: Pair<T>;                     // in scope 0 at ui/generics/generic-derived-type.rs:11:9: 11:10
    let mut _3: T;                       // in scope 0 at ui/generics/generic-derived-type.rs:11:31: 11:40
    let mut _4: &T;                      // in scope 0 at ui/generics/generic-derived-type.rs:11:31: 11:40
    let mut _5: T;                       // in scope 0 at ui/generics/generic-derived-type.rs:11:45: 11:46
    let mut _6: Pair<T>;                 // in scope 0 at ui/generics/generic-derived-type.rs:12:25: 12:26
    let mut _7: bool;                    // in scope 0 at ui/generics/generic-derived-type.rs:13:1: 13:2
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/generics/generic-derived-type.rs:11:9: 11:10
    }

    bb0: {
        _7 = const false;                // scope 0 at ui/generics/generic-derived-type.rs:11:9: 11:10
        _7 = const true;                 // scope 0 at ui/generics/generic-derived-type.rs:11:9: 11:10
        _4 = &_1;                        // scope 0 at ui/generics/generic-derived-type.rs:11:31: 11:40
        _3 = <T as Clone>::clone(move _4) -> [return: bb1, unwind: bb5]; // scope 0 at ui/generics/generic-derived-type.rs:11:31: 11:40
                                         // mir::Constant
                                         // + span: ui/generics/generic-derived-type.rs:11:33: 11:38
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = const false;                // scope 0 at ui/generics/generic-derived-type.rs:11:45: 11:46
        _5 = move _1;                    // scope 0 at ui/generics/generic-derived-type.rs:11:45: 11:46
        _2 = Pair::<T> { a: move _3, b: move _5 }; // scope 0 at ui/generics/generic-derived-type.rs:11:22: 11:47
        _6 = move _2;                    // scope 1 at ui/generics/generic-derived-type.rs:12:25: 12:26
        _0 = g::<Pair<T>>(move _6) -> [return: bb2, unwind: bb5]; // scope 1 at ui/generics/generic-derived-type.rs:12:12: 12:27
                                         // mir::Constant
                                         // + span: ui/generics/generic-derived-type.rs:12:12: 12:24
                                         // + literal: Const { ty: fn(Pair<T>) -> Pair<T> {g::<Pair<T>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generics/generic-derived-type.rs:13:2: 13:2
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/generics/generic-derived-type.rs:10:1: 13:2
    }

    bb4 (cleanup): {
        drop(_1) -> bb3;                 // scope 0 at ui/generics/generic-derived-type.rs:13:1: 13:2
    }

    bb5 (cleanup): {
        switchInt(_7) -> [0: bb3, otherwise: bb4]; // scope 0 at ui/generics/generic-derived-type.rs:13:1: 13:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generics/generic-derived-type.rs:15:15: 15:15
    let _1: Pair<isize>;                 // in scope 0 at ui/generics/generic-derived-type.rs:16:9: 16:10
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/generics/generic-derived-type.rs:17:14: 17:18
    let mut _5: &[&str; 2];              // in scope 0 at ui/generics/generic-derived-type.rs:17:14: 17:18
    let _6: &[&str; 2];                  // in scope 0 at ui/generics/generic-derived-type.rs:17:14: 17:18
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/generics/generic-derived-type.rs:17:20: 17:23
    let mut _12: &isize;                 // in scope 0 at ui/generics/generic-derived-type.rs:17:20: 17:23
    let _13: &isize;                     // in scope 0 at ui/generics/generic-derived-type.rs:17:20: 17:23
    let _14: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _15: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _16: &[&str];                // in scope 0 at ui/generics/generic-derived-type.rs:18:14: 18:18
    let mut _17: &[&str; 2];             // in scope 0 at ui/generics/generic-derived-type.rs:18:14: 18:18
    let _18: &[&str; 2];                 // in scope 0 at ui/generics/generic-derived-type.rs:18:14: 18:18
    let mut _19: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _20: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _21: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _22: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _23: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/generics/generic-derived-type.rs:18:20: 18:23
    let mut _24: &isize;                 // in scope 0 at ui/generics/generic-derived-type.rs:18:20: 18:23
    let _25: &isize;                     // in scope 0 at ui/generics/generic-derived-type.rs:18:20: 18:23
    let mut _26: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _27: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _28: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _33: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _34: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _36: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _37: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _38: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _39: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _40: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _41: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _43: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _44: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _45: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _48: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _49: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _50: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _51: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _53: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _54: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _55: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _56: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _57: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _58: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _59: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug b => _1;                   // in scope 1 at ui/generics/generic-derived-type.rs:16:9: 16:10
        let _29: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _30: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _46: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _47: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _60: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _61: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _62: &[&str; 2];         // in scope 1 at ui/generics/generic-derived-type.rs:18:14: 18:18
        let mut _63: &[&str; 2];         // in scope 1 at ui/generics/generic-derived-type.rs:17:14: 17:18
        scope 2 {
            debug left_val => _29;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _30;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _35: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _35;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _46;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _47;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _52: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _52;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = f::<isize>(const 10_isize) -> bb1; // scope 0 at ui/generics/generic-derived-type.rs:16:13: 16:27
                                         // mir::Constant
                                         // + span: ui/generics/generic-derived-type.rs:16:13: 16:23
                                         // + literal: Const { ty: fn(isize) -> Pair<isize> {f::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        _63 = const _;                   // scope 1 at ui/generics/generic-derived-type.rs:17:14: 17:18
                                         // mir::Constant
                                         // + span: ui/generics/generic-derived-type.rs:17:14: 17:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[3])) }
        _6 = _63;                        // scope 1 at ui/generics/generic-derived-type.rs:17:14: 17:18
        _5 = _6;                         // scope 1 at ui/generics/generic-derived-type.rs:17:14: 17:18
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 1 at ui/generics/generic-derived-type.rs:17:14: 17:18
        _13 = &(_1.0: isize);            // scope 1 at ui/generics/generic-derived-type.rs:17:20: 17:23
        _12 = _13;                       // scope 1 at ui/generics/generic-derived-type.rs:17:20: 17:23
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _12) -> bb2; // scope 1 at ui/generics/generic-derived-type.rs:17:20: 17:23
                                         // mir::Constant
                                         // + span: ui/generics/generic-derived-type.rs:17:20: 17:23
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = [move _11];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb3; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = _print(move _3) -> bb4;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        _62 = const _;                   // scope 1 at ui/generics/generic-derived-type.rs:18:14: 18:18
                                         // mir::Constant
                                         // + span: ui/generics/generic-derived-type.rs:18:14: 18:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[2])) }
        _18 = _62;                       // scope 1 at ui/generics/generic-derived-type.rs:18:14: 18:18
        _17 = _18;                       // scope 1 at ui/generics/generic-derived-type.rs:18:14: 18:18
        _16 = move _17 as &[&str] (Pointer(Unsize)); // scope 1 at ui/generics/generic-derived-type.rs:18:14: 18:18
        _25 = &(_1.1: isize);            // scope 1 at ui/generics/generic-derived-type.rs:18:20: 18:23
        _24 = _25;                       // scope 1 at ui/generics/generic-derived-type.rs:18:20: 18:23
        _23 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _24) -> bb5; // scope 1 at ui/generics/generic-derived-type.rs:18:20: 18:23
                                         // mir::Constant
                                         // + span: ui/generics/generic-derived-type.rs:18:20: 18:23
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb5: {
        _22 = [move _23];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _21 = &_22;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = _21;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _19 = move _20 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _15 = Arguments::<'_>::new_v1(move _16, move _19) -> bb6; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = _print(move _15) -> bb7;   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb7: {
        _27 = &(_1.0: isize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _61 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[1])) }
        _28 = _61;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _26 = (move _27, move _28);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_26.0: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_26.1: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _33 = (*_29);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _34 = const 10_isize;            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _32 = Eq(move _33, move _34);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _31 = Not(move _32);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _31) -> [0: bb9, otherwise: bb8]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _35 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = _29;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _39;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _30;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = _41;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _36 = core::panicking::assert_failed::<isize, isize>(move _37, move _38, move _40, move _42); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb9: {
        _44 = &(_1.1: isize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _60 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _45 = _60;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _43 = (move _44, move _45);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _46 = (_43.0: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _47 = (_43.1: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _50 = (*_46);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _51 = const 10_isize;            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _49 = Eq(move _50, move _51);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _48 = Not(move _49);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _48) -> [0: bb11, otherwise: bb10]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _52 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _54 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _56 = _46;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _55 = _56;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _58 = _47;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _57 = _58;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _59 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _53 = core::panicking::assert_failed::<isize, isize>(move _54, move _55, move _57, move _59); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb11: {
        return;                          // scope 0 at ui/generics/generic-derived-type.rs:21:2: 21:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/generics/generic-derived-type.rs:20:21: 20:23

    bb0: {
        _1 = const 10_isize;             // scope 0 at ui/generics/generic-derived-type.rs:20:21: 20:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/generics/generic-derived-type.rs:19:21: 19:23

    bb0: {
        _1 = const 10_isize;             // scope 0 at ui/generics/generic-derived-type.rs:19:21: 19:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/generics/generic-derived-type.rs:18:14: 18:18
    let mut _1: [&str; 2];               // in scope 0 at ui/generics/generic-derived-type.rs:18:14: 18:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/generics/generic-derived-type.rs:18:14: 18:18
                                         // mir::Constant
                                         // + span: ui/generics/generic-derived-type.rs:18:14: 18:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/generics/generic-derived-type.rs:18:14: 18:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/generics/generic-derived-type.rs:18:14: 18:18
        return;                          // scope 0 at ui/generics/generic-derived-type.rs:18:14: 18:18
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/generics/generic-derived-type.rs:17:14: 17:18
    let mut _1: [&str; 2];               // in scope 0 at ui/generics/generic-derived-type.rs:17:14: 17:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/generics/generic-derived-type.rs:17:14: 17:18
                                         // mir::Constant
                                         // + span: ui/generics/generic-derived-type.rs:17:14: 17:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/generics/generic-derived-type.rs:17:14: 17:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/generics/generic-derived-type.rs:17:14: 17:18
        return;                          // scope 0 at ui/generics/generic-derived-type.rs:17:14: 17:18
    }
}
