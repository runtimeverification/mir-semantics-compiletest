// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn g(_1: X) -> X {
    debug x => _1;
    let mut _0: X;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn <impl at ui/generics/generic-derived-type.rs:4:10: 4:15>::clone(_1: &Pair<T>) -> Pair<T> {
    debug self => _1;
    let mut _0: Pair<T>;
    let mut _2: T;
    let _3: &T;
    let mut _4: T;
    let _5: &T;

    bb0: {
        _3 = &((*_1).0: T);
        _2 = <T as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: T);
        _4 = <T as Clone>::clone(_5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = Pair::<T> { a: move _2, b: move _4 };
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn f(_1: T) -> Pair<T> {
    debug t => _1;
    let mut _0: Pair<T>;
    let _2: Pair<T>;
    let mut _3: T;
    let mut _4: &T;
    let mut _5: T;
    let mut _6: bool;
    scope 1 {
        debug x => _2;
    }

    bb0: {
        _6 = const false;
        _6 = const true;
        _4 = &_1;
        _3 = <T as Clone>::clone(move _4) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _6 = const false;
        _5 = move _1;
        _2 = Pair::<T> { a: move _3, b: move _5 };
        _0 = g::<Pair<T>>(move _2) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb5 (cleanup): {
        switchInt(_6) -> [0: bb3, otherwise: bb4];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Pair<isize>;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &isize;
    let _10: ();
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &isize;
    let mut _18: (&isize, &isize);
    let mut _19: &isize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: isize;
    let mut _25: isize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&isize, &isize);
    let mut _30: &isize;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: isize;
    let mut _36: isize;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug b => _1;
        let _20: &isize;
        let _21: &isize;
        let _31: &isize;
        let _32: &isize;
        let mut _40: &isize;
        let mut _41: &isize;
        let mut _42: &[&str; 2];
        let mut _43: &[&str; 2];
        scope 2 {
            debug left_val => _20;
            debug right_val => _21;
            let _26: core::panicking::AssertKind;
            scope 3 {
                debug kind => _26;
            }
        }
        scope 4 {
            debug left_val => _31;
            debug right_val => _32;
            let _37: core::panicking::AssertKind;
            scope 5 {
                debug kind => _37;
            }
        }
    }

    bb0: {
        _1 = f::<isize>(const 10_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _43 = const _;
        _4 = _43 as &[&str] (Pointer(Unsize));
        _9 = &(_1.0: isize);
        _8 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _2 = _print(move _3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _42 = const _;
        _12 = _42 as &[&str] (Pointer(Unsize));
        _17 = &(_1.1: isize);
        _16 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_17) -> [return: bb5, unwind continue];
    }

    bb5: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        _10 = _print(move _11) -> [return: bb7, unwind continue];
    }

    bb7: {
        _19 = &(_1.0: isize);
        _41 = const _;
        _18 = (move _19, _41);
        _20 = (_18.0: &isize);
        _21 = (_18.1: &isize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<isize, isize>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb9: {
        _30 = &(_1.1: isize);
        _40 = const _;
        _29 = (move _30, _40);
        _31 = (_29.0: &isize);
        _32 = (_29.1: &isize);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<isize, isize>(move _37, _31, _32, move _39) -> unwind continue;
    }

    bb11: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
