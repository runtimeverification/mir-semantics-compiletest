// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn scalar_layout() -> () {
    let mut _0: ();
    let mut _2: (&*const (), &*const ());
    let mut _3: &*const ();
    let _4: *const ();
    let mut _5: &[()];
    let mut _6: &[(); 13];
    let mut _7: &*const ();
    let _8: *const ();
    let mut _9: &[()];
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: *const ();
    let mut _15: *const ();
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: &(u8, [(); 13]);
    scope 1 {
        debug sized => const _;
        let _1: &(u8, [()]);
        scope 2 {
            debug unsize => _1;
            let _10: &*const ();
            let _11: &*const ();
            scope 3 {
                debug left_val => _10;
                debug right_val => _11;
                let _16: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _16;
                }
            }
        }
    }

    bb0: {
        _19 = const _;
        _1 = _19 as &(u8, [()]) (Pointer(Unsize));
        _6 = &((*_19).1: [(); 13]);
        _5 = move _6 as &[()] (Pointer(Unsize));
        _4 = core::slice::<impl [()]>::as_ptr(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _9 = &((*_1).1: [()]);
        _8 = core::slice::<impl [()]>::as_ptr(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = &_8;
        _2 = (move _3, move _7);
        _10 = (_2.0: &*const ());
        _11 = (_2.1: &*const ());
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<*const (), *const ()>(move _16, _10, _11, move _18) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in scalar_layout: &(u8, [(); 13]) = {
    let mut _0: &(u8, [(); 13]);
    let mut _1: (u8, [(); 13]);
    let mut _2: [(); 13];
    let mut _3: ();

    bb0: {
        _3 = ();
        _2 = [move _3; 13];
        _1 = (const 123_u8, move _2);
        _0 = &_1;
        return;
    }
}

scalar_layout::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 13_usize;
        return;
    }
}

scalar_layout::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 13_usize;
        return;
    }
}

fn scalarpair_layout() -> () {
    let mut _0: ();
    let mut _2: (&*const (), &*const ());
    let mut _3: &*const ();
    let _4: *const ();
    let mut _5: &[()];
    let mut _6: &[(); 13];
    let mut _7: &*const ();
    let _8: *const ();
    let mut _9: &[()];
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: *const ();
    let mut _15: *const ();
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: &(u8, u16, [(); 13]);
    scope 1 {
        debug sized => const _;
        let _1: &(u8, u16, [()]);
        scope 2 {
            debug unsize => _1;
            let _10: &*const ();
            let _11: &*const ();
            scope 3 {
                debug left_val => _10;
                debug right_val => _11;
                let _16: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _16;
                }
            }
        }
    }

    bb0: {
        _19 = const _;
        _1 = _19 as &(u8, u16, [()]) (Pointer(Unsize));
        _6 = &((*_19).2: [(); 13]);
        _5 = move _6 as &[()] (Pointer(Unsize));
        _4 = core::slice::<impl [()]>::as_ptr(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _9 = &((*_1).2: [()]);
        _8 = core::slice::<impl [()]>::as_ptr(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = &_8;
        _2 = (move _3, move _7);
        _10 = (_2.0: &*const ());
        _11 = (_2.1: &*const ());
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<*const (), *const ()>(move _16, _10, _11, move _18) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in scalarpair_layout: &(u8, u16, [(); 13]) = {
    let mut _0: &(u8, u16, [(); 13]);
    let mut _1: (u8, u16, [(); 13]);
    let mut _2: [(); 13];
    let mut _3: ();

    bb0: {
        _3 = ();
        _2 = [move _3; 13];
        _1 = (const 123_u8, const 456_u16, move _2);
        _0 = &_1;
        return;
    }
}

scalarpair_layout::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 13_usize;
        return;
    }
}

scalarpair_layout::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 13_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = scalar_layout() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = scalarpair_layout() -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}
