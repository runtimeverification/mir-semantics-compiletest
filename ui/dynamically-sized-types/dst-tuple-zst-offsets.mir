// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn scalar_layout() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:7:20: 7:20
    let _1: &(u8, [(); 13]);             // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:9: 8:14
    let _2: &(u8, [(); 13]);             // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:34: 8:50
    let mut _4: &(u8, [(); 13]);         // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:9:31: 9:36
    let mut _5: (&*const (), &*const ()); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &*const ();              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _7: *const ();                   // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:10:16: 10:32
    let mut _8: &[()];                   // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:10:16: 10:32
    let mut _9: &[(); 13];               // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:10:16: 10:32
    let mut _10: &*const ();             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _11: *const ();                  // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:10:34: 10:51
    let mut _12: &[()];                  // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:10:34: 10:51
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _17: *const ();              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _18: *const ();              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _20: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _21: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _22: &*const ();             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _23: &*const ();                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _24: &*const ();             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _25: &*const ();                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _27: &(u8, [(); 13]);        // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:34: 8:50
    scope 1 {
        debug sized => _1;               // in scope 1 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:9: 8:14
        let _3: &(u8, [()]);             // in scope 1 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:9:9: 9:15
        scope 2 {
            debug unsize => _3;          // in scope 2 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:9:9: 9:15
            let _13: &*const ();         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _14: &*const ();         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
                debug left_val => _13;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _14;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _19: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _19;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _27 = const _;                   // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:34: 8:50
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:34: 8:50
                                         // + literal: Const { ty: &(u8, [(); 13]), val: Unevaluated(scalar_layout, [], Some(promoted[0])) }
        _2 = _27;                        // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:34: 8:50
        _1 = _2;                         // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:34: 8:50
        _4 = _1;                         // scope 1 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:9:31: 9:36
        _3 = move _4 as &(u8, [()]) (Pointer(Unsize)); // scope 1 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:9:31: 9:36
        _9 = &((*_1).1: [(); 13]);       // scope 2 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:10:16: 10:32
        _8 = move _9 as &[()] (Pointer(Unsize)); // scope 2 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:10:16: 10:32
        _7 = core::slice::<impl [()]>::as_ptr(move _8) -> bb1; // scope 2 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:10:16: 10:32
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:10:24: 10:30
                                         // + literal: Const { ty: for<'a> fn(&'a [()]) -> *const () {core::slice::<impl [()]>::as_ptr}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _12 = &((*_3).1: [()]);          // scope 2 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:10:34: 10:51
        _11 = core::slice::<impl [()]>::as_ptr(move _12) -> bb2; // scope 2 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:10:34: 10:51
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:10:43: 10:49
                                         // + literal: Const { ty: for<'a> fn(&'a [()]) -> *const () {core::slice::<impl [()]>::as_ptr}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = &_11;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _10);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _13 = (_5.0: &*const ());        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _14 = (_5.1: &*const ());        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _17 = (*_13);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _18 = (*_14);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _16 = Eq(move _17, move _18);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _15 = Not(move _16);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _15) -> [0: bb4, otherwise: bb3]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _19 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = _13;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _14;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = _25;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _20 = core::panicking::assert_failed::<*const (), *const ()>(move _21, move _22, move _24, move _26); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a *const (), &'b *const (), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<*const (), *const ()>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:11:2: 11:2
    }
}

promoted[0] in scalar_layout: &(u8, [(); 13]) = {
    let mut _0: &(u8, [(); 13]);         // return place in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:34: 8:50
    let mut _1: (u8, [(); 13]);          // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:35: 8:50
    let mut _2: [(); 13];                // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:41: 8:49
    let mut _3: ();                      // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:42: 8:44

    bb0: {
        _3 = ();                         // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:42: 8:44
        _2 = [move _3; 13];              // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:41: 8:49
        _1 = (const 123_u8, move _2);    // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:35: 8:50
        _0 = &_1;                        // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:34: 8:50
        return;                          // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:34: 8:50
    }
}

scalar_layout::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:46: 8:48

    bb0: {
        _0 = const 13_usize;             // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:46: 8:48
        return;                          // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:46: 8:48
    }
}

scalar_layout::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:27: 8:29

    bb0: {
        _0 = const 13_usize;             // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:27: 8:29
        return;                          // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:8:27: 8:29
    }
}

fn scalarpair_layout() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:13:24: 13:24
    let _1: &(u8, u16, [(); 13]);        // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:9: 14:14
    let _2: &(u8, u16, [(); 13]);        // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:39: 14:60
    let mut _4: &(u8, u16, [(); 13]);    // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:15:36: 15:41
    let mut _5: (&*const (), &*const ()); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &*const ();              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _7: *const ();                   // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:16:16: 16:32
    let mut _8: &[()];                   // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:16:16: 16:32
    let mut _9: &[(); 13];               // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:16:16: 16:32
    let mut _10: &*const ();             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _11: *const ();                  // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:16:34: 16:51
    let mut _12: &[()];                  // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:16:34: 16:51
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _17: *const ();              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _18: *const ();              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _20: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _21: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _22: &*const ();             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _23: &*const ();                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _24: &*const ();             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _25: &*const ();                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _27: &(u8, u16, [(); 13]);   // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:39: 14:60
    scope 1 {
        debug sized => _1;               // in scope 1 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:9: 14:14
        let _3: &(u8, u16, [()]);        // in scope 1 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:15:9: 15:15
        scope 2 {
            debug unsize => _3;          // in scope 2 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:15:9: 15:15
            let _13: &*const ();         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _14: &*const ();         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
                debug left_val => _13;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _14;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _19: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _19;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _27 = const _;                   // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:39: 14:60
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:39: 14:60
                                         // + literal: Const { ty: &(u8, u16, [(); 13]), val: Unevaluated(scalarpair_layout, [], Some(promoted[0])) }
        _2 = _27;                        // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:39: 14:60
        _1 = _2;                         // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:39: 14:60
        _4 = _1;                         // scope 1 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:15:36: 15:41
        _3 = move _4 as &(u8, u16, [()]) (Pointer(Unsize)); // scope 1 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:15:36: 15:41
        _9 = &((*_1).2: [(); 13]);       // scope 2 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:16:16: 16:32
        _8 = move _9 as &[()] (Pointer(Unsize)); // scope 2 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:16:16: 16:32
        _7 = core::slice::<impl [()]>::as_ptr(move _8) -> bb1; // scope 2 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:16:16: 16:32
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:16:24: 16:30
                                         // + literal: Const { ty: for<'a> fn(&'a [()]) -> *const () {core::slice::<impl [()]>::as_ptr}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _12 = &((*_3).2: [()]);          // scope 2 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:16:34: 16:51
        _11 = core::slice::<impl [()]>::as_ptr(move _12) -> bb2; // scope 2 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:16:34: 16:51
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:16:43: 16:49
                                         // + literal: Const { ty: for<'a> fn(&'a [()]) -> *const () {core::slice::<impl [()]>::as_ptr}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = &_11;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _10);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _13 = (_5.0: &*const ());        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _14 = (_5.1: &*const ());        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _17 = (*_13);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _18 = (*_14);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _16 = Eq(move _17, move _18);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _15 = Not(move _16);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _15) -> [0: bb4, otherwise: bb3]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _19 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = _13;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _14;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = _25;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _20 = core::panicking::assert_failed::<*const (), *const ()>(move _21, move _22, move _24, move _26); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a *const (), &'b *const (), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<*const (), *const ()>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:17:2: 17:2
    }
}

promoted[0] in scalarpair_layout: &(u8, u16, [(); 13]) = {
    let mut _0: &(u8, u16, [(); 13]);    // return place in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:39: 14:60
    let mut _1: (u8, u16, [(); 13]);     // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:40: 14:60
    let mut _2: [(); 13];                // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:51: 14:59
    let mut _3: ();                      // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:52: 14:54

    bb0: {
        _3 = ();                         // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:52: 14:54
        _2 = [move _3; 13];              // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:51: 14:59
        _1 = (const 123_u8, const 456_u16, move _2); // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:40: 14:60
        _0 = &_1;                        // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:39: 14:60
        return;                          // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:39: 14:60
    }
}

scalarpair_layout::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:56: 14:58

    bb0: {
        _0 = const 13_usize;             // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:56: 14:58
        return;                          // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:56: 14:58
    }
}

scalarpair_layout::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:32: 14:34

    bb0: {
        _0 = const 13_usize;             // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:32: 14:34
        return;                          // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:14:32: 14:34
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:19:15: 19:15
    let _1: ();                          // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:20:5: 20:20
    let _2: ();                          // in scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:21:5: 21:24

    bb0: {
        _1 = scalar_layout() -> bb1;     // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:20:5: 20:20
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:20:5: 20:18
                                         // + literal: Const { ty: fn() {scalar_layout}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = scalarpair_layout() -> bb2; // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:21:5: 21:24
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:21:5: 21:22
                                         // + literal: Const { ty: fn() {scalarpair_layout}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/dynamically-sized-types/dst-tuple-zst-offsets.rs:22:2: 22:2
    }
}
