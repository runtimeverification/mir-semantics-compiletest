// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dynamically-sized-types/dst-field-align.rs:12:1: 12:19>::get(_1: &usize) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Baz<usize>;
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let _4: usize;
    let mut _5: &usize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let _16: &Baz<usize>;
    let mut _17: (&usize, &usize);
    let mut _18: &usize;
    let _19: usize;
    let mut _20: &dyn Bar;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: usize;
    let mut _26: usize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&usize, &usize);
    let mut _32: &usize;
    let _33: usize;
    let mut _34: &usize;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: usize;
    let mut _40: usize;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: *const usize;
    let _46: &usize;
    let _48: &Foo<usize>;
    let mut _50: *const dyn Bar;
    let _51: &dyn Bar;
    let mut _52: (&usize, &usize);
    let mut _53: &usize;
    let _54: usize;
    let mut _55: &dyn Bar;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: usize;
    let mut _61: usize;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: (&*const u8, &*const u8);
    let mut _66: &*const u8;
    let mut _67: &*const u8;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: *const u8;
    let mut _73: *const u8;
    let _75: !;
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _78: Foo<usize>;
    let mut _79: (&usize, &usize);
    let mut _80: &usize;
    let _81: usize;
    let mut _82: &usize;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: usize;
    let mut _88: usize;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let _93: &Foo<Foo<usize>>;
    let mut _94: (&usize, &usize);
    let mut _95: &usize;
    let _96: usize;
    let mut _97: &dyn Bar;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: usize;
    let mut _103: usize;
    let _105: !;
    let mut _106: std::option::Option<std::fmt::Arguments<'_>>;
    let _109: &Foo<usize>;
    let mut _111: (&usize, &usize);
    let mut _112: &usize;
    let _113: usize;
    let mut _116: bool;
    let mut _117: bool;
    let mut _118: usize;
    let mut _119: usize;
    let _121: !;
    let mut _122: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _124: std::boxed::Box<usize>;
    let mut _125: Baz<[i32; 4]>;
    let mut _126: [i32; 4];
    let mut _127: (&[i32; 4], &[i32; 4]);
    let mut _128: &[i32; 4];
    let mut _131: bool;
    let mut _132: bool;
    let _134: !;
    let mut _135: std::option::Option<std::fmt::Arguments<'_>>;
    let _137: &HasDrop<Baz<[i32; 4]>>;
    let mut _138: (&&[i32; 4], &&[i32]);
    let mut _139: &&[i32];
    let _140: &[i32];
    let mut _143: bool;
    let mut _144: bool;
    let _146: !;
    let mut _147: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug b => _1;
        let _6: &usize;
        let _7: &usize;
        let _15: &Baz<dyn Bar>;
        let mut _156: &usize;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug b => _15;
            let _21: &usize;
            let _22: &usize;
            let _30: Foo<usize>;
            let mut _155: &usize;
            scope 5 {
                debug left_val => _21;
                debug right_val => _22;
                let _27: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _27;
                }
            }
            scope 7 {
                debug f => _30;
                let _35: &usize;
                let _36: &usize;
                let _44: *const u8;
                let mut _154: &usize;
                scope 8 {
                    debug left_val => _35;
                    debug right_val => _36;
                    let _41: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _41;
                    }
                }
                scope 10 {
                    debug ptr1 => _44;
                    let _47: &Foo<dyn Bar>;
                    scope 11 {
                        debug f => _47;
                        let _49: *const u8;
                        scope 12 {
                            debug ptr2 => _49;
                            let _56: &usize;
                            let _57: &usize;
                            let _68: &*const u8;
                            let _69: &*const u8;
                            let _77: Foo<Foo<usize>>;
                            let mut _153: &usize;
                            scope 13 {
                                debug left_val => _56;
                                debug right_val => _57;
                                let _62: core::panicking::AssertKind;
                                scope 14 {
                                    debug kind => _62;
                                }
                            }
                            scope 15 {
                                debug left_val => _68;
                                debug right_val => _69;
                                let _74: core::panicking::AssertKind;
                                scope 16 {
                                    debug kind => _74;
                                }
                            }
                            scope 17 {
                                debug f => _77;
                                let _83: &usize;
                                let _84: &usize;
                                let _92: &Foo<Foo<dyn Bar>>;
                                let mut _152: &usize;
                                scope 18 {
                                    debug left_val => _83;
                                    debug right_val => _84;
                                    let _89: core::panicking::AssertKind;
                                    scope 19 {
                                        debug kind => _89;
                                    }
                                }
                                scope 20 {
                                    debug f => _92;
                                    let _98: &usize;
                                    let _99: &usize;
                                    let _107: Foo<usize>;
                                    let mut _151: &usize;
                                    scope 21 {
                                        debug left_val => _98;
                                        debug right_val => _99;
                                        let _104: core::panicking::AssertKind;
                                        scope 22 {
                                            debug kind => _104;
                                        }
                                    }
                                    scope 23 {
                                        debug f => _107;
                                        let _108: &Foo<dyn Bar>;
                                        scope 24 {
                                            debug f => _108;
                                            let _110: &dyn Bar;
                                            scope 25 {
                                                debug bar => _110;
                                                let _114: &usize;
                                                let _115: &usize;
                                                let _123: HasDrop<Baz<[i32; 4]>>;
                                                let mut _150: &usize;
                                                scope 26 {
                                                    debug left_val => _114;
                                                    debug right_val => _115;
                                                    let _120: core::panicking::AssertKind;
                                                    scope 27 {
                                                        debug kind => _120;
                                                    }
                                                }
                                                scope 28 {
                                                    debug d => _123;
                                                    let _129: &[i32; 4];
                                                    let _130: &[i32; 4];
                                                    let _136: &HasDrop<Baz<[i32]>>;
                                                    let mut _149: &[i32; 4];
                                                    scope 29 {
                                                        debug left_val => _129;
                                                        debug right_val => _130;
                                                        let _133: core::panicking::AssertKind;
                                                        scope 30 {
                                                            debug kind => _133;
                                                        }
                                                    }
                                                    scope 31 {
                                                        debug d => _136;
                                                        let _141: &&[i32; 4];
                                                        let _142: &&[i32];
                                                        let mut _148: &&[i32; 4];
                                                        scope 32 {
                                                            debug left_val => _141;
                                                            debug right_val => _142;
                                                            let _145: core::panicking::AssertKind;
                                                            scope 33 {
                                                                debug kind => _145;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Baz::<usize> { a: const 7_usize };
        _5 = &(_1.0: usize);
        _4 = <usize as Bar>::get(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _156 = const _;
        _2 = (move _3, _156);
        _6 = (_2.0: &usize);
        _7 = (_2.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _16 = &_1;
        _15 = _16 as &Baz<dyn Bar> (Pointer(Unsize));
        _20 = &((*_15).0: dyn Bar);
        _19 = <dyn Bar as Bar>::get(move _20) -> [return: bb4, unwind continue];
    }

    bb4: {
        _18 = &_19;
        _155 = const _;
        _17 = (move _18, _155);
        _21 = (_17.0: &usize);
        _22 = (_17.1: &usize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<usize, usize>(move _27, _21, _22, move _29) -> unwind continue;
    }

    bb6: {
        _30 = Foo::<usize> { a: const 0_u16, b: const 11_usize };
        _34 = &(_30.1: usize);
        _33 = <usize as Bar>::get(move _34) -> [return: bb7, unwind continue];
    }

    bb7: {
        _32 = &_33;
        _154 = const _;
        _31 = (move _32, _154);
        _35 = (_31.0: &usize);
        _36 = (_31.1: &usize);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<usize, usize>(move _41, _35, _36, move _43) -> unwind continue;
    }

    bb9: {
        _46 = &(_30.1: usize);
        _45 = &raw const (*_46);
        _44 = _45 as *const u8 (PtrToPtr);
        _48 = &_30;
        _47 = _48 as &Foo<dyn Bar> (Pointer(Unsize));
        _51 = &((*_47).1: dyn Bar);
        _50 = &raw const (*_51);
        _49 = _50 as *const u8 (PtrToPtr);
        _55 = &((*_47).1: dyn Bar);
        _54 = <dyn Bar as Bar>::get(move _55) -> [return: bb10, unwind continue];
    }

    bb10: {
        _53 = &_54;
        _153 = const _;
        _52 = (move _53, _153);
        _56 = (_52.0: &usize);
        _57 = (_52.1: &usize);
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<usize, usize>(move _62, _56, _57, move _64) -> unwind continue;
    }

    bb12: {
        _66 = &_44;
        _67 = &_49;
        _65 = (move _66, move _67);
        _68 = (_65.0: &*const u8);
        _69 = (_65.1: &*const u8);
        _72 = (*_68);
        _73 = (*_69);
        _71 = Eq(move _72, move _73);
        _70 = Not(move _71);
        switchInt(move _70) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _74 = core::panicking::AssertKind::Eq;
        _76 = Option::<Arguments<'_>>::None;
        _75 = core::panicking::assert_failed::<*const u8, *const u8>(move _74, _68, _69, move _76) -> unwind continue;
    }

    bb14: {
        _78 = Foo::<usize> { a: const 1_u16, b: const 17_usize };
        _77 = Foo::<Foo<usize>> { a: const 0_u16, b: move _78 };
        _82 = &((_77.1: Foo<usize>).1: usize);
        _81 = <usize as Bar>::get(move _82) -> [return: bb15, unwind continue];
    }

    bb15: {
        _80 = &_81;
        _152 = const _;
        _79 = (move _80, _152);
        _83 = (_79.0: &usize);
        _84 = (_79.1: &usize);
        _87 = (*_83);
        _88 = (*_84);
        _86 = Eq(move _87, move _88);
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<usize, usize>(move _89, _83, _84, move _91) -> unwind continue;
    }

    bb17: {
        _93 = &_77;
        _92 = _93 as &Foo<Foo<dyn Bar>> (Pointer(Unsize));
        _97 = &(((*_92).1: Foo<dyn Bar>).1: dyn Bar);
        _96 = <dyn Bar as Bar>::get(move _97) -> [return: bb18, unwind continue];
    }

    bb18: {
        _95 = &_96;
        _151 = const _;
        _94 = (move _95, _151);
        _98 = (_94.0: &usize);
        _99 = (_94.1: &usize);
        _102 = (*_98);
        _103 = (*_99);
        _101 = Eq(move _102, move _103);
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _104 = core::panicking::AssertKind::Eq;
        _106 = Option::<Arguments<'_>>::None;
        _105 = core::panicking::assert_failed::<usize, usize>(move _104, _98, _99, move _106) -> unwind continue;
    }

    bb20: {
        _107 = Foo::<usize> { a: const 0_u16, b: const 11_usize };
        _109 = &_107;
        _108 = _109 as &Foo<dyn Bar> (Pointer(Unsize));
        _110 = &((*_108).1: dyn Bar);
        _113 = <dyn Bar as Bar>::get(_110) -> [return: bb21, unwind continue];
    }

    bb21: {
        _112 = &_113;
        _150 = const _;
        _111 = (move _112, _150);
        _114 = (_111.0: &usize);
        _115 = (_111.1: &usize);
        _118 = (*_114);
        _119 = (*_115);
        _117 = Eq(move _118, move _119);
        _116 = Not(move _117);
        switchInt(move _116) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _120 = core::panicking::AssertKind::Eq;
        _122 = Option::<Arguments<'_>>::None;
        _121 = core::panicking::assert_failed::<usize, usize>(move _120, _114, _115, move _122) -> unwind continue;
    }

    bb23: {
        _124 = Box::<usize>::new(const 0_usize) -> [return: bb24, unwind continue];
    }

    bb24: {
        _126 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _125 = Baz::<[i32; 4]> { a: move _126 };
        _123 = HasDrop::<Baz<[i32; 4]>> { ptr: move _124, data: move _125 };
        _149 = const _;
        _128 = &((_123.1: Baz<[i32; 4]>).0: [i32; 4]);
        _127 = (_149, move _128);
        _129 = (_127.0: &[i32; 4]);
        _130 = (_127.1: &[i32; 4]);
        _132 = <[i32; 4] as PartialEq>::eq(_129, _130) -> [return: bb25, unwind: bb32];
    }

    bb25: {
        _131 = Not(move _132);
        switchInt(move _131) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _133 = core::panicking::AssertKind::Eq;
        _135 = Option::<Arguments<'_>>::None;
        _134 = core::panicking::assert_failed::<[i32; 4], [i32; 4]>(move _133, _129, _130, move _135) -> bb32;
    }

    bb27: {
        _137 = &_123;
        _136 = _137 as &HasDrop<Baz<[i32]>> (Pointer(Unsize));
        _148 = const _;
        _140 = &(((*_136).1: Baz<[i32]>).0: [i32]);
        _139 = &_140;
        _138 = (_148, move _139);
        _141 = (_138.0: &&[i32; 4]);
        _142 = (_138.1: &&[i32]);
        _144 = <&[i32; 4] as PartialEq<&[i32]>>::eq(_141, _142) -> [return: bb28, unwind: bb32];
    }

    bb28: {
        _143 = Not(move _144);
        switchInt(move _143) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _145 = core::panicking::AssertKind::Eq;
        _147 = Option::<Arguments<'_>>::None;
        _146 = core::panicking::assert_failed::<&[i32; 4], &[i32]>(move _145, _141, _142, move _147) -> bb32;
    }

    bb30: {
        drop(_123) -> [return: bb31, unwind continue];
    }

    bb31: {
        return;
    }

    bb32 (cleanup): {
        drop(_123) -> [return: bb33, unwind terminate];
    }

    bb33 (cleanup): {
        resume;
    }
}

promoted[0] in main: &&[i32; 4] = {
    let mut _0: &&[i32; 4];
    let mut _1: &[i32; 4];
    let mut _2: [i32; 4];

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[i32; 4] = {
    let mut _0: &[i32; 4];
    let mut _1: [i32; 4];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 11_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 17_usize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 17_usize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 11_usize;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 11_usize;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 7_usize;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 7_usize;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}
