// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dynamically-sized-types/dst-deref-mut.rs:11:1: 11:19>::deref(_1: &Arr) -> &[usize] {
    debug self => _1;
    let mut _0: &[usize];
    let mut _2: !;

    bb0: {
        _2 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }
}

fn <impl at ui/dynamically-sized-types/dst-deref-mut.rs:19:1: 19:22>::deref_mut(_1: &mut Arr) -> &mut [usize] {
    debug self => _1;
    let mut _0: &mut [usize];
    let mut _2: std::boxed::Box<[usize]>;
    let mut _3: *const [usize];
    let mut _4: *const ();
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: bool;

    bb0: {
        _2 = deref_copy ((*_1).0: std::boxed::Box<[usize]>);
        _3 = (((_2.0: std::ptr::Unique<[usize]>).0: std::ptr::NonNull<[usize]>).0: *const [usize]);
        _4 = _3 as *const () (PtrToPtr);
        _5 = _4 as usize (Transmute);
        _6 = AlignOf(usize);
        _7 = Sub(_6, const 1_usize);
        _8 = BitAnd(_5, _7);
        _9 = Eq(_8, const 0_usize);
        assert(_9, "misaligned pointer dereference: address must be a multiple of {} but is {}", _6, _5) -> [success: bb1, unwind unreachable];
    }

    bb1: {
        _0 = &mut (*_3);
        return;
    }
}

fn foo(_1: &mut Arr) -> () {
    debug arr => _1;
    let mut _0: ();
    let mut _2: &mut [usize];
    let mut _3: &mut [usize];
    let mut _4: (&usize, &usize);
    let mut _5: &usize;
    let _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&usize, &usize);
    let mut _19: &usize;
    let _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: usize;
    let mut _28: usize;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: (&usize, &usize);
    let mut _33: &usize;
    let _34: usize;
    let mut _35: usize;
    let mut _36: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: usize;
    let mut _42: usize;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _2;
        let _9: &usize;
        let _10: &usize;
        let _23: &usize;
        let _24: &usize;
        let _37: &usize;
        let _38: &usize;
        let mut _46: &usize;
        let mut _47: &usize;
        let mut _48: &usize;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
        scope 4 {
            debug left_val => _23;
            debug right_val => _24;
            let _29: core::panicking::AssertKind;
            scope 5 {
                debug kind => _29;
            }
        }
        scope 6 {
            debug left_val => _37;
            debug right_val => _38;
            let _43: core::panicking::AssertKind;
            scope 7 {
                debug kind => _43;
            }
        }
    }

    bb0: {
        _3 = <Arr as DerefMut>::deref_mut(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = _3;
        _6 = const 0_usize;
        _7 = Len((*_2));
        _8 = Lt(_6, _7);
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> [success: bb2, unwind continue];
    }

    bb2: {
        _5 = &(*_2)[_6];
        _48 = const _;
        _4 = (move _5, _48);
        _9 = (_4.0: &usize);
        _10 = (_4.1: &usize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<usize, usize>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb4: {
        _20 = const 1_usize;
        _21 = Len((*_2));
        _22 = Lt(_20, _21);
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb5, unwind continue];
    }

    bb5: {
        _19 = &(*_2)[_20];
        _47 = const _;
        _18 = (move _19, _47);
        _23 = (_18.0: &usize);
        _24 = (_18.1: &usize);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<usize, usize>(move _29, _23, _24, move _31) -> unwind continue;
    }

    bb7: {
        _34 = const 2_usize;
        _35 = Len((*_2));
        _36 = Lt(_34, _35);
        assert(move _36, "index out of bounds: the length is {} but the index is {}", move _35, _34) -> [success: bb8, unwind continue];
    }

    bb8: {
        _33 = &(*_2)[_34];
        _46 = const _;
        _32 = (move _33, _46);
        _37 = (_32.0: &usize);
        _38 = (_32.1: &usize);
        _41 = (*_37);
        _42 = (*_38);
        _40 = Eq(move _41, move _42);
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<usize, usize>(move _43, _37, _38, move _45) -> unwind continue;
    }

    bb10: {
        return;
    }
}

promoted[0] in foo: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in foo: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in foo: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Arr;
    let mut _2: std::boxed::Box<[usize]>;
    let mut _3: std::boxed::Box<[usize; 3]>;
    let mut _4: [usize; 3];
    let _5: ();
    let mut _6: &mut Arr;
    scope 1 {
        debug a => _1;
    }

    bb0: {
        _4 = [const 1_usize, const 2_usize, const 3_usize];
        _3 = Box::<[usize; 3]>::new(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = move _3 as std::boxed::Box<[usize]> (Pointer(Unsize));
        _1 = Arr { ptr: move _2 };
        _6 = &mut _1;
        _5 = foo(_6) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}
