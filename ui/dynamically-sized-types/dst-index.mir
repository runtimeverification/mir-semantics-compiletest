// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dynamically-sized-types/dst-index.rs:11:1: 11:24>::index(_1: &S, _2: usize) -> &str {
    debug self => _1;                    // in scope 0 at ui/dynamically-sized-types/dst-index.rs:14:18: 14:26
    let mut _0: &str;                    // return place in scope 0 at ui/dynamically-sized-types/dst-index.rs:15:9: 15:16

    bb0: {
        _0 = const "hello";              // scope 0 at ui/dynamically-sized-types/dst-index.rs:15:9: 15:16
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-index.rs:15:9: 15:16
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at ui/dynamically-sized-types/dst-index.rs:16:6: 16:6
    }
}

fn <impl at ui/dynamically-sized-types/dst-index.rs:21:1: 21:24>::index(_1: &T, _2: usize) -> &dyn Debug {
    debug self => _1;                    // in scope 0 at ui/dynamically-sized-types/dst-index.rs:24:18: 24:26
    debug idx => _2;                     // in scope 0 at ui/dynamically-sized-types/dst-index.rs:24:28: 24:31
    let mut _0: &dyn std::fmt::Debug;    // return place in scope 0 at ui/dynamically-sized-types/dst-index.rs:24:43: 24:68
    let mut _3: &dyn std::fmt::Debug;    // in scope 0 at ui/dynamically-sized-types/dst-index.rs:26:9: 26:37
    let _4: &dyn std::fmt::Debug;        // in scope 0 at ui/dynamically-sized-types/dst-index.rs:26:9: 26:37
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at ui/dynamically-sized-types/dst-index.rs:26:9: 26:37
    let _6: &dyn std::fmt::Debug;        // in scope 0 at ui/dynamically-sized-types/dst-index.rs:26:9: 26:37
    let mut _7: &usize;                  // in scope 0 at ui/dynamically-sized-types/dst-index.rs:26:9: 26:11
    let _8: &usize;                      // in scope 0 at ui/dynamically-sized-types/dst-index.rs:26:9: 26:11
    let _9: &usize;                      // in scope 0 at ui/dynamically-sized-types/dst-index.rs:26:10: 26:11

    bb0: {
        _9 = const {alloc1: &usize};     // scope 0 at ui/dynamically-sized-types/dst-index.rs:26:10: 26:11
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-index.rs:26:10: 26:11
                                         // + literal: Const { ty: &usize, val: Value(Scalar(alloc1)) }
        _8 = _9;                         // scope 0 at ui/dynamically-sized-types/dst-index.rs:26:9: 26:11
        _7 = _8;                         // scope 0 at ui/dynamically-sized-types/dst-index.rs:26:9: 26:11
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/dynamically-sized-types/dst-index.rs:26:9: 26:11
        _5 = _6;                         // scope 0 at ui/dynamically-sized-types/dst-index.rs:26:9: 26:37
        _4 = move _5 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/dynamically-sized-types/dst-index.rs:26:9: 26:37
        _3 = _4;                         // scope 0 at ui/dynamically-sized-types/dst-index.rs:26:9: 26:37
        _0 = move _3 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/dynamically-sized-types/dst-index.rs:26:9: 26:37
        return;                          // scope 0 at ui/dynamically-sized-types/dst-index.rs:27:6: 27:6
    }
}

alloc1 (static: X, size: 8, align: 8) {
    2a 00 00 00 00 00 00 00                         â”‚ *.......
}

static X: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/dynamically-sized-types/dst-index.rs:25:19: 25:24

    bb0: {
        _0 = const 42_usize;             // scope 0 at ui/dynamically-sized-types/dst-index.rs:25:27: 25:29
        return;                          // scope 0 at ui/dynamically-sized-types/dst-index.rs:25:9: 25:30
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/dynamically-sized-types/dst-index.rs:30:11: 30:11
    let mut _1: (&&str, &&str);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &&str;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: &str;                        // in scope 0 at ui/dynamically-sized-types/dst-index.rs:31:16: 31:21
    let _4: &str;                        // in scope 0 at ui/dynamically-sized-types/dst-index.rs:31:17: 31:21
    let mut _5: &S;                      // in scope 0 at ui/dynamically-sized-types/dst-index.rs:31:17: 31:18
    let mut _6: &&str;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: &&str;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _8: &&str;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _21: &dyn std::fmt::Debug;       // in scope 0 at ui/dynamically-sized-types/dst-index.rs:32:14: 32:18
    let mut _22: &T;                     // in scope 0 at ui/dynamically-sized-types/dst-index.rs:32:14: 32:15
    let mut _23: &T;                     // in scope 0 at ui/dynamically-sized-types/dst-index.rs:32:14: 32:15
    let mut _24: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _25: &S;                     // in scope 0 at ui/dynamically-sized-types/dst-index.rs:31:17: 31:18
    scope 1 {
        debug left_val => _7;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _13;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
    }

    bb0: {
        _25 = const _;                   // scope 0 at ui/dynamically-sized-types/dst-index.rs:31:17: 31:18
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-index.rs:31:17: 31:18
                                         // + literal: Const { ty: &S, val: Unevaluated(main, [], Some(promoted[2])) }
        _5 = _25;                        // scope 0 at ui/dynamically-sized-types/dst-index.rs:31:17: 31:18
        _4 = <S as Index<usize>>::index(move _5, const 0_usize) -> bb1; // scope 0 at ui/dynamically-sized-types/dst-index.rs:31:17: 31:21
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-index.rs:31:17: 31:21
                                         // + literal: Const { ty: for<'a> fn(&'a S, usize) -> &'a <S as Index<usize>>::Output {<S as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at ui/dynamically-sized-types/dst-index.rs:31:16: 31:21
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[1])) }
        _6 = _24;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _6);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_1.0: &&str);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_1.1: &&str);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = _8;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = <&str as PartialEq>::eq(move _11, move _12) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = Not(move _10);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _13 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<&str, &str>(move _15, move _16, move _18, move _20); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb4: {
        _23 = const _;                   // scope 0 at ui/dynamically-sized-types/dst-index.rs:32:14: 32:15
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-index.rs:32:14: 32:15
                                         // + literal: Const { ty: &T, val: Unevaluated(main, [], Some(promoted[0])) }
        _22 = _23;                       // scope 0 at ui/dynamically-sized-types/dst-index.rs:32:14: 32:15
        _21 = <T as Index<usize>>::index(move _22, const 0_usize) -> bb5; // scope 0 at ui/dynamically-sized-types/dst-index.rs:32:14: 32:18
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-index.rs:32:14: 32:18
                                         // + literal: Const { ty: for<'a> fn(&'a T, usize) -> &'a <T as Index<usize>>::Output {<T as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/dynamically-sized-types/dst-index.rs:34:2: 34:2
    }
}

promoted[0] in main: &T = {
    let mut _0: &T;                      // return place in scope 0 at ui/dynamically-sized-types/dst-index.rs:32:14: 32:15
    let mut _1: T;                       // in scope 0 at ui/dynamically-sized-types/dst-index.rs:32:14: 32:15

    bb0: {
        _1 = T;                          // scope 0 at ui/dynamically-sized-types/dst-index.rs:32:14: 32:15
        _0 = &_1;                        // scope 0 at ui/dynamically-sized-types/dst-index.rs:32:14: 32:15
        return;                          // scope 0 at ui/dynamically-sized-types/dst-index.rs:32:14: 32:15
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/dynamically-sized-types/dst-index.rs:31:23: 31:30

    bb0: {
        _1 = const "hello";              // scope 0 at ui/dynamically-sized-types/dst-index.rs:31:23: 31:30
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-index.rs:31:23: 31:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &S = {
    let mut _0: &S;                      // return place in scope 0 at ui/dynamically-sized-types/dst-index.rs:31:17: 31:18
    let mut _1: S;                       // in scope 0 at ui/dynamically-sized-types/dst-index.rs:31:17: 31:18

    bb0: {
        _1 = S;                          // scope 0 at ui/dynamically-sized-types/dst-index.rs:31:17: 31:18
        _0 = &_1;                        // scope 0 at ui/dynamically-sized-types/dst-index.rs:31:17: 31:18
        return;                          // scope 0 at ui/dynamically-sized-types/dst-index.rs:31:17: 31:18
    }
}
