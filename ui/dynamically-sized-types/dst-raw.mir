// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dynamically-sized-types/dst-raw.rs:14:1: 14:17>::foo(_1: &A) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = ((*_1).0: isize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: A;
    let mut _3: *const A;
    let _4: &A;
    let _6: &dyn Trait;
    let mut _7: (&isize, &isize);
    let mut _8: &isize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: isize;
    let mut _14: isize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: A;
    let mut _21: *const Foo<A>;
    let _22: &Foo<A>;
    let mut _24: &dyn Trait;
    let _25: &Foo<dyn Trait>;
    let mut _26: (&isize, &isize);
    let mut _27: &isize;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: isize;
    let mut _33: isize;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: A;
    let mut _40: *const (A,);
    let _41: &(A,);
    let mut _43: &dyn Trait;
    let _44: &(dyn Trait,);
    let mut _45: (&isize, &isize);
    let mut _46: &isize;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: isize;
    let mut _52: isize;
    let _54: !;
    let mut _55: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: *const [i32; 3];
    let _59: usize;
    let mut _60: usize;
    let mut _61: bool;
    let mut _62: (&i32, &i32);
    let mut _63: &i32;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: i32;
    let mut _69: i32;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _74: &[i32];
    let mut _75: (&usize, &usize);
    let mut _76: &usize;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: usize;
    let mut _82: usize;
    let _84: !;
    let mut _85: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _87: *const [i32; 3];
    let _89: usize;
    let mut _90: usize;
    let mut _91: bool;
    let mut _92: (&i32, &i32);
    let mut _93: &i32;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: i32;
    let mut _99: i32;
    let _101: !;
    let mut _102: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _104: &[i32];
    let mut _105: (&usize, &usize);
    let mut _106: &usize;
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: usize;
    let mut _112: usize;
    let _114: !;
    let mut _115: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _117: *const Foo<[i32; 3]>;
    let mut _119: &Foo<[i32]>;
    let _120: usize;
    let mut _121: usize;
    let mut _122: bool;
    let mut _123: (&i32, &i32);
    let mut _124: &i32;
    let mut _127: bool;
    let mut _128: bool;
    let mut _129: i32;
    let mut _130: i32;
    let _132: !;
    let mut _133: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _135: &[i32];
    let _136: &Foo<[i32]>;
    let mut _137: (&usize, &usize);
    let mut _138: &usize;
    let mut _141: bool;
    let mut _142: bool;
    let mut _143: usize;
    let mut _144: usize;
    let _146: !;
    let mut _147: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _149: *const ([i32; 3],);
    let mut _151: &([i32],);
    let _152: usize;
    let mut _153: usize;
    let mut _154: bool;
    let mut _155: (&i32, &i32);
    let mut _156: &i32;
    let mut _159: bool;
    let mut _160: bool;
    let mut _161: i32;
    let mut _162: i32;
    let _164: !;
    let mut _165: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _167: &[i32];
    let _168: &([i32],);
    let mut _169: (&usize, &usize);
    let mut _170: &usize;
    let mut _173: bool;
    let mut _174: bool;
    let mut _175: usize;
    let mut _176: usize;
    let _178: !;
    let mut _179: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _182: *mut A;
    let mut _183: &mut A;
    let _185: &dyn Trait;
    let mut _186: (&isize, &isize);
    let mut _187: &isize;
    let mut _190: bool;
    let mut _191: bool;
    let mut _192: isize;
    let mut _193: isize;
    let _195: !;
    let mut _196: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _198: A;
    let mut _200: *mut Foo<A>;
    let mut _201: &mut Foo<A>;
    let mut _203: &dyn Trait;
    let _204: &Foo<dyn Trait>;
    let mut _205: (&isize, &isize);
    let mut _206: &isize;
    let mut _209: bool;
    let mut _210: bool;
    let mut _211: isize;
    let mut _212: isize;
    let _214: !;
    let mut _215: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _217: A;
    let mut _219: *mut (A,);
    let mut _220: &mut (A,);
    let mut _222: &dyn Trait;
    let _223: &(dyn Trait,);
    let mut _224: (&isize, &isize);
    let mut _225: &isize;
    let mut _228: bool;
    let mut _229: bool;
    let mut _230: isize;
    let mut _231: isize;
    let _233: !;
    let mut _234: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _236: *mut [i32; 3];
    let mut _237: &mut [i32; 3];
    let mut _238: [i32; 3];
    let _240: usize;
    let mut _241: usize;
    let mut _242: bool;
    let mut _243: (&i32, &i32);
    let mut _244: &i32;
    let mut _247: bool;
    let mut _248: bool;
    let mut _249: i32;
    let mut _250: i32;
    let _252: !;
    let mut _253: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _255: &[i32];
    let mut _256: (&usize, &usize);
    let mut _257: &usize;
    let mut _260: bool;
    let mut _261: bool;
    let mut _262: usize;
    let mut _263: usize;
    let _265: !;
    let mut _266: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _268: *mut [i32; 3];
    let mut _269: &mut [i32; 3];
    let mut _270: [i32; 3];
    let _272: usize;
    let mut _273: usize;
    let mut _274: bool;
    let mut _275: (&i32, &i32);
    let mut _276: &i32;
    let mut _279: bool;
    let mut _280: bool;
    let mut _281: i32;
    let mut _282: i32;
    let _284: !;
    let mut _285: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _287: &[i32];
    let mut _288: (&usize, &usize);
    let mut _289: &usize;
    let mut _292: bool;
    let mut _293: bool;
    let mut _294: usize;
    let mut _295: usize;
    let _297: !;
    let mut _298: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _300: *mut Foo<[i32; 3]>;
    let mut _301: &mut Foo<[i32; 3]>;
    let mut _302: Foo<[i32; 3]>;
    let mut _303: [i32; 3];
    let mut _305: &Foo<[i32]>;
    let _306: usize;
    let mut _307: usize;
    let mut _308: bool;
    let mut _309: (&i32, &i32);
    let mut _310: &i32;
    let mut _313: bool;
    let mut _314: bool;
    let mut _315: i32;
    let mut _316: i32;
    let _318: !;
    let mut _319: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _321: &[i32];
    let _322: &Foo<[i32]>;
    let mut _323: (&usize, &usize);
    let mut _324: &usize;
    let mut _327: bool;
    let mut _328: bool;
    let mut _329: usize;
    let mut _330: usize;
    let _332: !;
    let mut _333: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _335: *mut ([i32; 3],);
    let mut _336: &mut ([i32; 3],);
    let mut _337: ([i32; 3],);
    let mut _338: [i32; 3];
    let mut _340: &([i32],);
    let _341: usize;
    let mut _342: usize;
    let mut _343: bool;
    let mut _344: (&i32, &i32);
    let mut _345: &i32;
    let mut _348: bool;
    let mut _349: bool;
    let mut _350: i32;
    let mut _351: i32;
    let _353: !;
    let mut _354: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _356: &[i32];
    let _357: &([i32],);
    let mut _358: (&usize, &usize);
    let mut _359: &usize;
    let mut _362: bool;
    let mut _363: bool;
    let mut _364: usize;
    let mut _365: usize;
    let _367: !;
    let mut _368: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: *const dyn Trait;
        scope 2 {
            debug z => _2;
            let _5: isize;
            scope 3 {
                debug r => _5;
                let _9: &isize;
                let _10: &isize;
                let _18: Foo<A>;
                let mut _394: &isize;
                scope 5 {
                    debug left_val => _9;
                    debug right_val => _10;
                    let _15: core::panicking::AssertKind;
                    scope 6 {
                        debug kind => _15;
                    }
                }
                scope 7 {
                    debug p => _18;
                    let _20: *const Foo<dyn Trait>;
                    scope 8 {
                        debug o => _20;
                        let _23: isize;
                        scope 9 {
                            debug r => _23;
                            let _28: &isize;
                            let _29: &isize;
                            let _37: (A,);
                            let mut _393: &isize;
                            scope 11 {
                                debug left_val => _28;
                                debug right_val => _29;
                                let _34: core::panicking::AssertKind;
                                scope 12 {
                                    debug kind => _34;
                                }
                            }
                            scope 13 {
                                debug p => _37;
                                let _39: *const (dyn Trait,);
                                scope 14 {
                                    debug o => _39;
                                    let _42: isize;
                                    scope 15 {
                                        debug r => _42;
                                        let _47: &isize;
                                        let _48: &isize;
                                        let _56: *const [i32];
                                        let mut _391: &[i32; 3];
                                        let mut _392: &isize;
                                        scope 17 {
                                            debug left_val => _47;
                                            debug right_val => _48;
                                            let _53: core::panicking::AssertKind;
                                            scope 18 {
                                                debug kind => _53;
                                            }
                                        }
                                        scope 19 {
                                            debug a => _56;
                                            let _86: *const [i32];
                                            let mut _388: &[i32; 3];
                                            scope 20 {
                                                let _58: i32;
                                                let mut _455: *const ();
                                                let mut _456: usize;
                                                let mut _457: usize;
                                                let mut _458: usize;
                                                let mut _459: usize;
                                                let mut _460: bool;
                                                let mut _461: *const ();
                                                let mut _462: usize;
                                                let mut _463: usize;
                                                let mut _464: usize;
                                                let mut _465: usize;
                                                let mut _466: bool;
                                                scope 21 {
                                                    debug b => _58;
                                                    let _64: &i32;
                                                    let _65: &i32;
                                                    let _73: usize;
                                                    let mut _390: &i32;
                                                    let mut _449: *const ();
                                                    let mut _450: usize;
                                                    let mut _451: usize;
                                                    let mut _452: usize;
                                                    let mut _453: usize;
                                                    let mut _454: bool;
                                                    scope 22 {
                                                        debug left_val => _64;
                                                        debug right_val => _65;
                                                        let _70: core::panicking::AssertKind;
                                                        scope 23 {
                                                            debug kind => _70;
                                                        }
                                                    }
                                                    scope 24 {
                                                        debug len => _73;
                                                        let _77: &usize;
                                                        let _78: &usize;
                                                        let mut _389: &usize;
                                                        scope 25 {
                                                            debug left_val => _77;
                                                            debug right_val => _78;
                                                            let _83: core::panicking::AssertKind;
                                                            scope 26 {
                                                                debug kind => _83;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 27 {
                                                debug a => _86;
                                                let _116: *const Foo<[i32]>;
                                                let mut _385: &Foo<[i32; 3]>;
                                                scope 28 {
                                                    let _88: i32;
                                                    let mut _437: *const ();
                                                    let mut _438: usize;
                                                    let mut _439: usize;
                                                    let mut _440: usize;
                                                    let mut _441: usize;
                                                    let mut _442: bool;
                                                    let mut _443: *const ();
                                                    let mut _444: usize;
                                                    let mut _445: usize;
                                                    let mut _446: usize;
                                                    let mut _447: usize;
                                                    let mut _448: bool;
                                                    scope 29 {
                                                        debug b => _88;
                                                        let _94: &i32;
                                                        let _95: &i32;
                                                        let _103: usize;
                                                        let mut _387: &i32;
                                                        let mut _431: *const ();
                                                        let mut _432: usize;
                                                        let mut _433: usize;
                                                        let mut _434: usize;
                                                        let mut _435: usize;
                                                        let mut _436: bool;
                                                        scope 30 {
                                                            debug left_val => _94;
                                                            debug right_val => _95;
                                                            let _100: core::panicking::AssertKind;
                                                            scope 31 {
                                                                debug kind => _100;
                                                            }
                                                        }
                                                        scope 32 {
                                                            debug len => _103;
                                                            let _107: &usize;
                                                            let _108: &usize;
                                                            let mut _386: &usize;
                                                            scope 33 {
                                                                debug left_val => _107;
                                                                debug right_val => _108;
                                                                let _113: core::panicking::AssertKind;
                                                                scope 34 {
                                                                    debug kind => _113;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 35 {
                                                    debug c => _116;
                                                    let _148: *const ([i32],);
                                                    let mut _382: &([i32; 3],);
                                                    scope 36 {
                                                        let _118: i32;
                                                        scope 37 {
                                                            debug b => _118;
                                                            let _125: &i32;
                                                            let _126: &i32;
                                                            let _134: usize;
                                                            let mut _384: &i32;
                                                            scope 38 {
                                                                debug left_val => _125;
                                                                debug right_val => _126;
                                                                let _131: core::panicking::AssertKind;
                                                                scope 39 {
                                                                    debug kind => _131;
                                                                }
                                                            }
                                                            scope 40 {
                                                                debug len => _134;
                                                                let _139: &usize;
                                                                let _140: &usize;
                                                                let mut _383: &usize;
                                                                scope 41 {
                                                                    debug left_val => _139;
                                                                    debug right_val => _140;
                                                                    let _145: core::panicking::AssertKind;
                                                                    scope 42 {
                                                                        debug kind => _145;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 43 {
                                                        debug c => _148;
                                                        let mut _180: A;
                                                        scope 44 {
                                                            let _150: i32;
                                                            scope 45 {
                                                                debug b => _150;
                                                                let _157: &i32;
                                                                let _158: &i32;
                                                                let _166: usize;
                                                                let mut _381: &i32;
                                                                scope 46 {
                                                                    debug left_val => _157;
                                                                    debug right_val => _158;
                                                                    let _163: core::panicking::AssertKind;
                                                                    scope 47 {
                                                                        debug kind => _163;
                                                                    }
                                                                }
                                                                scope 48 {
                                                                    debug len => _166;
                                                                    let _171: &usize;
                                                                    let _172: &usize;
                                                                    let mut _380: &usize;
                                                                    scope 49 {
                                                                        debug left_val => _171;
                                                                        debug right_val => _172;
                                                                        let _177: core::panicking::AssertKind;
                                                                        scope 50 {
                                                                            debug kind => _177;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 51 {
                                                            debug x => _180;
                                                            let _181: *mut dyn Trait;
                                                            scope 52 {
                                                                debug z => _181;
                                                                let _184: isize;
                                                                scope 53 {
                                                                    debug r => _184;
                                                                    let _188: &isize;
                                                                    let _189: &isize;
                                                                    let mut _197: Foo<A>;
                                                                    let mut _379: &isize;
                                                                    scope 55 {
                                                                        debug left_val => _188;
                                                                        debug right_val => _189;
                                                                        let _194: core::panicking::AssertKind;
                                                                        scope 56 {
                                                                            debug kind => _194;
                                                                        }
                                                                    }
                                                                    scope 57 {
                                                                        debug p => _197;
                                                                        let _199: *mut Foo<dyn Trait>;
                                                                        scope 58 {
                                                                            debug o => _199;
                                                                            let _202: isize;
                                                                            scope 59 {
                                                                                debug r => _202;
                                                                                let _207: &isize;
                                                                                let _208: &isize;
                                                                                let mut _216: (A,);
                                                                                let mut _378: &isize;
                                                                                scope 61 {
                                                                                    debug left_val => _207;
                                                                                    debug right_val => _208;
                                                                                    let _213: core::panicking::AssertKind;
                                                                                    scope 62 {
                                                                                        debug kind => _213;
                                                                                    }
                                                                                }
                                                                                scope 63 {
                                                                                    debug p => _216;
                                                                                    let _218: *mut (dyn Trait,);
                                                                                    scope 64 {
                                                                                        debug o => _218;
                                                                                        let _221: isize;
                                                                                        scope 65 {
                                                                                            debug r => _221;
                                                                                            let _226: &isize;
                                                                                            let _227: &isize;
                                                                                            let _235: *mut [i32];
                                                                                            let mut _377: &isize;
                                                                                            scope 67 {
                                                                                                debug left_val => _226;
                                                                                                debug right_val => _227;
                                                                                                let _232: core::panicking::AssertKind;
                                                                                                scope 68 {
                                                                                                    debug kind => _232;
                                                                                                }
                                                                                            }
                                                                                            scope 69 {
                                                                                                debug a => _235;
                                                                                                let _267: *mut [i32];
                                                                                                scope 70 {
                                                                                                    let _239: i32;
                                                                                                    let mut _419: *const ();
                                                                                                    let mut _420: usize;
                                                                                                    let mut _421: usize;
                                                                                                    let mut _422: usize;
                                                                                                    let mut _423: usize;
                                                                                                    let mut _424: bool;
                                                                                                    let mut _425: *const ();
                                                                                                    let mut _426: usize;
                                                                                                    let mut _427: usize;
                                                                                                    let mut _428: usize;
                                                                                                    let mut _429: usize;
                                                                                                    let mut _430: bool;
                                                                                                    scope 71 {
                                                                                                        debug b => _239;
                                                                                                        let _245: &i32;
                                                                                                        let _246: &i32;
                                                                                                        let _254: usize;
                                                                                                        let mut _376: &i32;
                                                                                                        let mut _413: *const ();
                                                                                                        let mut _414: usize;
                                                                                                        let mut _415: usize;
                                                                                                        let mut _416: usize;
                                                                                                        let mut _417: usize;
                                                                                                        let mut _418: bool;
                                                                                                        scope 72 {
                                                                                                            debug left_val => _245;
                                                                                                            debug right_val => _246;
                                                                                                            let _251: core::panicking::AssertKind;
                                                                                                            scope 73 {
                                                                                                                debug kind => _251;
                                                                                                            }
                                                                                                        }
                                                                                                        scope 74 {
                                                                                                            debug len => _254;
                                                                                                            let _258: &usize;
                                                                                                            let _259: &usize;
                                                                                                            let mut _375: &usize;
                                                                                                            scope 75 {
                                                                                                                debug left_val => _258;
                                                                                                                debug right_val => _259;
                                                                                                                let _264: core::panicking::AssertKind;
                                                                                                                scope 76 {
                                                                                                                    debug kind => _264;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 77 {
                                                                                                    debug a => _267;
                                                                                                    let _299: *mut Foo<[i32]>;
                                                                                                    scope 78 {
                                                                                                        let _271: i32;
                                                                                                        let mut _401: *const ();
                                                                                                        let mut _402: usize;
                                                                                                        let mut _403: usize;
                                                                                                        let mut _404: usize;
                                                                                                        let mut _405: usize;
                                                                                                        let mut _406: bool;
                                                                                                        let mut _407: *const ();
                                                                                                        let mut _408: usize;
                                                                                                        let mut _409: usize;
                                                                                                        let mut _410: usize;
                                                                                                        let mut _411: usize;
                                                                                                        let mut _412: bool;
                                                                                                        scope 79 {
                                                                                                            debug b => _271;
                                                                                                            let _277: &i32;
                                                                                                            let _278: &i32;
                                                                                                            let _286: usize;
                                                                                                            let mut _374: &i32;
                                                                                                            let mut _395: *const ();
                                                                                                            let mut _396: usize;
                                                                                                            let mut _397: usize;
                                                                                                            let mut _398: usize;
                                                                                                            let mut _399: usize;
                                                                                                            let mut _400: bool;
                                                                                                            scope 80 {
                                                                                                                debug left_val => _277;
                                                                                                                debug right_val => _278;
                                                                                                                let _283: core::panicking::AssertKind;
                                                                                                                scope 81 {
                                                                                                                    debug kind => _283;
                                                                                                                }
                                                                                                            }
                                                                                                            scope 82 {
                                                                                                                debug len => _286;
                                                                                                                let _290: &usize;
                                                                                                                let _291: &usize;
                                                                                                                let mut _373: &usize;
                                                                                                                scope 83 {
                                                                                                                    debug left_val => _290;
                                                                                                                    debug right_val => _291;
                                                                                                                    let _296: core::panicking::AssertKind;
                                                                                                                    scope 84 {
                                                                                                                        debug kind => _296;
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 85 {
                                                                                                        debug c => _299;
                                                                                                        let _334: *mut ([i32],);
                                                                                                        scope 86 {
                                                                                                            let _304: i32;
                                                                                                            scope 87 {
                                                                                                                debug b => _304;
                                                                                                                let _311: &i32;
                                                                                                                let _312: &i32;
                                                                                                                let _320: usize;
                                                                                                                let mut _372: &i32;
                                                                                                                scope 88 {
                                                                                                                    debug left_val => _311;
                                                                                                                    debug right_val => _312;
                                                                                                                    let _317: core::panicking::AssertKind;
                                                                                                                    scope 89 {
                                                                                                                        debug kind => _317;
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 90 {
                                                                                                                    debug len => _320;
                                                                                                                    let _325: &usize;
                                                                                                                    let _326: &usize;
                                                                                                                    let mut _371: &usize;
                                                                                                                    scope 91 {
                                                                                                                        debug left_val => _325;
                                                                                                                        debug right_val => _326;
                                                                                                                        let _331: core::panicking::AssertKind;
                                                                                                                        scope 92 {
                                                                                                                            debug kind => _331;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 93 {
                                                                                                            debug c => _334;
                                                                                                            scope 94 {
                                                                                                                let _339: i32;
                                                                                                                scope 95 {
                                                                                                                    debug b => _339;
                                                                                                                    let _346: &i32;
                                                                                                                    let _347: &i32;
                                                                                                                    let _355: usize;
                                                                                                                    let mut _370: &i32;
                                                                                                                    scope 96 {
                                                                                                                        debug left_val => _346;
                                                                                                                        debug right_val => _347;
                                                                                                                        let _352: core::panicking::AssertKind;
                                                                                                                        scope 97 {
                                                                                                                            debug kind => _352;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 98 {
                                                                                                                        debug len => _355;
                                                                                                                        let _360: &usize;
                                                                                                                        let _361: &usize;
                                                                                                                        let mut _369: &usize;
                                                                                                                        scope 99 {
                                                                                                                            debug left_val => _360;
                                                                                                                            debug right_val => _361;
                                                                                                                            let _366: core::panicking::AssertKind;
                                                                                                                            scope 100 {
                                                                                                                                debug kind => _366;
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 66 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 60 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 54 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    scope 16 {
                                    }
                                }
                            }
                        }
                        scope 10 {
                        }
                    }
                }
            }
            scope 4 {
            }
        }
    }

    bb0: {
        _1 = A { f: const 42_isize };
        _4 = &_1;
        _3 = &raw const (*_4);
        _2 = move _3 as *const dyn Trait (Pointer(Unsize));
        _6 = &(*_2);
        _5 = <dyn Trait as Trait>::foo(_6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &_5;
        _394 = const _;
        _7 = (move _8, _394);
        _9 = (_7.0: &isize);
        _10 = (_7.1: &isize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<isize, isize>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb3: {
        _19 = A { f: const 42_isize };
        _18 = Foo::<A> { f: move _19 };
        _22 = &_18;
        _21 = &raw const (*_22);
        _20 = move _21 as *const Foo<dyn Trait> (Pointer(Unsize));
        _25 = &(*_20);
        _24 = &((*_25).0: dyn Trait);
        _23 = <dyn Trait as Trait>::foo(move _24) -> [return: bb4, unwind continue];
    }

    bb4: {
        _27 = &_23;
        _393 = const _;
        _26 = (move _27, _393);
        _28 = (_26.0: &isize);
        _29 = (_26.1: &isize);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<isize, isize>(move _34, _28, _29, move _36) -> unwind continue;
    }

    bb6: {
        _38 = A { f: const 42_isize };
        _37 = (move _38,);
        _41 = &_37;
        _40 = &raw const (*_41);
        _39 = move _40 as *const (dyn Trait,) (Pointer(Unsize));
        _44 = &(*_39);
        _43 = &((*_44).0: dyn Trait);
        _42 = <dyn Trait as Trait>::foo(move _43) -> [return: bb7, unwind continue];
    }

    bb7: {
        _46 = &_42;
        _392 = const _;
        _45 = (move _46, _392);
        _47 = (_45.0: &isize);
        _48 = (_45.1: &isize);
        _51 = (*_47);
        _52 = (*_48);
        _50 = Eq(move _51, move _52);
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _53 = core::panicking::AssertKind::Eq;
        _55 = Option::<Arguments<'_>>::None;
        _54 = core::panicking::assert_failed::<isize, isize>(move _53, _47, _48, move _55) -> unwind continue;
    }

    bb9: {
        _391 = const _;
        _57 = &raw const (*_391);
        _56 = move _57 as *const [i32] (Pointer(Unsize));
        _59 = const 2_usize;
        _461 = _56 as *const () (PtrToPtr);
        _462 = _461 as usize (Transmute);
        _463 = AlignOf(i32);
        _464 = Sub(_463, const 1_usize);
        _465 = BitAnd(_462, _464);
        _466 = Eq(_465, const 0_usize);
        assert(_466, "misaligned pointer dereference: address must be a multiple of {} but is {}", _463, _462) -> [success: bb70, unwind unreachable];
    }

    bb10: {
        _455 = _56 as *const () (PtrToPtr);
        _456 = _455 as usize (Transmute);
        _457 = AlignOf(i32);
        _458 = Sub(_457, const 1_usize);
        _459 = BitAnd(_456, _458);
        _460 = Eq(_459, const 0_usize);
        assert(_460, "misaligned pointer dereference: address must be a multiple of {} but is {}", _457, _456) -> [success: bb69, unwind unreachable];
    }

    bb11: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<i32, i32>(move _70, _64, _65, move _72) -> unwind continue;
    }

    bb12: {
        _449 = _56 as *const () (PtrToPtr);
        _450 = _449 as usize (Transmute);
        _451 = AlignOf(i32);
        _452 = Sub(_451, const 1_usize);
        _453 = BitAnd(_450, _452);
        _454 = Eq(_453, const 0_usize);
        assert(_454, "misaligned pointer dereference: address must be a multiple of {} but is {}", _451, _450) -> [success: bb68, unwind unreachable];
    }

    bb13: {
        _83 = core::panicking::AssertKind::Eq;
        _85 = Option::<Arguments<'_>>::None;
        _84 = core::panicking::assert_failed::<usize, usize>(move _83, _77, _78, move _85) -> unwind continue;
    }

    bb14: {
        _388 = const _;
        _87 = &raw const (*_388);
        _86 = move _87 as *const [i32] (Pointer(Unsize));
        _89 = const 2_usize;
        _443 = _86 as *const () (PtrToPtr);
        _444 = _443 as usize (Transmute);
        _445 = AlignOf(i32);
        _446 = Sub(_445, const 1_usize);
        _447 = BitAnd(_444, _446);
        _448 = Eq(_447, const 0_usize);
        assert(_448, "misaligned pointer dereference: address must be a multiple of {} but is {}", _445, _444) -> [success: bb67, unwind unreachable];
    }

    bb15: {
        _437 = _86 as *const () (PtrToPtr);
        _438 = _437 as usize (Transmute);
        _439 = AlignOf(i32);
        _440 = Sub(_439, const 1_usize);
        _441 = BitAnd(_438, _440);
        _442 = Eq(_441, const 0_usize);
        assert(_442, "misaligned pointer dereference: address must be a multiple of {} but is {}", _439, _438) -> [success: bb66, unwind unreachable];
    }

    bb16: {
        _100 = core::panicking::AssertKind::Eq;
        _102 = Option::<Arguments<'_>>::None;
        _101 = core::panicking::assert_failed::<i32, i32>(move _100, _94, _95, move _102) -> unwind continue;
    }

    bb17: {
        _431 = _86 as *const () (PtrToPtr);
        _432 = _431 as usize (Transmute);
        _433 = AlignOf(i32);
        _434 = Sub(_433, const 1_usize);
        _435 = BitAnd(_432, _434);
        _436 = Eq(_435, const 0_usize);
        assert(_436, "misaligned pointer dereference: address must be a multiple of {} but is {}", _433, _432) -> [success: bb65, unwind unreachable];
    }

    bb18: {
        _113 = core::panicking::AssertKind::Eq;
        _115 = Option::<Arguments<'_>>::None;
        _114 = core::panicking::assert_failed::<usize, usize>(move _113, _107, _108, move _115) -> unwind continue;
    }

    bb19: {
        _385 = const _;
        _117 = &raw const (*_385);
        _116 = move _117 as *const Foo<[i32]> (Pointer(Unsize));
        _119 = &(*_116);
        _120 = const 0_usize;
        _121 = Len(((*_119).0: [i32]));
        _122 = Lt(_120, _121);
        assert(move _122, "index out of bounds: the length is {} but the index is {}", move _121, _120) -> [success: bb20, unwind continue];
    }

    bb20: {
        _118 = ((*_119).0: [i32])[_120];
        _124 = &_118;
        _384 = const _;
        _123 = (move _124, _384);
        _125 = (_123.0: &i32);
        _126 = (_123.1: &i32);
        _129 = (*_125);
        _130 = (*_126);
        _128 = Eq(move _129, move _130);
        _127 = Not(move _128);
        switchInt(move _127) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _131 = core::panicking::AssertKind::Eq;
        _133 = Option::<Arguments<'_>>::None;
        _132 = core::panicking::assert_failed::<i32, i32>(move _131, _125, _126, move _133) -> unwind continue;
    }

    bb22: {
        _136 = &(*_116);
        _135 = &((*_136).0: [i32]);
        _134 = Len((*_135));
        _138 = &_134;
        _383 = const _;
        _137 = (move _138, _383);
        _139 = (_137.0: &usize);
        _140 = (_137.1: &usize);
        _143 = (*_139);
        _144 = (*_140);
        _142 = Eq(move _143, move _144);
        _141 = Not(move _142);
        switchInt(move _141) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _145 = core::panicking::AssertKind::Eq;
        _147 = Option::<Arguments<'_>>::None;
        _146 = core::panicking::assert_failed::<usize, usize>(move _145, _139, _140, move _147) -> unwind continue;
    }

    bb24: {
        _382 = const _;
        _149 = &raw const (*_382);
        _148 = move _149 as *const ([i32],) (Pointer(Unsize));
        _151 = &(*_148);
        _152 = const 0_usize;
        _153 = Len(((*_151).0: [i32]));
        _154 = Lt(_152, _153);
        assert(move _154, "index out of bounds: the length is {} but the index is {}", move _153, _152) -> [success: bb25, unwind continue];
    }

    bb25: {
        _150 = ((*_151).0: [i32])[_152];
        _156 = &_150;
        _381 = const _;
        _155 = (move _156, _381);
        _157 = (_155.0: &i32);
        _158 = (_155.1: &i32);
        _161 = (*_157);
        _162 = (*_158);
        _160 = Eq(move _161, move _162);
        _159 = Not(move _160);
        switchInt(move _159) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _163 = core::panicking::AssertKind::Eq;
        _165 = Option::<Arguments<'_>>::None;
        _164 = core::panicking::assert_failed::<i32, i32>(move _163, _157, _158, move _165) -> unwind continue;
    }

    bb27: {
        _168 = &(*_148);
        _167 = &((*_168).0: [i32]);
        _166 = Len((*_167));
        _170 = &_166;
        _380 = const _;
        _169 = (move _170, _380);
        _171 = (_169.0: &usize);
        _172 = (_169.1: &usize);
        _175 = (*_171);
        _176 = (*_172);
        _174 = Eq(move _175, move _176);
        _173 = Not(move _174);
        switchInt(move _173) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _177 = core::panicking::AssertKind::Eq;
        _179 = Option::<Arguments<'_>>::None;
        _178 = core::panicking::assert_failed::<usize, usize>(move _177, _171, _172, move _179) -> unwind continue;
    }

    bb29: {
        _180 = A { f: const 42_isize };
        _183 = &mut _180;
        _182 = &raw mut (*_183);
        _181 = move _182 as *mut dyn Trait (Pointer(Unsize));
        _185 = &(*_181);
        _184 = <dyn Trait as Trait>::foo(_185) -> [return: bb30, unwind continue];
    }

    bb30: {
        _187 = &_184;
        _379 = const _;
        _186 = (move _187, _379);
        _188 = (_186.0: &isize);
        _189 = (_186.1: &isize);
        _192 = (*_188);
        _193 = (*_189);
        _191 = Eq(move _192, move _193);
        _190 = Not(move _191);
        switchInt(move _190) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _194 = core::panicking::AssertKind::Eq;
        _196 = Option::<Arguments<'_>>::None;
        _195 = core::panicking::assert_failed::<isize, isize>(move _194, _188, _189, move _196) -> unwind continue;
    }

    bb32: {
        _198 = A { f: const 42_isize };
        _197 = Foo::<A> { f: move _198 };
        _201 = &mut _197;
        _200 = &raw mut (*_201);
        _199 = move _200 as *mut Foo<dyn Trait> (Pointer(Unsize));
        _204 = &(*_199);
        _203 = &((*_204).0: dyn Trait);
        _202 = <dyn Trait as Trait>::foo(move _203) -> [return: bb33, unwind continue];
    }

    bb33: {
        _206 = &_202;
        _378 = const _;
        _205 = (move _206, _378);
        _207 = (_205.0: &isize);
        _208 = (_205.1: &isize);
        _211 = (*_207);
        _212 = (*_208);
        _210 = Eq(move _211, move _212);
        _209 = Not(move _210);
        switchInt(move _209) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _213 = core::panicking::AssertKind::Eq;
        _215 = Option::<Arguments<'_>>::None;
        _214 = core::panicking::assert_failed::<isize, isize>(move _213, _207, _208, move _215) -> unwind continue;
    }

    bb35: {
        _217 = A { f: const 42_isize };
        _216 = (move _217,);
        _220 = &mut _216;
        _219 = &raw mut (*_220);
        _218 = move _219 as *mut (dyn Trait,) (Pointer(Unsize));
        _223 = &(*_218);
        _222 = &((*_223).0: dyn Trait);
        _221 = <dyn Trait as Trait>::foo(move _222) -> [return: bb36, unwind continue];
    }

    bb36: {
        _225 = &_221;
        _377 = const _;
        _224 = (move _225, _377);
        _226 = (_224.0: &isize);
        _227 = (_224.1: &isize);
        _230 = (*_226);
        _231 = (*_227);
        _229 = Eq(move _230, move _231);
        _228 = Not(move _229);
        switchInt(move _228) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _232 = core::panicking::AssertKind::Eq;
        _234 = Option::<Arguments<'_>>::None;
        _233 = core::panicking::assert_failed::<isize, isize>(move _232, _226, _227, move _234) -> unwind continue;
    }

    bb38: {
        _238 = [const 1_i32, const 2_i32, const 3_i32];
        _237 = &mut _238;
        _236 = &raw mut (*_237);
        _235 = move _236 as *mut [i32] (Pointer(Unsize));
        _240 = const 2_usize;
        _425 = _235 as *const () (PtrToPtr);
        _426 = _425 as usize (Transmute);
        _427 = AlignOf(i32);
        _428 = Sub(_427, const 1_usize);
        _429 = BitAnd(_426, _428);
        _430 = Eq(_429, const 0_usize);
        assert(_430, "misaligned pointer dereference: address must be a multiple of {} but is {}", _427, _426) -> [success: bb64, unwind unreachable];
    }

    bb39: {
        _419 = _235 as *const () (PtrToPtr);
        _420 = _419 as usize (Transmute);
        _421 = AlignOf(i32);
        _422 = Sub(_421, const 1_usize);
        _423 = BitAnd(_420, _422);
        _424 = Eq(_423, const 0_usize);
        assert(_424, "misaligned pointer dereference: address must be a multiple of {} but is {}", _421, _420) -> [success: bb63, unwind unreachable];
    }

    bb40: {
        _251 = core::panicking::AssertKind::Eq;
        _253 = Option::<Arguments<'_>>::None;
        _252 = core::panicking::assert_failed::<i32, i32>(move _251, _245, _246, move _253) -> unwind continue;
    }

    bb41: {
        _413 = _235 as *const () (PtrToPtr);
        _414 = _413 as usize (Transmute);
        _415 = AlignOf(i32);
        _416 = Sub(_415, const 1_usize);
        _417 = BitAnd(_414, _416);
        _418 = Eq(_417, const 0_usize);
        assert(_418, "misaligned pointer dereference: address must be a multiple of {} but is {}", _415, _414) -> [success: bb62, unwind unreachable];
    }

    bb42: {
        _264 = core::panicking::AssertKind::Eq;
        _266 = Option::<Arguments<'_>>::None;
        _265 = core::panicking::assert_failed::<usize, usize>(move _264, _258, _259, move _266) -> unwind continue;
    }

    bb43: {
        _270 = [const 1_i32, const 2_i32, const 3_i32];
        _269 = &mut _270;
        _268 = &raw mut (*_269);
        _267 = move _268 as *mut [i32] (Pointer(Unsize));
        _272 = const 2_usize;
        _407 = _267 as *const () (PtrToPtr);
        _408 = _407 as usize (Transmute);
        _409 = AlignOf(i32);
        _410 = Sub(_409, const 1_usize);
        _411 = BitAnd(_408, _410);
        _412 = Eq(_411, const 0_usize);
        assert(_412, "misaligned pointer dereference: address must be a multiple of {} but is {}", _409, _408) -> [success: bb61, unwind unreachable];
    }

    bb44: {
        _401 = _267 as *const () (PtrToPtr);
        _402 = _401 as usize (Transmute);
        _403 = AlignOf(i32);
        _404 = Sub(_403, const 1_usize);
        _405 = BitAnd(_402, _404);
        _406 = Eq(_405, const 0_usize);
        assert(_406, "misaligned pointer dereference: address must be a multiple of {} but is {}", _403, _402) -> [success: bb60, unwind unreachable];
    }

    bb45: {
        _283 = core::panicking::AssertKind::Eq;
        _285 = Option::<Arguments<'_>>::None;
        _284 = core::panicking::assert_failed::<i32, i32>(move _283, _277, _278, move _285) -> unwind continue;
    }

    bb46: {
        _395 = _267 as *const () (PtrToPtr);
        _396 = _395 as usize (Transmute);
        _397 = AlignOf(i32);
        _398 = Sub(_397, const 1_usize);
        _399 = BitAnd(_396, _398);
        _400 = Eq(_399, const 0_usize);
        assert(_400, "misaligned pointer dereference: address must be a multiple of {} but is {}", _397, _396) -> [success: bb59, unwind unreachable];
    }

    bb47: {
        _296 = core::panicking::AssertKind::Eq;
        _298 = Option::<Arguments<'_>>::None;
        _297 = core::panicking::assert_failed::<usize, usize>(move _296, _290, _291, move _298) -> unwind continue;
    }

    bb48: {
        _303 = [const 1_i32, const 2_i32, const 3_i32];
        _302 = Foo::<[i32; 3]> { f: move _303 };
        _301 = &mut _302;
        _300 = &raw mut (*_301);
        _299 = move _300 as *mut Foo<[i32]> (Pointer(Unsize));
        _305 = &(*_299);
        _306 = const 0_usize;
        _307 = Len(((*_305).0: [i32]));
        _308 = Lt(_306, _307);
        assert(move _308, "index out of bounds: the length is {} but the index is {}", move _307, _306) -> [success: bb49, unwind continue];
    }

    bb49: {
        _304 = ((*_305).0: [i32])[_306];
        _310 = &_304;
        _372 = const _;
        _309 = (move _310, _372);
        _311 = (_309.0: &i32);
        _312 = (_309.1: &i32);
        _315 = (*_311);
        _316 = (*_312);
        _314 = Eq(move _315, move _316);
        _313 = Not(move _314);
        switchInt(move _313) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _317 = core::panicking::AssertKind::Eq;
        _319 = Option::<Arguments<'_>>::None;
        _318 = core::panicking::assert_failed::<i32, i32>(move _317, _311, _312, move _319) -> unwind continue;
    }

    bb51: {
        _322 = &(*_299);
        _321 = &((*_322).0: [i32]);
        _320 = Len((*_321));
        _324 = &_320;
        _371 = const _;
        _323 = (move _324, _371);
        _325 = (_323.0: &usize);
        _326 = (_323.1: &usize);
        _329 = (*_325);
        _330 = (*_326);
        _328 = Eq(move _329, move _330);
        _327 = Not(move _328);
        switchInt(move _327) -> [0: bb53, otherwise: bb52];
    }

    bb52: {
        _331 = core::panicking::AssertKind::Eq;
        _333 = Option::<Arguments<'_>>::None;
        _332 = core::panicking::assert_failed::<usize, usize>(move _331, _325, _326, move _333) -> unwind continue;
    }

    bb53: {
        _338 = [const 1_i32, const 2_i32, const 3_i32];
        _337 = (move _338,);
        _336 = &mut _337;
        _335 = &raw mut (*_336);
        _334 = move _335 as *mut ([i32],) (Pointer(Unsize));
        _340 = &(*_334);
        _341 = const 0_usize;
        _342 = Len(((*_340).0: [i32]));
        _343 = Lt(_341, _342);
        assert(move _343, "index out of bounds: the length is {} but the index is {}", move _342, _341) -> [success: bb54, unwind continue];
    }

    bb54: {
        _339 = ((*_340).0: [i32])[_341];
        _345 = &_339;
        _370 = const _;
        _344 = (move _345, _370);
        _346 = (_344.0: &i32);
        _347 = (_344.1: &i32);
        _350 = (*_346);
        _351 = (*_347);
        _349 = Eq(move _350, move _351);
        _348 = Not(move _349);
        switchInt(move _348) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _352 = core::panicking::AssertKind::Eq;
        _354 = Option::<Arguments<'_>>::None;
        _353 = core::panicking::assert_failed::<i32, i32>(move _352, _346, _347, move _354) -> unwind continue;
    }

    bb56: {
        _357 = &(*_334);
        _356 = &((*_357).0: [i32]);
        _355 = Len((*_356));
        _359 = &_355;
        _369 = const _;
        _358 = (move _359, _369);
        _360 = (_358.0: &usize);
        _361 = (_358.1: &usize);
        _364 = (*_360);
        _365 = (*_361);
        _363 = Eq(move _364, move _365);
        _362 = Not(move _363);
        switchInt(move _362) -> [0: bb58, otherwise: bb57];
    }

    bb57: {
        _366 = core::panicking::AssertKind::Eq;
        _368 = Option::<Arguments<'_>>::None;
        _367 = core::panicking::assert_failed::<usize, usize>(move _366, _360, _361, move _368) -> unwind continue;
    }

    bb58: {
        return;
    }

    bb59: {
        _287 = &(*_267);
        _286 = Len((*_287));
        _289 = &_286;
        _373 = const _;
        _288 = (move _289, _373);
        _290 = (_288.0: &usize);
        _291 = (_288.1: &usize);
        _294 = (*_290);
        _295 = (*_291);
        _293 = Eq(move _294, move _295);
        _292 = Not(move _293);
        switchInt(move _292) -> [0: bb48, otherwise: bb47];
    }

    bb60: {
        _271 = (*_267)[_272];
        _276 = &_271;
        _374 = const _;
        _275 = (move _276, _374);
        _277 = (_275.0: &i32);
        _278 = (_275.1: &i32);
        _281 = (*_277);
        _282 = (*_278);
        _280 = Eq(move _281, move _282);
        _279 = Not(move _280);
        switchInt(move _279) -> [0: bb46, otherwise: bb45];
    }

    bb61: {
        _273 = Len((*_267));
        _274 = Lt(_272, _273);
        assert(move _274, "index out of bounds: the length is {} but the index is {}", move _273, _272) -> [success: bb44, unwind continue];
    }

    bb62: {
        _255 = &(*_235);
        _254 = Len((*_255));
        _257 = &_254;
        _375 = const _;
        _256 = (move _257, _375);
        _258 = (_256.0: &usize);
        _259 = (_256.1: &usize);
        _262 = (*_258);
        _263 = (*_259);
        _261 = Eq(move _262, move _263);
        _260 = Not(move _261);
        switchInt(move _260) -> [0: bb43, otherwise: bb42];
    }

    bb63: {
        _239 = (*_235)[_240];
        _244 = &_239;
        _376 = const _;
        _243 = (move _244, _376);
        _245 = (_243.0: &i32);
        _246 = (_243.1: &i32);
        _249 = (*_245);
        _250 = (*_246);
        _248 = Eq(move _249, move _250);
        _247 = Not(move _248);
        switchInt(move _247) -> [0: bb41, otherwise: bb40];
    }

    bb64: {
        _241 = Len((*_235));
        _242 = Lt(_240, _241);
        assert(move _242, "index out of bounds: the length is {} but the index is {}", move _241, _240) -> [success: bb39, unwind continue];
    }

    bb65: {
        _104 = &(*_86);
        _103 = Len((*_104));
        _106 = &_103;
        _386 = const _;
        _105 = (move _106, _386);
        _107 = (_105.0: &usize);
        _108 = (_105.1: &usize);
        _111 = (*_107);
        _112 = (*_108);
        _110 = Eq(move _111, move _112);
        _109 = Not(move _110);
        switchInt(move _109) -> [0: bb19, otherwise: bb18];
    }

    bb66: {
        _88 = (*_86)[_89];
        _93 = &_88;
        _387 = const _;
        _92 = (move _93, _387);
        _94 = (_92.0: &i32);
        _95 = (_92.1: &i32);
        _98 = (*_94);
        _99 = (*_95);
        _97 = Eq(move _98, move _99);
        _96 = Not(move _97);
        switchInt(move _96) -> [0: bb17, otherwise: bb16];
    }

    bb67: {
        _90 = Len((*_86));
        _91 = Lt(_89, _90);
        assert(move _91, "index out of bounds: the length is {} but the index is {}", move _90, _89) -> [success: bb15, unwind continue];
    }

    bb68: {
        _74 = &(*_56);
        _73 = Len((*_74));
        _76 = &_73;
        _389 = const _;
        _75 = (move _76, _389);
        _77 = (_75.0: &usize);
        _78 = (_75.1: &usize);
        _81 = (*_77);
        _82 = (*_78);
        _80 = Eq(move _81, move _82);
        _79 = Not(move _80);
        switchInt(move _79) -> [0: bb14, otherwise: bb13];
    }

    bb69: {
        _58 = (*_56)[_59];
        _63 = &_58;
        _390 = const _;
        _62 = (move _63, _390);
        _64 = (_62.0: &i32);
        _65 = (_62.1: &i32);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb12, otherwise: bb11];
    }

    bb70: {
        _60 = Len((*_56));
        _61 = Lt(_59, _60);
        assert(move _61, "index out of bounds: the length is {} but the index is {}", move _60, _59) -> [success: bb10, unwind continue];
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 42_isize;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 42_isize;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 42_isize;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &([i32; 3],) = {
    let mut _0: &([i32; 3],);
    let mut _1: ([i32; 3],);
    let mut _2: [i32; 3];

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32];
        _1 = (move _2,);
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &Foo<[i32; 3]> = {
    let mut _0: &Foo<[i32; 3]>;
    let mut _1: Foo<[i32; 3]>;
    let mut _2: [i32; 3];

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32];
        _1 = Foo::<[i32; 3]> { f: move _2 };
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];
    let mut _1: [i32; 3];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];
    let mut _1: [i32; 3];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 42_isize;
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 42_isize;
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 42_isize;
        _0 = &_1;
        return;
    }
}
