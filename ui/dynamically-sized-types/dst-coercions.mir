// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn T::dummy(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:8:20: 8:25
    let mut _0: ();                      // return place in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:8:27: 8:27

    bb0: {
        return;                          // scope 0 at ui/dynamically-sized-types/dst-coercions.rs:8:30: 8:30
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:11:15: 11:15
    let _1: &dyn T;                      // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:12:9: 12:10
    let mut _2: &S;                      // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:12:21: 12:23
    let _3: &S;                          // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:12:21: 12:23
    let mut _5: *const S;                // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:14:27: 14:29
    let _6: &S;                          // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:14:27: 14:29
    let _8: &S;                          // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:17:23: 17:25
    let mut _10: &mut S;                 // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:20:25: 20:31
    let mut _11: &mut S;                 // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:20:25: 20:31
    let mut _12: S;                      // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:20:30: 20:31
    let mut _14: *mut S;                 // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:21:25: 21:31
    let mut _15: &mut S;                 // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:21:25: 21:31
    let mut _16: S;                      // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:21:30: 21:31
    let mut _18: &mut S;                 // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:23:21: 23:27
    let mut _19: S;                      // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:23:26: 23:27
    let mut _21: &S;                     // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:26:21: 26:27
    let _22: &mut S;                     // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:26:21: 26:27
    let mut _23: S;                      // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:26:26: 26:27
    let mut _25: *const S;               // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:27:27: 27:33
    let _26: &mut S;                     // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:27:27: 27:33
    let mut _27: S;                      // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:27:32: 27:33
    let mut _30: &S;                     // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:12:21: 12:23
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/dynamically-sized-types/dst-coercions.rs:12:9: 12:10
        let _4: *const dyn T;            // in scope 1 at ui/dynamically-sized-types/dst-coercions.rs:14:9: 14:10
        let mut _29: &S;                 // in scope 1 at ui/dynamically-sized-types/dst-coercions.rs:14:27: 14:29
        scope 2 {
            debug x => _4;               // in scope 2 at ui/dynamically-sized-types/dst-coercions.rs:14:9: 14:10
            let _7: *const S;            // in scope 2 at ui/dynamically-sized-types/dst-coercions.rs:17:9: 17:10
            let mut _28: &S;             // in scope 2 at ui/dynamically-sized-types/dst-coercions.rs:17:23: 17:25
            scope 3 {
                debug x => _7;           // in scope 3 at ui/dynamically-sized-types/dst-coercions.rs:17:9: 17:10
                let _9: &mut dyn T;      // in scope 3 at ui/dynamically-sized-types/dst-coercions.rs:20:9: 20:10
                scope 4 {
                    debug x => _9;       // in scope 4 at ui/dynamically-sized-types/dst-coercions.rs:20:9: 20:10
                    let _13: *mut dyn T; // in scope 4 at ui/dynamically-sized-types/dst-coercions.rs:21:9: 21:10
                    scope 5 {
                        debug x => _13;  // in scope 5 at ui/dynamically-sized-types/dst-coercions.rs:21:9: 21:10
                        let _17: *mut S; // in scope 5 at ui/dynamically-sized-types/dst-coercions.rs:23:9: 23:10
                        scope 6 {
                            debug x => _17; // in scope 6 at ui/dynamically-sized-types/dst-coercions.rs:23:9: 23:10
                            let _20: &dyn T; // in scope 6 at ui/dynamically-sized-types/dst-coercions.rs:26:9: 26:10
                            scope 7 {
                                debug x => _20; // in scope 7 at ui/dynamically-sized-types/dst-coercions.rs:26:9: 26:10
                                let _24: *const dyn T; // in scope 7 at ui/dynamically-sized-types/dst-coercions.rs:27:9: 27:10
                                scope 8 {
                                    debug x => _24; // in scope 8 at ui/dynamically-sized-types/dst-coercions.rs:27:9: 27:10
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _30 = const _;                   // scope 0 at ui/dynamically-sized-types/dst-coercions.rs:12:21: 12:23
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coercions.rs:12:21: 12:23
                                         // + literal: Const { ty: &S, val: Unevaluated(main, [], Some(promoted[2])) }
        _3 = _30;                        // scope 0 at ui/dynamically-sized-types/dst-coercions.rs:12:21: 12:23
        _2 = _3;                         // scope 0 at ui/dynamically-sized-types/dst-coercions.rs:12:21: 12:23
        _1 = move _2 as &dyn T (Pointer(Unsize)); // scope 0 at ui/dynamically-sized-types/dst-coercions.rs:12:21: 12:23
        _29 = const _;                   // scope 1 at ui/dynamically-sized-types/dst-coercions.rs:14:27: 14:29
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coercions.rs:14:27: 14:29
                                         // + literal: Const { ty: &S, val: Unevaluated(main, [], Some(promoted[1])) }
        _6 = _29;                        // scope 1 at ui/dynamically-sized-types/dst-coercions.rs:14:27: 14:29
        _5 = &raw const (*_6);           // scope 1 at ui/dynamically-sized-types/dst-coercions.rs:14:27: 14:29
        _4 = move _5 as *const dyn T (Pointer(Unsize)); // scope 1 at ui/dynamically-sized-types/dst-coercions.rs:14:27: 14:29
        _28 = const _;                   // scope 2 at ui/dynamically-sized-types/dst-coercions.rs:17:23: 17:25
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coercions.rs:17:23: 17:25
                                         // + literal: Const { ty: &S, val: Unevaluated(main, [], Some(promoted[0])) }
        _8 = _28;                        // scope 2 at ui/dynamically-sized-types/dst-coercions.rs:17:23: 17:25
        _7 = &raw const (*_8);           // scope 2 at ui/dynamically-sized-types/dst-coercions.rs:17:23: 17:25
        _11 = &mut _12;                  // scope 3 at ui/dynamically-sized-types/dst-coercions.rs:20:25: 20:31
        _10 = &mut (*_11);               // scope 3 at ui/dynamically-sized-types/dst-coercions.rs:20:25: 20:31
        _9 = move _10 as &mut dyn T (Pointer(Unsize)); // scope 3 at ui/dynamically-sized-types/dst-coercions.rs:20:25: 20:31
        _15 = &mut _16;                  // scope 4 at ui/dynamically-sized-types/dst-coercions.rs:21:25: 21:31
        _14 = &raw mut (*_15);           // scope 4 at ui/dynamically-sized-types/dst-coercions.rs:21:25: 21:31
        _13 = move _14 as *mut dyn T (Pointer(Unsize)); // scope 4 at ui/dynamically-sized-types/dst-coercions.rs:21:25: 21:31
        _18 = &mut _19;                  // scope 5 at ui/dynamically-sized-types/dst-coercions.rs:23:21: 23:27
        _17 = &raw mut (*_18);           // scope 5 at ui/dynamically-sized-types/dst-coercions.rs:23:21: 23:27
        _22 = &mut _23;                  // scope 6 at ui/dynamically-sized-types/dst-coercions.rs:26:21: 26:27
        _21 = &(*_22);                   // scope 6 at ui/dynamically-sized-types/dst-coercions.rs:26:21: 26:27
        _20 = move _21 as &dyn T (Pointer(Unsize)); // scope 6 at ui/dynamically-sized-types/dst-coercions.rs:26:21: 26:27
        _26 = &mut _27;                  // scope 7 at ui/dynamically-sized-types/dst-coercions.rs:27:27: 27:33
        _25 = &raw const (*_26);         // scope 7 at ui/dynamically-sized-types/dst-coercions.rs:27:27: 27:33
        _24 = move _25 as *const dyn T (Pointer(Unsize)); // scope 7 at ui/dynamically-sized-types/dst-coercions.rs:27:27: 27:33
        return;                          // scope 0 at ui/dynamically-sized-types/dst-coercions.rs:28:2: 28:2
    }
}

promoted[0] in main: &S = {
    let mut _0: &S;                      // return place in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:17:23: 17:25
    let mut _1: S;                       // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:17:24: 17:25

    bb0: {
        _1 = S;                          // scope 0 at ui/dynamically-sized-types/dst-coercions.rs:17:24: 17:25
        _0 = &_1;                        // scope 0 at ui/dynamically-sized-types/dst-coercions.rs:17:23: 17:25
        return;                          // scope 0 at ui/dynamically-sized-types/dst-coercions.rs:17:23: 17:25
    }
}

promoted[1] in main: &S = {
    let mut _0: &S;                      // return place in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:14:27: 14:29
    let mut _1: S;                       // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:14:28: 14:29

    bb0: {
        _1 = S;                          // scope 0 at ui/dynamically-sized-types/dst-coercions.rs:14:28: 14:29
        _0 = &_1;                        // scope 0 at ui/dynamically-sized-types/dst-coercions.rs:14:27: 14:29
        return;                          // scope 0 at ui/dynamically-sized-types/dst-coercions.rs:14:27: 14:29
    }
}

promoted[2] in main: &S = {
    let mut _0: &S;                      // return place in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:12:21: 12:23
    let mut _1: S;                       // in scope 0 at ui/dynamically-sized-types/dst-coercions.rs:12:22: 12:23

    bb0: {
        _1 = S;                          // scope 0 at ui/dynamically-sized-types/dst-coercions.rs:12:22: 12:23
        _0 = &_1;                        // scope 0 at ui/dynamically-sized-types/dst-coercions.rs:12:21: 12:23
        return;                          // scope 0 at ui/dynamically-sized-types/dst-coercions.rs:12:21: 12:23
    }
}
