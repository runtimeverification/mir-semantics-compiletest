// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &Fat<[isize]>) -> () {
    debug x => _1;
    let mut _0: ();
    let _2: &[isize];
    let mut _3: (&usize, &usize);
    let mut _4: &usize;
    let _5: usize;
    let mut _6: &[isize];
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: usize;
    let mut _12: usize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&isize, &isize);
    let mut _17: &isize;
    let _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: isize;
    let mut _26: isize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: (&isize, &isize);
    let mut _31: &isize;
    let _32: usize;
    let mut _33: usize;
    let mut _34: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: isize;
    let mut _40: isize;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug y => _2;
        let _7: &usize;
        let _8: &usize;
        let _21: &isize;
        let _22: &isize;
        let _35: &isize;
        let _36: &isize;
        let mut _44: &isize;
        let mut _45: &isize;
        let mut _46: &usize;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
        scope 4 {
            debug left_val => _21;
            debug right_val => _22;
            let _27: core::panicking::AssertKind;
            scope 5 {
                debug kind => _27;
            }
        }
        scope 6 {
            debug left_val => _35;
            debug right_val => _36;
            let _41: core::panicking::AssertKind;
            scope 7 {
                debug kind => _41;
            }
        }
    }

    bb0: {
        _2 = &((*_1).0: [isize]);
        _6 = &((*_1).0: [isize]);
        _5 = Len((*_6));
        _4 = &_5;
        _46 = const _;
        _3 = (move _4, _46);
        _7 = (_3.0: &usize);
        _8 = (_3.1: &usize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<usize, usize>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb2: {
        _18 = const 0_usize;
        _19 = Len((*_2));
        _20 = Lt(_18, _19);
        assert(move _20, "index out of bounds: the length is {} but the index is {}", move _19, _18) -> [success: bb3, unwind continue];
    }

    bb3: {
        _17 = &(*_2)[_18];
        _45 = const _;
        _16 = (move _17, _45);
        _21 = (_16.0: &isize);
        _22 = (_16.1: &isize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<isize, isize>(move _27, _21, _22, move _29) -> unwind continue;
    }

    bb5: {
        _32 = const 1_usize;
        _33 = Len(((*_1).0: [isize]));
        _34 = Lt(_32, _33);
        assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _32) -> [success: bb6, unwind continue];
    }

    bb6: {
        _31 = &((*_1).0: [isize])[_32];
        _44 = const _;
        _30 = (move _31, _44);
        _35 = (_30.0: &isize);
        _36 = (_30.1: &isize);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<isize, isize>(move _41, _35, _36, move _43) -> unwind continue;
    }

    bb8: {
        return;
    }
}

promoted[0] in foo: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in foo: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in foo: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

fn foo2(_1: &Fat<[T]>) -> () {
    debug x => _1;
    let mut _0: ();
    let _2: &[T];
    let mut _4: (&usize, &usize);
    let mut _5: &usize;
    let _6: usize;
    let mut _7: &[T];
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&Bar, &Bar);
    let mut _18: &Bar;
    let _19: Bar;
    let mut _20: &T;
    let _21: usize;
    let mut _22: usize;
    let mut _23: bool;
    let mut _24: &Bar;
    let mut _27: bool;
    let mut _28: bool;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: (&Bar, &Bar);
    let mut _33: &Bar;
    let _34: Bar;
    let mut _35: &T;
    let _36: usize;
    let mut _37: usize;
    let mut _38: bool;
    let mut _39: &Bar;
    let mut _42: bool;
    let mut _43: bool;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug y => _2;
        let _3: Bar;
        scope 2 {
            debug bar => const Bar;
            let _8: &usize;
            let _9: &usize;
            let _25: &Bar;
            let _26: &Bar;
            let _40: &Bar;
            let _41: &Bar;
            let mut _47: &usize;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
            scope 5 {
                debug left_val => _25;
                debug right_val => _26;
                let _29: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _29;
                }
            }
            scope 7 {
                debug left_val => _40;
                debug right_val => _41;
                let _44: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _44;
                }
            }
        }
    }

    bb0: {
        _2 = &((*_1).0: [T]);
        _7 = &((*_1).0: [T]);
        _6 = Len((*_7));
        _5 = &_6;
        _47 = const _;
        _4 = (move _5, _47);
        _8 = (_4.0: &usize);
        _9 = (_4.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb2: {
        _21 = const 0_usize;
        _22 = Len((*_2));
        _23 = Lt(_21, _22);
        assert(move _23, "index out of bounds: the length is {} but the index is {}", move _22, _21) -> [success: bb3, unwind continue];
    }

    bb3: {
        _20 = &(*_2)[_21];
        _19 = <T as ToBar>::to_bar(move _20) -> [return: bb4, unwind continue];
    }

    bb4: {
        _18 = &_19;
        _24 = &_3;
        _17 = (move _18, move _24);
        _25 = (_17.0: &Bar);
        _26 = (_17.1: &Bar);
        _28 = <Bar as PartialEq>::eq(_25, _26) -> [return: bb5, unwind continue];
    }

    bb5: {
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<Bar, Bar>(move _29, _25, _26, move _31) -> unwind continue;
    }

    bb7: {
        _36 = const 1_usize;
        _37 = Len(((*_1).0: [T]));
        _38 = Lt(_36, _37);
        assert(move _38, "index out of bounds: the length is {} but the index is {}", move _37, _36) -> [success: bb8, unwind continue];
    }

    bb8: {
        _35 = &((*_1).0: [T])[_36];
        _34 = <T as ToBar>::to_bar(move _35) -> [return: bb9, unwind continue];
    }

    bb9: {
        _33 = &_34;
        _39 = &_3;
        _32 = (move _33, move _39);
        _40 = (_32.0: &Bar);
        _41 = (_32.1: &Bar);
        _43 = <Bar as PartialEq>::eq(_40, _41) -> [return: bb10, unwind continue];
    }

    bb10: {
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<Bar, Bar>(move _44, _40, _41, move _46) -> unwind continue;
    }

    bb12: {
        return;
    }
}

promoted[0] in foo2: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-struct-sole.rs:25:16: 25:21>::clone(_1: &Bar) -> Bar {
    debug self => _1;
    let mut _0: Bar;

    bb0: {
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-struct-sole.rs:25:23: 25:32>::eq(_1: &Bar, _2: &Bar) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-struct-sole.rs:25:34: 25:36>::assert_receiver_is_total_eq(_1: &Bar) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-struct-sole.rs:25:38: 25:43>::fmt(_1: &Bar, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Bar";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-struct-sole.rs:32:1: 32:19>::to_bar(_1: &Bar) -> Bar {
    debug self => _1;
    let mut _0: Bar;

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Fat<[isize; 3]>;
    let mut _2: [isize; 3];
    let _3: ();
    let mut _4: &Fat<[isize]>;
    let _5: &Fat<[isize; 3]>;
    let _7: ();
    let mut _8: &Fat<[isize]>;
    let _10: ();
    let _12: &Fat<[isize; 3]>;
    let _13: ();
    let _15: ();
    let _17: ();
    let mut _18: &Fat<[Bar]>;
    let _19: &Fat<[Bar; 3]>;
    let _21: ();
    let mut _22: &Fat<[Bar]>;
    let _24: ();
    let _26: &Fat<[Bar; 3]>;
    let _27: ();
    let _29: &Fat<[Bar; 3]>;
    let _30: Fat<[Bar; 3]>;
    let _31: ();
    let mut _33: &mut Fat<[isize; 3]>;
    let mut _34: Fat<[isize; 3]>;
    let mut _35: [isize; 3];
    let _36: usize;
    let mut _37: usize;
    let mut _38: bool;
    let mut _39: (&isize, &isize);
    let mut _40: &isize;
    let _41: usize;
    let mut _42: usize;
    let mut _43: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: isize;
    let mut _49: isize;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&isize, &isize);
    let mut _54: &isize;
    let _55: usize;
    let mut _56: usize;
    let mut _57: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: isize;
    let mut _63: isize;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: (&isize, &isize);
    let mut _68: &isize;
    let _69: usize;
    let mut _70: usize;
    let mut _71: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: isize;
    let mut _77: isize;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: &[isize];
    let mut _85: !;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: &[Bar];
    let mut _90: !;
    scope 1 {
        debug f1 => _1;
        let _6: &Fat<[isize; 3]>;
        scope 2 {
            debug f2 => _6;
            let _9: &Fat<[isize]>;
            scope 3 {
                debug f3 => _9;
                let _11: &Fat<[isize]>;
                scope 4 {
                    debug f4 => _11;
                    let _14: &Fat<[isize]>;
                    let mut _96: &Fat<[isize; 3]>;
                    scope 5 {
                        debug f5 => _14;
                        scope 6 {
                            debug bar => const Bar;
                            let _16: Fat<[Bar; 3]>;
                            scope 7 {
                                debug f1 => const Fat::<[Bar; 3]> {{ ptr: [Bar, Bar, Bar] }};
                                let _20: &Fat<[Bar; 3]>;
                                scope 8 {
                                    debug f2 => _20;
                                    let _23: &Fat<[Bar]>;
                                    scope 9 {
                                        debug f3 => _23;
                                        let _25: &Fat<[Bar]>;
                                        scope 10 {
                                            debug f4 => _25;
                                            let _28: &Fat<[Bar]>;
                                            scope 11 {
                                                debug f5 => _28;
                                                let _32: &mut Fat<[isize]>;
                                                scope 12 {
                                                    debug f5 => _32;
                                                    let _44: &isize;
                                                    let _45: &isize;
                                                    let _58: &isize;
                                                    let _59: &isize;
                                                    let _72: &isize;
                                                    let _73: &isize;
                                                    let _81: &Fat<[isize]>;
                                                    let mut _92: &Fat<[isize; 0]>;
                                                    let mut _93: &isize;
                                                    let mut _94: &isize;
                                                    let mut _95: &isize;
                                                    scope 13 {
                                                        debug left_val => _44;
                                                        debug right_val => _45;
                                                        let _50: core::panicking::AssertKind;
                                                        scope 14 {
                                                            debug kind => _50;
                                                        }
                                                    }
                                                    scope 15 {
                                                        debug left_val => _58;
                                                        debug right_val => _59;
                                                        let _64: core::panicking::AssertKind;
                                                        scope 16 {
                                                            debug kind => _64;
                                                        }
                                                    }
                                                    scope 17 {
                                                        debug left_val => _72;
                                                        debug right_val => _73;
                                                        let _78: core::panicking::AssertKind;
                                                        scope 18 {
                                                            debug kind => _78;
                                                        }
                                                    }
                                                    scope 19 {
                                                        debug f5 => _81;
                                                        let _86: &Fat<[Bar]>;
                                                        let mut _91: &Fat<[Bar; 0]>;
                                                        scope 20 {
                                                            debug f5 => _86;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = [const 1_isize, const 2_isize, const 3_isize];
        _1 = Fat::<[isize; 3]> { ptr: move _2 };
        _5 = &_1;
        _4 = _5 as &Fat<[isize]> (Pointer(Unsize));
        _3 = foo(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_1;
        _8 = _6 as &Fat<[isize]> (Pointer(Unsize));
        _7 = foo(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = _6 as &Fat<[isize]> (Pointer(Unsize));
        _10 = foo(_9) -> [return: bb3, unwind continue];
    }

    bb3: {
        _12 = &_1;
        _11 = _12 as &Fat<[isize]> (Pointer(Unsize));
        _13 = foo(_11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _96 = const _;
        _14 = _96 as &Fat<[isize]> (Pointer(Unsize));
        _15 = foo(_14) -> [return: bb5, unwind continue];
    }

    bb5: {
        _19 = &_16;
        _18 = _19 as &Fat<[Bar]> (Pointer(Unsize));
        _17 = foo2::<Bar>(move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        _20 = &_16;
        _22 = _20 as &Fat<[Bar]> (Pointer(Unsize));
        _21 = foo2::<Bar>(move _22) -> [return: bb7, unwind continue];
    }

    bb7: {
        _23 = _20 as &Fat<[Bar]> (Pointer(Unsize));
        _24 = foo2::<Bar>(_23) -> [return: bb8, unwind continue];
    }

    bb8: {
        _26 = &_16;
        _25 = _26 as &Fat<[Bar]> (Pointer(Unsize));
        _27 = foo2::<Bar>(_25) -> [return: bb9, unwind continue];
    }

    bb9: {
        _29 = &_30;
        _28 = _29 as &Fat<[Bar]> (Pointer(Unsize));
        _31 = foo2::<Bar>(_28) -> [return: bb10, unwind continue];
    }

    bb10: {
        _35 = [const 1_isize, const 2_isize, const 3_isize];
        _34 = Fat::<[isize; 3]> { ptr: move _35 };
        _33 = &mut _34;
        _32 = _33 as &mut Fat<[isize]> (Pointer(Unsize));
        _36 = const 1_usize;
        _37 = Len(((*_32).0: [isize]));
        _38 = Lt(_36, _37);
        assert(move _38, "index out of bounds: the length is {} but the index is {}", move _37, _36) -> [success: bb11, unwind continue];
    }

    bb11: {
        ((*_32).0: [isize])[_36] = const 34_isize;
        _41 = const 0_usize;
        _42 = Len(((*_32).0: [isize]));
        _43 = Lt(_41, _42);
        assert(move _43, "index out of bounds: the length is {} but the index is {}", move _42, _41) -> [success: bb12, unwind continue];
    }

    bb12: {
        _40 = &((*_32).0: [isize])[_41];
        _95 = const _;
        _39 = (move _40, _95);
        _44 = (_39.0: &isize);
        _45 = (_39.1: &isize);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<isize, isize>(move _50, _44, _45, move _52) -> unwind continue;
    }

    bb14: {
        _55 = const 1_usize;
        _56 = Len(((*_32).0: [isize]));
        _57 = Lt(_55, _56);
        assert(move _57, "index out of bounds: the length is {} but the index is {}", move _56, _55) -> [success: bb15, unwind continue];
    }

    bb15: {
        _54 = &((*_32).0: [isize])[_55];
        _94 = const _;
        _53 = (move _54, _94);
        _58 = (_53.0: &isize);
        _59 = (_53.1: &isize);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<isize, isize>(move _64, _58, _59, move _66) -> unwind continue;
    }

    bb17: {
        _69 = const 2_usize;
        _70 = Len(((*_32).0: [isize]));
        _71 = Lt(_69, _70);
        assert(move _71, "index out of bounds: the length is {} but the index is {}", move _70, _69) -> [success: bb18, unwind continue];
    }

    bb18: {
        _68 = &((*_32).0: [isize])[_69];
        _93 = const _;
        _67 = (move _68, _93);
        _72 = (_67.0: &isize);
        _73 = (_67.1: &isize);
        _76 = (*_72);
        _77 = (*_73);
        _75 = Eq(move _76, move _77);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<isize, isize>(move _78, _72, _73, move _80) -> unwind continue;
    }

    bb20: {
        _92 = const _;
        _81 = _92 as &Fat<[isize]> (Pointer(Unsize));
        _84 = &((*_81).0: [isize]);
        _83 = core::slice::<impl [isize]>::is_empty(move _84) -> [return: bb21, unwind continue];
    }

    bb21: {
        _82 = Not(move _83);
        switchInt(move _82) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _85 = core::panicking::panic(const "assertion failed: f5.ptr.is_empty()") -> unwind continue;
    }

    bb23: {
        _91 = const _;
        _86 = _91 as &Fat<[Bar]> (Pointer(Unsize));
        _89 = &((*_86).0: [Bar]);
        _88 = core::slice::<impl [Bar]>::is_empty(move _89) -> [return: bb24, unwind continue];
    }

    bb24: {
        _87 = Not(move _88);
        switchInt(move _87) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _90 = core::panicking::panic(const "assertion failed: f5.ptr.is_empty()") -> unwind continue;
    }

    bb26: {
        return;
    }
}

promoted[0] in main: &Fat<[Bar; 0]> = {
    let mut _0: &Fat<[Bar; 0]>;
    let mut _1: Fat<[Bar; 0]>;
    let mut _2: [Bar; 0];

    bb0: {
        _2 = [];
        _1 = Fat::<[Bar; 0]> { ptr: move _2 };
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Fat<[isize; 0]> = {
    let mut _0: &Fat<[isize; 0]>;
    let mut _1: Fat<[isize; 0]>;
    let mut _2: [isize; 0];

    bb0: {
        _2 = [];
        _1 = Fat::<[isize; 0]> { ptr: move _2 };
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 34_isize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &Fat<[isize; 3]> = {
    let mut _0: &Fat<[isize; 3]>;
    let mut _1: Fat<[isize; 3]>;
    let mut _2: [isize; 3];

    bb0: {
        _2 = [const 1_isize, const 2_isize, const 3_isize];
        _1 = Fat::<[isize; 3]> { ptr: move _2 };
        _0 = &_1;
        return;
    }
}
