// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &Fat<[isize]>) -> () {
    debug x => _1;                       // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:10:8: 10:9
    let mut _0: ();                      // return place in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:10:26: 10:26
    let _2: &[isize];                    // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:11:9: 11:10
    let mut _3: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: usize;                       // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:12:16: 12:27
    let mut _6: &[isize];                // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:12:16: 12:27
    let mut _7: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _23: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _24: usize;                      // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:13:18: 13:19
    let mut _25: usize;                  // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:13:16: 13:20
    let mut _26: bool;                   // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:13:16: 13:20
    let mut _27: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _32: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _33: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _35: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _36: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _37: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _38: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _39: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _40: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _42: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _43: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _44: usize;                      // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:14:22: 14:23
    let mut _45: usize;                  // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:14:16: 14:24
    let mut _46: bool;                   // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:14:16: 14:24
    let mut _47: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _50: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _51: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _52: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _53: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _55: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _56: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _57: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _58: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _59: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _60: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/dynamically-sized-types/dst-struct-sole.rs:11:9: 11:10
        let _8: &usize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _9: &usize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _28: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _29: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _48: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _49: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _62: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _63: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _64: &usize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _8;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _9;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _14: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _14;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _28;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _29;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _34: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _34;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug left_val => _48;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _49;      // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _54: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 7 {
                debug kind => _54;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _2 = &((*_1).0: [isize]);        // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:11:13: 11:19
        _6 = &((*_1).0: [isize]);        // scope 1 at ui/dynamically-sized-types/dst-struct-sole.rs:12:16: 12:27
        _5 = Len((*_6));                 // scope 1 at ui/dynamically-sized-types/dst-struct-sole.rs:12:16: 12:27
        _4 = &_5;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _64 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(foo, [], Some(promoted[2])) }
        _7 = _64;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _7);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_3.0: &usize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_3.1: &usize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = const 3_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb2, otherwise: bb1]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<usize, usize>(move _16, move _17, move _19, move _21); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb2: {
        _24 = const 0_usize;             // scope 1 at ui/dynamically-sized-types/dst-struct-sole.rs:13:18: 13:19
        _25 = Len((*_2));                // scope 1 at ui/dynamically-sized-types/dst-struct-sole.rs:13:16: 13:20
        _26 = Lt(_24, _25);              // scope 1 at ui/dynamically-sized-types/dst-struct-sole.rs:13:16: 13:20
        assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _24) -> bb3; // scope 1 at ui/dynamically-sized-types/dst-struct-sole.rs:13:16: 13:20
    }

    bb3: {
        _23 = &(*_2)[_24];               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _63 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(foo, [], Some(promoted[1])) }
        _27 = _63;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _22 = (move _23, move _27);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _28 = (_22.0: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _29 = (_22.1: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _32 = (*_28);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _33 = const 1_isize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _31 = Eq(move _32, move _33);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _30 = Not(move _31);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _30) -> [0: bb5, otherwise: bb4]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _34 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _38;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _29;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = _40;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _35 = core::panicking::assert_failed::<isize, isize>(move _36, move _37, move _39, move _41); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb5: {
        _44 = const 1_usize;             // scope 1 at ui/dynamically-sized-types/dst-struct-sole.rs:14:22: 14:23
        _45 = Len(((*_1).0: [isize]));   // scope 1 at ui/dynamically-sized-types/dst-struct-sole.rs:14:16: 14:24
        _46 = Lt(_44, _45);              // scope 1 at ui/dynamically-sized-types/dst-struct-sole.rs:14:16: 14:24
        assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _44) -> bb6; // scope 1 at ui/dynamically-sized-types/dst-struct-sole.rs:14:16: 14:24
    }

    bb6: {
        _43 = &((*_1).0: [isize])[_44];  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _62 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(foo, [], Some(promoted[0])) }
        _47 = _62;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _42 = (move _43, move _47);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _48 = (_42.0: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _49 = (_42.1: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _52 = (*_48);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _53 = const 2_isize;             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _51 = Eq(move _52, move _53);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _50 = Not(move _51);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _50) -> [0: bb8, otherwise: bb7]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _54 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _56 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = _48;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _58;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _60 = _49;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _59 = _60;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _55 = core::panicking::assert_failed::<isize, isize>(move _56, move _57, move _59, move _61); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:15:2: 15:2
    }
}

promoted[0] in foo: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:14:26: 14:27

    bb0: {
        _1 = const 2_isize;              // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:14:26: 14:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in foo: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:13:22: 13:23

    bb0: {
        _1 = const 1_isize;              // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:13:22: 13:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in foo: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:12:29: 12:30

    bb0: {
        _1 = const 3_usize;              // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:12:29: 12:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn foo2(_1: &Fat<[T]>) -> () {
    debug x => _1;                       // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:17:18: 17:19
    let mut _0: ();                      // return place in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:17:32: 17:32
    let _2: &[T];                        // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:18:9: 18:10
    let mut _4: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _6: usize;                       // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:20:16: 20:27
    let mut _7: &[T];                    // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:20:16: 20:27
    let mut _8: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _23: (&Bar, &Bar);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _24: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _25: Bar;                        // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:21:16: 21:29
    let mut _26: &T;                     // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:21:16: 21:29
    let _27: usize;                      // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:21:18: 21:19
    let mut _28: usize;                  // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:21:16: 21:20
    let mut _29: bool;                   // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:21:16: 21:20
    let mut _30: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _33: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _34: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _35: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _36: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _38: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _39: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _40: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _41: &Bar;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _42: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _43: &Bar;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _45: (&Bar, &Bar);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _46: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _47: Bar;                        // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:22:16: 22:33
    let mut _48: &T;                     // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:22:16: 22:33
    let _49: usize;                      // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:22:22: 22:23
    let mut _50: usize;                  // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:22:16: 22:24
    let mut _51: bool;                   // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:22:16: 22:24
    let mut _52: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _55: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _56: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _57: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _58: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _60: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _61: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _62: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _63: &Bar;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _64: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _65: &Bar;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/dynamically-sized-types/dst-struct-sole.rs:18:9: 18:10
        let _3: Bar;                     // in scope 1 at ui/dynamically-sized-types/dst-struct-sole.rs:19:9: 19:12
        scope 2 {
            debug bar => _3;             // in scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:19:9: 19:12
            let _9: &usize;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _10: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _31: &Bar;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _32: &Bar;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _53: &Bar;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _54: &Bar;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _67: &usize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _9;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _10;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _15: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _15;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug left_val => _31;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _32;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _37: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 6 {
                    debug kind => _37;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 7 {
                debug left_val => _53;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _54;  // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _59: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 8 {
                    debug kind => _59;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _2 = &((*_1).0: [T]);            // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:18:13: 18:19
        _7 = &((*_1).0: [T]);            // scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:20:16: 20:27
        _6 = Len((*_7));                 // scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:20:16: 20:27
        _5 = &_6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _67 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(foo2, [T], Some(promoted[0])) }
        _8 = _67;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _8);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_4.0: &usize);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_4.1: &usize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = (*_9);                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = (*_10);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = Eq(move _13, move _14);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _11 = Not(move _12);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _15 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<usize, usize>(move _17, move _18, move _20, move _22); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb2: {
        _27 = const 0_usize;             // scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:21:18: 21:19
        _28 = Len((*_2));                // scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:21:16: 21:20
        _29 = Lt(_27, _28);              // scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:21:16: 21:20
        assert(move _29, "index out of bounds: the length is {} but the index is {}", move _28, _27) -> bb3; // scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:21:16: 21:20
    }

    bb3: {
        _26 = &(*_2)[_27];               // scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:21:16: 21:29
        _25 = <T as ToBar>::to_bar(move _26) -> bb4; // scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:21:16: 21:29
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:21:21: 21:27
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> Bar {<T as ToBar>::to_bar}, val: Value(<ZST>) }
    }

    bb4: {
        _24 = &_25;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _30 = &_3;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _23 = (move _24, move _30);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _31 = (_23.0: &Bar);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _32 = (_23.1: &Bar);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _35 = _31;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _36 = _32;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _34 = <Bar as PartialEq>::eq(move _35, move _36) -> bb5; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Bar, &'b Bar) -> bool {<Bar as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _33 = Not(move _34);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _33) -> [0: bb7, otherwise: bb6]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _37 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _41 = _31;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _41;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _43 = _32;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = _43;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _44 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _38 = core::panicking::assert_failed::<Bar, Bar>(move _39, move _40, move _42, move _44); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Bar, &'b Bar, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Bar, Bar>}, val: Value(<ZST>) }
    }

    bb7: {
        _49 = const 1_usize;             // scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:22:22: 22:23
        _50 = Len(((*_1).0: [T]));       // scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:22:16: 22:24
        _51 = Lt(_49, _50);              // scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:22:16: 22:24
        assert(move _51, "index out of bounds: the length is {} but the index is {}", move _50, _49) -> bb8; // scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:22:16: 22:24
    }

    bb8: {
        _48 = &((*_1).0: [T])[_49];      // scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:22:16: 22:33
        _47 = <T as ToBar>::to_bar(move _48) -> bb9; // scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:22:16: 22:33
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:22:25: 22:31
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> Bar {<T as ToBar>::to_bar}, val: Value(<ZST>) }
    }

    bb9: {
        _46 = &_47;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _52 = &_3;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _45 = (move _46, move _52);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _53 = (_45.0: &Bar);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _54 = (_45.1: &Bar);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _57 = _53;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _58 = _54;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _56 = <Bar as PartialEq>::eq(move _57, move _58) -> bb10; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Bar, &'b Bar) -> bool {<Bar as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _55 = Not(move _56);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _55) -> [0: bb12, otherwise: bb11]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _59 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _61 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _63 = _53;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _62 = _63;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _65 = _54;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _64 = _65;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _66 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _60 = core::panicking::assert_failed::<Bar, Bar>(move _61, move _62, move _64, move _66); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Bar, &'b Bar, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Bar, Bar>}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:23:2: 23:2
    }
}

promoted[0] in foo2: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:20:29: 20:30

    bb0: {
        _1 = const 3_usize;              // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:20:29: 20:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn <impl at ui/dynamically-sized-types/dst-struct-sole.rs:25:16: 25:21>::clone(_1: &Bar) -> Bar {
    debug self => _1;                    // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:16: 25:21
    let mut _0: Bar;                     // return place in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:16: 25:21

    bb0: {
        return;                          // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:21: 25:21
    }
}

fn <impl at ui/dynamically-sized-types/dst-struct-sole.rs:25:23: 25:32>::eq(_1: &Bar, _2: &Bar) -> bool {
    debug self => _1;                    // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:23: 25:32
    debug other => _2;                   // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:23: 25:32
    let mut _0: bool;                    // return place in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:23: 25:32

    bb0: {
        _0 = const true;                 // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:23: 25:32
        return;                          // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:32: 25:32
    }
}

fn <impl at ui/dynamically-sized-types/dst-struct-sole.rs:25:34: 25:36>::assert_receiver_is_total_eq(_1: &Bar) -> () {
    debug self => _1;                    // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:34: 25:36
    let mut _0: ();                      // return place in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:34: 25:36

    bb0: {
        return;                          // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:36: 25:36
    }
}

fn <impl at ui/dynamically-sized-types/dst-struct-sole.rs:25:38: 25:43>::fmt(_1: &Bar, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:38: 25:43
    debug f => _2;                       // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:38: 25:43
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:38: 25:43
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:38: 25:43
    let mut _4: &str;                    // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:38: 25:43
    let _5: &str;                        // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:38: 25:43

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:38: 25:43
        _5 = const "Bar";                // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:38: 25:43
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:25:38: 25:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:38: 25:43
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:38: 25:43
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:25:38: 25:43
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:25:43: 25:43
    }
}

fn <impl at ui/dynamically-sized-types/dst-struct-sole.rs:32:1: 32:19>::to_bar(_1: &Bar) -> Bar {
    debug self => _1;                    // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:33:15: 33:20
    let mut _0: Bar;                     // return place in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:33:25: 33:28

    bb0: {
        return;                          // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:35:6: 35:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:38:15: 38:15
    let _1: Fat<[isize; 3]>;             // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:40:9: 40:11
    let mut _2: [isize; 3];              // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:40:25: 40:34
    let _3: ();                          // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:41:5: 41:13
    let mut _4: &Fat<[isize]>;           // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:41:9: 41:12
    let mut _5: &Fat<[isize; 3]>;        // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:41:9: 41:12
    let _6: &Fat<[isize; 3]>;            // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:41:9: 41:12
    let _8: ();                          // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:43:5: 43:12
    let mut _9: &Fat<[isize]>;           // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:43:9: 43:11
    let mut _10: &Fat<[isize; 3]>;       // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:43:9: 43:11
    let mut _12: &Fat<[isize; 3]>;       // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:44:29: 44:31
    let _13: ();                         // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:45:5: 45:12
    let mut _14: &Fat<[isize]>;          // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:45:9: 45:11
    let mut _16: &Fat<[isize; 3]>;       // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:46:29: 46:32
    let _17: &Fat<[isize; 3]>;           // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:46:29: 46:32
    let _18: ();                         // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:47:5: 47:12
    let mut _19: &Fat<[isize]>;          // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:47:9: 47:11
    let mut _21: &Fat<[isize; 3]>;       // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:48:29: 48:52
    let _22: &Fat<[isize; 3]>;           // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:48:29: 48:52
    let _23: ();                         // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:49:5: 49:12
    let mut _24: &Fat<[isize]>;          // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:49:9: 49:11
    let _27: ();                         // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:54:5: 54:14
    let mut _28: &Fat<[Bar]>;            // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:54:10: 54:13
    let mut _29: &Fat<[Bar; 3]>;         // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:54:10: 54:13
    let _30: &Fat<[Bar; 3]>;             // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:54:10: 54:13
    let _32: ();                         // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:56:5: 56:13
    let mut _33: &Fat<[Bar]>;            // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:56:10: 56:12
    let mut _34: &Fat<[Bar; 3]>;         // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:56:10: 56:12
    let mut _36: &Fat<[Bar; 3]>;         // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:57:27: 57:29
    let _37: ();                         // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:58:5: 58:13
    let mut _38: &Fat<[Bar]>;            // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:58:10: 58:12
    let mut _40: &Fat<[Bar; 3]>;         // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:59:27: 59:30
    let _41: &Fat<[Bar; 3]>;             // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:59:27: 59:30
    let _42: ();                         // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:60:5: 60:13
    let mut _43: &Fat<[Bar]>;            // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:60:10: 60:12
    let mut _45: &Fat<[Bar; 3]>;         // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:61:27: 61:56
    let _46: &Fat<[Bar; 3]>;             // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:61:27: 61:56
    let _47: Fat<[Bar; 3]>;              // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:61:28: 61:56
    let _48: ();                         // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:62:5: 62:13
    let mut _49: &Fat<[Bar]>;            // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:62:10: 62:12
    let mut _51: &mut Fat<[isize; 3]>;   // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:65:33: 65:60
    let mut _52: &mut Fat<[isize; 3]>;   // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:65:33: 65:60
    let mut _53: Fat<[isize; 3]>;        // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:65:38: 65:60
    let mut _54: [isize; 3];             // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:65:49: 65:58
    let _55: usize;                      // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:66:12: 66:13
    let mut _56: usize;                  // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:66:5: 66:14
    let mut _57: bool;                   // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:66:5: 66:14
    let mut _58: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _59: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _60: usize;                      // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:67:23: 67:24
    let mut _61: usize;                  // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:67:16: 67:25
    let mut _62: bool;                   // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:67:16: 67:25
    let mut _63: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _66: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _67: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _68: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _69: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _71: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _72: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _73: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _74: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _75: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _76: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _77: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _78: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _79: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _80: usize;                      // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:68:23: 68:24
    let mut _81: usize;                  // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:68:16: 68:25
    let mut _82: bool;                   // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:68:16: 68:25
    let mut _83: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _86: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _87: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _88: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _89: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _91: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _92: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _93: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _94: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _95: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _96: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _97: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _98: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _99: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _100: usize;                     // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:69:23: 69:24
    let mut _101: usize;                 // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:69:16: 69:25
    let mut _102: bool;                  // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:69:16: 69:25
    let mut _103: &isize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _106: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _107: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _108: isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _109: isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _111: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _112: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _113: &isize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _114: &isize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _115: &isize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _116: &isize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _117: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _119: &Fat<[isize; 0]>;      // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:72:29: 72:45
    let _120: &Fat<[isize; 0]>;          // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:72:29: 72:45
    let mut _121: bool;                  // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:73:5: 73:31
    let mut _122: bool;                  // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:73:13: 73:30
    let mut _123: &[isize];              // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:73:13: 73:30
    let mut _124: !;                     // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:73:5: 73:31
    let mut _126: &Fat<[Bar; 0]>;        // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:74:27: 74:43
    let _127: &Fat<[Bar; 0]>;            // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:74:27: 74:43
    let mut _128: bool;                  // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:75:5: 75:31
    let mut _129: bool;                  // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:75:13: 75:30
    let mut _130: &[Bar];                // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:75:13: 75:30
    let mut _131: !;                     // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:75:5: 75:31
    scope 1 {
        debug f1 => _1;                  // in scope 1 at ui/dynamically-sized-types/dst-struct-sole.rs:40:9: 40:11
        let _7: &Fat<[isize; 3]>;        // in scope 1 at ui/dynamically-sized-types/dst-struct-sole.rs:42:9: 42:11
        scope 2 {
            debug f2 => _7;              // in scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:42:9: 42:11
            let _11: &Fat<[isize]>;      // in scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:44:9: 44:11
            scope 3 {
                debug f3 => _11;         // in scope 3 at ui/dynamically-sized-types/dst-struct-sole.rs:44:9: 44:11
                let _15: &Fat<[isize]>;  // in scope 3 at ui/dynamically-sized-types/dst-struct-sole.rs:46:9: 46:11
                scope 4 {
                    debug f4 => _15;     // in scope 4 at ui/dynamically-sized-types/dst-struct-sole.rs:46:9: 46:11
                    let _20: &Fat<[isize]>; // in scope 4 at ui/dynamically-sized-types/dst-struct-sole.rs:48:9: 48:11
                    let mut _137: &Fat<[isize; 3]>; // in scope 4 at ui/dynamically-sized-types/dst-struct-sole.rs:48:29: 48:52
                    scope 5 {
                        debug f5 => _20; // in scope 5 at ui/dynamically-sized-types/dst-struct-sole.rs:48:9: 48:11
                        let _25: Bar;    // in scope 5 at ui/dynamically-sized-types/dst-struct-sole.rs:52:9: 52:12
                        scope 6 {
                            debug bar => _25; // in scope 6 at ui/dynamically-sized-types/dst-struct-sole.rs:52:9: 52:12
                            let _26: Fat<[Bar; 3]>; // in scope 6 at ui/dynamically-sized-types/dst-struct-sole.rs:53:9: 53:11
                            scope 7 {
                                debug f1 => _26; // in scope 7 at ui/dynamically-sized-types/dst-struct-sole.rs:53:9: 53:11
                                let _31: &Fat<[Bar; 3]>; // in scope 7 at ui/dynamically-sized-types/dst-struct-sole.rs:55:9: 55:11
                                scope 8 {
                                    debug f2 => _31; // in scope 8 at ui/dynamically-sized-types/dst-struct-sole.rs:55:9: 55:11
                                    let _35: &Fat<[Bar]>; // in scope 8 at ui/dynamically-sized-types/dst-struct-sole.rs:57:9: 57:11
                                    scope 9 {
                                        debug f3 => _35; // in scope 9 at ui/dynamically-sized-types/dst-struct-sole.rs:57:9: 57:11
                                        let _39: &Fat<[Bar]>; // in scope 9 at ui/dynamically-sized-types/dst-struct-sole.rs:59:9: 59:11
                                        scope 10 {
                                            debug f4 => _39; // in scope 10 at ui/dynamically-sized-types/dst-struct-sole.rs:59:9: 59:11
                                            let _44: &Fat<[Bar]>; // in scope 10 at ui/dynamically-sized-types/dst-struct-sole.rs:61:9: 61:11
                                            scope 11 {
                                                debug f5 => _44; // in scope 11 at ui/dynamically-sized-types/dst-struct-sole.rs:61:9: 61:11
                                                let _50: &mut Fat<[isize]>; // in scope 11 at ui/dynamically-sized-types/dst-struct-sole.rs:65:9: 65:11
                                                scope 12 {
                                                    debug f5 => _50; // in scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:65:9: 65:11
                                                    let _64: &isize; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                    let _65: &isize; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                    let _84: &isize; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                    let _85: &isize; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                    let _104: &isize; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                    let _105: &isize; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                    let _118: &Fat<[isize]>; // in scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:72:9: 72:11
                                                    let mut _133: &Fat<[isize; 0]>; // in scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:72:29: 72:45
                                                    let mut _134: &isize; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                    let mut _135: &isize; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                    let mut _136: &isize; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                    scope 13 {
                                                        debug left_val => _64; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                        debug right_val => _65; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                        let _70: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                        scope 14 {
                                                            debug kind => _70; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                        }
                                                    }
                                                    scope 15 {
                                                        debug left_val => _84; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                        debug right_val => _85; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                        let _90: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                        scope 16 {
                                                            debug kind => _90; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                        }
                                                    }
                                                    scope 17 {
                                                        debug left_val => _104; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                        debug right_val => _105; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                        let _110: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                        scope 18 {
                                                            debug kind => _110; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                        }
                                                    }
                                                    scope 19 {
                                                        debug f5 => _118; // in scope 19 at ui/dynamically-sized-types/dst-struct-sole.rs:72:9: 72:11
                                                        let _125: &Fat<[Bar]>; // in scope 19 at ui/dynamically-sized-types/dst-struct-sole.rs:74:9: 74:11
                                                        let mut _132: &Fat<[Bar; 0]>; // in scope 19 at ui/dynamically-sized-types/dst-struct-sole.rs:74:27: 74:43
                                                        scope 20 {
                                                            debug f5 => _125; // in scope 20 at ui/dynamically-sized-types/dst-struct-sole.rs:74:9: 74:11
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = [const 1_isize, const 2_isize, const 3_isize]; // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:40:25: 40:34
        _1 = Fat::<[isize; 3]> { ptr: move _2 }; // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:40:14: 40:36
        _6 = &_1;                        // scope 1 at ui/dynamically-sized-types/dst-struct-sole.rs:41:9: 41:12
        _5 = _6;                         // scope 1 at ui/dynamically-sized-types/dst-struct-sole.rs:41:9: 41:12
        _4 = move _5 as &Fat<[isize]> (Pointer(Unsize)); // scope 1 at ui/dynamically-sized-types/dst-struct-sole.rs:41:9: 41:12
        _3 = foo(move _4) -> bb1;        // scope 1 at ui/dynamically-sized-types/dst-struct-sole.rs:41:5: 41:13
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:41:5: 41:8
                                         // + literal: Const { ty: for<'a> fn(&'a Fat<[isize]>) {foo}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_1;                        // scope 1 at ui/dynamically-sized-types/dst-struct-sole.rs:42:14: 42:17
        _10 = _7;                        // scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:43:9: 43:11
        _9 = move _10 as &Fat<[isize]> (Pointer(Unsize)); // scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:43:9: 43:11
        _8 = foo(move _9) -> bb2;        // scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:43:5: 43:12
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:43:5: 43:8
                                         // + literal: Const { ty: for<'a> fn(&'a Fat<[isize]>) {foo}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = _7;                        // scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:44:29: 44:31
        _11 = move _12 as &Fat<[isize]> (Pointer(Unsize)); // scope 2 at ui/dynamically-sized-types/dst-struct-sole.rs:44:29: 44:31
        _14 = _11;                       // scope 3 at ui/dynamically-sized-types/dst-struct-sole.rs:45:9: 45:11
        _13 = foo(move _14) -> bb3;      // scope 3 at ui/dynamically-sized-types/dst-struct-sole.rs:45:5: 45:12
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:45:5: 45:8
                                         // + literal: Const { ty: for<'a> fn(&'a Fat<[isize]>) {foo}, val: Value(<ZST>) }
    }

    bb3: {
        _17 = &_1;                       // scope 3 at ui/dynamically-sized-types/dst-struct-sole.rs:46:29: 46:32
        _16 = _17;                       // scope 3 at ui/dynamically-sized-types/dst-struct-sole.rs:46:29: 46:32
        _15 = move _16 as &Fat<[isize]> (Pointer(Unsize)); // scope 3 at ui/dynamically-sized-types/dst-struct-sole.rs:46:29: 46:32
        _19 = _15;                       // scope 4 at ui/dynamically-sized-types/dst-struct-sole.rs:47:9: 47:11
        _18 = foo(move _19) -> bb4;      // scope 4 at ui/dynamically-sized-types/dst-struct-sole.rs:47:5: 47:12
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:47:5: 47:8
                                         // + literal: Const { ty: for<'a> fn(&'a Fat<[isize]>) {foo}, val: Value(<ZST>) }
    }

    bb4: {
        _137 = const _;                  // scope 4 at ui/dynamically-sized-types/dst-struct-sole.rs:48:29: 48:52
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:48:29: 48:52
                                         // + literal: Const { ty: &Fat<[isize; 3]>, val: Unevaluated(main, [], Some(promoted[5])) }
        _22 = _137;                      // scope 4 at ui/dynamically-sized-types/dst-struct-sole.rs:48:29: 48:52
        _21 = _22;                       // scope 4 at ui/dynamically-sized-types/dst-struct-sole.rs:48:29: 48:52
        _20 = move _21 as &Fat<[isize]> (Pointer(Unsize)); // scope 4 at ui/dynamically-sized-types/dst-struct-sole.rs:48:29: 48:52
        _24 = _20;                       // scope 5 at ui/dynamically-sized-types/dst-struct-sole.rs:49:9: 49:11
        _23 = foo(move _24) -> bb5;      // scope 5 at ui/dynamically-sized-types/dst-struct-sole.rs:49:5: 49:12
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:49:5: 49:8
                                         // + literal: Const { ty: for<'a> fn(&'a Fat<[isize]>) {foo}, val: Value(<ZST>) }
    }

    bb5: {
        _30 = &_26;                      // scope 7 at ui/dynamically-sized-types/dst-struct-sole.rs:54:10: 54:13
        _29 = _30;                       // scope 7 at ui/dynamically-sized-types/dst-struct-sole.rs:54:10: 54:13
        _28 = move _29 as &Fat<[Bar]> (Pointer(Unsize)); // scope 7 at ui/dynamically-sized-types/dst-struct-sole.rs:54:10: 54:13
        _27 = foo2::<Bar>(move _28) -> bb6; // scope 7 at ui/dynamically-sized-types/dst-struct-sole.rs:54:5: 54:14
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:54:5: 54:9
                                         // + literal: Const { ty: for<'a> fn(&'a Fat<[Bar]>) {foo2::<Bar>}, val: Value(<ZST>) }
    }

    bb6: {
        _31 = &_26;                      // scope 7 at ui/dynamically-sized-types/dst-struct-sole.rs:55:14: 55:17
        _34 = _31;                       // scope 8 at ui/dynamically-sized-types/dst-struct-sole.rs:56:10: 56:12
        _33 = move _34 as &Fat<[Bar]> (Pointer(Unsize)); // scope 8 at ui/dynamically-sized-types/dst-struct-sole.rs:56:10: 56:12
        _32 = foo2::<Bar>(move _33) -> bb7; // scope 8 at ui/dynamically-sized-types/dst-struct-sole.rs:56:5: 56:13
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:56:5: 56:9
                                         // + literal: Const { ty: for<'a> fn(&'a Fat<[Bar]>) {foo2::<Bar>}, val: Value(<ZST>) }
    }

    bb7: {
        _36 = _31;                       // scope 8 at ui/dynamically-sized-types/dst-struct-sole.rs:57:27: 57:29
        _35 = move _36 as &Fat<[Bar]> (Pointer(Unsize)); // scope 8 at ui/dynamically-sized-types/dst-struct-sole.rs:57:27: 57:29
        _38 = _35;                       // scope 9 at ui/dynamically-sized-types/dst-struct-sole.rs:58:10: 58:12
        _37 = foo2::<Bar>(move _38) -> bb8; // scope 9 at ui/dynamically-sized-types/dst-struct-sole.rs:58:5: 58:13
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:58:5: 58:9
                                         // + literal: Const { ty: for<'a> fn(&'a Fat<[Bar]>) {foo2::<Bar>}, val: Value(<ZST>) }
    }

    bb8: {
        _41 = &_26;                      // scope 9 at ui/dynamically-sized-types/dst-struct-sole.rs:59:27: 59:30
        _40 = _41;                       // scope 9 at ui/dynamically-sized-types/dst-struct-sole.rs:59:27: 59:30
        _39 = move _40 as &Fat<[Bar]> (Pointer(Unsize)); // scope 9 at ui/dynamically-sized-types/dst-struct-sole.rs:59:27: 59:30
        _43 = _39;                       // scope 10 at ui/dynamically-sized-types/dst-struct-sole.rs:60:10: 60:12
        _42 = foo2::<Bar>(move _43) -> bb9; // scope 10 at ui/dynamically-sized-types/dst-struct-sole.rs:60:5: 60:13
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:60:5: 60:9
                                         // + literal: Const { ty: for<'a> fn(&'a Fat<[Bar]>) {foo2::<Bar>}, val: Value(<ZST>) }
    }

    bb9: {
        _46 = &_47;                      // scope 10 at ui/dynamically-sized-types/dst-struct-sole.rs:61:27: 61:56
        _45 = _46;                       // scope 10 at ui/dynamically-sized-types/dst-struct-sole.rs:61:27: 61:56
        _44 = move _45 as &Fat<[Bar]> (Pointer(Unsize)); // scope 10 at ui/dynamically-sized-types/dst-struct-sole.rs:61:27: 61:56
        _49 = _44;                       // scope 11 at ui/dynamically-sized-types/dst-struct-sole.rs:62:10: 62:12
        _48 = foo2::<Bar>(move _49) -> bb10; // scope 11 at ui/dynamically-sized-types/dst-struct-sole.rs:62:5: 62:13
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:62:5: 62:9
                                         // + literal: Const { ty: for<'a> fn(&'a Fat<[Bar]>) {foo2::<Bar>}, val: Value(<ZST>) }
    }

    bb10: {
        _54 = [const 1_isize, const 2_isize, const 3_isize]; // scope 11 at ui/dynamically-sized-types/dst-struct-sole.rs:65:49: 65:58
        _53 = Fat::<[isize; 3]> { ptr: move _54 }; // scope 11 at ui/dynamically-sized-types/dst-struct-sole.rs:65:38: 65:60
        _52 = &mut _53;                  // scope 11 at ui/dynamically-sized-types/dst-struct-sole.rs:65:33: 65:60
        _51 = &mut (*_52);               // scope 11 at ui/dynamically-sized-types/dst-struct-sole.rs:65:33: 65:60
        _50 = move _51 as &mut Fat<[isize]> (Pointer(Unsize)); // scope 11 at ui/dynamically-sized-types/dst-struct-sole.rs:65:33: 65:60
        _55 = const 1_usize;             // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:66:12: 66:13
        _56 = Len(((*_50).0: [isize]));  // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:66:5: 66:14
        _57 = Lt(_55, _56);              // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:66:5: 66:14
        assert(move _57, "index out of bounds: the length is {} but the index is {}", move _56, _55) -> bb11; // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:66:5: 66:14
    }

    bb11: {
        ((*_50).0: [isize])[_55] = const 34_isize; // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:66:5: 66:19
        _60 = const 0_usize;             // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:67:23: 67:24
        _61 = Len(((*_50).0: [isize]));  // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:67:16: 67:25
        _62 = Lt(_60, _61);              // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:67:16: 67:25
        assert(move _62, "index out of bounds: the length is {} but the index is {}", move _61, _60) -> bb12; // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:67:16: 67:25
    }

    bb12: {
        _59 = &((*_50).0: [isize])[_60]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _136 = const _;                  // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[4])) }
        _63 = _136;                      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _58 = (move _59, move _63);      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _64 = (_58.0: &isize);           // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _65 = (_58.1: &isize);           // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _68 = (*_64);                    // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _69 = const 1_isize;             // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _67 = Eq(move _68, move _69);    // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _66 = Not(move _67);             // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _66) -> [0: bb14, otherwise: bb13]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _70 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _72 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _74 = _64;                       // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _73 = _74;                       // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _76 = _65;                       // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _75 = _76;                       // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _77 = Option::<Arguments<'_>>::None; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _71 = core::panicking::assert_failed::<isize, isize>(move _72, move _73, move _75, move _77); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb14: {
        _80 = const 1_usize;             // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:68:23: 68:24
        _81 = Len(((*_50).0: [isize]));  // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:68:16: 68:25
        _82 = Lt(_80, _81);              // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:68:16: 68:25
        assert(move _82, "index out of bounds: the length is {} but the index is {}", move _81, _80) -> bb15; // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:68:16: 68:25
    }

    bb15: {
        _79 = &((*_50).0: [isize])[_80]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _135 = const _;                  // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[3])) }
        _83 = _135;                      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _78 = (move _79, move _83);      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _84 = (_78.0: &isize);           // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _85 = (_78.1: &isize);           // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _88 = (*_84);                    // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _89 = const 34_isize;            // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _87 = Eq(move _88, move _89);    // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _86 = Not(move _87);             // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _86) -> [0: bb17, otherwise: bb16]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb16: {
        _90 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _92 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _94 = _84;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _93 = _94;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _96 = _85;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _95 = _96;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _97 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _91 = core::panicking::assert_failed::<isize, isize>(move _92, move _93, move _95, move _97); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb17: {
        _100 = const 2_usize;            // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:69:23: 69:24
        _101 = Len(((*_50).0: [isize])); // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:69:16: 69:25
        _102 = Lt(_100, _101);           // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:69:16: 69:25
        assert(move _102, "index out of bounds: the length is {} but the index is {}", move _101, _100) -> bb18; // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:69:16: 69:25
    }

    bb18: {
        _99 = &((*_50).0: [isize])[_100]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _134 = const _;                  // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[2])) }
        _103 = _134;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _98 = (move _99, move _103);     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _104 = (_98.0: &isize);          // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _105 = (_98.1: &isize);          // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _108 = (*_104);                  // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _109 = const 3_isize;            // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _107 = Eq(move _108, move _109); // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _106 = Not(move _107);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _106) -> [0: bb20, otherwise: bb19]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _110 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _112 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _114 = _104;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _113 = _114;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _116 = _105;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _115 = _116;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _117 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _111 = core::panicking::assert_failed::<isize, isize>(move _112, move _113, move _115, move _117); // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb20: {
        _133 = const _;                  // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:72:29: 72:45
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:72:29: 72:45
                                         // + literal: Const { ty: &Fat<[isize; 0]>, val: Unevaluated(main, [], Some(promoted[1])) }
        _120 = _133;                     // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:72:29: 72:45
        _119 = _120;                     // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:72:29: 72:45
        _118 = move _119 as &Fat<[isize]> (Pointer(Unsize)); // scope 12 at ui/dynamically-sized-types/dst-struct-sole.rs:72:29: 72:45
        _123 = &((*_118).0: [isize]);    // scope 19 at ui/dynamically-sized-types/dst-struct-sole.rs:73:13: 73:30
        _122 = core::slice::<impl [isize]>::is_empty(move _123) -> bb21; // scope 19 at ui/dynamically-sized-types/dst-struct-sole.rs:73:13: 73:30
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:73:20: 73:28
                                         // + literal: Const { ty: for<'a> fn(&'a [isize]) -> bool {core::slice::<impl [isize]>::is_empty}, val: Value(<ZST>) }
    }

    bb21: {
        _121 = Not(move _122);           // scope 19 at ui/dynamically-sized-types/dst-struct-sole.rs:73:5: 73:31
        switchInt(move _121) -> [0: bb23, otherwise: bb22]; // scope 19 at ui/dynamically-sized-types/dst-struct-sole.rs:73:5: 73:31
    }

    bb22: {
        _124 = core::panicking::panic(const "assertion failed: f5.ptr.is_empty()"); // scope 19 at ui/dynamically-sized-types/dst-struct-sole.rs:73:5: 73:31
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:73:5: 73:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb23: {
        _132 = const _;                  // scope 19 at ui/dynamically-sized-types/dst-struct-sole.rs:74:27: 74:43
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:74:27: 74:43
                                         // + literal: Const { ty: &Fat<[Bar; 0]>, val: Unevaluated(main, [], Some(promoted[0])) }
        _127 = _132;                     // scope 19 at ui/dynamically-sized-types/dst-struct-sole.rs:74:27: 74:43
        _126 = _127;                     // scope 19 at ui/dynamically-sized-types/dst-struct-sole.rs:74:27: 74:43
        _125 = move _126 as &Fat<[Bar]> (Pointer(Unsize)); // scope 19 at ui/dynamically-sized-types/dst-struct-sole.rs:74:27: 74:43
        _130 = &((*_125).0: [Bar]);      // scope 20 at ui/dynamically-sized-types/dst-struct-sole.rs:75:13: 75:30
        _129 = core::slice::<impl [Bar]>::is_empty(move _130) -> bb24; // scope 20 at ui/dynamically-sized-types/dst-struct-sole.rs:75:13: 75:30
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:75:20: 75:28
                                         // + literal: Const { ty: for<'a> fn(&'a [Bar]) -> bool {core::slice::<impl [Bar]>::is_empty}, val: Value(<ZST>) }
    }

    bb24: {
        _128 = Not(move _129);           // scope 20 at ui/dynamically-sized-types/dst-struct-sole.rs:75:5: 75:31
        switchInt(move _128) -> [0: bb26, otherwise: bb25]; // scope 20 at ui/dynamically-sized-types/dst-struct-sole.rs:75:5: 75:31
    }

    bb25: {
        _131 = core::panicking::panic(const "assertion failed: f5.ptr.is_empty()"); // scope 20 at ui/dynamically-sized-types/dst-struct-sole.rs:75:5: 75:31
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-struct-sole.rs:75:5: 75:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb26: {
        return;                          // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:76:2: 76:2
    }
}

promoted[0] in main: &Fat<[Bar; 0]> = {
    let mut _0: &Fat<[Bar; 0]>;          // return place in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:74:27: 74:43
    let mut _1: Fat<[Bar; 0]>;           // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:74:28: 74:43
    let mut _2: [Bar; 0];                // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:74:39: 74:41

    bb0: {
        _2 = [];                         // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:74:39: 74:41
        _1 = Fat::<[Bar; 0]> { ptr: move _2 }; // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:74:28: 74:43
        _0 = &_1;                        // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:74:27: 74:43
        return;                          // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:74:27: 74:43
    }
}

promoted[1] in main: &Fat<[isize; 0]> = {
    let mut _0: &Fat<[isize; 0]>;        // return place in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:72:29: 72:45
    let mut _1: Fat<[isize; 0]>;         // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:72:30: 72:45
    let mut _2: [isize; 0];              // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:72:41: 72:43

    bb0: {
        _2 = [];                         // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:72:41: 72:43
        _1 = Fat::<[isize; 0]> { ptr: move _2 }; // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:72:30: 72:45
        _0 = &_1;                        // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:72:29: 72:45
        return;                          // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:72:29: 72:45
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:69:27: 69:28

    bb0: {
        _1 = const 3_isize;              // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:69:27: 69:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:68:27: 68:29

    bb0: {
        _1 = const 34_isize;             // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:68:27: 68:29
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:67:27: 67:28

    bb0: {
        _1 = const 1_isize;              // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:67:27: 67:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &Fat<[isize; 3]> = {
    let mut _0: &Fat<[isize; 3]>;        // return place in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:48:29: 48:52
    let mut _1: Fat<[isize; 3]>;         // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:48:30: 48:52
    let mut _2: [isize; 3];              // in scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:48:41: 48:50

    bb0: {
        _2 = [const 1_isize, const 2_isize, const 3_isize]; // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:48:41: 48:50
        _1 = Fat::<[isize; 3]> { ptr: move _2 }; // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:48:30: 48:52
        _0 = &_1;                        // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:48:29: 48:52
        return;                          // scope 0 at ui/dynamically-sized-types/dst-struct-sole.rs:48:29: 48:52
    }
}
