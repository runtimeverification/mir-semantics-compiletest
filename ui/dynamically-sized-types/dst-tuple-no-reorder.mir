// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn nonzero_size() -> () {
    let mut _0: ();
    let _1: (u8, [u32; 2]);
    let mut _2: [u32; 2];
    let _4: &(u8, [u32; 2]);
    let mut _5: (&u8, &u8);
    let mut _6: &u8;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: u8;
    let mut _12: u8;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&usize, &usize);
    let mut _17: &usize;
    let _18: usize;
    let mut _19: &[u32];
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: usize;
    let mut _25: usize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&u32, &u32);
    let mut _30: &u32;
    let _31: usize;
    let mut _32: usize;
    let mut _33: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: u32;
    let mut _39: u32;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&u32, &u32);
    let mut _44: &u32;
    let _45: usize;
    let mut _46: usize;
    let mut _47: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: u32;
    let mut _53: u32;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug sized => _1;
        let _3: &(u8, [u32]);
        scope 2 {
            debug unsize => _3;
            let _7: &u8;
            let _8: &u8;
            let _20: &usize;
            let _21: &usize;
            let _34: &u32;
            let _35: &u32;
            let _48: &u32;
            let _49: &u32;
            let mut _57: &u32;
            let mut _58: &u32;
            let mut _59: &usize;
            let mut _60: &u8;
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
            scope 5 {
                debug left_val => _20;
                debug right_val => _21;
                let _26: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _26;
                }
            }
            scope 7 {
                debug left_val => _34;
                debug right_val => _35;
                let _40: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _40;
                }
            }
            scope 9 {
                debug left_val => _48;
                debug right_val => _49;
                let _54: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _54;
                }
            }
        }
    }

    bb0: {
        _2 = [const 456_u32, const 789_u32];
        _1 = (const 123_u8, move _2);
        _4 = &_1;
        _3 = _4 as &(u8, [u32]) (Pointer(Unsize));
        _6 = &((*_3).0: u8);
        _60 = const _;
        _5 = (move _6, _60);
        _7 = (_5.0: &u8);
        _8 = (_5.1: &u8);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<u8, u8>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb2: {
        _19 = &((*_3).1: [u32]);
        _18 = Len((*_19));
        _17 = &_18;
        _59 = const _;
        _16 = (move _17, _59);
        _20 = (_16.0: &usize);
        _21 = (_16.1: &usize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<usize, usize>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb4: {
        _31 = const 0_usize;
        _32 = Len(((*_3).1: [u32]));
        _33 = Lt(_31, _32);
        assert(move _33, "index out of bounds: the length is {} but the index is {}", move _32, _31) -> [success: bb5, unwind continue];
    }

    bb5: {
        _30 = &((*_3).1: [u32])[_31];
        _58 = const _;
        _29 = (move _30, _58);
        _34 = (_29.0: &u32);
        _35 = (_29.1: &u32);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<u32, u32>(move _40, _34, _35, move _42) -> unwind continue;
    }

    bb7: {
        _45 = const 1_usize;
        _46 = Len(((*_3).1: [u32]));
        _47 = Lt(_45, _46);
        assert(move _47, "index out of bounds: the length is {} but the index is {}", move _46, _45) -> [success: bb8, unwind continue];
    }

    bb8: {
        _44 = &((*_3).1: [u32])[_45];
        _57 = const _;
        _43 = (move _44, _57);
        _48 = (_43.0: &u32);
        _49 = (_43.1: &u32);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<u32, u32>(move _54, _48, _49, move _56) -> unwind continue;
    }

    bb10: {
        return;
    }
}

promoted[0] in nonzero_size: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 789_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in nonzero_size: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 456_u32;
        _0 = &_1;
        return;
    }
}

promoted[2] in nonzero_size: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in nonzero_size: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 123_u8;
        _0 = &_1;
        return;
    }
}

nonzero_size::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn zst() -> () {
    let mut _0: ();
    let _1: (u8, [u32; 0]);
    let _3: &(u8, [u32; 0]);
    let mut _4: (&u8, &u8);
    let mut _5: &u8;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u8;
    let mut _11: u8;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&usize, &usize);
    let mut _16: &usize;
    let _17: usize;
    let mut _18: &[u32];
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: usize;
    let mut _24: usize;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug sized => _1;
        let _2: &(u8, [u32]);
        scope 2 {
            debug unsize => _2;
            let _6: &u8;
            let _7: &u8;
            let _19: &usize;
            let _20: &usize;
            let mut _28: &usize;
            let mut _29: &u8;
            scope 3 {
                debug left_val => _6;
                debug right_val => _7;
                let _12: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _12;
                }
            }
            scope 5 {
                debug left_val => _19;
                debug right_val => _20;
                let _25: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _25;
                }
            }
        }
    }

    bb0: {
        _1 = (const 123_u8, const []);
        _3 = &_1;
        _2 = _3 as &(u8, [u32]) (Pointer(Unsize));
        _5 = &((*_2).0: u8);
        _29 = const _;
        _4 = (move _5, _29);
        _6 = (_4.0: &u8);
        _7 = (_4.1: &u8);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u8, u8>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb2: {
        _18 = &((*_2).1: [u32]);
        _17 = Len((*_18));
        _16 = &_17;
        _28 = const _;
        _15 = (move _16, _28);
        _19 = (_15.0: &usize);
        _20 = (_15.1: &usize);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<usize, usize>(move _25, _19, _20, move _27) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in zst: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in zst: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 123_u8;
        _0 = &_1;
        return;
    }
}

zst::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = nonzero_size() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = zst() -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}
