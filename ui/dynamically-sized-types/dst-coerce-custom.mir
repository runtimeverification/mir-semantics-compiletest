// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dynamically-sized-types/dst-coerce-custom.rs:19:1: 19:17>::get(_1: &i32) -> i32 {
    debug self => _1;
    let mut _0: i32;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Bar<[i32; 3]>;
    let mut _2: *const [i32; 3];
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i32;
    let mut _14: i32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&i32, &i32);
    let mut _19: &i32;
    let _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: i32;
    let mut _28: i32;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: (&i32, &i32);
    let mut _33: &i32;
    let _34: usize;
    let mut _35: usize;
    let mut _36: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: i32;
    let mut _42: i32;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: *const i32;
    let mut _49: (&i32, &i32);
    let mut _50: &i32;
    let _51: i32;
    let mut _52: &dyn Baz;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: i32;
    let mut _58: i32;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: &[i32; 3];
    let mut _68: *const [i32];
    let mut _69: *const [i32];
    let mut _70: *const [i32];
    let mut _71: *const [i32];
    let mut _72: *const [i32];
    let mut _73: *const [i32];
    let mut _74: *const dyn Baz;
    scope 1 {
        debug a => _1;
        let _3: Bar<[i32]>;
        scope 2 {
            debug b => _3;
            let _46: Bar<i32>;
            let mut _63: &i32;
            scope 3 {
                let _9: &i32;
                let _10: &i32;
                let _23: &i32;
                let _24: &i32;
                let _37: &i32;
                let _38: &i32;
                let mut _64: &i32;
                let mut _65: &i32;
                let mut _66: &i32;
                let mut _75: *const ();
                let mut _76: usize;
                let mut _77: usize;
                let mut _78: usize;
                let mut _79: usize;
                let mut _80: bool;
                let mut _81: *const ();
                let mut _82: usize;
                let mut _83: usize;
                let mut _84: usize;
                let mut _85: usize;
                let mut _86: bool;
                let mut _87: *const ();
                let mut _88: usize;
                let mut _89: usize;
                let mut _90: usize;
                let mut _91: usize;
                let mut _92: bool;
                let mut _93: *const ();
                let mut _94: usize;
                let mut _95: usize;
                let mut _96: usize;
                let mut _97: usize;
                let mut _98: bool;
                let mut _99: *const ();
                let mut _100: usize;
                let mut _101: usize;
                let mut _102: usize;
                let mut _103: usize;
                let mut _104: bool;
                let mut _105: *const ();
                let mut _106: usize;
                let mut _107: usize;
                let mut _108: usize;
                let mut _109: usize;
                let mut _110: bool;
                scope 4 {
                    debug left_val => _9;
                    debug right_val => _10;
                    let _15: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _15;
                    }
                }
                scope 6 {
                    debug left_val => _23;
                    debug right_val => _24;
                    let _29: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _29;
                    }
                }
                scope 8 {
                    debug left_val => _37;
                    debug right_val => _38;
                    let _43: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _43;
                    }
                }
            }
            scope 10 {
                debug a => _46;
                let _48: Bar<dyn Baz>;
                scope 11 {
                    debug b => _48;
                    scope 12 {
                        let _53: &i32;
                        let _54: &i32;
                        let mut _62: &i32;
                        scope 13 {
                            debug left_val => _53;
                            debug right_val => _54;
                            let _59: core::panicking::AssertKind;
                            scope 14 {
                                debug kind => _59;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _67 = const _;
        _2 = &raw const (*_67);
        _1 = Bar::<[i32; 3]> { x: move _2 };
        _3 = move _1 as Bar<[i32]> (Pointer(Unsize));
        _6 = const 0_usize;
        _68 = deref_copy (_3.0: *const [i32]);
        _105 = _68 as *const () (PtrToPtr);
        _106 = _105 as usize (Transmute);
        _107 = AlignOf(i32);
        _108 = Sub(_107, const 1_usize);
        _109 = BitAnd(_106, _108);
        _110 = Eq(_109, const 0_usize);
        assert(_110, "misaligned pointer dereference: address must be a multiple of {} but is {}", _107, _106) -> [success: bb18, unwind unreachable];
    }

    bb1: {
        _69 = deref_copy (_3.0: *const [i32]);
        _99 = _69 as *const () (PtrToPtr);
        _100 = _99 as usize (Transmute);
        _101 = AlignOf(i32);
        _102 = Sub(_101, const 1_usize);
        _103 = BitAnd(_100, _102);
        _104 = Eq(_103, const 0_usize);
        assert(_104, "misaligned pointer dereference: address must be a multiple of {} but is {}", _101, _100) -> [success: bb17, unwind unreachable];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<i32, i32>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb3: {
        _20 = const 1_usize;
        _70 = deref_copy (_3.0: *const [i32]);
        _93 = _70 as *const () (PtrToPtr);
        _94 = _93 as usize (Transmute);
        _95 = AlignOf(i32);
        _96 = Sub(_95, const 1_usize);
        _97 = BitAnd(_94, _96);
        _98 = Eq(_97, const 0_usize);
        assert(_98, "misaligned pointer dereference: address must be a multiple of {} but is {}", _95, _94) -> [success: bb16, unwind unreachable];
    }

    bb4: {
        _71 = deref_copy (_3.0: *const [i32]);
        _87 = _71 as *const () (PtrToPtr);
        _88 = _87 as usize (Transmute);
        _89 = AlignOf(i32);
        _90 = Sub(_89, const 1_usize);
        _91 = BitAnd(_88, _90);
        _92 = Eq(_91, const 0_usize);
        assert(_92, "misaligned pointer dereference: address must be a multiple of {} but is {}", _89, _88) -> [success: bb15, unwind unreachable];
    }

    bb5: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<i32, i32>(move _29, _23, _24, move _31) -> unwind continue;
    }

    bb6: {
        _34 = const 2_usize;
        _72 = deref_copy (_3.0: *const [i32]);
        _81 = _72 as *const () (PtrToPtr);
        _82 = _81 as usize (Transmute);
        _83 = AlignOf(i32);
        _84 = Sub(_83, const 1_usize);
        _85 = BitAnd(_82, _84);
        _86 = Eq(_85, const 0_usize);
        assert(_86, "misaligned pointer dereference: address must be a multiple of {} but is {}", _83, _82) -> [success: bb14, unwind unreachable];
    }

    bb7: {
        _73 = deref_copy (_3.0: *const [i32]);
        _75 = _73 as *const () (PtrToPtr);
        _76 = _75 as usize (Transmute);
        _77 = AlignOf(i32);
        _78 = Sub(_77, const 1_usize);
        _79 = BitAnd(_76, _78);
        _80 = Eq(_79, const 0_usize);
        assert(_80, "misaligned pointer dereference: address must be a multiple of {} but is {}", _77, _76) -> [success: bb13, unwind unreachable];
    }

    bb8: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<i32, i32>(move _43, _37, _38, move _45) -> unwind continue;
    }

    bb9: {
        _63 = const _;
        _47 = &raw const (*_63);
        _46 = Bar::<i32> { x: move _47 };
        _48 = move _46 as Bar<dyn Baz> (Pointer(Unsize));
        _74 = deref_copy (_48.0: *const dyn Baz);
        _52 = &(*_74);
        _51 = <dyn Baz as Baz>::get(move _52) -> [return: bb10, unwind continue];
    }

    bb10: {
        _50 = &_51;
        _62 = const _;
        _49 = (move _50, _62);
        _53 = (_49.0: &i32);
        _54 = (_49.1: &i32);
        _57 = (*_53);
        _58 = (*_54);
        _56 = Eq(move _57, move _58);
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _59 = core::panicking::AssertKind::Eq;
        _61 = Option::<Arguments<'_>>::None;
        _60 = core::panicking::assert_failed::<i32, i32>(move _59, _53, _54, move _61) -> unwind continue;
    }

    bb12: {
        return;
    }

    bb13: {
        _33 = &(*_73)[_34];
        _64 = const _;
        _32 = (move _33, _64);
        _37 = (_32.0: &i32);
        _38 = (_32.1: &i32);
        _41 = (*_37);
        _42 = (*_38);
        _40 = Eq(move _41, move _42);
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb9, otherwise: bb8];
    }

    bb14: {
        _35 = Len((*_72));
        _36 = Lt(_34, _35);
        assert(move _36, "index out of bounds: the length is {} but the index is {}", move _35, _34) -> [success: bb7, unwind continue];
    }

    bb15: {
        _19 = &(*_71)[_20];
        _65 = const _;
        _18 = (move _19, _65);
        _23 = (_18.0: &i32);
        _24 = (_18.1: &i32);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb6, otherwise: bb5];
    }

    bb16: {
        _21 = Len((*_70));
        _22 = Lt(_20, _21);
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb4, unwind continue];
    }

    bb17: {
        _5 = &(*_69)[_6];
        _66 = const _;
        _4 = (move _5, _66);
        _9 = (_4.0: &i32);
        _10 = (_4.1: &i32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb18: {
        _7 = Len((*_68));
        _8 = Lt(_6, _7);
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> [success: bb1, unwind continue];
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];
    let mut _1: [i32; 3];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}
