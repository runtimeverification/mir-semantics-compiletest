// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:6:11: 6:11
    let _1: Test<[i32; 3]>;              // in scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:7:9: 7:10
    let mut _2: [i32; 3];                // in scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:7:18: 7:25
    let mut _4: &Test<[i32; 3]>;         // in scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:8:28: 8:30
    let _5: &Test<[i32; 3]>;             // in scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:8:28: 8:30
    let mut _9: &&[i32; 3];              // in scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:15:18: 15:24
    let mut _12: [i32; 3];               // in scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:19:18: 19:25
    let mut _14: &(i32, [i32; 3]);       // in scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:20:29: 20:31
    let _15: &(i32, [i32; 3]);           // in scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:20:29: 20:31
    let mut _19: &&[i32; 3];             // in scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:25:18: 25:24
    let mut _23: &&[i32; 3];             // in scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:15:9: 15:10
    let mut _24: &&[i32; 3];             // in scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:25:9: 25:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:7:9: 7:10
        let _3: &Test<[i32]>;            // in scope 1 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:8:9: 8:10
        scope 2 {
            debug x => _3;               // in scope 2 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:8:9: 8:10
            let _6: &Test<[i32]>;        // in scope 2 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:10:11: 10:17
            scope 3 {
                debug _y => _6;          // in scope 3 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:10:11: 10:17
                let _7: &[i32; 3];       // in scope 3 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:14:9: 14:14
                let mut _22: &[i32; 3];  // in scope 3 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:14:17: 14:25
                scope 4 {
                    debug slice => _7;   // in scope 4 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:14:9: 14:14
                    let _8: Test<&&[i32; 3]>; // in scope 4 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:15:9: 15:10
                    scope 5 {
                        debug x => _8;   // in scope 5 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:15:9: 15:10
                        let _10: &[i32; 3]; // in scope 5 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:16:15: 16:21
                        scope 6 {
                            debug _slice => _10; // in scope 6 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:16:15: 16:21
                            let _11: (i32, [i32; 3]); // in scope 6 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:19:9: 19:10
                            scope 7 {
                                debug x => _11; // in scope 7 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:19:9: 19:10
                                let _13: &(i32, [i32]); // in scope 7 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:20:9: 20:10
                                scope 8 {
                                    debug x => _13; // in scope 8 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:20:9: 20:10
                                    let _16: &(i32, [i32]); // in scope 8 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:22:11: 22:17
                                    scope 9 {
                                        debug _y => _16; // in scope 9 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:22:11: 22:17
                                        let _17: &[i32; 3]; // in scope 9 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:24:9: 24:14
                                        let mut _21: &[i32; 3]; // in scope 9 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:24:17: 24:25
                                        scope 10 {
                                            debug slice => _17; // in scope 10 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:24:9: 24:14
                                            let _18: (i32, &&[i32; 3]); // in scope 10 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:25:9: 25:10
                                            scope 11 {
                                                debug x => _18; // in scope 11 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:25:9: 25:10
                                                let _20: &[i32; 3]; // in scope 11 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:26:14: 26:20
                                                scope 12 {
                                                    debug _slice => _20; // in scope 12 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:26:14: 26:20
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:7:18: 7:25
        _1 = Test::<[i32; 3]>(move _2);  // scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:7:13: 7:26
        _5 = &_1;                        // scope 1 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:8:28: 8:30
        _4 = _5;                         // scope 1 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:8:28: 8:30
        _3 = move _4 as &Test<[i32]> (Pointer(Unsize)); // scope 1 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:8:28: 8:30
        _6 = _3;                         // scope 2 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:10:11: 10:17
        _22 = const _;                   // scope 3 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:14:17: 14:25
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-irrefutable-bind.rs:14:17: 14:25
                                         // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[1])) }
        _7 = _22;                        // scope 3 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:14:17: 14:25
        _9 = &_7;                        // scope 4 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:15:18: 15:24
        _8 = Test::<&&[i32; 3]>(move _9); // scope 4 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:15:13: 15:25
        _23 = deref_copy (_8.0: &&[i32; 3]); // scope 5 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:16:15: 16:21
        _10 = (*_23);                    // scope 5 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:16:15: 16:21
        _12 = [const 1_i32, const 2_i32, const 3_i32]; // scope 6 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:19:18: 19:25
        _11 = (const 10_i32, move _12);  // scope 6 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:19:13: 19:26
        _15 = &_11;                      // scope 7 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:20:29: 20:31
        _14 = _15;                       // scope 7 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:20:29: 20:31
        _13 = move _14 as &(i32, [i32]) (Pointer(Unsize)); // scope 7 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:20:29: 20:31
        _16 = _13;                       // scope 8 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:22:11: 22:17
        _21 = const _;                   // scope 9 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:24:17: 24:25
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-irrefutable-bind.rs:24:17: 24:25
                                         // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _17 = _21;                       // scope 9 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:24:17: 24:25
        _19 = &_17;                      // scope 10 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:25:18: 25:24
        _18 = (const 10_i32, move _19);  // scope 10 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:25:13: 25:25
        _24 = deref_copy (_18.1: &&[i32; 3]); // scope 11 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:26:14: 26:20
        _20 = (*_24);                    // scope 11 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:26:14: 26:20
        return;                          // scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:27:2: 27:2
    }
}

promoted[0] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];               // return place in scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:24:17: 24:25
    let mut _1: [i32; 3];                // in scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:24:18: 24:25

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:24:18: 24:25
        _0 = &_1;                        // scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:24:17: 24:25
        return;                          // scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:24:17: 24:25
    }
}

promoted[1] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];               // return place in scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:14:17: 14:25
    let mut _1: [i32; 3];                // in scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:14:18: 14:25

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:14:18: 14:25
        _0 = &_1;                        // scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:14:17: 14:25
        return;                          // scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:14:17: 14:25
    }
}

fn Test(_1: T) -> Test<T> {
    let mut _0: Test<T>;                 // return place in scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:4:1: 4:23

    bb0: {
        _0 = Test::<T>(move _1);         // scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:4:1: 4:23
        return;                          // scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:4:1: 4:23
    }
}

// MIR FOR CTFE
fn Test(_1: T) -> Test<T> {
    let mut _0: Test<T>;                 // return place in scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:4:1: 4:23

    bb0: {
        _0 = Test::<T>(move _1);         // scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:4:1: 4:23
        return;                          // scope 0 at ui/dynamically-sized-types/dst-irrefutable-bind.rs:4:1: 4:23
    }
}
