// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dynamically-sized-types/dst-coerce-rc.rs:15:1: 15:17>::get(_1: &i32) -> i32 {
    debug self => _1;
    let mut _0: i32;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::rc::Rc<[i32; 3]>;
    let mut _2: [i32; 3];
    let mut _4: std::rc::Rc<[i32; 3]>;
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let _7: &[i32];
    let mut _8: &std::rc::Rc<[i32]>;
    let _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: i32;
    let mut _17: i32;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&i32, &i32);
    let mut _22: &i32;
    let _23: &[i32];
    let mut _24: &std::rc::Rc<[i32]>;
    let _25: usize;
    let mut _26: usize;
    let mut _27: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: i32;
    let mut _33: i32;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&i32, &i32);
    let mut _38: &i32;
    let _39: &[i32];
    let mut _40: &std::rc::Rc<[i32]>;
    let _41: usize;
    let mut _42: usize;
    let mut _43: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: i32;
    let mut _49: i32;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: std::rc::Rc<i32>;
    let mut _56: &std::rc::Rc<i32>;
    let mut _57: (&i32, &i32);
    let mut _58: &i32;
    let _59: i32;
    let mut _60: &dyn Baz;
    let _61: &dyn Baz;
    let mut _62: &std::rc::Rc<dyn Baz>;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: i32;
    let mut _68: i32;
    let _70: !;
    let mut _71: std::option::Option<std::fmt::Arguments<'_>>;
    let _73: &std::rc::Rc<i32>;
    let mut _75: std::rc::Weak<i32>;
    let mut _76: &std::rc::Weak<i32>;
    let mut _78: &std::rc::Rc<dyn Baz>;
    let mut _80: std::cell::RefCell<i32>;
    let mut _82: std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _83: &std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _84: (&i32, &i32);
    let mut _85: &i32;
    let _86: i32;
    let mut _87: &dyn Baz;
    let _88: &dyn Baz;
    let mut _89: &std::cell::Ref<'_, dyn Baz>;
    let _90: std::cell::Ref<'_, dyn Baz>;
    let mut _91: &std::cell::RefCell<dyn Baz>;
    let _92: &std::cell::RefCell<dyn Baz>;
    let mut _93: &std::rc::Rc<std::cell::RefCell<dyn Baz>>;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: i32;
    let mut _99: i32;
    let _101: !;
    let mut _102: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _104: std::rc::Weak<std::cell::RefCell<dyn Baz>>;
    let mut _105: std::rc::Weak<std::cell::RefCell<i32>>;
    let _106: &std::rc::Rc<std::cell::RefCell<i32>>;
    scope 1 {
        debug a => _1;
        let _3: std::rc::Rc<[i32]>;
        scope 2 {
            debug b => _3;
            let _12: &i32;
            let _13: &i32;
            let _28: &i32;
            let _29: &i32;
            let _44: &i32;
            let _45: &i32;
            let _53: std::rc::Rc<i32>;
            let mut _109: &i32;
            let mut _110: &i32;
            let mut _111: &i32;
            scope 3 {
                debug left_val => _12;
                debug right_val => _13;
                let _18: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _18;
                }
            }
            scope 5 {
                debug left_val => _28;
                debug right_val => _29;
                let _34: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _34;
                }
            }
            scope 7 {
                debug left_val => _44;
                debug right_val => _45;
                let _50: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _50;
                }
            }
            scope 9 {
                debug a => _53;
                let _54: std::rc::Rc<dyn Baz>;
                scope 10 {
                    debug b => _54;
                    let _63: &i32;
                    let _64: &i32;
                    let _72: std::rc::Weak<i32>;
                    let mut _108: &i32;
                    scope 11 {
                        debug left_val => _63;
                        debug right_val => _64;
                        let _69: core::panicking::AssertKind;
                        scope 12 {
                            debug kind => _69;
                        }
                    }
                    scope 13 {
                        debug c => _72;
                        let _74: std::rc::Weak<dyn Baz>;
                        scope 14 {
                            debug d => _74;
                            let _77: std::rc::Rc<dyn Baz>;
                            scope 15 {
                                debug _c => _77;
                                let _79: std::rc::Rc<std::cell::RefCell<i32>>;
                                scope 16 {
                                    debug a => _79;
                                    let _81: std::rc::Rc<std::cell::RefCell<dyn Baz>>;
                                    scope 17 {
                                        debug b => _81;
                                        let _94: &i32;
                                        let _95: &i32;
                                        let _103: std::rc::Weak<std::cell::RefCell<dyn Baz>>;
                                        let mut _107: &i32;
                                        scope 18 {
                                            debug left_val => _94;
                                            debug right_val => _95;
                                            let _100: core::panicking::AssertKind;
                                            scope 19 {
                                                debug kind => _100;
                                            }
                                        }
                                        scope 20 {
                                            debug c => _103;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32];
        _1 = Rc::<[i32; 3]>::new(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = move _1;
        _3 = move _4 as std::rc::Rc<[i32]> (Pointer(Unsize));
        _8 = &_3;
        _7 = <Rc<[i32]> as Deref>::deref(move _8) -> [return: bb2, unwind: bb51];
    }

    bb2: {
        _9 = const 0_usize;
        _10 = Len((*_7));
        _11 = Lt(_9, _10);
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> [success: bb3, unwind: bb51];
    }

    bb3: {
        _6 = &(*_7)[_9];
        _111 = const _;
        _5 = (move _6, _111);
        _12 = (_5.0: &i32);
        _13 = (_5.1: &i32);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<i32, i32>(move _18, _12, _13, move _20) -> bb51;
    }

    bb5: {
        _24 = &_3;
        _23 = <Rc<[i32]> as Deref>::deref(move _24) -> [return: bb6, unwind: bb51];
    }

    bb6: {
        _25 = const 1_usize;
        _26 = Len((*_23));
        _27 = Lt(_25, _26);
        assert(move _27, "index out of bounds: the length is {} but the index is {}", move _26, _25) -> [success: bb7, unwind: bb51];
    }

    bb7: {
        _22 = &(*_23)[_25];
        _110 = const _;
        _21 = (move _22, _110);
        _28 = (_21.0: &i32);
        _29 = (_21.1: &i32);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<i32, i32>(move _34, _28, _29, move _36) -> bb51;
    }

    bb9: {
        _40 = &_3;
        _39 = <Rc<[i32]> as Deref>::deref(move _40) -> [return: bb10, unwind: bb51];
    }

    bb10: {
        _41 = const 2_usize;
        _42 = Len((*_39));
        _43 = Lt(_41, _42);
        assert(move _43, "index out of bounds: the length is {} but the index is {}", move _42, _41) -> [success: bb11, unwind: bb51];
    }

    bb11: {
        _38 = &(*_39)[_41];
        _109 = const _;
        _37 = (move _38, _109);
        _44 = (_37.0: &i32);
        _45 = (_37.1: &i32);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<i32, i32>(move _50, _44, _45, move _52) -> bb51;
    }

    bb13: {
        _53 = Rc::<i32>::new(const 42_i32) -> [return: bb14, unwind: bb51];
    }

    bb14: {
        _56 = &_53;
        _55 = <Rc<i32> as Clone>::clone(move _56) -> [return: bb15, unwind: bb50];
    }

    bb15: {
        _54 = move _55 as std::rc::Rc<dyn Baz> (Pointer(Unsize));
        _62 = &_54;
        _61 = <Rc<dyn Baz> as Deref>::deref(move _62) -> [return: bb16, unwind: bb49];
    }

    bb16: {
        _60 = _61;
        _59 = <dyn Baz as Baz>::get(move _60) -> [return: bb17, unwind: bb49];
    }

    bb17: {
        _58 = &_59;
        _108 = const _;
        _57 = (move _58, _108);
        _63 = (_57.0: &i32);
        _64 = (_57.1: &i32);
        _67 = (*_63);
        _68 = (*_64);
        _66 = Eq(move _67, move _68);
        _65 = Not(move _66);
        switchInt(move _65) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _69 = core::panicking::AssertKind::Eq;
        _71 = Option::<Arguments<'_>>::None;
        _70 = core::panicking::assert_failed::<i32, i32>(move _69, _63, _64, move _71) -> bb49;
    }

    bb19: {
        _73 = &_53;
        _72 = Rc::<i32>::downgrade(_73) -> [return: bb20, unwind: bb49];
    }

    bb20: {
        _76 = &_72;
        _75 = <std::rc::Weak<i32> as Clone>::clone(move _76) -> [return: bb21, unwind: bb48];
    }

    bb21: {
        _74 = move _75 as std::rc::Weak<dyn Baz> (Pointer(Unsize));
        _78 = &_54;
        _77 = <Rc<dyn Baz> as Clone>::clone(move _78) -> [return: bb22, unwind: bb47];
    }

    bb22: {
        _80 = RefCell::<i32>::new(const 42_i32) -> [return: bb23, unwind: bb46];
    }

    bb23: {
        _79 = Rc::<RefCell<i32>>::new(move _80) -> [return: bb24, unwind: bb46];
    }

    bb24: {
        _83 = &_79;
        _82 = <Rc<RefCell<i32>> as Clone>::clone(move _83) -> [return: bb25, unwind: bb45];
    }

    bb25: {
        _81 = move _82 as std::rc::Rc<std::cell::RefCell<dyn Baz>> (Pointer(Unsize));
        _93 = &_81;
        _92 = <Rc<RefCell<dyn Baz>> as Deref>::deref(move _93) -> [return: bb26, unwind: bb44];
    }

    bb26: {
        _91 = _92;
        _90 = RefCell::<dyn Baz>::borrow(move _91) -> [return: bb27, unwind: bb44];
    }

    bb27: {
        _89 = &_90;
        _88 = <Ref<'_, dyn Baz> as Deref>::deref(move _89) -> [return: bb28, unwind: bb43];
    }

    bb28: {
        _87 = _88;
        _86 = <dyn Baz as Baz>::get(move _87) -> [return: bb29, unwind: bb43];
    }

    bb29: {
        _85 = &_86;
        _107 = const _;
        _84 = (move _85, _107);
        _94 = (_84.0: &i32);
        _95 = (_84.1: &i32);
        _98 = (*_94);
        _99 = (*_95);
        _97 = Eq(move _98, move _99);
        _96 = Not(move _97);
        switchInt(move _96) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _100 = core::panicking::AssertKind::Eq;
        _102 = Option::<Arguments<'_>>::None;
        _101 = core::panicking::assert_failed::<i32, i32>(move _100, _94, _95, move _102) -> bb43;
    }

    bb31: {
        drop(_90) -> [return: bb32, unwind: bb44];
    }

    bb32: {
        _106 = &_79;
        _105 = Rc::<RefCell<i32>>::downgrade(_106) -> [return: bb33, unwind: bb44];
    }

    bb33: {
        _104 = move _105 as std::rc::Weak<std::cell::RefCell<dyn Baz>> (Pointer(Unsize));
        _103 = move _104;
        drop(_103) -> [return: bb34, unwind: bb44];
    }

    bb34: {
        drop(_81) -> [return: bb35, unwind: bb45];
    }

    bb35: {
        drop(_79) -> [return: bb36, unwind: bb46];
    }

    bb36: {
        drop(_77) -> [return: bb37, unwind: bb47];
    }

    bb37: {
        drop(_74) -> [return: bb38, unwind: bb48];
    }

    bb38: {
        drop(_72) -> [return: bb39, unwind: bb49];
    }

    bb39: {
        drop(_54) -> [return: bb40, unwind: bb50];
    }

    bb40: {
        drop(_53) -> [return: bb41, unwind: bb51];
    }

    bb41: {
        drop(_3) -> [return: bb42, unwind continue];
    }

    bb42: {
        return;
    }

    bb43 (cleanup): {
        drop(_90) -> [return: bb44, unwind terminate];
    }

    bb44 (cleanup): {
        drop(_81) -> [return: bb45, unwind terminate];
    }

    bb45 (cleanup): {
        drop(_79) -> [return: bb46, unwind terminate];
    }

    bb46 (cleanup): {
        drop(_77) -> [return: bb47, unwind terminate];
    }

    bb47 (cleanup): {
        drop(_74) -> [return: bb48, unwind terminate];
    }

    bb48 (cleanup): {
        drop(_72) -> [return: bb49, unwind terminate];
    }

    bb49 (cleanup): {
        drop(_54) -> [return: bb50, unwind terminate];
    }

    bb50 (cleanup): {
        drop(_53) -> [return: bb51, unwind terminate];
    }

    bb51 (cleanup): {
        drop(_3) -> [return: bb52, unwind terminate];
    }

    bb52 (cleanup): {
        resume;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}
