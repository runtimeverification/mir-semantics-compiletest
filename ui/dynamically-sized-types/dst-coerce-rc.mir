// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dynamically-sized-types/dst-coerce-rc.rs:15:1: 15:17>::get(_1: &i32) -> i32 {
    debug self => _1;                    // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:16:12: 16:17
    let mut _0: i32;                     // return place in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:16:22: 16:25

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:17:9: 17:14
        return;                          // scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:18:6: 18:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:21:11: 21:11
    let _1: std::rc::Rc<[i32; 3]>;       // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:22:9: 22:10
    let mut _2: [i32; 3];                // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:22:35: 22:44
    let mut _4: std::rc::Rc<[i32; 3]>;   // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:23:24: 23:25
    let mut _5: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _7: &[i32];                      // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:24:16: 24:17
    let mut _8: &std::rc::Rc<[i32]>;     // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:24:16: 24:17
    let _9: usize;                       // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:24:18: 24:19
    let mut _10: usize;                  // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:24:16: 24:20
    let mut _11: bool;                   // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:24:16: 24:20
    let mut _12: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _17: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _18: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _20: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _21: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _22: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _23: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _24: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _25: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _27: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _28: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _29: &[i32];                     // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:25:16: 25:17
    let mut _30: &std::rc::Rc<[i32]>;    // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:25:16: 25:17
    let _31: usize;                      // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:25:18: 25:19
    let mut _32: usize;                  // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:25:16: 25:20
    let mut _33: bool;                   // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:25:16: 25:20
    let mut _34: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _38: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _39: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _40: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _42: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _43: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _44: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _45: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _46: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _47: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _49: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _50: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _51: &[i32];                     // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:26:16: 26:17
    let mut _52: &std::rc::Rc<[i32]>;    // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:26:16: 26:17
    let _53: usize;                      // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:26:18: 26:19
    let mut _54: usize;                  // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:26:16: 26:20
    let mut _55: bool;                   // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:26:16: 26:20
    let mut _56: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _59: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _60: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _61: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _62: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _64: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _65: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _66: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _67: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _68: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _69: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _73: std::rc::Rc<i32>;       // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:29:26: 29:35
    let mut _74: &std::rc::Rc<i32>;      // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:29:26: 29:35
    let mut _75: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _76: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _77: i32;                        // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:30:16: 30:23
    let mut _78: &dyn Baz;               // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:30:16: 30:23
    let _79: &dyn Baz;                   // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:30:16: 30:23
    let mut _80: &std::rc::Rc<dyn Baz>;  // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:30:16: 30:23
    let mut _81: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _84: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _85: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _86: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _87: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _89: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _90: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _91: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _92: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _93: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _94: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _95: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _97: &std::rc::Rc<i32>;      // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:32:38: 32:40
    let _98: &std::rc::Rc<i32>;          // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:32:38: 32:40
    let mut _100: std::rc::Weak<i32>;    // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:33:28: 33:37
    let mut _101: &std::rc::Weak<i32>;   // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:33:28: 33:37
    let mut _103: &std::rc::Rc<dyn Baz>; // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:35:14: 35:23
    let mut _105: std::cell::RefCell<i32>; // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:37:39: 37:55
    let mut _107: std::rc::Rc<std::cell::RefCell<i32>>; // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:38:35: 38:44
    let mut _108: &std::rc::Rc<std::cell::RefCell<i32>>; // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:38:35: 38:44
    let mut _109: (&i32, &i32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _110: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _111: i32;                       // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:39:16: 39:32
    let mut _112: &dyn Baz;              // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:39:16: 39:32
    let _113: &dyn Baz;                  // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:39:16: 39:32
    let mut _114: &std::cell::Ref<'_, dyn Baz>; // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:39:16: 39:32
    let _115: std::cell::Ref<'_, dyn Baz>; // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:39:16: 39:26
    let mut _116: &std::cell::RefCell<dyn Baz>; // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:39:16: 39:26
    let _117: &std::cell::RefCell<dyn Baz>; // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:39:16: 39:26
    let mut _118: &std::rc::Rc<std::cell::RefCell<dyn Baz>>; // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:39:16: 39:26
    let mut _119: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _122: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _123: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _124: i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _125: i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _127: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _128: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _129: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _130: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _131: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _132: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _133: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _135: std::rc::Weak<std::cell::RefCell<dyn Baz>>; // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:41:37: 41:65
    let mut _136: std::rc::Weak<std::cell::RefCell<i32>>; // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:41:37: 41:54
    let mut _137: &std::rc::Rc<std::cell::RefCell<i32>>; // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:41:51: 41:53
    let _138: &std::rc::Rc<std::cell::RefCell<i32>>; // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:41:51: 41:53
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/dynamically-sized-types/dst-coerce-rc.rs:22:9: 22:10
        let _3: std::rc::Rc<[i32]>;      // in scope 1 at ui/dynamically-sized-types/dst-coerce-rc.rs:23:9: 23:10
        scope 2 {
            debug b => _3;               // in scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:23:9: 23:10
            let _13: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _14: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _35: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _36: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _57: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _58: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _71: std::rc::Rc<i32>;   // in scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:28:9: 28:10
            let mut _141: &i32;          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _142: &i32;          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _143: &i32;          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _13;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _14;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _19: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _19;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug left_val => _35;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _36;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _41: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 6 {
                    debug kind => _41;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 7 {
                debug left_val => _57;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _58;  // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _63: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 8 {
                    debug kind => _63;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 9 {
                debug a => _71;          // in scope 9 at ui/dynamically-sized-types/dst-coerce-rc.rs:28:9: 28:10
                let _72: std::rc::Rc<dyn Baz>; // in scope 9 at ui/dynamically-sized-types/dst-coerce-rc.rs:29:9: 29:10
                scope 10 {
                    debug b => _72;      // in scope 10 at ui/dynamically-sized-types/dst-coerce-rc.rs:29:9: 29:10
                    let _82: &i32;       // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _83: &i32;       // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _96: std::rc::Weak<i32>; // in scope 10 at ui/dynamically-sized-types/dst-coerce-rc.rs:32:9: 32:10
                    let mut _140: &i32;  // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 11 {
                        debug left_val => _82; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _83; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _88: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 12 {
                            debug kind => _88; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 13 {
                        debug c => _96;  // in scope 13 at ui/dynamically-sized-types/dst-coerce-rc.rs:32:9: 32:10
                        let _99: std::rc::Weak<dyn Baz>; // in scope 13 at ui/dynamically-sized-types/dst-coerce-rc.rs:33:9: 33:10
                        scope 14 {
                            debug d => _99; // in scope 14 at ui/dynamically-sized-types/dst-coerce-rc.rs:33:9: 33:10
                            let _102: std::rc::Rc<dyn Baz>; // in scope 14 at ui/dynamically-sized-types/dst-coerce-rc.rs:35:9: 35:11
                            scope 15 {
                                debug _c => _102; // in scope 15 at ui/dynamically-sized-types/dst-coerce-rc.rs:35:9: 35:11
                                let _104: std::rc::Rc<std::cell::RefCell<i32>>; // in scope 15 at ui/dynamically-sized-types/dst-coerce-rc.rs:37:9: 37:10
                                scope 16 {
                                    debug a => _104; // in scope 16 at ui/dynamically-sized-types/dst-coerce-rc.rs:37:9: 37:10
                                    let _106: std::rc::Rc<std::cell::RefCell<dyn Baz>>; // in scope 16 at ui/dynamically-sized-types/dst-coerce-rc.rs:38:9: 38:10
                                    scope 17 {
                                        debug b => _106; // in scope 17 at ui/dynamically-sized-types/dst-coerce-rc.rs:38:9: 38:10
                                        let _120: &i32; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                        let _121: &i32; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                        let _134: std::rc::Weak<std::cell::RefCell<dyn Baz>>; // in scope 17 at ui/dynamically-sized-types/dst-coerce-rc.rs:41:9: 41:10
                                        let mut _139: &i32; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                        scope 18 {
                                            debug left_val => _120; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                            debug right_val => _121; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                            let _126: core::panicking::AssertKind; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                            scope 19 {
                                                debug kind => _126; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                            }
                                        }
                                        scope 20 {
                                            debug c => _134; // in scope 20 at ui/dynamically-sized-types/dst-coerce-rc.rs:41:9: 41:10
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:22:35: 22:44
        _1 = Rc::<[i32; 3]>::new(move _2) -> bb1; // scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:22:27: 22:45
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coerce-rc.rs:22:27: 22:34
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn([i32; 3]) -> Rc<[i32; 3]> {Rc::<[i32; 3]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = move _1;                    // scope 1 at ui/dynamically-sized-types/dst-coerce-rc.rs:23:24: 23:25
        _3 = move _4 as std::rc::Rc<[i32]> (Pointer(Unsize)); // scope 1 at ui/dynamically-sized-types/dst-coerce-rc.rs:23:24: 23:25
        _8 = &_3;                        // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:24:16: 24:17
        _7 = <Rc<[i32]> as Deref>::deref(move _8) -> [return: bb2, unwind: bb51]; // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:24:16: 24:17
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coerce-rc.rs:24:16: 24:17
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<[i32]>) -> &'a <Rc<[i32]> as Deref>::Target {<Rc<[i32]> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = const 0_usize;              // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:24:18: 24:19
        _10 = Len((*_7));                // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:24:16: 24:20
        _11 = Lt(_9, _10);               // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:24:16: 24:20
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> [success: bb3, unwind: bb51]; // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:24:16: 24:20
    }

    bb3: {
        _6 = &(*_7)[_9];                 // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _143 = const _;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[4])) }
        _12 = _143;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _12);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _13 = (_5.0: &i32);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _14 = (_5.1: &i32);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _17 = (*_13);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _18 = const 1_i32;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _16 = Eq(move _17, move _18);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _15 = Not(move _16);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _15) -> [0: bb5, otherwise: bb4]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _19 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = _13;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _14;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = _25;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _20 = core::panicking::assert_failed::<i32, i32>(move _21, move _22, move _24, move _26) -> bb51; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb5: {
        _30 = &_3;                       // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:25:16: 25:17
        _29 = <Rc<[i32]> as Deref>::deref(move _30) -> [return: bb6, unwind: bb51]; // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:25:16: 25:17
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coerce-rc.rs:25:16: 25:17
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<[i32]>) -> &'a <Rc<[i32]> as Deref>::Target {<Rc<[i32]> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _31 = const 1_usize;             // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:25:18: 25:19
        _32 = Len((*_29));               // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:25:16: 25:20
        _33 = Lt(_31, _32);              // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:25:16: 25:20
        assert(move _33, "index out of bounds: the length is {} but the index is {}", move _32, _31) -> [success: bb7, unwind: bb51]; // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:25:16: 25:20
    }

    bb7: {
        _28 = &(*_29)[_31];              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _142 = const _;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[3])) }
        _34 = _142;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _27 = (move _28, move _34);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _35 = (_27.0: &i32);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _36 = (_27.1: &i32);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _39 = (*_35);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _40 = const 2_i32;               // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _38 = Eq(move _39, move _40);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _37 = Not(move _38);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _37) -> [0: bb9, otherwise: bb8]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _41 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _43 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _45 = _35;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _44 = _45;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _47 = _36;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _46 = _47;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _48 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _42 = core::panicking::assert_failed::<i32, i32>(move _43, move _44, move _46, move _48) -> bb51; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb9: {
        _52 = &_3;                       // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:26:16: 26:17
        _51 = <Rc<[i32]> as Deref>::deref(move _52) -> [return: bb10, unwind: bb51]; // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:26:16: 26:17
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coerce-rc.rs:26:16: 26:17
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<[i32]>) -> &'a <Rc<[i32]> as Deref>::Target {<Rc<[i32]> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb10: {
        _53 = const 2_usize;             // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:26:18: 26:19
        _54 = Len((*_51));               // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:26:16: 26:20
        _55 = Lt(_53, _54);              // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:26:16: 26:20
        assert(move _55, "index out of bounds: the length is {} but the index is {}", move _54, _53) -> [success: bb11, unwind: bb51]; // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:26:16: 26:20
    }

    bb11: {
        _50 = &(*_51)[_53];              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _141 = const _;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[2])) }
        _56 = _141;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _49 = (move _50, move _56);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _57 = (_49.0: &i32);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _58 = (_49.1: &i32);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _61 = (*_57);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _62 = const 3_i32;               // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _60 = Eq(move _61, move _62);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _59 = Not(move _60);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _59) -> [0: bb13, otherwise: bb12]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb12: {
        _63 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _65 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _67 = _57;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _66 = _67;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _69 = _58;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _68 = _69;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _70 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _64 = core::panicking::assert_failed::<i32, i32>(move _65, move _66, move _68, move _70) -> bb51; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb13: {
        _71 = Rc::<i32>::new(const 42_i32) -> [return: bb14, unwind: bb51]; // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:28:22: 28:33
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coerce-rc.rs:28:22: 28:29
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(i32) -> Rc<i32> {Rc::<i32>::new}, val: Value(<ZST>) }
    }

    bb14: {
        _74 = &_71;                      // scope 9 at ui/dynamically-sized-types/dst-coerce-rc.rs:29:26: 29:35
        _73 = <Rc<i32> as Clone>::clone(move _74) -> [return: bb15, unwind: bb50]; // scope 9 at ui/dynamically-sized-types/dst-coerce-rc.rs:29:26: 29:35
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coerce-rc.rs:29:28: 29:33
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<i32>) -> Rc<i32> {<Rc<i32> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb15: {
        _72 = move _73 as std::rc::Rc<dyn Baz> (Pointer(Unsize)); // scope 9 at ui/dynamically-sized-types/dst-coerce-rc.rs:29:26: 29:35
        _80 = &_72;                      // scope 10 at ui/dynamically-sized-types/dst-coerce-rc.rs:30:16: 30:23
        _79 = <Rc<dyn Baz> as Deref>::deref(move _80) -> [return: bb16, unwind: bb49]; // scope 10 at ui/dynamically-sized-types/dst-coerce-rc.rs:30:16: 30:23
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coerce-rc.rs:30:16: 30:23
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<dyn Baz>) -> &'a <Rc<dyn Baz> as Deref>::Target {<Rc<dyn Baz> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb16: {
        _78 = _79;                       // scope 10 at ui/dynamically-sized-types/dst-coerce-rc.rs:30:16: 30:23
        _77 = <dyn Baz as Baz>::get(move _78) -> [return: bb17, unwind: bb49]; // scope 10 at ui/dynamically-sized-types/dst-coerce-rc.rs:30:16: 30:23
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coerce-rc.rs:30:18: 30:21
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Baz) -> i32 {<dyn Baz as Baz>::get}, val: Value(<ZST>) }
    }

    bb17: {
        _76 = &_77;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _140 = const _;                  // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _81 = _140;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _75 = (move _76, move _81);      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _82 = (_75.0: &i32);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _83 = (_75.1: &i32);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _86 = (*_82);                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _87 = const 42_i32;              // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _85 = Eq(move _86, move _87);    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _84 = Not(move _85);             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _84) -> [0: bb19, otherwise: bb18]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb18: {
        _88 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _90 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _92 = _82;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _91 = _92;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _94 = _83;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _93 = _94;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _95 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _89 = core::panicking::assert_failed::<i32, i32>(move _90, move _91, move _93, move _95) -> bb49; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb19: {
        _98 = &_71;                      // scope 10 at ui/dynamically-sized-types/dst-coerce-rc.rs:32:38: 32:40
        _97 = _98;                       // scope 10 at ui/dynamically-sized-types/dst-coerce-rc.rs:32:38: 32:40
        _96 = Rc::<i32>::downgrade(move _97) -> [return: bb20, unwind: bb49]; // scope 10 at ui/dynamically-sized-types/dst-coerce-rc.rs:32:24: 32:41
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coerce-rc.rs:32:24: 32:37
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<i32>) -> std::rc::Weak<i32> {Rc::<i32>::downgrade}, val: Value(<ZST>) }
    }

    bb20: {
        _101 = &_96;                     // scope 13 at ui/dynamically-sized-types/dst-coerce-rc.rs:33:28: 33:37
        _100 = <std::rc::Weak<i32> as Clone>::clone(move _101) -> [return: bb21, unwind: bb48]; // scope 13 at ui/dynamically-sized-types/dst-coerce-rc.rs:33:28: 33:37
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coerce-rc.rs:33:30: 33:35
                                         // + literal: Const { ty: for<'a> fn(&'a std::rc::Weak<i32>) -> std::rc::Weak<i32> {<std::rc::Weak<i32> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb21: {
        _99 = move _100 as std::rc::Weak<dyn Baz> (Pointer(Unsize)); // scope 13 at ui/dynamically-sized-types/dst-coerce-rc.rs:33:28: 33:37
        _103 = &_72;                     // scope 14 at ui/dynamically-sized-types/dst-coerce-rc.rs:35:14: 35:23
        _102 = <Rc<dyn Baz> as Clone>::clone(move _103) -> [return: bb22, unwind: bb47]; // scope 14 at ui/dynamically-sized-types/dst-coerce-rc.rs:35:14: 35:23
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coerce-rc.rs:35:16: 35:21
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<dyn Baz>) -> Rc<dyn Baz> {<Rc<dyn Baz> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb22: {
        _105 = RefCell::<i32>::new(const 42_i32) -> [return: bb23, unwind: bb46]; // scope 15 at ui/dynamically-sized-types/dst-coerce-rc.rs:37:39: 37:55
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coerce-rc.rs:37:39: 37:51
                                         // + user_ty: UserType(17)
                                         // + literal: Const { ty: fn(i32) -> RefCell<i32> {RefCell::<i32>::new}, val: Value(<ZST>) }
    }

    bb23: {
        _104 = Rc::<RefCell<i32>>::new(move _105) -> [return: bb24, unwind: bb46]; // scope 15 at ui/dynamically-sized-types/dst-coerce-rc.rs:37:31: 37:56
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coerce-rc.rs:37:31: 37:38
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: fn(RefCell<i32>) -> Rc<RefCell<i32>> {Rc::<RefCell<i32>>::new}, val: Value(<ZST>) }
    }

    bb24: {
        _108 = &_104;                    // scope 16 at ui/dynamically-sized-types/dst-coerce-rc.rs:38:35: 38:44
        _107 = <Rc<RefCell<i32>> as Clone>::clone(move _108) -> [return: bb25, unwind: bb45]; // scope 16 at ui/dynamically-sized-types/dst-coerce-rc.rs:38:35: 38:44
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coerce-rc.rs:38:37: 38:42
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<i32>>) -> Rc<RefCell<i32>> {<Rc<RefCell<i32>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb25: {
        _106 = move _107 as std::rc::Rc<std::cell::RefCell<dyn Baz>> (Pointer(Unsize)); // scope 16 at ui/dynamically-sized-types/dst-coerce-rc.rs:38:35: 38:44
        _118 = &_106;                    // scope 17 at ui/dynamically-sized-types/dst-coerce-rc.rs:39:16: 39:26
        _117 = <Rc<RefCell<dyn Baz>> as Deref>::deref(move _118) -> [return: bb26, unwind: bb44]; // scope 17 at ui/dynamically-sized-types/dst-coerce-rc.rs:39:16: 39:26
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coerce-rc.rs:39:16: 39:26
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<dyn Baz>>) -> &'a <Rc<RefCell<dyn Baz>> as Deref>::Target {<Rc<RefCell<dyn Baz>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb26: {
        _116 = _117;                     // scope 17 at ui/dynamically-sized-types/dst-coerce-rc.rs:39:16: 39:26
        _115 = RefCell::<dyn Baz>::borrow(move _116) -> [return: bb27, unwind: bb44]; // scope 17 at ui/dynamically-sized-types/dst-coerce-rc.rs:39:16: 39:26
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coerce-rc.rs:39:18: 39:24
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<dyn Baz>) -> Ref<'a, dyn Baz> {RefCell::<dyn Baz>::borrow}, val: Value(<ZST>) }
    }

    bb27: {
        _114 = &_115;                    // scope 17 at ui/dynamically-sized-types/dst-coerce-rc.rs:39:16: 39:32
        _113 = <Ref<'_, dyn Baz> as Deref>::deref(move _114) -> [return: bb28, unwind: bb43]; // scope 17 at ui/dynamically-sized-types/dst-coerce-rc.rs:39:16: 39:32
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coerce-rc.rs:39:16: 39:32
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, dyn Baz>) -> &'a <Ref<'_, dyn Baz> as Deref>::Target {<Ref<'_, dyn Baz> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb28: {
        _112 = _113;                     // scope 17 at ui/dynamically-sized-types/dst-coerce-rc.rs:39:16: 39:32
        _111 = <dyn Baz as Baz>::get(move _112) -> [return: bb29, unwind: bb43]; // scope 17 at ui/dynamically-sized-types/dst-coerce-rc.rs:39:16: 39:32
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coerce-rc.rs:39:27: 39:30
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Baz) -> i32 {<dyn Baz as Baz>::get}, val: Value(<ZST>) }
    }

    bb29: {
        _110 = &_111;                    // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _139 = const _;                  // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _119 = _139;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _109 = (move _110, move _119);   // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _120 = (_109.0: &i32);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _121 = (_109.1: &i32);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _124 = (*_120);                  // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _125 = const 42_i32;             // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _123 = Eq(move _124, move _125); // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _122 = Not(move _123);           // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _122) -> [0: bb31, otherwise: bb30]; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb30: {
        _126 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _128 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _130 = _120;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _129 = _130;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _132 = _121;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _131 = _132;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _133 = Option::<Arguments<'_>>::None; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _127 = core::panicking::assert_failed::<i32, i32>(move _128, move _129, move _131, move _133) -> bb43; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb31: {
        drop(_115) -> [return: bb32, unwind: bb44]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb32: {
        _138 = &_104;                    // scope 17 at ui/dynamically-sized-types/dst-coerce-rc.rs:41:51: 41:53
        _137 = _138;                     // scope 17 at ui/dynamically-sized-types/dst-coerce-rc.rs:41:51: 41:53
        _136 = Rc::<RefCell<i32>>::downgrade(move _137) -> [return: bb33, unwind: bb44]; // scope 17 at ui/dynamically-sized-types/dst-coerce-rc.rs:41:37: 41:54
                                         // mir::Constant
                                         // + span: ui/dynamically-sized-types/dst-coerce-rc.rs:41:37: 41:50
                                         // + user_ty: UserType(22)
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<i32>>) -> std::rc::Weak<RefCell<i32>> {Rc::<RefCell<i32>>::downgrade}, val: Value(<ZST>) }
    }

    bb33: {
        _135 = move _136 as std::rc::Weak<std::cell::RefCell<dyn Baz>> (Pointer(Unsize)); // scope 17 at ui/dynamically-sized-types/dst-coerce-rc.rs:41:37: 41:54
        _134 = move _135;                // scope 17 at ui/dynamically-sized-types/dst-coerce-rc.rs:41:37: 41:65
        drop(_134) -> [return: bb34, unwind: bb44]; // scope 17 at ui/dynamically-sized-types/dst-coerce-rc.rs:42:1: 42:2
    }

    bb34: {
        drop(_106) -> [return: bb35, unwind: bb45]; // scope 16 at ui/dynamically-sized-types/dst-coerce-rc.rs:42:1: 42:2
    }

    bb35: {
        drop(_104) -> [return: bb36, unwind: bb46]; // scope 15 at ui/dynamically-sized-types/dst-coerce-rc.rs:42:1: 42:2
    }

    bb36: {
        drop(_102) -> [return: bb37, unwind: bb47]; // scope 14 at ui/dynamically-sized-types/dst-coerce-rc.rs:42:1: 42:2
    }

    bb37: {
        drop(_99) -> [return: bb38, unwind: bb48]; // scope 13 at ui/dynamically-sized-types/dst-coerce-rc.rs:42:1: 42:2
    }

    bb38: {
        drop(_96) -> [return: bb39, unwind: bb49]; // scope 10 at ui/dynamically-sized-types/dst-coerce-rc.rs:42:1: 42:2
    }

    bb39: {
        drop(_72) -> [return: bb40, unwind: bb50]; // scope 9 at ui/dynamically-sized-types/dst-coerce-rc.rs:42:1: 42:2
    }

    bb40: {
        drop(_71) -> [return: bb41, unwind: bb51]; // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:42:1: 42:2
    }

    bb41: {
        drop(_3) -> bb42;                // scope 1 at ui/dynamically-sized-types/dst-coerce-rc.rs:42:1: 42:2
    }

    bb42: {
        return;                          // scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:42:2: 42:2
    }

    bb43 (cleanup): {
        drop(_115) -> bb44;              // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb44 (cleanup): {
        drop(_106) -> bb45;              // scope 16 at ui/dynamically-sized-types/dst-coerce-rc.rs:42:1: 42:2
    }

    bb45 (cleanup): {
        drop(_104) -> bb46;              // scope 15 at ui/dynamically-sized-types/dst-coerce-rc.rs:42:1: 42:2
    }

    bb46 (cleanup): {
        drop(_102) -> bb47;              // scope 14 at ui/dynamically-sized-types/dst-coerce-rc.rs:42:1: 42:2
    }

    bb47 (cleanup): {
        drop(_99) -> bb48;               // scope 13 at ui/dynamically-sized-types/dst-coerce-rc.rs:42:1: 42:2
    }

    bb48 (cleanup): {
        drop(_96) -> bb49;               // scope 10 at ui/dynamically-sized-types/dst-coerce-rc.rs:42:1: 42:2
    }

    bb49 (cleanup): {
        drop(_72) -> bb50;               // scope 9 at ui/dynamically-sized-types/dst-coerce-rc.rs:42:1: 42:2
    }

    bb50 (cleanup): {
        drop(_71) -> bb51;               // scope 2 at ui/dynamically-sized-types/dst-coerce-rc.rs:42:1: 42:2
    }

    bb51 (cleanup): {
        drop(_3) -> bb52;                // scope 1 at ui/dynamically-sized-types/dst-coerce-rc.rs:42:1: 42:2
    }

    bb52 (cleanup): {
        resume;                          // scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:21:1: 42:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:39:34: 39:36

    bb0: {
        _1 = const 42_i32;               // scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:39:34: 39:36
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:30:25: 30:27

    bb0: {
        _1 = const 42_i32;               // scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:30:25: 30:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:26:22: 26:23

    bb0: {
        _1 = const 3_i32;                // scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:26:22: 26:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:25:22: 25:23

    bb0: {
        _1 = const 2_i32;                // scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:25:22: 25:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:24:22: 24:23

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:24:22: 24:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:22:21: 22:22

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:22:21: 22:22
        return;                          // scope 0 at ui/dynamically-sized-types/dst-coerce-rc.rs:22:21: 22:22
    }
}
