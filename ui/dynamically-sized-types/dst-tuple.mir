// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &(isize, &str, [isize])) -> () {
    debug x => _1;
    let mut _0: ();
    let _2: &[isize];
    let mut _3: (&usize, &usize);
    let mut _4: &usize;
    let _5: usize;
    let mut _6: &[isize];
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: usize;
    let mut _12: usize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&isize, &isize);
    let mut _17: &isize;
    let _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: isize;
    let mut _26: isize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: (&isize, &isize);
    let mut _31: &isize;
    let _32: usize;
    let mut _33: usize;
    let mut _34: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: isize;
    let mut _40: isize;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _44: (&isize, &isize);
    let mut _45: &isize;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: isize;
    let mut _51: isize;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: (&&str, &&str);
    let mut _56: &&str;
    let mut _59: bool;
    let mut _60: bool;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug y => _2;
        let _7: &usize;
        let _8: &usize;
        let _21: &isize;
        let _22: &isize;
        let _35: &isize;
        let _36: &isize;
        let _46: &isize;
        let _47: &isize;
        let _57: &&str;
        let _58: &&str;
        let mut _64: &&str;
        let mut _65: &isize;
        let mut _66: &isize;
        let mut _67: &isize;
        let mut _68: &usize;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
        scope 4 {
            debug left_val => _21;
            debug right_val => _22;
            let _27: core::panicking::AssertKind;
            scope 5 {
                debug kind => _27;
            }
        }
        scope 6 {
            debug left_val => _35;
            debug right_val => _36;
            let _41: core::panicking::AssertKind;
            scope 7 {
                debug kind => _41;
            }
        }
        scope 8 {
            debug left_val => _46;
            debug right_val => _47;
            let _52: core::panicking::AssertKind;
            scope 9 {
                debug kind => _52;
            }
        }
        scope 10 {
            debug left_val => _57;
            debug right_val => _58;
            let _61: core::panicking::AssertKind;
            scope 11 {
                debug kind => _61;
            }
        }
    }

    bb0: {
        _2 = &((*_1).2: [isize]);
        _6 = &((*_1).2: [isize]);
        _5 = Len((*_6));
        _4 = &_5;
        _68 = const _;
        _3 = (move _4, _68);
        _7 = (_3.0: &usize);
        _8 = (_3.1: &usize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<usize, usize>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb2: {
        _18 = const 0_usize;
        _19 = Len((*_2));
        _20 = Lt(_18, _19);
        assert(move _20, "index out of bounds: the length is {} but the index is {}", move _19, _18) -> [success: bb3, unwind continue];
    }

    bb3: {
        _17 = &(*_2)[_18];
        _67 = const _;
        _16 = (move _17, _67);
        _21 = (_16.0: &isize);
        _22 = (_16.1: &isize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<isize, isize>(move _27, _21, _22, move _29) -> unwind continue;
    }

    bb5: {
        _32 = const 1_usize;
        _33 = Len(((*_1).2: [isize]));
        _34 = Lt(_32, _33);
        assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _32) -> [success: bb6, unwind continue];
    }

    bb6: {
        _31 = &((*_1).2: [isize])[_32];
        _66 = const _;
        _30 = (move _31, _66);
        _35 = (_30.0: &isize);
        _36 = (_30.1: &isize);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<isize, isize>(move _41, _35, _36, move _43) -> unwind continue;
    }

    bb8: {
        _45 = &((*_1).0: isize);
        _65 = const _;
        _44 = (move _45, _65);
        _46 = (_44.0: &isize);
        _47 = (_44.1: &isize);
        _50 = (*_46);
        _51 = (*_47);
        _49 = Eq(move _50, move _51);
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<isize, isize>(move _52, _46, _47, move _54) -> unwind continue;
    }

    bb10: {
        _56 = &((*_1).1: &str);
        _64 = const _;
        _55 = (move _56, _64);
        _57 = (_55.0: &&str);
        _58 = (_55.1: &&str);
        _60 = <&str as PartialEq>::eq(_57, _58) -> [return: bb11, unwind continue];
    }

    bb11: {
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = core::panicking::assert_failed::<&str, &str>(move _61, _57, _58, move _63) -> unwind continue;
    }

    bb13: {
        return;
    }
}

promoted[0] in foo: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "some str";
        _0 = &_1;
        return;
    }
}

promoted[1] in foo: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 5_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in foo: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in foo: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[4] in foo: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

fn foo2(_1: &(isize, &str, [T])) -> () {
    debug x => _1;
    let mut _0: ();
    let _2: &[T];
    let mut _4: (&usize, &usize);
    let mut _5: &usize;
    let _6: usize;
    let mut _7: &[T];
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&Bar, &Bar);
    let mut _18: &Bar;
    let _19: Bar;
    let mut _20: &T;
    let _21: usize;
    let mut _22: usize;
    let mut _23: bool;
    let mut _24: &Bar;
    let mut _27: bool;
    let mut _28: bool;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: (&Bar, &Bar);
    let mut _33: &Bar;
    let _34: Bar;
    let mut _35: &T;
    let _36: usize;
    let mut _37: usize;
    let mut _38: bool;
    let mut _39: &Bar;
    let mut _42: bool;
    let mut _43: bool;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: (&isize, &isize);
    let mut _48: &isize;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: isize;
    let mut _54: isize;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _58: (&&str, &&str);
    let mut _59: &&str;
    let mut _62: bool;
    let mut _63: bool;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug y => _2;
        let _3: Bar;
        scope 2 {
            debug bar => const Bar;
            let _8: &usize;
            let _9: &usize;
            let _25: &Bar;
            let _26: &Bar;
            let _40: &Bar;
            let _41: &Bar;
            let _49: &isize;
            let _50: &isize;
            let _60: &&str;
            let _61: &&str;
            let mut _67: &&str;
            let mut _68: &isize;
            let mut _69: &usize;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
            scope 5 {
                debug left_val => _25;
                debug right_val => _26;
                let _29: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _29;
                }
            }
            scope 7 {
                debug left_val => _40;
                debug right_val => _41;
                let _44: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _44;
                }
            }
            scope 9 {
                debug left_val => _49;
                debug right_val => _50;
                let _55: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _55;
                }
            }
            scope 11 {
                debug left_val => _60;
                debug right_val => _61;
                let _64: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _64;
                }
            }
        }
    }

    bb0: {
        _2 = &((*_1).2: [T]);
        _7 = &((*_1).2: [T]);
        _6 = Len((*_7));
        _5 = &_6;
        _69 = const _;
        _4 = (move _5, _69);
        _8 = (_4.0: &usize);
        _9 = (_4.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb2: {
        _21 = const 0_usize;
        _22 = Len((*_2));
        _23 = Lt(_21, _22);
        assert(move _23, "index out of bounds: the length is {} but the index is {}", move _22, _21) -> [success: bb3, unwind continue];
    }

    bb3: {
        _20 = &(*_2)[_21];
        _19 = <T as ToBar>::to_bar(move _20) -> [return: bb4, unwind continue];
    }

    bb4: {
        _18 = &_19;
        _24 = &_3;
        _17 = (move _18, move _24);
        _25 = (_17.0: &Bar);
        _26 = (_17.1: &Bar);
        _28 = <Bar as PartialEq>::eq(_25, _26) -> [return: bb5, unwind continue];
    }

    bb5: {
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<Bar, Bar>(move _29, _25, _26, move _31) -> unwind continue;
    }

    bb7: {
        _36 = const 1_usize;
        _37 = Len(((*_1).2: [T]));
        _38 = Lt(_36, _37);
        assert(move _38, "index out of bounds: the length is {} but the index is {}", move _37, _36) -> [success: bb8, unwind continue];
    }

    bb8: {
        _35 = &((*_1).2: [T])[_36];
        _34 = <T as ToBar>::to_bar(move _35) -> [return: bb9, unwind continue];
    }

    bb9: {
        _33 = &_34;
        _39 = &_3;
        _32 = (move _33, move _39);
        _40 = (_32.0: &Bar);
        _41 = (_32.1: &Bar);
        _43 = <Bar as PartialEq>::eq(_40, _41) -> [return: bb10, unwind continue];
    }

    bb10: {
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<Bar, Bar>(move _44, _40, _41, move _46) -> unwind continue;
    }

    bb12: {
        _48 = &((*_1).0: isize);
        _68 = const _;
        _47 = (move _48, _68);
        _49 = (_47.0: &isize);
        _50 = (_47.1: &isize);
        _53 = (*_49);
        _54 = (*_50);
        _52 = Eq(move _53, move _54);
        _51 = Not(move _52);
        switchInt(move _51) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<isize, isize>(move _55, _49, _50, move _57) -> unwind continue;
    }

    bb14: {
        _59 = &((*_1).1: &str);
        _67 = const _;
        _58 = (move _59, _67);
        _60 = (_58.0: &&str);
        _61 = (_58.1: &&str);
        _63 = <&str as PartialEq>::eq(_60, _61) -> [return: bb15, unwind continue];
    }

    bb15: {
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<&str, &str>(move _64, _60, _61, move _66) -> unwind continue;
    }

    bb17: {
        return;
    }
}

promoted[0] in foo2: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "some str";
        _0 = &_1;
        return;
    }
}

promoted[1] in foo2: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 5_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in foo2: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

fn foo3(_1: &(isize, &str, (isize, &str, [isize]))) -> () {
    debug x => _1;
    let mut _0: ();
    let _2: &[isize];
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: isize;
    let mut _10: isize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&&str, &&str);
    let mut _15: &&str;
    let mut _18: bool;
    let mut _19: bool;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: (&isize, &isize);
    let mut _24: &isize;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: isize;
    let mut _30: isize;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: (&&str, &&str);
    let mut _35: &&str;
    let mut _38: bool;
    let mut _39: bool;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&usize, &usize);
    let mut _44: &usize;
    let _45: usize;
    let mut _46: &[isize];
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: usize;
    let mut _52: usize;
    let _54: !;
    let mut _55: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _56: (&isize, &isize);
    let mut _57: &isize;
    let _58: usize;
    let mut _59: usize;
    let mut _60: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: isize;
    let mut _66: isize;
    let _68: !;
    let mut _69: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _70: (&isize, &isize);
    let mut _71: &isize;
    let _72: usize;
    let mut _73: usize;
    let mut _74: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: isize;
    let mut _80: isize;
    let _82: !;
    let mut _83: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug y => _2;
        let _5: &isize;
        let _6: &isize;
        let _16: &&str;
        let _17: &&str;
        let _25: &isize;
        let _26: &isize;
        let _36: &&str;
        let _37: &&str;
        let _47: &usize;
        let _48: &usize;
        let _61: &isize;
        let _62: &isize;
        let _75: &isize;
        let _76: &isize;
        let mut _84: &isize;
        let mut _85: &isize;
        let mut _86: &usize;
        let mut _87: &&str;
        let mut _88: &isize;
        let mut _89: &&str;
        let mut _90: &isize;
        scope 2 {
            debug left_val => _5;
            debug right_val => _6;
            let _11: core::panicking::AssertKind;
            scope 3 {
                debug kind => _11;
            }
        }
        scope 4 {
            debug left_val => _16;
            debug right_val => _17;
            let _20: core::panicking::AssertKind;
            scope 5 {
                debug kind => _20;
            }
        }
        scope 6 {
            debug left_val => _25;
            debug right_val => _26;
            let _31: core::panicking::AssertKind;
            scope 7 {
                debug kind => _31;
            }
        }
        scope 8 {
            debug left_val => _36;
            debug right_val => _37;
            let _40: core::panicking::AssertKind;
            scope 9 {
                debug kind => _40;
            }
        }
        scope 10 {
            debug left_val => _47;
            debug right_val => _48;
            let _53: core::panicking::AssertKind;
            scope 11 {
                debug kind => _53;
            }
        }
        scope 12 {
            debug left_val => _61;
            debug right_val => _62;
            let _67: core::panicking::AssertKind;
            scope 13 {
                debug kind => _67;
            }
        }
        scope 14 {
            debug left_val => _75;
            debug right_val => _76;
            let _81: core::panicking::AssertKind;
            scope 15 {
                debug kind => _81;
            }
        }
    }

    bb0: {
        _2 = &(((*_1).2: (isize, &str, [isize])).2: [isize]);
        _4 = &((*_1).0: isize);
        _90 = const _;
        _3 = (move _4, _90);
        _5 = (_3.0: &isize);
        _6 = (_3.1: &isize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<isize, isize>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb2: {
        _15 = &((*_1).1: &str);
        _89 = const _;
        _14 = (move _15, _89);
        _16 = (_14.0: &&str);
        _17 = (_14.1: &&str);
        _19 = <&str as PartialEq>::eq(_16, _17) -> [return: bb3, unwind continue];
    }

    bb3: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<&str, &str>(move _20, _16, _17, move _22) -> unwind continue;
    }

    bb5: {
        _24 = &(((*_1).2: (isize, &str, [isize])).0: isize);
        _88 = const _;
        _23 = (move _24, _88);
        _25 = (_23.0: &isize);
        _26 = (_23.1: &isize);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<isize, isize>(move _31, _25, _26, move _33) -> unwind continue;
    }

    bb7: {
        _35 = &(((*_1).2: (isize, &str, [isize])).1: &str);
        _87 = const _;
        _34 = (move _35, _87);
        _36 = (_34.0: &&str);
        _37 = (_34.1: &&str);
        _39 = <&str as PartialEq>::eq(_36, _37) -> [return: bb8, unwind continue];
    }

    bb8: {
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<&str, &str>(move _40, _36, _37, move _42) -> unwind continue;
    }

    bb10: {
        _46 = &(((*_1).2: (isize, &str, [isize])).2: [isize]);
        _45 = Len((*_46));
        _44 = &_45;
        _86 = const _;
        _43 = (move _44, _86);
        _47 = (_43.0: &usize);
        _48 = (_43.1: &usize);
        _51 = (*_47);
        _52 = (*_48);
        _50 = Eq(move _51, move _52);
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _53 = core::panicking::AssertKind::Eq;
        _55 = Option::<Arguments<'_>>::None;
        _54 = core::panicking::assert_failed::<usize, usize>(move _53, _47, _48, move _55) -> unwind continue;
    }

    bb12: {
        _58 = const 0_usize;
        _59 = Len((*_2));
        _60 = Lt(_58, _59);
        assert(move _60, "index out of bounds: the length is {} but the index is {}", move _59, _58) -> [success: bb13, unwind continue];
    }

    bb13: {
        _57 = &(*_2)[_58];
        _85 = const _;
        _56 = (move _57, _85);
        _61 = (_56.0: &isize);
        _62 = (_56.1: &isize);
        _65 = (*_61);
        _66 = (*_62);
        _64 = Eq(move _65, move _66);
        _63 = Not(move _64);
        switchInt(move _63) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _67 = core::panicking::AssertKind::Eq;
        _69 = Option::<Arguments<'_>>::None;
        _68 = core::panicking::assert_failed::<isize, isize>(move _67, _61, _62, move _69) -> unwind continue;
    }

    bb15: {
        _72 = const 1_usize;
        _73 = Len((((*_1).2: (isize, &str, [isize])).2: [isize]));
        _74 = Lt(_72, _73);
        assert(move _74, "index out of bounds: the length is {} but the index is {}", move _73, _72) -> [success: bb16, unwind continue];
    }

    bb16: {
        _71 = &(((*_1).2: (isize, &str, [isize])).2: [isize])[_72];
        _84 = const _;
        _70 = (move _71, _84);
        _75 = (_70.0: &isize);
        _76 = (_70.1: &isize);
        _79 = (*_75);
        _80 = (*_76);
        _78 = Eq(move _79, move _80);
        _77 = Not(move _78);
        switchInt(move _77) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _81 = core::panicking::AssertKind::Eq;
        _83 = Option::<Arguments<'_>>::None;
        _82 = core::panicking::assert_failed::<isize, isize>(move _81, _75, _76, move _83) -> unwind continue;
    }

    bb18: {
        return;
    }
}

promoted[0] in foo3: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in foo3: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in foo3: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in foo3: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "deep str";
        _0 = &_1;
        return;
    }
}

promoted[4] in foo3: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 8_isize;
        _0 = &_1;
        return;
    }
}

promoted[5] in foo3: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "some str";
        _0 = &_1;
        return;
    }
}

promoted[6] in foo3: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 5_isize;
        _0 = &_1;
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-tuple.rs:40:16: 40:21>::clone(_1: &Bar) -> Bar {
    debug self => _1;
    let mut _0: Bar;

    bb0: {
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-tuple.rs:40:23: 40:32>::eq(_1: &Bar, _2: &Bar) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-tuple.rs:40:34: 40:36>::assert_receiver_is_total_eq(_1: &Bar) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-tuple.rs:40:38: 40:43>::fmt(_1: &Bar, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Bar";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/dynamically-sized-types/dst-tuple.rs:47:1: 47:19>::to_bar(_1: &Bar) -> Bar {
    debug self => _1;
    let mut _0: Bar;

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: (isize, &str, [isize; 3]);
    let mut _2: [isize; 3];
    let _3: ();
    let mut _4: &(isize, &str, [isize]);
    let _5: &(isize, &str, [isize; 3]);
    let _7: ();
    let mut _8: &(isize, &str, [isize]);
    let _10: ();
    let _12: &(isize, &str, [isize; 3]);
    let _13: ();
    let _15: ();
    let _17: ();
    let mut _18: &(isize, &str, [Bar]);
    let _19: &(isize, &str, [Bar; 3]);
    let _21: ();
    let mut _22: &(isize, &str, [Bar]);
    let _24: ();
    let _26: &(isize, &str, [Bar; 3]);
    let _27: ();
    let _29: &(isize, &str, [Bar; 3]);
    let _30: (isize, &str, [Bar; 3]);
    let _31: ();
    let mut _33: &mut (isize, &str, [isize; 3]);
    let mut _34: (isize, &str, [isize; 3]);
    let mut _35: [isize; 3];
    let _36: usize;
    let mut _37: usize;
    let mut _38: bool;
    let mut _39: (&isize, &isize);
    let mut _40: &isize;
    let _41: usize;
    let mut _42: usize;
    let mut _43: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: isize;
    let mut _49: isize;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&isize, &isize);
    let mut _54: &isize;
    let _55: usize;
    let mut _56: usize;
    let mut _57: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: isize;
    let mut _63: isize;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: (&isize, &isize);
    let mut _68: &isize;
    let _69: usize;
    let mut _70: usize;
    let mut _71: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: isize;
    let mut _77: isize;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: &[isize];
    let mut _85: !;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: &[Bar];
    let mut _90: !;
    let mut _92: (isize, &str, [isize; 3]);
    let mut _93: [isize; 3];
    let _94: ();
    let mut _95: &(isize, &str, (isize, &str, [isize]));
    let _96: &(isize, &str, (isize, &str, [isize; 3]));
    let _98: ();
    let mut _99: &(isize, &str, (isize, &str, [isize]));
    let _101: ();
    let _103: &(isize, &str, (isize, &str, [isize; 3]));
    let _104: ();
    let _106: ();
    let mut _108: [isize; 3];
    let mut _109: (&isize, &isize);
    let mut _110: &isize;
    let _111: usize;
    let mut _112: usize;
    let mut _113: bool;
    let mut _116: bool;
    let mut _117: bool;
    let mut _118: isize;
    let mut _119: isize;
    let _121: !;
    let mut _122: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _124: std::boxed::Box<[isize; 3]>;
    let mut _125: (&isize, &isize);
    let mut _126: &isize;
    let _127: usize;
    let mut _128: usize;
    let mut _129: bool;
    let mut _132: bool;
    let mut _133: bool;
    let mut _134: isize;
    let mut _135: isize;
    let _137: !;
    let mut _138: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _140: (isize, &str, [isize; 3]);
    let _141: &str;
    let mut _142: [isize; 3];
    let _143: ();
    let mut _144: &(isize, &str, [isize]);
    let _145: &(isize, &str, [isize; 3]);
    let mut _147: std::boxed::Box<(isize, &str, [isize; 3])>;
    let _148: ();
    let _149: &(isize, &str, [isize]);
    let mut _151: std::boxed::Box<(isize, &str, [isize; 3])>;
    let mut _152: (isize, &str, [isize; 3]);
    let mut _153: [isize; 3];
    let _154: ();
    let _155: &(isize, &str, [isize]);
    let mut _165: bool;
    let mut _166: bool;
    let mut _167: *const [isize; 3];
    let mut _168: *const [isize; 3];
    let mut _169: *const [isize];
    let mut _170: *const [isize];
    let mut _171: *const (isize, &str, [isize; 3]);
    let mut _172: *const (isize, &str, [isize]);
    let mut _173: *const (isize, &str, [isize]);
    scope 1 {
        debug f1 => _1;
        let _6: &(isize, &str, [isize; 3]);
        scope 2 {
            debug f2 => _6;
            let _9: &(isize, &str, [isize]);
            scope 3 {
                debug f3 => _9;
                let _11: &(isize, &str, [isize]);
                scope 4 {
                    debug f4 => _11;
                    let _14: &(isize, &str, [isize]);
                    let mut _164: &(isize, &str, [isize; 3]);
                    scope 5 {
                        debug f5 => _14;
                        scope 6 {
                            debug bar => const Bar;
                            let _16: (isize, &str, [Bar; 3]);
                            scope 7 {
                                debug f1 => _16;
                                let _20: &(isize, &str, [Bar; 3]);
                                scope 8 {
                                    debug f2 => _20;
                                    let _23: &(isize, &str, [Bar]);
                                    scope 9 {
                                        debug f3 => _23;
                                        let _25: &(isize, &str, [Bar]);
                                        scope 10 {
                                            debug f4 => _25;
                                            let _28: &(isize, &str, [Bar]);
                                            scope 11 {
                                                debug f5 => _28;
                                                let _32: &mut (isize, &str, [isize]);
                                                scope 12 {
                                                    debug f5 => _32;
                                                    let _44: &isize;
                                                    let _45: &isize;
                                                    let _58: &isize;
                                                    let _59: &isize;
                                                    let _72: &isize;
                                                    let _73: &isize;
                                                    let _81: &(isize, &str, [isize]);
                                                    let mut _160: &(isize, &str, [isize; 0]);
                                                    let mut _161: &isize;
                                                    let mut _162: &isize;
                                                    let mut _163: &isize;
                                                    scope 13 {
                                                        debug left_val => _44;
                                                        debug right_val => _45;
                                                        let _50: core::panicking::AssertKind;
                                                        scope 14 {
                                                            debug kind => _50;
                                                        }
                                                    }
                                                    scope 15 {
                                                        debug left_val => _58;
                                                        debug right_val => _59;
                                                        let _64: core::panicking::AssertKind;
                                                        scope 16 {
                                                            debug kind => _64;
                                                        }
                                                    }
                                                    scope 17 {
                                                        debug left_val => _72;
                                                        debug right_val => _73;
                                                        let _78: core::panicking::AssertKind;
                                                        scope 18 {
                                                            debug kind => _78;
                                                        }
                                                    }
                                                    scope 19 {
                                                        debug f5 => _81;
                                                        let _86: &(isize, &str, [Bar]);
                                                        let mut _159: &(isize, &str, [Bar; 0]);
                                                        scope 20 {
                                                            debug f5 => _86;
                                                            let _91: (isize, &str, (isize, &str, [isize; 3]));
                                                            scope 21 {
                                                                debug f1 => _91;
                                                                let _97: &(isize, &str, (isize, &str, [isize; 3]));
                                                                scope 22 {
                                                                    debug f2 => _97;
                                                                    let _100: &(isize, &str, (isize, &str, [isize]));
                                                                    scope 23 {
                                                                        debug f3 => _100;
                                                                        let _102: &(isize, &str, (isize, &str, [isize]));
                                                                        scope 24 {
                                                                            debug f4 => _102;
                                                                            let _105: &(isize, &str, (isize, &str, [isize]));
                                                                            let mut _158: &(isize, &str, (isize, &str, [isize; 3]));
                                                                            scope 25 {
                                                                                debug f5 => _105;
                                                                                let _107: std::boxed::Box<[isize; 3]>;
                                                                                scope 26 {
                                                                                    debug f1 => _107;
                                                                                    let _114: &isize;
                                                                                    let _115: &isize;
                                                                                    let _123: std::boxed::Box<[isize]>;
                                                                                    let mut _157: &isize;
                                                                                    let mut _192: *const ();
                                                                                    let mut _193: usize;
                                                                                    let mut _194: usize;
                                                                                    let mut _195: usize;
                                                                                    let mut _196: usize;
                                                                                    let mut _197: bool;
                                                                                    let mut _198: *const ();
                                                                                    let mut _199: usize;
                                                                                    let mut _200: usize;
                                                                                    let mut _201: usize;
                                                                                    let mut _202: usize;
                                                                                    let mut _203: bool;
                                                                                    scope 27 {
                                                                                        debug left_val => _114;
                                                                                        debug right_val => _115;
                                                                                        let _120: core::panicking::AssertKind;
                                                                                        scope 28 {
                                                                                            debug kind => _120;
                                                                                        }
                                                                                    }
                                                                                    scope 29 {
                                                                                        debug f2 => _123;
                                                                                        let _130: &isize;
                                                                                        let _131: &isize;
                                                                                        let _139: std::boxed::Box<(isize, &str, [isize; 3])>;
                                                                                        let mut _156: &isize;
                                                                                        let mut _180: *const ();
                                                                                        let mut _181: usize;
                                                                                        let mut _182: usize;
                                                                                        let mut _183: usize;
                                                                                        let mut _184: usize;
                                                                                        let mut _185: bool;
                                                                                        let mut _186: *const ();
                                                                                        let mut _187: usize;
                                                                                        let mut _188: usize;
                                                                                        let mut _189: usize;
                                                                                        let mut _190: usize;
                                                                                        let mut _191: bool;
                                                                                        scope 30 {
                                                                                            debug left_val => _130;
                                                                                            debug right_val => _131;
                                                                                            let _136: core::panicking::AssertKind;
                                                                                            scope 31 {
                                                                                                debug kind => _136;
                                                                                            }
                                                                                        }
                                                                                        scope 32 {
                                                                                            debug f1 => _139;
                                                                                            let _146: std::boxed::Box<(isize, &str, [isize])>;
                                                                                            let mut _174: *const ();
                                                                                            let mut _175: usize;
                                                                                            let mut _176: usize;
                                                                                            let mut _177: usize;
                                                                                            let mut _178: usize;
                                                                                            let mut _179: bool;
                                                                                            scope 33 {
                                                                                                debug f2 => _146;
                                                                                                let _150: std::boxed::Box<(isize, &str, [isize])>;
                                                                                                scope 34 {
                                                                                                    debug f3 => _150;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _166 = const false;
        _165 = const false;
        _2 = [const 1_isize, const 2_isize, const 3_isize];
        _1 = (const 5_isize, const "some str", move _2);
        _5 = &_1;
        _4 = _5 as &(isize, &str, [isize]) (Pointer(Unsize));
        _3 = foo(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_1;
        _8 = _6 as &(isize, &str, [isize]) (Pointer(Unsize));
        _7 = foo(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = _6 as &(isize, &str, [isize]) (Pointer(Unsize));
        _10 = foo(_9) -> [return: bb3, unwind continue];
    }

    bb3: {
        _12 = &_1;
        _11 = _12 as &(isize, &str, [isize]) (Pointer(Unsize));
        _13 = foo(_11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _164 = const _;
        _14 = _164 as &(isize, &str, [isize]) (Pointer(Unsize));
        _15 = foo(_14) -> [return: bb5, unwind continue];
    }

    bb5: {
        _16 = (const 5_isize, const "some str", const [Bar, Bar, Bar]);
        _19 = &_16;
        _18 = _19 as &(isize, &str, [Bar]) (Pointer(Unsize));
        _17 = foo2::<Bar>(move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        _20 = &_16;
        _22 = _20 as &(isize, &str, [Bar]) (Pointer(Unsize));
        _21 = foo2::<Bar>(move _22) -> [return: bb7, unwind continue];
    }

    bb7: {
        _23 = _20 as &(isize, &str, [Bar]) (Pointer(Unsize));
        _24 = foo2::<Bar>(_23) -> [return: bb8, unwind continue];
    }

    bb8: {
        _26 = &_16;
        _25 = _26 as &(isize, &str, [Bar]) (Pointer(Unsize));
        _27 = foo2::<Bar>(_25) -> [return: bb9, unwind continue];
    }

    bb9: {
        _30 = (const 5_isize, const "some str", const [Bar, Bar, Bar]);
        _29 = &_30;
        _28 = _29 as &(isize, &str, [Bar]) (Pointer(Unsize));
        _31 = foo2::<Bar>(_28) -> [return: bb10, unwind continue];
    }

    bb10: {
        _35 = [const 1_isize, const 2_isize, const 3_isize];
        _34 = (const 5_isize, const "some str", move _35);
        _33 = &mut _34;
        _32 = _33 as &mut (isize, &str, [isize]) (Pointer(Unsize));
        _36 = const 1_usize;
        _37 = Len(((*_32).2: [isize]));
        _38 = Lt(_36, _37);
        assert(move _38, "index out of bounds: the length is {} but the index is {}", move _37, _36) -> [success: bb11, unwind continue];
    }

    bb11: {
        ((*_32).2: [isize])[_36] = const 34_isize;
        _41 = const 0_usize;
        _42 = Len(((*_32).2: [isize]));
        _43 = Lt(_41, _42);
        assert(move _43, "index out of bounds: the length is {} but the index is {}", move _42, _41) -> [success: bb12, unwind continue];
    }

    bb12: {
        _40 = &((*_32).2: [isize])[_41];
        _163 = const _;
        _39 = (move _40, _163);
        _44 = (_39.0: &isize);
        _45 = (_39.1: &isize);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<isize, isize>(move _50, _44, _45, move _52) -> unwind continue;
    }

    bb14: {
        _55 = const 1_usize;
        _56 = Len(((*_32).2: [isize]));
        _57 = Lt(_55, _56);
        assert(move _57, "index out of bounds: the length is {} but the index is {}", move _56, _55) -> [success: bb15, unwind continue];
    }

    bb15: {
        _54 = &((*_32).2: [isize])[_55];
        _162 = const _;
        _53 = (move _54, _162);
        _58 = (_53.0: &isize);
        _59 = (_53.1: &isize);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<isize, isize>(move _64, _58, _59, move _66) -> unwind continue;
    }

    bb17: {
        _69 = const 2_usize;
        _70 = Len(((*_32).2: [isize]));
        _71 = Lt(_69, _70);
        assert(move _71, "index out of bounds: the length is {} but the index is {}", move _70, _69) -> [success: bb18, unwind continue];
    }

    bb18: {
        _68 = &((*_32).2: [isize])[_69];
        _161 = const _;
        _67 = (move _68, _161);
        _72 = (_67.0: &isize);
        _73 = (_67.1: &isize);
        _76 = (*_72);
        _77 = (*_73);
        _75 = Eq(move _76, move _77);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<isize, isize>(move _78, _72, _73, move _80) -> unwind continue;
    }

    bb20: {
        _160 = const _;
        _81 = _160 as &(isize, &str, [isize]) (Pointer(Unsize));
        _84 = &((*_81).2: [isize]);
        _83 = core::slice::<impl [isize]>::is_empty(move _84) -> [return: bb21, unwind continue];
    }

    bb21: {
        _82 = Not(move _83);
        switchInt(move _82) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _85 = core::panicking::panic(const "assertion failed: f5.2.is_empty()") -> unwind continue;
    }

    bb23: {
        _159 = const _;
        _86 = _159 as &(isize, &str, [Bar]) (Pointer(Unsize));
        _89 = &((*_86).2: [Bar]);
        _88 = core::slice::<impl [Bar]>::is_empty(move _89) -> [return: bb24, unwind continue];
    }

    bb24: {
        _87 = Not(move _88);
        switchInt(move _87) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _90 = core::panicking::panic(const "assertion failed: f5.2.is_empty()") -> unwind continue;
    }

    bb26: {
        _93 = [const 1_isize, const 2_isize, const 3_isize];
        _92 = (const 8_isize, const "deep str", move _93);
        _91 = (const 5_isize, const "some str", move _92);
        _96 = &_91;
        _95 = _96 as &(isize, &str, (isize, &str, [isize])) (Pointer(Unsize));
        _94 = foo3(move _95) -> [return: bb27, unwind continue];
    }

    bb27: {
        _97 = &_91;
        _99 = _97 as &(isize, &str, (isize, &str, [isize])) (Pointer(Unsize));
        _98 = foo3(move _99) -> [return: bb28, unwind continue];
    }

    bb28: {
        _100 = _97 as &(isize, &str, (isize, &str, [isize])) (Pointer(Unsize));
        _101 = foo3(_100) -> [return: bb29, unwind continue];
    }

    bb29: {
        _103 = &_91;
        _102 = _103 as &(isize, &str, (isize, &str, [isize])) (Pointer(Unsize));
        _104 = foo3(_102) -> [return: bb30, unwind continue];
    }

    bb30: {
        _158 = const _;
        _105 = _158 as &(isize, &str, (isize, &str, [isize])) (Pointer(Unsize));
        _106 = foo3(_105) -> [return: bb31, unwind continue];
    }

    bb31: {
        _108 = [const 1_isize, const 2_isize, const 3_isize];
        _166 = const true;
        _107 = Box::<[isize; 3]>::new(move _108) -> [return: bb32, unwind continue];
    }

    bb32: {
        _111 = const 1_usize;
        _167 = (((_107.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _198 = _167 as *const () (PtrToPtr);
        _199 = _198 as usize (Transmute);
        _200 = AlignOf(isize);
        _201 = Sub(_200, const 1_usize);
        _202 = BitAnd(_199, _201);
        _203 = Eq(_202, const 0_usize);
        assert(_203, "misaligned pointer dereference: address must be a multiple of {} but is {}", _200, _199) -> [success: bb59, unwind unreachable];
    }

    bb33: {
        _168 = (((_107.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _192 = _168 as *const () (PtrToPtr);
        _193 = _192 as usize (Transmute);
        _194 = AlignOf(isize);
        _195 = Sub(_194, const 1_usize);
        _196 = BitAnd(_193, _195);
        _197 = Eq(_196, const 0_usize);
        assert(_197, "misaligned pointer dereference: address must be a multiple of {} but is {}", _194, _193) -> [success: bb58, unwind unreachable];
    }

    bb34: {
        _120 = core::panicking::AssertKind::Eq;
        _122 = Option::<Arguments<'_>>::None;
        _121 = core::panicking::assert_failed::<isize, isize>(move _120, _114, _115, move _122) -> bb54;
    }

    bb35: {
        _166 = const false;
        _124 = move _107;
        _123 = move _124 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _127 = const 1_usize;
        _169 = (((_123.0: std::ptr::Unique<[isize]>).0: std::ptr::NonNull<[isize]>).0: *const [isize]);
        _186 = _169 as *const () (PtrToPtr);
        _187 = _186 as usize (Transmute);
        _188 = AlignOf(isize);
        _189 = Sub(_188, const 1_usize);
        _190 = BitAnd(_187, _189);
        _191 = Eq(_190, const 0_usize);
        assert(_191, "misaligned pointer dereference: address must be a multiple of {} but is {}", _188, _187) -> [success: bb57, unwind unreachable];
    }

    bb36: {
        _170 = (((_123.0: std::ptr::Unique<[isize]>).0: std::ptr::NonNull<[isize]>).0: *const [isize]);
        _180 = _170 as *const () (PtrToPtr);
        _181 = _180 as usize (Transmute);
        _182 = AlignOf(isize);
        _183 = Sub(_182, const 1_usize);
        _184 = BitAnd(_181, _183);
        _185 = Eq(_184, const 0_usize);
        assert(_185, "misaligned pointer dereference: address must be a multiple of {} but is {}", _182, _181) -> [success: bb56, unwind unreachable];
    }

    bb37: {
        _136 = core::panicking::AssertKind::Eq;
        _138 = Option::<Arguments<'_>>::None;
        _137 = core::panicking::assert_failed::<isize, isize>(move _136, _130, _131, move _138) -> bb49;
    }

    bb38: {
        _141 = const "some str";
        _142 = [const 1_isize, const 2_isize, const 3_isize];
        _140 = (const 5_isize, _141, move _142);
        _139 = Box::<(isize, &str, [isize; 3])>::new(move _140) -> [return: bb39, unwind: bb49];
    }

    bb39: {
        _165 = const true;
        _171 = (((_139.0: std::ptr::Unique<(isize, &str, [isize; 3])>).0: std::ptr::NonNull<(isize, &str, [isize; 3])>).0: *const (isize, &str, [isize; 3]));
        _174 = _171 as *const () (PtrToPtr);
        _175 = _174 as usize (Transmute);
        _176 = AlignOf((isize, &str, [isize; 3]));
        _177 = Sub(_176, const 1_usize);
        _178 = BitAnd(_175, _177);
        _179 = Eq(_178, const 0_usize);
        assert(_179, "misaligned pointer dereference: address must be a multiple of {} but is {}", _176, _175) -> [success: bb55, unwind unreachable];
    }

    bb40: {
        _165 = const false;
        _147 = move _139;
        _146 = move _147 as std::boxed::Box<(isize, &str, [isize])> (Pointer(Unsize));
        _172 = (((_146.0: std::ptr::Unique<(isize, &str, [isize])>).0: std::ptr::NonNull<(isize, &str, [isize])>).0: *const (isize, &str, [isize]));
        _149 = &(*_172);
        _148 = foo(_149) -> [return: bb41, unwind: bb48];
    }

    bb41: {
        _153 = [const 1_isize, const 2_isize, const 3_isize];
        _152 = (const 5_isize, const "some str", move _153);
        _151 = Box::<(isize, &str, [isize; 3])>::new(move _152) -> [return: bb42, unwind: bb48];
    }

    bb42: {
        _150 = move _151 as std::boxed::Box<(isize, &str, [isize])> (Pointer(Unsize));
        _173 = (((_150.0: std::ptr::Unique<(isize, &str, [isize])>).0: std::ptr::NonNull<(isize, &str, [isize])>).0: *const (isize, &str, [isize]));
        _155 = &(*_173);
        _154 = foo(_155) -> [return: bb43, unwind: bb47];
    }

    bb43: {
        drop(_150) -> [return: bb44, unwind: bb48];
    }

    bb44: {
        drop(_146) -> [return: bb45, unwind: bb52];
    }

    bb45: {
        _165 = const false;
        drop(_123) -> [return: bb46, unwind: bb54];
    }

    bb46: {
        _166 = const false;
        return;
    }

    bb47 (cleanup): {
        drop(_150) -> [return: bb48, unwind terminate];
    }

    bb48 (cleanup): {
        drop(_146) -> [return: bb52, unwind terminate];
    }

    bb49 (cleanup): {
        drop(_123) -> [return: bb54, unwind terminate];
    }

    bb50 (cleanup): {
        resume;
    }

    bb51 (cleanup): {
        drop(_139) -> [return: bb49, unwind terminate];
    }

    bb52 (cleanup): {
        switchInt(_165) -> [0: bb49, otherwise: bb51];
    }

    bb53 (cleanup): {
        drop(_107) -> [return: bb50, unwind terminate];
    }

    bb54 (cleanup): {
        switchInt(_166) -> [0: bb50, otherwise: bb53];
    }

    bb55: {
        _145 = &(*_171);
        _144 = _145 as &(isize, &str, [isize]) (Pointer(Unsize));
        _143 = foo(move _144) -> [return: bb40, unwind: bb52];
    }

    bb56: {
        _126 = &(*_170)[_127];
        _156 = const _;
        _125 = (move _126, _156);
        _130 = (_125.0: &isize);
        _131 = (_125.1: &isize);
        _134 = (*_130);
        _135 = (*_131);
        _133 = Eq(move _134, move _135);
        _132 = Not(move _133);
        switchInt(move _132) -> [0: bb38, otherwise: bb37];
    }

    bb57: {
        _128 = Len((*_169));
        _129 = Lt(_127, _128);
        assert(move _129, "index out of bounds: the length is {} but the index is {}", move _128, _127) -> [success: bb36, unwind: bb49];
    }

    bb58: {
        _110 = &(*_168)[_111];
        _157 = const _;
        _109 = (move _110, _157);
        _114 = (_109.0: &isize);
        _115 = (_109.1: &isize);
        _118 = (*_114);
        _119 = (*_115);
        _117 = Eq(move _118, move _119);
        _116 = Not(move _117);
        switchInt(move _116) -> [0: bb35, otherwise: bb34];
    }

    bb59: {
        _112 = const 3_usize;
        _113 = Lt(_111, _112);
        assert(move _113, "index out of bounds: the length is {} but the index is {}", move _112, _111) -> [success: bb33, unwind: bb54];
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &(isize, &str, (isize, &str, [isize; 3])) = {
    let mut _0: &(isize, &str, (isize, &str, [isize; 3]));
    let mut _1: (isize, &str, (isize, &str, [isize; 3]));
    let mut _2: (isize, &str, [isize; 3]);
    let mut _3: [isize; 3];

    bb0: {
        _3 = [const 1_isize, const 2_isize, const 3_isize];
        _2 = (const 8_isize, const "deep str", move _3);
        _1 = (const 5_isize, const "some str", move _2);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &(isize, &str, [Bar; 0]) = {
    let mut _0: &(isize, &str, [Bar; 0]);
    let mut _1: (isize, &str, [Bar; 0]);
    let mut _2: [Bar; 0];

    bb0: {
        _2 = [];
        _1 = (const 5_isize, const "some str", move _2);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &(isize, &str, [isize; 0]) = {
    let mut _0: &(isize, &str, [isize; 0]);
    let mut _1: (isize, &str, [isize; 0]);
    let mut _2: [isize; 0];

    bb0: {
        _2 = [];
        _1 = (const 5_isize, const "some str", move _2);
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 34_isize;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &(isize, &str, [isize; 3]) = {
    let mut _0: &(isize, &str, [isize; 3]);
    let mut _1: (isize, &str, [isize; 3]);
    let mut _2: [isize; 3];

    bb0: {
        _2 = [const 1_isize, const 2_isize, const 3_isize];
        _1 = (const 5_isize, const "some str", move _2);
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}
