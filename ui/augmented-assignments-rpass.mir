// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/augmented-assignments-rpass.rs:12:10: 12:15>::fmt(_1: &Int, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/augmented-assignments-rpass.rs:12:10: 12:15
    debug f => _2;                       // in scope 0 at ui/augmented-assignments-rpass.rs:12:10: 12:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/augmented-assignments-rpass.rs:12:10: 12:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/augmented-assignments-rpass.rs:12:10: 12:15
    let mut _4: &str;                    // in scope 0 at ui/augmented-assignments-rpass.rs:12:10: 12:15
    let _5: &str;                        // in scope 0 at ui/augmented-assignments-rpass.rs:12:10: 12:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/augmented-assignments-rpass.rs:13:12: 13:15
    let mut _7: &&i32;                   // in scope 0 at ui/augmented-assignments-rpass.rs:13:12: 13:15
    let _8: &&i32;                       // in scope 0 at ui/augmented-assignments-rpass.rs:13:12: 13:15
    let _9: &i32;                        // in scope 0 at ui/augmented-assignments-rpass.rs:13:12: 13:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/augmented-assignments-rpass.rs:12:10: 12:15
        _5 = const "Int";                // scope 0 at ui/augmented-assignments-rpass.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:12:10: 12:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/augmented-assignments-rpass.rs:12:10: 12:15
        _9 = &((*_1).0: i32);            // scope 0 at ui/augmented-assignments-rpass.rs:13:12: 13:15
        _8 = &_9;                        // scope 0 at ui/augmented-assignments-rpass.rs:13:12: 13:15
        _7 = _8;                         // scope 0 at ui/augmented-assignments-rpass.rs:13:12: 13:15
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/augmented-assignments-rpass.rs:13:12: 13:15
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/augmented-assignments-rpass.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:12:10: 12:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:12:15: 12:15
    }
}

fn <impl at ui/augmented-assignments-rpass.rs:12:17: 12:26>::eq(_1: &Int, _2: &Int) -> bool {
    debug self => _1;                    // in scope 0 at ui/augmented-assignments-rpass.rs:12:17: 12:26
    debug other => _2;                   // in scope 0 at ui/augmented-assignments-rpass.rs:12:17: 12:26
    let mut _0: bool;                    // return place in scope 0 at ui/augmented-assignments-rpass.rs:12:17: 12:26
    let mut _3: i32;                     // in scope 0 at ui/augmented-assignments-rpass.rs:13:12: 13:15
    let mut _4: i32;                     // in scope 0 at ui/augmented-assignments-rpass.rs:13:12: 13:15

    bb0: {
        _3 = ((*_1).0: i32);             // scope 0 at ui/augmented-assignments-rpass.rs:13:12: 13:15
        _4 = ((*_2).0: i32);             // scope 0 at ui/augmented-assignments-rpass.rs:13:12: 13:15
        _0 = Eq(move _3, move _4);       // scope 0 at ui/augmented-assignments-rpass.rs:13:12: 13:15
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:12:26: 12:26
    }
}

fn <impl at ui/augmented-assignments-rpass.rs:17:1: 17:11>::new(_1: &mut [i32]) -> &mut Slice {
    debug slice => _1;                   // in scope 0 at ui/augmented-assignments-rpass.rs:18:12: 18:17
    let mut _0: &mut Slice;              // return place in scope 0 at ui/augmented-assignments-rpass.rs:18:34: 18:44
    let mut _2: &mut Slice;              // in scope 0 at ui/augmented-assignments-rpass.rs:19:9: 21:10
    let mut _3: &mut Slice;              // in scope 0 at ui/augmented-assignments-rpass.rs:20:13: 20:34
    let mut _4: &mut [i32];              // in scope 0 at ui/augmented-assignments-rpass.rs:20:28: 20:33
    scope 1 {
    }

    bb0: {
        _4 = move _1;                    // scope 1 at ui/augmented-assignments-rpass.rs:20:28: 20:33
        _3 = transmute::<&mut [i32], &mut Slice>(move _4) -> bb1; // scope 1 at ui/augmented-assignments-rpass.rs:20:13: 20:34
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:20:13: 20:27
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&mut [i32]) -> &mut Slice {transmute::<&mut [i32], &mut Slice>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &mut (*_3);                 // scope 0 at ui/augmented-assignments-rpass.rs:20:13: 20:34
        _0 = &mut (*_2);                 // scope 0 at ui/augmented-assignments-rpass.rs:19:9: 21:10
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:22:6: 22:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/augmented-assignments-rpass.rs:27:11: 27:11
    let mut _1: Int;                     // in scope 0 at ui/augmented-assignments-rpass.rs:28:9: 28:14
    let _2: ();                          // in scope 0 at ui/augmented-assignments-rpass.rs:30:5: 30:16
    let mut _3: &mut Int;                // in scope 0 at ui/augmented-assignments-rpass.rs:30:5: 30:6
    let mut _4: Int;                     // in scope 0 at ui/augmented-assignments-rpass.rs:30:10: 30:16
    let mut _5: (&Int, &Int);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &Int;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _7: &Int;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &Int;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &Int;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _22: ();                         // in scope 0 at ui/augmented-assignments-rpass.rs:33:5: 33:19
    let mut _23: &mut Int;               // in scope 0 at ui/augmented-assignments-rpass.rs:33:5: 33:6
    let mut _24: Int;                    // in scope 0 at ui/augmented-assignments-rpass.rs:33:10: 33:19
    let mut _25: (&Int, &Int);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _26: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _27: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _32: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _33: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _35: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _36: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _37: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _38: &Int;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _39: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _40: &Int;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _42: ();                         // in scope 0 at ui/augmented-assignments-rpass.rs:36:5: 36:19
    let mut _43: &mut Int;               // in scope 0 at ui/augmented-assignments-rpass.rs:36:5: 36:6
    let mut _44: Int;                    // in scope 0 at ui/augmented-assignments-rpass.rs:36:10: 36:19
    let mut _45: (&Int, &Int);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _46: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _47: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _50: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _51: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _52: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _53: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _55: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _56: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _57: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _58: &Int;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _59: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _60: &Int;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _62: ();                         // in scope 0 at ui/augmented-assignments-rpass.rs:39:5: 39:19
    let mut _63: &mut Int;               // in scope 0 at ui/augmented-assignments-rpass.rs:39:5: 39:6
    let mut _64: Int;                    // in scope 0 at ui/augmented-assignments-rpass.rs:39:10: 39:19
    let mut _65: (&Int, &Int);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _66: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _67: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _70: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _71: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _72: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _73: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _75: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _76: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _77: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _78: &Int;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _79: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _80: &Int;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _81: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _82: ();                         // in scope 0 at ui/augmented-assignments-rpass.rs:42:5: 42:16
    let mut _83: &mut Int;               // in scope 0 at ui/augmented-assignments-rpass.rs:42:5: 42:6
    let mut _84: Int;                    // in scope 0 at ui/augmented-assignments-rpass.rs:42:10: 42:16
    let mut _85: (&Int, &Int);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _86: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _87: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _90: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _91: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _92: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _93: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _95: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _96: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _97: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _98: &Int;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _99: &Int;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _100: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _101: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _102: ();                        // in scope 0 at ui/augmented-assignments-rpass.rs:45:5: 45:16
    let mut _103: &mut Int;              // in scope 0 at ui/augmented-assignments-rpass.rs:45:5: 45:6
    let mut _104: Int;                   // in scope 0 at ui/augmented-assignments-rpass.rs:45:10: 45:16
    let mut _105: (&Int, &Int);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _106: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _107: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _110: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _111: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _112: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _113: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _115: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _116: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _117: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _118: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _119: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _120: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _121: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _122: ();                        // in scope 0 at ui/augmented-assignments-rpass.rs:48:5: 48:16
    let mut _123: &mut Int;              // in scope 0 at ui/augmented-assignments-rpass.rs:48:5: 48:6
    let mut _124: Int;                   // in scope 0 at ui/augmented-assignments-rpass.rs:48:10: 48:16
    let mut _125: (&Int, &Int);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _126: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _127: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _130: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _131: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _132: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _133: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _135: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _136: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _137: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _138: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _139: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _140: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _141: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _142: ();                        // in scope 0 at ui/augmented-assignments-rpass.rs:52:5: 52:14
    let mut _143: &mut Int;              // in scope 0 at ui/augmented-assignments-rpass.rs:52:5: 52:6
    let mut _144: (&Int, &Int);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _145: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _146: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _149: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _150: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _151: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _152: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _154: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _155: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _156: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _157: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _158: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _159: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _160: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _161: ();                        // in scope 0 at ui/augmented-assignments-rpass.rs:55:5: 55:15
    let mut _162: &mut Int;              // in scope 0 at ui/augmented-assignments-rpass.rs:55:5: 55:6
    let mut _163: (&Int, &Int);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _164: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _165: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _168: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _169: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _170: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _171: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _173: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _174: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _175: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _176: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _177: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _178: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _179: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _180: ();                        // in scope 0 at ui/augmented-assignments-rpass.rs:58:5: 58:14
    let mut _181: &mut Int;              // in scope 0 at ui/augmented-assignments-rpass.rs:58:5: 58:6
    let mut _182: (&Int, &Int);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _183: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _184: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _187: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _188: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _189: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _190: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _192: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _193: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _194: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _195: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _196: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _197: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _198: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _199: ();                        // in scope 0 at ui/augmented-assignments-rpass.rs:61:5: 61:15
    let mut _200: &mut Int;              // in scope 0 at ui/augmented-assignments-rpass.rs:61:5: 61:6
    let mut _201: (&Int, &Int);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _202: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _203: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _206: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _207: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _208: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _209: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _211: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _212: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _213: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _214: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _215: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _216: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _217: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _218: ();                        // in scope 0 at ui/augmented-assignments-rpass.rs:64:5: 64:16
    let mut _219: &mut Int;              // in scope 0 at ui/augmented-assignments-rpass.rs:64:5: 64:6
    let mut _220: Int;                   // in scope 0 at ui/augmented-assignments-rpass.rs:64:10: 64:16
    let mut _221: (&Int, &Int);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _222: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _223: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _226: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _227: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _228: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _229: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _231: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _232: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _233: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _234: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _235: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _236: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _237: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _239: std::boxed::Box<[Int]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _240: std::boxed::Box<[Int; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _241: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _242: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _243: *mut u8;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _244: std::boxed::Box<[Int; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _245: Int;                   // in scope 0 at ui/augmented-assignments-rpass.rs:68:22: 68:28
    let mut _246: Int;                   // in scope 0 at ui/augmented-assignments-rpass.rs:68:30: 68:36
    let _247: ();                        // in scope 0 at ui/augmented-assignments-rpass.rs:69:5: 69:19
    let mut _248: &mut Int;              // in scope 0 at ui/augmented-assignments-rpass.rs:69:5: 69:9
    let mut _249: &mut Int;              // in scope 0 at ui/augmented-assignments-rpass.rs:69:5: 69:9
    let mut _250: &mut std::vec::Vec<Int>; // in scope 0 at ui/augmented-assignments-rpass.rs:69:5: 69:6
    let mut _251: Int;                   // in scope 0 at ui/augmented-assignments-rpass.rs:69:13: 69:19
    let mut _252: (&Int, &Int);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _253: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _254: &Int;                      // in scope 0 at ui/augmented-assignments-rpass.rs:70:16: 70:20
    let mut _255: &std::vec::Vec<Int>;   // in scope 0 at ui/augmented-assignments-rpass.rs:70:16: 70:17
    let mut _256: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _259: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _260: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _261: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _262: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _264: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _265: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _266: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _267: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _268: &Int;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _269: &Int;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _270: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _272: ();                        // in scope 0 at ui/augmented-assignments-rpass.rs:74:5: 74:33
    let mut _273: &mut Slice;            // in scope 0 at ui/augmented-assignments-rpass.rs:74:5: 74:28
    let mut _274: &mut Slice;            // in scope 0 at ui/augmented-assignments-rpass.rs:74:6: 74:28
    let mut _275: &mut [i32];            // in scope 0 at ui/augmented-assignments-rpass.rs:74:17: 74:27
    let mut _276: &mut [i32; 3];         // in scope 0 at ui/augmented-assignments-rpass.rs:74:17: 74:27
    let mut _277: &mut [i32; 3];         // in scope 0 at ui/augmented-assignments-rpass.rs:74:17: 74:27
    let mut _278: (&i32, &i32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _279: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _280: usize;                     // in scope 0 at ui/augmented-assignments-rpass.rs:75:22: 75:23
    let mut _281: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _284: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _285: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _286: i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _287: i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _289: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _290: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _291: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _292: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _293: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _294: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _295: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _296: (&i32, &i32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _297: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _298: usize;                     // in scope 0 at ui/augmented-assignments-rpass.rs:76:22: 76:23
    let mut _299: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _302: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _303: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _304: i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _305: i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _307: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _308: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _309: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _310: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _311: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _312: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _313: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _314: (&i32, &i32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _315: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _316: usize;                     // in scope 0 at ui/augmented-assignments-rpass.rs:77:22: 77:23
    let mut _317: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _320: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _321: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _322: i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _323: i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _325: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _326: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _327: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _328: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _329: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _330: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _331: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _334: &mut [i32];            // in scope 0 at ui/augmented-assignments-rpass.rs:82:25: 82:35
    let mut _335: &mut [i32; 3];         // in scope 0 at ui/augmented-assignments-rpass.rs:82:25: 82:35
    let mut _336: &mut [i32; 3];         // in scope 0 at ui/augmented-assignments-rpass.rs:82:25: 82:35
    let _337: ();                        // in scope 0 at ui/augmented-assignments-rpass.rs:83:5: 83:14
    let mut _338: &mut View<'_>;         // in scope 0 at ui/augmented-assignments-rpass.rs:83:5: 83:9
    let mut _355: *const [Int; 2];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/augmented-assignments-rpass.rs:28:9: 28:14
        let _8: &Int;                    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _9: &Int;                    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _28: &Int;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _29: &Int;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _48: &Int;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _49: &Int;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _68: &Int;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _69: &Int;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _88: &Int;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _89: &Int;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _108: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _109: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _128: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _129: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _147: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _148: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _166: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _167: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _185: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _186: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _204: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _205: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _224: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _225: &Int;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _238: std::vec::Vec<Int>; // in scope 1 at ui/augmented-assignments-rpass.rs:68:9: 68:14
        let mut _343: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _344: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _345: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _346: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _347: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _348: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _349: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _350: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _351: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _352: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _353: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _354: &Int;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _8;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _9;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _14: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _14;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _28;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _29;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _34: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _34;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug left_val => _48;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _49;      // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _54: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 7 {
                debug kind => _54;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 8 {
            debug left_val => _68;       // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _69;      // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _74: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 9 {
                debug kind => _74;       // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 10 {
            debug left_val => _88;       // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _89;      // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _94: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 11 {
                debug kind => _94;       // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 12 {
            debug left_val => _108;      // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _109;     // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _114: core::panicking::AssertKind; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 13 {
                debug kind => _114;      // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 14 {
            debug left_val => _128;      // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _129;     // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _134: core::panicking::AssertKind; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 15 {
                debug kind => _134;      // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 16 {
            debug left_val => _147;      // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _148;     // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _153: core::panicking::AssertKind; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 17 {
                debug kind => _153;      // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 18 {
            debug left_val => _166;      // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _167;     // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _172: core::panicking::AssertKind; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 19 {
                debug kind => _172;      // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 20 {
            debug left_val => _185;      // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _186;     // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _191: core::panicking::AssertKind; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 21 {
                debug kind => _191;      // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 22 {
            debug left_val => _204;      // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _205;     // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _210: core::panicking::AssertKind; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 23 {
                debug kind => _210;      // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 24 {
            debug left_val => _224;      // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _225;     // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _230: core::panicking::AssertKind; // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 25 {
                debug kind => _230;      // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 26 {
            debug v => _238;             // in scope 26 at ui/augmented-assignments-rpass.rs:68:9: 68:14
            let _257: &Int;              // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _258: &Int;              // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _271: [i32; 3];      // in scope 26 at ui/augmented-assignments-rpass.rs:73:9: 73:18
            let mut _342: &Int;          // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 28 {
                debug left_val => _257;  // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _258; // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _263: core::panicking::AssertKind; // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 29 {
                    debug kind => _263;  // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 30 {
                debug array => _271;     // in scope 30 at ui/augmented-assignments-rpass.rs:73:9: 73:18
                let _282: &i32;          // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _283: &i32;          // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _300: &i32;          // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _301: &i32;          // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _318: &i32;          // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _319: &i32;          // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _332: [i32; 3];  // in scope 30 at ui/augmented-assignments-rpass.rs:81:9: 81:18
                let mut _339: &i32;      // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _340: &i32;      // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _341: &i32;      // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 31 {
                    debug left_val => _282; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _283; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _288: core::panicking::AssertKind; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 32 {
                        debug kind => _288; // in scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 33 {
                    debug left_val => _300; // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _301; // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _306: core::panicking::AssertKind; // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 34 {
                        debug kind => _306; // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 35 {
                    debug left_val => _318; // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _319; // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _324: core::panicking::AssertKind; // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 36 {
                        debug kind => _324; // in scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 37 {
                    debug array => _332; // in scope 37 at ui/augmented-assignments-rpass.rs:81:9: 81:18
                    let mut _333: View<'_>; // in scope 37 at ui/augmented-assignments-rpass.rs:82:9: 82:17
                    scope 38 {
                        debug view => _333; // in scope 38 at ui/augmented-assignments-rpass.rs:82:9: 82:17
                    }
                }
            }
        }
        scope 27 {
        }
    }

    bb0: {
        _1 = Int(const 1_i32);           // scope 0 at ui/augmented-assignments-rpass.rs:28:17: 28:23
        _3 = &mut _1;                    // scope 1 at ui/augmented-assignments-rpass.rs:30:5: 30:6
        _4 = const Int(2_i32);           // scope 1 at ui/augmented-assignments-rpass.rs:30:10: 30:16
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:30:10: 30:16
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000002)) }
        _2 = <Int as AddAssign>::add_assign(move _3, move _4) -> bb1; // scope 1 at ui/augmented-assignments-rpass.rs:30:5: 30:16
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:30:5: 30:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, Int) {<Int as AddAssign>::add_assign}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _354 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main, [], Some(promoted[15])) }
        _7 = _354;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _7);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_5.0: &Int);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_5.1: &Int);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = <Int as PartialEq>::eq(move _12, move _13) -> bb2; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = Not(move _11);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<Int, Int>(move _16, move _17, move _19, move _21); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb4: {
        _23 = &mut _1;                   // scope 1 at ui/augmented-assignments-rpass.rs:33:5: 33:6
        _24 = const Int(1_i32);          // scope 1 at ui/augmented-assignments-rpass.rs:33:10: 33:19
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:33:10: 33:19
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000001)) }
        _22 = <Int as BitAndAssign>::bitand_assign(move _23, move _24) -> bb5; // scope 1 at ui/augmented-assignments-rpass.rs:33:5: 33:19
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:33:5: 33:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, Int) {<Int as BitAndAssign>::bitand_assign}, val: Value(<ZST>) }
    }

    bb5: {
        _26 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _353 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main, [], Some(promoted[14])) }
        _27 = _353;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _25 = (move _26, move _27);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _28 = (_25.0: &Int);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _29 = (_25.1: &Int);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _32 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _33 = _29;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _31 = <Int as PartialEq>::eq(move _32, move _33) -> bb6; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _30 = Not(move _31);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _30) -> [0: bb8, otherwise: bb7]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _34 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _38;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _29;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = _40;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _35 = core::panicking::assert_failed::<Int, Int>(move _36, move _37, move _39, move _41); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb8: {
        _43 = &mut _1;                   // scope 1 at ui/augmented-assignments-rpass.rs:36:5: 36:6
        _44 = const Int(2_i32);          // scope 1 at ui/augmented-assignments-rpass.rs:36:10: 36:19
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:36:10: 36:19
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000002)) }
        _42 = <Int as BitOrAssign>::bitor_assign(move _43, move _44) -> bb9; // scope 1 at ui/augmented-assignments-rpass.rs:36:5: 36:19
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:36:5: 36:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, Int) {<Int as BitOrAssign>::bitor_assign}, val: Value(<ZST>) }
    }

    bb9: {
        _46 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _352 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main, [], Some(promoted[13])) }
        _47 = _352;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _45 = (move _46, move _47);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _48 = (_45.0: &Int);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _49 = (_45.1: &Int);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _52 = _48;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _53 = _49;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _51 = <Int as PartialEq>::eq(move _52, move _53) -> bb10; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _50 = Not(move _51);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _50) -> [0: bb12, otherwise: bb11]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _54 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _56 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = _48;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _58;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _60 = _49;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _59 = _60;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _55 = core::panicking::assert_failed::<Int, Int>(move _56, move _57, move _59, move _61); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb12: {
        _63 = &mut _1;                   // scope 1 at ui/augmented-assignments-rpass.rs:39:5: 39:6
        _64 = const Int(1_i32);          // scope 1 at ui/augmented-assignments-rpass.rs:39:10: 39:19
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:39:10: 39:19
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000001)) }
        _62 = <Int as BitXorAssign>::bitxor_assign(move _63, move _64) -> bb13; // scope 1 at ui/augmented-assignments-rpass.rs:39:5: 39:19
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:39:5: 39:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, Int) {<Int as BitXorAssign>::bitxor_assign}, val: Value(<ZST>) }
    }

    bb13: {
        _66 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _351 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main, [], Some(promoted[12])) }
        _67 = _351;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _65 = (move _66, move _67);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _68 = (_65.0: &Int);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _69 = (_65.1: &Int);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _72 = _68;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _73 = _69;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _71 = <Int as PartialEq>::eq(move _72, move _73) -> bb14; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        _70 = Not(move _71);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _70) -> [0: bb16, otherwise: bb15]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _74 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _76 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _78 = _68;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _77 = _78;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _80 = _69;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _79 = _80;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _81 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _75 = core::panicking::assert_failed::<Int, Int>(move _76, move _77, move _79, move _81); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb16: {
        _83 = &mut _1;                   // scope 1 at ui/augmented-assignments-rpass.rs:42:5: 42:6
        _84 = const Int(2_i32);          // scope 1 at ui/augmented-assignments-rpass.rs:42:10: 42:16
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:42:10: 42:16
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000002)) }
        _82 = <Int as DivAssign>::div_assign(move _83, move _84) -> bb17; // scope 1 at ui/augmented-assignments-rpass.rs:42:5: 42:16
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:42:5: 42:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, Int) {<Int as DivAssign>::div_assign}, val: Value(<ZST>) }
    }

    bb17: {
        _86 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _350 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main, [], Some(promoted[11])) }
        _87 = _350;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _85 = (move _86, move _87);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _88 = (_85.0: &Int);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _89 = (_85.1: &Int);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _92 = _88;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _93 = _89;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _91 = <Int as PartialEq>::eq(move _92, move _93) -> bb18; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        _90 = Not(move _91);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _90) -> [0: bb20, otherwise: bb19]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _94 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _96 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _98 = _88;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _97 = _98;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _100 = _89;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _99 = _100;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _101 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _95 = core::panicking::assert_failed::<Int, Int>(move _96, move _97, move _99, move _101); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb20: {
        _103 = &mut _1;                  // scope 1 at ui/augmented-assignments-rpass.rs:45:5: 45:6
        _104 = const Int(3_i32);         // scope 1 at ui/augmented-assignments-rpass.rs:45:10: 45:16
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:45:10: 45:16
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000003)) }
        _102 = <Int as MulAssign>::mul_assign(move _103, move _104) -> bb21; // scope 1 at ui/augmented-assignments-rpass.rs:45:5: 45:16
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:45:5: 45:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, Int) {<Int as MulAssign>::mul_assign}, val: Value(<ZST>) }
    }

    bb21: {
        _106 = &_1;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _349 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main, [], Some(promoted[10])) }
        _107 = _349;                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _105 = (move _106, move _107);   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _108 = (_105.0: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _109 = (_105.1: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _112 = _108;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _113 = _109;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _111 = <Int as PartialEq>::eq(move _112, move _113) -> bb22; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb22: {
        _110 = Not(move _111);           // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _110) -> [0: bb24, otherwise: bb23]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb23: {
        _114 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _116 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _118 = _108;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _117 = _118;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _120 = _109;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _119 = _120;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _121 = Option::<Arguments<'_>>::None; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _115 = core::panicking::assert_failed::<Int, Int>(move _116, move _117, move _119, move _121); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb24: {
        _123 = &mut _1;                  // scope 1 at ui/augmented-assignments-rpass.rs:48:5: 48:6
        _124 = const Int(2_i32);         // scope 1 at ui/augmented-assignments-rpass.rs:48:10: 48:16
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:48:10: 48:16
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000002)) }
        _122 = <Int as RemAssign>::rem_assign(move _123, move _124) -> bb25; // scope 1 at ui/augmented-assignments-rpass.rs:48:5: 48:16
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:48:5: 48:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, Int) {<Int as RemAssign>::rem_assign}, val: Value(<ZST>) }
    }

    bb25: {
        _126 = &_1;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _348 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main, [], Some(promoted[9])) }
        _127 = _348;                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _125 = (move _126, move _127);   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _128 = (_125.0: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _129 = (_125.1: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _132 = _128;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _133 = _129;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _131 = <Int as PartialEq>::eq(move _132, move _133) -> bb26; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb26: {
        _130 = Not(move _131);           // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _130) -> [0: bb28, otherwise: bb27]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb27: {
        _134 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _136 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _138 = _128;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _137 = _138;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _140 = _129;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _139 = _140;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _141 = Option::<Arguments<'_>>::None; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _135 = core::panicking::assert_failed::<Int, Int>(move _136, move _137, move _139, move _141); // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb28: {
        _143 = &mut _1;                  // scope 1 at ui/augmented-assignments-rpass.rs:52:5: 52:6
        _142 = <Int as ShlAssign<u8>>::shl_assign(move _143, const 1_u8) -> bb29; // scope 1 at ui/augmented-assignments-rpass.rs:52:5: 52:14
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:52:5: 52:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, u8) {<Int as ShlAssign<u8>>::shl_assign}, val: Value(<ZST>) }
    }

    bb29: {
        _145 = &_1;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _347 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main, [], Some(promoted[8])) }
        _146 = _347;                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _144 = (move _145, move _146);   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _147 = (_144.0: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _148 = (_144.1: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _151 = _147;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _152 = _148;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _150 = <Int as PartialEq>::eq(move _151, move _152) -> bb30; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb30: {
        _149 = Not(move _150);           // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _149) -> [0: bb32, otherwise: bb31]; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb31: {
        _153 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _155 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _157 = _147;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _156 = _157;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _159 = _148;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _158 = _159;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _160 = Option::<Arguments<'_>>::None; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _154 = core::panicking::assert_failed::<Int, Int>(move _155, move _156, move _158, move _160); // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb32: {
        _162 = &mut _1;                  // scope 1 at ui/augmented-assignments-rpass.rs:55:5: 55:6
        _161 = <Int as ShlAssign<u16>>::shl_assign(move _162, const 1_u16) -> bb33; // scope 1 at ui/augmented-assignments-rpass.rs:55:5: 55:15
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:55:5: 55:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, u16) {<Int as ShlAssign<u16>>::shl_assign}, val: Value(<ZST>) }
    }

    bb33: {
        _164 = &_1;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _346 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main, [], Some(promoted[7])) }
        _165 = _346;                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _163 = (move _164, move _165);   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _166 = (_163.0: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _167 = (_163.1: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _170 = _166;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _171 = _167;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _169 = <Int as PartialEq>::eq(move _170, move _171) -> bb34; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb34: {
        _168 = Not(move _169);           // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _168) -> [0: bb36, otherwise: bb35]; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb35: {
        _172 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _174 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _176 = _166;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _175 = _176;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _178 = _167;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _177 = _178;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _179 = Option::<Arguments<'_>>::None; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _173 = core::panicking::assert_failed::<Int, Int>(move _174, move _175, move _177, move _179); // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb36: {
        _181 = &mut _1;                  // scope 1 at ui/augmented-assignments-rpass.rs:58:5: 58:6
        _180 = <Int as ShrAssign<u8>>::shr_assign(move _181, const 1_u8) -> bb37; // scope 1 at ui/augmented-assignments-rpass.rs:58:5: 58:14
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:58:5: 58:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, u8) {<Int as ShrAssign<u8>>::shr_assign}, val: Value(<ZST>) }
    }

    bb37: {
        _183 = &_1;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _345 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main, [], Some(promoted[6])) }
        _184 = _345;                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _182 = (move _183, move _184);   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _185 = (_182.0: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _186 = (_182.1: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _189 = _185;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _190 = _186;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _188 = <Int as PartialEq>::eq(move _189, move _190) -> bb38; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb38: {
        _187 = Not(move _188);           // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _187) -> [0: bb40, otherwise: bb39]; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb39: {
        _191 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _193 = const core::panicking::AssertKind::Eq; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _195 = _185;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _194 = _195;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _197 = _186;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _196 = _197;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _198 = Option::<Arguments<'_>>::None; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _192 = core::panicking::assert_failed::<Int, Int>(move _193, move _194, move _196, move _198); // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb40: {
        _200 = &mut _1;                  // scope 1 at ui/augmented-assignments-rpass.rs:61:5: 61:6
        _199 = <Int as ShrAssign<u16>>::shr_assign(move _200, const 1_u16) -> bb41; // scope 1 at ui/augmented-assignments-rpass.rs:61:5: 61:15
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:61:5: 61:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, u16) {<Int as ShrAssign<u16>>::shr_assign}, val: Value(<ZST>) }
    }

    bb41: {
        _202 = &_1;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _344 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main, [], Some(promoted[5])) }
        _203 = _344;                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _201 = (move _202, move _203);   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _204 = (_201.0: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _205 = (_201.1: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _208 = _204;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _209 = _205;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _207 = <Int as PartialEq>::eq(move _208, move _209) -> bb42; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb42: {
        _206 = Not(move _207);           // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _206) -> [0: bb44, otherwise: bb43]; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb43: {
        _210 = const core::panicking::AssertKind::Eq; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _212 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _214 = _204;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _213 = _214;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _216 = _205;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _215 = _216;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _217 = Option::<Arguments<'_>>::None; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _211 = core::panicking::assert_failed::<Int, Int>(move _212, move _213, move _215, move _217); // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb44: {
        _219 = &mut _1;                  // scope 1 at ui/augmented-assignments-rpass.rs:64:5: 64:6
        _220 = const Int(1_i32);         // scope 1 at ui/augmented-assignments-rpass.rs:64:10: 64:16
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:64:10: 64:16
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000001)) }
        _218 = <Int as SubAssign>::sub_assign(move _219, move _220) -> bb45; // scope 1 at ui/augmented-assignments-rpass.rs:64:5: 64:16
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:64:5: 64:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, Int) {<Int as SubAssign>::sub_assign}, val: Value(<ZST>) }
    }

    bb45: {
        _222 = &_1;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _343 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main, [], Some(promoted[4])) }
        _223 = _343;                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _221 = (move _222, move _223);   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _224 = (_221.0: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _225 = (_221.1: &Int);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _228 = _224;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _229 = _225;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _227 = <Int as PartialEq>::eq(move _228, move _229) -> bb46; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb46: {
        _226 = Not(move _227);           // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _226) -> [0: bb48, otherwise: bb47]; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb47: {
        _230 = const core::panicking::AssertKind::Eq; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _232 = const core::panicking::AssertKind::Eq; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _234 = _224;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _233 = _234;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _236 = _225;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _235 = _236;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _237 = Option::<Arguments<'_>>::None; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _231 = core::panicking::assert_failed::<Int, Int>(move _232, move _233, move _235, move _237); // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb48: {
        _241 = const 8_usize;            // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _242 = const 4_usize;            // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _243 = alloc::alloc::exchange_malloc(move _241, move _242) -> bb49; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb49: {
        _244 = ShallowInitBox(move _243, [Int; 2]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _245 = const Int(1_i32);         // scope 1 at ui/augmented-assignments-rpass.rs:68:22: 68:28
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:68:22: 68:28
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000001)) }
        _246 = const Int(2_i32);         // scope 1 at ui/augmented-assignments-rpass.rs:68:30: 68:36
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:68:30: 68:36
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000002)) }
        _355 = (((_244.0: std::ptr::Unique<[Int; 2]>).0: std::ptr::NonNull<[Int; 2]>).0: *const [Int; 2]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_355) = [move _245, move _246]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _240 = move _244;                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _239 = move _240 as std::boxed::Box<[Int]> (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _238 = slice::<impl [Int]>::into_vec::<std::alloc::Global>(move _239) -> bb50; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[Int]>) -> Vec<Int> {slice::<impl [Int]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb50: {
        _250 = &mut _238;                // scope 26 at ui/augmented-assignments-rpass.rs:69:5: 69:6
        _249 = <Vec<Int> as IndexMut<usize>>::index_mut(move _250, const 0_usize) -> [return: bb51, unwind: bb67]; // scope 26 at ui/augmented-assignments-rpass.rs:69:5: 69:9
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:69:5: 69:9
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Int>, usize) -> &'a mut <Vec<Int> as Index<usize>>::Output {<Vec<Int> as IndexMut<usize>>::index_mut}, val: Value(<ZST>) }
    }

    bb51: {
        _248 = &mut (*_249);             // scope 26 at ui/augmented-assignments-rpass.rs:69:5: 69:9
        _251 = const Int(2_i32);         // scope 26 at ui/augmented-assignments-rpass.rs:69:13: 69:19
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:69:13: 69:19
                                         // + literal: Const { ty: Int, val: Value(Scalar(0x00000002)) }
        _247 = <Int as AddAssign>::add_assign(move _248, move _251) -> [return: bb52, unwind: bb67]; // scope 26 at ui/augmented-assignments-rpass.rs:69:5: 69:19
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:69:5: 69:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut Int, Int) {<Int as AddAssign>::add_assign}, val: Value(<ZST>) }
    }

    bb52: {
        _255 = &_238;                    // scope 26 at ui/augmented-assignments-rpass.rs:70:16: 70:17
        _254 = <Vec<Int> as Index<usize>>::index(move _255, const 0_usize) -> [return: bb53, unwind: bb67]; // scope 26 at ui/augmented-assignments-rpass.rs:70:16: 70:20
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:70:16: 70:20
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Int>, usize) -> &'a <Vec<Int> as Index<usize>>::Output {<Vec<Int> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb53: {
        _253 = _254;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _342 = const _;                  // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Int, val: Unevaluated(main, [], Some(promoted[3])) }
        _256 = _342;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _252 = (move _253, move _256);   // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _257 = (_252.0: &Int);           // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _258 = (_252.1: &Int);           // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _261 = _257;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _262 = _258;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _260 = <Int as PartialEq>::eq(move _261, move _262) -> [return: bb54, unwind: bb67]; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Int, &'b Int) -> bool {<Int as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb54: {
        _259 = Not(move _260);           // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _259) -> [0: bb56, otherwise: bb55]; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb55: {
        _263 = const core::panicking::AssertKind::Eq; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _265 = const core::panicking::AssertKind::Eq; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _267 = _257;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _266 = _267;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _269 = _258;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _268 = _269;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _270 = Option::<Arguments<'_>>::None; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _264 = core::panicking::assert_failed::<Int, Int>(move _265, move _266, move _268, move _270) -> bb67; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Int, &'b Int, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Int, Int>}, val: Value(<ZST>) }
    }

    bb56: {
        _271 = [const 0_i32, const 1_i32, const 2_i32]; // scope 26 at ui/augmented-assignments-rpass.rs:73:21: 73:30
        _277 = &mut _271;                // scope 30 at ui/augmented-assignments-rpass.rs:74:17: 74:27
        _276 = &mut (*_277);             // scope 30 at ui/augmented-assignments-rpass.rs:74:17: 74:27
        _275 = move _276 as &mut [i32] (Pointer(Unsize)); // scope 30 at ui/augmented-assignments-rpass.rs:74:17: 74:27
        _274 = Slice::new(move _275) -> [return: bb57, unwind: bb67]; // scope 30 at ui/augmented-assignments-rpass.rs:74:6: 74:28
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:74:6: 74:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut [i32]) -> &'a mut Slice {Slice::new}, val: Value(<ZST>) }
    }

    bb57: {
        _273 = &mut (*_274);             // scope 30 at ui/augmented-assignments-rpass.rs:74:5: 74:28
        _272 = <Slice as AddAssign<i32>>::add_assign(move _273, const 1_i32) -> [return: bb58, unwind: bb67]; // scope 30 at ui/augmented-assignments-rpass.rs:74:5: 74:33
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:74:5: 74:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut Slice, i32) {<Slice as AddAssign<i32>>::add_assign}, val: Value(<ZST>) }
    }

    bb58: {
        _280 = const 0_usize;            // scope 30 at ui/augmented-assignments-rpass.rs:75:22: 75:23
        _279 = &_271[_280];              // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _341 = const _;                  // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[2])) }
        _281 = _341;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _278 = (move _279, move _281);   // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _282 = (_278.0: &i32);           // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _283 = (_278.1: &i32);           // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _286 = (*_282);                  // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _287 = const 1_i32;              // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _285 = Eq(move _286, move _287); // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _284 = Not(move _285);           // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _284) -> [0: bb60, otherwise: bb59]; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb59: {
        _288 = const core::panicking::AssertKind::Eq; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _290 = const core::panicking::AssertKind::Eq; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _292 = _282;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _291 = _292;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _294 = _283;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _293 = _294;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _295 = Option::<Arguments<'_>>::None; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _289 = core::panicking::assert_failed::<i32, i32>(move _290, move _291, move _293, move _295) -> bb67; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb60: {
        _298 = const 1_usize;            // scope 30 at ui/augmented-assignments-rpass.rs:76:22: 76:23
        _297 = &_271[_298];              // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _340 = const _;                  // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _299 = _340;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _296 = (move _297, move _299);   // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _300 = (_296.0: &i32);           // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _301 = (_296.1: &i32);           // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _304 = (*_300);                  // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _305 = const 2_i32;              // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _303 = Eq(move _304, move _305); // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _302 = Not(move _303);           // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _302) -> [0: bb62, otherwise: bb61]; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb61: {
        _306 = const core::panicking::AssertKind::Eq; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _308 = const core::panicking::AssertKind::Eq; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _310 = _300;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _309 = _310;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _312 = _301;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _311 = _312;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _313 = Option::<Arguments<'_>>::None; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _307 = core::panicking::assert_failed::<i32, i32>(move _308, move _309, move _311, move _313) -> bb67; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb62: {
        _316 = const 2_usize;            // scope 30 at ui/augmented-assignments-rpass.rs:77:22: 77:23
        _315 = &_271[_316];              // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _339 = const _;                  // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _317 = _339;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _314 = (move _315, move _317);   // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _318 = (_314.0: &i32);           // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _319 = (_314.1: &i32);           // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _322 = (*_318);                  // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _323 = const 3_i32;              // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _321 = Eq(move _322, move _323); // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _320 = Not(move _321);           // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _320) -> [0: bb64, otherwise: bb63]; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb63: {
        _324 = const core::panicking::AssertKind::Eq; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _326 = const core::panicking::AssertKind::Eq; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _328 = _318;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _327 = _328;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _330 = _319;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _329 = _330;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _331 = Option::<Arguments<'_>>::None; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _325 = core::panicking::assert_failed::<i32, i32>(move _326, move _327, move _329, move _331) -> bb67; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb64: {
        _332 = [const 0_i32, const 1_i32, const 2_i32]; // scope 30 at ui/augmented-assignments-rpass.rs:81:21: 81:30
        _336 = &mut _332;                // scope 37 at ui/augmented-assignments-rpass.rs:82:25: 82:35
        _335 = &mut (*_336);             // scope 37 at ui/augmented-assignments-rpass.rs:82:25: 82:35
        _334 = move _335 as &mut [i32] (Pointer(Unsize)); // scope 37 at ui/augmented-assignments-rpass.rs:82:25: 82:35
        _333 = View::<'_>(move _334);    // scope 37 at ui/augmented-assignments-rpass.rs:82:20: 82:36
        _338 = &mut _333;                // scope 38 at ui/augmented-assignments-rpass.rs:83:5: 83:9
        _337 = <View<'_> as AddAssign<i32>>::add_assign(move _338, const 1_i32) -> [return: bb65, unwind: bb67]; // scope 38 at ui/augmented-assignments-rpass.rs:83:5: 83:14
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:83:5: 83:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut View<'_>, i32) {<View<'_> as AddAssign<i32>>::add_assign}, val: Value(<ZST>) }
    }

    bb65: {
        drop(_238) -> bb66;              // scope 1 at ui/augmented-assignments-rpass.rs:84:1: 84:2
    }

    bb66: {
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:84:2: 84:2
    }

    bb67 (cleanup): {
        drop(_238) -> bb68;              // scope 1 at ui/augmented-assignments-rpass.rs:84:1: 84:2
    }

    bb68 (cleanup): {
        resume;                          // scope 0 at ui/augmented-assignments-rpass.rs:27:1: 84:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/augmented-assignments-rpass.rs:77:26: 77:27

    bb0: {
        _1 = const 3_i32;                // scope 0 at ui/augmented-assignments-rpass.rs:77:26: 77:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/augmented-assignments-rpass.rs:76:26: 76:27

    bb0: {
        _1 = const 2_i32;                // scope 0 at ui/augmented-assignments-rpass.rs:76:26: 76:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/augmented-assignments-rpass.rs:75:26: 75:27

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/augmented-assignments-rpass.rs:75:26: 75:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/augmented-assignments-rpass.rs:70:22: 70:28

    bb0: {
        _1 = Int(const 3_i32);           // scope 0 at ui/augmented-assignments-rpass.rs:70:22: 70:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/augmented-assignments-rpass.rs:65:19: 65:25

    bb0: {
        _1 = Int(const 0_i32);           // scope 0 at ui/augmented-assignments-rpass.rs:65:19: 65:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/augmented-assignments-rpass.rs:62:19: 62:25

    bb0: {
        _1 = Int(const 1_i32);           // scope 0 at ui/augmented-assignments-rpass.rs:62:19: 62:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[6] in main: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/augmented-assignments-rpass.rs:59:19: 59:25

    bb0: {
        _1 = Int(const 2_i32);           // scope 0 at ui/augmented-assignments-rpass.rs:59:19: 59:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[7] in main: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/augmented-assignments-rpass.rs:56:19: 56:25

    bb0: {
        _1 = Int(const 4_i32);           // scope 0 at ui/augmented-assignments-rpass.rs:56:19: 56:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[8] in main: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/augmented-assignments-rpass.rs:53:19: 53:25

    bb0: {
        _1 = Int(const 2_i32);           // scope 0 at ui/augmented-assignments-rpass.rs:53:19: 53:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[9] in main: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/augmented-assignments-rpass.rs:49:19: 49:25

    bb0: {
        _1 = Int(const 1_i32);           // scope 0 at ui/augmented-assignments-rpass.rs:49:19: 49:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[10] in main: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/augmented-assignments-rpass.rs:46:19: 46:25

    bb0: {
        _1 = Int(const 3_i32);           // scope 0 at ui/augmented-assignments-rpass.rs:46:19: 46:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[11] in main: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/augmented-assignments-rpass.rs:43:19: 43:25

    bb0: {
        _1 = Int(const 1_i32);           // scope 0 at ui/augmented-assignments-rpass.rs:43:19: 43:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[12] in main: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/augmented-assignments-rpass.rs:40:19: 40:28

    bb0: {
        _1 = Int(const 2_i32);           // scope 0 at ui/augmented-assignments-rpass.rs:40:19: 40:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[13] in main: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/augmented-assignments-rpass.rs:37:19: 37:28

    bb0: {
        _1 = Int(const 3_i32);           // scope 0 at ui/augmented-assignments-rpass.rs:37:19: 37:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[14] in main: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/augmented-assignments-rpass.rs:34:19: 34:28

    bb0: {
        _1 = Int(const 1_i32);           // scope 0 at ui/augmented-assignments-rpass.rs:34:19: 34:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[15] in main: &Int = {
    let mut _0: &Int;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Int;                     // in scope 0 at ui/augmented-assignments-rpass.rs:31:19: 31:28

    bb0: {
        _1 = Int(const 3_i32);           // scope 0 at ui/augmented-assignments-rpass.rs:31:19: 31:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn <impl at ui/augmented-assignments-rpass.rs:86:1: 86:23>::add_assign(_1: &mut Int, _2: Int) -> () {
    debug self => _1;                    // in scope 0 at ui/augmented-assignments-rpass.rs:87:19: 87:28
    debug rhs => _2;                     // in scope 0 at ui/augmented-assignments-rpass.rs:87:30: 87:33
    let mut _0: ();                      // return place in scope 0 at ui/augmented-assignments-rpass.rs:87:40: 87:40
    let mut _3: i32;                     // in scope 0 at ui/augmented-assignments-rpass.rs:88:19: 88:24
    let mut _4: (i32, bool);             // in scope 0 at ui/augmented-assignments-rpass.rs:88:9: 88:24

    bb0: {
        _3 = (_2.0: i32);                // scope 0 at ui/augmented-assignments-rpass.rs:88:19: 88:24
        _4 = CheckedAdd(((*_1).0: i32), _3); // scope 0 at ui/augmented-assignments-rpass.rs:88:9: 88:24
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: i32), move _3) -> bb1; // scope 0 at ui/augmented-assignments-rpass.rs:88:9: 88:24
    }

    bb1: {
        ((*_1).0: i32) = move (_4.0: i32); // scope 0 at ui/augmented-assignments-rpass.rs:88:9: 88:24
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:89:6: 89:6
    }
}

fn <impl at ui/augmented-assignments-rpass.rs:92:1: 92:26>::bitand_assign(_1: &mut Int, _2: Int) -> () {
    debug self => _1;                    // in scope 0 at ui/augmented-assignments-rpass.rs:93:22: 93:31
    debug rhs => _2;                     // in scope 0 at ui/augmented-assignments-rpass.rs:93:33: 93:36
    let mut _0: ();                      // return place in scope 0 at ui/augmented-assignments-rpass.rs:93:43: 93:43
    let mut _3: i32;                     // in scope 0 at ui/augmented-assignments-rpass.rs:94:19: 94:24

    bb0: {
        _3 = (_2.0: i32);                // scope 0 at ui/augmented-assignments-rpass.rs:94:19: 94:24
        ((*_1).0: i32) = BitAnd(((*_1).0: i32), move _3); // scope 0 at ui/augmented-assignments-rpass.rs:94:9: 94:24
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:95:6: 95:6
    }
}

fn <impl at ui/augmented-assignments-rpass.rs:98:1: 98:25>::bitor_assign(_1: &mut Int, _2: Int) -> () {
    debug self => _1;                    // in scope 0 at ui/augmented-assignments-rpass.rs:99:21: 99:30
    debug rhs => _2;                     // in scope 0 at ui/augmented-assignments-rpass.rs:99:32: 99:35
    let mut _0: ();                      // return place in scope 0 at ui/augmented-assignments-rpass.rs:99:42: 99:42
    let mut _3: i32;                     // in scope 0 at ui/augmented-assignments-rpass.rs:100:19: 100:24

    bb0: {
        _3 = (_2.0: i32);                // scope 0 at ui/augmented-assignments-rpass.rs:100:19: 100:24
        ((*_1).0: i32) = BitOr(((*_1).0: i32), move _3); // scope 0 at ui/augmented-assignments-rpass.rs:100:9: 100:24
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:101:6: 101:6
    }
}

fn <impl at ui/augmented-assignments-rpass.rs:104:1: 104:26>::bitxor_assign(_1: &mut Int, _2: Int) -> () {
    debug self => _1;                    // in scope 0 at ui/augmented-assignments-rpass.rs:105:22: 105:31
    debug rhs => _2;                     // in scope 0 at ui/augmented-assignments-rpass.rs:105:33: 105:36
    let mut _0: ();                      // return place in scope 0 at ui/augmented-assignments-rpass.rs:105:43: 105:43
    let mut _3: i32;                     // in scope 0 at ui/augmented-assignments-rpass.rs:106:19: 106:24

    bb0: {
        _3 = (_2.0: i32);                // scope 0 at ui/augmented-assignments-rpass.rs:106:19: 106:24
        ((*_1).0: i32) = BitXor(((*_1).0: i32), move _3); // scope 0 at ui/augmented-assignments-rpass.rs:106:9: 106:24
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:107:6: 107:6
    }
}

fn <impl at ui/augmented-assignments-rpass.rs:110:1: 110:23>::div_assign(_1: &mut Int, _2: Int) -> () {
    debug self => _1;                    // in scope 0 at ui/augmented-assignments-rpass.rs:111:19: 111:28
    debug rhs => _2;                     // in scope 0 at ui/augmented-assignments-rpass.rs:111:30: 111:33
    let mut _0: ();                      // return place in scope 0 at ui/augmented-assignments-rpass.rs:111:40: 111:40
    let mut _3: i32;                     // in scope 0 at ui/augmented-assignments-rpass.rs:112:19: 112:24
    let mut _4: bool;                    // in scope 0 at ui/augmented-assignments-rpass.rs:112:9: 112:24
    let mut _5: bool;                    // in scope 0 at ui/augmented-assignments-rpass.rs:112:9: 112:24
    let mut _6: bool;                    // in scope 0 at ui/augmented-assignments-rpass.rs:112:9: 112:24
    let mut _7: bool;                    // in scope 0 at ui/augmented-assignments-rpass.rs:112:9: 112:24

    bb0: {
        _3 = (_2.0: i32);                // scope 0 at ui/augmented-assignments-rpass.rs:112:19: 112:24
        _4 = Eq(_3, const 0_i32);        // scope 0 at ui/augmented-assignments-rpass.rs:112:9: 112:24
        assert(!move _4, "attempt to divide `{}` by zero", ((*_1).0: i32)) -> bb1; // scope 0 at ui/augmented-assignments-rpass.rs:112:9: 112:24
    }

    bb1: {
        _5 = Eq(_3, const -1_i32);       // scope 0 at ui/augmented-assignments-rpass.rs:112:9: 112:24
        _6 = Eq(((*_1).0: i32), const i32::MIN); // scope 0 at ui/augmented-assignments-rpass.rs:112:9: 112:24
        _7 = BitAnd(move _5, move _6);   // scope 0 at ui/augmented-assignments-rpass.rs:112:9: 112:24
        assert(!move _7, "attempt to compute `{} / {}`, which would overflow", ((*_1).0: i32), _3) -> bb2; // scope 0 at ui/augmented-assignments-rpass.rs:112:9: 112:24
    }

    bb2: {
        ((*_1).0: i32) = Div(((*_1).0: i32), move _3); // scope 0 at ui/augmented-assignments-rpass.rs:112:9: 112:24
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:113:6: 113:6
    }
}

fn <impl at ui/augmented-assignments-rpass.rs:116:1: 116:23>::mul_assign(_1: &mut Int, _2: Int) -> () {
    debug self => _1;                    // in scope 0 at ui/augmented-assignments-rpass.rs:117:19: 117:28
    debug rhs => _2;                     // in scope 0 at ui/augmented-assignments-rpass.rs:117:30: 117:33
    let mut _0: ();                      // return place in scope 0 at ui/augmented-assignments-rpass.rs:117:40: 117:40
    let mut _3: i32;                     // in scope 0 at ui/augmented-assignments-rpass.rs:118:19: 118:24
    let mut _4: (i32, bool);             // in scope 0 at ui/augmented-assignments-rpass.rs:118:9: 118:24

    bb0: {
        _3 = (_2.0: i32);                // scope 0 at ui/augmented-assignments-rpass.rs:118:19: 118:24
        _4 = CheckedMul(((*_1).0: i32), _3); // scope 0 at ui/augmented-assignments-rpass.rs:118:9: 118:24
        assert(!move (_4.1: bool), "attempt to compute `{} * {}`, which would overflow", ((*_1).0: i32), move _3) -> bb1; // scope 0 at ui/augmented-assignments-rpass.rs:118:9: 118:24
    }

    bb1: {
        ((*_1).0: i32) = move (_4.0: i32); // scope 0 at ui/augmented-assignments-rpass.rs:118:9: 118:24
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:119:6: 119:6
    }
}

fn <impl at ui/augmented-assignments-rpass.rs:122:1: 122:23>::rem_assign(_1: &mut Int, _2: Int) -> () {
    debug self => _1;                    // in scope 0 at ui/augmented-assignments-rpass.rs:123:19: 123:28
    debug rhs => _2;                     // in scope 0 at ui/augmented-assignments-rpass.rs:123:30: 123:33
    let mut _0: ();                      // return place in scope 0 at ui/augmented-assignments-rpass.rs:123:40: 123:40
    let mut _3: i32;                     // in scope 0 at ui/augmented-assignments-rpass.rs:124:19: 124:24
    let mut _4: bool;                    // in scope 0 at ui/augmented-assignments-rpass.rs:124:9: 124:24
    let mut _5: bool;                    // in scope 0 at ui/augmented-assignments-rpass.rs:124:9: 124:24
    let mut _6: bool;                    // in scope 0 at ui/augmented-assignments-rpass.rs:124:9: 124:24
    let mut _7: bool;                    // in scope 0 at ui/augmented-assignments-rpass.rs:124:9: 124:24

    bb0: {
        _3 = (_2.0: i32);                // scope 0 at ui/augmented-assignments-rpass.rs:124:19: 124:24
        _4 = Eq(_3, const 0_i32);        // scope 0 at ui/augmented-assignments-rpass.rs:124:9: 124:24
        assert(!move _4, "attempt to calculate the remainder of `{}` with a divisor of zero", ((*_1).0: i32)) -> bb1; // scope 0 at ui/augmented-assignments-rpass.rs:124:9: 124:24
    }

    bb1: {
        _5 = Eq(_3, const -1_i32);       // scope 0 at ui/augmented-assignments-rpass.rs:124:9: 124:24
        _6 = Eq(((*_1).0: i32), const i32::MIN); // scope 0 at ui/augmented-assignments-rpass.rs:124:9: 124:24
        _7 = BitAnd(move _5, move _6);   // scope 0 at ui/augmented-assignments-rpass.rs:124:9: 124:24
        assert(!move _7, "attempt to compute the remainder of `{} % {}`, which would overflow", ((*_1).0: i32), _3) -> bb2; // scope 0 at ui/augmented-assignments-rpass.rs:124:9: 124:24
    }

    bb2: {
        ((*_1).0: i32) = Rem(((*_1).0: i32), move _3); // scope 0 at ui/augmented-assignments-rpass.rs:124:9: 124:24
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:125:6: 125:6
    }
}

fn <impl at ui/augmented-assignments-rpass.rs:128:1: 128:27>::shl_assign(_1: &mut Int, _2: u8) -> () {
    debug self => _1;                    // in scope 0 at ui/augmented-assignments-rpass.rs:129:19: 129:28
    debug rhs => _2;                     // in scope 0 at ui/augmented-assignments-rpass.rs:129:30: 129:33
    let mut _0: ();                      // return place in scope 0 at ui/augmented-assignments-rpass.rs:129:39: 129:39
    let mut _3: u8;                      // in scope 0 at ui/augmented-assignments-rpass.rs:130:20: 130:23
    let mut _4: (i32, bool);             // in scope 0 at ui/augmented-assignments-rpass.rs:130:9: 130:23

    bb0: {
        _3 = _2;                         // scope 0 at ui/augmented-assignments-rpass.rs:130:20: 130:23
        _4 = CheckedShl(((*_1).0: i32), _3); // scope 0 at ui/augmented-assignments-rpass.rs:130:9: 130:23
        assert(!move (_4.1: bool), "attempt to shift left by `{}`, which would overflow", move _3) -> bb1; // scope 0 at ui/augmented-assignments-rpass.rs:130:9: 130:23
    }

    bb1: {
        ((*_1).0: i32) = move (_4.0: i32); // scope 0 at ui/augmented-assignments-rpass.rs:130:9: 130:23
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:131:6: 131:6
    }
}

fn <impl at ui/augmented-assignments-rpass.rs:134:1: 134:28>::shl_assign(_1: &mut Int, _2: u16) -> () {
    debug self => _1;                    // in scope 0 at ui/augmented-assignments-rpass.rs:135:19: 135:28
    debug rhs => _2;                     // in scope 0 at ui/augmented-assignments-rpass.rs:135:30: 135:33
    let mut _0: ();                      // return place in scope 0 at ui/augmented-assignments-rpass.rs:135:40: 135:40
    let mut _3: u16;                     // in scope 0 at ui/augmented-assignments-rpass.rs:136:20: 136:23
    let mut _4: (i32, bool);             // in scope 0 at ui/augmented-assignments-rpass.rs:136:9: 136:23

    bb0: {
        _3 = _2;                         // scope 0 at ui/augmented-assignments-rpass.rs:136:20: 136:23
        _4 = CheckedShl(((*_1).0: i32), _3); // scope 0 at ui/augmented-assignments-rpass.rs:136:9: 136:23
        assert(!move (_4.1: bool), "attempt to shift left by `{}`, which would overflow", move _3) -> bb1; // scope 0 at ui/augmented-assignments-rpass.rs:136:9: 136:23
    }

    bb1: {
        ((*_1).0: i32) = move (_4.0: i32); // scope 0 at ui/augmented-assignments-rpass.rs:136:9: 136:23
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:137:6: 137:6
    }
}

fn <impl at ui/augmented-assignments-rpass.rs:140:1: 140:27>::shr_assign(_1: &mut Int, _2: u8) -> () {
    debug self => _1;                    // in scope 0 at ui/augmented-assignments-rpass.rs:141:19: 141:28
    debug rhs => _2;                     // in scope 0 at ui/augmented-assignments-rpass.rs:141:30: 141:33
    let mut _0: ();                      // return place in scope 0 at ui/augmented-assignments-rpass.rs:141:39: 141:39
    let mut _3: u8;                      // in scope 0 at ui/augmented-assignments-rpass.rs:142:20: 142:23
    let mut _4: (i32, bool);             // in scope 0 at ui/augmented-assignments-rpass.rs:142:9: 142:23

    bb0: {
        _3 = _2;                         // scope 0 at ui/augmented-assignments-rpass.rs:142:20: 142:23
        _4 = CheckedShr(((*_1).0: i32), _3); // scope 0 at ui/augmented-assignments-rpass.rs:142:9: 142:23
        assert(!move (_4.1: bool), "attempt to shift right by `{}`, which would overflow", move _3) -> bb1; // scope 0 at ui/augmented-assignments-rpass.rs:142:9: 142:23
    }

    bb1: {
        ((*_1).0: i32) = move (_4.0: i32); // scope 0 at ui/augmented-assignments-rpass.rs:142:9: 142:23
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:143:6: 143:6
    }
}

fn <impl at ui/augmented-assignments-rpass.rs:146:1: 146:28>::shr_assign(_1: &mut Int, _2: u16) -> () {
    debug self => _1;                    // in scope 0 at ui/augmented-assignments-rpass.rs:147:19: 147:28
    debug rhs => _2;                     // in scope 0 at ui/augmented-assignments-rpass.rs:147:30: 147:33
    let mut _0: ();                      // return place in scope 0 at ui/augmented-assignments-rpass.rs:147:40: 147:40
    let mut _3: u16;                     // in scope 0 at ui/augmented-assignments-rpass.rs:148:20: 148:23
    let mut _4: (i32, bool);             // in scope 0 at ui/augmented-assignments-rpass.rs:148:9: 148:23

    bb0: {
        _3 = _2;                         // scope 0 at ui/augmented-assignments-rpass.rs:148:20: 148:23
        _4 = CheckedShr(((*_1).0: i32), _3); // scope 0 at ui/augmented-assignments-rpass.rs:148:9: 148:23
        assert(!move (_4.1: bool), "attempt to shift right by `{}`, which would overflow", move _3) -> bb1; // scope 0 at ui/augmented-assignments-rpass.rs:148:9: 148:23
    }

    bb1: {
        ((*_1).0: i32) = move (_4.0: i32); // scope 0 at ui/augmented-assignments-rpass.rs:148:9: 148:23
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:149:6: 149:6
    }
}

fn <impl at ui/augmented-assignments-rpass.rs:152:1: 152:23>::sub_assign(_1: &mut Int, _2: Int) -> () {
    debug self => _1;                    // in scope 0 at ui/augmented-assignments-rpass.rs:153:19: 153:28
    debug rhs => _2;                     // in scope 0 at ui/augmented-assignments-rpass.rs:153:30: 153:33
    let mut _0: ();                      // return place in scope 0 at ui/augmented-assignments-rpass.rs:153:40: 153:40
    let mut _3: i32;                     // in scope 0 at ui/augmented-assignments-rpass.rs:154:19: 154:24
    let mut _4: (i32, bool);             // in scope 0 at ui/augmented-assignments-rpass.rs:154:9: 154:24

    bb0: {
        _3 = (_2.0: i32);                // scope 0 at ui/augmented-assignments-rpass.rs:154:19: 154:24
        _4 = CheckedSub(((*_1).0: i32), _3); // scope 0 at ui/augmented-assignments-rpass.rs:154:9: 154:24
        assert(!move (_4.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1).0: i32), move _3) -> bb1; // scope 0 at ui/augmented-assignments-rpass.rs:154:9: 154:24
    }

    bb1: {
        ((*_1).0: i32) = move (_4.0: i32); // scope 0 at ui/augmented-assignments-rpass.rs:154:9: 154:24
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:155:6: 155:6
    }
}

fn <impl at ui/augmented-assignments-rpass.rs:158:1: 158:30>::add_assign(_1: &mut Slice, _2: i32) -> () {
    debug self => _1;                    // in scope 0 at ui/augmented-assignments-rpass.rs:159:19: 159:28
    debug rhs => _2;                     // in scope 0 at ui/augmented-assignments-rpass.rs:159:30: 159:33
    let mut _0: ();                      // return place in scope 0 at ui/augmented-assignments-rpass.rs:159:40: 159:40
    let mut _3: std::slice::IterMut<'_, i32>; // in scope 0 at ui/augmented-assignments-rpass.rs:160:20: 160:31
    let mut _4: &mut [i32];              // in scope 0 at ui/augmented-assignments-rpass.rs:160:20: 160:31
    let mut _5: std::slice::IterMut<'_, i32>; // in scope 0 at ui/augmented-assignments-rpass.rs:160:20: 160:31
    let mut _6: std::option::Option<&mut i32>; // in scope 0 at ui/augmented-assignments-rpass.rs:160:20: 160:31
    let mut _7: &mut std::slice::IterMut<'_, i32>; // in scope 0 at ui/augmented-assignments-rpass.rs:160:20: 160:31
    let mut _8: &mut std::slice::IterMut<'_, i32>; // in scope 0 at ui/augmented-assignments-rpass.rs:160:20: 160:31
    let mut _9: isize;                   // in scope 0 at ui/augmented-assignments-rpass.rs:160:9: 162:10
    let mut _11: i32;                    // in scope 0 at ui/augmented-assignments-rpass.rs:161:21: 161:24
    let mut _12: (i32, bool);            // in scope 0 at ui/augmented-assignments-rpass.rs:161:13: 161:24
    scope 1 {
        debug iter => _5;                // in scope 1 at ui/augmented-assignments-rpass.rs:160:20: 160:31
        let _10: &mut i32;               // in scope 1 at ui/augmented-assignments-rpass.rs:160:13: 160:16
        scope 2 {
            debug lhs => _10;            // in scope 2 at ui/augmented-assignments-rpass.rs:160:13: 160:16
        }
    }

    bb0: {
        _4 = &mut ((*_1).0: [i32]);      // scope 0 at ui/augmented-assignments-rpass.rs:160:20: 160:31
        _3 = <&mut [i32] as IntoIterator>::into_iter(move _4) -> bb1; // scope 0 at ui/augmented-assignments-rpass.rs:160:20: 160:31
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:160:20: 160:31
                                         // + literal: Const { ty: fn(&mut [i32]) -> <&mut [i32] as IntoIterator>::IntoIter {<&mut [i32] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _3;                    // scope 0 at ui/augmented-assignments-rpass.rs:160:20: 160:31
        goto -> bb2;                     // scope 1 at ui/augmented-assignments-rpass.rs:160:9: 162:10
    }

    bb2: {
        _8 = &mut _5;                    // scope 1 at ui/augmented-assignments-rpass.rs:160:20: 160:31
        _7 = &mut (*_8);                 // scope 1 at ui/augmented-assignments-rpass.rs:160:20: 160:31
        _6 = <std::slice::IterMut<'_, i32> as Iterator>::next(move _7) -> bb3; // scope 1 at ui/augmented-assignments-rpass.rs:160:20: 160:31
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:160:20: 160:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::IterMut<'_, i32>) -> Option<<std::slice::IterMut<'_, i32> as Iterator>::Item> {<std::slice::IterMut<'_, i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = discriminant(_6);           // scope 1 at ui/augmented-assignments-rpass.rs:160:20: 160:31
        switchInt(move _9) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/augmented-assignments-rpass.rs:160:20: 160:31
    }

    bb4: {
        _10 = move ((_6 as Some).0: &mut i32); // scope 1 at ui/augmented-assignments-rpass.rs:160:13: 160:16
        _11 = _2;                        // scope 2 at ui/augmented-assignments-rpass.rs:161:21: 161:24
        _12 = CheckedAdd((*_10), _11);   // scope 2 at ui/augmented-assignments-rpass.rs:161:13: 161:24
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_10), move _11) -> bb7; // scope 2 at ui/augmented-assignments-rpass.rs:161:13: 161:24
    }

    bb5: {
        unreachable;                     // scope 1 at ui/augmented-assignments-rpass.rs:160:20: 160:31
    }

    bb6: {
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:163:6: 163:6
    }

    bb7: {
        (*_10) = move (_12.0: i32);      // scope 2 at ui/augmented-assignments-rpass.rs:161:13: 161:24
        goto -> bb2;                     // scope 1 at ui/augmented-assignments-rpass.rs:160:9: 162:10
    }
}

fn <impl at ui/augmented-assignments-rpass.rs:166:1: 166:37>::add_assign(_1: &mut View<'_>, _2: i32) -> () {
    debug self => _1;                    // in scope 0 at ui/augmented-assignments-rpass.rs:167:19: 167:28
    debug rhs => _2;                     // in scope 0 at ui/augmented-assignments-rpass.rs:167:30: 167:33
    let mut _0: ();                      // return place in scope 0 at ui/augmented-assignments-rpass.rs:167:40: 167:40
    let mut _3: std::slice::IterMut<'_, i32>; // in scope 0 at ui/augmented-assignments-rpass.rs:168:20: 168:37
    let mut _4: std::slice::IterMut<'_, i32>; // in scope 0 at ui/augmented-assignments-rpass.rs:168:20: 168:37
    let mut _5: &mut [i32];              // in scope 0 at ui/augmented-assignments-rpass.rs:168:20: 168:37
    let mut _6: std::slice::IterMut<'_, i32>; // in scope 0 at ui/augmented-assignments-rpass.rs:168:20: 168:37
    let mut _7: std::option::Option<&mut i32>; // in scope 0 at ui/augmented-assignments-rpass.rs:168:20: 168:37
    let mut _8: &mut std::slice::IterMut<'_, i32>; // in scope 0 at ui/augmented-assignments-rpass.rs:168:20: 168:37
    let mut _9: &mut std::slice::IterMut<'_, i32>; // in scope 0 at ui/augmented-assignments-rpass.rs:168:20: 168:37
    let mut _10: isize;                  // in scope 0 at ui/augmented-assignments-rpass.rs:168:9: 170:10
    let mut _12: i32;                    // in scope 0 at ui/augmented-assignments-rpass.rs:169:21: 169:24
    let mut _13: (i32, bool);            // in scope 0 at ui/augmented-assignments-rpass.rs:169:13: 169:24
    let mut _14: &mut [i32];             // in scope 0 at ui/augmented-assignments-rpass.rs:167:19: 167:28
    scope 1 {
        debug iter => _6;                // in scope 1 at ui/augmented-assignments-rpass.rs:168:20: 168:37
        let _11: &mut i32;               // in scope 1 at ui/augmented-assignments-rpass.rs:168:13: 168:16
        scope 2 {
            debug lhs => _11;            // in scope 2 at ui/augmented-assignments-rpass.rs:168:13: 168:16
        }
    }

    bb0: {
        _14 = deref_copy ((*_1).0: &mut [i32]); // scope 0 at ui/augmented-assignments-rpass.rs:168:20: 168:37
        _5 = &mut (*_14);                // scope 0 at ui/augmented-assignments-rpass.rs:168:20: 168:37
        _4 = core::slice::<impl [i32]>::iter_mut(move _5) -> bb1; // scope 0 at ui/augmented-assignments-rpass.rs:168:20: 168:37
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:168:27: 168:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut [i32]) -> std::slice::IterMut<'a, i32> {core::slice::<impl [i32]>::iter_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <std::slice::IterMut<'_, i32> as IntoIterator>::into_iter(move _4) -> bb2; // scope 0 at ui/augmented-assignments-rpass.rs:168:20: 168:37
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:168:20: 168:37
                                         // + literal: Const { ty: fn(std::slice::IterMut<'_, i32>) -> <std::slice::IterMut<'_, i32> as IntoIterator>::IntoIter {<std::slice::IterMut<'_, i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = move _3;                    // scope 0 at ui/augmented-assignments-rpass.rs:168:20: 168:37
        goto -> bb3;                     // scope 1 at ui/augmented-assignments-rpass.rs:168:9: 170:10
    }

    bb3: {
        _9 = &mut _6;                    // scope 1 at ui/augmented-assignments-rpass.rs:168:20: 168:37
        _8 = &mut (*_9);                 // scope 1 at ui/augmented-assignments-rpass.rs:168:20: 168:37
        _7 = <std::slice::IterMut<'_, i32> as Iterator>::next(move _8) -> bb4; // scope 1 at ui/augmented-assignments-rpass.rs:168:20: 168:37
                                         // mir::Constant
                                         // + span: ui/augmented-assignments-rpass.rs:168:20: 168:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::IterMut<'_, i32>) -> Option<<std::slice::IterMut<'_, i32> as Iterator>::Item> {<std::slice::IterMut<'_, i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = discriminant(_7);          // scope 1 at ui/augmented-assignments-rpass.rs:168:20: 168:37
        switchInt(move _10) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 1 at ui/augmented-assignments-rpass.rs:168:20: 168:37
    }

    bb5: {
        _11 = move ((_7 as Some).0: &mut i32); // scope 1 at ui/augmented-assignments-rpass.rs:168:13: 168:16
        _12 = _2;                        // scope 2 at ui/augmented-assignments-rpass.rs:169:21: 169:24
        _13 = CheckedAdd((*_11), _12);   // scope 2 at ui/augmented-assignments-rpass.rs:169:13: 169:24
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_11), move _12) -> bb8; // scope 2 at ui/augmented-assignments-rpass.rs:169:13: 169:24
    }

    bb6: {
        unreachable;                     // scope 1 at ui/augmented-assignments-rpass.rs:168:20: 168:37
    }

    bb7: {
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:171:6: 171:6
    }

    bb8: {
        (*_11) = move (_13.0: i32);      // scope 2 at ui/augmented-assignments-rpass.rs:169:13: 169:24
        goto -> bb3;                     // scope 1 at ui/augmented-assignments-rpass.rs:168:9: 170:10
    }
}

fn Int(_1: i32) -> Int {
    let mut _0: Int;                     // return place in scope 0 at ui/augmented-assignments-rpass.rs:13:1: 13:11

    bb0: {
        _0 = Int(move _1);               // scope 0 at ui/augmented-assignments-rpass.rs:13:1: 13:11
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:13:1: 13:11
    }
}

// MIR FOR CTFE
fn Int(_1: i32) -> Int {
    let mut _0: Int;                     // return place in scope 0 at ui/augmented-assignments-rpass.rs:13:1: 13:11

    bb0: {
        _0 = Int(move _1);               // scope 0 at ui/augmented-assignments-rpass.rs:13:1: 13:11
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:13:1: 13:11
    }
}

fn Slice(_1: [i32]) -> Slice {
    let mut _0: Slice;                   // return place in scope 0 at ui/augmented-assignments-rpass.rs:15:1: 15:13

    bb0: {
        _0 = Slice(move _1);             // scope 0 at ui/augmented-assignments-rpass.rs:15:1: 15:13
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:15:1: 15:13
    }
}

// MIR FOR CTFE
fn Slice(_1: [i32]) -> Slice {
    let mut _0: Slice;                   // return place in scope 0 at ui/augmented-assignments-rpass.rs:15:1: 15:13

    bb0: {
        _0 = Slice(move _1);             // scope 0 at ui/augmented-assignments-rpass.rs:15:1: 15:13
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:15:1: 15:13
    }
}

fn View(_1: &mut [i32]) -> View<'_> {
    let mut _0: View<'_>;                // return place in scope 0 at ui/augmented-assignments-rpass.rs:25:1: 25:16

    bb0: {
        _0 = View::<'_>(move _1);        // scope 0 at ui/augmented-assignments-rpass.rs:25:1: 25:16
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:25:1: 25:16
    }
}

// MIR FOR CTFE
fn View(_1: &mut [i32]) -> View<'_> {
    let mut _0: View<'_>;                // return place in scope 0 at ui/augmented-assignments-rpass.rs:25:1: 25:16

    bb0: {
        _0 = View::<'_>(move _1);        // scope 0 at ui/augmented-assignments-rpass.rs:25:1: 25:16
        return;                          // scope 0 at ui/augmented-assignments-rpass.rs:25:1: 25:16
    }
}
