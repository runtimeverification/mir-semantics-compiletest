// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/repeat-expr/infer.rs:3:10: 3:15>::clone(_1: &MaybeCopy<T>) -> MaybeCopy<T> {
    debug self => _1;                    // in scope 0 at ui/repeat-expr/infer.rs:3:10: 3:15
    let mut _0: MaybeCopy<T>;            // return place in scope 0 at ui/repeat-expr/infer.rs:3:10: 3:15
    let mut _2: T;                       // in scope 0 at ui/repeat-expr/infer.rs:4:21: 4:22
    let mut _3: &T;                      // in scope 0 at ui/repeat-expr/infer.rs:4:21: 4:22
    let _4: &T;                          // in scope 0 at ui/repeat-expr/infer.rs:4:21: 4:22

    bb0: {
        _4 = &((*_1).0: T);              // scope 0 at ui/repeat-expr/infer.rs:4:21: 4:22
        _3 = _4;                         // scope 0 at ui/repeat-expr/infer.rs:4:21: 4:22
        _2 = <T as Clone>::clone(move _3) -> bb1; // scope 0 at ui/repeat-expr/infer.rs:4:21: 4:22
                                         // mir::Constant
                                         // + span: ui/repeat-expr/infer.rs:4:21: 4:22
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = MaybeCopy::<T>(move _2);    // scope 0 at ui/repeat-expr/infer.rs:3:10: 3:15
        return;                          // scope 0 at ui/repeat-expr/infer.rs:3:15: 3:15
    }
}

fn <impl at ui/repeat-expr/infer.rs:3:17: 3:24>::default() -> MaybeCopy<T> {
    let mut _0: MaybeCopy<T>;            // return place in scope 0 at ui/repeat-expr/infer.rs:3:17: 3:24
    let mut _1: T;                       // in scope 0 at ui/repeat-expr/infer.rs:4:21: 4:22

    bb0: {
        _1 = <T as Default>::default() -> bb1; // scope 0 at ui/repeat-expr/infer.rs:4:21: 4:22
                                         // mir::Constant
                                         // + span: ui/repeat-expr/infer.rs:4:21: 4:22
                                         // + literal: Const { ty: fn() -> T {<T as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = MaybeCopy::<T>(move _1);    // scope 0 at ui/repeat-expr/infer.rs:3:17: 3:24
        return;                          // scope 0 at ui/repeat-expr/infer.rs:3:24: 3:24
    }
}

fn is_copy(_1: T) -> () {
    debug x => _1;                       // in scope 0 at ui/repeat-expr/infer.rs:8:21: 8:22
    let mut _0: ();                      // return place in scope 0 at ui/repeat-expr/infer.rs:8:27: 8:27
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/repeat-expr/infer.rs:9:14: 9:18
    let mut _5: &[&str; 2];              // in scope 0 at ui/repeat-expr/infer.rs:9:14: 9:18
    let _6: &[&str; 2];                  // in scope 0 at ui/repeat-expr/infer.rs:9:14: 9:18
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/repeat-expr/infer.rs:9:20: 9:46
    let mut _12: &&str;                  // in scope 0 at ui/repeat-expr/infer.rs:9:20: 9:46
    let _13: &&str;                      // in scope 0 at ui/repeat-expr/infer.rs:9:20: 9:46
    let _14: &str;                       // in scope 0 at ui/repeat-expr/infer.rs:9:20: 9:46
    let mut _15: &[&str; 2];             // in scope 0 at ui/repeat-expr/infer.rs:9:14: 9:18

    bb0: {
        _15 = const _;                   // scope 0 at ui/repeat-expr/infer.rs:9:14: 9:18
                                         // mir::Constant
                                         // + span: ui/repeat-expr/infer.rs:9:14: 9:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(is_copy, [T], Some(promoted[0])) }
        _6 = _15;                        // scope 0 at ui/repeat-expr/infer.rs:9:14: 9:18
        _5 = _6;                         // scope 0 at ui/repeat-expr/infer.rs:9:14: 9:18
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/repeat-expr/infer.rs:9:14: 9:18
        _14 = std::any::type_name::<T>() -> bb1; // scope 0 at ui/repeat-expr/infer.rs:9:20: 9:46
                                         // mir::Constant
                                         // + span: ui/repeat-expr/infer.rs:9:20: 9:44
                                         // + literal: Const { ty: fn() -> &'static str {std::any::type_name::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _13 = &_14;                      // scope 0 at ui/repeat-expr/infer.rs:9:20: 9:46
        _12 = _13;                       // scope 0 at ui/repeat-expr/infer.rs:9:20: 9:46
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _12) -> bb2; // scope 0 at ui/repeat-expr/infer.rs:9:20: 9:46
                                         // mir::Constant
                                         // + span: ui/repeat-expr/infer.rs:9:20: 9:46
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = _print(move _3) -> bb4;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/repeat-expr/infer.rs:10:2: 10:2
    }
}

promoted[0] in is_copy: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/repeat-expr/infer.rs:9:14: 9:18
    let mut _1: [&str; 2];               // in scope 0 at ui/repeat-expr/infer.rs:9:14: 9:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/repeat-expr/infer.rs:9:14: 9:18
                                         // mir::Constant
                                         // + span: ui/repeat-expr/infer.rs:9:14: 9:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/repeat-expr/infer.rs:9:14: 9:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/repeat-expr/infer.rs:9:14: 9:18
        return;                          // scope 0 at ui/repeat-expr/infer.rs:9:14: 9:18
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/repeat-expr/infer.rs:12:11: 12:11
    let _1: ();                          // in scope 0 at ui/repeat-expr/infer.rs:13:5: 13:34
    let mut _2: MaybeCopy<u8>;           // in scope 0 at ui/repeat-expr/infer.rs:13:13: 13:33
    let mut _3: MaybeCopy<u8>;           // in scope 0 at ui/repeat-expr/infer.rs:14:6: 14:26

    bb0: {
        _2 = <MaybeCopy<u8> as Default>::default() -> bb1; // scope 0 at ui/repeat-expr/infer.rs:13:13: 13:33
                                         // mir::Constant
                                         // + span: ui/repeat-expr/infer.rs:13:13: 13:31
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> MaybeCopy<u8> {<MaybeCopy<u8> as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = is_copy::<MaybeCopy<u8>>(move _2) -> bb2; // scope 0 at ui/repeat-expr/infer.rs:13:5: 13:34
                                         // mir::Constant
                                         // + span: ui/repeat-expr/infer.rs:13:5: 13:12
                                         // + literal: Const { ty: fn(MaybeCopy<u8>) {is_copy::<MaybeCopy<u8>>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <MaybeCopy<u8> as Default>::default() -> bb3; // scope 0 at ui/repeat-expr/infer.rs:14:6: 14:26
                                         // mir::Constant
                                         // + span: ui/repeat-expr/infer.rs:14:6: 14:24
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> MaybeCopy<u8> {<MaybeCopy<u8> as Default>::default}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/repeat-expr/infer.rs:16:2: 16:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/repeat-expr/infer.rs:14:28: 14:30

    bb0: {
        _0 = const 13_usize;             // scope 0 at ui/repeat-expr/infer.rs:14:28: 14:30
        return;                          // scope 0 at ui/repeat-expr/infer.rs:14:28: 14:30
    }
}

fn MaybeCopy(_1: T) -> MaybeCopy<T> {
    let mut _0: MaybeCopy<T>;            // return place in scope 0 at ui/repeat-expr/infer.rs:4:1: 4:20

    bb0: {
        _0 = MaybeCopy::<T>(move _1);    // scope 0 at ui/repeat-expr/infer.rs:4:1: 4:20
        return;                          // scope 0 at ui/repeat-expr/infer.rs:4:1: 4:20
    }
}

// MIR FOR CTFE
fn MaybeCopy(_1: T) -> MaybeCopy<T> {
    let mut _0: MaybeCopy<T>;            // return place in scope 0 at ui/repeat-expr/infer.rs:4:1: 4:20

    bb0: {
        _0 = MaybeCopy::<T>(move _1);    // scope 0 at ui/repeat-expr/infer.rs:4:1: 4:20
        return;                          // scope 0 at ui/repeat-expr/infer.rs:4:1: 4:20
    }
}
