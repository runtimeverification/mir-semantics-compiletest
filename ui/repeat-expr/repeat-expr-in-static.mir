// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static FOO: [isize; 4] = {
    let mut _0: [isize; 4];              // return place in scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:3:13: 3:23

    bb0: {
        _0 = [const 32_isize; 4];        // scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:3:26: 3:33
        return;                          // scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:3:1: 3:34
    }
}

FOO::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:3:21: 3:22

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:3:21: 3:22
        return;                          // scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:3:21: 3:22
    }
}

FOO::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:3:31: 3:32

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:3:31: 3:32
        return;                          // scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:3:31: 3:32
    }
}

static BAR: [isize; 4] = {
    let mut _0: [isize; 4];              // return place in scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:4:13: 4:23

    bb0: {
        _0 = [const 32_isize, const 32_isize, const 32_isize, const 32_isize]; // scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:4:26: 4:42
        return;                          // scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:4:1: 4:43
    }
}

BAR::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:4:21: 4:22

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:4:21: 4:22
        return;                          // scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:4:21: 4:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:6:15: 6:15
    let mut _1: (&[isize; 4], &[isize; 4]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &[isize; 4];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: &[isize; 4];                 // in scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:7:16: 7:19
    let mut _4: &[isize; 4];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &[isize; 4];                 // in scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:7:21: 7:24
    let _6: &[isize; 4];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &[isize; 4];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &[isize; 4];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &[isize; 4];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &[isize; 4];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &[isize; 4];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &[isize; 4];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &[isize; 4];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = const {alloc1: &[isize; 4]}; // scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:7:16: 7:19
                                         // mir::Constant
                                         // + span: ui/repeat-expr/repeat-expr-in-static.rs:7:16: 7:19
                                         // + literal: Const { ty: &[isize; 4], val: Value(Scalar(alloc1)) }
        _2 = _3;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _5 = const {alloc2: &[isize; 4]}; // scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:7:21: 7:24
                                         // mir::Constant
                                         // + span: ui/repeat-expr/repeat-expr-in-static.rs:7:21: 7:24
                                         // + literal: Const { ty: &[isize; 4], val: Value(Scalar(alloc2)) }
        _4 = _5;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_1.0: &[isize; 4]);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_1.1: &[isize; 4]);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <[isize; 4] as PartialEq>::eq(move _10, move _11) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [isize; 4], &'b [isize; 4]) -> bool {<[isize; 4] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<[isize; 4], [isize; 4]>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [isize; 4], &'b [isize; 4], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[isize; 4], [isize; 4]>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/repeat-expr/repeat-expr-in-static.rs:8:2: 8:2
    }
}

alloc2 (static: BAR, size: 32, align: 8) {
    0x00 │ 20 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 │  ....... .......
    0x10 │ 20 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 │  ....... .......
}

alloc1 (static: FOO, size: 32, align: 8) {
    0x00 │ 20 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 │  ....... .......
    0x10 │ 20 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 │  ....... .......
}
