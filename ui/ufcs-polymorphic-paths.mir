// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Rand::rand(_1: &mut R) -> Self {
    debug _rng => _1;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:14:21: 14:25
    let mut _0: Self;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:14:38: 14:42

    bb0: {
        _0 = <Self as Default>::default() -> bb1; // scope 0 at ui/ufcs-polymorphic-paths.rs:14:45: 14:63
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:14:45: 14:61
                                         // + literal: Const { ty: fn() -> Self {<Self as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:14:65: 14:65
    }
}

fn <impl at ui/ufcs-polymorphic-paths.rs:22:1: 22:37>::into_cow(_1: String) -> Cow<'_, str> {
    debug self => _1;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:23:17: 23:21
    let mut _0: std::borrow::Cow<'_, str>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:23:26: 23:38
    let mut _2: std::string::String;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:24:20: 24:24

    bb0: {
        _2 = move _1;                    // scope 0 at ui/ufcs-polymorphic-paths.rs:24:20: 24:24
        _0 = Cow::<'_, str>::Owned(move _2); // scope 0 at ui/ufcs-polymorphic-paths.rs:24:9: 24:25
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:25:6: 25:6
    }
}

fn <impl at ui/ufcs-polymorphic-paths.rs:28:10: 28:19>::eq(_1: &Newt<T>, _2: &Newt<T>) -> bool {
    debug self => _1;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:28:10: 28:19
    debug other => _2;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:28:10: 28:19
    let mut _0: bool;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:28:10: 28:19
    let mut _3: &T;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:29:16: 29:17
    let mut _4: &T;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:29:16: 29:17

    bb0: {
        _3 = &((*_1).0: T);              // scope 0 at ui/ufcs-polymorphic-paths.rs:29:16: 29:17
        _4 = &((*_2).0: T);              // scope 0 at ui/ufcs-polymorphic-paths.rs:29:16: 29:17
        _0 = <T as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/ufcs-polymorphic-paths.rs:29:16: 29:17
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:29:16: 29:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:28:19: 28:19
    }
}

fn <impl at ui/ufcs-polymorphic-paths.rs:28:21: 28:23>::assert_receiver_is_total_eq(_1: &Newt<T>) -> () {
    debug self => _1;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:28:21: 28:23
    let mut _0: ();                      // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:28:21: 28:23
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:28:23: 28:23
    }
}

fn id(_1: T) -> T {
    debug x => _1;                       // in scope 0 at ui/ufcs-polymorphic-paths.rs:31:10: 31:11
    let mut _0: T;                       // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:31:19: 31:20

    bb0: {
        _0 = move _1;                    // scope 0 at ui/ufcs-polymorphic-paths.rs:31:23: 31:24
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:31:26: 31:26
    }
}

fn eq(_1: T, _2: T) -> bool {
    debug a => _1;                       // in scope 0 at ui/ufcs-polymorphic-paths.rs:32:14: 32:15
    debug b => _2;                       // in scope 0 at ui/ufcs-polymorphic-paths.rs:32:20: 32:21
    let mut _0: bool;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:32:29: 32:33
    let mut _3: &T;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:32:36: 32:37
    let mut _4: &T;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:32:41: 32:42

    bb0: {
        _3 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:32:36: 32:37
        _4 = &_2;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:32:41: 32:42
        _0 = <T as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind: bb4]; // scope 0 at ui/ufcs-polymorphic-paths.rs:32:36: 32:42
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:32:36: 32:42
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind: bb5]; // scope 0 at ui/ufcs-polymorphic-paths.rs:32:43: 32:44
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:32:43: 32:44
    }

    bb3: {
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:32:44: 32:44
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:32:43: 32:44
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:32:43: 32:44
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:32:1: 32:44
    }
}

fn u8_as_i8(_1: u8) -> i8 {
    debug x => _1;                       // in scope 0 at ui/ufcs-polymorphic-paths.rs:33:13: 33:14
    let mut _0: i8;                      // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:33:23: 33:25
    let mut _2: u8;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:33:28: 33:29

    bb0: {
        _2 = _1;                         // scope 0 at ui/ufcs-polymorphic-paths.rs:33:28: 33:29
        _0 = move _2 as i8 (IntToInt);   // scope 0 at ui/ufcs-polymorphic-paths.rs:33:28: 33:35
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:33:37: 33:37
    }
}

fn odd(_1: usize) -> bool {
    debug x => _1;                       // in scope 0 at ui/ufcs-polymorphic-paths.rs:34:8: 34:9
    let mut _0: bool;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:34:21: 34:25
    let mut _2: usize;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:34:28: 34:33
    let mut _3: usize;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:34:28: 34:29

    bb0: {
        _3 = _1;                         // scope 0 at ui/ufcs-polymorphic-paths.rs:34:28: 34:29
        _2 = Rem(move _3, const 2_usize); // scope 0 at ui/ufcs-polymorphic-paths.rs:34:28: 34:33
        _0 = Eq(move _2, const 1_usize); // scope 0 at ui/ufcs-polymorphic-paths.rs:34:28: 34:38
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:34:40: 34:40
    }
}

fn dummy_rng() -> XorShiftRng {
    let mut _0: XorShiftRng;             // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:35:19: 35:27

    bb0: {
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:35:43: 35:43
    }
}

fn Size::size() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:38:18: 38:23

    bb0: {
        _0 = std::mem::size_of::<Self>() -> bb1; // scope 0 at ui/ufcs-polymorphic-paths.rs:38:26: 38:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:38:26: 38:51
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Self>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:38:55: 38:55
    }
}

fn <impl at ui/ufcs-polymorphic-paths.rs:42:10: 42:19>::eq(_1: &BitVec, _2: &BitVec) -> bool {
    debug self => _1;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:42:10: 42:19
    debug other => _2;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:42:10: 42:19
    let mut _0: bool;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:42:10: 42:19

    bb0: {
        _0 = const true;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:42:10: 42:19
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:42:19: 42:19
    }
}

fn <impl at ui/ufcs-polymorphic-paths.rs:42:21: 42:23>::assert_receiver_is_total_eq(_1: &BitVec) -> () {
    debug self => _1;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:42:21: 42:23
    let mut _0: ();                      // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:42:21: 42:23

    bb0: {
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:42:23: 42:23
    }
}

fn <impl at ui/ufcs-polymorphic-paths.rs:45:1: 45:12>::from_fn(_1: usize, _2: F) -> BitVec {
    let mut _0: BitVec;                  // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:46:38: 46:44

    bb0: {
        drop(_2) -> bb1;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:48:5: 48:6
    }

    bb1: {
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:48:6: 48:6
    }
}

fn <impl at ui/ufcs-polymorphic-paths.rs:51:10: 51:19>::eq(_1: &Foo<T>, _2: &Foo<T>) -> bool {
    debug self => _1;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:51:10: 51:19
    debug other => _2;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:51:10: 51:19
    let mut _0: bool;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:51:10: 51:19
    let mut _3: &T;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:52:15: 52:16
    let mut _4: &T;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:52:15: 52:16

    bb0: {
        _3 = &((*_1).0: T);              // scope 0 at ui/ufcs-polymorphic-paths.rs:52:15: 52:16
        _4 = &((*_2).0: T);              // scope 0 at ui/ufcs-polymorphic-paths.rs:52:15: 52:16
        _0 = <T as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/ufcs-polymorphic-paths.rs:52:15: 52:16
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:52:15: 52:16
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:51:19: 51:19
    }
}

fn <impl at ui/ufcs-polymorphic-paths.rs:51:21: 51:23>::assert_receiver_is_total_eq(_1: &Foo<T>) -> () {
    debug self => _1;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:51:21: 51:23
    let mut _0: ();                      // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:51:21: 51:23
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:51:23: 51:23
    }
}

fn <impl at ui/ufcs-polymorphic-paths.rs:54:1: 54:15>::map_in_place(_1: Foo<T>, _2: F) -> Foo<U> {
    debug self => _1;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:55:27: 55:31
    debug f => _2;                       // in scope 0 at ui/ufcs-polymorphic-paths.rs:55:33: 55:38
    let mut _0: Foo<U>;                  // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:55:46: 55:52
    let mut _3: U;                       // in scope 0 at ui/ufcs-polymorphic-paths.rs:56:13: 56:22
    let mut _4: &mut F;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:56:13: 56:14
    let mut _5: (T,);                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:56:13: 56:22
    let mut _6: T;                       // in scope 0 at ui/ufcs-polymorphic-paths.rs:56:15: 56:21

    bb0: {
        _4 = &mut _2;                    // scope 0 at ui/ufcs-polymorphic-paths.rs:56:13: 56:14
        _6 = move (_1.0: T);             // scope 0 at ui/ufcs-polymorphic-paths.rs:56:15: 56:21
        _5 = (move _6,);                 // scope 0 at ui/ufcs-polymorphic-paths.rs:56:13: 56:22
        _3 = <F as FnMut<(T,)>>::call_mut(move _4, move _5) -> [return: bb1, unwind: bb3]; // scope 0 at ui/ufcs-polymorphic-paths.rs:56:13: 56:22
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:56:13: 56:14
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (T,)) -> <F as FnOnce<(T,)>>::Output {<F as FnMut<(T,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Foo::<U>(move _3);          // scope 0 at ui/ufcs-polymorphic-paths.rs:56:9: 56:23
        drop(_2) -> bb2;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:57:5: 57:6
    }

    bb2: {
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:57:6: 57:6
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:57:5: 57:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:55:5: 57:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:62:68: 62:68
    let mut _1: bool;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _2: bool;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _3: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _4: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _5: !;                       // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _6: bool;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _7: bool;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _8: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _9: fn(i32) -> i32;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _10: &fn(i32) -> i32;        // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _11: i32;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _12: !;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _13: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _14: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _15: i32;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _16: i32;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _17: fn(i32) -> i32;         // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _18: &fn(i32) -> i32;        // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _19: !;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _20: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _21: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _22: i32;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _23: i32;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _24: !;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _25: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _26: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _27: i32;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _28: fn(i32) -> i32;         // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _29: &fn(i32) -> i32;        // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _30: i32;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _31: !;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _32: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _33: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _34: i32;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _35: i32;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _36: fn(i32) -> i32;         // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _37: &fn(i32) -> i32;        // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _38: !;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _39: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _40: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _41: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _42: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _43: !;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _44: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _45: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _46: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _47: fn(i32) -> std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _48: &fn(i32) -> std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _49: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _50: !;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _51: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _52: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _53: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _54: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _55: fn(i32) -> std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _56: &fn(i32) -> std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _57: !;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _58: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _59: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _60: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _61: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _62: !;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _63: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _64: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _65: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _66: fn(i32) -> std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _67: &fn(i32) -> std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _68: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _69: !;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _70: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _71: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _72: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _73: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _74: fn(i32) -> std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _75: &fn(i32) -> std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _76: !;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _77: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _78: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _79: Newt<i32>;              // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _80: Newt<i32>;              // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _81: !;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _82: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _83: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _84: Newt<i32>;              // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _85: fn(i32) -> Newt<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _86: &fn(i32) -> Newt<i32>;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _87: Newt<i32>;              // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _88: !;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _89: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _90: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _91: Newt<i32>;              // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _92: Newt<i32>;              // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _93: fn(i32) -> Newt<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _94: &fn(i32) -> Newt<i32>;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _95: !;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _96: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _97: bool;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _98: Newt<i32>;              // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _99: Newt<i32>;              // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _100: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _101: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _102: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _103: Newt<i32>;             // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _104: fn(i32) -> Newt<i32>;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _105: &fn(i32) -> Newt<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _106: Newt<i32>;             // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _107: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _108: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _109: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _110: Newt<i32>;             // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _111: Newt<i32>;             // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _112: fn(i32) -> Newt<i32>;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _113: &fn(i32) -> Newt<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _114: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _115: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _116: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _117: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _118: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _119: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _120: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _121: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _122: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _123: fn() -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _124: &fn() -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _125: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _126: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _127: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _128: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _129: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _130: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _131: fn() -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _132: &fn() -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _133: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _134: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _135: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _136: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _137: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _138: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _139: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _140: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _141: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _142: fn() -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _143: &fn() -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _144: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _145: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _146: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _147: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _148: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _149: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _150: fn() -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _151: &fn() -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _152: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _153: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _154: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _155: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _156: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _157: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _158: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _159: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _160: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _161: fn() -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _162: &fn() -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _163: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _164: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _165: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _166: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _167: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _168: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _169: fn() -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _170: &fn() -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _171: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _172: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _173: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _174: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _175: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _176: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _177: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _178: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _179: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _180: fn(usize) -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _181: &fn(usize) -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _182: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _183: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _184: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _185: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _186: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _187: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _188: fn(usize) -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _189: &fn(usize) -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _190: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _191: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _192: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _193: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _194: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _195: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _196: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _197: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _198: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _199: fn(usize) -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _200: &fn(usize) -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _201: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _202: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _203: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _204: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _205: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _206: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _207: fn(usize) -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _208: &fn(usize) -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _209: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _210: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _211: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _212: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _213: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _214: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _215: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _216: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _217: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _218: fn(usize) -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _219: &fn(usize) -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _220: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _221: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _222: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _223: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _224: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _225: std::vec::Vec<()>;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _226: fn(usize) -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _227: &fn(usize) -> std::vec::Vec<()>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _228: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _229: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _230: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _231: BitVec;                // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _232: fn(usize) -> bool;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:91:66: 91:69
    let mut _233: BitVec;                // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _234: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _235: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _236: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _237: BitVec;                // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _238: fn(usize, fn(usize) -> bool) -> BitVec; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _239: &fn(usize, fn(usize) -> bool) -> BitVec; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _240: fn(usize) -> bool;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:91:66: 91:69
    let mut _241: BitVec;                // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _242: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _243: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _244: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _245: BitVec;                // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _246: fn(usize) -> bool;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:91:66: 91:69
    let mut _247: BitVec;                // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _248: fn(usize, fn(usize) -> bool) -> BitVec; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _249: &fn(usize, fn(usize) -> bool) -> BitVec; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _250: fn(usize) -> bool;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:91:66: 91:69
    let mut _251: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _252: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _253: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _254: BitVec;                // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _255: fn(usize) -> bool;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:92:87: 92:90
    let mut _256: BitVec;                // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _257: fn(usize) -> bool;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:92:87: 92:90
    let mut _258: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _259: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _260: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _261: BitVec;                // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _262: fn(usize, fn(usize) -> bool) -> BitVec; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _263: &fn(usize, fn(usize) -> bool) -> BitVec; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _264: fn(usize) -> bool;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:92:87: 92:90
    let mut _265: BitVec;                // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _266: fn(usize) -> bool;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:92:87: 92:90
    let mut _267: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _268: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _269: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _270: BitVec;                // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _271: fn(usize) -> bool;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:92:87: 92:90
    let mut _272: BitVec;                // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _273: fn(usize, fn(usize) -> bool) -> BitVec; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _274: &fn(usize, fn(usize) -> bool) -> BitVec; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _275: fn(usize) -> bool;     // in scope 0 at ui/ufcs-polymorphic-paths.rs:92:87: 92:90
    let mut _276: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _277: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _278: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _279: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _280: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:95:63: 95:72
    let mut _281: fn(u8) -> i8;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:95:74: 95:82
    let mut _282: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _283: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:95:63: 95:72
    let mut _284: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _285: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _286: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _287: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _288: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _289: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _290: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:95:63: 95:72
    let mut _291: fn(u8) -> i8;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:95:74: 95:82
    let mut _292: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _293: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:95:63: 95:72
    let mut _294: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _295: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _296: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _297: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _298: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:95:63: 95:72
    let mut _299: fn(u8) -> i8;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:95:74: 95:82
    let mut _300: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _301: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _302: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _303: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:95:63: 95:72
    let mut _304: fn(u8) -> i8;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:95:74: 95:82
    let mut _305: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _306: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _307: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _308: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _309: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:97:10: 97:19
    let mut _310: fn(u8) -> i8;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:97:21: 97:29
    let mut _311: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _312: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:97:10: 97:19
    let mut _313: fn(u8) -> i8;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:97:21: 97:29
    let mut _314: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _315: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _316: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _317: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _318: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _319: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _320: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:97:10: 97:19
    let mut _321: fn(u8) -> i8;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:97:21: 97:29
    let mut _322: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _323: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:97:10: 97:19
    let mut _324: fn(u8) -> i8;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:97:21: 97:29
    let mut _325: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _326: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _327: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _328: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _329: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:97:10: 97:19
    let mut _330: fn(u8) -> i8;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:97:21: 97:29
    let mut _331: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _332: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _333: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _334: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:97:10: 97:19
    let mut _335: fn(u8) -> i8;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:97:21: 97:29
    let mut _336: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _337: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _338: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _339: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _340: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:99:12: 99:21
    let mut _341: fn(u8) -> i8;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:99:23: 99:31
    let mut _342: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _343: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:99:12: 99:21
    let mut _344: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _345: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _346: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _347: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _348: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _349: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _350: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:99:12: 99:21
    let mut _351: fn(u8) -> i8;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:99:23: 99:31
    let mut _352: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _353: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:99:12: 99:21
    let mut _354: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _355: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _356: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _357: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _358: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:99:12: 99:21
    let mut _359: fn(u8) -> i8;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:99:23: 99:31
    let mut _360: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _361: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _362: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _363: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:99:12: 99:21
    let mut _364: fn(u8) -> i8;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:99:23: 99:31
    let mut _365: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _366: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _367: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _368: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _369: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:101:12: 101:21
    let mut _370: fn(u8) -> i8;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:101:23: 101:31
    let mut _371: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _372: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:101:12: 101:21
    let mut _373: fn(u8) -> i8;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:101:23: 101:31
    let mut _374: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _375: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _376: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _377: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _378: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _379: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _380: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:101:12: 101:21
    let mut _381: fn(u8) -> i8;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:101:23: 101:31
    let mut _382: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _383: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:101:12: 101:21
    let mut _384: fn(u8) -> i8;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:101:23: 101:31
    let mut _385: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _386: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _387: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _388: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _389: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:101:12: 101:21
    let mut _390: fn(u8) -> i8;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:101:23: 101:31
    let mut _391: Foo<i8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _392: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _393: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _394: Foo<u8>;               // in scope 0 at ui/ufcs-polymorphic-paths.rs:101:12: 101:21
    let mut _395: fn(u8) -> i8;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:101:23: 101:31
    let mut _396: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _397: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _398: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _399: usize;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _400: usize;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _401: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _402: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _403: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _404: usize;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _405: fn() -> usize;         // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _406: &fn() -> usize;        // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _407: usize;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _408: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _409: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _410: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _411: usize;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _412: usize;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _413: fn() -> usize;         // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _414: &fn() -> usize;        // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _415: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _416: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _417: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _418: usize;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _419: usize;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _420: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _421: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _422: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _423: usize;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _424: fn() -> usize;         // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _425: &fn() -> usize;        // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _426: usize;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _427: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _428: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _429: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _430: usize;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _431: usize;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _432: fn() -> usize;         // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _433: &fn() -> usize;        // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _434: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _435: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _436: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _437: usize;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _438: usize;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _439: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _440: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _441: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _442: usize;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _443: fn() -> usize;         // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _444: &fn() -> usize;        // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _445: usize;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _446: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _447: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _448: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _449: usize;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _450: usize;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _451: fn() -> usize;         // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _452: &fn() -> usize;        // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _453: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _454: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _455: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _456: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _457: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _458: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _459: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _460: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _461: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _462: fn() -> i32;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _463: &fn() -> i32;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _464: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _465: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _466: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _467: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _468: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _469: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _470: fn() -> i32;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _471: &fn() -> i32;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _472: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _473: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _474: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _475: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _476: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _477: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _478: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _479: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _480: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _481: fn() -> i32;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _482: &fn() -> i32;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _483: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _484: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _485: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _486: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _487: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _488: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _489: fn() -> i32;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _490: &fn() -> i32;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _491: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _492: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _493: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _494: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _495: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _496: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _497: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _498: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _499: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _500: fn() -> i32;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _501: &fn() -> i32;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _502: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _503: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _504: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _505: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _506: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _507: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _508: fn() -> i32;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _509: &fn() -> i32;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _510: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _511: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _512: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _513: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _514: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _515: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _516: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _517: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _518: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _519: fn() -> i32;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _520: &fn() -> i32;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _521: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _522: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _523: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _524: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _525: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _526: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _527: fn() -> i32;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _528: &fn() -> i32;          // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _529: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _530: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _531: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _532: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _533: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
    let mut _534: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
    let mut _535: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:113:49: 113:60
    let mut _536: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _537: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
    let mut _538: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
    let mut _539: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:113:49: 113:60
    let mut _540: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _541: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _542: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _543: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _544: for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _545: &for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _546: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
    let mut _547: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
    let mut _548: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:113:49: 113:60
    let mut _549: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _550: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
    let mut _551: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
    let mut _552: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:113:49: 113:60
    let mut _553: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _554: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _555: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _556: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _557: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
    let mut _558: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
    let mut _559: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:113:49: 113:60
    let mut _560: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _561: for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _562: &for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _563: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
    let mut _564: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
    let mut _565: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:113:49: 113:60
    let mut _566: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _567: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _568: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _569: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _570: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
    let mut _571: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
    let mut _572: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:114:48: 114:59
    let mut _573: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _574: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
    let mut _575: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
    let mut _576: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:114:48: 114:59
    let mut _577: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _578: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _579: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _580: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _581: for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _582: &for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _583: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
    let mut _584: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
    let mut _585: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:114:48: 114:59
    let mut _586: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _587: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
    let mut _588: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
    let mut _589: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:114:48: 114:59
    let mut _590: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _591: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _592: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _593: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _594: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
    let mut _595: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
    let mut _596: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:114:48: 114:59
    let mut _597: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _598: for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _599: &for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _600: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
    let mut _601: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
    let mut _602: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:114:48: 114:59
    let mut _603: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _604: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _605: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _606: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _607: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
    let mut _608: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
    let mut _609: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:115:50: 115:61
    let mut _610: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _611: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
    let mut _612: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
    let mut _613: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:115:50: 115:61
    let mut _614: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _615: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _616: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _617: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _618: for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _619: &for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _620: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
    let mut _621: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
    let mut _622: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:115:50: 115:61
    let mut _623: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _624: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
    let mut _625: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
    let mut _626: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:115:50: 115:61
    let mut _627: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _628: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _629: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _630: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _631: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
    let mut _632: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
    let mut _633: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:115:50: 115:61
    let mut _634: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _635: for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _636: &for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _637: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
    let mut _638: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
    let mut _639: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:115:50: 115:61
    let mut _640: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _641: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _642: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _643: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _644: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
    let mut _645: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
    let mut _646: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:116:58: 116:69
    let mut _647: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _648: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
    let mut _649: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
    let mut _650: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:116:58: 116:69
    let mut _651: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _652: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _653: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _654: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _655: for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _656: &for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _657: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
    let mut _658: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
    let mut _659: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:116:58: 116:69
    let mut _660: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _661: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
    let mut _662: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
    let mut _663: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:116:58: 116:69
    let mut _664: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _665: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _666: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _667: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _668: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
    let mut _669: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
    let mut _670: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:116:58: 116:69
    let mut _671: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _672: for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _673: &for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _674: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
    let mut _675: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
    let mut _676: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:116:58: 116:69
    let mut _677: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _678: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _679: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _680: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _681: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
    let mut _682: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
    let mut _683: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:117:61: 117:72
    let mut _684: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _685: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
    let mut _686: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
    let mut _687: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:117:61: 117:72
    let mut _688: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _689: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _690: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _691: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _692: for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _693: &for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _694: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
    let mut _695: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
    let mut _696: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:117:61: 117:72
    let mut _697: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _698: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
    let mut _699: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
    let mut _700: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:117:61: 117:72
    let mut _701: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _702: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _703: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _704: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _705: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
    let mut _706: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
    let mut _707: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:117:61: 117:72
    let mut _708: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _709: for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _710: &for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _711: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
    let mut _712: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
    let mut _713: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:117:61: 117:72
    let mut _714: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _715: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _716: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _717: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _718: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
    let mut _719: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
    let mut _720: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:118:60: 118:71
    let mut _721: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _722: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
    let mut _723: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
    let mut _724: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:118:60: 118:71
    let mut _725: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _726: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _727: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _728: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _729: for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _730: &for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _731: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
    let mut _732: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
    let mut _733: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:118:60: 118:71
    let mut _734: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _735: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
    let mut _736: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
    let mut _737: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:118:60: 118:71
    let mut _738: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _739: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _740: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _741: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _742: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
    let mut _743: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
    let mut _744: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:118:60: 118:71
    let mut _745: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _746: for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _747: &for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _748: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
    let mut _749: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
    let mut _750: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:118:60: 118:71
    let mut _751: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _752: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _753: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _754: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _755: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
    let mut _756: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
    let mut _757: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:119:62: 119:73
    let mut _758: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _759: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
    let mut _760: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
    let mut _761: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:119:62: 119:73
    let mut _762: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _763: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _764: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _765: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _766: for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _767: &for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _768: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
    let mut _769: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
    let mut _770: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:119:62: 119:73
    let mut _771: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _772: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
    let mut _773: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
    let mut _774: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:119:62: 119:73
    let mut _775: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _776: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _777: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _778: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _779: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
    let mut _780: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
    let mut _781: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:119:62: 119:73
    let mut _782: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _783: for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _784: &for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _785: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
    let mut _786: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
    let mut _787: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:119:62: 119:73
    let mut _788: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _789: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _790: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _791: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _792: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
    let mut _793: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
    let mut _794: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:120:70: 120:81
    let mut _795: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _796: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
    let mut _797: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
    let mut _798: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:120:70: 120:81
    let mut _799: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _800: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _801: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _802: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _803: for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _804: &for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _805: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
    let mut _806: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
    let mut _807: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:120:70: 120:81
    let mut _808: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _809: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
    let mut _810: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
    let mut _811: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:120:70: 120:81
    let mut _812: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _813: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _814: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _815: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _816: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
    let mut _817: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
    let mut _818: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:120:70: 120:81
    let mut _819: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _820: for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _821: &for<'a> fn(&'a mut XorShiftRng) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _822: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
    let mut _823: &mut XorShiftRng;      // in scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
    let mut _824: XorShiftRng;           // in scope 0 at ui/ufcs-polymorphic-paths.rs:120:70: 120:81
    let mut _825: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _826: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _827: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _828: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _829: &i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    let _830: &i32;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    let mut _831: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _832: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _833: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _834: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _835: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _836: for<'a> fn(&'a i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _837: &for<'a> fn(&'a i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _838: &i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    let _839: &i32;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    let mut _840: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _841: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _842: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _843: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _844: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _845: &i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    let _846: &i32;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    let mut _847: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _848: for<'a> fn(&'a i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _849: &for<'a> fn(&'a i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _850: &i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    let _851: &i32;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    let mut _852: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _853: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _854: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _855: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _856: &i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    let _857: &i32;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    let mut _858: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _859: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _860: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _861: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _862: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _863: for<'a> fn(&'a i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _864: &for<'a> fn(&'a i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _865: &i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    let _866: &i32;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    let mut _867: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _868: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _869: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _870: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _871: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _872: &i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    let _873: &i32;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    let mut _874: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _875: for<'a> fn(&'a i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _876: &for<'a> fn(&'a i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _877: &i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    let _878: &i32;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    let mut _879: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _880: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _881: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _882: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _883: &i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    let _884: &i32;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    let mut _885: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _886: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _887: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _888: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _889: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _890: for<'a> fn(&'a i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _891: &for<'a> fn(&'a i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _892: &i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    let _893: &i32;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    let mut _894: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _895: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _896: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _897: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _898: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _899: &i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    let _900: &i32;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    let mut _901: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _902: for<'a> fn(&'a i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _903: &for<'a> fn(&'a i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _904: &i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    let _905: &i32;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    let mut _906: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _907: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _908: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _909: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _910: &i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    let _911: &i32;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    let mut _912: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _913: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _914: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _915: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _916: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _917: for<'a> fn(&'a i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _918: &for<'a> fn(&'a i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _919: &i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    let _920: &i32;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    let mut _921: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _922: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _923: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _924: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _925: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _926: &i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    let _927: &i32;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    let mut _928: i32;                   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _929: for<'a> fn(&'a i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _930: &for<'a> fn(&'a i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _931: &i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    let _932: &i32;                      // in scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    let mut _933: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _934: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _935: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _936: std::vec::Vec<i32>;    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _937: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:83
    let mut _938: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:71
    let mut _939: std::vec::Vec<i32>;    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _940: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:83
    let mut _941: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:71
    let mut _942: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _943: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _944: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _945: std::vec::Vec<i32>;    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _946: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _947: &fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _948: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:83
    let mut _949: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:71
    let mut _950: std::vec::Vec<i32>;    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _951: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:83
    let mut _952: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:71
    let mut _953: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _954: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _955: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _956: std::vec::Vec<i32>;    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _957: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:83
    let mut _958: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:71
    let mut _959: std::vec::Vec<i32>;    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _960: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _961: &fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _962: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:83
    let mut _963: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:71
    let mut _964: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _965: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _966: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _967: std::vec::Vec<i32>;    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _968: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:74
    let mut _969: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:62
    let mut _970: std::vec::Vec<i32>;    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _971: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:74
    let mut _972: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:62
    let mut _973: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _974: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _975: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _976: std::vec::Vec<i32>;    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _977: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _978: &fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _979: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:74
    let mut _980: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:62
    let mut _981: std::vec::Vec<i32>;    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _982: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:74
    let mut _983: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:62
    let mut _984: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _985: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _986: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _987: std::vec::Vec<i32>;    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _988: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:74
    let mut _989: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:62
    let mut _990: std::vec::Vec<i32>;    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _991: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _992: &fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _993: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:74
    let mut _994: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:62
    let mut _995: !;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _996: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _997: bool;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _998: std::vec::Vec<i32>;    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _999: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:79
    let mut _1000: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:67
    let mut _1001: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _1002: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:79
    let mut _1003: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:67
    let mut _1004: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1005: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1006: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _1007: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _1008: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1009: &fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1010: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:79
    let mut _1011: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:67
    let mut _1012: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _1013: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:79
    let mut _1014: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:67
    let mut _1015: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1016: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1017: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _1018: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _1019: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:79
    let mut _1020: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:67
    let mut _1021: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _1022: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1023: &fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1024: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:79
    let mut _1025: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:67
    let mut _1026: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1027: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1028: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _1029: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _1030: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:29
    let mut _1031: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:17
    let mut _1032: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _1033: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:29
    let mut _1034: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:17
    let mut _1035: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1036: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1037: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _1038: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _1039: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1040: &fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1041: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:29
    let mut _1042: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:17
    let mut _1043: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _1044: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:29
    let mut _1045: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:17
    let mut _1046: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1047: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1048: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _1049: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _1050: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:29
    let mut _1051: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:17
    let mut _1052: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _1053: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1054: &fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1055: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:29
    let mut _1056: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:17
    let mut _1057: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1058: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1059: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _1060: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _1061: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:29
    let mut _1062: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:17
    let mut _1063: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _1064: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:29
    let mut _1065: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:17
    let mut _1066: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1067: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1068: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _1069: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _1070: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1071: &fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1072: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:29
    let mut _1073: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:17
    let mut _1074: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _1075: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:29
    let mut _1076: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:17
    let mut _1077: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1078: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1079: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _1080: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _1081: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:29
    let mut _1082: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:17
    let mut _1083: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _1084: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1085: &fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1086: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:29
    let mut _1087: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:17
    let mut _1088: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1089: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1090: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _1091: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _1092: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:29
    let mut _1093: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:17
    let mut _1094: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _1095: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:29
    let mut _1096: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:17
    let mut _1097: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1098: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1099: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _1100: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _1101: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1102: &fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1103: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:29
    let mut _1104: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:17
    let mut _1105: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _1106: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:29
    let mut _1107: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:17
    let mut _1108: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1109: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1110: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _1111: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _1112: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:29
    let mut _1113: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:17
    let mut _1114: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _1115: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1116: &fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1117: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:29
    let mut _1118: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:17
    let mut _1119: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1120: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1121: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _1122: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _1123: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:29
    let mut _1124: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:17
    let mut _1125: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _1126: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:29
    let mut _1127: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:17
    let mut _1128: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1129: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1130: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _1131: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _1132: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1133: &fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1134: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:29
    let mut _1135: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:17
    let mut _1136: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _1137: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:29
    let mut _1138: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:17
    let mut _1139: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1140: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1141: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _1142: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _1143: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:29
    let mut _1144: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:17
    let mut _1145: std::vec::Vec<i32>;   // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _1146: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1147: &fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1148: std::option::IntoIter<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:29
    let mut _1149: std::option::Option<i32>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:17
    let mut _1150: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1151: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1152: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _1153: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _1154: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _1155: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1156: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1157: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _1158: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _1159: fn(i32, i32) -> i32;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1160: &fn(i32, i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1161: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _1162: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1163: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1164: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _1165: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _1166: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _1167: fn(i32, i32) -> i32;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1168: &fn(i32, i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1169: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1170: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1171: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _1172: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _1173: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _1174: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1175: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1176: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _1177: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _1178: fn(i32, i32) -> i32;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1179: &fn(i32, i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1180: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _1181: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1182: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1183: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _1184: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _1185: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _1186: fn(i32, i32) -> i32;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1187: &fn(i32, i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1188: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1189: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1190: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _1191: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _1192: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _1193: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1194: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1195: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _1196: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _1197: fn(i32, i32) -> i32;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1198: &fn(i32, i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1199: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _1200: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1201: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1202: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _1203: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _1204: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _1205: fn(i32, i32) -> i32;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1206: &fn(i32, i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1207: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1208: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1209: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _1210: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _1211: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _1212: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1213: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1214: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _1215: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _1216: fn(i32, i32) -> i32;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1217: &fn(i32, i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1218: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _1219: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1220: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1221: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _1222: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _1223: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _1224: fn(i32, i32) -> i32;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1225: &fn(i32, i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1226: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1227: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1228: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _1229: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _1230: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _1231: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1232: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1233: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _1234: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _1235: fn(i32, i32) -> i32;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1236: &fn(i32, i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1237: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _1238: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1239: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1240: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _1241: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _1242: i32;                  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _1243: fn(i32, i32) -> i32;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1244: &fn(i32, i32) -> i32; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1245: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1246: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1247: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _1248: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _1249: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
    let mut _1250: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
    let _1251: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:15
    let mut _1252: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _1253: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
    let mut _1254: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
    let _1255: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:15
    let mut _1256: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1257: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1258: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _1259: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _1260: fn(std::string::String) -> std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1261: &fn(std::string::String) -> std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1262: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
    let mut _1263: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
    let _1264: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:15
    let mut _1265: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _1266: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
    let mut _1267: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
    let _1268: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:15
    let mut _1269: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1270: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1271: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _1272: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _1273: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
    let mut _1274: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
    let _1275: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:15
    let mut _1276: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _1277: fn(std::string::String) -> std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1278: &fn(std::string::String) -> std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1279: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
    let mut _1280: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
    let _1281: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:15
    let mut _1282: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1283: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1284: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _1285: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _1286: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
    let mut _1287: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
    let _1288: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:15
    let mut _1289: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _1290: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
    let mut _1291: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
    let _1292: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:15
    let mut _1293: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1294: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1295: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _1296: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _1297: fn(std::string::String) -> std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1298: &fn(std::string::String) -> std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1299: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
    let mut _1300: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
    let _1301: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:15
    let mut _1302: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _1303: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
    let mut _1304: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
    let _1305: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:15
    let mut _1306: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1307: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1308: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _1309: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _1310: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
    let mut _1311: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
    let _1312: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:15
    let mut _1313: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _1314: fn(std::string::String) -> std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1315: &fn(std::string::String) -> std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1316: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
    let mut _1317: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
    let _1318: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:15
    let mut _1319: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1320: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1321: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _1322: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _1323: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
    let mut _1324: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
    let _1325: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:15
    let mut _1326: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _1327: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
    let mut _1328: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
    let _1329: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:15
    let mut _1330: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1331: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1332: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _1333: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _1334: fn(std::string::String) -> std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1335: &fn(std::string::String) -> std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1336: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
    let mut _1337: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
    let _1338: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:15
    let mut _1339: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _1340: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
    let mut _1341: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
    let _1342: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:15
    let mut _1343: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1344: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1345: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _1346: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _1347: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
    let mut _1348: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
    let _1349: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:15
    let mut _1350: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _1351: fn(std::string::String) -> std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1352: &fn(std::string::String) -> std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1353: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
    let mut _1354: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
    let _1355: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:15
    let mut _1356: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1357: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1358: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
    let mut _1359: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
    let mut _1360: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
    let mut _1361: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
    let _1362: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:15
    let mut _1363: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
    let mut _1364: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
    let mut _1365: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
    let _1366: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:15
    let mut _1367: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    let mut _1368: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1369: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
    let mut _1370: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    let mut _1371: fn(std::string::String) -> std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1372: &fn(std::string::String) -> std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
    let mut _1373: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
    let mut _1374: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
    let _1375: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:15
    let mut _1376: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
    let mut _1377: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
    let mut _1378: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
    let _1379: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:15
    let mut _1380: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    let mut _1381: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1382: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
    let mut _1383: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
    let mut _1384: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
    let mut _1385: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
    let _1386: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:15
    let mut _1387: std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    let mut _1388: fn(std::string::String) -> std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1389: &fn(std::string::String) -> std::borrow::Cow<'_, str>; // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
    let mut _1390: std::string::String;  // in scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
    let mut _1391: &str;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
    let _1392: &str;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:15
    let mut _1393: !;                    // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    let mut _1394: &i32;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    let mut _1395: &i32;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    let mut _1396: &i32;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    let mut _1397: &i32;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    let mut _1398: &i32;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    let mut _1399: &i32;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    let mut _1400: &i32;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    let mut _1401: &i32;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    let mut _1402: &i32;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    let mut _1403: &i32;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    let mut _1404: &i32;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    let mut _1405: &i32;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    let mut _1406: &i32;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    let mut _1407: &i32;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    let mut _1408: &i32;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    let mut _1409: &i32;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    let mut _1410: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    let mut _1411: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    let mut _1412: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    let mut _1413: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    let mut _1414: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    let mut _1415: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    let mut _1416: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    let mut _1417: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    let mut _1418: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    let mut _1419: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    let mut _1420: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    let mut _1421: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    let mut _1422: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    let mut _1423: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    let mut _1424: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    let mut _1425: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    let mut _1426: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    let mut _1427: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    let mut _1428: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    let mut _1429: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    let mut _1430: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    let mut _1431: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    let mut _1432: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    let mut _1433: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    let mut _1434: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    let mut _1435: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    let mut _1436: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    let mut _1437: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    let mut _1438: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    let mut _1439: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    let mut _1440: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    let mut _1441: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    let mut _1442: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    let mut _1443: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    let mut _1444: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    let mut _1445: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    let mut _1446: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    let mut _1447: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    let mut _1448: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    let mut _1449: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    let mut _1450: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    let mut _1451: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    let mut _1452: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    let mut _1453: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    let mut _1454: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    let mut _1455: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    let mut _1456: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    let mut _1457: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    let mut _1458: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    let mut _1459: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    let mut _1460: bool;                 // in scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53

    bb0: {
        _1453 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1454 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1413 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1418 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1455 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1447 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1425 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1419 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1431 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1410 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1426 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1437 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1432 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1448 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1438 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1443 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1449 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1424 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1430 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1414 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1436 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1442 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1456 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1415 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1457 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1420 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1450 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1411 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1416 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1421 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1422 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1412 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1428 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1423 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1434 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1429 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1440 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1435 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1444 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1441 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1445 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1446 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1451 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1452 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1458 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1427 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1459 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1433 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1460 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1439 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _1417 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:62:71: 68:6
        _3 = const _(const 5_i32) -> bb1; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb1: {
        _4 = id::<i32>(const 5_i32) -> bb2; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:73:5: 73:7
                                         // + literal: Const { ty: fn(i32) -> i32 {id::<i32>}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = eq::<i32>(move _3, move _4) -> bb3; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = Not(move _2);               // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _1) -> [0: bb5, otherwise: bb4]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb4: {
        _5 = core::panicking::panic(const "assertion failed: eq(C(5), id(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _10 = const {alloc1: &fn(i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(i32) -> i32, val: Value(Scalar(alloc1)) }
        _9 = (*_10);                     // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _8 = move _9(const 5_i32) -> bb6; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb6: {
        _11 = id::<i32>(const 5_i32) -> bb7; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:73:5: 73:7
                                         // + literal: Const { ty: fn(i32) -> i32 {id::<i32>}, val: Value(<ZST>) }
    }

    bb7: {
        _7 = eq::<i32>(move _8, move _11) -> bb8; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb8: {
        _6 = Not(move _7);               // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _6) -> [0: bb10, otherwise: bb9]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb9: {
        _12 = core::panicking::panic(const "assertion failed: eq(S(5), id(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        _15 = const _(const 5_i32) -> bb11; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb11: {
        _18 = const {alloc1: &fn(i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(i32) -> i32, val: Value(Scalar(alloc1)) }
        _17 = (*_18);                    // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _16 = move _17(const 5_i32) -> bb12; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb12: {
        _14 = eq::<i32>(move _15, move _16) -> bb13; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb13: {
        _13 = Not(move _14);             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _13) -> [0: bb15, otherwise: bb14]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb14: {
        _19 = core::panicking::panic(const "assertion failed: eq(C(5), S(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _22 = const _(const 5_i32) -> bb16; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb16: {
        _23 = id::<i32>(const 5_i32) -> bb17; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:74:5: 74:14
                                         // + literal: Const { ty: fn(i32) -> i32 {id::<i32>}, val: Value(<ZST>) }
    }

    bb17: {
        _21 = eq::<i32>(move _22, move _23) -> bb18; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb18: {
        _20 = Not(move _21);             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _20) -> [0: bb20, otherwise: bb19]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb19: {
        _24 = core::panicking::panic(const "assertion failed: eq(C(5), id::<i32>(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb20: {
        _29 = const {alloc2: &fn(i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(i32) -> i32, val: Value(Scalar(alloc2)) }
        _28 = (*_29);                    // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _27 = move _28(const 5_i32) -> bb21; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb21: {
        _30 = id::<i32>(const 5_i32) -> bb22; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:74:5: 74:14
                                         // + literal: Const { ty: fn(i32) -> i32 {id::<i32>}, val: Value(<ZST>) }
    }

    bb22: {
        _26 = eq::<i32>(move _27, move _30) -> bb23; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb23: {
        _25 = Not(move _26);             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _25) -> [0: bb25, otherwise: bb24]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb24: {
        _31 = core::panicking::panic(const "assertion failed: eq(S(5), id::<i32>(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb25: {
        _34 = const _(const 5_i32) -> bb26; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb26: {
        _37 = const {alloc2: &fn(i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(i32) -> i32, val: Value(Scalar(alloc2)) }
        _36 = (*_37);                    // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _35 = move _36(const 5_i32) -> bb27; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb27: {
        _33 = eq::<i32>(move _34, move _35) -> bb28; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb28: {
        _32 = Not(move _33);             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _32) -> [0: bb30, otherwise: bb29]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb29: {
        _38 = core::panicking::panic(const "assertion failed: eq(C(5), S(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb30: {
        _41 = const _(const 5_i32) -> bb31; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(i32) -> Option<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb31: {
        _42 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
        _40 = eq::<Option<i32>>(move _41, move _42) -> bb32; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Option<i32>, Option<i32>) -> bool {eq::<Option<i32>>}, val: Value(<ZST>) }
    }

    bb32: {
        _39 = Not(move _40);             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _39) -> [0: bb34, otherwise: bb33]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb33: {
        _43 = core::panicking::panic(const "assertion failed: eq(C(5), Some(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb34: {
        _48 = const {alloc3: &fn(i32) -> Option<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(i32) -> Option<i32>, val: Value(Scalar(alloc3)) }
        _47 = (*_48);                    // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _46 = move _47(const 5_i32) -> bb35; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb35: {
        _49 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
        _45 = eq::<Option<i32>>(move _46, move _49) -> bb36; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Option<i32>, Option<i32>) -> bool {eq::<Option<i32>>}, val: Value(<ZST>) }
    }

    bb36: {
        _44 = Not(move _45);             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _44) -> [0: bb38, otherwise: bb37]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb37: {
        _50 = core::panicking::panic(const "assertion failed: eq(S(5), Some(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb38: {
        _53 = const _(const 5_i32) -> bb39; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(i32) -> Option<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb39: {
        _56 = const {alloc3: &fn(i32) -> Option<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(i32) -> Option<i32>, val: Value(Scalar(alloc3)) }
        _55 = (*_56);                    // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _54 = move _55(const 5_i32) -> bb40; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb40: {
        _52 = eq::<Option<i32>>(move _53, move _54) -> bb41; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Option<i32>, Option<i32>) -> bool {eq::<Option<i32>>}, val: Value(<ZST>) }
    }

    bb41: {
        _51 = Not(move _52);             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _51) -> [0: bb43, otherwise: bb42]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb42: {
        _57 = core::panicking::panic(const "assertion failed: eq(C(5), S(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb43: {
        _60 = const _(const 5_i32) -> bb44; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(i32) -> Option<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb44: {
        _61 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
        _59 = eq::<Option<i32>>(move _60, move _61) -> bb45; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Option<i32>, Option<i32>) -> bool {eq::<Option<i32>>}, val: Value(<ZST>) }
    }

    bb45: {
        _58 = Not(move _59);             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _58) -> [0: bb47, otherwise: bb46]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb46: {
        _62 = core::panicking::panic(const "assertion failed: eq(C(5), Some::<i32>(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb47: {
        _67 = const {alloc4: &fn(i32) -> Option<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(i32) -> Option<i32>, val: Value(Scalar(alloc4)) }
        _66 = (*_67);                    // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _65 = move _66(const 5_i32) -> bb48; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb48: {
        _68 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
        _64 = eq::<Option<i32>>(move _65, move _68) -> bb49; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Option<i32>, Option<i32>) -> bool {eq::<Option<i32>>}, val: Value(<ZST>) }
    }

    bb49: {
        _63 = Not(move _64);             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _63) -> [0: bb51, otherwise: bb50]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb50: {
        _69 = core::panicking::panic(const "assertion failed: eq(S(5), Some::<i32>(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb51: {
        _72 = const _(const 5_i32) -> bb52; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(i32) -> Option<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb52: {
        _75 = const {alloc4: &fn(i32) -> Option<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(i32) -> Option<i32>, val: Value(Scalar(alloc4)) }
        _74 = (*_75);                    // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _73 = move _74(const 5_i32) -> bb53; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb53: {
        _71 = eq::<Option<i32>>(move _72, move _73) -> bb54; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Option<i32>, Option<i32>) -> bool {eq::<Option<i32>>}, val: Value(<ZST>) }
    }

    bb54: {
        _70 = Not(move _71);             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _70) -> [0: bb56, otherwise: bb55]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb55: {
        _76 = core::panicking::panic(const "assertion failed: eq(C(5), S(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb56: {
        _79 = const _(const 5_i32) -> bb57; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(i32) -> Newt<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb57: {
        _80 = const Newt::<i32>(5_i32);  // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // + literal: Const { ty: Newt<i32>, val: Value(Scalar(0x00000005)) }
        _78 = eq::<Newt<i32>>(move _79, move _80) -> bb58; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Newt<i32>, Newt<i32>) -> bool {eq::<Newt<i32>>}, val: Value(<ZST>) }
    }

    bb58: {
        _77 = Not(move _78);             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _77) -> [0: bb60, otherwise: bb59]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb59: {
        _81 = core::panicking::panic(const "assertion failed: eq(C(5), Newt(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb60: {
        _86 = const {alloc5: &fn(i32) -> Newt<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(i32) -> Newt<i32>, val: Value(Scalar(alloc5)) }
        _85 = (*_86);                    // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _84 = move _85(const 5_i32) -> bb61; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb61: {
        _87 = const Newt::<i32>(5_i32);  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // + literal: Const { ty: Newt<i32>, val: Value(Scalar(0x00000005)) }
        _83 = eq::<Newt<i32>>(move _84, move _87) -> bb62; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Newt<i32>, Newt<i32>) -> bool {eq::<Newt<i32>>}, val: Value(<ZST>) }
    }

    bb62: {
        _82 = Not(move _83);             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _82) -> [0: bb64, otherwise: bb63]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb63: {
        _88 = core::panicking::panic(const "assertion failed: eq(S(5), Newt(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb64: {
        _91 = const _(const 5_i32) -> bb65; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(i32) -> Newt<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb65: {
        _94 = const {alloc5: &fn(i32) -> Newt<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(i32) -> Newt<i32>, val: Value(Scalar(alloc5)) }
        _93 = (*_94);                    // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _92 = move _93(const 5_i32) -> bb66; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb66: {
        _90 = eq::<Newt<i32>>(move _91, move _92) -> bb67; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Newt<i32>, Newt<i32>) -> bool {eq::<Newt<i32>>}, val: Value(<ZST>) }
    }

    bb67: {
        _89 = Not(move _90);             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _89) -> [0: bb69, otherwise: bb68]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb68: {
        _95 = core::panicking::panic(const "assertion failed: eq(C(5), S(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb69: {
        _98 = const _(const 5_i32) -> bb70; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(i32) -> Newt<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb70: {
        _99 = const Newt::<i32>(5_i32);  // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // + literal: Const { ty: Newt<i32>, val: Value(Scalar(0x00000005)) }
        _97 = eq::<Newt<i32>>(move _98, move _99) -> bb71; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Newt<i32>, Newt<i32>) -> bool {eq::<Newt<i32>>}, val: Value(<ZST>) }
    }

    bb71: {
        _96 = Not(move _97);             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _96) -> [0: bb73, otherwise: bb72]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb72: {
        _100 = core::panicking::panic(const "assertion failed: eq(C(5), Newt::<i32>(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb73: {
        _105 = const {alloc6: &fn(i32) -> Newt<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(i32) -> Newt<i32>, val: Value(Scalar(alloc6)) }
        _104 = (*_105);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _103 = move _104(const 5_i32) -> bb74; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb74: {
        _106 = const Newt::<i32>(5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // + literal: Const { ty: Newt<i32>, val: Value(Scalar(0x00000005)) }
        _102 = eq::<Newt<i32>>(move _103, move _106) -> bb75; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Newt<i32>, Newt<i32>) -> bool {eq::<Newt<i32>>}, val: Value(<ZST>) }
    }

    bb75: {
        _101 = Not(move _102);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _101) -> [0: bb77, otherwise: bb76]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb76: {
        _107 = core::panicking::panic(const "assertion failed: eq(S(5), Newt::<i32>(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb77: {
        _110 = const _(const 5_i32) -> bb78; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(i32) -> Newt<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb78: {
        _113 = const {alloc6: &fn(i32) -> Newt<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(i32) -> Newt<i32>, val: Value(Scalar(alloc6)) }
        _112 = (*_113);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _111 = move _112(const 5_i32) -> bb79; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb79: {
        _109 = eq::<Newt<i32>>(move _110, move _111) -> bb80; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Newt<i32>, Newt<i32>) -> bool {eq::<Newt<i32>>}, val: Value(<ZST>) }
    }

    bb80: {
        _108 = Not(move _109);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _108) -> [0: bb82, otherwise: bb81]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb81: {
        _114 = core::panicking::panic(const "assertion failed: eq(C(5), S(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb82: {
        _1460 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
        _117 = const _() -> bb83;        // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn() -> Vec<()>, val: Unevaluated(main::C, [], None) }
    }

    bb83: {
        _118 = Vec::<()>::new() -> [return: bb84, unwind: bb996]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:85:5: 85:13
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<()> {Vec::<()>::new}, val: Value(<ZST>) }
    }

    bb84: {
        _1460 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
        _116 = eq::<Vec<()>>(move _117, move _118) -> [return: bb85, unwind: bb996]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Vec<()>, Vec<()>) -> bool {eq::<Vec<()>>}, val: Value(<ZST>) }
    }

    bb85: {
        _1460 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
        _115 = Not(move _116);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _115) -> [0: bb87, otherwise: bb86]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb86: {
        _119 = core::panicking::panic(const "assertion failed: eq(C(), Vec::new())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb87: {
        _124 = const {alloc7: &fn() -> Vec<()>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn() -> Vec<()>, val: Value(Scalar(alloc7)) }
        _123 = (*_124);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1459 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
        _122 = move _123() -> bb88;      // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb88: {
        _125 = Vec::<()>::new() -> [return: bb89, unwind: bb994]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:85:5: 85:13
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<()> {Vec::<()>::new}, val: Value(<ZST>) }
    }

    bb89: {
        _1459 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
        _121 = eq::<Vec<()>>(move _122, move _125) -> [return: bb90, unwind: bb994]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Vec<()>, Vec<()>) -> bool {eq::<Vec<()>>}, val: Value(<ZST>) }
    }

    bb90: {
        _1459 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
        _120 = Not(move _121);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _120) -> [0: bb92, otherwise: bb91]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb91: {
        _126 = core::panicking::panic(const "assertion failed: eq(S(), Vec::new())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb92: {
        _1458 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
        _129 = const _() -> bb93;        // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn() -> Vec<()>, val: Unevaluated(main::C, [], None) }
    }

    bb93: {
        _132 = const {alloc7: &fn() -> Vec<()>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn() -> Vec<()>, val: Value(Scalar(alloc7)) }
        _131 = (*_132);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _130 = move _131() -> [return: bb94, unwind: bb992]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb94: {
        _1458 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
        _128 = eq::<Vec<()>>(move _129, move _130) -> [return: bb95, unwind: bb992]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Vec<()>, Vec<()>) -> bool {eq::<Vec<()>>}, val: Value(<ZST>) }
    }

    bb95: {
        _1458 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
        _127 = Not(move _128);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _127) -> [0: bb97, otherwise: bb96]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb96: {
        _133 = core::panicking::panic(const "assertion failed: eq(C(), S())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb97: {
        _1457 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
        _136 = const _() -> bb98;        // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn() -> Vec<()>, val: Unevaluated(main::C, [], None) }
    }

    bb98: {
        _137 = Vec::<()>::new() -> [return: bb99, unwind: bb990]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:86:5: 86:19
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> Vec<()> {Vec::<()>::new}, val: Value(<ZST>) }
    }

    bb99: {
        _1457 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
        _135 = eq::<Vec<()>>(move _136, move _137) -> [return: bb100, unwind: bb990]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Vec<()>, Vec<()>) -> bool {eq::<Vec<()>>}, val: Value(<ZST>) }
    }

    bb100: {
        _1457 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
        _134 = Not(move _135);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _134) -> [0: bb102, otherwise: bb101]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb101: {
        _138 = core::panicking::panic(const "assertion failed: eq(C(), Vec::<()>::new())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb102: {
        _143 = const {alloc8: &fn() -> Vec<()>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn() -> Vec<()>, val: Value(Scalar(alloc8)) }
        _142 = (*_143);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1456 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
        _141 = move _142() -> bb103;     // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb103: {
        _144 = Vec::<()>::new() -> [return: bb104, unwind: bb988]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:86:5: 86:19
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn() -> Vec<()> {Vec::<()>::new}, val: Value(<ZST>) }
    }

    bb104: {
        _1456 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
        _140 = eq::<Vec<()>>(move _141, move _144) -> [return: bb105, unwind: bb988]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Vec<()>, Vec<()>) -> bool {eq::<Vec<()>>}, val: Value(<ZST>) }
    }

    bb105: {
        _1456 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
        _139 = Not(move _140);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _139) -> [0: bb107, otherwise: bb106]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb106: {
        _145 = core::panicking::panic(const "assertion failed: eq(S(), Vec::<()>::new())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb107: {
        _1455 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
        _148 = const _() -> bb108;       // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn() -> Vec<()>, val: Unevaluated(main::C, [], None) }
    }

    bb108: {
        _151 = const {alloc8: &fn() -> Vec<()>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn() -> Vec<()>, val: Value(Scalar(alloc8)) }
        _150 = (*_151);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _149 = move _150() -> [return: bb109, unwind: bb986]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb109: {
        _1455 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
        _147 = eq::<Vec<()>>(move _148, move _149) -> [return: bb110, unwind: bb986]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Vec<()>, Vec<()>) -> bool {eq::<Vec<()>>}, val: Value(<ZST>) }
    }

    bb110: {
        _1455 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
        _146 = Not(move _147);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _146) -> [0: bb112, otherwise: bb111]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb111: {
        _152 = core::panicking::panic(const "assertion failed: eq(C(), S())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb112: {
        _1454 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
        _155 = const _() -> bb113;       // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn() -> Vec<()>, val: Unevaluated(main::C, [], None) }
    }

    bb113: {
        _156 = Vec::<()>::new() -> [return: bb114, unwind: bb984]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:87:5: 87:19
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn() -> Vec<()> {Vec::<()>::new}, val: Value(<ZST>) }
    }

    bb114: {
        _1454 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
        _154 = eq::<Vec<()>>(move _155, move _156) -> [return: bb115, unwind: bb984]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Vec<()>, Vec<()>) -> bool {eq::<Vec<()>>}, val: Value(<ZST>) }
    }

    bb115: {
        _1454 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
        _153 = Not(move _154);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _153) -> [0: bb117, otherwise: bb116]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb116: {
        _157 = core::panicking::panic(const "assertion failed: eq(C(), <Vec<()>>::new())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb117: {
        _162 = const {alloc9: &fn() -> Vec<()>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn() -> Vec<()>, val: Value(Scalar(alloc9)) }
        _161 = (*_162);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1453 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
        _160 = move _161() -> bb118;     // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb118: {
        _163 = Vec::<()>::new() -> [return: bb119, unwind: bb982]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:87:5: 87:19
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn() -> Vec<()> {Vec::<()>::new}, val: Value(<ZST>) }
    }

    bb119: {
        _1453 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
        _159 = eq::<Vec<()>>(move _160, move _163) -> [return: bb120, unwind: bb982]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Vec<()>, Vec<()>) -> bool {eq::<Vec<()>>}, val: Value(<ZST>) }
    }

    bb120: {
        _1453 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
        _158 = Not(move _159);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _158) -> [0: bb122, otherwise: bb121]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb121: {
        _164 = core::panicking::panic(const "assertion failed: eq(S(), <Vec<()>>::new())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb122: {
        _1452 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
        _167 = const _() -> bb123;       // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn() -> Vec<()>, val: Unevaluated(main::C, [], None) }
    }

    bb123: {
        _170 = const {alloc9: &fn() -> Vec<()>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn() -> Vec<()>, val: Value(Scalar(alloc9)) }
        _169 = (*_170);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _168 = move _169() -> [return: bb124, unwind: bb980]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb124: {
        _1452 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
        _166 = eq::<Vec<()>>(move _167, move _168) -> [return: bb125, unwind: bb980]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Vec<()>, Vec<()>) -> bool {eq::<Vec<()>>}, val: Value(<ZST>) }
    }

    bb125: {
        _1452 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
        _165 = Not(move _166);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _165) -> [0: bb127, otherwise: bb126]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb126: {
        _171 = core::panicking::panic(const "assertion failed: eq(C(), S())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb127: {
        _1451 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
        _174 = const _(const 5_usize) -> bb128; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(usize) -> Vec<()>, val: Unevaluated(main::C, [], None) }
    }

    bb128: {
        _175 = Vec::<()>::with_capacity(const 5_usize) -> [return: bb129, unwind: bb978]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:88:5: 88:23
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(usize) -> Vec<()> {Vec::<()>::with_capacity}, val: Value(<ZST>) }
    }

    bb129: {
        _1451 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
        _173 = eq::<Vec<()>>(move _174, move _175) -> [return: bb130, unwind: bb978]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Vec<()>, Vec<()>) -> bool {eq::<Vec<()>>}, val: Value(<ZST>) }
    }

    bb130: {
        _1451 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
        _172 = Not(move _173);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _172) -> [0: bb132, otherwise: bb131]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb131: {
        _176 = core::panicking::panic(const "assertion failed: eq(C(5), Vec::with_capacity(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb132: {
        _181 = const {alloc10: &fn(usize) -> Vec<()>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(usize) -> Vec<()>, val: Value(Scalar(alloc10)) }
        _180 = (*_181);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1450 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
        _179 = move _180(const 5_usize) -> bb133; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb133: {
        _182 = Vec::<()>::with_capacity(const 5_usize) -> [return: bb134, unwind: bb976]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:88:5: 88:23
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(usize) -> Vec<()> {Vec::<()>::with_capacity}, val: Value(<ZST>) }
    }

    bb134: {
        _1450 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
        _178 = eq::<Vec<()>>(move _179, move _182) -> [return: bb135, unwind: bb976]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Vec<()>, Vec<()>) -> bool {eq::<Vec<()>>}, val: Value(<ZST>) }
    }

    bb135: {
        _1450 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
        _177 = Not(move _178);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _177) -> [0: bb137, otherwise: bb136]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb136: {
        _183 = core::panicking::panic(const "assertion failed: eq(S(5), Vec::with_capacity(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb137: {
        _1449 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
        _186 = const _(const 5_usize) -> bb138; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(usize) -> Vec<()>, val: Unevaluated(main::C, [], None) }
    }

    bb138: {
        _189 = const {alloc10: &fn(usize) -> Vec<()>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(usize) -> Vec<()>, val: Value(Scalar(alloc10)) }
        _188 = (*_189);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _187 = move _188(const 5_usize) -> [return: bb139, unwind: bb974]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb139: {
        _1449 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
        _185 = eq::<Vec<()>>(move _186, move _187) -> [return: bb140, unwind: bb974]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Vec<()>, Vec<()>) -> bool {eq::<Vec<()>>}, val: Value(<ZST>) }
    }

    bb140: {
        _1449 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
        _184 = Not(move _185);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _184) -> [0: bb142, otherwise: bb141]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb141: {
        _190 = core::panicking::panic(const "assertion failed: eq(C(5), S(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb142: {
        _1448 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
        _193 = const _(const 5_usize) -> bb143; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(usize) -> Vec<()>, val: Unevaluated(main::C, [], None) }
    }

    bb143: {
        _194 = Vec::<()>::with_capacity(const 5_usize) -> [return: bb144, unwind: bb972]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:89:5: 89:29
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(usize) -> Vec<()> {Vec::<()>::with_capacity}, val: Value(<ZST>) }
    }

    bb144: {
        _1448 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
        _192 = eq::<Vec<()>>(move _193, move _194) -> [return: bb145, unwind: bb972]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Vec<()>, Vec<()>) -> bool {eq::<Vec<()>>}, val: Value(<ZST>) }
    }

    bb145: {
        _1448 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
        _191 = Not(move _192);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _191) -> [0: bb147, otherwise: bb146]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb146: {
        _195 = core::panicking::panic(const "assertion failed: eq(C(5), Vec::<()>::with_capacity(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb147: {
        _200 = const {alloc11: &fn(usize) -> Vec<()>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(usize) -> Vec<()>, val: Value(Scalar(alloc11)) }
        _199 = (*_200);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1447 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
        _198 = move _199(const 5_usize) -> bb148; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb148: {
        _201 = Vec::<()>::with_capacity(const 5_usize) -> [return: bb149, unwind: bb970]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:89:5: 89:29
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn(usize) -> Vec<()> {Vec::<()>::with_capacity}, val: Value(<ZST>) }
    }

    bb149: {
        _1447 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
        _197 = eq::<Vec<()>>(move _198, move _201) -> [return: bb150, unwind: bb970]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Vec<()>, Vec<()>) -> bool {eq::<Vec<()>>}, val: Value(<ZST>) }
    }

    bb150: {
        _1447 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
        _196 = Not(move _197);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _196) -> [0: bb152, otherwise: bb151]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb151: {
        _202 = core::panicking::panic(const "assertion failed: eq(S(5), Vec::<()>::with_capacity(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb152: {
        _1446 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
        _205 = const _(const 5_usize) -> bb153; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(usize) -> Vec<()>, val: Unevaluated(main::C, [], None) }
    }

    bb153: {
        _208 = const {alloc11: &fn(usize) -> Vec<()>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(usize) -> Vec<()>, val: Value(Scalar(alloc11)) }
        _207 = (*_208);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _206 = move _207(const 5_usize) -> [return: bb154, unwind: bb968]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb154: {
        _1446 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
        _204 = eq::<Vec<()>>(move _205, move _206) -> [return: bb155, unwind: bb968]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Vec<()>, Vec<()>) -> bool {eq::<Vec<()>>}, val: Value(<ZST>) }
    }

    bb155: {
        _1446 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
        _203 = Not(move _204);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _203) -> [0: bb157, otherwise: bb156]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb156: {
        _209 = core::panicking::panic(const "assertion failed: eq(C(5), S(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb157: {
        _1445 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
        _212 = const _(const 5_usize) -> bb158; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(usize) -> Vec<()>, val: Unevaluated(main::C, [], None) }
    }

    bb158: {
        _213 = Vec::<()>::with_capacity(const 5_usize) -> [return: bb159, unwind: bb966]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:90:5: 90:29
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn(usize) -> Vec<()> {Vec::<()>::with_capacity}, val: Value(<ZST>) }
    }

    bb159: {
        _1445 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
        _211 = eq::<Vec<()>>(move _212, move _213) -> [return: bb160, unwind: bb966]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Vec<()>, Vec<()>) -> bool {eq::<Vec<()>>}, val: Value(<ZST>) }
    }

    bb160: {
        _1445 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
        _210 = Not(move _211);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _210) -> [0: bb162, otherwise: bb161]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb161: {
        _214 = core::panicking::panic(const "assertion failed: eq(C(5), <Vec<()>>::with_capacity(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb162: {
        _219 = const {alloc12: &fn(usize) -> Vec<()>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(usize) -> Vec<()>, val: Value(Scalar(alloc12)) }
        _218 = (*_219);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1444 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
        _217 = move _218(const 5_usize) -> bb163; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb163: {
        _220 = Vec::<()>::with_capacity(const 5_usize) -> [return: bb164, unwind: bb964]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:90:5: 90:29
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn(usize) -> Vec<()> {Vec::<()>::with_capacity}, val: Value(<ZST>) }
    }

    bb164: {
        _1444 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
        _216 = eq::<Vec<()>>(move _217, move _220) -> [return: bb165, unwind: bb964]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Vec<()>, Vec<()>) -> bool {eq::<Vec<()>>}, val: Value(<ZST>) }
    }

    bb165: {
        _1444 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
        _215 = Not(move _216);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _215) -> [0: bb167, otherwise: bb166]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb166: {
        _221 = core::panicking::panic(const "assertion failed: eq(S(5), <Vec<()>>::with_capacity(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb167: {
        _1443 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
        _224 = const _(const 5_usize) -> bb168; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(usize) -> Vec<()>, val: Unevaluated(main::C, [], None) }
    }

    bb168: {
        _227 = const {alloc12: &fn(usize) -> Vec<()>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(usize) -> Vec<()>, val: Value(Scalar(alloc12)) }
        _226 = (*_227);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _225 = move _226(const 5_usize) -> [return: bb169, unwind: bb962]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb169: {
        _1443 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
        _223 = eq::<Vec<()>>(move _224, move _225) -> [return: bb170, unwind: bb962]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Vec<()>, Vec<()>) -> bool {eq::<Vec<()>>}, val: Value(<ZST>) }
    }

    bb170: {
        _1443 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
        _222 = Not(move _223);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _222) -> [0: bb172, otherwise: bb171]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb171: {
        _228 = core::panicking::panic(const "assertion failed: eq(C(5), S(5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb172: {
        _232 = odd as fn(usize) -> bool (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:91:66: 91:69
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:91:66: 91:69
                                         // + literal: Const { ty: fn(usize) -> bool {odd}, val: Value(<ZST>) }
        _231 = const _(const 5_usize, move _232) -> bb173; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(usize, fn(usize) -> bool) -> BitVec, val: Unevaluated(main::C, [], None) }
    }

    bb173: {
        _233 = BitVec::from_fn::<fn(usize) -> bool {odd}>(const 5_usize, odd) -> bb174; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:91:5: 91:20
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn(usize, fn(usize) -> bool {odd}) -> BitVec {BitVec::from_fn::<fn(usize) -> bool {odd}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:91:66: 91:69
                                         // + literal: Const { ty: fn(usize) -> bool {odd}, val: Value(<ZST>) }
    }

    bb174: {
        _230 = eq::<BitVec>(move _231, move _233) -> bb175; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(BitVec, BitVec) -> bool {eq::<BitVec>}, val: Value(<ZST>) }
    }

    bb175: {
        _229 = Not(move _230);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _229) -> [0: bb177, otherwise: bb176]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb176: {
        _234 = core::panicking::panic(const "assertion failed: eq(C(5, odd), BitVec::from_fn(5, odd))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb177: {
        _239 = const {alloc13: &fn(usize, fn(usize) -> bool) -> BitVec}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(usize, fn(usize) -> bool) -> BitVec, val: Value(Scalar(alloc13)) }
        _238 = (*_239);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _240 = odd as fn(usize) -> bool (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:91:66: 91:69
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:91:66: 91:69
                                         // + literal: Const { ty: fn(usize) -> bool {odd}, val: Value(<ZST>) }
        _237 = move _238(const 5_usize, move _240) -> bb178; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb178: {
        _241 = BitVec::from_fn::<fn(usize) -> bool {odd}>(const 5_usize, odd) -> bb179; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:91:5: 91:20
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: fn(usize, fn(usize) -> bool {odd}) -> BitVec {BitVec::from_fn::<fn(usize) -> bool {odd}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:91:66: 91:69
                                         // + literal: Const { ty: fn(usize) -> bool {odd}, val: Value(<ZST>) }
    }

    bb179: {
        _236 = eq::<BitVec>(move _237, move _241) -> bb180; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(BitVec, BitVec) -> bool {eq::<BitVec>}, val: Value(<ZST>) }
    }

    bb180: {
        _235 = Not(move _236);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _235) -> [0: bb182, otherwise: bb181]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb181: {
        _242 = core::panicking::panic(const "assertion failed: eq(S(5, odd), BitVec::from_fn(5, odd))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb182: {
        _246 = odd as fn(usize) -> bool (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:91:66: 91:69
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:91:66: 91:69
                                         // + literal: Const { ty: fn(usize) -> bool {odd}, val: Value(<ZST>) }
        _245 = const _(const 5_usize, move _246) -> bb183; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(usize, fn(usize) -> bool) -> BitVec, val: Unevaluated(main::C, [], None) }
    }

    bb183: {
        _249 = const {alloc13: &fn(usize, fn(usize) -> bool) -> BitVec}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(usize, fn(usize) -> bool) -> BitVec, val: Value(Scalar(alloc13)) }
        _248 = (*_249);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _250 = odd as fn(usize) -> bool (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:91:66: 91:69
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:91:66: 91:69
                                         // + literal: Const { ty: fn(usize) -> bool {odd}, val: Value(<ZST>) }
        _247 = move _248(const 5_usize, move _250) -> bb184; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb184: {
        _244 = eq::<BitVec>(move _245, move _247) -> bb185; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(BitVec, BitVec) -> bool {eq::<BitVec>}, val: Value(<ZST>) }
    }

    bb185: {
        _243 = Not(move _244);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _243) -> [0: bb187, otherwise: bb186]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb186: {
        _251 = core::panicking::panic(const "assertion failed: eq(C(5, odd), S(5, odd))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb187: {
        _255 = odd as fn(usize) -> bool (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:92:87: 92:90
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:92:87: 92:90
                                         // + literal: Const { ty: fn(usize) -> bool {odd}, val: Value(<ZST>) }
        _254 = const _(const 5_usize, move _255) -> bb188; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(usize, fn(usize) -> bool) -> BitVec, val: Unevaluated(main::C, [], None) }
    }

    bb188: {
        _257 = odd as fn(usize) -> bool (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:92:87: 92:90
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:92:87: 92:90
                                         // + literal: Const { ty: fn(usize) -> bool {odd}, val: Value(<ZST>) }
        _256 = BitVec::from_fn::<fn(usize) -> bool>(const 5_usize, move _257) -> bb189; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:92:5: 92:41
                                         // + literal: Const { ty: fn(usize, fn(usize) -> bool) -> BitVec {BitVec::from_fn::<fn(usize) -> bool>}, val: Value(<ZST>) }
    }

    bb189: {
        _253 = eq::<BitVec>(move _254, move _256) -> bb190; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(BitVec, BitVec) -> bool {eq::<BitVec>}, val: Value(<ZST>) }
    }

    bb190: {
        _252 = Not(move _253);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _252) -> [0: bb192, otherwise: bb191]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb191: {
        _258 = core::panicking::panic(const "assertion failed: eq(C(5, odd), BitVec::from_fn::<fn(usize) -> bool>(5, odd))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb192: {
        _263 = const {alloc14: &fn(usize, fn(usize) -> bool) -> BitVec}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(usize, fn(usize) -> bool) -> BitVec, val: Value(Scalar(alloc14)) }
        _262 = (*_263);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _264 = odd as fn(usize) -> bool (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:92:87: 92:90
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:92:87: 92:90
                                         // + literal: Const { ty: fn(usize) -> bool {odd}, val: Value(<ZST>) }
        _261 = move _262(const 5_usize, move _264) -> bb193; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb193: {
        _266 = odd as fn(usize) -> bool (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:92:87: 92:90
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:92:87: 92:90
                                         // + literal: Const { ty: fn(usize) -> bool {odd}, val: Value(<ZST>) }
        _265 = BitVec::from_fn::<fn(usize) -> bool>(const 5_usize, move _266) -> bb194; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:92:5: 92:41
                                         // + literal: Const { ty: fn(usize, fn(usize) -> bool) -> BitVec {BitVec::from_fn::<fn(usize) -> bool>}, val: Value(<ZST>) }
    }

    bb194: {
        _260 = eq::<BitVec>(move _261, move _265) -> bb195; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(BitVec, BitVec) -> bool {eq::<BitVec>}, val: Value(<ZST>) }
    }

    bb195: {
        _259 = Not(move _260);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _259) -> [0: bb197, otherwise: bb196]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb196: {
        _267 = core::panicking::panic(const "assertion failed: eq(S(5, odd), BitVec::from_fn::<fn(usize) -> bool>(5, odd))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb197: {
        _271 = odd as fn(usize) -> bool (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:92:87: 92:90
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:92:87: 92:90
                                         // + literal: Const { ty: fn(usize) -> bool {odd}, val: Value(<ZST>) }
        _270 = const _(const 5_usize, move _271) -> bb198; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(usize, fn(usize) -> bool) -> BitVec, val: Unevaluated(main::C, [], None) }
    }

    bb198: {
        _274 = const {alloc14: &fn(usize, fn(usize) -> bool) -> BitVec}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(usize, fn(usize) -> bool) -> BitVec, val: Value(Scalar(alloc14)) }
        _273 = (*_274);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _275 = odd as fn(usize) -> bool (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:92:87: 92:90
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:92:87: 92:90
                                         // + literal: Const { ty: fn(usize) -> bool {odd}, val: Value(<ZST>) }
        _272 = move _273(const 5_usize, move _275) -> bb199; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb199: {
        _269 = eq::<BitVec>(move _270, move _272) -> bb200; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(BitVec, BitVec) -> bool {eq::<BitVec>}, val: Value(<ZST>) }
    }

    bb200: {
        _268 = Not(move _269);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _268) -> [0: bb202, otherwise: bb201]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb201: {
        _276 = core::panicking::panic(const "assertion failed: eq(C(5, odd), S(5, odd))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb202: {
        _280 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:95:63: 95:72
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:95:63: 95:72
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _281 = u8_as_i8 as fn(u8) -> i8 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:95:74: 95:82
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:95:74: 95:82
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
        _279 = const _(move _280, move _281) -> bb203; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>, val: Unevaluated(main::C, [], None) }
    }

    bb203: {
        _283 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:95:63: 95:72
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:95:63: 95:72
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _282 = Foo::<u8>::map_in_place::<i8, fn(u8) -> i8 {u8_as_i8}>(move _283, u8_as_i8) -> bb204; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:95:5: 95:22
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8 {u8_as_i8}) -> Foo<i8> {Foo::<u8>::map_in_place::<i8, fn(u8) -> i8 {u8_as_i8}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:95:74: 95:82
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
    }

    bb204: {
        _278 = eq::<Foo<i8>>(move _279, move _282) -> bb205; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Foo<i8>, Foo<i8>) -> bool {eq::<Foo<i8>>}, val: Value(<ZST>) }
    }

    bb205: {
        _277 = Not(move _278);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _277) -> [0: bb207, otherwise: bb206]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb206: {
        _284 = core::panicking::panic(const "assertion failed: eq(C(Foo(b\\'f\\'), u8_as_i8), Foo::map_in_place(Foo(b\\'f\\'), u8_as_i8))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb207: {
        _289 = const {alloc15: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>, val: Value(Scalar(alloc15)) }
        _288 = (*_289);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _290 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:95:63: 95:72
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:95:63: 95:72
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _291 = u8_as_i8 as fn(u8) -> i8 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:95:74: 95:82
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:95:74: 95:82
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
        _287 = move _288(move _290, move _291) -> bb208; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb208: {
        _293 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:95:63: 95:72
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:95:63: 95:72
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _292 = Foo::<u8>::map_in_place::<i8, fn(u8) -> i8 {u8_as_i8}>(move _293, u8_as_i8) -> bb209; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:95:5: 95:22
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8 {u8_as_i8}) -> Foo<i8> {Foo::<u8>::map_in_place::<i8, fn(u8) -> i8 {u8_as_i8}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:95:74: 95:82
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
    }

    bb209: {
        _286 = eq::<Foo<i8>>(move _287, move _292) -> bb210; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Foo<i8>, Foo<i8>) -> bool {eq::<Foo<i8>>}, val: Value(<ZST>) }
    }

    bb210: {
        _285 = Not(move _286);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _285) -> [0: bb212, otherwise: bb211]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb211: {
        _294 = core::panicking::panic(const "assertion failed: eq(S(Foo(b\\'f\\'), u8_as_i8), Foo::map_in_place(Foo(b\\'f\\'), u8_as_i8))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb212: {
        _298 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:95:63: 95:72
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:95:63: 95:72
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _299 = u8_as_i8 as fn(u8) -> i8 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:95:74: 95:82
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:95:74: 95:82
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
        _297 = const _(move _298, move _299) -> bb213; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>, val: Unevaluated(main::C, [], None) }
    }

    bb213: {
        _302 = const {alloc15: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>, val: Value(Scalar(alloc15)) }
        _301 = (*_302);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _303 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:95:63: 95:72
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:95:63: 95:72
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _304 = u8_as_i8 as fn(u8) -> i8 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:95:74: 95:82
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:95:74: 95:82
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
        _300 = move _301(move _303, move _304) -> bb214; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb214: {
        _296 = eq::<Foo<i8>>(move _297, move _300) -> bb215; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Foo<i8>, Foo<i8>) -> bool {eq::<Foo<i8>>}, val: Value(<ZST>) }
    }

    bb215: {
        _295 = Not(move _296);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _295) -> [0: bb217, otherwise: bb216]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb216: {
        _305 = core::panicking::panic(const "assertion failed: eq(C(Foo(b\\'f\\'), u8_as_i8), S(Foo(b\\'f\\'), u8_as_i8))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb217: {
        _309 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:97:10: 97:19
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:97:10: 97:19
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _310 = u8_as_i8 as fn(u8) -> i8 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:97:21: 97:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:97:21: 97:29
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
        _308 = const _(move _309, move _310) -> bb218; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>, val: Unevaluated(main::C, [], None) }
    }

    bb218: {
        _312 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:97:10: 97:19
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:97:10: 97:19
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _313 = u8_as_i8 as fn(u8) -> i8 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:97:21: 97:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:97:21: 97:29
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
        _311 = Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>(move _312, move _313) -> bb219; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:96:5: 96:42
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> {Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>}, val: Value(<ZST>) }
    }

    bb219: {
        _307 = eq::<Foo<i8>>(move _308, move _311) -> bb220; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Foo<i8>, Foo<i8>) -> bool {eq::<Foo<i8>>}, val: Value(<ZST>) }
    }

    bb220: {
        _306 = Not(move _307);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _306) -> [0: bb222, otherwise: bb221]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb221: {
        _314 = core::panicking::panic(const "assertion failed: eq(C(Foo(b\\'f\\'), u8_as_i8),\\n    Foo::map_in_place::<i8, fn(u8) -> i8>(Foo(b\\'f\\'), u8_as_i8))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb222: {
        _319 = const {alloc16: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>, val: Value(Scalar(alloc16)) }
        _318 = (*_319);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _320 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:97:10: 97:19
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:97:10: 97:19
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _321 = u8_as_i8 as fn(u8) -> i8 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:97:21: 97:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:97:21: 97:29
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
        _317 = move _318(move _320, move _321) -> bb223; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb223: {
        _323 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:97:10: 97:19
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:97:10: 97:19
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _324 = u8_as_i8 as fn(u8) -> i8 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:97:21: 97:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:97:21: 97:29
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
        _322 = Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>(move _323, move _324) -> bb224; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:96:5: 96:42
                                         // + user_ty: UserType(17)
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> {Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>}, val: Value(<ZST>) }
    }

    bb224: {
        _316 = eq::<Foo<i8>>(move _317, move _322) -> bb225; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Foo<i8>, Foo<i8>) -> bool {eq::<Foo<i8>>}, val: Value(<ZST>) }
    }

    bb225: {
        _315 = Not(move _316);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _315) -> [0: bb227, otherwise: bb226]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb226: {
        _325 = core::panicking::panic(const "assertion failed: eq(S(Foo(b\\'f\\'), u8_as_i8),\\n    Foo::map_in_place::<i8, fn(u8) -> i8>(Foo(b\\'f\\'), u8_as_i8))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb227: {
        _329 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:97:10: 97:19
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:97:10: 97:19
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _330 = u8_as_i8 as fn(u8) -> i8 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:97:21: 97:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:97:21: 97:29
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
        _328 = const _(move _329, move _330) -> bb228; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>, val: Unevaluated(main::C, [], None) }
    }

    bb228: {
        _333 = const {alloc16: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>, val: Value(Scalar(alloc16)) }
        _332 = (*_333);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _334 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:97:10: 97:19
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:97:10: 97:19
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _335 = u8_as_i8 as fn(u8) -> i8 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:97:21: 97:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:97:21: 97:29
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
        _331 = move _332(move _334, move _335) -> bb229; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb229: {
        _327 = eq::<Foo<i8>>(move _328, move _331) -> bb230; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Foo<i8>, Foo<i8>) -> bool {eq::<Foo<i8>>}, val: Value(<ZST>) }
    }

    bb230: {
        _326 = Not(move _327);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _326) -> [0: bb232, otherwise: bb231]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb231: {
        _336 = core::panicking::panic(const "assertion failed: eq(C(Foo(b\\'f\\'), u8_as_i8), S(Foo(b\\'f\\'), u8_as_i8))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb232: {
        _340 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:99:12: 99:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:99:12: 99:21
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _341 = u8_as_i8 as fn(u8) -> i8 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:99:23: 99:31
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:99:23: 99:31
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
        _339 = const _(move _340, move _341) -> bb233; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>, val: Unevaluated(main::C, [], None) }
    }

    bb233: {
        _343 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:99:12: 99:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:99:12: 99:21
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _342 = Foo::<u8>::map_in_place::<i8, fn(u8) -> i8 {u8_as_i8}>(move _343, u8_as_i8) -> bb234; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:98:5: 98:28
                                         // + user_ty: UserType(18)
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8 {u8_as_i8}) -> Foo<i8> {Foo::<u8>::map_in_place::<i8, fn(u8) -> i8 {u8_as_i8}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:99:23: 99:31
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
    }

    bb234: {
        _338 = eq::<Foo<i8>>(move _339, move _342) -> bb235; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Foo<i8>, Foo<i8>) -> bool {eq::<Foo<i8>>}, val: Value(<ZST>) }
    }

    bb235: {
        _337 = Not(move _338);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _337) -> [0: bb237, otherwise: bb236]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb236: {
        _344 = core::panicking::panic(const "assertion failed: eq(C(Foo(b\\'f\\'), u8_as_i8), Foo::<u8>::map_in_place(Foo(b\\'f\\'), u8_as_i8))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb237: {
        _349 = const {alloc17: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>, val: Value(Scalar(alloc17)) }
        _348 = (*_349);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _350 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:99:12: 99:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:99:12: 99:21
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _351 = u8_as_i8 as fn(u8) -> i8 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:99:23: 99:31
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:99:23: 99:31
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
        _347 = move _348(move _350, move _351) -> bb238; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb238: {
        _353 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:99:12: 99:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:99:12: 99:21
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _352 = Foo::<u8>::map_in_place::<i8, fn(u8) -> i8 {u8_as_i8}>(move _353, u8_as_i8) -> bb239; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:98:5: 98:28
                                         // + user_ty: UserType(19)
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8 {u8_as_i8}) -> Foo<i8> {Foo::<u8>::map_in_place::<i8, fn(u8) -> i8 {u8_as_i8}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:99:23: 99:31
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
    }

    bb239: {
        _346 = eq::<Foo<i8>>(move _347, move _352) -> bb240; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Foo<i8>, Foo<i8>) -> bool {eq::<Foo<i8>>}, val: Value(<ZST>) }
    }

    bb240: {
        _345 = Not(move _346);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _345) -> [0: bb242, otherwise: bb241]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb241: {
        _354 = core::panicking::panic(const "assertion failed: eq(S(Foo(b\\'f\\'), u8_as_i8), Foo::<u8>::map_in_place(Foo(b\\'f\\'), u8_as_i8))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb242: {
        _358 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:99:12: 99:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:99:12: 99:21
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _359 = u8_as_i8 as fn(u8) -> i8 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:99:23: 99:31
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:99:23: 99:31
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
        _357 = const _(move _358, move _359) -> bb243; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>, val: Unevaluated(main::C, [], None) }
    }

    bb243: {
        _362 = const {alloc17: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>, val: Value(Scalar(alloc17)) }
        _361 = (*_362);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _363 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:99:12: 99:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:99:12: 99:21
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _364 = u8_as_i8 as fn(u8) -> i8 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:99:23: 99:31
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:99:23: 99:31
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
        _360 = move _361(move _363, move _364) -> bb244; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb244: {
        _356 = eq::<Foo<i8>>(move _357, move _360) -> bb245; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Foo<i8>, Foo<i8>) -> bool {eq::<Foo<i8>>}, val: Value(<ZST>) }
    }

    bb245: {
        _355 = Not(move _356);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _355) -> [0: bb247, otherwise: bb246]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb246: {
        _365 = core::panicking::panic(const "assertion failed: eq(C(Foo(b\\'f\\'), u8_as_i8), S(Foo(b\\'f\\'), u8_as_i8))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb247: {
        _369 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:101:12: 101:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:101:12: 101:21
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _370 = u8_as_i8 as fn(u8) -> i8 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:101:23: 101:31
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:101:23: 101:31
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
        _368 = const _(move _369, move _370) -> bb248; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>, val: Unevaluated(main::C, [], None) }
    }

    bb248: {
        _372 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:101:12: 101:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:101:12: 101:21
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _373 = u8_as_i8 as fn(u8) -> i8 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:101:23: 101:31
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:101:23: 101:31
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
        _371 = Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>(move _372, move _373) -> bb249; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:100:5: 100:48
                                         // + user_ty: UserType(20)
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> {Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>}, val: Value(<ZST>) }
    }

    bb249: {
        _367 = eq::<Foo<i8>>(move _368, move _371) -> bb250; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Foo<i8>, Foo<i8>) -> bool {eq::<Foo<i8>>}, val: Value(<ZST>) }
    }

    bb250: {
        _366 = Not(move _367);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _366) -> [0: bb252, otherwise: bb251]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb251: {
        _374 = core::panicking::panic(const "assertion failed: eq(C(Foo(b\\'f\\'), u8_as_i8),\\n    Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>(Foo(b\\'f\\'), u8_as_i8))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb252: {
        _379 = const {alloc18: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>, val: Value(Scalar(alloc18)) }
        _378 = (*_379);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _380 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:101:12: 101:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:101:12: 101:21
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _381 = u8_as_i8 as fn(u8) -> i8 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:101:23: 101:31
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:101:23: 101:31
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
        _377 = move _378(move _380, move _381) -> bb253; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb253: {
        _383 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:101:12: 101:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:101:12: 101:21
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _384 = u8_as_i8 as fn(u8) -> i8 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:101:23: 101:31
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:101:23: 101:31
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
        _382 = Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>(move _383, move _384) -> bb254; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:100:5: 100:48
                                         // + user_ty: UserType(21)
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> {Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>}, val: Value(<ZST>) }
    }

    bb254: {
        _376 = eq::<Foo<i8>>(move _377, move _382) -> bb255; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Foo<i8>, Foo<i8>) -> bool {eq::<Foo<i8>>}, val: Value(<ZST>) }
    }

    bb255: {
        _375 = Not(move _376);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _375) -> [0: bb257, otherwise: bb256]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb256: {
        _385 = core::panicking::panic(const "assertion failed: eq(S(Foo(b\\'f\\'), u8_as_i8),\\n    Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>(Foo(b\\'f\\'), u8_as_i8))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb257: {
        _389 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:101:12: 101:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:101:12: 101:21
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _390 = u8_as_i8 as fn(u8) -> i8 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:101:23: 101:31
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:101:23: 101:31
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
        _388 = const _(move _389, move _390) -> bb258; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>, val: Unevaluated(main::C, [], None) }
    }

    bb258: {
        _393 = const {alloc18: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>, val: Value(Scalar(alloc18)) }
        _392 = (*_393);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _394 = const Foo::<u8>(102_u8);  // scope 0 at ui/ufcs-polymorphic-paths.rs:101:12: 101:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:101:12: 101:21
                                         // + literal: Const { ty: Foo<u8>, val: Value(Scalar(0x66)) }
        _395 = u8_as_i8 as fn(u8) -> i8 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:101:23: 101:31
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:101:23: 101:31
                                         // + literal: Const { ty: fn(u8) -> i8 {u8_as_i8}, val: Value(<ZST>) }
        _391 = move _392(move _394, move _395) -> bb259; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb259: {
        _387 = eq::<Foo<i8>>(move _388, move _391) -> bb260; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Foo<i8>, Foo<i8>) -> bool {eq::<Foo<i8>>}, val: Value(<ZST>) }
    }

    bb260: {
        _386 = Not(move _387);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _386) -> [0: bb262, otherwise: bb261]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb261: {
        _396 = core::panicking::panic(const "assertion failed: eq(C(Foo(b\\'f\\'), u8_as_i8), S(Foo(b\\'f\\'), u8_as_i8))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb262: {
        _399 = const _() -> bb263;       // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn() -> usize, val: Unevaluated(main::C, [], None) }
    }

    bb263: {
        _400 = <bool as Size>::size() -> bb264; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:104:5: 104:15
                                         // + literal: Const { ty: fn() -> usize {<bool as Size>::size}, val: Value(<ZST>) }
    }

    bb264: {
        _398 = eq::<usize>(move _399, move _400) -> bb265; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(usize, usize) -> bool {eq::<usize>}, val: Value(<ZST>) }
    }

    bb265: {
        _397 = Not(move _398);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _397) -> [0: bb267, otherwise: bb266]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb266: {
        _401 = core::panicking::panic(const "assertion failed: eq(C(), bool::size())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb267: {
        _406 = const {alloc19: &fn() -> usize}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn() -> usize, val: Value(Scalar(alloc19)) }
        _405 = (*_406);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _404 = move _405() -> bb268;     // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb268: {
        _407 = <bool as Size>::size() -> bb269; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:104:5: 104:15
                                         // + literal: Const { ty: fn() -> usize {<bool as Size>::size}, val: Value(<ZST>) }
    }

    bb269: {
        _403 = eq::<usize>(move _404, move _407) -> bb270; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(usize, usize) -> bool {eq::<usize>}, val: Value(<ZST>) }
    }

    bb270: {
        _402 = Not(move _403);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _402) -> [0: bb272, otherwise: bb271]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb271: {
        _408 = core::panicking::panic(const "assertion failed: eq(S(), bool::size())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb272: {
        _411 = const _() -> bb273;       // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn() -> usize, val: Unevaluated(main::C, [], None) }
    }

    bb273: {
        _414 = const {alloc19: &fn() -> usize}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn() -> usize, val: Value(Scalar(alloc19)) }
        _413 = (*_414);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _412 = move _413() -> bb274;     // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb274: {
        _410 = eq::<usize>(move _411, move _412) -> bb275; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(usize, usize) -> bool {eq::<usize>}, val: Value(<ZST>) }
    }

    bb275: {
        _409 = Not(move _410);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _409) -> [0: bb277, otherwise: bb276]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb276: {
        _415 = core::panicking::panic(const "assertion failed: eq(C(), S())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb277: {
        _418 = const _() -> bb278;       // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn() -> usize, val: Unevaluated(main::C, [], None) }
    }

    bb278: {
        _419 = <bool as Size>::size() -> bb279; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:105:5: 105:17
                                         // + literal: Const { ty: fn() -> usize {<bool as Size>::size}, val: Value(<ZST>) }
    }

    bb279: {
        _417 = eq::<usize>(move _418, move _419) -> bb280; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(usize, usize) -> bool {eq::<usize>}, val: Value(<ZST>) }
    }

    bb280: {
        _416 = Not(move _417);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _416) -> [0: bb282, otherwise: bb281]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb281: {
        _420 = core::panicking::panic(const "assertion failed: eq(C(), <bool>::size())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb282: {
        _425 = const {alloc20: &fn() -> usize}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn() -> usize, val: Value(Scalar(alloc20)) }
        _424 = (*_425);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _423 = move _424() -> bb283;     // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb283: {
        _426 = <bool as Size>::size() -> bb284; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:105:5: 105:17
                                         // + literal: Const { ty: fn() -> usize {<bool as Size>::size}, val: Value(<ZST>) }
    }

    bb284: {
        _422 = eq::<usize>(move _423, move _426) -> bb285; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(usize, usize) -> bool {eq::<usize>}, val: Value(<ZST>) }
    }

    bb285: {
        _421 = Not(move _422);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _421) -> [0: bb287, otherwise: bb286]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb286: {
        _427 = core::panicking::panic(const "assertion failed: eq(S(), <bool>::size())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb287: {
        _430 = const _() -> bb288;       // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn() -> usize, val: Unevaluated(main::C, [], None) }
    }

    bb288: {
        _433 = const {alloc20: &fn() -> usize}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn() -> usize, val: Value(Scalar(alloc20)) }
        _432 = (*_433);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _431 = move _432() -> bb289;     // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb289: {
        _429 = eq::<usize>(move _430, move _431) -> bb290; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(usize, usize) -> bool {eq::<usize>}, val: Value(<ZST>) }
    }

    bb290: {
        _428 = Not(move _429);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _428) -> [0: bb292, otherwise: bb291]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb291: {
        _434 = core::panicking::panic(const "assertion failed: eq(C(), S())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb292: {
        _437 = const _() -> bb293;       // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn() -> usize, val: Unevaluated(main::C, [], None) }
    }

    bb293: {
        _438 = <bool as Size>::size() -> bb294; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:106:5: 106:25
                                         // + literal: Const { ty: fn() -> usize {<bool as Size>::size}, val: Value(<ZST>) }
    }

    bb294: {
        _436 = eq::<usize>(move _437, move _438) -> bb295; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(usize, usize) -> bool {eq::<usize>}, val: Value(<ZST>) }
    }

    bb295: {
        _435 = Not(move _436);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _435) -> [0: bb297, otherwise: bb296]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb296: {
        _439 = core::panicking::panic(const "assertion failed: eq(C(), <bool as Size>::size())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb297: {
        _444 = const {alloc21: &fn() -> usize}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn() -> usize, val: Value(Scalar(alloc21)) }
        _443 = (*_444);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _442 = move _443() -> bb298;     // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb298: {
        _445 = <bool as Size>::size() -> bb299; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:106:5: 106:25
                                         // + literal: Const { ty: fn() -> usize {<bool as Size>::size}, val: Value(<ZST>) }
    }

    bb299: {
        _441 = eq::<usize>(move _442, move _445) -> bb300; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(usize, usize) -> bool {eq::<usize>}, val: Value(<ZST>) }
    }

    bb300: {
        _440 = Not(move _441);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _440) -> [0: bb302, otherwise: bb301]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb301: {
        _446 = core::panicking::panic(const "assertion failed: eq(S(), <bool as Size>::size())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb302: {
        _449 = const _() -> bb303;       // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn() -> usize, val: Unevaluated(main::C, [], None) }
    }

    bb303: {
        _452 = const {alloc21: &fn() -> usize}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn() -> usize, val: Value(Scalar(alloc21)) }
        _451 = (*_452);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _450 = move _451() -> bb304;     // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb304: {
        _448 = eq::<usize>(move _449, move _450) -> bb305; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(usize, usize) -> bool {eq::<usize>}, val: Value(<ZST>) }
    }

    bb305: {
        _447 = Not(move _448);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _447) -> [0: bb307, otherwise: bb306]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb306: {
        _453 = core::panicking::panic(const "assertion failed: eq(C(), S())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb307: {
        _456 = const _() -> bb308;       // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn() -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb308: {
        _457 = <i32 as Default>::default() -> bb309; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:108:5: 108:21
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Default>::default}, val: Value(<ZST>) }
    }

    bb309: {
        _455 = eq::<i32>(move _456, move _457) -> bb310; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb310: {
        _454 = Not(move _455);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _454) -> [0: bb312, otherwise: bb311]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb311: {
        _458 = core::panicking::panic(const "assertion failed: eq(C(), Default::default())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb312: {
        _463 = const {alloc22: &fn() -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn() -> i32, val: Value(Scalar(alloc22)) }
        _462 = (*_463);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _461 = move _462() -> bb313;     // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb313: {
        _464 = <i32 as Default>::default() -> bb314; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:108:5: 108:21
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Default>::default}, val: Value(<ZST>) }
    }

    bb314: {
        _460 = eq::<i32>(move _461, move _464) -> bb315; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb315: {
        _459 = Not(move _460);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _459) -> [0: bb317, otherwise: bb316]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb316: {
        _465 = core::panicking::panic(const "assertion failed: eq(S(), Default::default())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb317: {
        _468 = const _() -> bb318;       // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn() -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb318: {
        _471 = const {alloc22: &fn() -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn() -> i32, val: Value(Scalar(alloc22)) }
        _470 = (*_471);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _469 = move _470() -> bb319;     // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb319: {
        _467 = eq::<i32>(move _468, move _469) -> bb320; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb320: {
        _466 = Not(move _467);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _466) -> [0: bb322, otherwise: bb321]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb321: {
        _472 = core::panicking::panic(const "assertion failed: eq(C(), S())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb322: {
        _475 = const _() -> bb323;       // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn() -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb323: {
        _476 = <i32 as Default>::default() -> bb324; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:109:5: 109:17
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Default>::default}, val: Value(<ZST>) }
    }

    bb324: {
        _474 = eq::<i32>(move _475, move _476) -> bb325; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb325: {
        _473 = Not(move _474);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _473) -> [0: bb327, otherwise: bb326]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb326: {
        _477 = core::panicking::panic(const "assertion failed: eq(C(), i32::default())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb327: {
        _482 = const {alloc23: &fn() -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn() -> i32, val: Value(Scalar(alloc23)) }
        _481 = (*_482);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _480 = move _481() -> bb328;     // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb328: {
        _483 = <i32 as Default>::default() -> bb329; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:109:5: 109:17
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Default>::default}, val: Value(<ZST>) }
    }

    bb329: {
        _479 = eq::<i32>(move _480, move _483) -> bb330; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb330: {
        _478 = Not(move _479);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _478) -> [0: bb332, otherwise: bb331]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb331: {
        _484 = core::panicking::panic(const "assertion failed: eq(S(), i32::default())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb332: {
        _487 = const _() -> bb333;       // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn() -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb333: {
        _490 = const {alloc23: &fn() -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn() -> i32, val: Value(Scalar(alloc23)) }
        _489 = (*_490);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _488 = move _489() -> bb334;     // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb334: {
        _486 = eq::<i32>(move _487, move _488) -> bb335; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb335: {
        _485 = Not(move _486);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _485) -> [0: bb337, otherwise: bb336]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb336: {
        _491 = core::panicking::panic(const "assertion failed: eq(C(), S())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb337: {
        _494 = const _() -> bb338;       // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn() -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb338: {
        _495 = <i32 as Default>::default() -> bb339; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:110:5: 110:19
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Default>::default}, val: Value(<ZST>) }
    }

    bb339: {
        _493 = eq::<i32>(move _494, move _495) -> bb340; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb340: {
        _492 = Not(move _493);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _492) -> [0: bb342, otherwise: bb341]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb341: {
        _496 = core::panicking::panic(const "assertion failed: eq(C(), <i32>::default())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb342: {
        _501 = const {alloc24: &fn() -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn() -> i32, val: Value(Scalar(alloc24)) }
        _500 = (*_501);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _499 = move _500() -> bb343;     // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb343: {
        _502 = <i32 as Default>::default() -> bb344; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:110:5: 110:19
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Default>::default}, val: Value(<ZST>) }
    }

    bb344: {
        _498 = eq::<i32>(move _499, move _502) -> bb345; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb345: {
        _497 = Not(move _498);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _497) -> [0: bb347, otherwise: bb346]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb346: {
        _503 = core::panicking::panic(const "assertion failed: eq(S(), <i32>::default())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb347: {
        _506 = const _() -> bb348;       // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn() -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb348: {
        _509 = const {alloc24: &fn() -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn() -> i32, val: Value(Scalar(alloc24)) }
        _508 = (*_509);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _507 = move _508() -> bb349;     // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb349: {
        _505 = eq::<i32>(move _506, move _507) -> bb350; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb350: {
        _504 = Not(move _505);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _504) -> [0: bb352, otherwise: bb351]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb351: {
        _510 = core::panicking::panic(const "assertion failed: eq(C(), S())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb352: {
        _513 = const _() -> bb353;       // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn() -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb353: {
        _514 = <i32 as Default>::default() -> bb354; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:111:5: 111:30
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Default>::default}, val: Value(<ZST>) }
    }

    bb354: {
        _512 = eq::<i32>(move _513, move _514) -> bb355; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb355: {
        _511 = Not(move _512);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _511) -> [0: bb357, otherwise: bb356]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb356: {
        _515 = core::panicking::panic(const "assertion failed: eq(C(), <i32 as Default>::default())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb357: {
        _520 = const {alloc25: &fn() -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn() -> i32, val: Value(Scalar(alloc25)) }
        _519 = (*_520);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _518 = move _519() -> bb358;     // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb358: {
        _521 = <i32 as Default>::default() -> bb359; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:111:5: 111:30
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Default>::default}, val: Value(<ZST>) }
    }

    bb359: {
        _517 = eq::<i32>(move _518, move _521) -> bb360; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb360: {
        _516 = Not(move _517);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _516) -> [0: bb362, otherwise: bb361]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb361: {
        _522 = core::panicking::panic(const "assertion failed: eq(S(), <i32 as Default>::default())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb362: {
        _525 = const _() -> bb363;       // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn() -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb363: {
        _528 = const {alloc25: &fn() -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn() -> i32, val: Value(Scalar(alloc25)) }
        _527 = (*_528);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _526 = move _527() -> bb364;     // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb364: {
        _524 = eq::<i32>(move _525, move _526) -> bb365; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb365: {
        _523 = Not(move _524);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _523) -> [0: bb367, otherwise: bb366]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb366: {
        _529 = core::panicking::panic(const "assertion failed: eq(C(), S())"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb367: {
        _535 = dummy_rng() -> bb368;     // scope 0 at ui/ufcs-polymorphic-paths.rs:113:49: 113:60
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:113:49: 113:58
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb368: {
        _534 = &mut _535;                // scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
        _533 = &mut (*_534);             // scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
        _532 = const _(move _533) -> bb369; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb369: {
        _539 = dummy_rng() -> bb370;     // scope 0 at ui/ufcs-polymorphic-paths.rs:113:49: 113:60
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:113:49: 113:58
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb370: {
        _538 = &mut _539;                // scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
        _537 = &mut (*_538);             // scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
        _536 = <i32 as Rand>::rand::<XorShiftRng>(move _537) -> bb371; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:113:5: 113:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
    }

    bb371: {
        _531 = eq::<i32>(move _532, move _536) -> bb372; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb372: {
        _530 = Not(move _531);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _530) -> [0: bb374, otherwise: bb373]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb373: {
        _540 = core::panicking::panic(const "assertion failed: eq(C(&mut dummy_rng()), Rand::rand(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb374: {
        _545 = const {alloc26: &for<'a> fn(&'a mut XorShiftRng) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &for<'a> fn(&'a mut XorShiftRng) -> i32, val: Value(Scalar(alloc26)) }
        _544 = (*_545);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _548 = dummy_rng() -> bb375;     // scope 0 at ui/ufcs-polymorphic-paths.rs:113:49: 113:60
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:113:49: 113:58
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb375: {
        _547 = &mut _548;                // scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
        _546 = &mut (*_547);             // scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
        _543 = move _544(move _546) -> bb376; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb376: {
        _552 = dummy_rng() -> bb377;     // scope 0 at ui/ufcs-polymorphic-paths.rs:113:49: 113:60
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:113:49: 113:58
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb377: {
        _551 = &mut _552;                // scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
        _550 = &mut (*_551);             // scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
        _549 = <i32 as Rand>::rand::<XorShiftRng>(move _550) -> bb378; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:113:5: 113:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
    }

    bb378: {
        _542 = eq::<i32>(move _543, move _549) -> bb379; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb379: {
        _541 = Not(move _542);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _541) -> [0: bb381, otherwise: bb380]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb380: {
        _553 = core::panicking::panic(const "assertion failed: eq(S(&mut dummy_rng()), Rand::rand(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb381: {
        _559 = dummy_rng() -> bb382;     // scope 0 at ui/ufcs-polymorphic-paths.rs:113:49: 113:60
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:113:49: 113:58
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb382: {
        _558 = &mut _559;                // scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
        _557 = &mut (*_558);             // scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
        _556 = const _(move _557) -> bb383; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb383: {
        _562 = const {alloc26: &for<'a> fn(&'a mut XorShiftRng) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &for<'a> fn(&'a mut XorShiftRng) -> i32, val: Value(Scalar(alloc26)) }
        _561 = (*_562);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _565 = dummy_rng() -> bb384;     // scope 0 at ui/ufcs-polymorphic-paths.rs:113:49: 113:60
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:113:49: 113:58
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb384: {
        _564 = &mut _565;                // scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
        _563 = &mut (*_564);             // scope 0 at ui/ufcs-polymorphic-paths.rs:113:44: 113:60
        _560 = move _561(move _563) -> bb385; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb385: {
        _555 = eq::<i32>(move _556, move _560) -> bb386; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb386: {
        _554 = Not(move _555);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _554) -> [0: bb388, otherwise: bb387]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb387: {
        _566 = core::panicking::panic(const "assertion failed: eq(C(&mut dummy_rng()), S(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb388: {
        _572 = dummy_rng() -> bb389;     // scope 0 at ui/ufcs-polymorphic-paths.rs:114:48: 114:59
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:114:48: 114:57
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb389: {
        _571 = &mut _572;                // scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
        _570 = &mut (*_571);             // scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
        _569 = const _(move _570) -> bb390; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb390: {
        _576 = dummy_rng() -> bb391;     // scope 0 at ui/ufcs-polymorphic-paths.rs:114:48: 114:59
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:114:48: 114:57
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb391: {
        _575 = &mut _576;                // scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
        _574 = &mut (*_575);             // scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
        _573 = <i32 as Rand>::rand::<XorShiftRng>(move _574) -> bb392; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:114:5: 114:14
                                         // + user_ty: UserType(22)
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
    }

    bb392: {
        _568 = eq::<i32>(move _569, move _573) -> bb393; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb393: {
        _567 = Not(move _568);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _567) -> [0: bb395, otherwise: bb394]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb394: {
        _577 = core::panicking::panic(const "assertion failed: eq(C(&mut dummy_rng()), i32::rand(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb395: {
        _582 = const {alloc27: &for<'a> fn(&'a mut XorShiftRng) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &for<'a> fn(&'a mut XorShiftRng) -> i32, val: Value(Scalar(alloc27)) }
        _581 = (*_582);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _585 = dummy_rng() -> bb396;     // scope 0 at ui/ufcs-polymorphic-paths.rs:114:48: 114:59
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:114:48: 114:57
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb396: {
        _584 = &mut _585;                // scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
        _583 = &mut (*_584);             // scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
        _580 = move _581(move _583) -> bb397; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb397: {
        _589 = dummy_rng() -> bb398;     // scope 0 at ui/ufcs-polymorphic-paths.rs:114:48: 114:59
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:114:48: 114:57
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb398: {
        _588 = &mut _589;                // scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
        _587 = &mut (*_588);             // scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
        _586 = <i32 as Rand>::rand::<XorShiftRng>(move _587) -> bb399; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:114:5: 114:14
                                         // + user_ty: UserType(23)
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
    }

    bb399: {
        _579 = eq::<i32>(move _580, move _586) -> bb400; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb400: {
        _578 = Not(move _579);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _578) -> [0: bb402, otherwise: bb401]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb401: {
        _590 = core::panicking::panic(const "assertion failed: eq(S(&mut dummy_rng()), i32::rand(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb402: {
        _596 = dummy_rng() -> bb403;     // scope 0 at ui/ufcs-polymorphic-paths.rs:114:48: 114:59
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:114:48: 114:57
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb403: {
        _595 = &mut _596;                // scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
        _594 = &mut (*_595);             // scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
        _593 = const _(move _594) -> bb404; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb404: {
        _599 = const {alloc27: &for<'a> fn(&'a mut XorShiftRng) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &for<'a> fn(&'a mut XorShiftRng) -> i32, val: Value(Scalar(alloc27)) }
        _598 = (*_599);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _602 = dummy_rng() -> bb405;     // scope 0 at ui/ufcs-polymorphic-paths.rs:114:48: 114:59
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:114:48: 114:57
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb405: {
        _601 = &mut _602;                // scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
        _600 = &mut (*_601);             // scope 0 at ui/ufcs-polymorphic-paths.rs:114:43: 114:59
        _597 = move _598(move _600) -> bb406; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb406: {
        _592 = eq::<i32>(move _593, move _597) -> bb407; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb407: {
        _591 = Not(move _592);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _591) -> [0: bb409, otherwise: bb408]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb408: {
        _603 = core::panicking::panic(const "assertion failed: eq(C(&mut dummy_rng()), S(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb409: {
        _609 = dummy_rng() -> bb410;     // scope 0 at ui/ufcs-polymorphic-paths.rs:115:50: 115:61
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:115:50: 115:59
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb410: {
        _608 = &mut _609;                // scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
        _607 = &mut (*_608);             // scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
        _606 = const _(move _607) -> bb411; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb411: {
        _613 = dummy_rng() -> bb412;     // scope 0 at ui/ufcs-polymorphic-paths.rs:115:50: 115:61
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:115:50: 115:59
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb412: {
        _612 = &mut _613;                // scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
        _611 = &mut (*_612);             // scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
        _610 = <i32 as Rand>::rand::<XorShiftRng>(move _611) -> bb413; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:115:5: 115:16
                                         // + user_ty: UserType(24)
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
    }

    bb413: {
        _605 = eq::<i32>(move _606, move _610) -> bb414; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb414: {
        _604 = Not(move _605);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _604) -> [0: bb416, otherwise: bb415]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb415: {
        _614 = core::panicking::panic(const "assertion failed: eq(C(&mut dummy_rng()), <i32>::rand(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb416: {
        _619 = const {alloc28: &for<'a> fn(&'a mut XorShiftRng) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &for<'a> fn(&'a mut XorShiftRng) -> i32, val: Value(Scalar(alloc28)) }
        _618 = (*_619);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _622 = dummy_rng() -> bb417;     // scope 0 at ui/ufcs-polymorphic-paths.rs:115:50: 115:61
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:115:50: 115:59
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb417: {
        _621 = &mut _622;                // scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
        _620 = &mut (*_621);             // scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
        _617 = move _618(move _620) -> bb418; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb418: {
        _626 = dummy_rng() -> bb419;     // scope 0 at ui/ufcs-polymorphic-paths.rs:115:50: 115:61
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:115:50: 115:59
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb419: {
        _625 = &mut _626;                // scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
        _624 = &mut (*_625);             // scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
        _623 = <i32 as Rand>::rand::<XorShiftRng>(move _624) -> bb420; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:115:5: 115:16
                                         // + user_ty: UserType(25)
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
    }

    bb420: {
        _616 = eq::<i32>(move _617, move _623) -> bb421; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb421: {
        _615 = Not(move _616);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _615) -> [0: bb423, otherwise: bb422]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb422: {
        _627 = core::panicking::panic(const "assertion failed: eq(S(&mut dummy_rng()), <i32>::rand(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb423: {
        _633 = dummy_rng() -> bb424;     // scope 0 at ui/ufcs-polymorphic-paths.rs:115:50: 115:61
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:115:50: 115:59
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb424: {
        _632 = &mut _633;                // scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
        _631 = &mut (*_632);             // scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
        _630 = const _(move _631) -> bb425; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb425: {
        _636 = const {alloc28: &for<'a> fn(&'a mut XorShiftRng) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &for<'a> fn(&'a mut XorShiftRng) -> i32, val: Value(Scalar(alloc28)) }
        _635 = (*_636);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _639 = dummy_rng() -> bb426;     // scope 0 at ui/ufcs-polymorphic-paths.rs:115:50: 115:61
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:115:50: 115:59
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb426: {
        _638 = &mut _639;                // scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
        _637 = &mut (*_638);             // scope 0 at ui/ufcs-polymorphic-paths.rs:115:45: 115:61
        _634 = move _635(move _637) -> bb427; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb427: {
        _629 = eq::<i32>(move _630, move _634) -> bb428; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb428: {
        _628 = Not(move _629);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _628) -> [0: bb430, otherwise: bb429]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb429: {
        _640 = core::panicking::panic(const "assertion failed: eq(C(&mut dummy_rng()), S(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb430: {
        _646 = dummy_rng() -> bb431;     // scope 0 at ui/ufcs-polymorphic-paths.rs:116:58: 116:69
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:116:58: 116:67
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb431: {
        _645 = &mut _646;                // scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
        _644 = &mut (*_645);             // scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
        _643 = const _(move _644) -> bb432; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb432: {
        _650 = dummy_rng() -> bb433;     // scope 0 at ui/ufcs-polymorphic-paths.rs:116:58: 116:69
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:116:58: 116:67
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb433: {
        _649 = &mut _650;                // scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
        _648 = &mut (*_649);             // scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
        _647 = <i32 as Rand>::rand::<XorShiftRng>(move _648) -> bb434; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:116:5: 116:24
                                         // + user_ty: UserType(26)
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
    }

    bb434: {
        _642 = eq::<i32>(move _643, move _647) -> bb435; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb435: {
        _641 = Not(move _642);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _641) -> [0: bb437, otherwise: bb436]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb436: {
        _651 = core::panicking::panic(const "assertion failed: eq(C(&mut dummy_rng()), <i32 as Rand>::rand(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb437: {
        _656 = const {alloc29: &for<'a> fn(&'a mut XorShiftRng) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &for<'a> fn(&'a mut XorShiftRng) -> i32, val: Value(Scalar(alloc29)) }
        _655 = (*_656);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _659 = dummy_rng() -> bb438;     // scope 0 at ui/ufcs-polymorphic-paths.rs:116:58: 116:69
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:116:58: 116:67
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb438: {
        _658 = &mut _659;                // scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
        _657 = &mut (*_658);             // scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
        _654 = move _655(move _657) -> bb439; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb439: {
        _663 = dummy_rng() -> bb440;     // scope 0 at ui/ufcs-polymorphic-paths.rs:116:58: 116:69
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:116:58: 116:67
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb440: {
        _662 = &mut _663;                // scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
        _661 = &mut (*_662);             // scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
        _660 = <i32 as Rand>::rand::<XorShiftRng>(move _661) -> bb441; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:116:5: 116:24
                                         // + user_ty: UserType(27)
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
    }

    bb441: {
        _653 = eq::<i32>(move _654, move _660) -> bb442; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb442: {
        _652 = Not(move _653);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _652) -> [0: bb444, otherwise: bb443]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb443: {
        _664 = core::panicking::panic(const "assertion failed: eq(S(&mut dummy_rng()), <i32 as Rand>::rand(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb444: {
        _670 = dummy_rng() -> bb445;     // scope 0 at ui/ufcs-polymorphic-paths.rs:116:58: 116:69
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:116:58: 116:67
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb445: {
        _669 = &mut _670;                // scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
        _668 = &mut (*_669);             // scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
        _667 = const _(move _668) -> bb446; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb446: {
        _673 = const {alloc29: &for<'a> fn(&'a mut XorShiftRng) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &for<'a> fn(&'a mut XorShiftRng) -> i32, val: Value(Scalar(alloc29)) }
        _672 = (*_673);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _676 = dummy_rng() -> bb447;     // scope 0 at ui/ufcs-polymorphic-paths.rs:116:58: 116:69
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:116:58: 116:67
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb447: {
        _675 = &mut _676;                // scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
        _674 = &mut (*_675);             // scope 0 at ui/ufcs-polymorphic-paths.rs:116:53: 116:69
        _671 = move _672(move _674) -> bb448; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb448: {
        _666 = eq::<i32>(move _667, move _671) -> bb449; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb449: {
        _665 = Not(move _666);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _665) -> [0: bb451, otherwise: bb450]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb450: {
        _677 = core::panicking::panic(const "assertion failed: eq(C(&mut dummy_rng()), S(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb451: {
        _683 = dummy_rng() -> bb452;     // scope 0 at ui/ufcs-polymorphic-paths.rs:117:61: 117:72
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:117:61: 117:70
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb452: {
        _682 = &mut _683;                // scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
        _681 = &mut (*_682);             // scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
        _680 = const _(move _681) -> bb453; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb453: {
        _687 = dummy_rng() -> bb454;     // scope 0 at ui/ufcs-polymorphic-paths.rs:117:61: 117:72
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:117:61: 117:70
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb454: {
        _686 = &mut _687;                // scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
        _685 = &mut (*_686);             // scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
        _684 = <i32 as Rand>::rand::<XorShiftRng>(move _685) -> bb455; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:117:5: 117:27
                                         // + user_ty: UserType(28)
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
    }

    bb455: {
        _679 = eq::<i32>(move _680, move _684) -> bb456; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb456: {
        _678 = Not(move _679);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _678) -> [0: bb458, otherwise: bb457]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb457: {
        _688 = core::panicking::panic(const "assertion failed: eq(C(&mut dummy_rng()), Rand::rand::<DummyRng>(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb458: {
        _693 = const {alloc30: &for<'a> fn(&'a mut XorShiftRng) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &for<'a> fn(&'a mut XorShiftRng) -> i32, val: Value(Scalar(alloc30)) }
        _692 = (*_693);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _696 = dummy_rng() -> bb459;     // scope 0 at ui/ufcs-polymorphic-paths.rs:117:61: 117:72
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:117:61: 117:70
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb459: {
        _695 = &mut _696;                // scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
        _694 = &mut (*_695);             // scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
        _691 = move _692(move _694) -> bb460; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb460: {
        _700 = dummy_rng() -> bb461;     // scope 0 at ui/ufcs-polymorphic-paths.rs:117:61: 117:72
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:117:61: 117:70
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb461: {
        _699 = &mut _700;                // scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
        _698 = &mut (*_699);             // scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
        _697 = <i32 as Rand>::rand::<XorShiftRng>(move _698) -> bb462; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:117:5: 117:27
                                         // + user_ty: UserType(29)
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
    }

    bb462: {
        _690 = eq::<i32>(move _691, move _697) -> bb463; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb463: {
        _689 = Not(move _690);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _689) -> [0: bb465, otherwise: bb464]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb464: {
        _701 = core::panicking::panic(const "assertion failed: eq(S(&mut dummy_rng()), Rand::rand::<DummyRng>(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb465: {
        _707 = dummy_rng() -> bb466;     // scope 0 at ui/ufcs-polymorphic-paths.rs:117:61: 117:72
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:117:61: 117:70
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb466: {
        _706 = &mut _707;                // scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
        _705 = &mut (*_706);             // scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
        _704 = const _(move _705) -> bb467; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb467: {
        _710 = const {alloc30: &for<'a> fn(&'a mut XorShiftRng) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &for<'a> fn(&'a mut XorShiftRng) -> i32, val: Value(Scalar(alloc30)) }
        _709 = (*_710);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _713 = dummy_rng() -> bb468;     // scope 0 at ui/ufcs-polymorphic-paths.rs:117:61: 117:72
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:117:61: 117:70
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb468: {
        _712 = &mut _713;                // scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
        _711 = &mut (*_712);             // scope 0 at ui/ufcs-polymorphic-paths.rs:117:56: 117:72
        _708 = move _709(move _711) -> bb469; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb469: {
        _703 = eq::<i32>(move _704, move _708) -> bb470; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb470: {
        _702 = Not(move _703);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _702) -> [0: bb472, otherwise: bb471]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb471: {
        _714 = core::panicking::panic(const "assertion failed: eq(C(&mut dummy_rng()), S(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb472: {
        _720 = dummy_rng() -> bb473;     // scope 0 at ui/ufcs-polymorphic-paths.rs:118:60: 118:71
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:118:60: 118:69
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb473: {
        _719 = &mut _720;                // scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
        _718 = &mut (*_719);             // scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
        _717 = const _(move _718) -> bb474; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb474: {
        _724 = dummy_rng() -> bb475;     // scope 0 at ui/ufcs-polymorphic-paths.rs:118:60: 118:71
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:118:60: 118:69
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb475: {
        _723 = &mut _724;                // scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
        _722 = &mut (*_723);             // scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
        _721 = <i32 as Rand>::rand::<XorShiftRng>(move _722) -> bb476; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:118:5: 118:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
    }

    bb476: {
        _716 = eq::<i32>(move _717, move _721) -> bb477; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb477: {
        _715 = Not(move _716);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _715) -> [0: bb479, otherwise: bb478]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb478: {
        _725 = core::panicking::panic(const "assertion failed: eq(C(&mut dummy_rng()), i32::rand::<DummyRng>(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb479: {
        _730 = const {alloc31: &for<'a> fn(&'a mut XorShiftRng) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &for<'a> fn(&'a mut XorShiftRng) -> i32, val: Value(Scalar(alloc31)) }
        _729 = (*_730);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _733 = dummy_rng() -> bb480;     // scope 0 at ui/ufcs-polymorphic-paths.rs:118:60: 118:71
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:118:60: 118:69
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb480: {
        _732 = &mut _733;                // scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
        _731 = &mut (*_732);             // scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
        _728 = move _729(move _731) -> bb481; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb481: {
        _737 = dummy_rng() -> bb482;     // scope 0 at ui/ufcs-polymorphic-paths.rs:118:60: 118:71
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:118:60: 118:69
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb482: {
        _736 = &mut _737;                // scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
        _735 = &mut (*_736);             // scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
        _734 = <i32 as Rand>::rand::<XorShiftRng>(move _735) -> bb483; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:118:5: 118:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
    }

    bb483: {
        _727 = eq::<i32>(move _728, move _734) -> bb484; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb484: {
        _726 = Not(move _727);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _726) -> [0: bb486, otherwise: bb485]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb485: {
        _738 = core::panicking::panic(const "assertion failed: eq(S(&mut dummy_rng()), i32::rand::<DummyRng>(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb486: {
        _744 = dummy_rng() -> bb487;     // scope 0 at ui/ufcs-polymorphic-paths.rs:118:60: 118:71
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:118:60: 118:69
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb487: {
        _743 = &mut _744;                // scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
        _742 = &mut (*_743);             // scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
        _741 = const _(move _742) -> bb488; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb488: {
        _747 = const {alloc31: &for<'a> fn(&'a mut XorShiftRng) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &for<'a> fn(&'a mut XorShiftRng) -> i32, val: Value(Scalar(alloc31)) }
        _746 = (*_747);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _750 = dummy_rng() -> bb489;     // scope 0 at ui/ufcs-polymorphic-paths.rs:118:60: 118:71
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:118:60: 118:69
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb489: {
        _749 = &mut _750;                // scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
        _748 = &mut (*_749);             // scope 0 at ui/ufcs-polymorphic-paths.rs:118:55: 118:71
        _745 = move _746(move _748) -> bb490; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb490: {
        _740 = eq::<i32>(move _741, move _745) -> bb491; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb491: {
        _739 = Not(move _740);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _739) -> [0: bb493, otherwise: bb492]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb492: {
        _751 = core::panicking::panic(const "assertion failed: eq(C(&mut dummy_rng()), S(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb493: {
        _757 = dummy_rng() -> bb494;     // scope 0 at ui/ufcs-polymorphic-paths.rs:119:62: 119:73
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:119:62: 119:71
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb494: {
        _756 = &mut _757;                // scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
        _755 = &mut (*_756);             // scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
        _754 = const _(move _755) -> bb495; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb495: {
        _761 = dummy_rng() -> bb496;     // scope 0 at ui/ufcs-polymorphic-paths.rs:119:62: 119:73
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:119:62: 119:71
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb496: {
        _760 = &mut _761;                // scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
        _759 = &mut (*_760);             // scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
        _758 = <i32 as Rand>::rand::<XorShiftRng>(move _759) -> bb497; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:119:5: 119:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
    }

    bb497: {
        _753 = eq::<i32>(move _754, move _758) -> bb498; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb498: {
        _752 = Not(move _753);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _752) -> [0: bb500, otherwise: bb499]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb499: {
        _762 = core::panicking::panic(const "assertion failed: eq(C(&mut dummy_rng()), <i32>::rand::<DummyRng>(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb500: {
        _767 = const {alloc32: &for<'a> fn(&'a mut XorShiftRng) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &for<'a> fn(&'a mut XorShiftRng) -> i32, val: Value(Scalar(alloc32)) }
        _766 = (*_767);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _770 = dummy_rng() -> bb501;     // scope 0 at ui/ufcs-polymorphic-paths.rs:119:62: 119:73
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:119:62: 119:71
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb501: {
        _769 = &mut _770;                // scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
        _768 = &mut (*_769);             // scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
        _765 = move _766(move _768) -> bb502; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb502: {
        _774 = dummy_rng() -> bb503;     // scope 0 at ui/ufcs-polymorphic-paths.rs:119:62: 119:73
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:119:62: 119:71
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb503: {
        _773 = &mut _774;                // scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
        _772 = &mut (*_773);             // scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
        _771 = <i32 as Rand>::rand::<XorShiftRng>(move _772) -> bb504; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:119:5: 119:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
    }

    bb504: {
        _764 = eq::<i32>(move _765, move _771) -> bb505; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb505: {
        _763 = Not(move _764);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _763) -> [0: bb507, otherwise: bb506]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb506: {
        _775 = core::panicking::panic(const "assertion failed: eq(S(&mut dummy_rng()), <i32>::rand::<DummyRng>(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb507: {
        _781 = dummy_rng() -> bb508;     // scope 0 at ui/ufcs-polymorphic-paths.rs:119:62: 119:73
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:119:62: 119:71
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb508: {
        _780 = &mut _781;                // scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
        _779 = &mut (*_780);             // scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
        _778 = const _(move _779) -> bb509; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb509: {
        _784 = const {alloc32: &for<'a> fn(&'a mut XorShiftRng) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &for<'a> fn(&'a mut XorShiftRng) -> i32, val: Value(Scalar(alloc32)) }
        _783 = (*_784);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _787 = dummy_rng() -> bb510;     // scope 0 at ui/ufcs-polymorphic-paths.rs:119:62: 119:73
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:119:62: 119:71
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb510: {
        _786 = &mut _787;                // scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
        _785 = &mut (*_786);             // scope 0 at ui/ufcs-polymorphic-paths.rs:119:57: 119:73
        _782 = move _783(move _785) -> bb511; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb511: {
        _777 = eq::<i32>(move _778, move _782) -> bb512; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb512: {
        _776 = Not(move _777);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _776) -> [0: bb514, otherwise: bb513]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb513: {
        _788 = core::panicking::panic(const "assertion failed: eq(C(&mut dummy_rng()), S(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb514: {
        _794 = dummy_rng() -> bb515;     // scope 0 at ui/ufcs-polymorphic-paths.rs:120:70: 120:81
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:120:70: 120:79
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb515: {
        _793 = &mut _794;                // scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
        _792 = &mut (*_793);             // scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
        _791 = const _(move _792) -> bb516; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb516: {
        _798 = dummy_rng() -> bb517;     // scope 0 at ui/ufcs-polymorphic-paths.rs:120:70: 120:81
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:120:70: 120:79
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb517: {
        _797 = &mut _798;                // scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
        _796 = &mut (*_797);             // scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
        _795 = <i32 as Rand>::rand::<XorShiftRng>(move _796) -> bb518; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:120:5: 120:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
    }

    bb518: {
        _790 = eq::<i32>(move _791, move _795) -> bb519; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb519: {
        _789 = Not(move _790);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _789) -> [0: bb521, otherwise: bb520]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb520: {
        _799 = core::panicking::panic(const "assertion failed: eq(C(&mut dummy_rng()), <i32 as Rand>::rand::<DummyRng>(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb521: {
        _804 = const {alloc33: &for<'a> fn(&'a mut XorShiftRng) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &for<'a> fn(&'a mut XorShiftRng) -> i32, val: Value(Scalar(alloc33)) }
        _803 = (*_804);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _807 = dummy_rng() -> bb522;     // scope 0 at ui/ufcs-polymorphic-paths.rs:120:70: 120:81
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:120:70: 120:79
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb522: {
        _806 = &mut _807;                // scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
        _805 = &mut (*_806);             // scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
        _802 = move _803(move _805) -> bb523; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb523: {
        _811 = dummy_rng() -> bb524;     // scope 0 at ui/ufcs-polymorphic-paths.rs:120:70: 120:81
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:120:70: 120:79
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb524: {
        _810 = &mut _811;                // scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
        _809 = &mut (*_810);             // scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
        _808 = <i32 as Rand>::rand::<XorShiftRng>(move _809) -> bb525; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:120:5: 120:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
    }

    bb525: {
        _801 = eq::<i32>(move _802, move _808) -> bb526; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb526: {
        _800 = Not(move _801);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _800) -> [0: bb528, otherwise: bb527]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb527: {
        _812 = core::panicking::panic(const "assertion failed: eq(S(&mut dummy_rng()), <i32 as Rand>::rand::<DummyRng>(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb528: {
        _818 = dummy_rng() -> bb529;     // scope 0 at ui/ufcs-polymorphic-paths.rs:120:70: 120:81
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:120:70: 120:79
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb529: {
        _817 = &mut _818;                // scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
        _816 = &mut (*_817);             // scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
        _815 = const _(move _816) -> bb530; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb530: {
        _821 = const {alloc33: &for<'a> fn(&'a mut XorShiftRng) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &for<'a> fn(&'a mut XorShiftRng) -> i32, val: Value(Scalar(alloc33)) }
        _820 = (*_821);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _824 = dummy_rng() -> bb531;     // scope 0 at ui/ufcs-polymorphic-paths.rs:120:70: 120:81
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:120:70: 120:79
                                         // + literal: Const { ty: fn() -> XorShiftRng {dummy_rng}, val: Value(<ZST>) }
    }

    bb531: {
        _823 = &mut _824;                // scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
        _822 = &mut (*_823);             // scope 0 at ui/ufcs-polymorphic-paths.rs:120:65: 120:81
        _819 = move _820(move _822) -> bb532; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb532: {
        _814 = eq::<i32>(move _815, move _819) -> bb533; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb533: {
        _813 = Not(move _814);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _813) -> [0: bb535, otherwise: bb534]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb534: {
        _825 = core::panicking::panic(const "assertion failed: eq(C(&mut dummy_rng()), S(&mut dummy_rng()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb535: {
        _1409 = const _;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:123:37: 123:39
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[23])) }
        _830 = _1409;                    // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
        _829 = _830;                     // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
        _828 = const _(move _829) -> bb536; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb536: {
        _831 = const 5_i32;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
        _827 = eq::<i32>(move _828, move _831) -> bb537; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb537: {
        _826 = Not(move _827);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _826) -> [0: bb539, otherwise: bb538]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb538: {
        _832 = core::panicking::panic(const "assertion failed: eq(C(&5), Clone::clone(&5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb539: {
        _837 = const {alloc34: &for<'a> fn(&'a i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &for<'a> fn(&'a i32) -> i32, val: Value(Scalar(alloc34)) }
        _836 = (*_837);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1408 = const _;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:123:37: 123:39
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[21])) }
        _839 = _1408;                    // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
        _838 = _839;                     // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
        _835 = move _836(move _838) -> bb540; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb540: {
        _840 = const 5_i32;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
        _834 = eq::<i32>(move _835, move _840) -> bb541; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb541: {
        _833 = Not(move _834);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _833) -> [0: bb543, otherwise: bb542]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb542: {
        _841 = core::panicking::panic(const "assertion failed: eq(S(&5), Clone::clone(&5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb543: {
        _1407 = const _;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:123:37: 123:39
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[19])) }
        _846 = _1407;                    // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
        _845 = _846;                     // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
        _844 = const _(move _845) -> bb544; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb544: {
        _849 = const {alloc34: &for<'a> fn(&'a i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &for<'a> fn(&'a i32) -> i32, val: Value(Scalar(alloc34)) }
        _848 = (*_849);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _1406 = const _;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:123:37: 123:39
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[18])) }
        _851 = _1406;                    // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
        _850 = _851;                     // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
        _847 = move _848(move _850) -> bb545; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb545: {
        _843 = eq::<i32>(move _844, move _847) -> bb546; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb546: {
        _842 = Not(move _843);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _842) -> [0: bb548, otherwise: bb547]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb547: {
        _852 = core::panicking::panic(const "assertion failed: eq(C(&5), S(&5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb548: {
        _1405 = const _;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:124:35: 124:37
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[17])) }
        _857 = _1405;                    // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
        _856 = _857;                     // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
        _855 = const _(move _856) -> bb549; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb549: {
        _858 = const 5_i32;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
        _854 = eq::<i32>(move _855, move _858) -> bb550; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb550: {
        _853 = Not(move _854);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _853) -> [0: bb552, otherwise: bb551]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb551: {
        _859 = core::panicking::panic(const "assertion failed: eq(C(&5), i32::clone(&5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb552: {
        _864 = const {alloc35: &for<'a> fn(&'a i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &for<'a> fn(&'a i32) -> i32, val: Value(Scalar(alloc35)) }
        _863 = (*_864);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1404 = const _;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:124:35: 124:37
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[15])) }
        _866 = _1404;                    // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
        _865 = _866;                     // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
        _862 = move _863(move _865) -> bb553; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb553: {
        _867 = const 5_i32;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
        _861 = eq::<i32>(move _862, move _867) -> bb554; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb554: {
        _860 = Not(move _861);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _860) -> [0: bb556, otherwise: bb555]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb555: {
        _868 = core::panicking::panic(const "assertion failed: eq(S(&5), i32::clone(&5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb556: {
        _1403 = const _;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:124:35: 124:37
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[13])) }
        _873 = _1403;                    // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
        _872 = _873;                     // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
        _871 = const _(move _872) -> bb557; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb557: {
        _876 = const {alloc35: &for<'a> fn(&'a i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &for<'a> fn(&'a i32) -> i32, val: Value(Scalar(alloc35)) }
        _875 = (*_876);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _1402 = const _;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:124:35: 124:37
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[12])) }
        _878 = _1402;                    // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
        _877 = _878;                     // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
        _874 = move _875(move _877) -> bb558; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb558: {
        _870 = eq::<i32>(move _871, move _874) -> bb559; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb559: {
        _869 = Not(move _870);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _869) -> [0: bb561, otherwise: bb560]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb560: {
        _879 = core::panicking::panic(const "assertion failed: eq(C(&5), S(&5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb561: {
        _1401 = const _;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:125:37: 125:39
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[11])) }
        _884 = _1401;                    // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
        _883 = _884;                     // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
        _882 = const _(move _883) -> bb562; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb562: {
        _885 = const 5_i32;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
        _881 = eq::<i32>(move _882, move _885) -> bb563; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb563: {
        _880 = Not(move _881);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _880) -> [0: bb565, otherwise: bb564]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb564: {
        _886 = core::panicking::panic(const "assertion failed: eq(C(&5), <i32>::clone(&5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb565: {
        _891 = const {alloc36: &for<'a> fn(&'a i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &for<'a> fn(&'a i32) -> i32, val: Value(Scalar(alloc36)) }
        _890 = (*_891);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1400 = const _;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:125:37: 125:39
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[9])) }
        _893 = _1400;                    // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
        _892 = _893;                     // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
        _889 = move _890(move _892) -> bb566; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb566: {
        _894 = const 5_i32;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
        _888 = eq::<i32>(move _889, move _894) -> bb567; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb567: {
        _887 = Not(move _888);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _887) -> [0: bb569, otherwise: bb568]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb568: {
        _895 = core::panicking::panic(const "assertion failed: eq(S(&5), <i32>::clone(&5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb569: {
        _1399 = const _;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:125:37: 125:39
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[7])) }
        _900 = _1399;                    // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
        _899 = _900;                     // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
        _898 = const _(move _899) -> bb570; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb570: {
        _903 = const {alloc36: &for<'a> fn(&'a i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &for<'a> fn(&'a i32) -> i32, val: Value(Scalar(alloc36)) }
        _902 = (*_903);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _1398 = const _;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:125:37: 125:39
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[6])) }
        _905 = _1398;                    // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
        _904 = _905;                     // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
        _901 = move _902(move _904) -> bb571; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb571: {
        _897 = eq::<i32>(move _898, move _901) -> bb572; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb572: {
        _896 = Not(move _897);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _896) -> [0: bb574, otherwise: bb573]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb573: {
        _906 = core::panicking::panic(const "assertion failed: eq(C(&5), S(&5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb574: {
        _1397 = const _;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:126:46: 126:48
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[5])) }
        _911 = _1397;                    // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
        _910 = _911;                     // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
        _909 = const _(move _910) -> bb575; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb575: {
        _912 = const 5_i32;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
        _908 = eq::<i32>(move _909, move _912) -> bb576; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb576: {
        _907 = Not(move _908);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _907) -> [0: bb578, otherwise: bb577]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb577: {
        _913 = core::panicking::panic(const "assertion failed: eq(C(&5), <i32 as Clone>::clone(&5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb578: {
        _918 = const {alloc37: &for<'a> fn(&'a i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &for<'a> fn(&'a i32) -> i32, val: Value(Scalar(alloc37)) }
        _917 = (*_918);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1396 = const _;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:126:46: 126:48
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[3])) }
        _920 = _1396;                    // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
        _919 = _920;                     // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
        _916 = move _917(move _919) -> bb579; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb579: {
        _921 = const 5_i32;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
        _915 = eq::<i32>(move _916, move _921) -> bb580; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb580: {
        _914 = Not(move _915);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _914) -> [0: bb582, otherwise: bb581]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb581: {
        _922 = core::panicking::panic(const "assertion failed: eq(S(&5), <i32 as Clone>::clone(&5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb582: {
        _1395 = const _;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:126:46: 126:48
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _927 = _1395;                    // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
        _926 = _927;                     // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
        _925 = const _(move _926) -> bb583; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb583: {
        _930 = const {alloc37: &for<'a> fn(&'a i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &for<'a> fn(&'a i32) -> i32, val: Value(Scalar(alloc37)) }
        _929 = (*_930);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _1394 = const _;                 // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:126:46: 126:48
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _932 = _1394;                    // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
        _931 = _932;                     // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
        _928 = move _929(move _931) -> bb584; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb584: {
        _924 = eq::<i32>(move _925, move _928) -> bb585; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb585: {
        _923 = Not(move _924);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _923) -> [0: bb587, otherwise: bb586]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb586: {
        _933 = core::panicking::panic(const "assertion failed: eq(C(&5), S(&5))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb587: {
        _938 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:71
        _937 = <Option<i32> as IntoIterator>::into_iter(move _938) -> bb588; // scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:83
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:128:72: 128:81
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb588: {
        _1442 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
        _936 = const _(move _937) -> bb589; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb589: {
        _941 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:71
        _940 = <Option<i32> as IntoIterator>::into_iter(move _941) -> [return: bb590, unwind: bb960]; // scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:83
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:128:72: 128:81
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb590: {
        _939 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>(move _940) -> [return: bb591, unwind: bb960]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:128:5: 128:28
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
    }

    bb591: {
        _1442 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
        _935 = eq::<Vec<i32>>(move _936, move _939) -> [return: bb592, unwind: bb960]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb592: {
        _1442 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
        _934 = Not(move _935);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _934) -> [0: bb594, otherwise: bb593]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb593: {
        _942 = core::panicking::panic(const "assertion failed: eq(C(Some(5).into_iter()), FromIterator::from_iter(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb594: {
        _947 = const {alloc38: &fn(std::option::IntoIter<i32>) -> Vec<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Value(Scalar(alloc38)) }
        _946 = (*_947);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _949 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:71
        _948 = <Option<i32> as IntoIterator>::into_iter(move _949) -> bb595; // scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:83
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:128:72: 128:81
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb595: {
        _1441 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
        _945 = move _946(move _948) -> bb596; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb596: {
        _952 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:71
        _951 = <Option<i32> as IntoIterator>::into_iter(move _952) -> [return: bb597, unwind: bb958]; // scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:83
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:128:72: 128:81
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb597: {
        _950 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>(move _951) -> [return: bb598, unwind: bb958]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:128:5: 128:28
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
    }

    bb598: {
        _1441 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
        _944 = eq::<Vec<i32>>(move _945, move _950) -> [return: bb599, unwind: bb958]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb599: {
        _1441 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
        _943 = Not(move _944);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _943) -> [0: bb601, otherwise: bb600]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb600: {
        _953 = core::panicking::panic(const "assertion failed: eq(S(Some(5).into_iter()), FromIterator::from_iter(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb601: {
        _958 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:71
        _957 = <Option<i32> as IntoIterator>::into_iter(move _958) -> bb602; // scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:83
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:128:72: 128:81
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb602: {
        _1440 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
        _956 = const _(move _957) -> bb603; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb603: {
        _961 = const {alloc38: &fn(std::option::IntoIter<i32>) -> Vec<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Value(Scalar(alloc38)) }
        _960 = (*_961);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _963 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:71
        _962 = <Option<i32> as IntoIterator>::into_iter(move _963) -> [return: bb604, unwind: bb956]; // scope 0 at ui/ufcs-polymorphic-paths.rs:128:64: 128:83
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:128:72: 128:81
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb604: {
        _959 = move _960(move _962) -> [return: bb605, unwind: bb956]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb605: {
        _1440 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
        _955 = eq::<Vec<i32>>(move _956, move _959) -> [return: bb606, unwind: bb956]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb606: {
        _1440 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
        _954 = Not(move _955);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _954) -> [0: bb608, otherwise: bb607]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb607: {
        _964 = core::panicking::panic(const "assertion failed: eq(C(Some(5).into_iter()), S(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb608: {
        _969 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:62
        _968 = <Option<i32> as IntoIterator>::into_iter(move _969) -> bb609; // scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:74
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:129:63: 129:72
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb609: {
        _1439 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
        _967 = const _(move _968) -> bb610; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb610: {
        _972 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:62
        _971 = <Option<i32> as IntoIterator>::into_iter(move _972) -> [return: bb611, unwind: bb954]; // scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:74
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:129:63: 129:72
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb611: {
        _970 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>(move _971) -> [return: bb612, unwind: bb954]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:129:5: 129:19
                                         // + user_ty: UserType(30)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
    }

    bb612: {
        _1439 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
        _966 = eq::<Vec<i32>>(move _967, move _970) -> [return: bb613, unwind: bb954]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb613: {
        _1439 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
        _965 = Not(move _966);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _965) -> [0: bb615, otherwise: bb614]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb614: {
        _973 = core::panicking::panic(const "assertion failed: eq(C(Some(5).into_iter()), Vec::from_iter(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb615: {
        _978 = const {alloc39: &fn(std::option::IntoIter<i32>) -> Vec<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Value(Scalar(alloc39)) }
        _977 = (*_978);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _980 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:62
        _979 = <Option<i32> as IntoIterator>::into_iter(move _980) -> bb616; // scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:74
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:129:63: 129:72
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb616: {
        _1438 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
        _976 = move _977(move _979) -> bb617; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb617: {
        _983 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:62
        _982 = <Option<i32> as IntoIterator>::into_iter(move _983) -> [return: bb618, unwind: bb952]; // scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:74
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:129:63: 129:72
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb618: {
        _981 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>(move _982) -> [return: bb619, unwind: bb952]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:129:5: 129:19
                                         // + user_ty: UserType(31)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
    }

    bb619: {
        _1438 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
        _975 = eq::<Vec<i32>>(move _976, move _981) -> [return: bb620, unwind: bb952]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb620: {
        _1438 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
        _974 = Not(move _975);           // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _974) -> [0: bb622, otherwise: bb621]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb621: {
        _984 = core::panicking::panic(const "assertion failed: eq(S(Some(5).into_iter()), Vec::from_iter(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb622: {
        _989 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:62
        _988 = <Option<i32> as IntoIterator>::into_iter(move _989) -> bb623; // scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:74
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:129:63: 129:72
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb623: {
        _1437 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
        _987 = const _(move _988) -> bb624; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb624: {
        _992 = const {alloc39: &fn(std::option::IntoIter<i32>) -> Vec<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Value(Scalar(alloc39)) }
        _991 = (*_992);                  // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _994 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:62
        _993 = <Option<i32> as IntoIterator>::into_iter(move _994) -> [return: bb625, unwind: bb950]; // scope 0 at ui/ufcs-polymorphic-paths.rs:129:55: 129:74
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:129:63: 129:72
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb625: {
        _990 = move _991(move _993) -> [return: bb626, unwind: bb950]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb626: {
        _1437 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
        _986 = eq::<Vec<i32>>(move _987, move _990) -> [return: bb627, unwind: bb950]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb627: {
        _1437 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
        _985 = Not(move _986);           // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _985) -> [0: bb629, otherwise: bb628]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb628: {
        _995 = core::panicking::panic(const "assertion failed: eq(C(Some(5).into_iter()), S(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb629: {
        _1000 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:67
        _999 = <Option<i32> as IntoIterator>::into_iter(move _1000) -> bb630; // scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:79
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:130:68: 130:77
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb630: {
        _1436 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
        _998 = const _(move _999) -> bb631; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb631: {
        _1003 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:67
        _1002 = <Option<i32> as IntoIterator>::into_iter(move _1003) -> [return: bb632, unwind: bb948]; // scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:79
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:130:68: 130:77
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb632: {
        _1001 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>(move _1002) -> [return: bb633, unwind: bb948]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:130:5: 130:24
                                         // + user_ty: UserType(32)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
    }

    bb633: {
        _1436 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
        _997 = eq::<Vec<i32>>(move _998, move _1001) -> [return: bb634, unwind: bb948]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb634: {
        _1436 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
        _996 = Not(move _997);           // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _996) -> [0: bb636, otherwise: bb635]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb635: {
        _1004 = core::panicking::panic(const "assertion failed: eq(C(Some(5).into_iter()), <Vec<_>>::from_iter(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb636: {
        _1009 = const {alloc40: &fn(std::option::IntoIter<i32>) -> Vec<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Value(Scalar(alloc40)) }
        _1008 = (*_1009);                // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1011 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:67
        _1010 = <Option<i32> as IntoIterator>::into_iter(move _1011) -> bb637; // scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:79
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:130:68: 130:77
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb637: {
        _1435 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
        _1007 = move _1008(move _1010) -> bb638; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb638: {
        _1014 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:67
        _1013 = <Option<i32> as IntoIterator>::into_iter(move _1014) -> [return: bb639, unwind: bb946]; // scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:79
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:130:68: 130:77
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb639: {
        _1012 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>(move _1013) -> [return: bb640, unwind: bb946]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:130:5: 130:24
                                         // + user_ty: UserType(33)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
    }

    bb640: {
        _1435 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
        _1006 = eq::<Vec<i32>>(move _1007, move _1012) -> [return: bb641, unwind: bb946]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb641: {
        _1435 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
        _1005 = Not(move _1006);         // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _1005) -> [0: bb643, otherwise: bb642]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb642: {
        _1015 = core::panicking::panic(const "assertion failed: eq(S(Some(5).into_iter()), <Vec<_>>::from_iter(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb643: {
        _1020 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:67
        _1019 = <Option<i32> as IntoIterator>::into_iter(move _1020) -> bb644; // scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:79
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:130:68: 130:77
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb644: {
        _1434 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
        _1018 = const _(move _1019) -> bb645; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb645: {
        _1023 = const {alloc40: &fn(std::option::IntoIter<i32>) -> Vec<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Value(Scalar(alloc40)) }
        _1022 = (*_1023);                // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _1025 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:67
        _1024 = <Option<i32> as IntoIterator>::into_iter(move _1025) -> [return: bb646, unwind: bb944]; // scope 0 at ui/ufcs-polymorphic-paths.rs:130:60: 130:79
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:130:68: 130:77
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb646: {
        _1021 = move _1022(move _1024) -> [return: bb647, unwind: bb944]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb647: {
        _1434 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
        _1017 = eq::<Vec<i32>>(move _1018, move _1021) -> [return: bb648, unwind: bb944]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb648: {
        _1434 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
        _1016 = Not(move _1017);         // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _1016) -> [0: bb650, otherwise: bb649]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb649: {
        _1026 = core::panicking::panic(const "assertion failed: eq(C(Some(5).into_iter()), S(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb650: {
        _1031 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:17
        _1030 = <Option<i32> as IntoIterator>::into_iter(move _1031) -> bb651; // scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:132:18: 132:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb651: {
        _1433 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
        _1029 = const _(move _1030) -> bb652; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb652: {
        _1034 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:17
        _1033 = <Option<i32> as IntoIterator>::into_iter(move _1034) -> [return: bb653, unwind: bb942]; // scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:132:18: 132:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb653: {
        _1032 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>(move _1033) -> [return: bb654, unwind: bb942]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:131:5: 131:43
                                         // + user_ty: UserType(34)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
    }

    bb654: {
        _1433 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
        _1028 = eq::<Vec<i32>>(move _1029, move _1032) -> [return: bb655, unwind: bb942]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb655: {
        _1433 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
        _1027 = Not(move _1028);         // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _1027) -> [0: bb657, otherwise: bb656]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb656: {
        _1035 = core::panicking::panic(const "assertion failed: eq(C(Some(5).into_iter()),\\n    <Vec<_> as FromIterator<_>>::from_iter(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb657: {
        _1040 = const {alloc41: &fn(std::option::IntoIter<i32>) -> Vec<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Value(Scalar(alloc41)) }
        _1039 = (*_1040);                // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1042 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:17
        _1041 = <Option<i32> as IntoIterator>::into_iter(move _1042) -> bb658; // scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:132:18: 132:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb658: {
        _1432 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
        _1038 = move _1039(move _1041) -> bb659; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb659: {
        _1045 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:17
        _1044 = <Option<i32> as IntoIterator>::into_iter(move _1045) -> [return: bb660, unwind: bb940]; // scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:132:18: 132:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb660: {
        _1043 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>(move _1044) -> [return: bb661, unwind: bb940]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:131:5: 131:43
                                         // + user_ty: UserType(35)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
    }

    bb661: {
        _1432 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
        _1037 = eq::<Vec<i32>>(move _1038, move _1043) -> [return: bb662, unwind: bb940]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb662: {
        _1432 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
        _1036 = Not(move _1037);         // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _1036) -> [0: bb664, otherwise: bb663]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb663: {
        _1046 = core::panicking::panic(const "assertion failed: eq(S(Some(5).into_iter()),\\n    <Vec<_> as FromIterator<_>>::from_iter(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb664: {
        _1051 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:17
        _1050 = <Option<i32> as IntoIterator>::into_iter(move _1051) -> bb665; // scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:132:18: 132:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb665: {
        _1431 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
        _1049 = const _(move _1050) -> bb666; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb666: {
        _1054 = const {alloc41: &fn(std::option::IntoIter<i32>) -> Vec<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Value(Scalar(alloc41)) }
        _1053 = (*_1054);                // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _1056 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:17
        _1055 = <Option<i32> as IntoIterator>::into_iter(move _1056) -> [return: bb667, unwind: bb938]; // scope 0 at ui/ufcs-polymorphic-paths.rs:132:10: 132:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:132:18: 132:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb667: {
        _1052 = move _1053(move _1055) -> [return: bb668, unwind: bb938]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb668: {
        _1431 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
        _1048 = eq::<Vec<i32>>(move _1049, move _1052) -> [return: bb669, unwind: bb938]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb669: {
        _1431 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
        _1047 = Not(move _1048);         // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _1047) -> [0: bb671, otherwise: bb670]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb670: {
        _1057 = core::panicking::panic(const "assertion failed: eq(C(Some(5).into_iter()), S(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb671: {
        _1062 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:17
        _1061 = <Option<i32> as IntoIterator>::into_iter(move _1062) -> bb672; // scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:134:18: 134:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb672: {
        _1430 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
        _1060 = const _(move _1061) -> bb673; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb673: {
        _1065 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:17
        _1064 = <Option<i32> as IntoIterator>::into_iter(move _1065) -> [return: bb674, unwind: bb936]; // scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:134:18: 134:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb674: {
        _1063 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>(move _1064) -> [return: bb675, unwind: bb936]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:133:5: 133:45
                                         // + user_ty: UserType(36)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
    }

    bb675: {
        _1430 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
        _1059 = eq::<Vec<i32>>(move _1060, move _1063) -> [return: bb676, unwind: bb936]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb676: {
        _1430 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
        _1058 = Not(move _1059);         // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _1058) -> [0: bb678, otherwise: bb677]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb677: {
        _1066 = core::panicking::panic(const "assertion failed: eq(C(Some(5).into_iter()),\\n    <Vec<i32> as FromIterator<_>>::from_iter(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb678: {
        _1071 = const {alloc42: &fn(std::option::IntoIter<i32>) -> Vec<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Value(Scalar(alloc42)) }
        _1070 = (*_1071);                // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1073 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:17
        _1072 = <Option<i32> as IntoIterator>::into_iter(move _1073) -> bb679; // scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:134:18: 134:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb679: {
        _1429 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
        _1069 = move _1070(move _1072) -> bb680; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb680: {
        _1076 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:17
        _1075 = <Option<i32> as IntoIterator>::into_iter(move _1076) -> [return: bb681, unwind: bb934]; // scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:134:18: 134:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb681: {
        _1074 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>(move _1075) -> [return: bb682, unwind: bb934]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:133:5: 133:45
                                         // + user_ty: UserType(37)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
    }

    bb682: {
        _1429 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
        _1068 = eq::<Vec<i32>>(move _1069, move _1074) -> [return: bb683, unwind: bb934]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb683: {
        _1429 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
        _1067 = Not(move _1068);         // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _1067) -> [0: bb685, otherwise: bb684]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb684: {
        _1077 = core::panicking::panic(const "assertion failed: eq(S(Some(5).into_iter()),\\n    <Vec<i32> as FromIterator<_>>::from_iter(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb685: {
        _1082 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:17
        _1081 = <Option<i32> as IntoIterator>::into_iter(move _1082) -> bb686; // scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:134:18: 134:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb686: {
        _1428 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
        _1080 = const _(move _1081) -> bb687; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb687: {
        _1085 = const {alloc42: &fn(std::option::IntoIter<i32>) -> Vec<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Value(Scalar(alloc42)) }
        _1084 = (*_1085);                // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _1087 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:17
        _1086 = <Option<i32> as IntoIterator>::into_iter(move _1087) -> [return: bb688, unwind: bb932]; // scope 0 at ui/ufcs-polymorphic-paths.rs:134:10: 134:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:134:18: 134:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb688: {
        _1083 = move _1084(move _1086) -> [return: bb689, unwind: bb932]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb689: {
        _1428 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
        _1079 = eq::<Vec<i32>>(move _1080, move _1083) -> [return: bb690, unwind: bb932]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb690: {
        _1428 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
        _1078 = Not(move _1079);         // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _1078) -> [0: bb692, otherwise: bb691]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb691: {
        _1088 = core::panicking::panic(const "assertion failed: eq(C(Some(5).into_iter()), S(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb692: {
        _1093 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:17
        _1092 = <Option<i32> as IntoIterator>::into_iter(move _1093) -> bb693; // scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:136:18: 136:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb693: {
        _1427 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
        _1091 = const _(move _1092) -> bb694; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb694: {
        _1096 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:17
        _1095 = <Option<i32> as IntoIterator>::into_iter(move _1096) -> [return: bb695, unwind: bb930]; // scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:136:18: 136:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb695: {
        _1094 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>(move _1095) -> [return: bb696, unwind: bb930]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:135:5: 135:47
                                         // + user_ty: UserType(38)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
    }

    bb696: {
        _1427 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
        _1090 = eq::<Vec<i32>>(move _1091, move _1094) -> [return: bb697, unwind: bb930]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb697: {
        _1427 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
        _1089 = Not(move _1090);         // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _1089) -> [0: bb699, otherwise: bb698]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb698: {
        _1097 = core::panicking::panic(const "assertion failed: eq(C(Some(5).into_iter()),\\n    FromIterator::from_iter::<OptionIter<i32>>(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb699: {
        _1102 = const {alloc43: &fn(std::option::IntoIter<i32>) -> Vec<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Value(Scalar(alloc43)) }
        _1101 = (*_1102);                // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1104 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:17
        _1103 = <Option<i32> as IntoIterator>::into_iter(move _1104) -> bb700; // scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:136:18: 136:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb700: {
        _1426 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
        _1100 = move _1101(move _1103) -> bb701; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb701: {
        _1107 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:17
        _1106 = <Option<i32> as IntoIterator>::into_iter(move _1107) -> [return: bb702, unwind: bb928]; // scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:136:18: 136:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb702: {
        _1105 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>(move _1106) -> [return: bb703, unwind: bb928]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:135:5: 135:47
                                         // + user_ty: UserType(39)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
    }

    bb703: {
        _1426 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
        _1099 = eq::<Vec<i32>>(move _1100, move _1105) -> [return: bb704, unwind: bb928]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb704: {
        _1426 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
        _1098 = Not(move _1099);         // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _1098) -> [0: bb706, otherwise: bb705]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb705: {
        _1108 = core::panicking::panic(const "assertion failed: eq(S(Some(5).into_iter()),\\n    FromIterator::from_iter::<OptionIter<i32>>(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb706: {
        _1113 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:17
        _1112 = <Option<i32> as IntoIterator>::into_iter(move _1113) -> bb707; // scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:136:18: 136:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb707: {
        _1425 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
        _1111 = const _(move _1112) -> bb708; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb708: {
        _1116 = const {alloc43: &fn(std::option::IntoIter<i32>) -> Vec<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Value(Scalar(alloc43)) }
        _1115 = (*_1116);                // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _1118 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:17
        _1117 = <Option<i32> as IntoIterator>::into_iter(move _1118) -> [return: bb709, unwind: bb926]; // scope 0 at ui/ufcs-polymorphic-paths.rs:136:10: 136:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:136:18: 136:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb709: {
        _1114 = move _1115(move _1117) -> [return: bb710, unwind: bb926]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb710: {
        _1425 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
        _1110 = eq::<Vec<i32>>(move _1111, move _1114) -> [return: bb711, unwind: bb926]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb711: {
        _1425 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
        _1109 = Not(move _1110);         // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _1109) -> [0: bb713, otherwise: bb712]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb712: {
        _1119 = core::panicking::panic(const "assertion failed: eq(C(Some(5).into_iter()), S(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb713: {
        _1124 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:17
        _1123 = <Option<i32> as IntoIterator>::into_iter(move _1124) -> bb714; // scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:138:18: 138:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb714: {
        _1424 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
        _1122 = const _(move _1123) -> bb715; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb715: {
        _1127 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:17
        _1126 = <Option<i32> as IntoIterator>::into_iter(move _1127) -> [return: bb716, unwind: bb924]; // scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:138:18: 138:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb716: {
        _1125 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>(move _1126) -> [return: bb717, unwind: bb924]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:137:5: 137:64
                                         // + user_ty: UserType(40)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
    }

    bb717: {
        _1424 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
        _1121 = eq::<Vec<i32>>(move _1122, move _1125) -> [return: bb718, unwind: bb924]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb718: {
        _1424 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
        _1120 = Not(move _1121);         // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _1120) -> [0: bb720, otherwise: bb719]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb719: {
        _1128 = core::panicking::panic(const "assertion failed: eq(C(Some(5).into_iter()),\\n    <Vec<i32> as\\n            FromIterator<_>>::from_iter::<OptionIter<i32>>(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb720: {
        _1133 = const {alloc44: &fn(std::option::IntoIter<i32>) -> Vec<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Value(Scalar(alloc44)) }
        _1132 = (*_1133);                // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1135 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:17
        _1134 = <Option<i32> as IntoIterator>::into_iter(move _1135) -> bb721; // scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:138:18: 138:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb721: {
        _1423 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
        _1131 = move _1132(move _1134) -> bb722; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb722: {
        _1138 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:17
        _1137 = <Option<i32> as IntoIterator>::into_iter(move _1138) -> [return: bb723, unwind: bb922]; // scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:138:18: 138:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb723: {
        _1136 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>(move _1137) -> [return: bb724, unwind: bb922]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:137:5: 137:64
                                         // + user_ty: UserType(41)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
    }

    bb724: {
        _1423 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
        _1130 = eq::<Vec<i32>>(move _1131, move _1136) -> [return: bb725, unwind: bb922]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb725: {
        _1423 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
        _1129 = Not(move _1130);         // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _1129) -> [0: bb727, otherwise: bb726]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb726: {
        _1139 = core::panicking::panic(const "assertion failed: eq(S(Some(5).into_iter()),\\n    <Vec<i32> as\\n            FromIterator<_>>::from_iter::<OptionIter<i32>>(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb727: {
        _1144 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:17
        _1143 = <Option<i32> as IntoIterator>::into_iter(move _1144) -> bb728; // scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:138:18: 138:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb728: {
        _1422 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
        _1142 = const _(move _1143) -> bb729; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Unevaluated(main::C, [], None) }
    }

    bb729: {
        _1147 = const {alloc44: &fn(std::option::IntoIter<i32>) -> Vec<i32>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(std::option::IntoIter<i32>) -> Vec<i32>, val: Value(Scalar(alloc44)) }
        _1146 = (*_1147);                // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _1149 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:17
        _1148 = <Option<i32> as IntoIterator>::into_iter(move _1149) -> [return: bb730, unwind: bb920]; // scope 0 at ui/ufcs-polymorphic-paths.rs:138:10: 138:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:138:18: 138:27
                                         // + literal: Const { ty: fn(Option<i32>) -> <Option<i32> as IntoIterator>::IntoIter {<Option<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb730: {
        _1145 = move _1146(move _1148) -> [return: bb731, unwind: bb920]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb731: {
        _1422 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
        _1141 = eq::<Vec<i32>>(move _1142, move _1145) -> [return: bb732, unwind: bb920]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Vec<i32>, Vec<i32>) -> bool {eq::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb732: {
        _1422 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
        _1140 = Not(move _1141);         // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _1140) -> [0: bb734, otherwise: bb733]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb733: {
        _1150 = core::panicking::panic(const "assertion failed: eq(C(Some(5).into_iter()), S(Some(5).into_iter()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb734: {
        _1153 = const _(const 5_i32, const 6_i32) -> bb735; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(i32, i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb735: {
        _1154 = <i32 as Add>::add(const 5_i32, const 6_i32) -> bb736; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:140:5: 140:13
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
    }

    bb736: {
        _1152 = eq::<i32>(move _1153, move _1154) -> bb737; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb737: {
        _1151 = Not(move _1152);         // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _1151) -> [0: bb739, otherwise: bb738]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb738: {
        _1155 = core::panicking::panic(const "assertion failed: eq(C(5, 6), Add::add(5, 6))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb739: {
        _1160 = const {alloc45: &fn(i32, i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(i32, i32) -> i32, val: Value(Scalar(alloc45)) }
        _1159 = (*_1160);                // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1158 = move _1159(const 5_i32, const 6_i32) -> bb740; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb740: {
        _1161 = <i32 as Add>::add(const 5_i32, const 6_i32) -> bb741; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:140:5: 140:13
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
    }

    bb741: {
        _1157 = eq::<i32>(move _1158, move _1161) -> bb742; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb742: {
        _1156 = Not(move _1157);         // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _1156) -> [0: bb744, otherwise: bb743]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb743: {
        _1162 = core::panicking::panic(const "assertion failed: eq(S(5, 6), Add::add(5, 6))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb744: {
        _1165 = const _(const 5_i32, const 6_i32) -> bb745; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(i32, i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb745: {
        _1168 = const {alloc45: &fn(i32, i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(i32, i32) -> i32, val: Value(Scalar(alloc45)) }
        _1167 = (*_1168);                // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _1166 = move _1167(const 5_i32, const 6_i32) -> bb746; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb746: {
        _1164 = eq::<i32>(move _1165, move _1166) -> bb747; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb747: {
        _1163 = Not(move _1164);         // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _1163) -> [0: bb749, otherwise: bb748]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb748: {
        _1169 = core::panicking::panic(const "assertion failed: eq(C(5, 6), S(5, 6))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb749: {
        _1172 = const _(const 5_i32, const 6_i32) -> bb750; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(i32, i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb750: {
        _1173 = <i32 as Add>::add(const 5_i32, const 6_i32) -> bb751; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:141:5: 141:13
                                         // + user_ty: UserType(42)
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
    }

    bb751: {
        _1171 = eq::<i32>(move _1172, move _1173) -> bb752; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb752: {
        _1170 = Not(move _1171);         // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _1170) -> [0: bb754, otherwise: bb753]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb753: {
        _1174 = core::panicking::panic(const "assertion failed: eq(C(5, 6), i32::add(5, 6))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb754: {
        _1179 = const {alloc46: &fn(i32, i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(i32, i32) -> i32, val: Value(Scalar(alloc46)) }
        _1178 = (*_1179);                // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1177 = move _1178(const 5_i32, const 6_i32) -> bb755; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb755: {
        _1180 = <i32 as Add>::add(const 5_i32, const 6_i32) -> bb756; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:141:5: 141:13
                                         // + user_ty: UserType(43)
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
    }

    bb756: {
        _1176 = eq::<i32>(move _1177, move _1180) -> bb757; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb757: {
        _1175 = Not(move _1176);         // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _1175) -> [0: bb759, otherwise: bb758]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb758: {
        _1181 = core::panicking::panic(const "assertion failed: eq(S(5, 6), i32::add(5, 6))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb759: {
        _1184 = const _(const 5_i32, const 6_i32) -> bb760; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(i32, i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb760: {
        _1187 = const {alloc46: &fn(i32, i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(i32, i32) -> i32, val: Value(Scalar(alloc46)) }
        _1186 = (*_1187);                // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _1185 = move _1186(const 5_i32, const 6_i32) -> bb761; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb761: {
        _1183 = eq::<i32>(move _1184, move _1185) -> bb762; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb762: {
        _1182 = Not(move _1183);         // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _1182) -> [0: bb764, otherwise: bb763]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb763: {
        _1188 = core::panicking::panic(const "assertion failed: eq(C(5, 6), S(5, 6))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb764: {
        _1191 = const _(const 5_i32, const 6_i32) -> bb765; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(i32, i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb765: {
        _1192 = <i32 as Add>::add(const 5_i32, const 6_i32) -> bb766; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:142:5: 142:15
                                         // + user_ty: UserType(44)
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
    }

    bb766: {
        _1190 = eq::<i32>(move _1191, move _1192) -> bb767; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb767: {
        _1189 = Not(move _1190);         // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _1189) -> [0: bb769, otherwise: bb768]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb768: {
        _1193 = core::panicking::panic(const "assertion failed: eq(C(5, 6), <i32>::add(5, 6))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb769: {
        _1198 = const {alloc47: &fn(i32, i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(i32, i32) -> i32, val: Value(Scalar(alloc47)) }
        _1197 = (*_1198);                // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1196 = move _1197(const 5_i32, const 6_i32) -> bb770; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb770: {
        _1199 = <i32 as Add>::add(const 5_i32, const 6_i32) -> bb771; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:142:5: 142:15
                                         // + user_ty: UserType(45)
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
    }

    bb771: {
        _1195 = eq::<i32>(move _1196, move _1199) -> bb772; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb772: {
        _1194 = Not(move _1195);         // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _1194) -> [0: bb774, otherwise: bb773]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb773: {
        _1200 = core::panicking::panic(const "assertion failed: eq(S(5, 6), <i32>::add(5, 6))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb774: {
        _1203 = const _(const 5_i32, const 6_i32) -> bb775; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(i32, i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb775: {
        _1206 = const {alloc47: &fn(i32, i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(i32, i32) -> i32, val: Value(Scalar(alloc47)) }
        _1205 = (*_1206);                // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _1204 = move _1205(const 5_i32, const 6_i32) -> bb776; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb776: {
        _1202 = eq::<i32>(move _1203, move _1204) -> bb777; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb777: {
        _1201 = Not(move _1202);         // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _1201) -> [0: bb779, otherwise: bb778]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb778: {
        _1207 = core::panicking::panic(const "assertion failed: eq(C(5, 6), S(5, 6))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb779: {
        _1210 = const _(const 5_i32, const 6_i32) -> bb780; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(i32, i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb780: {
        _1211 = <i32 as Add>::add(const 5_i32, const 6_i32) -> bb781; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:143:5: 143:25
                                         // + user_ty: UserType(46)
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
    }

    bb781: {
        _1209 = eq::<i32>(move _1210, move _1211) -> bb782; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb782: {
        _1208 = Not(move _1209);         // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _1208) -> [0: bb784, otherwise: bb783]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb783: {
        _1212 = core::panicking::panic(const "assertion failed: eq(C(5, 6), <i32 as Add<_>>::add(5, 6))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb784: {
        _1217 = const {alloc48: &fn(i32, i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(i32, i32) -> i32, val: Value(Scalar(alloc48)) }
        _1216 = (*_1217);                // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1215 = move _1216(const 5_i32, const 6_i32) -> bb785; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb785: {
        _1218 = <i32 as Add>::add(const 5_i32, const 6_i32) -> bb786; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:143:5: 143:25
                                         // + user_ty: UserType(47)
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
    }

    bb786: {
        _1214 = eq::<i32>(move _1215, move _1218) -> bb787; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb787: {
        _1213 = Not(move _1214);         // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _1213) -> [0: bb789, otherwise: bb788]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb788: {
        _1219 = core::panicking::panic(const "assertion failed: eq(S(5, 6), <i32 as Add<_>>::add(5, 6))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb789: {
        _1222 = const _(const 5_i32, const 6_i32) -> bb790; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(i32, i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb790: {
        _1225 = const {alloc48: &fn(i32, i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(i32, i32) -> i32, val: Value(Scalar(alloc48)) }
        _1224 = (*_1225);                // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _1223 = move _1224(const 5_i32, const 6_i32) -> bb791; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb791: {
        _1221 = eq::<i32>(move _1222, move _1223) -> bb792; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb792: {
        _1220 = Not(move _1221);         // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _1220) -> [0: bb794, otherwise: bb793]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb793: {
        _1226 = core::panicking::panic(const "assertion failed: eq(C(5, 6), S(5, 6))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb794: {
        _1229 = const _(const 5_i32, const 6_i32) -> bb795; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(i32, i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb795: {
        _1230 = <i32 as Add>::add(const 5_i32, const 6_i32) -> bb796; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:144:5: 144:27
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
    }

    bb796: {
        _1228 = eq::<i32>(move _1229, move _1230) -> bb797; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb797: {
        _1227 = Not(move _1228);         // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _1227) -> [0: bb799, otherwise: bb798]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb798: {
        _1231 = core::panicking::panic(const "assertion failed: eq(C(5, 6), <i32 as Add<i32>>::add(5, 6))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb799: {
        _1236 = const {alloc49: &fn(i32, i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(i32, i32) -> i32, val: Value(Scalar(alloc49)) }
        _1235 = (*_1236);                // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1234 = move _1235(const 5_i32, const 6_i32) -> bb800; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb800: {
        _1237 = <i32 as Add>::add(const 5_i32, const 6_i32) -> bb801; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:144:5: 144:27
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
    }

    bb801: {
        _1233 = eq::<i32>(move _1234, move _1237) -> bb802; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb802: {
        _1232 = Not(move _1233);         // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _1232) -> [0: bb804, otherwise: bb803]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb803: {
        _1238 = core::panicking::panic(const "assertion failed: eq(S(5, 6), <i32 as Add<i32>>::add(5, 6))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb804: {
        _1241 = const _(const 5_i32, const 6_i32) -> bb805; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(i32, i32) -> i32, val: Unevaluated(main::C, [], None) }
    }

    bb805: {
        _1244 = const {alloc49: &fn(i32, i32) -> i32}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(i32, i32) -> i32, val: Value(Scalar(alloc49)) }
        _1243 = (*_1244);                // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _1242 = move _1243(const 5_i32, const 6_i32) -> bb806; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb806: {
        _1240 = eq::<i32>(move _1241, move _1242) -> bb807; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(i32, i32) -> bool {eq::<i32>}, val: Value(<ZST>) }
    }

    bb807: {
        _1239 = Not(move _1240);         // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _1239) -> [0: bb809, otherwise: bb808]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb808: {
        _1245 = core::panicking::panic(const "assertion failed: eq(C(5, 6), S(5, 6))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb809: {
        _1251 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:147:10: 147:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1250 = _1251;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
        _1249 = <str as ToString>::to_string(move _1250) -> bb810; // scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:147:16: 147:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb810: {
        _1248 = const _(move _1249) -> bb811; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str>, val: Unevaluated(main::C, [], None) }
    }

    bb811: {
        _1421 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:32: 65:33
        _1255 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:147:10: 147:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1254 = _1255;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
        _1253 = <str as ToString>::to_string(move _1254) -> [return: bb812, unwind: bb918]; // scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:147:16: 147:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb812: {
        _1252 = <String as IntoCow<'_, str>>::into_cow(move _1253) -> [return: bb813, unwind: bb918]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:146:5: 146:21
                                         // + user_ty: UserType(48)
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str> {<String as IntoCow<'_, str>>::into_cow}, val: Value(<ZST>) }
    }

    bb813: {
        _1421 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
        _1247 = eq::<Cow<'_, str>>(move _1248, move _1252) -> [return: bb814, unwind: bb918]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Cow<'_, str>, Cow<'_, str>) -> bool {eq::<Cow<'_, str>>}, val: Value(<ZST>) }
    }

    bb814: {
        _1421 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
        _1246 = Not(move _1247);         // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _1246) -> [0: bb816, otherwise: bb815]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb815: {
        _1256 = core::panicking::panic(const "assertion failed: eq(C(\\\"foo\\\".to_string()), String::into_cow(\\\"foo\\\".to_string()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb816: {
        _1261 = const {alloc50: &fn(String) -> Cow<'_, str>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(String) -> Cow<'_, str>, val: Value(Scalar(alloc50)) }
        _1260 = (*_1261);                // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1264 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:147:10: 147:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1263 = _1264;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
        _1262 = <str as ToString>::to_string(move _1263) -> bb817; // scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:147:16: 147:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb817: {
        _1259 = move _1260(move _1262) -> bb818; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb818: {
        _1420 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:32: 66:33
        _1268 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:147:10: 147:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1267 = _1268;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
        _1266 = <str as ToString>::to_string(move _1267) -> [return: bb819, unwind: bb916]; // scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:147:16: 147:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb819: {
        _1265 = <String as IntoCow<'_, str>>::into_cow(move _1266) -> [return: bb820, unwind: bb916]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:146:5: 146:21
                                         // + user_ty: UserType(49)
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str> {<String as IntoCow<'_, str>>::into_cow}, val: Value(<ZST>) }
    }

    bb820: {
        _1420 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
        _1258 = eq::<Cow<'_, str>>(move _1259, move _1265) -> [return: bb821, unwind: bb916]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Cow<'_, str>, Cow<'_, str>) -> bool {eq::<Cow<'_, str>>}, val: Value(<ZST>) }
    }

    bb821: {
        _1420 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
        _1257 = Not(move _1258);         // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _1257) -> [0: bb823, otherwise: bb822]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb822: {
        _1269 = core::panicking::panic(const "assertion failed: eq(S(\\\"foo\\\".to_string()), String::into_cow(\\\"foo\\\".to_string()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb823: {
        _1275 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:147:10: 147:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1274 = _1275;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
        _1273 = <str as ToString>::to_string(move _1274) -> bb824; // scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:147:16: 147:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb824: {
        _1272 = const _(move _1273) -> bb825; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str>, val: Unevaluated(main::C, [], None) }
    }

    bb825: {
        _1419 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:67:32: 67:33
        _1278 = const {alloc50: &fn(String) -> Cow<'_, str>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(String) -> Cow<'_, str>, val: Value(Scalar(alloc50)) }
        _1277 = (*_1278);                // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _1281 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:147:10: 147:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1280 = _1281;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
        _1279 = <str as ToString>::to_string(move _1280) -> [return: bb826, unwind: bb914]; // scope 0 at ui/ufcs-polymorphic-paths.rs:147:10: 147:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:147:16: 147:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb826: {
        _1276 = move _1277(move _1279) -> [return: bb827, unwind: bb914]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb827: {
        _1419 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
        _1271 = eq::<Cow<'_, str>>(move _1272, move _1276) -> [return: bb828, unwind: bb914]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Cow<'_, str>, Cow<'_, str>) -> bool {eq::<Cow<'_, str>>}, val: Value(<ZST>) }
    }

    bb828: {
        _1419 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
        _1270 = Not(move _1271);         // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _1270) -> [0: bb830, otherwise: bb829]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb829: {
        _1282 = core::panicking::panic(const "assertion failed: eq(C(\\\"foo\\\".to_string()), S(\\\"foo\\\".to_string()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb830: {
        _1288 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:149:10: 149:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1287 = _1288;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
        _1286 = <str as ToString>::to_string(move _1287) -> bb831; // scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:149:16: 149:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb831: {
        _1285 = const _(move _1286) -> bb832; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str>, val: Unevaluated(main::C, [], None) }
    }

    bb832: {
        _1418 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:32: 65:33
        _1292 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:149:10: 149:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1291 = _1292;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
        _1290 = <str as ToString>::to_string(move _1291) -> [return: bb833, unwind: bb912]; // scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:149:16: 149:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb833: {
        _1289 = <String as IntoCow<'_, str>>::into_cow(move _1290) -> [return: bb834, unwind: bb912]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:148:5: 148:23
                                         // + user_ty: UserType(50)
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str> {<String as IntoCow<'_, str>>::into_cow}, val: Value(<ZST>) }
    }

    bb834: {
        _1418 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
        _1284 = eq::<Cow<'_, str>>(move _1285, move _1289) -> [return: bb835, unwind: bb912]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Cow<'_, str>, Cow<'_, str>) -> bool {eq::<Cow<'_, str>>}, val: Value(<ZST>) }
    }

    bb835: {
        _1418 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
        _1283 = Not(move _1284);         // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _1283) -> [0: bb837, otherwise: bb836]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb836: {
        _1293 = core::panicking::panic(const "assertion failed: eq(C(\\\"foo\\\".to_string()), <String>::into_cow(\\\"foo\\\".to_string()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb837: {
        _1298 = const {alloc51: &fn(String) -> Cow<'_, str>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(String) -> Cow<'_, str>, val: Value(Scalar(alloc51)) }
        _1297 = (*_1298);                // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1301 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:149:10: 149:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1300 = _1301;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
        _1299 = <str as ToString>::to_string(move _1300) -> bb838; // scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:149:16: 149:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb838: {
        _1296 = move _1297(move _1299) -> bb839; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb839: {
        _1417 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:32: 66:33
        _1305 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:149:10: 149:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1304 = _1305;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
        _1303 = <str as ToString>::to_string(move _1304) -> [return: bb840, unwind: bb910]; // scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:149:16: 149:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb840: {
        _1302 = <String as IntoCow<'_, str>>::into_cow(move _1303) -> [return: bb841, unwind: bb910]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:148:5: 148:23
                                         // + user_ty: UserType(51)
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str> {<String as IntoCow<'_, str>>::into_cow}, val: Value(<ZST>) }
    }

    bb841: {
        _1417 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
        _1295 = eq::<Cow<'_, str>>(move _1296, move _1302) -> [return: bb842, unwind: bb910]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Cow<'_, str>, Cow<'_, str>) -> bool {eq::<Cow<'_, str>>}, val: Value(<ZST>) }
    }

    bb842: {
        _1417 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
        _1294 = Not(move _1295);         // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _1294) -> [0: bb844, otherwise: bb843]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb843: {
        _1306 = core::panicking::panic(const "assertion failed: eq(S(\\\"foo\\\".to_string()), <String>::into_cow(\\\"foo\\\".to_string()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb844: {
        _1312 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:149:10: 149:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1311 = _1312;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
        _1310 = <str as ToString>::to_string(move _1311) -> bb845; // scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:149:16: 149:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb845: {
        _1309 = const _(move _1310) -> bb846; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str>, val: Unevaluated(main::C, [], None) }
    }

    bb846: {
        _1416 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:67:32: 67:33
        _1315 = const {alloc51: &fn(String) -> Cow<'_, str>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(String) -> Cow<'_, str>, val: Value(Scalar(alloc51)) }
        _1314 = (*_1315);                // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _1318 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:149:10: 149:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1317 = _1318;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
        _1316 = <str as ToString>::to_string(move _1317) -> [return: bb847, unwind: bb908]; // scope 0 at ui/ufcs-polymorphic-paths.rs:149:10: 149:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:149:16: 149:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb847: {
        _1313 = move _1314(move _1316) -> [return: bb848, unwind: bb908]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb848: {
        _1416 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
        _1308 = eq::<Cow<'_, str>>(move _1309, move _1313) -> [return: bb849, unwind: bb908]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Cow<'_, str>, Cow<'_, str>) -> bool {eq::<Cow<'_, str>>}, val: Value(<ZST>) }
    }

    bb849: {
        _1416 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
        _1307 = Not(move _1308);         // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _1307) -> [0: bb851, otherwise: bb850]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb850: {
        _1319 = core::panicking::panic(const "assertion failed: eq(C(\\\"foo\\\".to_string()), S(\\\"foo\\\".to_string()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb851: {
        _1325 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:151:10: 151:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1324 = _1325;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
        _1323 = <str as ToString>::to_string(move _1324) -> bb852; // scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:151:16: 151:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb852: {
        _1322 = const _(move _1323) -> bb853; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str>, val: Unevaluated(main::C, [], None) }
    }

    bb853: {
        _1415 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:32: 65:33
        _1329 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:151:10: 151:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1328 = _1329;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
        _1327 = <str as ToString>::to_string(move _1328) -> [return: bb854, unwind: bb906]; // scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:151:16: 151:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb854: {
        _1326 = <String as IntoCow<'_, str>>::into_cow(move _1327) -> [return: bb855, unwind: bb906]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:150:5: 150:37
                                         // + user_ty: UserType(52)
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str> {<String as IntoCow<'_, str>>::into_cow}, val: Value(<ZST>) }
    }

    bb855: {
        _1415 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
        _1321 = eq::<Cow<'_, str>>(move _1322, move _1326) -> [return: bb856, unwind: bb906]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Cow<'_, str>, Cow<'_, str>) -> bool {eq::<Cow<'_, str>>}, val: Value(<ZST>) }
    }

    bb856: {
        _1415 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
        _1320 = Not(move _1321);         // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _1320) -> [0: bb858, otherwise: bb857]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb857: {
        _1330 = core::panicking::panic(const "assertion failed: eq(C(\\\"foo\\\".to_string()), <String as IntoCow<_>>::into_cow(\\\"foo\\\".to_string()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb858: {
        _1335 = const {alloc52: &fn(String) -> Cow<'_, str>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(String) -> Cow<'_, str>, val: Value(Scalar(alloc52)) }
        _1334 = (*_1335);                // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1338 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:151:10: 151:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1337 = _1338;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
        _1336 = <str as ToString>::to_string(move _1337) -> bb859; // scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:151:16: 151:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb859: {
        _1333 = move _1334(move _1336) -> bb860; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb860: {
        _1414 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:32: 66:33
        _1342 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:151:10: 151:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1341 = _1342;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
        _1340 = <str as ToString>::to_string(move _1341) -> [return: bb861, unwind: bb904]; // scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:151:16: 151:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb861: {
        _1339 = <String as IntoCow<'_, str>>::into_cow(move _1340) -> [return: bb862, unwind: bb904]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:150:5: 150:37
                                         // + user_ty: UserType(53)
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str> {<String as IntoCow<'_, str>>::into_cow}, val: Value(<ZST>) }
    }

    bb862: {
        _1414 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
        _1332 = eq::<Cow<'_, str>>(move _1333, move _1339) -> [return: bb863, unwind: bb904]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Cow<'_, str>, Cow<'_, str>) -> bool {eq::<Cow<'_, str>>}, val: Value(<ZST>) }
    }

    bb863: {
        _1414 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
        _1331 = Not(move _1332);         // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _1331) -> [0: bb865, otherwise: bb864]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb864: {
        _1343 = core::panicking::panic(const "assertion failed: eq(S(\\\"foo\\\".to_string()), <String as IntoCow<_>>::into_cow(\\\"foo\\\".to_string()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb865: {
        _1349 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:151:10: 151:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1348 = _1349;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
        _1347 = <str as ToString>::to_string(move _1348) -> bb866; // scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:151:16: 151:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb866: {
        _1346 = const _(move _1347) -> bb867; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str>, val: Unevaluated(main::C, [], None) }
    }

    bb867: {
        _1413 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:67:32: 67:33
        _1352 = const {alloc52: &fn(String) -> Cow<'_, str>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(String) -> Cow<'_, str>, val: Value(Scalar(alloc52)) }
        _1351 = (*_1352);                // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _1355 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:151:10: 151:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1354 = _1355;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
        _1353 = <str as ToString>::to_string(move _1354) -> [return: bb868, unwind: bb902]; // scope 0 at ui/ufcs-polymorphic-paths.rs:151:10: 151:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:151:16: 151:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb868: {
        _1350 = move _1351(move _1353) -> [return: bb869, unwind: bb902]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb869: {
        _1413 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
        _1345 = eq::<Cow<'_, str>>(move _1346, move _1350) -> [return: bb870, unwind: bb902]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Cow<'_, str>, Cow<'_, str>) -> bool {eq::<Cow<'_, str>>}, val: Value(<ZST>) }
    }

    bb870: {
        _1413 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
        _1344 = Not(move _1345);         // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _1344) -> [0: bb872, otherwise: bb871]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb871: {
        _1356 = core::panicking::panic(const "assertion failed: eq(C(\\\"foo\\\".to_string()), S(\\\"foo\\\".to_string()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb872: {
        _1362 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:153:10: 153:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1361 = _1362;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
        _1360 = <str as ToString>::to_string(move _1361) -> bb873; // scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:153:16: 153:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb873: {
        _1359 = const _(move _1360) -> bb874; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:20: 65:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:20: 65:21
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str>, val: Unevaluated(main::C, [], None) }
    }

    bb874: {
        _1412 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:65:32: 65:33
        _1366 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:153:10: 153:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1365 = _1366;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
        _1364 = <str as ToString>::to_string(move _1365) -> [return: bb875, unwind: bb900]; // scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:153:16: 153:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb875: {
        _1363 = <String as IntoCow<'_, str>>::into_cow(move _1364) -> [return: bb876, unwind: bb900]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:35: 65:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:152:5: 152:46
                                         // + user_ty: UserType(54)
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str> {<String as IntoCow<'_, str>>::into_cow}, val: Value(<ZST>) }
    }

    bb876: {
        _1412 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
        _1358 = eq::<Cow<'_, str>>(move _1359, move _1363) -> [return: bb877, unwind: bb900]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:17: 65:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:17: 65:19
                                         // + literal: Const { ty: fn(Cow<'_, str>, Cow<'_, str>) -> bool {eq::<Cow<'_, str>>}, val: Value(<ZST>) }
    }

    bb877: {
        _1412 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
        _1357 = Not(move _1358);         // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
        switchInt(move _1357) -> [0: bb879, otherwise: bb878]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
    }

    bb878: {
        _1367 = core::panicking::panic(const "assertion failed: eq(C(\\\"foo\\\".to_string()),\\n    <String as IntoCow<\\'static, _>>::into_cow(\\\"foo\\\".to_string()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:65:9: 65:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb879: {
        _1372 = const {alloc53: &fn(String) -> Cow<'_, str>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:20: 66:21
                                         // + literal: Const { ty: &fn(String) -> Cow<'_, str>, val: Value(Scalar(alloc53)) }
        _1371 = (*_1372);                // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:21
        _1375 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:153:10: 153:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1374 = _1375;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
        _1373 = <str as ToString>::to_string(move _1374) -> bb880; // scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:153:16: 153:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb880: {
        _1370 = move _1371(move _1373) -> bb881; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:20: 66:33
    }

    bb881: {
        _1411 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:66:32: 66:33
        _1379 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:153:10: 153:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1378 = _1379;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
        _1377 = <str as ToString>::to_string(move _1378) -> [return: bb882, unwind: bb898]; // scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:153:16: 153:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb882: {
        _1376 = <String as IntoCow<'_, str>>::into_cow(move _1377) -> [return: bb883, unwind: bb898]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:35: 66:52
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:152:5: 152:46
                                         // + user_ty: UserType(55)
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str> {<String as IntoCow<'_, str>>::into_cow}, val: Value(<ZST>) }
    }

    bb883: {
        _1411 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
        _1369 = eq::<Cow<'_, str>>(move _1370, move _1376) -> [return: bb884, unwind: bb898]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:17: 66:53
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:17: 66:19
                                         // + literal: Const { ty: fn(Cow<'_, str>, Cow<'_, str>) -> bool {eq::<Cow<'_, str>>}, val: Value(<ZST>) }
    }

    bb884: {
        _1411 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
        _1368 = Not(move _1369);         // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
        switchInt(move _1368) -> [0: bb886, otherwise: bb885]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
    }

    bb885: {
        _1380 = core::panicking::panic(const "assertion failed: eq(S(\\\"foo\\\".to_string()),\\n    <String as IntoCow<\\'static, _>>::into_cow(\\\"foo\\\".to_string()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:66:9: 66:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb886: {
        _1386 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:153:10: 153:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1385 = _1386;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
        _1384 = <str as ToString>::to_string(move _1385) -> bb887; // scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:153:16: 153:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb887: {
        _1383 = const _(move _1384) -> bb888; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:20: 67:33
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:20: 67:21
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str>, val: Unevaluated(main::C, [], None) }
    }

    bb888: {
        _1410 = const true;              // scope 0 at ui/ufcs-polymorphic-paths.rs:67:32: 67:33
        _1389 = const {alloc53: &fn(String) -> Cow<'_, str>}; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:35: 67:36
                                         // + literal: Const { ty: &fn(String) -> Cow<'_, str>, val: Value(Scalar(alloc53)) }
        _1388 = (*_1389);                // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:36
        _1392 = const "foo";             // scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:153:10: 153:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1391 = _1392;                   // scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
        _1390 = <str as ToString>::to_string(move _1391) -> [return: bb889, unwind: bb896]; // scope 0 at ui/ufcs-polymorphic-paths.rs:153:10: 153:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:153:16: 153:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb889: {
        _1387 = move _1388(move _1390) -> [return: bb890, unwind: bb896]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:35: 67:48
    }

    bb890: {
        _1410 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
        _1382 = eq::<Cow<'_, str>>(move _1383, move _1387) -> [return: bb891, unwind: bb896]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:17: 67:49
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:17: 67:19
                                         // + literal: Const { ty: fn(Cow<'_, str>, Cow<'_, str>) -> bool {eq::<Cow<'_, str>>}, val: Value(<ZST>) }
    }

    bb891: {
        _1410 = const false;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
        _1381 = Not(move _1382);         // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
        switchInt(move _1381) -> [0: bb893, otherwise: bb892]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
    }

    bb892: {
        _1393 = core::panicking::panic(const "assertion failed: eq(C(\\\"foo\\\".to_string()), S(\\\"foo\\\".to_string()))"); // scope 0 at ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:67:9: 67:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb893: {
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:68:9: 68:9
    }

    bb894 (cleanup): {
        resume;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:62:54: 68:9
    }

    bb895 (cleanup): {
        drop(_1383) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb896 (cleanup): {
        switchInt(_1410) -> [0: bb894, otherwise: bb895]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb897 (cleanup): {
        drop(_1370) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb898 (cleanup): {
        switchInt(_1411) -> [0: bb894, otherwise: bb897]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb899 (cleanup): {
        drop(_1359) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb900 (cleanup): {
        switchInt(_1412) -> [0: bb894, otherwise: bb899]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb901 (cleanup): {
        drop(_1346) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb902 (cleanup): {
        switchInt(_1413) -> [0: bb894, otherwise: bb901]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb903 (cleanup): {
        drop(_1333) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb904 (cleanup): {
        switchInt(_1414) -> [0: bb894, otherwise: bb903]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb905 (cleanup): {
        drop(_1322) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb906 (cleanup): {
        switchInt(_1415) -> [0: bb894, otherwise: bb905]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb907 (cleanup): {
        drop(_1309) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb908 (cleanup): {
        switchInt(_1416) -> [0: bb894, otherwise: bb907]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb909 (cleanup): {
        drop(_1296) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb910 (cleanup): {
        switchInt(_1417) -> [0: bb894, otherwise: bb909]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb911 (cleanup): {
        drop(_1285) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb912 (cleanup): {
        switchInt(_1418) -> [0: bb894, otherwise: bb911]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb913 (cleanup): {
        drop(_1272) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb914 (cleanup): {
        switchInt(_1419) -> [0: bb894, otherwise: bb913]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb915 (cleanup): {
        drop(_1259) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb916 (cleanup): {
        switchInt(_1420) -> [0: bb894, otherwise: bb915]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb917 (cleanup): {
        drop(_1248) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb918 (cleanup): {
        switchInt(_1421) -> [0: bb894, otherwise: bb917]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb919 (cleanup): {
        drop(_1142) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb920 (cleanup): {
        switchInt(_1422) -> [0: bb894, otherwise: bb919]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb921 (cleanup): {
        drop(_1131) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb922 (cleanup): {
        switchInt(_1423) -> [0: bb894, otherwise: bb921]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb923 (cleanup): {
        drop(_1122) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb924 (cleanup): {
        switchInt(_1424) -> [0: bb894, otherwise: bb923]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb925 (cleanup): {
        drop(_1111) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb926 (cleanup): {
        switchInt(_1425) -> [0: bb894, otherwise: bb925]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb927 (cleanup): {
        drop(_1100) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb928 (cleanup): {
        switchInt(_1426) -> [0: bb894, otherwise: bb927]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb929 (cleanup): {
        drop(_1091) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb930 (cleanup): {
        switchInt(_1427) -> [0: bb894, otherwise: bb929]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb931 (cleanup): {
        drop(_1080) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb932 (cleanup): {
        switchInt(_1428) -> [0: bb894, otherwise: bb931]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb933 (cleanup): {
        drop(_1069) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb934 (cleanup): {
        switchInt(_1429) -> [0: bb894, otherwise: bb933]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb935 (cleanup): {
        drop(_1060) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb936 (cleanup): {
        switchInt(_1430) -> [0: bb894, otherwise: bb935]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb937 (cleanup): {
        drop(_1049) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb938 (cleanup): {
        switchInt(_1431) -> [0: bb894, otherwise: bb937]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb939 (cleanup): {
        drop(_1038) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb940 (cleanup): {
        switchInt(_1432) -> [0: bb894, otherwise: bb939]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb941 (cleanup): {
        drop(_1029) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb942 (cleanup): {
        switchInt(_1433) -> [0: bb894, otherwise: bb941]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb943 (cleanup): {
        drop(_1018) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb944 (cleanup): {
        switchInt(_1434) -> [0: bb894, otherwise: bb943]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb945 (cleanup): {
        drop(_1007) -> bb894;            // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb946 (cleanup): {
        switchInt(_1435) -> [0: bb894, otherwise: bb945]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb947 (cleanup): {
        drop(_998) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb948 (cleanup): {
        switchInt(_1436) -> [0: bb894, otherwise: bb947]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb949 (cleanup): {
        drop(_987) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb950 (cleanup): {
        switchInt(_1437) -> [0: bb894, otherwise: bb949]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb951 (cleanup): {
        drop(_976) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb952 (cleanup): {
        switchInt(_1438) -> [0: bb894, otherwise: bb951]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb953 (cleanup): {
        drop(_967) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb954 (cleanup): {
        switchInt(_1439) -> [0: bb894, otherwise: bb953]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb955 (cleanup): {
        drop(_956) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb956 (cleanup): {
        switchInt(_1440) -> [0: bb894, otherwise: bb955]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb957 (cleanup): {
        drop(_945) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb958 (cleanup): {
        switchInt(_1441) -> [0: bb894, otherwise: bb957]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb959 (cleanup): {
        drop(_936) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb960 (cleanup): {
        switchInt(_1442) -> [0: bb894, otherwise: bb959]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb961 (cleanup): {
        drop(_224) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb962 (cleanup): {
        switchInt(_1443) -> [0: bb894, otherwise: bb961]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb963 (cleanup): {
        drop(_217) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb964 (cleanup): {
        switchInt(_1444) -> [0: bb894, otherwise: bb963]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb965 (cleanup): {
        drop(_212) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb966 (cleanup): {
        switchInt(_1445) -> [0: bb894, otherwise: bb965]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb967 (cleanup): {
        drop(_205) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb968 (cleanup): {
        switchInt(_1446) -> [0: bb894, otherwise: bb967]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb969 (cleanup): {
        drop(_198) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb970 (cleanup): {
        switchInt(_1447) -> [0: bb894, otherwise: bb969]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb971 (cleanup): {
        drop(_193) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb972 (cleanup): {
        switchInt(_1448) -> [0: bb894, otherwise: bb971]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb973 (cleanup): {
        drop(_186) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb974 (cleanup): {
        switchInt(_1449) -> [0: bb894, otherwise: bb973]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb975 (cleanup): {
        drop(_179) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb976 (cleanup): {
        switchInt(_1450) -> [0: bb894, otherwise: bb975]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb977 (cleanup): {
        drop(_174) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb978 (cleanup): {
        switchInt(_1451) -> [0: bb894, otherwise: bb977]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb979 (cleanup): {
        drop(_167) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb980 (cleanup): {
        switchInt(_1452) -> [0: bb894, otherwise: bb979]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb981 (cleanup): {
        drop(_160) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb982 (cleanup): {
        switchInt(_1453) -> [0: bb894, otherwise: bb981]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb983 (cleanup): {
        drop(_155) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb984 (cleanup): {
        switchInt(_1454) -> [0: bb894, otherwise: bb983]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb985 (cleanup): {
        drop(_148) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb986 (cleanup): {
        switchInt(_1455) -> [0: bb894, otherwise: bb985]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb987 (cleanup): {
        drop(_141) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb988 (cleanup): {
        switchInt(_1456) -> [0: bb894, otherwise: bb987]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb989 (cleanup): {
        drop(_136) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb990 (cleanup): {
        switchInt(_1457) -> [0: bb894, otherwise: bb989]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb991 (cleanup): {
        drop(_129) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb992 (cleanup): {
        switchInt(_1458) -> [0: bb894, otherwise: bb991]; // scope 0 at ui/ufcs-polymorphic-paths.rs:67:48: 67:49
    }

    bb993 (cleanup): {
        drop(_122) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb994 (cleanup): {
        switchInt(_1459) -> [0: bb894, otherwise: bb993]; // scope 0 at ui/ufcs-polymorphic-paths.rs:66:52: 66:53
    }

    bb995 (cleanup): {
        drop(_117) -> bb894;             // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }

    bb996 (cleanup): {
        switchInt(_1460) -> [0: bb894, otherwise: bb995]; // scope 0 at ui/ufcs-polymorphic-paths.rs:65:52: 65:53
    }
}

alloc53 (static: main::S, size: 8, align: 8) {
    ╾──────alloc228───────╼                         │ ╾──────╼
}

alloc228 (fn: <String as IntoCow<'_, str>>::into_cow)

alloc52 (static: main::S, size: 8, align: 8) {
    ╾──────alloc228───────╼                         │ ╾──────╼
}

alloc51 (static: main::S, size: 8, align: 8) {
    ╾──────alloc228───────╼                         │ ╾──────╼
}

alloc50 (static: main::S, size: 8, align: 8) {
    ╾──────alloc228───────╼                         │ ╾──────╼
}

alloc49 (static: main::S, size: 8, align: 8) {
    ╾──────alloc217───────╼                         │ ╾──────╼
}

alloc217 (fn: <i32 as Add>::add)

alloc48 (static: main::S, size: 8, align: 8) {
    ╾──────alloc217───────╼                         │ ╾──────╼
}

alloc47 (static: main::S, size: 8, align: 8) {
    ╾──────alloc217───────╼                         │ ╾──────╼
}

alloc46 (static: main::S, size: 8, align: 8) {
    ╾──────alloc217───────╼                         │ ╾──────╼
}

alloc45 (static: main::S, size: 8, align: 8) {
    ╾──────alloc217───────╼                         │ ╾──────╼
}

alloc44 (static: main::S, size: 8, align: 8) {
    ╾──────alloc215───────╼                         │ ╾──────╼
}

alloc215 (fn: <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>)

alloc43 (static: main::S, size: 8, align: 8) {
    ╾──────alloc211───────╼                         │ ╾──────╼
}

alloc211 (fn: <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>)

alloc42 (static: main::S, size: 8, align: 8) {
    ╾──────alloc207───────╼                         │ ╾──────╼
}

alloc207 (fn: <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>)

alloc41 (static: main::S, size: 8, align: 8) {
    ╾──────alloc203───────╼                         │ ╾──────╼
}

alloc203 (fn: <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>)

alloc40 (static: main::S, size: 8, align: 8) {
    ╾──────alloc199───────╼                         │ ╾──────╼
}

alloc199 (fn: <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>)

alloc39 (static: main::S, size: 8, align: 8) {
    ╾──────alloc195───────╼                         │ ╾──────╼
}

alloc195 (fn: <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>)

alloc38 (static: main::S, size: 8, align: 8) {
    ╾──────alloc191───────╼                         │ ╾──────╼
}

alloc191 (fn: <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>)

alloc37 (static: main::S, size: 8, align: 8) {
    ╾──────alloc180───────╼                         │ ╾──────╼
}

alloc180 (fn: clone::impls::<impl Clone for i32>::clone)

alloc36 (static: main::S, size: 8, align: 8) {
    ╾──────alloc180───────╼                         │ ╾──────╼
}

alloc35 (static: main::S, size: 8, align: 8) {
    ╾──────alloc180───────╼                         │ ╾──────╼
}

alloc34 (static: main::S, size: 8, align: 8) {
    ╾──────alloc180───────╼                         │ ╾──────╼
}

alloc33 (static: main::S, size: 8, align: 8) {
    ╾──────alloc178───────╼                         │ ╾──────╼
}

alloc178 (fn: <i32 as Rand>::rand::<XorShiftRng>)

alloc32 (static: main::S, size: 8, align: 8) {
    ╾──────alloc174───────╼                         │ ╾──────╼
}

alloc174 (fn: <i32 as Rand>::rand::<XorShiftRng>)

alloc31 (static: main::S, size: 8, align: 8) {
    ╾──────alloc170───────╼                         │ ╾──────╼
}

alloc170 (fn: <i32 as Rand>::rand::<XorShiftRng>)

alloc30 (static: main::S, size: 8, align: 8) {
    ╾──────alloc166───────╼                         │ ╾──────╼
}

alloc166 (fn: <i32 as Rand>::rand::<XorShiftRng>)

alloc29 (static: main::S, size: 8, align: 8) {
    ╾──────alloc162───────╼                         │ ╾──────╼
}

alloc162 (fn: <i32 as Rand>::rand::<XorShiftRng>)

alloc28 (static: main::S, size: 8, align: 8) {
    ╾──────alloc158───────╼                         │ ╾──────╼
}

alloc158 (fn: <i32 as Rand>::rand::<XorShiftRng>)

alloc27 (static: main::S, size: 8, align: 8) {
    ╾──────alloc154───────╼                         │ ╾──────╼
}

alloc154 (fn: <i32 as Rand>::rand::<XorShiftRng>)

alloc26 (static: main::S, size: 8, align: 8) {
    ╾──────alloc150───────╼                         │ ╾──────╼
}

alloc150 (fn: <i32 as Rand>::rand::<XorShiftRng>)

alloc25 (static: main::S, size: 8, align: 8) {
    ╾──────alloc139───────╼                         │ ╾──────╼
}

alloc139 (fn: <i32 as Default>::default)

alloc24 (static: main::S, size: 8, align: 8) {
    ╾──────alloc139───────╼                         │ ╾──────╼
}

alloc23 (static: main::S, size: 8, align: 8) {
    ╾──────alloc139───────╼                         │ ╾──────╼
}

alloc22 (static: main::S, size: 8, align: 8) {
    ╾──────alloc139───────╼                         │ ╾──────╼
}

alloc21 (static: main::S, size: 8, align: 8) {
    ╾──────alloc137───────╼                         │ ╾──────╼
}

alloc137 (fn: <bool as Size>::size)

alloc20 (static: main::S, size: 8, align: 8) {
    ╾──────alloc133───────╼                         │ ╾──────╼
}

alloc133 (fn: <bool as Size>::size)

alloc19 (static: main::S, size: 8, align: 8) {
    ╾──────alloc129───────╼                         │ ╾──────╼
}

alloc129 (fn: <bool as Size>::size)

alloc18 (static: main::S, size: 8, align: 8) {
    ╾──────alloc125───────╼                         │ ╾──────╼
}

alloc125 (fn: Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>)

alloc17 (static: main::S, size: 8, align: 8) {
    ╾──────alloc121───────╼                         │ ╾──────╼
}

alloc121 (fn: Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>)

alloc16 (static: main::S, size: 8, align: 8) {
    ╾──────alloc117───────╼                         │ ╾──────╼
}

alloc117 (fn: Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>)

alloc15 (static: main::S, size: 8, align: 8) {
    ╾──────alloc113───────╼                         │ ╾──────╼
}

alloc113 (fn: Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>)

alloc14 (static: main::S, size: 8, align: 8) {
    ╾──────alloc109───────╼                         │ ╾──────╼
}

alloc109 (fn: BitVec::from_fn::<fn(usize) -> bool>)

alloc13 (static: main::S, size: 8, align: 8) {
    ╾──────alloc105───────╼                         │ ╾──────╼
}

alloc105 (fn: BitVec::from_fn::<fn(usize) -> bool>)

alloc12 (static: main::S, size: 8, align: 8) {
    ╾──────alloc101───────╼                         │ ╾──────╼
}

alloc101 (fn: Vec::<()>::with_capacity)

alloc11 (static: main::S, size: 8, align: 8) {
    ╾───────alloc97───────╼                         │ ╾──────╼
}

alloc97 (fn: Vec::<()>::with_capacity)

alloc10 (static: main::S, size: 8, align: 8) {
    ╾───────alloc93───────╼                         │ ╾──────╼
}

alloc93 (fn: Vec::<()>::with_capacity)

alloc9 (static: main::S, size: 8, align: 8) {
    ╾───────alloc89───────╼                         │ ╾──────╼
}

alloc89 (fn: Vec::<()>::new)

alloc8 (static: main::S, size: 8, align: 8) {
    ╾───────alloc85───────╼                         │ ╾──────╼
}

alloc85 (fn: Vec::<()>::new)

alloc7 (static: main::S, size: 8, align: 8) {
    ╾───────alloc81───────╼                         │ ╾──────╼
}

alloc81 (fn: Vec::<()>::new)

alloc6 (static: main::S, size: 8, align: 8) {
    ╾───────alloc77───────╼                         │ ╾──────╼
}

alloc77 (fn: Newt::<i32>)

alloc5 (static: main::S, size: 8, align: 8) {
    ╾───────alloc73───────╼                         │ ╾──────╼
}

alloc73 (fn: Newt::<i32>)

alloc4 (static: main::S, size: 8, align: 8) {
    ╾───────alloc69───────╼                         │ ╾──────╼
}

alloc69 (fn: Option::<i32>::Some)

alloc3 (static: main::S, size: 8, align: 8) {
    ╾───────alloc65───────╼                         │ ╾──────╼
}

alloc65 (fn: Option::<i32>::Some)

alloc2 (static: main::S, size: 8, align: 8) {
    ╾───────alloc61───────╼                         │ ╾──────╼
}

alloc61 (fn: id::<i32>)

alloc1 (static: main::S, size: 8, align: 8) {
    ╾───────alloc57───────╼                         │ ╾──────╼
}

alloc57 (fn: id::<i32>)

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:126:47: 126:48

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:126:47: 126:48
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:126:47: 126:48

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:126:47: 126:48
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:126:47: 126:48

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:126:47: 126:48
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:126:47: 126:48

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:126:47: 126:48
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:126:47: 126:48

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:126:47: 126:48
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:126:47: 126:48

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:126:47: 126:48
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:126:46: 126:48
    }
}

promoted[6] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:125:38: 125:39

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:125:38: 125:39
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    }
}

promoted[7] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:125:38: 125:39

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:125:38: 125:39
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:125:38: 125:39

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:125:38: 125:39
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    }
}

promoted[9] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:125:38: 125:39

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:125:38: 125:39
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    }
}

promoted[10] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:125:38: 125:39

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:125:38: 125:39
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    }
}

promoted[11] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:125:38: 125:39

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:125:38: 125:39
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:125:37: 125:39
    }
}

promoted[12] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:124:36: 124:37

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:124:36: 124:37
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    }
}

promoted[13] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:124:36: 124:37

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:124:36: 124:37
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    }
}

promoted[14] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:124:36: 124:37

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:124:36: 124:37
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    }
}

promoted[15] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:124:36: 124:37

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:124:36: 124:37
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    }
}

promoted[16] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:124:36: 124:37

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:124:36: 124:37
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    }
}

promoted[17] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:124:36: 124:37

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:124:36: 124:37
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:124:35: 124:37
    }
}

promoted[18] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:123:38: 123:39

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:123:38: 123:39
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    }
}

promoted[19] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:123:38: 123:39

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:123:38: 123:39
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    }
}

promoted[20] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:123:38: 123:39

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:123:38: 123:39
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    }
}

promoted[21] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:123:38: 123:39

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:123:38: 123:39
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    }
}

promoted[22] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:123:38: 123:39

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:123:38: 123:39
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    }
}

promoted[23] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    let mut _1: i32;                     // in scope 0 at ui/ufcs-polymorphic-paths.rs:123:38: 123:39

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/ufcs-polymorphic-paths.rs:123:38: 123:39
        _0 = &_1;                        // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:123:37: 123:39
    }
}

const main::C: fn(i32) -> i32 = {
    let mut _0: fn(i32) -> i32;          // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:73:9: 73:23

    bb0: {
        _0 = id::<i32> as fn(i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:73:5: 73:7
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:73:5: 73:7
                                         // + literal: Const { ty: fn(i32) -> i32 {id::<i32>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(i32) -> i32 = {
    let mut _0: fn(i32) -> i32;          // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:73:9: 73:23

    bb0: {
        _0 = id::<i32> as fn(i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:73:5: 73:7
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:73:5: 73:7
                                         // + literal: Const { ty: fn(i32) -> i32 {id::<i32>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(i32) -> i32 = {
    let mut _0: fn(i32) -> i32;          // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:74:16: 74:30

    bb0: {
        _0 = id::<i32> as fn(i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:74:5: 74:14
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:74:5: 74:14
                                         // + literal: Const { ty: fn(i32) -> i32 {id::<i32>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(i32) -> i32 = {
    let mut _0: fn(i32) -> i32;          // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:74:16: 74:30

    bb0: {
        _0 = id::<i32> as fn(i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:74:5: 74:14
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:74:5: 74:14
                                         // + literal: Const { ty: fn(i32) -> i32 {id::<i32>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(i32) -> Option<i32> = {
    let mut _0: fn(i32) -> std::option::Option<i32>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:77:11: 77:33

    bb0: {
        _0 = Option::<i32>::Some as fn(i32) -> std::option::Option<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:77:5: 77:9
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:77:5: 77:9
                                         // + literal: Const { ty: fn(i32) -> Option<i32> {Option::<i32>::Some}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(i32) -> Option<i32> = {
    let mut _0: fn(i32) -> std::option::Option<i32>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:77:11: 77:33

    bb0: {
        _0 = Option::<i32>::Some as fn(i32) -> std::option::Option<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:77:5: 77:9
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:77:5: 77:9
                                         // + literal: Const { ty: fn(i32) -> Option<i32> {Option::<i32>::Some}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(i32) -> Option<i32> = {
    let mut _0: fn(i32) -> std::option::Option<i32>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:78:18: 78:40

    bb0: {
        _0 = Option::<i32>::Some as fn(i32) -> std::option::Option<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:78:5: 78:16
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:78:5: 78:16
                                         // + literal: Const { ty: fn(i32) -> Option<i32> {Option::<i32>::Some}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(i32) -> Option<i32> = {
    let mut _0: fn(i32) -> std::option::Option<i32>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:78:18: 78:40

    bb0: {
        _0 = Option::<i32>::Some as fn(i32) -> std::option::Option<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:78:5: 78:16
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:78:5: 78:16
                                         // + literal: Const { ty: fn(i32) -> Option<i32> {Option::<i32>::Some}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(i32) -> Newt<i32> = {
    let mut _0: fn(i32) -> Newt<i32>;    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:81:11: 81:31

    bb0: {
        _0 = Newt::<i32> as fn(i32) -> Newt<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:81:5: 81:9
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:81:5: 81:9
                                         // + literal: Const { ty: fn(i32) -> Newt<i32> {Newt::<i32>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(i32) -> Newt<i32> = {
    let mut _0: fn(i32) -> Newt<i32>;    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:81:11: 81:31

    bb0: {
        _0 = Newt::<i32> as fn(i32) -> Newt<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:81:5: 81:9
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:81:5: 81:9
                                         // + literal: Const { ty: fn(i32) -> Newt<i32> {Newt::<i32>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(i32) -> Newt<i32> = {
    let mut _0: fn(i32) -> Newt<i32>;    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:82:18: 82:38

    bb0: {
        _0 = Newt::<i32> as fn(i32) -> Newt<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:82:5: 82:16
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:82:5: 82:16
                                         // + literal: Const { ty: fn(i32) -> Newt<i32> {Newt::<i32>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(i32) -> Newt<i32> = {
    let mut _0: fn(i32) -> Newt<i32>;    // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:82:18: 82:38

    bb0: {
        _0 = Newt::<i32> as fn(i32) -> Newt<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:82:5: 82:16
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:82:5: 82:16
                                         // + literal: Const { ty: fn(i32) -> Newt<i32> {Newt::<i32>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn() -> Vec<()> = {
    let mut _0: fn() -> std::vec::Vec<()>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:85:15: 85:30

    bb0: {
        _0 = Vec::<()>::new as fn() -> std::vec::Vec<()> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:85:5: 85:13
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:85:5: 85:13
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<()> {Vec::<()>::new}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn() -> Vec<()> = {
    let mut _0: fn() -> std::vec::Vec<()>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:85:15: 85:30

    bb0: {
        _0 = Vec::<()>::new as fn() -> std::vec::Vec<()> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:85:5: 85:13
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:85:5: 85:13
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<()> {Vec::<()>::new}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn() -> Vec<()> = {
    let mut _0: fn() -> std::vec::Vec<()>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:86:21: 86:36

    bb0: {
        _0 = Vec::<()>::new as fn() -> std::vec::Vec<()> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:86:5: 86:19
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:86:5: 86:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<()> {Vec::<()>::new}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn() -> Vec<()> = {
    let mut _0: fn() -> std::vec::Vec<()>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:86:21: 86:36

    bb0: {
        _0 = Vec::<()>::new as fn() -> std::vec::Vec<()> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:86:5: 86:19
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:86:5: 86:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<()> {Vec::<()>::new}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn() -> Vec<()> = {
    let mut _0: fn() -> std::vec::Vec<()>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:87:21: 87:36

    bb0: {
        _0 = Vec::<()>::new as fn() -> std::vec::Vec<()> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:87:5: 87:19
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:87:5: 87:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<()> {Vec::<()>::new}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn() -> Vec<()> = {
    let mut _0: fn() -> std::vec::Vec<()>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:87:21: 87:36

    bb0: {
        _0 = Vec::<()>::new as fn() -> std::vec::Vec<()> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:87:5: 87:19
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:87:5: 87:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<()> {Vec::<()>::new}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(usize) -> Vec<()> = {
    let mut _0: fn(usize) -> std::vec::Vec<()>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:88:25: 88:45

    bb0: {
        _0 = Vec::<()>::with_capacity as fn(usize) -> std::vec::Vec<()> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:88:5: 88:23
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:88:5: 88:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(usize) -> Vec<()> {Vec::<()>::with_capacity}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(usize) -> Vec<()> = {
    let mut _0: fn(usize) -> std::vec::Vec<()>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:88:25: 88:45

    bb0: {
        _0 = Vec::<()>::with_capacity as fn(usize) -> std::vec::Vec<()> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:88:5: 88:23
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:88:5: 88:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(usize) -> Vec<()> {Vec::<()>::with_capacity}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(usize) -> Vec<()> = {
    let mut _0: fn(usize) -> std::vec::Vec<()>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:89:31: 89:51

    bb0: {
        _0 = Vec::<()>::with_capacity as fn(usize) -> std::vec::Vec<()> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:89:5: 89:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:89:5: 89:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(usize) -> Vec<()> {Vec::<()>::with_capacity}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(usize) -> Vec<()> = {
    let mut _0: fn(usize) -> std::vec::Vec<()>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:89:31: 89:51

    bb0: {
        _0 = Vec::<()>::with_capacity as fn(usize) -> std::vec::Vec<()> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:89:5: 89:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:89:5: 89:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(usize) -> Vec<()> {Vec::<()>::with_capacity}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(usize) -> Vec<()> = {
    let mut _0: fn(usize) -> std::vec::Vec<()>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:90:31: 90:51

    bb0: {
        _0 = Vec::<()>::with_capacity as fn(usize) -> std::vec::Vec<()> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:90:5: 90:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:90:5: 90:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(usize) -> Vec<()> {Vec::<()>::with_capacity}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(usize) -> Vec<()> = {
    let mut _0: fn(usize) -> std::vec::Vec<()>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:90:31: 90:51

    bb0: {
        _0 = Vec::<()>::with_capacity as fn(usize) -> std::vec::Vec<()> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:90:5: 90:29
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:90:5: 90:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(usize) -> Vec<()> {Vec::<()>::with_capacity}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(usize, fn(usize) -> bool) -> BitVec = {
    let mut _0: fn(usize, fn(usize) -> bool) -> BitVec; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:91:22: 91:60

    bb0: {
        _0 = BitVec::from_fn::<fn(usize) -> bool> as fn(usize, fn(usize) -> bool) -> BitVec (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:91:5: 91:20
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:91:5: 91:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(usize, fn(usize) -> bool) -> BitVec {BitVec::from_fn::<fn(usize) -> bool>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(usize, fn(usize) -> bool) -> BitVec = {
    let mut _0: fn(usize, fn(usize) -> bool) -> BitVec; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:91:22: 91:60

    bb0: {
        _0 = BitVec::from_fn::<fn(usize) -> bool> as fn(usize, fn(usize) -> bool) -> BitVec (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:91:5: 91:20
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:91:5: 91:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(usize, fn(usize) -> bool) -> BitVec {BitVec::from_fn::<fn(usize) -> bool>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(usize, fn(usize) -> bool) -> BitVec = {
    let mut _0: fn(usize, fn(usize) -> bool) -> BitVec; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:92:43: 92:81

    bb0: {
        _0 = BitVec::from_fn::<fn(usize) -> bool> as fn(usize, fn(usize) -> bool) -> BitVec (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:92:5: 92:41
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:92:5: 92:41
                                         // + literal: Const { ty: fn(usize, fn(usize) -> bool) -> BitVec {BitVec::from_fn::<fn(usize) -> bool>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(usize, fn(usize) -> bool) -> BitVec = {
    let mut _0: fn(usize, fn(usize) -> bool) -> BitVec; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:92:43: 92:81

    bb0: {
        _0 = BitVec::from_fn::<fn(usize) -> bool> as fn(usize, fn(usize) -> bool) -> BitVec (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:92:5: 92:41
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:92:5: 92:41
                                         // + literal: Const { ty: fn(usize, fn(usize) -> bool) -> BitVec {BitVec::from_fn::<fn(usize) -> bool>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> = {
    let mut _0: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:95:24: 95:60

    bb0: {
        _0 = Foo::<u8>::map_in_place::<i8, fn(u8) -> i8> as fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:95:5: 95:22
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:95:5: 95:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> {Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> = {
    let mut _0: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:95:24: 95:60

    bb0: {
        _0 = Foo::<u8>::map_in_place::<i8, fn(u8) -> i8> as fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:95:5: 95:22
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:95:5: 95:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> {Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> = {
    let mut _0: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:96:44: 96:80

    bb0: {
        _0 = Foo::<u8>::map_in_place::<i8, fn(u8) -> i8> as fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:96:5: 96:42
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:96:5: 96:42
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> {Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> = {
    let mut _0: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:96:44: 96:80

    bb0: {
        _0 = Foo::<u8>::map_in_place::<i8, fn(u8) -> i8> as fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:96:5: 96:42
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:96:5: 96:42
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> {Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> = {
    let mut _0: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:98:30: 98:66

    bb0: {
        _0 = Foo::<u8>::map_in_place::<i8, fn(u8) -> i8> as fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:98:5: 98:28
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:98:5: 98:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> {Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> = {
    let mut _0: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:98:30: 98:66

    bb0: {
        _0 = Foo::<u8>::map_in_place::<i8, fn(u8) -> i8> as fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:98:5: 98:28
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:98:5: 98:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> {Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> = {
    let mut _0: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:100:50: 100:86

    bb0: {
        _0 = Foo::<u8>::map_in_place::<i8, fn(u8) -> i8> as fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:100:5: 100:48
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:100:5: 100:48
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> {Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> = {
    let mut _0: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:100:50: 100:86

    bb0: {
        _0 = Foo::<u8>::map_in_place::<i8, fn(u8) -> i8> as fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:100:5: 100:48
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:100:5: 100:48
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Foo<u8>, fn(u8) -> i8) -> Foo<i8> {Foo::<u8>::map_in_place::<i8, fn(u8) -> i8>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn() -> usize = {
    let mut _0: fn() -> usize;           // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:104:17: 104:30

    bb0: {
        _0 = <bool as Size>::size as fn() -> usize (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:104:5: 104:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:104:5: 104:15
                                         // + literal: Const { ty: fn() -> usize {<bool as Size>::size}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn() -> usize = {
    let mut _0: fn() -> usize;           // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:104:17: 104:30

    bb0: {
        _0 = <bool as Size>::size as fn() -> usize (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:104:5: 104:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:104:5: 104:15
                                         // + literal: Const { ty: fn() -> usize {<bool as Size>::size}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn() -> usize = {
    let mut _0: fn() -> usize;           // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:105:19: 105:32

    bb0: {
        _0 = <bool as Size>::size as fn() -> usize (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:105:5: 105:17
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:105:5: 105:17
                                         // + literal: Const { ty: fn() -> usize {<bool as Size>::size}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn() -> usize = {
    let mut _0: fn() -> usize;           // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:105:19: 105:32

    bb0: {
        _0 = <bool as Size>::size as fn() -> usize (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:105:5: 105:17
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:105:5: 105:17
                                         // + literal: Const { ty: fn() -> usize {<bool as Size>::size}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn() -> usize = {
    let mut _0: fn() -> usize;           // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:106:27: 106:40

    bb0: {
        _0 = <bool as Size>::size as fn() -> usize (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:106:5: 106:25
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:106:5: 106:25
                                         // + literal: Const { ty: fn() -> usize {<bool as Size>::size}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn() -> usize = {
    let mut _0: fn() -> usize;           // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:106:27: 106:40

    bb0: {
        _0 = <bool as Size>::size as fn() -> usize (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:106:5: 106:25
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:106:5: 106:25
                                         // + literal: Const { ty: fn() -> usize {<bool as Size>::size}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn() -> i32 = {
    let mut _0: fn() -> i32;             // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:108:23: 108:34

    bb0: {
        _0 = <i32 as Default>::default as fn() -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:108:5: 108:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:108:5: 108:21
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Default>::default}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn() -> i32 = {
    let mut _0: fn() -> i32;             // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:108:23: 108:34

    bb0: {
        _0 = <i32 as Default>::default as fn() -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:108:5: 108:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:108:5: 108:21
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Default>::default}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn() -> i32 = {
    let mut _0: fn() -> i32;             // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:109:19: 109:30

    bb0: {
        _0 = <i32 as Default>::default as fn() -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:109:5: 109:17
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:109:5: 109:17
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Default>::default}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn() -> i32 = {
    let mut _0: fn() -> i32;             // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:109:19: 109:30

    bb0: {
        _0 = <i32 as Default>::default as fn() -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:109:5: 109:17
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:109:5: 109:17
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Default>::default}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn() -> i32 = {
    let mut _0: fn() -> i32;             // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:110:21: 110:32

    bb0: {
        _0 = <i32 as Default>::default as fn() -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:110:5: 110:19
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:110:5: 110:19
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Default>::default}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn() -> i32 = {
    let mut _0: fn() -> i32;             // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:110:21: 110:32

    bb0: {
        _0 = <i32 as Default>::default as fn() -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:110:5: 110:19
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:110:5: 110:19
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Default>::default}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn() -> i32 = {
    let mut _0: fn() -> i32;             // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:111:32: 111:43

    bb0: {
        _0 = <i32 as Default>::default as fn() -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:111:5: 111:30
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:111:5: 111:30
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Default>::default}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn() -> i32 = {
    let mut _0: fn() -> i32;             // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:111:32: 111:43

    bb0: {
        _0 = <i32 as Default>::default as fn() -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:111:5: 111:30
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:111:5: 111:30
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Default>::default}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: for<'a> fn(&'a mut XorShiftRng) -> i32 = {
    let mut _0: for<'a> fn(&'a mut XorShiftRng) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:113:17: 113:41

    bb0: {
        _0 = <i32 as Rand>::rand::<XorShiftRng> as for<'a> fn(&'a mut XorShiftRng) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:113:5: 113:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:113:5: 113:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: for<'a> fn(&'a mut XorShiftRng) -> i32 = {
    let mut _0: for<'a> fn(&'a mut XorShiftRng) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:113:17: 113:41

    bb0: {
        _0 = <i32 as Rand>::rand::<XorShiftRng> as for<'a> fn(&'a mut XorShiftRng) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:113:5: 113:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:113:5: 113:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: for<'a> fn(&'a mut XorShiftRng) -> i32 = {
    let mut _0: for<'a> fn(&'a mut XorShiftRng) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:114:16: 114:40

    bb0: {
        _0 = <i32 as Rand>::rand::<XorShiftRng> as for<'a> fn(&'a mut XorShiftRng) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:114:5: 114:14
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:114:5: 114:14
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: for<'a> fn(&'a mut XorShiftRng) -> i32 = {
    let mut _0: for<'a> fn(&'a mut XorShiftRng) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:114:16: 114:40

    bb0: {
        _0 = <i32 as Rand>::rand::<XorShiftRng> as for<'a> fn(&'a mut XorShiftRng) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:114:5: 114:14
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:114:5: 114:14
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: for<'a> fn(&'a mut XorShiftRng) -> i32 = {
    let mut _0: for<'a> fn(&'a mut XorShiftRng) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:115:18: 115:42

    bb0: {
        _0 = <i32 as Rand>::rand::<XorShiftRng> as for<'a> fn(&'a mut XorShiftRng) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:115:5: 115:16
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:115:5: 115:16
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: for<'a> fn(&'a mut XorShiftRng) -> i32 = {
    let mut _0: for<'a> fn(&'a mut XorShiftRng) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:115:18: 115:42

    bb0: {
        _0 = <i32 as Rand>::rand::<XorShiftRng> as for<'a> fn(&'a mut XorShiftRng) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:115:5: 115:16
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:115:5: 115:16
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: for<'a> fn(&'a mut XorShiftRng) -> i32 = {
    let mut _0: for<'a> fn(&'a mut XorShiftRng) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:116:26: 116:50

    bb0: {
        _0 = <i32 as Rand>::rand::<XorShiftRng> as for<'a> fn(&'a mut XorShiftRng) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:116:5: 116:24
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:116:5: 116:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: for<'a> fn(&'a mut XorShiftRng) -> i32 = {
    let mut _0: for<'a> fn(&'a mut XorShiftRng) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:116:26: 116:50

    bb0: {
        _0 = <i32 as Rand>::rand::<XorShiftRng> as for<'a> fn(&'a mut XorShiftRng) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:116:5: 116:24
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:116:5: 116:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: for<'a> fn(&'a mut XorShiftRng) -> i32 = {
    let mut _0: for<'a> fn(&'a mut XorShiftRng) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:117:29: 117:53

    bb0: {
        _0 = <i32 as Rand>::rand::<XorShiftRng> as for<'a> fn(&'a mut XorShiftRng) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:117:5: 117:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:117:5: 117:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: for<'a> fn(&'a mut XorShiftRng) -> i32 = {
    let mut _0: for<'a> fn(&'a mut XorShiftRng) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:117:29: 117:53

    bb0: {
        _0 = <i32 as Rand>::rand::<XorShiftRng> as for<'a> fn(&'a mut XorShiftRng) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:117:5: 117:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:117:5: 117:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: for<'a> fn(&'a mut XorShiftRng) -> i32 = {
    let mut _0: for<'a> fn(&'a mut XorShiftRng) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:118:28: 118:52

    bb0: {
        _0 = <i32 as Rand>::rand::<XorShiftRng> as for<'a> fn(&'a mut XorShiftRng) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:118:5: 118:26
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:118:5: 118:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: for<'a> fn(&'a mut XorShiftRng) -> i32 = {
    let mut _0: for<'a> fn(&'a mut XorShiftRng) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:118:28: 118:52

    bb0: {
        _0 = <i32 as Rand>::rand::<XorShiftRng> as for<'a> fn(&'a mut XorShiftRng) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:118:5: 118:26
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:118:5: 118:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: for<'a> fn(&'a mut XorShiftRng) -> i32 = {
    let mut _0: for<'a> fn(&'a mut XorShiftRng) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:119:30: 119:54

    bb0: {
        _0 = <i32 as Rand>::rand::<XorShiftRng> as for<'a> fn(&'a mut XorShiftRng) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:119:5: 119:28
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:119:5: 119:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: for<'a> fn(&'a mut XorShiftRng) -> i32 = {
    let mut _0: for<'a> fn(&'a mut XorShiftRng) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:119:30: 119:54

    bb0: {
        _0 = <i32 as Rand>::rand::<XorShiftRng> as for<'a> fn(&'a mut XorShiftRng) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:119:5: 119:28
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:119:5: 119:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: for<'a> fn(&'a mut XorShiftRng) -> i32 = {
    let mut _0: for<'a> fn(&'a mut XorShiftRng) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:120:38: 120:62

    bb0: {
        _0 = <i32 as Rand>::rand::<XorShiftRng> as for<'a> fn(&'a mut XorShiftRng) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:120:5: 120:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:120:5: 120:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: for<'a> fn(&'a mut XorShiftRng) -> i32 = {
    let mut _0: for<'a> fn(&'a mut XorShiftRng) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:120:38: 120:62

    bb0: {
        _0 = <i32 as Rand>::rand::<XorShiftRng> as for<'a> fn(&'a mut XorShiftRng) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:120:5: 120:36
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:120:5: 120:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut XorShiftRng) -> i32 {<i32 as Rand>::rand::<XorShiftRng>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: for<'a> fn(&'a i32) -> i32 = {
    let mut _0: for<'a> fn(&'a i32) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:123:19: 123:34

    bb0: {
        _0 = <i32 as Clone>::clone as for<'a> fn(&'a i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:123:5: 123:17
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:123:5: 123:17
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> i32 {<i32 as Clone>::clone}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: for<'a> fn(&'a i32) -> i32 = {
    let mut _0: for<'a> fn(&'a i32) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:123:19: 123:34

    bb0: {
        _0 = <i32 as Clone>::clone as for<'a> fn(&'a i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:123:5: 123:17
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:123:5: 123:17
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> i32 {<i32 as Clone>::clone}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: for<'a> fn(&'a i32) -> i32 = {
    let mut _0: for<'a> fn(&'a i32) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:124:17: 124:32

    bb0: {
        _0 = <i32 as Clone>::clone as for<'a> fn(&'a i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:124:5: 124:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:124:5: 124:15
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> i32 {<i32 as Clone>::clone}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: for<'a> fn(&'a i32) -> i32 = {
    let mut _0: for<'a> fn(&'a i32) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:124:17: 124:32

    bb0: {
        _0 = <i32 as Clone>::clone as for<'a> fn(&'a i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:124:5: 124:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:124:5: 124:15
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> i32 {<i32 as Clone>::clone}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: for<'a> fn(&'a i32) -> i32 = {
    let mut _0: for<'a> fn(&'a i32) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:125:19: 125:34

    bb0: {
        _0 = <i32 as Clone>::clone as for<'a> fn(&'a i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:125:5: 125:17
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:125:5: 125:17
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> i32 {<i32 as Clone>::clone}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: for<'a> fn(&'a i32) -> i32 = {
    let mut _0: for<'a> fn(&'a i32) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:125:19: 125:34

    bb0: {
        _0 = <i32 as Clone>::clone as for<'a> fn(&'a i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:125:5: 125:17
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:125:5: 125:17
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> i32 {<i32 as Clone>::clone}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: for<'a> fn(&'a i32) -> i32 = {
    let mut _0: for<'a> fn(&'a i32) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:126:28: 126:43

    bb0: {
        _0 = <i32 as Clone>::clone as for<'a> fn(&'a i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:126:5: 126:26
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:126:5: 126:26
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> i32 {<i32 as Clone>::clone}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: for<'a> fn(&'a i32) -> i32 = {
    let mut _0: for<'a> fn(&'a i32) -> i32; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:126:28: 126:43

    bb0: {
        _0 = <i32 as Clone>::clone as for<'a> fn(&'a i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:126:5: 126:26
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:126:5: 126:26
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> i32 {<i32 as Clone>::clone}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(std::option::IntoIter<i32>) -> Vec<i32> = {
    let mut _0: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:128:30: 128:61

    bb0: {
        _0 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>> as fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:128:5: 128:28
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:128:5: 128:28
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(std::option::IntoIter<i32>) -> Vec<i32> = {
    let mut _0: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:128:30: 128:61

    bb0: {
        _0 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>> as fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:128:5: 128:28
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:128:5: 128:28
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(std::option::IntoIter<i32>) -> Vec<i32> = {
    let mut _0: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:129:21: 129:52

    bb0: {
        _0 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>> as fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:129:5: 129:19
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:129:5: 129:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(std::option::IntoIter<i32>) -> Vec<i32> = {
    let mut _0: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:129:21: 129:52

    bb0: {
        _0 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>> as fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:129:5: 129:19
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:129:5: 129:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(std::option::IntoIter<i32>) -> Vec<i32> = {
    let mut _0: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:130:26: 130:57

    bb0: {
        _0 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>> as fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:130:5: 130:24
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:130:5: 130:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(std::option::IntoIter<i32>) -> Vec<i32> = {
    let mut _0: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:130:26: 130:57

    bb0: {
        _0 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>> as fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:130:5: 130:24
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:130:5: 130:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(std::option::IntoIter<i32>) -> Vec<i32> = {
    let mut _0: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:131:45: 131:76

    bb0: {
        _0 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>> as fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:131:5: 131:43
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:131:5: 131:43
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(std::option::IntoIter<i32>) -> Vec<i32> = {
    let mut _0: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:131:45: 131:76

    bb0: {
        _0 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>> as fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:131:5: 131:43
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:131:5: 131:43
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(std::option::IntoIter<i32>) -> Vec<i32> = {
    let mut _0: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:133:47: 133:78

    bb0: {
        _0 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>> as fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:133:5: 133:45
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:133:5: 133:45
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(std::option::IntoIter<i32>) -> Vec<i32> = {
    let mut _0: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:133:47: 133:78

    bb0: {
        _0 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>> as fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:133:5: 133:45
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:133:5: 133:45
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(std::option::IntoIter<i32>) -> Vec<i32> = {
    let mut _0: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:135:49: 135:80

    bb0: {
        _0 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>> as fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:135:5: 135:47
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:135:5: 135:47
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(std::option::IntoIter<i32>) -> Vec<i32> = {
    let mut _0: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:135:49: 135:80

    bb0: {
        _0 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>> as fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:135:5: 135:47
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:135:5: 135:47
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(std::option::IntoIter<i32>) -> Vec<i32> = {
    let mut _0: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:137:66: 137:97

    bb0: {
        _0 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>> as fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:137:5: 137:64
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:137:5: 137:64
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(std::option::IntoIter<i32>) -> Vec<i32> = {
    let mut _0: fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:137:66: 137:97

    bb0: {
        _0 = <Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>> as fn(std::option::IntoIter<i32>) -> std::vec::Vec<i32> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:137:5: 137:64
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:137:5: 137:64
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::option::IntoIter<i32>) -> Vec<i32> {<Vec<i32> as FromIterator<i32>>::from_iter::<std::option::IntoIter<i32>>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(i32, i32) -> i32 = {
    let mut _0: fn(i32, i32) -> i32;     // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:140:15: 140:34

    bb0: {
        _0 = <i32 as Add>::add as fn(i32, i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:140:5: 140:13
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:140:5: 140:13
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(i32, i32) -> i32 = {
    let mut _0: fn(i32, i32) -> i32;     // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:140:15: 140:34

    bb0: {
        _0 = <i32 as Add>::add as fn(i32, i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:140:5: 140:13
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:140:5: 140:13
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(i32, i32) -> i32 = {
    let mut _0: fn(i32, i32) -> i32;     // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:141:15: 141:34

    bb0: {
        _0 = <i32 as Add>::add as fn(i32, i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:141:5: 141:13
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:141:5: 141:13
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(i32, i32) -> i32 = {
    let mut _0: fn(i32, i32) -> i32;     // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:141:15: 141:34

    bb0: {
        _0 = <i32 as Add>::add as fn(i32, i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:141:5: 141:13
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:141:5: 141:13
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(i32, i32) -> i32 = {
    let mut _0: fn(i32, i32) -> i32;     // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:142:17: 142:36

    bb0: {
        _0 = <i32 as Add>::add as fn(i32, i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:142:5: 142:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:142:5: 142:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(i32, i32) -> i32 = {
    let mut _0: fn(i32, i32) -> i32;     // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:142:17: 142:36

    bb0: {
        _0 = <i32 as Add>::add as fn(i32, i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:142:5: 142:15
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:142:5: 142:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(i32, i32) -> i32 = {
    let mut _0: fn(i32, i32) -> i32;     // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:143:27: 143:46

    bb0: {
        _0 = <i32 as Add>::add as fn(i32, i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:143:5: 143:25
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:143:5: 143:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(i32, i32) -> i32 = {
    let mut _0: fn(i32, i32) -> i32;     // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:143:27: 143:46

    bb0: {
        _0 = <i32 as Add>::add as fn(i32, i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:143:5: 143:25
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:143:5: 143:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(i32, i32) -> i32 = {
    let mut _0: fn(i32, i32) -> i32;     // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:144:29: 144:48

    bb0: {
        _0 = <i32 as Add>::add as fn(i32, i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:144:5: 144:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:144:5: 144:27
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(i32, i32) -> i32 = {
    let mut _0: fn(i32, i32) -> i32;     // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:144:29: 144:48

    bb0: {
        _0 = <i32 as Add>::add as fn(i32, i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:144:5: 144:27
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:144:5: 144:27
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(String) -> Cow<'_, str> = {
    let mut _0: fn(std::string::String) -> std::borrow::Cow<'_, str>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:146:23: 146:54

    bb0: {
        _0 = <String as IntoCow<'_, str>>::into_cow as fn(std::string::String) -> std::borrow::Cow<'_, str> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:146:5: 146:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:146:5: 146:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str> {<String as IntoCow<'_, str>>::into_cow}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(String) -> Cow<'_, str> = {
    let mut _0: fn(std::string::String) -> std::borrow::Cow<'_, str>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:146:23: 146:54

    bb0: {
        _0 = <String as IntoCow<'_, str>>::into_cow as fn(std::string::String) -> std::borrow::Cow<'_, str> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:146:5: 146:21
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:146:5: 146:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str> {<String as IntoCow<'_, str>>::into_cow}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(String) -> Cow<'_, str> = {
    let mut _0: fn(std::string::String) -> std::borrow::Cow<'_, str>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:148:25: 148:56

    bb0: {
        _0 = <String as IntoCow<'_, str>>::into_cow as fn(std::string::String) -> std::borrow::Cow<'_, str> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:148:5: 148:23
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:148:5: 148:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str> {<String as IntoCow<'_, str>>::into_cow}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(String) -> Cow<'_, str> = {
    let mut _0: fn(std::string::String) -> std::borrow::Cow<'_, str>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:148:25: 148:56

    bb0: {
        _0 = <String as IntoCow<'_, str>>::into_cow as fn(std::string::String) -> std::borrow::Cow<'_, str> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:148:5: 148:23
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:148:5: 148:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str> {<String as IntoCow<'_, str>>::into_cow}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(String) -> Cow<'_, str> = {
    let mut _0: fn(std::string::String) -> std::borrow::Cow<'_, str>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:150:39: 150:70

    bb0: {
        _0 = <String as IntoCow<'_, str>>::into_cow as fn(std::string::String) -> std::borrow::Cow<'_, str> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:150:5: 150:37
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:150:5: 150:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str> {<String as IntoCow<'_, str>>::into_cow}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(String) -> Cow<'_, str> = {
    let mut _0: fn(std::string::String) -> std::borrow::Cow<'_, str>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:150:39: 150:70

    bb0: {
        _0 = <String as IntoCow<'_, str>>::into_cow as fn(std::string::String) -> std::borrow::Cow<'_, str> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:150:5: 150:37
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:150:5: 150:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str> {<String as IntoCow<'_, str>>::into_cow}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

const main::C: fn(String) -> Cow<'_, str> = {
    let mut _0: fn(std::string::String) -> std::borrow::Cow<'_, str>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:152:48: 152:79

    bb0: {
        _0 = <String as IntoCow<'_, str>>::into_cow as fn(std::string::String) -> std::borrow::Cow<'_, str> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:152:5: 152:46
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:152:5: 152:46
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str> {<String as IntoCow<'_, str>>::into_cow}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:63:9: 63:30
    }
}

static main::S: fn(String) -> Cow<'_, str> = {
    let mut _0: fn(std::string::String) -> std::borrow::Cow<'_, str>; // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:152:48: 152:79

    bb0: {
        _0 = <String as IntoCow<'_, str>>::into_cow as fn(std::string::String) -> std::borrow::Cow<'_, str> (Pointer(ReifyFnPointer)); // scope 0 at ui/ufcs-polymorphic-paths.rs:152:5: 152:46
                                         // mir::Constant
                                         // + span: ui/ufcs-polymorphic-paths.rs:152:5: 152:46
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(String) -> Cow<'_, str> {<String as IntoCow<'_, str>>::into_cow}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:64:9: 64:31
    }
}

fn Newt(_1: T) -> Newt<T> {
    let mut _0: Newt<T>;                 // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:29:1: 29:15

    bb0: {
        _0 = Newt::<T>(move _1);         // scope 0 at ui/ufcs-polymorphic-paths.rs:29:1: 29:15
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:29:1: 29:15
    }
}

// MIR FOR CTFE
fn Newt(_1: T) -> Newt<T> {
    let mut _0: Newt<T>;                 // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:29:1: 29:15

    bb0: {
        _0 = Newt::<T>(move _1);         // scope 0 at ui/ufcs-polymorphic-paths.rs:29:1: 29:15
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:29:1: 29:15
    }
}

fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:52:1: 52:14

    bb0: {
        _0 = Foo::<T>(move _1);          // scope 0 at ui/ufcs-polymorphic-paths.rs:52:1: 52:14
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:52:1: 52:14
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/ufcs-polymorphic-paths.rs:52:1: 52:14

    bb0: {
        _0 = Foo::<T>(move _1);          // scope 0 at ui/ufcs-polymorphic-paths.rs:52:1: 52:14
        return;                          // scope 0 at ui/ufcs-polymorphic-paths.rs:52:1: 52:14
    }
}
