// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const_prop/inline_spans_lint_attribute.rs:7:11: 7:11
    let mut _1: u8;                      // in scope 0 at ui/const_prop/inline_spans_lint_attribute.rs:9:13: 9:28
    scope 1 {
    }
    scope 2 {
    }

    bb0: {
        _1 = add(const _, const 1_u8) -> bb1; // scope 2 at ui/const_prop/inline_spans_lint_attribute.rs:9:13: 9:28
                                         // mir::Constant
                                         // + span: ui/const_prop/inline_spans_lint_attribute.rs:9:13: 9:16
                                         // + literal: Const { ty: fn(u8, u8) -> u8 {add}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const_prop/inline_spans_lint_attribute.rs:10:2: 10:2
    }
}

fn add(_1: u8, _2: u8) -> u8 {
    debug x => _1;                       // in scope 0 at ui/const_prop/inline_spans_lint_attribute.rs:13:8: 13:9
    debug y => _2;                       // in scope 0 at ui/const_prop/inline_spans_lint_attribute.rs:13:15: 13:16
    let mut _0: u8;                      // return place in scope 0 at ui/const_prop/inline_spans_lint_attribute.rs:13:25: 13:27
    let mut _3: u8;                      // in scope 0 at ui/const_prop/inline_spans_lint_attribute.rs:14:5: 14:6
    let mut _4: u8;                      // in scope 0 at ui/const_prop/inline_spans_lint_attribute.rs:14:9: 14:10
    let mut _5: (u8, bool);              // in scope 0 at ui/const_prop/inline_spans_lint_attribute.rs:14:5: 14:10

    bb0: {
        _3 = _1;                         // scope 0 at ui/const_prop/inline_spans_lint_attribute.rs:14:5: 14:6
        _4 = _2;                         // scope 0 at ui/const_prop/inline_spans_lint_attribute.rs:14:9: 14:10
        _5 = CheckedAdd(_3, _4);         // scope 0 at ui/const_prop/inline_spans_lint_attribute.rs:14:5: 14:10
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _4) -> bb1; // scope 0 at ui/const_prop/inline_spans_lint_attribute.rs:14:5: 14:10
    }

    bb1: {
        _0 = move (_5.0: u8);            // scope 0 at ui/const_prop/inline_spans_lint_attribute.rs:14:5: 14:10
        return;                          // scope 0 at ui/const_prop/inline_spans_lint_attribute.rs:15:2: 15:2
    }
}
