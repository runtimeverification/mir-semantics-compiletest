// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/wrong-hashset-issue-42918.rs:8:10: 8:19>::eq(_1: &MyEnum, _2: &MyEnum) -> bool {
    debug self => _1;                    // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:10: 8:19
    debug other => _2;                   // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:10: 8:19
    let mut _0: bool;                    // return place in scope 0 at ui/wrong-hashset-issue-42918.rs:8:10: 8:19
    let _3: isize;                       // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:10: 8:19
    let mut _4: &MyEnum;                 // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:10: 8:19
    let mut _6: &MyEnum;                 // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:10: 8:19
    let mut _7: isize;                   // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:10: 8:19
    let mut _8: isize;                   // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:10: 8:19
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/wrong-hashset-issue-42918.rs:8:10: 8:19
        let _5: isize;                   // in scope 1 at ui/wrong-hashset-issue-42918.rs:8:10: 8:19
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/wrong-hashset-issue-42918.rs:8:10: 8:19
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/wrong-hashset-issue-42918.rs:8:10: 8:19
        _3 = discriminant((*_4));        // scope 0 at ui/wrong-hashset-issue-42918.rs:8:10: 8:19
        _6 = _2;                         // scope 1 at ui/wrong-hashset-issue-42918.rs:8:10: 8:19
        _5 = discriminant((*_6));        // scope 1 at ui/wrong-hashset-issue-42918.rs:8:10: 8:19
        _7 = _3;                         // scope 2 at ui/wrong-hashset-issue-42918.rs:8:10: 8:19
        _8 = _5;                         // scope 2 at ui/wrong-hashset-issue-42918.rs:8:10: 8:19
        _0 = Eq(move _7, move _8);       // scope 2 at ui/wrong-hashset-issue-42918.rs:8:10: 8:19
        return;                          // scope 0 at ui/wrong-hashset-issue-42918.rs:8:19: 8:19
    }
}

fn <impl at ui/wrong-hashset-issue-42918.rs:8:21: 8:26>::fmt(_1: &MyEnum, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
    debug f => _2;                       // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
    let mut _4: &str;                    // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
    let mut _5: isize;                   // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
    let _6: &str;                        // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
    let _7: &str;                        // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
    let _8: &str;                        // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
    let _9: &str;                        // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
    let _10: &str;                       // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
    let _11: &str;                       // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
    let _12: &str;                       // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
    let _13: &str;                       // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
        _5 = discriminant((*_1));        // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
        switchInt(move _5) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb1, otherwise: bb2]; // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
    }

    bb1: {
        _13 = const "E7";                // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:8:21: 8:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _13;                        // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
        goto -> bb10;                    // scope 0 at ui/wrong-hashset-issue-42918.rs:8:25: 8:26
    }

    bb2: {
        unreachable;                     // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
    }

    bb3: {
        _6 = const "E0";                 // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:8:21: 8:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _6;                         // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
        goto -> bb10;                    // scope 0 at ui/wrong-hashset-issue-42918.rs:8:25: 8:26
    }

    bb4: {
        _7 = const "E1";                 // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:8:21: 8:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _7;                         // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
        goto -> bb10;                    // scope 0 at ui/wrong-hashset-issue-42918.rs:8:25: 8:26
    }

    bb5: {
        _8 = const "E2";                 // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:8:21: 8:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _8;                         // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
        goto -> bb10;                    // scope 0 at ui/wrong-hashset-issue-42918.rs:8:25: 8:26
    }

    bb6: {
        _9 = const "E3";                 // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:8:21: 8:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _9;                         // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
        goto -> bb10;                    // scope 0 at ui/wrong-hashset-issue-42918.rs:8:25: 8:26
    }

    bb7: {
        _10 = const "E4";                // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:8:21: 8:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _10;                        // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
        goto -> bb10;                    // scope 0 at ui/wrong-hashset-issue-42918.rs:8:25: 8:26
    }

    bb8: {
        _11 = const "E5";                // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:8:21: 8:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _11;                        // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
        goto -> bb10;                    // scope 0 at ui/wrong-hashset-issue-42918.rs:8:25: 8:26
    }

    bb9: {
        _12 = const "E6";                // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:8:21: 8:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _12;                        // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
        goto -> bb10;                    // scope 0 at ui/wrong-hashset-issue-42918.rs:8:25: 8:26
    }

    bb10: {
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb11; // scope 0 at ui/wrong-hashset-issue-42918.rs:8:21: 8:26
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:8:21: 8:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb11: {
        return;                          // scope 0 at ui/wrong-hashset-issue-42918.rs:8:26: 8:26
    }
}

fn <impl at ui/wrong-hashset-issue-42918.rs:8:28: 8:32>::hash(_1: &MyEnum, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:28: 8:32
    debug state => _2;                   // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:28: 8:32
    let mut _0: ();                      // return place in scope 0 at ui/wrong-hashset-issue-42918.rs:8:28: 8:32
    let _3: isize;                       // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:28: 8:32
    let mut _4: &MyEnum;                 // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:28: 8:32
    let mut _5: &isize;                  // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:28: 8:32
    let _6: &isize;                      // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:28: 8:32
    let mut _7: &mut __H;                // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:28: 8:32
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/wrong-hashset-issue-42918.rs:8:28: 8:32
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/wrong-hashset-issue-42918.rs:8:28: 8:32
        _3 = discriminant((*_4));        // scope 0 at ui/wrong-hashset-issue-42918.rs:8:28: 8:32
        _6 = &_3;                        // scope 1 at ui/wrong-hashset-issue-42918.rs:8:28: 8:32
        _5 = _6;                         // scope 1 at ui/wrong-hashset-issue-42918.rs:8:28: 8:32
        _7 = &mut (*_2);                 // scope 1 at ui/wrong-hashset-issue-42918.rs:8:28: 8:32
        _0 = <isize as Hash>::hash::<__H>(move _5, move _7) -> bb1; // scope 1 at ui/wrong-hashset-issue-42918.rs:8:28: 8:32
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:8:28: 8:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b mut __H) {<isize as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/wrong-hashset-issue-42918.rs:8:32: 8:32
    }
}

fn <impl at ui/wrong-hashset-issue-42918.rs:8:34: 8:36>::assert_receiver_is_total_eq(_1: &MyEnum) -> () {
    debug self => _1;                    // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:34: 8:36
    let mut _0: ();                      // return place in scope 0 at ui/wrong-hashset-issue-42918.rs:8:34: 8:36

    bb0: {
        return;                          // scope 0 at ui/wrong-hashset-issue-42918.rs:8:36: 8:36
    }
}

fn <impl at ui/wrong-hashset-issue-42918.rs:8:38: 8:43>::clone(_1: &MyEnum) -> MyEnum {
    debug self => _1;                    // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
    let mut _0: MyEnum;                  // return place in scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
    let mut _2: isize;                   // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb1, otherwise: bb2]; // scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
    }

    bb1: {
        _0 = const MyEnum::E7;           // scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:8:38: 8:43
                                         // + literal: Const { ty: MyEnum, val: Value(Scalar(0x07)) }
        goto -> bb10;                    // scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
    }

    bb2: {
        unreachable;                     // scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
    }

    bb3: {
        _0 = const MyEnum::E0;           // scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:8:38: 8:43
                                         // + literal: Const { ty: MyEnum, val: Value(Scalar(0x00)) }
        goto -> bb10;                    // scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
    }

    bb4: {
        _0 = const MyEnum::E1;           // scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:8:38: 8:43
                                         // + literal: Const { ty: MyEnum, val: Value(Scalar(0x01)) }
        goto -> bb10;                    // scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
    }

    bb5: {
        _0 = const MyEnum::E2;           // scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:8:38: 8:43
                                         // + literal: Const { ty: MyEnum, val: Value(Scalar(0x02)) }
        goto -> bb10;                    // scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
    }

    bb6: {
        _0 = const MyEnum::E3;           // scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:8:38: 8:43
                                         // + literal: Const { ty: MyEnum, val: Value(Scalar(0x03)) }
        goto -> bb10;                    // scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
    }

    bb7: {
        _0 = const MyEnum::E4;           // scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:8:38: 8:43
                                         // + literal: Const { ty: MyEnum, val: Value(Scalar(0x04)) }
        goto -> bb10;                    // scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
    }

    bb8: {
        _0 = const MyEnum::E5;           // scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:8:38: 8:43
                                         // + literal: Const { ty: MyEnum, val: Value(Scalar(0x05)) }
        goto -> bb10;                    // scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
    }

    bb9: {
        _0 = const MyEnum::E6;           // scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:8:38: 8:43
                                         // + literal: Const { ty: MyEnum, val: Value(Scalar(0x06)) }
        goto -> bb10;                    // scope 0 at ui/wrong-hashset-issue-42918.rs:8:38: 8:43
    }

    bb10: {
        return;                          // scope 0 at ui/wrong-hashset-issue-42918.rs:8:43: 8:43
    }
}

fn <impl at ui/wrong-hashset-issue-42918.rs:8:45: 8:55>::partial_cmp(_1: &MyEnum, _2: &MyEnum) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
    debug other => _2;                   // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
    let _3: isize;                       // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
    let mut _4: &MyEnum;                 // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
    let mut _6: &MyEnum;                 // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
    let mut _7: &isize;                  // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
    let _8: &isize;                      // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
    let mut _9: &isize;                  // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
    let _10: &isize;                     // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
        let _5: isize;                   // in scope 1 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
        _3 = discriminant((*_4));        // scope 0 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
        _6 = _2;                         // scope 1 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
        _5 = discriminant((*_6));        // scope 1 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
        _8 = &_3;                        // scope 2 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
        _7 = _8;                         // scope 2 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
        _10 = &_5;                       // scope 2 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
        _9 = _10;                        // scope 2 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
        _0 = <isize as PartialOrd>::partial_cmp(move _7, move _9) -> bb1; // scope 2 at ui/wrong-hashset-issue-42918.rs:8:45: 8:55
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:8:45: 8:55
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> Option<std::cmp::Ordering> {<isize as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/wrong-hashset-issue-42918.rs:8:55: 8:55
    }
}

fn <impl at ui/wrong-hashset-issue-42918.rs:8:57: 8:60>::cmp(_1: &MyEnum, _2: &MyEnum) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
    debug other => _2;                   // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
    let _3: isize;                       // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
    let mut _4: &MyEnum;                 // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
    let mut _6: &MyEnum;                 // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
    let mut _7: &isize;                  // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
    let _8: &isize;                      // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
    let mut _9: &isize;                  // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
    let _10: &isize;                     // in scope 0 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
        let _5: isize;                   // in scope 1 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
        _3 = discriminant((*_4));        // scope 0 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
        _6 = _2;                         // scope 1 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
        _5 = discriminant((*_6));        // scope 1 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
        _8 = &_3;                        // scope 2 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
        _7 = _8;                         // scope 2 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
        _10 = &_5;                       // scope 2 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
        _9 = _10;                        // scope 2 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
        _0 = <isize as Ord>::cmp(move _7, move _9) -> bb1; // scope 2 at ui/wrong-hashset-issue-42918.rs:8:57: 8:60
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:8:57: 8:60
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> std::cmp::Ordering {<isize as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/wrong-hashset-issue-42918.rs:8:60: 8:60
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/wrong-hashset-issue-42918.rs:24:11: 24:11
    let _1: std::collections::HashSet<MyEnum>; // in scope 0 at ui/wrong-hashset-issue-42918.rs:26:9: 26:10
    let mut _2: std::iter::Cloned<std::slice::Iter<'_, MyEnum>>; // in scope 0 at ui/wrong-hashset-issue-42918.rs:26:25: 26:49
    let mut _3: std::slice::Iter<'_, MyEnum>; // in scope 0 at ui/wrong-hashset-issue-42918.rs:26:25: 26:40
    let mut _4: &[MyEnum];               // in scope 0 at ui/wrong-hashset-issue-42918.rs:26:25: 26:40
    let mut _5: &[MyEnum; 2];            // in scope 0 at ui/wrong-hashset-issue-42918.rs:26:25: 26:40
    let mut _7: std::collections::hash_set::IntoIter<MyEnum>; // in scope 0 at ui/wrong-hashset-issue-42918.rs:27:25: 27:38
    let mut _8: std::collections::HashSet<MyEnum>; // in scope 0 at ui/wrong-hashset-issue-42918.rs:27:25: 27:26
    let _9: ();                          // in scope 0 at ui/wrong-hashset-issue-42918.rs:28:5: 28:13
    let mut _10: &mut [MyEnum];          // in scope 0 at ui/wrong-hashset-issue-42918.rs:28:5: 28:13
    let mut _11: &mut [MyEnum];          // in scope 0 at ui/wrong-hashset-issue-42918.rs:28:5: 28:13
    let mut _12: &mut std::vec::Vec<MyEnum>; // in scope 0 at ui/wrong-hashset-issue-42918.rs:28:5: 28:13
    let mut _13: (&[MyEnum; 2], &&[MyEnum]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _14: &[MyEnum; 2];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _15: &&[MyEnum];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _16: &[MyEnum];                  // in scope 0 at ui/wrong-hashset-issue-42918.rs:30:26: 30:32
    let _17: &[MyEnum];                  // in scope 0 at ui/wrong-hashset-issue-42918.rs:30:27: 30:32
    let mut _18: &std::vec::Vec<MyEnum>; // in scope 0 at ui/wrong-hashset-issue-42918.rs:30:27: 30:28
    let mut _19: std::ops::RangeFull;    // in scope 0 at ui/wrong-hashset-issue-42918.rs:30:29: 30:31
    let mut _22: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _23: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _24: &[MyEnum; 2];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _25: &&[MyEnum];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _27: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _28: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _29: &[MyEnum; 2];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _30: &[MyEnum; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _31: &&[MyEnum];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _32: &&[MyEnum];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _35: &[MyEnum; 2];           // in scope 0 at ui/wrong-hashset-issue-42918.rs:26:25: 26:40
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/wrong-hashset-issue-42918.rs:26:9: 26:10
        let mut _6: std::vec::Vec<MyEnum>; // in scope 1 at ui/wrong-hashset-issue-42918.rs:27:9: 27:14
        scope 2 {
            debug v => _6;               // in scope 2 at ui/wrong-hashset-issue-42918.rs:27:9: 27:14
            let _20: &[MyEnum; 2];       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _21: &&[MyEnum];         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _34: &[MyEnum; 2];   // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
            scope 3 {
                debug left_val => _20;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _21;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _26: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _26;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _35 = const _;                   // scope 0 at ui/wrong-hashset-issue-42918.rs:26:25: 26:40
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:26:25: 26:40
                                         // + literal: Const { ty: &[MyEnum; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _5 = _35;                        // scope 0 at ui/wrong-hashset-issue-42918.rs:26:25: 26:40
        _4 = move _5 as &[MyEnum] (Pointer(Unsize)); // scope 0 at ui/wrong-hashset-issue-42918.rs:26:25: 26:40
        _3 = core::slice::<impl [MyEnum]>::iter(move _4) -> bb1; // scope 0 at ui/wrong-hashset-issue-42918.rs:26:25: 26:40
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:26:34: 26:38
                                         // + literal: Const { ty: for<'a> fn(&'a [MyEnum]) -> std::slice::Iter<'a, MyEnum> {core::slice::<impl [MyEnum]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <std::slice::Iter<'_, MyEnum> as Iterator>::cloned::<'_, MyEnum>(move _3) -> bb2; // scope 0 at ui/wrong-hashset-issue-42918.rs:26:25: 26:49
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:26:41: 26:47
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, MyEnum>) -> Cloned<std::slice::Iter<'_, MyEnum>> {<std::slice::Iter<'_, MyEnum> as Iterator>::cloned::<'_, MyEnum>}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = <Cloned<std::slice::Iter<'_, MyEnum>> as Iterator>::collect::<HashSet<MyEnum>>(move _2) -> bb3; // scope 0 at ui/wrong-hashset-issue-42918.rs:26:25: 26:59
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:26:50: 26:57
                                         // + literal: Const { ty: fn(Cloned<std::slice::Iter<'_, MyEnum>>) -> HashSet<MyEnum> {<Cloned<std::slice::Iter<'_, MyEnum>> as Iterator>::collect::<HashSet<MyEnum>>}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = move _1;                    // scope 1 at ui/wrong-hashset-issue-42918.rs:27:25: 27:26
        _7 = <HashSet<MyEnum> as IntoIterator>::into_iter(move _8) -> bb4; // scope 1 at ui/wrong-hashset-issue-42918.rs:27:25: 27:38
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:27:27: 27:36
                                         // + literal: Const { ty: fn(HashSet<MyEnum>) -> <HashSet<MyEnum> as IntoIterator>::IntoIter {<HashSet<MyEnum> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = <std::collections::hash_set::IntoIter<MyEnum> as Iterator>::collect::<Vec<MyEnum>>(move _7) -> bb5; // scope 1 at ui/wrong-hashset-issue-42918.rs:27:25: 27:48
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:27:39: 27:46
                                         // + literal: Const { ty: fn(std::collections::hash_set::IntoIter<MyEnum>) -> Vec<MyEnum> {<std::collections::hash_set::IntoIter<MyEnum> as Iterator>::collect::<Vec<MyEnum>>}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = &mut _6;                   // scope 2 at ui/wrong-hashset-issue-42918.rs:28:5: 28:13
        _11 = <Vec<MyEnum> as DerefMut>::deref_mut(move _12) -> [return: bb6, unwind: bb13]; // scope 2 at ui/wrong-hashset-issue-42918.rs:28:5: 28:13
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:28:5: 28:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<MyEnum>) -> &'a mut <Vec<MyEnum> as Deref>::Target {<Vec<MyEnum> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb6: {
        _10 = &mut (*_11);               // scope 2 at ui/wrong-hashset-issue-42918.rs:28:5: 28:13
        _9 = slice::<impl [MyEnum]>::sort(move _10) -> [return: bb7, unwind: bb13]; // scope 2 at ui/wrong-hashset-issue-42918.rs:28:5: 28:13
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:28:7: 28:11
                                         // + literal: Const { ty: for<'a> fn(&'a mut [MyEnum]) {slice::<impl [MyEnum]>::sort}, val: Value(<ZST>) }
    }

    bb7: {
        _34 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &[MyEnum; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _14 = _34;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _18 = &_6;                       // scope 2 at ui/wrong-hashset-issue-42918.rs:30:27: 30:28
        _17 = <Vec<MyEnum> as Index<RangeFull>>::index(move _18, move _19) -> [return: bb8, unwind: bb13]; // scope 2 at ui/wrong-hashset-issue-42918.rs:30:27: 30:32
                                         // mir::Constant
                                         // + span: ui/wrong-hashset-issue-42918.rs:30:27: 30:32
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<MyEnum>, RangeFull) -> &'a <Vec<MyEnum> as Index<RangeFull>>::Output {<Vec<MyEnum> as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = _17;                       // scope 2 at ui/wrong-hashset-issue-42918.rs:30:26: 30:32
        _15 = &_16;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _13 = (move _14, move _15);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _20 = (_13.0: &[MyEnum; 2]);     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _21 = (_13.1: &&[MyEnum]);       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _24 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _25 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _23 = <[MyEnum; 2] as PartialEq<&[MyEnum]>>::eq(move _24, move _25) -> [return: bb9, unwind: bb13]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [MyEnum; 2], &'b &[MyEnum]) -> bool {<[MyEnum; 2] as PartialEq<&[MyEnum]>>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _22 = Not(move _23);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _22) -> [0: bb11, otherwise: bb10]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _26 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _28 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _30 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _29 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _31 = _32;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _33 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _27 = core::panicking::assert_failed::<[MyEnum; 2], &[MyEnum]>(move _28, move _29, move _31, move _33) -> bb13; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [MyEnum; 2], &'b &[MyEnum], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[MyEnum; 2], &[MyEnum]>}, val: Value(<ZST>) }
    }

    bb11: {
        drop(_6) -> bb12;                // scope 1 at ui/wrong-hashset-issue-42918.rs:31:1: 31:2
    }

    bb12: {
        return;                          // scope 0 at ui/wrong-hashset-issue-42918.rs:31:2: 31:2
    }

    bb13 (cleanup): {
        drop(_6) -> bb14;                // scope 1 at ui/wrong-hashset-issue-42918.rs:31:1: 31:2
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/wrong-hashset-issue-42918.rs:24:1: 31:2
    }
}

promoted[0] in main: &[MyEnum; 2] = {
    let mut _0: &[MyEnum; 2];            // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: [MyEnum; 2];             // in scope 0 at ui/wrong-hashset-issue-42918.rs:30:16: 30:24
    let mut _2: MyEnum;                  // in scope 0 at ui/wrong-hashset-issue-42918.rs:30:17: 30:19
    let mut _3: MyEnum;                  // in scope 0 at ui/wrong-hashset-issue-42918.rs:30:21: 30:23

    bb0: {
        _2 = MyEnum::E1;                 // scope 0 at ui/wrong-hashset-issue-42918.rs:30:17: 30:19
        _3 = MyEnum::E4;                 // scope 0 at ui/wrong-hashset-issue-42918.rs:30:21: 30:23
        _1 = [move _2, move _3];         // scope 0 at ui/wrong-hashset-issue-42918.rs:30:16: 30:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[1] in main: &[MyEnum; 2] = {
    let mut _0: &[MyEnum; 2];            // return place in scope 0 at ui/wrong-hashset-issue-42918.rs:26:25: 26:40
    let mut _1: [MyEnum; 2];             // in scope 0 at ui/wrong-hashset-issue-42918.rs:26:25: 26:33
    let mut _2: MyEnum;                  // in scope 0 at ui/wrong-hashset-issue-42918.rs:26:26: 26:28
    let mut _3: MyEnum;                  // in scope 0 at ui/wrong-hashset-issue-42918.rs:26:30: 26:32

    bb0: {
        _2 = MyEnum::E4;                 // scope 0 at ui/wrong-hashset-issue-42918.rs:26:26: 26:28
        _3 = MyEnum::E1;                 // scope 0 at ui/wrong-hashset-issue-42918.rs:26:30: 26:32
        _1 = [move _2, move _3];         // scope 0 at ui/wrong-hashset-issue-42918.rs:26:25: 26:33
        _0 = &_1;                        // scope 0 at ui/wrong-hashset-issue-42918.rs:26:25: 26:40
        return;                          // scope 0 at ui/wrong-hashset-issue-42918.rs:26:25: 26:40
    }
}
