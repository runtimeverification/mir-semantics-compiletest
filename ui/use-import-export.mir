// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn x() -> isize {
    let mut _0: isize;                   // return place in scope 0 at ui/use-import-export.rs:5:19: 5:24

    bb0: {
        _0 = const 1_isize;              // scope 0 at ui/use-import-export.rs:5:34: 5:35
        return;                          // scope 0 at ui/use-import-export.rs:5:38: 5:38
    }
}

fn y() -> isize {
    let mut _0: isize;                   // return place in scope 0 at ui/use-import-export.rs:9:19: 9:24

    bb0: {
        _0 = const 1_isize;              // scope 0 at ui/use-import-export.rs:9:34: 9:35
        return;                          // scope 0 at ui/use-import-export.rs:9:38: 9:38
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/use-import-export.rs:12:15: 12:15
    let _1: isize;                       // in scope 0 at ui/use-import-export.rs:12:17: 12:25
    let _2: isize;                       // in scope 0 at ui/use-import-export.rs:12:27: 12:35

    bb0: {
        _1 = x() -> bb1;                 // scope 0 at ui/use-import-export.rs:12:17: 12:25
                                         // mir::Constant
                                         // + span: ui/use-import-export.rs:12:17: 12:23
                                         // + literal: Const { ty: fn() -> isize {x}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = y() -> bb2;                 // scope 0 at ui/use-import-export.rs:12:27: 12:35
                                         // mir::Constant
                                         // + span: ui/use-import-export.rs:12:27: 12:33
                                         // + literal: Const { ty: fn() -> isize {y}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/use-import-export.rs:12:38: 12:38
    }
}
