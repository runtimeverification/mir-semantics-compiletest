// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/std-backtrace.rs:15:11: 15:11
    let _1: std::vec::Vec<std::string::String>; // in scope 0 at ui/std-backtrace.rs:16:9: 16:13
    let mut _2: std::env::Args;          // in scope 0 at ui/std-backtrace.rs:16:29: 16:40
    let mut _3: bool;                    // in scope 0 at ui/std-backtrace.rs:17:8: 17:45
    let mut _4: bool;                    // in scope 0 at ui/std-backtrace.rs:17:8: 17:23
    let mut _5: usize;                   // in scope 0 at ui/std-backtrace.rs:17:8: 17:18
    let mut _6: &std::vec::Vec<std::string::String>; // in scope 0 at ui/std-backtrace.rs:17:8: 17:18
    let mut _7: bool;                    // in scope 0 at ui/std-backtrace.rs:17:27: 17:45
    let mut _8: &std::string::String;    // in scope 0 at ui/std-backtrace.rs:17:27: 17:34
    let _9: &std::string::String;        // in scope 0 at ui/std-backtrace.rs:17:27: 17:34
    let mut _10: &std::vec::Vec<std::string::String>; // in scope 0 at ui/std-backtrace.rs:17:27: 17:31
    let mut _11: &&str;                  // in scope 0 at ui/std-backtrace.rs:17:38: 17:45
    let _12: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _13: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _14: &[&str];                // in scope 0 at ui/std-backtrace.rs:18:18: 18:40
    let mut _15: &[&str; 2];             // in scope 0 at ui/std-backtrace.rs:18:18: 18:40
    let _16: &[&str; 2];                 // in scope 0 at ui/std-backtrace.rs:18:18: 18:40
    let mut _17: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _18: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _19: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _20: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _21: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/std-backtrace.rs:18:42: 18:84
    let mut _22: &std::backtrace::Backtrace; // in scope 0 at ui/std-backtrace.rs:18:42: 18:84
    let _23: &std::backtrace::Backtrace; // in scope 0 at ui/std-backtrace.rs:18:42: 18:84
    let _24: std::backtrace::Backtrace;  // in scope 0 at ui/std-backtrace.rs:18:42: 18:84
    let mut _25: bool;                   // in scope 0 at ui/std-backtrace.rs:19:15: 19:30
    let mut _26: usize;                  // in scope 0 at ui/std-backtrace.rs:19:15: 19:25
    let mut _27: &std::vec::Vec<std::string::String>; // in scope 0 at ui/std-backtrace.rs:19:15: 19:25
    let _28: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _29: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _30: &[&str];                // in scope 0 at ui/std-backtrace.rs:20:18: 20:40
    let mut _31: &[&str; 2];             // in scope 0 at ui/std-backtrace.rs:20:18: 20:40
    let _32: &[&str; 2];                 // in scope 0 at ui/std-backtrace.rs:20:18: 20:40
    let mut _33: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _34: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _35: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _36: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _37: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/std-backtrace.rs:20:42: 20:78
    let mut _38: &std::backtrace::Backtrace; // in scope 0 at ui/std-backtrace.rs:20:42: 20:78
    let _39: &std::backtrace::Backtrace; // in scope 0 at ui/std-backtrace.rs:20:42: 20:78
    let _40: std::backtrace::Backtrace;  // in scope 0 at ui/std-backtrace.rs:20:42: 20:78
    let _41: ();                         // in scope 0 at ui/std-backtrace.rs:22:9: 22:26
    let mut _42: &str;                   // in scope 0 at ui/std-backtrace.rs:22:17: 22:25
    let _43: &str;                       // in scope 0 at ui/std-backtrace.rs:22:17: 22:25
    let mut _44: &std::string::String;   // in scope 0 at ui/std-backtrace.rs:22:17: 22:25
    let _45: &std::string::String;       // in scope 0 at ui/std-backtrace.rs:22:17: 22:25
    let _46: &std::string::String;       // in scope 0 at ui/std-backtrace.rs:22:18: 22:25
    let mut _47: &std::vec::Vec<std::string::String>; // in scope 0 at ui/std-backtrace.rs:22:18: 22:22
    let _48: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _49: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _50: &[&str];                // in scope 0 at ui/std-backtrace.rs:23:18: 23:27
    let mut _51: &[&str; 1];             // in scope 0 at ui/std-backtrace.rs:23:18: 23:27
    let _52: &[&str; 1];                 // in scope 0 at ui/std-backtrace.rs:23:18: 23:27
    let mut _53: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _54: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _55: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    scope 1 {
        debug args => _1;                // in scope 1 at ui/std-backtrace.rs:16:9: 16:13
        let mut _56: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        let mut _57: &[&str; 1];         // in scope 1 at ui/std-backtrace.rs:23:18: 23:27
        let mut _58: &[&str; 2];         // in scope 1 at ui/std-backtrace.rs:20:18: 20:40
        let mut _59: &[&str; 2];         // in scope 1 at ui/std-backtrace.rs:18:18: 18:40
        let mut _60: &&str;              // in scope 1 at ui/std-backtrace.rs:17:38: 17:45
    }

    bb0: {
        _2 = args() -> bb1;              // scope 0 at ui/std-backtrace.rs:16:29: 16:40
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:16:29: 16:38
                                         // + literal: Const { ty: fn() -> Args {args}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <Args as Iterator>::collect::<Vec<String>>(move _2) -> bb2; // scope 0 at ui/std-backtrace.rs:16:29: 16:50
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:16:41: 16:48
                                         // + literal: Const { ty: fn(Args) -> Vec<String> {<Args as Iterator>::collect::<Vec<String>>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &_1;                        // scope 1 at ui/std-backtrace.rs:17:8: 17:18
        _5 = Vec::<String>::len(move _6) -> [return: bb6, unwind: bb30]; // scope 1 at ui/std-backtrace.rs:17:8: 17:18
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:17:13: 17:16
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>) -> usize {Vec::<String>::len}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = const false;                // scope 1 at ui/std-backtrace.rs:17:8: 17:45
        goto -> bb5;                     // scope 1 at ui/std-backtrace.rs:17:8: 17:45
    }

    bb4: {
        _10 = &_1;                       // scope 1 at ui/std-backtrace.rs:17:27: 17:31
        _9 = <Vec<String> as Index<usize>>::index(move _10, const 1_usize) -> [return: bb7, unwind: bb30]; // scope 1 at ui/std-backtrace.rs:17:27: 17:34
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:17:27: 17:34
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, usize) -> &'a <Vec<String> as Index<usize>>::Output {<Vec<String> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb5: {
        switchInt(move _3) -> [0: bb14, otherwise: bb9]; // scope 1 at ui/std-backtrace.rs:17:8: 17:45
    }

    bb6: {
        _4 = Ge(move _5, const 2_usize); // scope 1 at ui/std-backtrace.rs:17:8: 17:23
        switchInt(move _4) -> [0: bb3, otherwise: bb4]; // scope 1 at ui/std-backtrace.rs:17:8: 17:45
    }

    bb7: {
        _8 = _9;                         // scope 1 at ui/std-backtrace.rs:17:27: 17:34
        _60 = const _;                   // scope 1 at ui/std-backtrace.rs:17:38: 17:45
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:17:38: 17:45
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[4])) }
        _11 = _60;                       // scope 1 at ui/std-backtrace.rs:17:38: 17:45
        _7 = <String as PartialEq<&str>>::eq(move _8, move _11) -> [return: bb8, unwind: bb30]; // scope 1 at ui/std-backtrace.rs:17:27: 17:45
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:17:27: 17:45
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _3 = move _7;                    // scope 1 at ui/std-backtrace.rs:17:8: 17:45
        goto -> bb5;                     // scope 1 at ui/std-backtrace.rs:17:8: 17:45
    }

    bb9: {
        _59 = const _;                   // scope 1 at ui/std-backtrace.rs:18:18: 18:40
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:18:18: 18:40
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[3])) }
        _16 = _59;                       // scope 1 at ui/std-backtrace.rs:18:18: 18:40
        _15 = _16;                       // scope 1 at ui/std-backtrace.rs:18:18: 18:40
        _14 = move _15 as &[&str] (Pointer(Unsize)); // scope 1 at ui/std-backtrace.rs:18:18: 18:40
        _24 = Backtrace::force_capture() -> [return: bb10, unwind: bb30]; // scope 1 at ui/std-backtrace.rs:18:42: 18:84
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:18:42: 18:82
                                         // + literal: Const { ty: fn() -> Backtrace {Backtrace::force_capture}, val: Value(<ZST>) }
    }

    bb10: {
        _23 = &_24;                      // scope 1 at ui/std-backtrace.rs:18:42: 18:84
        _22 = _23;                       // scope 1 at ui/std-backtrace.rs:18:42: 18:84
        _21 = core::fmt::ArgumentV1::<'_>::new_display::<Backtrace>(move _22) -> [return: bb11, unwind: bb29]; // scope 1 at ui/std-backtrace.rs:18:42: 18:84
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:18:42: 18:84
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b Backtrace) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<Backtrace>}, val: Value(<ZST>) }
    }

    bb11: {
        _20 = [move _21];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _19 = &_20;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _18 = _19;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _17 = move _18 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _13 = Arguments::<'_>::new_v1(move _14, move _17) -> [return: bb12, unwind: bb29]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb12: {
        _12 = _print(move _13) -> [return: bb13, unwind: bb29]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb13: {
        drop(_24) -> [return: bb26, unwind: bb30]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb14: {
        _27 = &_1;                       // scope 1 at ui/std-backtrace.rs:19:15: 19:25
        _26 = Vec::<String>::len(move _27) -> [return: bb15, unwind: bb30]; // scope 1 at ui/std-backtrace.rs:19:15: 19:25
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:19:20: 19:23
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>) -> usize {Vec::<String>::len}, val: Value(<ZST>) }
    }

    bb15: {
        _25 = Ge(move _26, const 2_usize); // scope 1 at ui/std-backtrace.rs:19:15: 19:30
        switchInt(move _25) -> [0: bb21, otherwise: bb16]; // scope 1 at ui/std-backtrace.rs:19:15: 19:30
    }

    bb16: {
        _58 = const _;                   // scope 1 at ui/std-backtrace.rs:20:18: 20:40
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:20:18: 20:40
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[2])) }
        _32 = _58;                       // scope 1 at ui/std-backtrace.rs:20:18: 20:40
        _31 = _32;                       // scope 1 at ui/std-backtrace.rs:20:18: 20:40
        _30 = move _31 as &[&str] (Pointer(Unsize)); // scope 1 at ui/std-backtrace.rs:20:18: 20:40
        _40 = Backtrace::capture() -> [return: bb17, unwind: bb30]; // scope 1 at ui/std-backtrace.rs:20:42: 20:78
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:20:42: 20:76
                                         // + literal: Const { ty: fn() -> Backtrace {Backtrace::capture}, val: Value(<ZST>) }
    }

    bb17: {
        _39 = &_40;                      // scope 1 at ui/std-backtrace.rs:20:42: 20:78
        _38 = _39;                       // scope 1 at ui/std-backtrace.rs:20:42: 20:78
        _37 = core::fmt::ArgumentV1::<'_>::new_display::<Backtrace>(move _38) -> [return: bb18, unwind: bb28]; // scope 1 at ui/std-backtrace.rs:20:42: 20:78
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:20:42: 20:78
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b Backtrace) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<Backtrace>}, val: Value(<ZST>) }
    }

    bb18: {
        _36 = [move _37];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _35 = &_36;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _34 = _35;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _33 = move _34 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _29 = Arguments::<'_>::new_v1(move _30, move _33) -> [return: bb19, unwind: bb28]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb19: {
        _28 = _print(move _29) -> [return: bb20, unwind: bb28]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb20: {
        drop(_40) -> [return: bb26, unwind: bb30]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb21: {
        _47 = &_1;                       // scope 1 at ui/std-backtrace.rs:22:18: 22:22
        _46 = <Vec<String> as Index<usize>>::index(move _47, const 0_usize) -> [return: bb22, unwind: bb30]; // scope 1 at ui/std-backtrace.rs:22:18: 22:25
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:22:18: 22:25
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, usize) -> &'a <Vec<String> as Index<usize>>::Output {<Vec<String> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb22: {
        _45 = _46;                       // scope 1 at ui/std-backtrace.rs:22:17: 22:25
        _44 = _45;                       // scope 1 at ui/std-backtrace.rs:22:17: 22:25
        _43 = <String as Deref>::deref(move _44) -> [return: bb23, unwind: bb30]; // scope 1 at ui/std-backtrace.rs:22:17: 22:25
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:22:17: 22:25
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb23: {
        _42 = _43;                       // scope 1 at ui/std-backtrace.rs:22:17: 22:25
        _41 = runtest(move _42) -> [return: bb24, unwind: bb30]; // scope 1 at ui/std-backtrace.rs:22:9: 22:26
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:22:9: 22:16
                                         // + literal: Const { ty: for<'a> fn(&'a str) {runtest}, val: Value(<ZST>) }
    }

    bb24: {
        _57 = const _;                   // scope 1 at ui/std-backtrace.rs:23:18: 23:27
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:23:18: 23:27
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _52 = _57;                       // scope 1 at ui/std-backtrace.rs:23:18: 23:27
        _51 = _52;                       // scope 1 at ui/std-backtrace.rs:23:18: 23:27
        _50 = move _51 as &[&str] (Pointer(Unsize)); // scope 1 at ui/std-backtrace.rs:23:18: 23:27
        _56 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main, [], Some(promoted[0])) }
        _55 = _56;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _54 = _55;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _53 = move _54 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _49 = Arguments::<'_>::new_v1(move _50, move _53) -> [return: bb25, unwind: bb30]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb25: {
        _48 = _print(move _49) -> [return: bb32, unwind: bb30]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb26: {
        drop(_1) -> bb27;                // scope 0 at ui/std-backtrace.rs:25:1: 25:2
    }

    bb27: {
        return;                          // scope 0 at ui/std-backtrace.rs:25:2: 25:2
    }

    bb28 (cleanup): {
        drop(_40) -> bb30;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb29 (cleanup): {
        drop(_24) -> bb30;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb30 (cleanup): {
        drop(_1) -> bb31;                // scope 0 at ui/std-backtrace.rs:25:1: 25:2
    }

    bb31 (cleanup): {
        resume;                          // scope 0 at ui/std-backtrace.rs:15:1: 25:2
    }

    bb32: {
        goto -> bb26;                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    }
}

promoted[0] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/std-backtrace.rs:23:18: 23:27
    let mut _1: [&str; 1];               // in scope 0 at ui/std-backtrace.rs:23:18: 23:27

    bb0: {
        _1 = [const "test ok\n"];        // scope 0 at ui/std-backtrace.rs:23:18: 23:27
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:23:18: 23:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/std-backtrace.rs:23:18: 23:27
        return;                          // scope 0 at ui/std-backtrace.rs:23:18: 23:27
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/std-backtrace.rs:20:18: 20:40
    let mut _1: [&str; 2];               // in scope 0 at ui/std-backtrace.rs:20:18: 20:40

    bb0: {
        _1 = [const "stack backtrace:\n", const "\n"]; // scope 0 at ui/std-backtrace.rs:20:18: 20:40
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:20:18: 20:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:20:18: 20:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/std-backtrace.rs:20:18: 20:40
        return;                          // scope 0 at ui/std-backtrace.rs:20:18: 20:40
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/std-backtrace.rs:18:18: 18:40
    let mut _1: [&str; 2];               // in scope 0 at ui/std-backtrace.rs:18:18: 18:40

    bb0: {
        _1 = [const "stack backtrace:\n", const "\n"]; // scope 0 at ui/std-backtrace.rs:18:18: 18:40
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:18:18: 18:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:18:18: 18:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/std-backtrace.rs:18:18: 18:40
        return;                          // scope 0 at ui/std-backtrace.rs:18:18: 18:40
    }
}

promoted[4] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/std-backtrace.rs:17:38: 17:45
    let mut _1: &str;                    // in scope 0 at ui/std-backtrace.rs:17:38: 17:45

    bb0: {
        _1 = const "force";              // scope 0 at ui/std-backtrace.rs:17:38: 17:45
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:17:38: 17:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/std-backtrace.rs:17:38: 17:45
        return;                          // scope 0 at ui/std-backtrace.rs:17:38: 17:45
    }
}

fn runtest(_1: &str) -> () {
    debug me => _1;                      // in scope 0 at ui/std-backtrace.rs:27:12: 27:14
    let mut _0: ();                      // return place in scope 0 at ui/std-backtrace.rs:27:22: 27:22
    let _2: ();                          // in scope 0 at ui/std-backtrace.rs:28:5: 28:38
    let _3: ();                          // in scope 0 at ui/std-backtrace.rs:29:5: 29:42
    let _4: std::process::Output;        // in scope 0 at ui/std-backtrace.rs:31:9: 31:10
    let mut _5: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/std-backtrace.rs:31:13: 31:74
    let mut _6: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:31:13: 31:74
    let mut _7: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:31:13: 31:65
    let mut _8: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:31:13: 31:65
    let mut _9: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:31:13: 31:38
    let mut _10: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:31:13: 31:38
    let mut _11: std::process::Command;  // in scope 0 at ui/std-backtrace.rs:31:13: 31:29
    let mut _12: &str;                   // in scope 0 at ui/std-backtrace.rs:31:26: 31:28
    let mut _13: bool;                   // in scope 0 at ui/std-backtrace.rs:32:5: 32:32
    let mut _14: bool;                   // in scope 0 at ui/std-backtrace.rs:32:13: 32:31
    let mut _15: &std::process::ExitStatus; // in scope 0 at ui/std-backtrace.rs:32:13: 32:31
    let mut _16: !;                      // in scope 0 at ui/std-backtrace.rs:32:5: 32:32
    let mut _17: bool;                   // in scope 0 at ui/std-backtrace.rs:33:5: 33:79
    let mut _18: bool;                   // in scope 0 at ui/std-backtrace.rs:33:13: 33:78
    let mut _19: &str;                   // in scope 0 at ui/std-backtrace.rs:33:13: 33:78
    let _20: &str;                       // in scope 0 at ui/std-backtrace.rs:33:13: 33:78
    let mut _21: &std::borrow::Cow<'_, str>; // in scope 0 at ui/std-backtrace.rs:33:13: 33:78
    let _22: std::borrow::Cow<'_, str>;  // in scope 0 at ui/std-backtrace.rs:33:13: 33:47
    let mut _23: &[u8];                  // in scope 0 at ui/std-backtrace.rs:33:37: 33:46
    let _24: &[u8];                      // in scope 0 at ui/std-backtrace.rs:33:37: 33:46
    let mut _25: &std::vec::Vec<u8>;     // in scope 0 at ui/std-backtrace.rs:33:37: 33:46
    let _26: &std::vec::Vec<u8>;         // in scope 0 at ui/std-backtrace.rs:33:37: 33:46
    let mut _27: !;                      // in scope 0 at ui/std-backtrace.rs:33:5: 33:79
    let mut _28: bool;                   // in scope 0 at ui/std-backtrace.rs:34:5: 34:76
    let mut _29: bool;                   // in scope 0 at ui/std-backtrace.rs:34:13: 34:75
    let mut _30: &str;                   // in scope 0 at ui/std-backtrace.rs:34:13: 34:75
    let _31: &str;                       // in scope 0 at ui/std-backtrace.rs:34:13: 34:75
    let mut _32: &std::borrow::Cow<'_, str>; // in scope 0 at ui/std-backtrace.rs:34:13: 34:75
    let _33: std::borrow::Cow<'_, str>;  // in scope 0 at ui/std-backtrace.rs:34:13: 34:47
    let mut _34: &[u8];                  // in scope 0 at ui/std-backtrace.rs:34:37: 34:46
    let _35: &[u8];                      // in scope 0 at ui/std-backtrace.rs:34:37: 34:46
    let mut _36: &std::vec::Vec<u8>;     // in scope 0 at ui/std-backtrace.rs:34:37: 34:46
    let _37: &std::vec::Vec<u8>;         // in scope 0 at ui/std-backtrace.rs:34:37: 34:46
    let mut _38: !;                      // in scope 0 at ui/std-backtrace.rs:34:5: 34:76
    let mut _40: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/std-backtrace.rs:36:13: 36:74
    let mut _41: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:36:13: 36:74
    let mut _42: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:36:13: 36:65
    let mut _43: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:36:13: 36:65
    let mut _44: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:36:13: 36:38
    let mut _45: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:36:13: 36:38
    let mut _46: std::process::Command;  // in scope 0 at ui/std-backtrace.rs:36:13: 36:29
    let mut _47: &str;                   // in scope 0 at ui/std-backtrace.rs:36:26: 36:28
    let mut _48: bool;                   // in scope 0 at ui/std-backtrace.rs:37:5: 37:32
    let mut _49: bool;                   // in scope 0 at ui/std-backtrace.rs:37:13: 37:31
    let mut _50: &std::process::ExitStatus; // in scope 0 at ui/std-backtrace.rs:37:13: 37:31
    let mut _51: !;                      // in scope 0 at ui/std-backtrace.rs:37:5: 37:32
    let mut _52: bool;                   // in scope 0 at ui/std-backtrace.rs:38:5: 38:81
    let mut _53: bool;                   // in scope 0 at ui/std-backtrace.rs:38:13: 38:80
    let mut _54: &str;                   // in scope 0 at ui/std-backtrace.rs:38:13: 38:80
    let _55: &str;                       // in scope 0 at ui/std-backtrace.rs:38:13: 38:80
    let mut _56: &std::borrow::Cow<'_, str>; // in scope 0 at ui/std-backtrace.rs:38:13: 38:80
    let _57: std::borrow::Cow<'_, str>;  // in scope 0 at ui/std-backtrace.rs:38:13: 38:47
    let mut _58: &[u8];                  // in scope 0 at ui/std-backtrace.rs:38:37: 38:46
    let _59: &[u8];                      // in scope 0 at ui/std-backtrace.rs:38:37: 38:46
    let mut _60: &std::vec::Vec<u8>;     // in scope 0 at ui/std-backtrace.rs:38:37: 38:46
    let _61: &std::vec::Vec<u8>;         // in scope 0 at ui/std-backtrace.rs:38:37: 38:46
    let mut _62: !;                      // in scope 0 at ui/std-backtrace.rs:38:5: 38:81
    let mut _64: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/std-backtrace.rs:40:13: 40:47
    let mut _65: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:40:13: 40:47
    let mut _66: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:40:13: 40:38
    let mut _67: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:40:13: 40:38
    let mut _68: std::process::Command;  // in scope 0 at ui/std-backtrace.rs:40:13: 40:29
    let mut _69: &str;                   // in scope 0 at ui/std-backtrace.rs:40:26: 40:28
    let mut _70: bool;                   // in scope 0 at ui/std-backtrace.rs:41:5: 41:32
    let mut _71: bool;                   // in scope 0 at ui/std-backtrace.rs:41:13: 41:31
    let mut _72: &std::process::ExitStatus; // in scope 0 at ui/std-backtrace.rs:41:13: 41:31
    let mut _73: !;                      // in scope 0 at ui/std-backtrace.rs:41:5: 41:32
    let mut _74: bool;                   // in scope 0 at ui/std-backtrace.rs:42:5: 42:81
    let mut _75: bool;                   // in scope 0 at ui/std-backtrace.rs:42:13: 42:80
    let mut _76: &str;                   // in scope 0 at ui/std-backtrace.rs:42:13: 42:80
    let _77: &str;                       // in scope 0 at ui/std-backtrace.rs:42:13: 42:80
    let mut _78: &std::borrow::Cow<'_, str>; // in scope 0 at ui/std-backtrace.rs:42:13: 42:80
    let _79: std::borrow::Cow<'_, str>;  // in scope 0 at ui/std-backtrace.rs:42:13: 42:47
    let mut _80: &[u8];                  // in scope 0 at ui/std-backtrace.rs:42:37: 42:46
    let _81: &[u8];                      // in scope 0 at ui/std-backtrace.rs:42:37: 42:46
    let mut _82: &std::vec::Vec<u8>;     // in scope 0 at ui/std-backtrace.rs:42:37: 42:46
    let _83: &std::vec::Vec<u8>;         // in scope 0 at ui/std-backtrace.rs:42:37: 42:46
    let mut _84: !;                      // in scope 0 at ui/std-backtrace.rs:42:5: 42:81
    let mut _86: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/std-backtrace.rs:44:13: 48:18
    let mut _87: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:44:13: 48:18
    let mut _88: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:44:13: 47:36
    let mut _89: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:44:13: 47:36
    let mut _90: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:44:13: 46:40
    let mut _91: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:44:13: 46:40
    let mut _92: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:44:13: 45:18
    let mut _93: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:44:13: 45:18
    let mut _94: std::process::Command;  // in scope 0 at ui/std-backtrace.rs:44:13: 44:29
    let mut _95: &str;                   // in scope 0 at ui/std-backtrace.rs:44:26: 44:28
    let mut _96: bool;                   // in scope 0 at ui/std-backtrace.rs:50:5: 50:32
    let mut _97: bool;                   // in scope 0 at ui/std-backtrace.rs:50:13: 50:31
    let mut _98: &std::process::ExitStatus; // in scope 0 at ui/std-backtrace.rs:50:13: 50:31
    let mut _99: !;                      // in scope 0 at ui/std-backtrace.rs:50:5: 50:32
    let mut _100: bool;                  // in scope 0 at ui/std-backtrace.rs:51:5: 51:79
    let mut _101: bool;                  // in scope 0 at ui/std-backtrace.rs:51:13: 51:78
    let mut _102: &str;                  // in scope 0 at ui/std-backtrace.rs:51:13: 51:78
    let _103: &str;                      // in scope 0 at ui/std-backtrace.rs:51:13: 51:78
    let mut _104: &std::borrow::Cow<'_, str>; // in scope 0 at ui/std-backtrace.rs:51:13: 51:78
    let _105: std::borrow::Cow<'_, str>; // in scope 0 at ui/std-backtrace.rs:51:13: 51:47
    let mut _106: &[u8];                 // in scope 0 at ui/std-backtrace.rs:51:37: 51:46
    let _107: &[u8];                     // in scope 0 at ui/std-backtrace.rs:51:37: 51:46
    let mut _108: &std::vec::Vec<u8>;    // in scope 0 at ui/std-backtrace.rs:51:37: 51:46
    let _109: &std::vec::Vec<u8>;        // in scope 0 at ui/std-backtrace.rs:51:37: 51:46
    let mut _110: !;                     // in scope 0 at ui/std-backtrace.rs:51:5: 51:79
    let mut _112: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/std-backtrace.rs:53:13: 57:18
    let mut _113: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:53:13: 57:18
    let mut _114: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:53:13: 56:36
    let mut _115: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:53:13: 56:36
    let mut _116: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:53:13: 55:40
    let mut _117: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:53:13: 55:40
    let mut _118: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:53:13: 54:18
    let mut _119: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:53:13: 54:18
    let mut _120: std::process::Command; // in scope 0 at ui/std-backtrace.rs:53:13: 53:29
    let mut _121: &str;                  // in scope 0 at ui/std-backtrace.rs:53:26: 53:28
    let mut _122: bool;                  // in scope 0 at ui/std-backtrace.rs:59:5: 59:32
    let mut _123: bool;                  // in scope 0 at ui/std-backtrace.rs:59:13: 59:31
    let mut _124: &std::process::ExitStatus; // in scope 0 at ui/std-backtrace.rs:59:13: 59:31
    let mut _125: !;                     // in scope 0 at ui/std-backtrace.rs:59:5: 59:32
    let mut _126: bool;                  // in scope 0 at ui/std-backtrace.rs:60:5: 60:81
    let mut _127: bool;                  // in scope 0 at ui/std-backtrace.rs:60:13: 60:80
    let mut _128: &str;                  // in scope 0 at ui/std-backtrace.rs:60:13: 60:80
    let _129: &str;                      // in scope 0 at ui/std-backtrace.rs:60:13: 60:80
    let mut _130: &std::borrow::Cow<'_, str>; // in scope 0 at ui/std-backtrace.rs:60:13: 60:80
    let _131: std::borrow::Cow<'_, str>; // in scope 0 at ui/std-backtrace.rs:60:13: 60:47
    let mut _132: &[u8];                 // in scope 0 at ui/std-backtrace.rs:60:37: 60:46
    let _133: &[u8];                     // in scope 0 at ui/std-backtrace.rs:60:37: 60:46
    let mut _134: &std::vec::Vec<u8>;    // in scope 0 at ui/std-backtrace.rs:60:37: 60:46
    let _135: &std::vec::Vec<u8>;        // in scope 0 at ui/std-backtrace.rs:60:37: 60:46
    let mut _136: !;                     // in scope 0 at ui/std-backtrace.rs:60:5: 60:81
    let mut _138: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/std-backtrace.rs:62:13: 66:18
    let mut _139: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:62:13: 66:18
    let mut _140: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:62:13: 65:36
    let mut _141: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:62:13: 65:36
    let mut _142: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:62:13: 64:40
    let mut _143: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:62:13: 64:40
    let mut _144: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:62:13: 63:22
    let mut _145: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:62:13: 63:22
    let mut _146: std::process::Command; // in scope 0 at ui/std-backtrace.rs:62:13: 62:29
    let mut _147: &str;                  // in scope 0 at ui/std-backtrace.rs:62:26: 62:28
    let mut _148: bool;                  // in scope 0 at ui/std-backtrace.rs:68:5: 68:32
    let mut _149: bool;                  // in scope 0 at ui/std-backtrace.rs:68:13: 68:31
    let mut _150: &std::process::ExitStatus; // in scope 0 at ui/std-backtrace.rs:68:13: 68:31
    let mut _151: !;                     // in scope 0 at ui/std-backtrace.rs:68:5: 68:32
    let mut _152: bool;                  // in scope 0 at ui/std-backtrace.rs:69:5: 69:79
    let mut _153: bool;                  // in scope 0 at ui/std-backtrace.rs:69:13: 69:78
    let mut _154: &str;                  // in scope 0 at ui/std-backtrace.rs:69:13: 69:78
    let _155: &str;                      // in scope 0 at ui/std-backtrace.rs:69:13: 69:78
    let mut _156: &std::borrow::Cow<'_, str>; // in scope 0 at ui/std-backtrace.rs:69:13: 69:78
    let _157: std::borrow::Cow<'_, str>; // in scope 0 at ui/std-backtrace.rs:69:13: 69:47
    let mut _158: &[u8];                 // in scope 0 at ui/std-backtrace.rs:69:37: 69:46
    let _159: &[u8];                     // in scope 0 at ui/std-backtrace.rs:69:37: 69:46
    let mut _160: &std::vec::Vec<u8>;    // in scope 0 at ui/std-backtrace.rs:69:37: 69:46
    let _161: &std::vec::Vec<u8>;        // in scope 0 at ui/std-backtrace.rs:69:37: 69:46
    let mut _162: !;                     // in scope 0 at ui/std-backtrace.rs:69:5: 69:79
    let mut _164: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/std-backtrace.rs:71:13: 71:51
    let mut _165: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:71:13: 71:51
    let mut _166: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:71:13: 71:42
    let mut _167: &mut std::process::Command; // in scope 0 at ui/std-backtrace.rs:71:13: 71:42
    let mut _168: std::process::Command; // in scope 0 at ui/std-backtrace.rs:71:13: 71:29
    let mut _169: &str;                  // in scope 0 at ui/std-backtrace.rs:71:26: 71:28
    let mut _170: bool;                  // in scope 0 at ui/std-backtrace.rs:72:5: 72:32
    let mut _171: bool;                  // in scope 0 at ui/std-backtrace.rs:72:13: 72:31
    let mut _172: &std::process::ExitStatus; // in scope 0 at ui/std-backtrace.rs:72:13: 72:31
    let mut _173: !;                     // in scope 0 at ui/std-backtrace.rs:72:5: 72:32
    let mut _174: bool;                  // in scope 0 at ui/std-backtrace.rs:73:5: 73:79
    let mut _175: bool;                  // in scope 0 at ui/std-backtrace.rs:73:13: 73:78
    let mut _176: &str;                  // in scope 0 at ui/std-backtrace.rs:73:13: 73:78
    let _177: &str;                      // in scope 0 at ui/std-backtrace.rs:73:13: 73:78
    let mut _178: &std::borrow::Cow<'_, str>; // in scope 0 at ui/std-backtrace.rs:73:13: 73:78
    let _179: std::borrow::Cow<'_, str>; // in scope 0 at ui/std-backtrace.rs:73:13: 73:47
    let mut _180: &[u8];                 // in scope 0 at ui/std-backtrace.rs:73:37: 73:46
    let _181: &[u8];                     // in scope 0 at ui/std-backtrace.rs:73:37: 73:46
    let mut _182: &std::vec::Vec<u8>;    // in scope 0 at ui/std-backtrace.rs:73:37: 73:46
    let _183: &std::vec::Vec<u8>;        // in scope 0 at ui/std-backtrace.rs:73:37: 73:46
    let mut _184: !;                     // in scope 0 at ui/std-backtrace.rs:73:5: 73:79
    scope 1 {
        debug p => _4;                   // in scope 1 at ui/std-backtrace.rs:31:9: 31:10
        let _39: std::process::Output;   // in scope 1 at ui/std-backtrace.rs:36:9: 36:10
        scope 2 {
            debug p => _39;              // in scope 2 at ui/std-backtrace.rs:36:9: 36:10
            let _63: std::process::Output; // in scope 2 at ui/std-backtrace.rs:40:9: 40:10
            scope 3 {
                debug p => _63;          // in scope 3 at ui/std-backtrace.rs:40:9: 40:10
                let _85: std::process::Output; // in scope 3 at ui/std-backtrace.rs:44:9: 44:10
                scope 4 {
                    debug p => _85;      // in scope 4 at ui/std-backtrace.rs:44:9: 44:10
                    let _111: std::process::Output; // in scope 4 at ui/std-backtrace.rs:53:9: 53:10
                    scope 5 {
                        debug p => _111; // in scope 5 at ui/std-backtrace.rs:53:9: 53:10
                        let _137: std::process::Output; // in scope 5 at ui/std-backtrace.rs:62:9: 62:10
                        scope 6 {
                            debug p => _137; // in scope 6 at ui/std-backtrace.rs:62:9: 62:10
                            let _163: std::process::Output; // in scope 6 at ui/std-backtrace.rs:71:9: 71:10
                            scope 7 {
                                debug p => _163; // in scope 7 at ui/std-backtrace.rs:71:9: 71:10
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = remove_var::<&str>(const "RUST_BACKTRACE") -> bb1; // scope 0 at ui/std-backtrace.rs:28:5: 28:38
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:28:5: 28:20
                                         // + literal: Const { ty: fn(&str) {remove_var::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:28:21: 28:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _3 = remove_var::<&str>(const "RUST_LIB_BACKTRACE") -> bb2; // scope 0 at ui/std-backtrace.rs:29:5: 29:42
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:29:5: 29:20
                                         // + literal: Const { ty: fn(&str) {remove_var::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:29:21: 29:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _12 = _1;                        // scope 0 at ui/std-backtrace.rs:31:26: 31:28
        _11 = Command::new::<&str>(move _12) -> bb3; // scope 0 at ui/std-backtrace.rs:31:13: 31:29
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:31:13: 31:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> Command {Command::new::<&str>}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = &mut _11;                  // scope 0 at ui/std-backtrace.rs:31:13: 31:38
        _9 = Command::arg::<&str>(move _10, const "a") -> [return: bb4, unwind: bb151]; // scope 0 at ui/std-backtrace.rs:31:13: 31:38
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:31:30: 31:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:31:34: 31:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _8 = &mut (*_9);                 // scope 0 at ui/std-backtrace.rs:31:13: 31:65
        _7 = Command::env::<&str, &str>(move _8, const "RUST_BACKTRACE", const "1") -> [return: bb5, unwind: bb151]; // scope 0 at ui/std-backtrace.rs:31:13: 31:65
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:31:39: 31:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str, &str) -> &'a mut Command {Command::env::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:31:43: 31:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:31:61: 31:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _6 = &mut (*_7);                 // scope 0 at ui/std-backtrace.rs:31:13: 31:74
        _5 = Command::output(move _6) -> [return: bb6, unwind: bb151]; // scope 0 at ui/std-backtrace.rs:31:13: 31:74
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:31:66: 31:72
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb6: {
        _4 = Result::<Output, std::io::Error>::unwrap(move _5) -> [return: bb7, unwind: bb151]; // scope 0 at ui/std-backtrace.rs:31:13: 31:83
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:31:75: 31:81
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_11) -> [return: bb8, unwind: bb150]; // scope 0 at ui/std-backtrace.rs:31:83: 31:84
    }

    bb8: {
        _15 = &(_4.0: std::process::ExitStatus); // scope 1 at ui/std-backtrace.rs:32:13: 32:31
        _14 = ExitStatus::success(move _15) -> [return: bb9, unwind: bb150]; // scope 1 at ui/std-backtrace.rs:32:13: 32:31
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:32:22: 32:29
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb9: {
        _13 = Not(move _14);             // scope 1 at ui/std-backtrace.rs:32:5: 32:32
        switchInt(move _13) -> [0: bb11, otherwise: bb10]; // scope 1 at ui/std-backtrace.rs:32:5: 32:32
    }

    bb10: {
        _16 = core::panicking::panic(const "assertion failed: p.status.success()") -> bb150; // scope 1 at ui/std-backtrace.rs:32:5: 32:32
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:32:5: 32:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        _26 = &(_4.1: std::vec::Vec<u8>); // scope 1 at ui/std-backtrace.rs:33:37: 33:46
        _25 = _26;                       // scope 1 at ui/std-backtrace.rs:33:37: 33:46
        _24 = <Vec<u8> as Deref>::deref(move _25) -> [return: bb12, unwind: bb150]; // scope 1 at ui/std-backtrace.rs:33:37: 33:46
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:33:37: 33:46
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb12: {
        _23 = _24;                       // scope 1 at ui/std-backtrace.rs:33:37: 33:46
        _22 = String::from_utf8_lossy(move _23) -> [return: bb13, unwind: bb150]; // scope 1 at ui/std-backtrace.rs:33:13: 33:47
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:33:13: 33:36
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Cow<'a, str> {String::from_utf8_lossy}, val: Value(<ZST>) }
    }

    bb13: {
        _21 = &_22;                      // scope 1 at ui/std-backtrace.rs:33:13: 33:78
        _20 = <Cow<'_, str> as Deref>::deref(move _21) -> [return: bb14, unwind: bb149]; // scope 1 at ui/std-backtrace.rs:33:13: 33:78
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:33:13: 33:78
                                         // + literal: Const { ty: for<'a> fn(&'a Cow<'_, str>) -> &'a <Cow<'_, str> as Deref>::Target {<Cow<'_, str> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb14: {
        _19 = _20;                       // scope 1 at ui/std-backtrace.rs:33:13: 33:78
        _18 = core::str::<impl str>::contains::<'_, &str>(move _19, const "stack backtrace:\n") -> [return: bb15, unwind: bb149]; // scope 1 at ui/std-backtrace.rs:33:13: 33:78
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:33:48: 33:56
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:33:57: 33:77
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _17 = Not(move _18);             // scope 1 at ui/std-backtrace.rs:33:5: 33:79
        drop(_22) -> [return: bb16, unwind: bb150]; // scope 1 at ui/std-backtrace.rs:33:78: 33:79
    }

    bb16: {
        switchInt(move _17) -> [0: bb18, otherwise: bb17]; // scope 1 at ui/std-backtrace.rs:33:5: 33:79
    }

    bb17: {
        _27 = core::panicking::panic(const "assertion failed: String::from_utf8_lossy(&p.stdout).contains(\\\"stack backtrace:\\\\n\\\")") -> bb150; // scope 1 at ui/std-backtrace.rs:33:5: 33:79
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:33:5: 33:79
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _37 = &(_4.1: std::vec::Vec<u8>); // scope 1 at ui/std-backtrace.rs:34:37: 34:46
        _36 = _37;                       // scope 1 at ui/std-backtrace.rs:34:37: 34:46
        _35 = <Vec<u8> as Deref>::deref(move _36) -> [return: bb19, unwind: bb150]; // scope 1 at ui/std-backtrace.rs:34:37: 34:46
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:34:37: 34:46
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb19: {
        _34 = _35;                       // scope 1 at ui/std-backtrace.rs:34:37: 34:46
        _33 = String::from_utf8_lossy(move _34) -> [return: bb20, unwind: bb150]; // scope 1 at ui/std-backtrace.rs:34:13: 34:47
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:34:13: 34:36
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Cow<'a, str> {String::from_utf8_lossy}, val: Value(<ZST>) }
    }

    bb20: {
        _32 = &_33;                      // scope 1 at ui/std-backtrace.rs:34:13: 34:75
        _31 = <Cow<'_, str> as Deref>::deref(move _32) -> [return: bb21, unwind: bb148]; // scope 1 at ui/std-backtrace.rs:34:13: 34:75
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:34:13: 34:75
                                         // + literal: Const { ty: for<'a> fn(&'a Cow<'_, str>) -> &'a <Cow<'_, str> as Deref>::Target {<Cow<'_, str> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb21: {
        _30 = _31;                       // scope 1 at ui/std-backtrace.rs:34:13: 34:75
        _29 = core::str::<impl str>::contains::<'_, &str>(move _30, const "backtrace::main") -> [return: bb22, unwind: bb148]; // scope 1 at ui/std-backtrace.rs:34:13: 34:75
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:34:48: 34:56
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:34:57: 34:74
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb22: {
        _28 = Not(move _29);             // scope 1 at ui/std-backtrace.rs:34:5: 34:76
        drop(_33) -> [return: bb23, unwind: bb150]; // scope 1 at ui/std-backtrace.rs:34:75: 34:76
    }

    bb23: {
        switchInt(move _28) -> [0: bb25, otherwise: bb24]; // scope 1 at ui/std-backtrace.rs:34:5: 34:76
    }

    bb24: {
        _38 = core::panicking::panic(const "assertion failed: String::from_utf8_lossy(&p.stdout).contains(\\\"backtrace::main\\\")") -> bb150; // scope 1 at ui/std-backtrace.rs:34:5: 34:76
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:34:5: 34:76
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb25: {
        _47 = _1;                        // scope 1 at ui/std-backtrace.rs:36:26: 36:28
        _46 = Command::new::<&str>(move _47) -> [return: bb26, unwind: bb150]; // scope 1 at ui/std-backtrace.rs:36:13: 36:29
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:36:13: 36:25
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&str) -> Command {Command::new::<&str>}, val: Value(<ZST>) }
    }

    bb26: {
        _45 = &mut _46;                  // scope 1 at ui/std-backtrace.rs:36:13: 36:38
        _44 = Command::arg::<&str>(move _45, const "a") -> [return: bb27, unwind: bb147]; // scope 1 at ui/std-backtrace.rs:36:13: 36:38
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:36:30: 36:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:36:34: 36:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb27: {
        _43 = &mut (*_44);               // scope 1 at ui/std-backtrace.rs:36:13: 36:65
        _42 = Command::env::<&str, &str>(move _43, const "RUST_BACKTRACE", const "0") -> [return: bb28, unwind: bb147]; // scope 1 at ui/std-backtrace.rs:36:13: 36:65
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:36:39: 36:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str, &str) -> &'a mut Command {Command::env::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:36:43: 36:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:36:61: 36:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb28: {
        _41 = &mut (*_42);               // scope 1 at ui/std-backtrace.rs:36:13: 36:74
        _40 = Command::output(move _41) -> [return: bb29, unwind: bb147]; // scope 1 at ui/std-backtrace.rs:36:13: 36:74
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:36:66: 36:72
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb29: {
        _39 = Result::<Output, std::io::Error>::unwrap(move _40) -> [return: bb30, unwind: bb147]; // scope 1 at ui/std-backtrace.rs:36:13: 36:83
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:36:75: 36:81
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb30: {
        drop(_46) -> [return: bb31, unwind: bb146]; // scope 1 at ui/std-backtrace.rs:36:83: 36:84
    }

    bb31: {
        _50 = &(_39.0: std::process::ExitStatus); // scope 2 at ui/std-backtrace.rs:37:13: 37:31
        _49 = ExitStatus::success(move _50) -> [return: bb32, unwind: bb146]; // scope 2 at ui/std-backtrace.rs:37:13: 37:31
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:37:22: 37:29
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb32: {
        _48 = Not(move _49);             // scope 2 at ui/std-backtrace.rs:37:5: 37:32
        switchInt(move _48) -> [0: bb34, otherwise: bb33]; // scope 2 at ui/std-backtrace.rs:37:5: 37:32
    }

    bb33: {
        _51 = core::panicking::panic(const "assertion failed: p.status.success()") -> bb146; // scope 2 at ui/std-backtrace.rs:37:5: 37:32
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:37:5: 37:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb34: {
        _61 = &(_39.1: std::vec::Vec<u8>); // scope 2 at ui/std-backtrace.rs:38:37: 38:46
        _60 = _61;                       // scope 2 at ui/std-backtrace.rs:38:37: 38:46
        _59 = <Vec<u8> as Deref>::deref(move _60) -> [return: bb35, unwind: bb146]; // scope 2 at ui/std-backtrace.rs:38:37: 38:46
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:38:37: 38:46
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb35: {
        _58 = _59;                       // scope 2 at ui/std-backtrace.rs:38:37: 38:46
        _57 = String::from_utf8_lossy(move _58) -> [return: bb36, unwind: bb146]; // scope 2 at ui/std-backtrace.rs:38:13: 38:47
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:38:13: 38:36
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Cow<'a, str> {String::from_utf8_lossy}, val: Value(<ZST>) }
    }

    bb36: {
        _56 = &_57;                      // scope 2 at ui/std-backtrace.rs:38:13: 38:80
        _55 = <Cow<'_, str> as Deref>::deref(move _56) -> [return: bb37, unwind: bb145]; // scope 2 at ui/std-backtrace.rs:38:13: 38:80
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:38:13: 38:80
                                         // + literal: Const { ty: for<'a> fn(&'a Cow<'_, str>) -> &'a <Cow<'_, str> as Deref>::Target {<Cow<'_, str> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb37: {
        _54 = _55;                       // scope 2 at ui/std-backtrace.rs:38:13: 38:80
        _53 = core::str::<impl str>::contains::<'_, &str>(move _54, const "disabled backtrace\n") -> [return: bb38, unwind: bb145]; // scope 2 at ui/std-backtrace.rs:38:13: 38:80
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:38:48: 38:56
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:38:57: 38:79
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb38: {
        _52 = Not(move _53);             // scope 2 at ui/std-backtrace.rs:38:5: 38:81
        drop(_57) -> [return: bb39, unwind: bb146]; // scope 2 at ui/std-backtrace.rs:38:80: 38:81
    }

    bb39: {
        switchInt(move _52) -> [0: bb41, otherwise: bb40]; // scope 2 at ui/std-backtrace.rs:38:5: 38:81
    }

    bb40: {
        _62 = core::panicking::panic(const "assertion failed: String::from_utf8_lossy(&p.stdout).contains(\\\"disabled backtrace\\\\n\\\")") -> bb146; // scope 2 at ui/std-backtrace.rs:38:5: 38:81
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:38:5: 38:81
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb41: {
        _69 = _1;                        // scope 2 at ui/std-backtrace.rs:40:26: 40:28
        _68 = Command::new::<&str>(move _69) -> [return: bb42, unwind: bb146]; // scope 2 at ui/std-backtrace.rs:40:13: 40:29
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:40:13: 40:25
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&str) -> Command {Command::new::<&str>}, val: Value(<ZST>) }
    }

    bb42: {
        _67 = &mut _68;                  // scope 2 at ui/std-backtrace.rs:40:13: 40:38
        _66 = Command::arg::<&str>(move _67, const "a") -> [return: bb43, unwind: bb144]; // scope 2 at ui/std-backtrace.rs:40:13: 40:38
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:40:30: 40:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:40:34: 40:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb43: {
        _65 = &mut (*_66);               // scope 2 at ui/std-backtrace.rs:40:13: 40:47
        _64 = Command::output(move _65) -> [return: bb44, unwind: bb144]; // scope 2 at ui/std-backtrace.rs:40:13: 40:47
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:40:39: 40:45
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb44: {
        _63 = Result::<Output, std::io::Error>::unwrap(move _64) -> [return: bb45, unwind: bb144]; // scope 2 at ui/std-backtrace.rs:40:13: 40:56
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:40:48: 40:54
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb45: {
        drop(_68) -> [return: bb46, unwind: bb143]; // scope 2 at ui/std-backtrace.rs:40:56: 40:57
    }

    bb46: {
        _72 = &(_63.0: std::process::ExitStatus); // scope 3 at ui/std-backtrace.rs:41:13: 41:31
        _71 = ExitStatus::success(move _72) -> [return: bb47, unwind: bb143]; // scope 3 at ui/std-backtrace.rs:41:13: 41:31
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:41:22: 41:29
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb47: {
        _70 = Not(move _71);             // scope 3 at ui/std-backtrace.rs:41:5: 41:32
        switchInt(move _70) -> [0: bb49, otherwise: bb48]; // scope 3 at ui/std-backtrace.rs:41:5: 41:32
    }

    bb48: {
        _73 = core::panicking::panic(const "assertion failed: p.status.success()") -> bb143; // scope 3 at ui/std-backtrace.rs:41:5: 41:32
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:41:5: 41:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb49: {
        _83 = &(_63.1: std::vec::Vec<u8>); // scope 3 at ui/std-backtrace.rs:42:37: 42:46
        _82 = _83;                       // scope 3 at ui/std-backtrace.rs:42:37: 42:46
        _81 = <Vec<u8> as Deref>::deref(move _82) -> [return: bb50, unwind: bb143]; // scope 3 at ui/std-backtrace.rs:42:37: 42:46
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:42:37: 42:46
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb50: {
        _80 = _81;                       // scope 3 at ui/std-backtrace.rs:42:37: 42:46
        _79 = String::from_utf8_lossy(move _80) -> [return: bb51, unwind: bb143]; // scope 3 at ui/std-backtrace.rs:42:13: 42:47
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:42:13: 42:36
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Cow<'a, str> {String::from_utf8_lossy}, val: Value(<ZST>) }
    }

    bb51: {
        _78 = &_79;                      // scope 3 at ui/std-backtrace.rs:42:13: 42:80
        _77 = <Cow<'_, str> as Deref>::deref(move _78) -> [return: bb52, unwind: bb142]; // scope 3 at ui/std-backtrace.rs:42:13: 42:80
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:42:13: 42:80
                                         // + literal: Const { ty: for<'a> fn(&'a Cow<'_, str>) -> &'a <Cow<'_, str> as Deref>::Target {<Cow<'_, str> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb52: {
        _76 = _77;                       // scope 3 at ui/std-backtrace.rs:42:13: 42:80
        _75 = core::str::<impl str>::contains::<'_, &str>(move _76, const "disabled backtrace\n") -> [return: bb53, unwind: bb142]; // scope 3 at ui/std-backtrace.rs:42:13: 42:80
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:42:48: 42:56
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:42:57: 42:79
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb53: {
        _74 = Not(move _75);             // scope 3 at ui/std-backtrace.rs:42:5: 42:81
        drop(_79) -> [return: bb54, unwind: bb143]; // scope 3 at ui/std-backtrace.rs:42:80: 42:81
    }

    bb54: {
        switchInt(move _74) -> [0: bb56, otherwise: bb55]; // scope 3 at ui/std-backtrace.rs:42:5: 42:81
    }

    bb55: {
        _84 = core::panicking::panic(const "assertion failed: String::from_utf8_lossy(&p.stdout).contains(\\\"disabled backtrace\\\\n\\\")") -> bb143; // scope 3 at ui/std-backtrace.rs:42:5: 42:81
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:42:5: 42:81
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb56: {
        _95 = _1;                        // scope 3 at ui/std-backtrace.rs:44:26: 44:28
        _94 = Command::new::<&str>(move _95) -> [return: bb57, unwind: bb143]; // scope 3 at ui/std-backtrace.rs:44:13: 44:29
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:44:13: 44:25
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&str) -> Command {Command::new::<&str>}, val: Value(<ZST>) }
    }

    bb57: {
        _93 = &mut _94;                  // scope 3 at ui/std-backtrace.rs:44:13: 45:18
        _92 = Command::arg::<&str>(move _93, const "a") -> [return: bb58, unwind: bb141]; // scope 3 at ui/std-backtrace.rs:44:13: 45:18
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:45:10: 45:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:45:14: 45:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb58: {
        _91 = &mut (*_92);               // scope 3 at ui/std-backtrace.rs:44:13: 46:40
        _90 = Command::env::<&str, &str>(move _91, const "RUST_LIB_BACKTRACE", const "1") -> [return: bb59, unwind: bb141]; // scope 3 at ui/std-backtrace.rs:44:13: 46:40
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:46:10: 46:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str, &str) -> &'a mut Command {Command::env::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:46:14: 46:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:46:36: 46:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb59: {
        _89 = &mut (*_90);               // scope 3 at ui/std-backtrace.rs:44:13: 47:36
        _88 = Command::env::<&str, &str>(move _89, const "RUST_BACKTRACE", const "1") -> [return: bb60, unwind: bb141]; // scope 3 at ui/std-backtrace.rs:44:13: 47:36
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:47:10: 47:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str, &str) -> &'a mut Command {Command::env::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:47:14: 47:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:47:32: 47:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb60: {
        _87 = &mut (*_88);               // scope 3 at ui/std-backtrace.rs:44:13: 48:18
        _86 = Command::output(move _87) -> [return: bb61, unwind: bb141]; // scope 3 at ui/std-backtrace.rs:44:13: 48:18
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:48:10: 48:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb61: {
        _85 = Result::<Output, std::io::Error>::unwrap(move _86) -> [return: bb62, unwind: bb141]; // scope 3 at ui/std-backtrace.rs:44:13: 49:18
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:49:10: 49:16
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb62: {
        drop(_94) -> [return: bb63, unwind: bb140]; // scope 3 at ui/std-backtrace.rs:49:18: 49:19
    }

    bb63: {
        _98 = &(_85.0: std::process::ExitStatus); // scope 4 at ui/std-backtrace.rs:50:13: 50:31
        _97 = ExitStatus::success(move _98) -> [return: bb64, unwind: bb140]; // scope 4 at ui/std-backtrace.rs:50:13: 50:31
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:50:22: 50:29
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb64: {
        _96 = Not(move _97);             // scope 4 at ui/std-backtrace.rs:50:5: 50:32
        switchInt(move _96) -> [0: bb66, otherwise: bb65]; // scope 4 at ui/std-backtrace.rs:50:5: 50:32
    }

    bb65: {
        _99 = core::panicking::panic(const "assertion failed: p.status.success()") -> bb140; // scope 4 at ui/std-backtrace.rs:50:5: 50:32
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:50:5: 50:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb66: {
        _109 = &(_85.1: std::vec::Vec<u8>); // scope 4 at ui/std-backtrace.rs:51:37: 51:46
        _108 = _109;                     // scope 4 at ui/std-backtrace.rs:51:37: 51:46
        _107 = <Vec<u8> as Deref>::deref(move _108) -> [return: bb67, unwind: bb140]; // scope 4 at ui/std-backtrace.rs:51:37: 51:46
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:51:37: 51:46
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb67: {
        _106 = _107;                     // scope 4 at ui/std-backtrace.rs:51:37: 51:46
        _105 = String::from_utf8_lossy(move _106) -> [return: bb68, unwind: bb140]; // scope 4 at ui/std-backtrace.rs:51:13: 51:47
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:51:13: 51:36
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Cow<'a, str> {String::from_utf8_lossy}, val: Value(<ZST>) }
    }

    bb68: {
        _104 = &_105;                    // scope 4 at ui/std-backtrace.rs:51:13: 51:78
        _103 = <Cow<'_, str> as Deref>::deref(move _104) -> [return: bb69, unwind: bb139]; // scope 4 at ui/std-backtrace.rs:51:13: 51:78
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:51:13: 51:78
                                         // + literal: Const { ty: for<'a> fn(&'a Cow<'_, str>) -> &'a <Cow<'_, str> as Deref>::Target {<Cow<'_, str> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb69: {
        _102 = _103;                     // scope 4 at ui/std-backtrace.rs:51:13: 51:78
        _101 = core::str::<impl str>::contains::<'_, &str>(move _102, const "stack backtrace:\n") -> [return: bb70, unwind: bb139]; // scope 4 at ui/std-backtrace.rs:51:13: 51:78
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:51:48: 51:56
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:51:57: 51:77
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb70: {
        _100 = Not(move _101);           // scope 4 at ui/std-backtrace.rs:51:5: 51:79
        drop(_105) -> [return: bb71, unwind: bb140]; // scope 4 at ui/std-backtrace.rs:51:78: 51:79
    }

    bb71: {
        switchInt(move _100) -> [0: bb73, otherwise: bb72]; // scope 4 at ui/std-backtrace.rs:51:5: 51:79
    }

    bb72: {
        _110 = core::panicking::panic(const "assertion failed: String::from_utf8_lossy(&p.stdout).contains(\\\"stack backtrace:\\\\n\\\")") -> bb140; // scope 4 at ui/std-backtrace.rs:51:5: 51:79
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:51:5: 51:79
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb73: {
        _121 = _1;                       // scope 4 at ui/std-backtrace.rs:53:26: 53:28
        _120 = Command::new::<&str>(move _121) -> [return: bb74, unwind: bb140]; // scope 4 at ui/std-backtrace.rs:53:13: 53:29
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:53:13: 53:25
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&str) -> Command {Command::new::<&str>}, val: Value(<ZST>) }
    }

    bb74: {
        _119 = &mut _120;                // scope 4 at ui/std-backtrace.rs:53:13: 54:18
        _118 = Command::arg::<&str>(move _119, const "a") -> [return: bb75, unwind: bb138]; // scope 4 at ui/std-backtrace.rs:53:13: 54:18
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:54:10: 54:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:54:14: 54:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb75: {
        _117 = &mut (*_118);             // scope 4 at ui/std-backtrace.rs:53:13: 55:40
        _116 = Command::env::<&str, &str>(move _117, const "RUST_LIB_BACKTRACE", const "0") -> [return: bb76, unwind: bb138]; // scope 4 at ui/std-backtrace.rs:53:13: 55:40
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:55:10: 55:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str, &str) -> &'a mut Command {Command::env::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:55:14: 55:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:55:36: 55:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb76: {
        _115 = &mut (*_116);             // scope 4 at ui/std-backtrace.rs:53:13: 56:36
        _114 = Command::env::<&str, &str>(move _115, const "RUST_BACKTRACE", const "1") -> [return: bb77, unwind: bb138]; // scope 4 at ui/std-backtrace.rs:53:13: 56:36
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:56:10: 56:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str, &str) -> &'a mut Command {Command::env::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:56:14: 56:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:56:32: 56:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb77: {
        _113 = &mut (*_114);             // scope 4 at ui/std-backtrace.rs:53:13: 57:18
        _112 = Command::output(move _113) -> [return: bb78, unwind: bb138]; // scope 4 at ui/std-backtrace.rs:53:13: 57:18
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:57:10: 57:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb78: {
        _111 = Result::<Output, std::io::Error>::unwrap(move _112) -> [return: bb79, unwind: bb138]; // scope 4 at ui/std-backtrace.rs:53:13: 58:18
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:58:10: 58:16
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb79: {
        drop(_120) -> [return: bb80, unwind: bb137]; // scope 4 at ui/std-backtrace.rs:58:18: 58:19
    }

    bb80: {
        _124 = &(_111.0: std::process::ExitStatus); // scope 5 at ui/std-backtrace.rs:59:13: 59:31
        _123 = ExitStatus::success(move _124) -> [return: bb81, unwind: bb137]; // scope 5 at ui/std-backtrace.rs:59:13: 59:31
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:59:22: 59:29
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb81: {
        _122 = Not(move _123);           // scope 5 at ui/std-backtrace.rs:59:5: 59:32
        switchInt(move _122) -> [0: bb83, otherwise: bb82]; // scope 5 at ui/std-backtrace.rs:59:5: 59:32
    }

    bb82: {
        _125 = core::panicking::panic(const "assertion failed: p.status.success()") -> bb137; // scope 5 at ui/std-backtrace.rs:59:5: 59:32
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:59:5: 59:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb83: {
        _135 = &(_111.1: std::vec::Vec<u8>); // scope 5 at ui/std-backtrace.rs:60:37: 60:46
        _134 = _135;                     // scope 5 at ui/std-backtrace.rs:60:37: 60:46
        _133 = <Vec<u8> as Deref>::deref(move _134) -> [return: bb84, unwind: bb137]; // scope 5 at ui/std-backtrace.rs:60:37: 60:46
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:60:37: 60:46
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb84: {
        _132 = _133;                     // scope 5 at ui/std-backtrace.rs:60:37: 60:46
        _131 = String::from_utf8_lossy(move _132) -> [return: bb85, unwind: bb137]; // scope 5 at ui/std-backtrace.rs:60:13: 60:47
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:60:13: 60:36
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Cow<'a, str> {String::from_utf8_lossy}, val: Value(<ZST>) }
    }

    bb85: {
        _130 = &_131;                    // scope 5 at ui/std-backtrace.rs:60:13: 60:80
        _129 = <Cow<'_, str> as Deref>::deref(move _130) -> [return: bb86, unwind: bb136]; // scope 5 at ui/std-backtrace.rs:60:13: 60:80
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:60:13: 60:80
                                         // + literal: Const { ty: for<'a> fn(&'a Cow<'_, str>) -> &'a <Cow<'_, str> as Deref>::Target {<Cow<'_, str> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb86: {
        _128 = _129;                     // scope 5 at ui/std-backtrace.rs:60:13: 60:80
        _127 = core::str::<impl str>::contains::<'_, &str>(move _128, const "disabled backtrace\n") -> [return: bb87, unwind: bb136]; // scope 5 at ui/std-backtrace.rs:60:13: 60:80
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:60:48: 60:56
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:60:57: 60:79
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb87: {
        _126 = Not(move _127);           // scope 5 at ui/std-backtrace.rs:60:5: 60:81
        drop(_131) -> [return: bb88, unwind: bb137]; // scope 5 at ui/std-backtrace.rs:60:80: 60:81
    }

    bb88: {
        switchInt(move _126) -> [0: bb90, otherwise: bb89]; // scope 5 at ui/std-backtrace.rs:60:5: 60:81
    }

    bb89: {
        _136 = core::panicking::panic(const "assertion failed: String::from_utf8_lossy(&p.stdout).contains(\\\"disabled backtrace\\\\n\\\")") -> bb137; // scope 5 at ui/std-backtrace.rs:60:5: 60:81
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:60:5: 60:81
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb90: {
        _147 = _1;                       // scope 5 at ui/std-backtrace.rs:62:26: 62:28
        _146 = Command::new::<&str>(move _147) -> [return: bb91, unwind: bb137]; // scope 5 at ui/std-backtrace.rs:62:13: 62:29
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:62:13: 62:25
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(&str) -> Command {Command::new::<&str>}, val: Value(<ZST>) }
    }

    bb91: {
        _145 = &mut _146;                // scope 5 at ui/std-backtrace.rs:62:13: 63:22
        _144 = Command::arg::<&str>(move _145, const "force") -> [return: bb92, unwind: bb135]; // scope 5 at ui/std-backtrace.rs:62:13: 63:22
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:63:10: 63:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:63:14: 63:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb92: {
        _143 = &mut (*_144);             // scope 5 at ui/std-backtrace.rs:62:13: 64:40
        _142 = Command::env::<&str, &str>(move _143, const "RUST_LIB_BACKTRACE", const "0") -> [return: bb93, unwind: bb135]; // scope 5 at ui/std-backtrace.rs:62:13: 64:40
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:64:10: 64:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str, &str) -> &'a mut Command {Command::env::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:64:14: 64:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:64:36: 64:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb93: {
        _141 = &mut (*_142);             // scope 5 at ui/std-backtrace.rs:62:13: 65:36
        _140 = Command::env::<&str, &str>(move _141, const "RUST_BACKTRACE", const "0") -> [return: bb94, unwind: bb135]; // scope 5 at ui/std-backtrace.rs:62:13: 65:36
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:65:10: 65:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str, &str) -> &'a mut Command {Command::env::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:65:14: 65:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:65:32: 65:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb94: {
        _139 = &mut (*_140);             // scope 5 at ui/std-backtrace.rs:62:13: 66:18
        _138 = Command::output(move _139) -> [return: bb95, unwind: bb135]; // scope 5 at ui/std-backtrace.rs:62:13: 66:18
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:66:10: 66:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb95: {
        _137 = Result::<Output, std::io::Error>::unwrap(move _138) -> [return: bb96, unwind: bb135]; // scope 5 at ui/std-backtrace.rs:62:13: 67:18
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:67:10: 67:16
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb96: {
        drop(_146) -> [return: bb97, unwind: bb134]; // scope 5 at ui/std-backtrace.rs:67:18: 67:19
    }

    bb97: {
        _150 = &(_137.0: std::process::ExitStatus); // scope 6 at ui/std-backtrace.rs:68:13: 68:31
        _149 = ExitStatus::success(move _150) -> [return: bb98, unwind: bb134]; // scope 6 at ui/std-backtrace.rs:68:13: 68:31
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:68:22: 68:29
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb98: {
        _148 = Not(move _149);           // scope 6 at ui/std-backtrace.rs:68:5: 68:32
        switchInt(move _148) -> [0: bb100, otherwise: bb99]; // scope 6 at ui/std-backtrace.rs:68:5: 68:32
    }

    bb99: {
        _151 = core::panicking::panic(const "assertion failed: p.status.success()") -> bb134; // scope 6 at ui/std-backtrace.rs:68:5: 68:32
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:68:5: 68:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb100: {
        _161 = &(_137.1: std::vec::Vec<u8>); // scope 6 at ui/std-backtrace.rs:69:37: 69:46
        _160 = _161;                     // scope 6 at ui/std-backtrace.rs:69:37: 69:46
        _159 = <Vec<u8> as Deref>::deref(move _160) -> [return: bb101, unwind: bb134]; // scope 6 at ui/std-backtrace.rs:69:37: 69:46
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:69:37: 69:46
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb101: {
        _158 = _159;                     // scope 6 at ui/std-backtrace.rs:69:37: 69:46
        _157 = String::from_utf8_lossy(move _158) -> [return: bb102, unwind: bb134]; // scope 6 at ui/std-backtrace.rs:69:13: 69:47
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:69:13: 69:36
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Cow<'a, str> {String::from_utf8_lossy}, val: Value(<ZST>) }
    }

    bb102: {
        _156 = &_157;                    // scope 6 at ui/std-backtrace.rs:69:13: 69:78
        _155 = <Cow<'_, str> as Deref>::deref(move _156) -> [return: bb103, unwind: bb133]; // scope 6 at ui/std-backtrace.rs:69:13: 69:78
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:69:13: 69:78
                                         // + literal: Const { ty: for<'a> fn(&'a Cow<'_, str>) -> &'a <Cow<'_, str> as Deref>::Target {<Cow<'_, str> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb103: {
        _154 = _155;                     // scope 6 at ui/std-backtrace.rs:69:13: 69:78
        _153 = core::str::<impl str>::contains::<'_, &str>(move _154, const "stack backtrace:\n") -> [return: bb104, unwind: bb133]; // scope 6 at ui/std-backtrace.rs:69:13: 69:78
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:69:48: 69:56
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:69:57: 69:77
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb104: {
        _152 = Not(move _153);           // scope 6 at ui/std-backtrace.rs:69:5: 69:79
        drop(_157) -> [return: bb105, unwind: bb134]; // scope 6 at ui/std-backtrace.rs:69:78: 69:79
    }

    bb105: {
        switchInt(move _152) -> [0: bb107, otherwise: bb106]; // scope 6 at ui/std-backtrace.rs:69:5: 69:79
    }

    bb106: {
        _162 = core::panicking::panic(const "assertion failed: String::from_utf8_lossy(&p.stdout).contains(\\\"stack backtrace:\\\\n\\\")") -> bb134; // scope 6 at ui/std-backtrace.rs:69:5: 69:79
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:69:5: 69:79
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb107: {
        _169 = _1;                       // scope 6 at ui/std-backtrace.rs:71:26: 71:28
        _168 = Command::new::<&str>(move _169) -> [return: bb108, unwind: bb134]; // scope 6 at ui/std-backtrace.rs:71:13: 71:29
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:71:13: 71:25
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&str) -> Command {Command::new::<&str>}, val: Value(<ZST>) }
    }

    bb108: {
        _167 = &mut _168;                // scope 6 at ui/std-backtrace.rs:71:13: 71:42
        _166 = Command::arg::<&str>(move _167, const "force") -> [return: bb109, unwind: bb132]; // scope 6 at ui/std-backtrace.rs:71:13: 71:42
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:71:30: 71:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:71:34: 71:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb109: {
        _165 = &mut (*_166);             // scope 6 at ui/std-backtrace.rs:71:13: 71:51
        _164 = Command::output(move _165) -> [return: bb110, unwind: bb132]; // scope 6 at ui/std-backtrace.rs:71:13: 71:51
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:71:43: 71:49
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb110: {
        _163 = Result::<Output, std::io::Error>::unwrap(move _164) -> [return: bb111, unwind: bb132]; // scope 6 at ui/std-backtrace.rs:71:13: 71:60
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:71:52: 71:58
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb111: {
        drop(_168) -> [return: bb112, unwind: bb131]; // scope 6 at ui/std-backtrace.rs:71:60: 71:61
    }

    bb112: {
        _172 = &(_163.0: std::process::ExitStatus); // scope 7 at ui/std-backtrace.rs:72:13: 72:31
        _171 = ExitStatus::success(move _172) -> [return: bb113, unwind: bb131]; // scope 7 at ui/std-backtrace.rs:72:13: 72:31
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:72:22: 72:29
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb113: {
        _170 = Not(move _171);           // scope 7 at ui/std-backtrace.rs:72:5: 72:32
        switchInt(move _170) -> [0: bb115, otherwise: bb114]; // scope 7 at ui/std-backtrace.rs:72:5: 72:32
    }

    bb114: {
        _173 = core::panicking::panic(const "assertion failed: p.status.success()") -> bb131; // scope 7 at ui/std-backtrace.rs:72:5: 72:32
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:72:5: 72:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb115: {
        _183 = &(_163.1: std::vec::Vec<u8>); // scope 7 at ui/std-backtrace.rs:73:37: 73:46
        _182 = _183;                     // scope 7 at ui/std-backtrace.rs:73:37: 73:46
        _181 = <Vec<u8> as Deref>::deref(move _182) -> [return: bb116, unwind: bb131]; // scope 7 at ui/std-backtrace.rs:73:37: 73:46
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:73:37: 73:46
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb116: {
        _180 = _181;                     // scope 7 at ui/std-backtrace.rs:73:37: 73:46
        _179 = String::from_utf8_lossy(move _180) -> [return: bb117, unwind: bb131]; // scope 7 at ui/std-backtrace.rs:73:13: 73:47
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:73:13: 73:36
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Cow<'a, str> {String::from_utf8_lossy}, val: Value(<ZST>) }
    }

    bb117: {
        _178 = &_179;                    // scope 7 at ui/std-backtrace.rs:73:13: 73:78
        _177 = <Cow<'_, str> as Deref>::deref(move _178) -> [return: bb118, unwind: bb130]; // scope 7 at ui/std-backtrace.rs:73:13: 73:78
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:73:13: 73:78
                                         // + literal: Const { ty: for<'a> fn(&'a Cow<'_, str>) -> &'a <Cow<'_, str> as Deref>::Target {<Cow<'_, str> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb118: {
        _176 = _177;                     // scope 7 at ui/std-backtrace.rs:73:13: 73:78
        _175 = core::str::<impl str>::contains::<'_, &str>(move _176, const "stack backtrace:\n") -> [return: bb119, unwind: bb130]; // scope 7 at ui/std-backtrace.rs:73:13: 73:78
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:73:48: 73:56
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:73:57: 73:77
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb119: {
        _174 = Not(move _175);           // scope 7 at ui/std-backtrace.rs:73:5: 73:79
        drop(_179) -> [return: bb120, unwind: bb131]; // scope 7 at ui/std-backtrace.rs:73:78: 73:79
    }

    bb120: {
        switchInt(move _174) -> [0: bb122, otherwise: bb121]; // scope 7 at ui/std-backtrace.rs:73:5: 73:79
    }

    bb121: {
        _184 = core::panicking::panic(const "assertion failed: String::from_utf8_lossy(&p.stdout).contains(\\\"stack backtrace:\\\\n\\\")") -> bb131; // scope 7 at ui/std-backtrace.rs:73:5: 73:79
                                         // mir::Constant
                                         // + span: ui/std-backtrace.rs:73:5: 73:79
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb122: {
        drop(_163) -> [return: bb123, unwind: bb134]; // scope 6 at ui/std-backtrace.rs:74:1: 74:2
    }

    bb123: {
        drop(_137) -> [return: bb124, unwind: bb137]; // scope 5 at ui/std-backtrace.rs:74:1: 74:2
    }

    bb124: {
        drop(_111) -> [return: bb125, unwind: bb140]; // scope 4 at ui/std-backtrace.rs:74:1: 74:2
    }

    bb125: {
        drop(_85) -> [return: bb126, unwind: bb143]; // scope 3 at ui/std-backtrace.rs:74:1: 74:2
    }

    bb126: {
        drop(_63) -> [return: bb127, unwind: bb146]; // scope 2 at ui/std-backtrace.rs:74:1: 74:2
    }

    bb127: {
        drop(_39) -> [return: bb128, unwind: bb150]; // scope 1 at ui/std-backtrace.rs:74:1: 74:2
    }

    bb128: {
        drop(_4) -> bb129;               // scope 0 at ui/std-backtrace.rs:74:1: 74:2
    }

    bb129: {
        return;                          // scope 0 at ui/std-backtrace.rs:74:2: 74:2
    }

    bb130 (cleanup): {
        drop(_179) -> bb131;             // scope 7 at ui/std-backtrace.rs:73:78: 73:79
    }

    bb131 (cleanup): {
        drop(_163) -> bb134;             // scope 6 at ui/std-backtrace.rs:74:1: 74:2
    }

    bb132 (cleanup): {
        drop(_168) -> bb134;             // scope 6 at ui/std-backtrace.rs:71:60: 71:61
    }

    bb133 (cleanup): {
        drop(_157) -> bb134;             // scope 6 at ui/std-backtrace.rs:69:78: 69:79
    }

    bb134 (cleanup): {
        drop(_137) -> bb137;             // scope 5 at ui/std-backtrace.rs:74:1: 74:2
    }

    bb135 (cleanup): {
        drop(_146) -> bb137;             // scope 5 at ui/std-backtrace.rs:67:18: 67:19
    }

    bb136 (cleanup): {
        drop(_131) -> bb137;             // scope 5 at ui/std-backtrace.rs:60:80: 60:81
    }

    bb137 (cleanup): {
        drop(_111) -> bb140;             // scope 4 at ui/std-backtrace.rs:74:1: 74:2
    }

    bb138 (cleanup): {
        drop(_120) -> bb140;             // scope 4 at ui/std-backtrace.rs:58:18: 58:19
    }

    bb139 (cleanup): {
        drop(_105) -> bb140;             // scope 4 at ui/std-backtrace.rs:51:78: 51:79
    }

    bb140 (cleanup): {
        drop(_85) -> bb143;              // scope 3 at ui/std-backtrace.rs:74:1: 74:2
    }

    bb141 (cleanup): {
        drop(_94) -> bb143;              // scope 3 at ui/std-backtrace.rs:49:18: 49:19
    }

    bb142 (cleanup): {
        drop(_79) -> bb143;              // scope 3 at ui/std-backtrace.rs:42:80: 42:81
    }

    bb143 (cleanup): {
        drop(_63) -> bb146;              // scope 2 at ui/std-backtrace.rs:74:1: 74:2
    }

    bb144 (cleanup): {
        drop(_68) -> bb146;              // scope 2 at ui/std-backtrace.rs:40:56: 40:57
    }

    bb145 (cleanup): {
        drop(_57) -> bb146;              // scope 2 at ui/std-backtrace.rs:38:80: 38:81
    }

    bb146 (cleanup): {
        drop(_39) -> bb150;              // scope 1 at ui/std-backtrace.rs:74:1: 74:2
    }

    bb147 (cleanup): {
        drop(_46) -> bb150;              // scope 1 at ui/std-backtrace.rs:36:83: 36:84
    }

    bb148 (cleanup): {
        drop(_33) -> bb150;              // scope 1 at ui/std-backtrace.rs:34:75: 34:76
    }

    bb149 (cleanup): {
        drop(_22) -> bb150;              // scope 1 at ui/std-backtrace.rs:33:78: 33:79
    }

    bb150 (cleanup): {
        drop(_4) -> bb152;               // scope 0 at ui/std-backtrace.rs:74:1: 74:2
    }

    bb151 (cleanup): {
        drop(_11) -> bb152;              // scope 0 at ui/std-backtrace.rs:31:83: 31:84
    }

    bb152 (cleanup): {
        resume;                          // scope 0 at ui/std-backtrace.rs:27:1: 74:2
    }
}
