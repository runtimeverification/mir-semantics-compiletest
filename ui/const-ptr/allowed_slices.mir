// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static S0: &[u32] = {
    let mut _0: &[u32];                  // return place in scope 0 at ui/const-ptr/allowed_slices.rs:15:16: 15:22
    let _1: &[u32];                      // in scope 0 at ui/const-ptr/allowed_slices.rs:15:34: 15:63
    let mut _2: *const u32;              // in scope 0 at ui/const-ptr/allowed_slices.rs:15:49: 15:59
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:15:34: 15:63
        StorageLive(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:15:49: 15:59
        ConstEvalCounter;                // scope 1 at ui/const-ptr/allowed_slices.rs:15:49: 15:59
        _2 = dangling::<u32>() -> bb1;   // scope 1 at ui/const-ptr/allowed_slices.rs:15:49: 15:59
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:15:49: 15:57
                                         // + literal: Const { ty: fn() -> *const u32 {dangling::<u32>}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 1 at ui/const-ptr/allowed_slices.rs:15:34: 15:63
        _1 = std::slice::from_raw_parts::<'_, u32>(move _2, const 0_usize) -> bb2; // scope 1 at ui/const-ptr/allowed_slices.rs:15:34: 15:63
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:15:34: 15:48
                                         // + literal: Const { ty: unsafe fn(*const u32, usize) -> &[u32] {std::slice::from_raw_parts::<'_, u32>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = &(*_1);                     // scope 1 at ui/const-ptr/allowed_slices.rs:15:34: 15:63
        StorageDead(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:15:62: 15:63
        StorageDead(_1);                 // scope 0 at ui/const-ptr/allowed_slices.rs:15:64: 15:65
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:15:1: 15:66
    }
}

static S1: &[()] = {
    let mut _0: &[()];                   // return place in scope 0 at ui/const-ptr/allowed_slices.rs:16:16: 16:21
    let _1: &[()];                       // in scope 0 at ui/const-ptr/allowed_slices.rs:16:33: 16:62
    let mut _2: *const ();               // in scope 0 at ui/const-ptr/allowed_slices.rs:16:48: 16:58
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:16:33: 16:62
        StorageLive(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:16:48: 16:58
        ConstEvalCounter;                // scope 1 at ui/const-ptr/allowed_slices.rs:16:48: 16:58
        _2 = dangling::<()>() -> bb1;    // scope 1 at ui/const-ptr/allowed_slices.rs:16:48: 16:58
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:16:48: 16:56
                                         // + literal: Const { ty: fn() -> *const () {dangling::<()>}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 1 at ui/const-ptr/allowed_slices.rs:16:33: 16:62
        _1 = std::slice::from_raw_parts::<'_, ()>(move _2, const 3_usize) -> bb2; // scope 1 at ui/const-ptr/allowed_slices.rs:16:33: 16:62
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:16:33: 16:47
                                         // + literal: Const { ty: unsafe fn(*const (), usize) -> &[()] {std::slice::from_raw_parts::<'_, ()>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = &(*_1);                     // scope 1 at ui/const-ptr/allowed_slices.rs:16:33: 16:62
        StorageDead(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:16:61: 16:62
        StorageDead(_1);                 // scope 0 at ui/const-ptr/allowed_slices.rs:16:63: 16:64
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:16:1: 16:65
    }
}

static S2: &[u32] = {
    let mut _0: &[u32];                  // return place in scope 0 at ui/const-ptr/allowed_slices.rs:19:16: 19:22
    let _1: &[u32];                      // in scope 0 at ui/const-ptr/allowed_slices.rs:19:34: 19:56
    let mut _2: *const u32;              // in scope 0 at ui/const-ptr/allowed_slices.rs:19:49: 19:52
    let _3: &u32;                        // in scope 0 at ui/const-ptr/allowed_slices.rs:19:49: 19:52
    let _4: u32;                         // in scope 0 at ui/const-ptr/allowed_slices.rs:19:50: 19:52
    scope 1 {
        let mut _5: &u32;                // in scope 1 at ui/const-ptr/allowed_slices.rs:19:49: 19:52
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:19:34: 19:56
        StorageLive(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:19:49: 19:52
        StorageLive(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:19:49: 19:52
        _5 = const _;                    // scope 1 at ui/const-ptr/allowed_slices.rs:19:49: 19:52
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:19:49: 19:52
                                         // + literal: Const { ty: &u32, val: Unevaluated(S2, [], Some(promoted[0])) }
        _3 = &(*_5);                     // scope 1 at ui/const-ptr/allowed_slices.rs:19:49: 19:52
        _2 = &raw const (*_3);           // scope 1 at ui/const-ptr/allowed_slices.rs:19:49: 19:52
        ConstEvalCounter;                // scope 1 at ui/const-ptr/allowed_slices.rs:19:34: 19:56
        _1 = std::slice::from_raw_parts::<'_, u32>(move _2, const 1_usize) -> bb1; // scope 1 at ui/const-ptr/allowed_slices.rs:19:34: 19:56
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:19:34: 19:48
                                         // + literal: Const { ty: unsafe fn(*const u32, usize) -> &[u32] {std::slice::from_raw_parts::<'_, u32>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &(*_1);                     // scope 1 at ui/const-ptr/allowed_slices.rs:19:34: 19:56
        StorageDead(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:19:55: 19:56
        StorageDead(_3);                 // scope 0 at ui/const-ptr/allowed_slices.rs:19:57: 19:58
        StorageDead(_1);                 // scope 0 at ui/const-ptr/allowed_slices.rs:19:57: 19:58
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:19:1: 19:59
    }
}

promoted[0] in S2: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/const-ptr/allowed_slices.rs:19:49: 19:52
    let mut _1: u32;                     // in scope 0 at ui/const-ptr/allowed_slices.rs:19:50: 19:52

    bb0: {
        _1 = const _;                    // scope 0 at ui/const-ptr/allowed_slices.rs:19:50: 19:52
        _0 = &_1;                        // scope 0 at ui/const-ptr/allowed_slices.rs:19:49: 19:52
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:19:49: 19:52
    }
}

static S3: &[MaybeUninit<&u32>] = {
    let mut _0: &[std::mem::MaybeUninit<&u32>]; // return place in scope 0 at ui/const-ptr/allowed_slices.rs:20:16: 20:36
    let _1: &[std::mem::MaybeUninit<&u32>]; // in scope 0 at ui/const-ptr/allowed_slices.rs:20:48: 20:70
    let mut _2: *const std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:20:63: 20:66
    let _3: &std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:20:63: 20:66
    let _4: std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:20:64: 20:66
    scope 1 {
        let mut _5: &std::mem::MaybeUninit<&u32>; // in scope 1 at ui/const-ptr/allowed_slices.rs:20:63: 20:66
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:20:48: 20:70
        StorageLive(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:20:63: 20:66
        StorageLive(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:20:63: 20:66
        _5 = const _;                    // scope 1 at ui/const-ptr/allowed_slices.rs:20:63: 20:66
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:20:63: 20:66
                                         // + literal: Const { ty: &MaybeUninit<&u32>, val: Unevaluated(S3, [], Some(promoted[0])) }
        _3 = &(*_5);                     // scope 1 at ui/const-ptr/allowed_slices.rs:20:63: 20:66
        _2 = &raw const (*_3);           // scope 1 at ui/const-ptr/allowed_slices.rs:20:63: 20:66
        ConstEvalCounter;                // scope 1 at ui/const-ptr/allowed_slices.rs:20:48: 20:70
        _1 = std::slice::from_raw_parts::<'_, MaybeUninit<&u32>>(move _2, const 1_usize) -> bb1; // scope 1 at ui/const-ptr/allowed_slices.rs:20:48: 20:70
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:20:48: 20:62
                                         // + literal: Const { ty: unsafe fn(*const MaybeUninit<&u32>, usize) -> &[MaybeUninit<&u32>] {std::slice::from_raw_parts::<'_, MaybeUninit<&u32>>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &(*_1);                     // scope 1 at ui/const-ptr/allowed_slices.rs:20:48: 20:70
        StorageDead(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:20:69: 20:70
        StorageDead(_3);                 // scope 0 at ui/const-ptr/allowed_slices.rs:20:71: 20:72
        StorageDead(_1);                 // scope 0 at ui/const-ptr/allowed_slices.rs:20:71: 20:72
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:20:1: 20:73
    }
}

promoted[0] in S3: &MaybeUninit<&u32> = {
    let mut _0: &std::mem::MaybeUninit<&u32>; // return place in scope 0 at ui/const-ptr/allowed_slices.rs:20:63: 20:66
    let mut _1: std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:20:64: 20:66

    bb0: {
        _1 = const _;                    // scope 0 at ui/const-ptr/allowed_slices.rs:20:64: 20:66
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:20:64: 20:66
                                         // + literal: Const { ty: MaybeUninit<&u32>, val: Unevaluated(D1, [], None) }
        _0 = &_1;                        // scope 0 at ui/const-ptr/allowed_slices.rs:20:63: 20:66
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:20:63: 20:66
    }
}

static S4: &[u8] = {
    let mut _0: &[u8];                   // return place in scope 0 at ui/const-ptr/allowed_slices.rs:23:16: 23:21
    let _1: &[u8];                       // in scope 0 at ui/const-ptr/allowed_slices.rs:23:33: 23:74
    let mut _2: *const u8;               // in scope 0 at ui/const-ptr/allowed_slices.rs:23:48: 23:70
    let mut _3: *const u8;               // in scope 0 at ui/const-ptr/allowed_slices.rs:23:48: 23:70
    let mut _4: *const u32;              // in scope 0 at ui/const-ptr/allowed_slices.rs:23:48: 23:65
    let mut _5: *const u32;              // in scope 0 at ui/const-ptr/allowed_slices.rs:23:48: 23:65
    let _6: &u32;                        // in scope 0 at ui/const-ptr/allowed_slices.rs:23:48: 23:53
    let _7: u32;                         // in scope 0 at ui/const-ptr/allowed_slices.rs:23:50: 23:52
    scope 1 {
        let mut _8: &u32;                // in scope 1 at ui/const-ptr/allowed_slices.rs:23:48: 23:53
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:23:33: 23:74
        StorageLive(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:23:48: 23:70
        StorageLive(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:23:48: 23:70
        StorageLive(_4);                 // scope 1 at ui/const-ptr/allowed_slices.rs:23:48: 23:65
        StorageLive(_5);                 // scope 1 at ui/const-ptr/allowed_slices.rs:23:48: 23:65
        StorageLive(_6);                 // scope 1 at ui/const-ptr/allowed_slices.rs:23:48: 23:53
        _8 = const _;                    // scope 1 at ui/const-ptr/allowed_slices.rs:23:48: 23:53
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:23:48: 23:53
                                         // + literal: Const { ty: &u32, val: Unevaluated(S4, [], Some(promoted[0])) }
        _6 = &(*_8);                     // scope 1 at ui/const-ptr/allowed_slices.rs:23:48: 23:53
        _5 = &raw const (*_6);           // scope 1 at ui/const-ptr/allowed_slices.rs:23:48: 23:53
        _4 = _5;                         // scope 1 at ui/const-ptr/allowed_slices.rs:23:48: 23:65
        _3 = move _4 as *const u8 (PtrToPtr); // scope 1 at ui/const-ptr/allowed_slices.rs:23:48: 23:70
        _2 = _3;                         // scope 1 at ui/const-ptr/allowed_slices.rs:23:48: 23:70
        StorageDead(_4);                 // scope 1 at ui/const-ptr/allowed_slices.rs:23:69: 23:70
        ConstEvalCounter;                // scope 1 at ui/const-ptr/allowed_slices.rs:23:33: 23:74
        _1 = std::slice::from_raw_parts::<'_, u8>(move _2, const 3_usize) -> bb1; // scope 1 at ui/const-ptr/allowed_slices.rs:23:33: 23:74
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:23:33: 23:47
                                         // + literal: Const { ty: unsafe fn(*const u8, usize) -> &[u8] {std::slice::from_raw_parts::<'_, u8>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &(*_1);                     // scope 1 at ui/const-ptr/allowed_slices.rs:23:33: 23:74
        StorageDead(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:23:73: 23:74
        StorageDead(_6);                 // scope 0 at ui/const-ptr/allowed_slices.rs:23:75: 23:76
        StorageDead(_5);                 // scope 0 at ui/const-ptr/allowed_slices.rs:23:75: 23:76
        StorageDead(_3);                 // scope 0 at ui/const-ptr/allowed_slices.rs:23:75: 23:76
        StorageDead(_1);                 // scope 0 at ui/const-ptr/allowed_slices.rs:23:75: 23:76
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:23:1: 23:77
    }
}

promoted[0] in S4: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/const-ptr/allowed_slices.rs:23:48: 23:53
    let mut _1: u32;                     // in scope 0 at ui/const-ptr/allowed_slices.rs:23:50: 23:52

    bb0: {
        _1 = const _;                    // scope 0 at ui/const-ptr/allowed_slices.rs:23:50: 23:52
        _0 = &_1;                        // scope 0 at ui/const-ptr/allowed_slices.rs:23:48: 23:53
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:23:48: 23:53
    }
}

static S5: &[MaybeUninit<u8>] = {
    let mut _0: &[std::mem::MaybeUninit<u8>]; // return place in scope 0 at ui/const-ptr/allowed_slices.rs:26:16: 26:34
    let _1: &[std::mem::MaybeUninit<u8>]; // in scope 0 at ui/const-ptr/allowed_slices.rs:26:46: 26:87
    let mut _2: *const std::mem::MaybeUninit<u8>; // in scope 0 at ui/const-ptr/allowed_slices.rs:26:61: 26:83
    let mut _3: *const std::mem::MaybeUninit<u8>; // in scope 0 at ui/const-ptr/allowed_slices.rs:26:61: 26:83
    let mut _4: *const std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:26:61: 26:78
    let mut _5: *const std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:26:61: 26:78
    let _6: &std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:26:61: 26:66
    let _7: std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:26:63: 26:65
    scope 1 {
        let mut _8: &std::mem::MaybeUninit<&u32>; // in scope 1 at ui/const-ptr/allowed_slices.rs:26:61: 26:66
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:26:46: 26:87
        StorageLive(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:26:61: 26:83
        StorageLive(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:26:61: 26:83
        StorageLive(_4);                 // scope 1 at ui/const-ptr/allowed_slices.rs:26:61: 26:78
        StorageLive(_5);                 // scope 1 at ui/const-ptr/allowed_slices.rs:26:61: 26:78
        StorageLive(_6);                 // scope 1 at ui/const-ptr/allowed_slices.rs:26:61: 26:66
        _8 = const _;                    // scope 1 at ui/const-ptr/allowed_slices.rs:26:61: 26:66
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:26:61: 26:66
                                         // + literal: Const { ty: &MaybeUninit<&u32>, val: Unevaluated(S5, [], Some(promoted[0])) }
        _6 = &(*_8);                     // scope 1 at ui/const-ptr/allowed_slices.rs:26:61: 26:66
        _5 = &raw const (*_6);           // scope 1 at ui/const-ptr/allowed_slices.rs:26:61: 26:66
        _4 = _5;                         // scope 1 at ui/const-ptr/allowed_slices.rs:26:61: 26:78
        _3 = move _4 as *const std::mem::MaybeUninit<u8> (PtrToPtr); // scope 1 at ui/const-ptr/allowed_slices.rs:26:61: 26:83
        _2 = _3;                         // scope 1 at ui/const-ptr/allowed_slices.rs:26:61: 26:83
        StorageDead(_4);                 // scope 1 at ui/const-ptr/allowed_slices.rs:26:82: 26:83
        ConstEvalCounter;                // scope 1 at ui/const-ptr/allowed_slices.rs:26:46: 26:87
        _1 = std::slice::from_raw_parts::<'_, MaybeUninit<u8>>(move _2, const 2_usize) -> bb1; // scope 1 at ui/const-ptr/allowed_slices.rs:26:46: 26:87
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:26:46: 26:60
                                         // + literal: Const { ty: unsafe fn(*const MaybeUninit<u8>, usize) -> &[MaybeUninit<u8>] {std::slice::from_raw_parts::<'_, MaybeUninit<u8>>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &(*_1);                     // scope 1 at ui/const-ptr/allowed_slices.rs:26:46: 26:87
        StorageDead(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:26:86: 26:87
        StorageDead(_6);                 // scope 0 at ui/const-ptr/allowed_slices.rs:26:88: 26:89
        StorageDead(_5);                 // scope 0 at ui/const-ptr/allowed_slices.rs:26:88: 26:89
        StorageDead(_3);                 // scope 0 at ui/const-ptr/allowed_slices.rs:26:88: 26:89
        StorageDead(_1);                 // scope 0 at ui/const-ptr/allowed_slices.rs:26:88: 26:89
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:26:1: 26:90
    }
}

promoted[0] in S5: &MaybeUninit<&u32> = {
    let mut _0: &std::mem::MaybeUninit<&u32>; // return place in scope 0 at ui/const-ptr/allowed_slices.rs:26:61: 26:66
    let mut _1: std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:26:63: 26:65

    bb0: {
        _1 = const _;                    // scope 0 at ui/const-ptr/allowed_slices.rs:26:63: 26:65
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:26:63: 26:65
                                         // + literal: Const { ty: MaybeUninit<&u32>, val: Unevaluated(D1, [], None) }
        _0 = &_1;                        // scope 0 at ui/const-ptr/allowed_slices.rs:26:61: 26:66
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:26:61: 26:66
    }
}

static S6: &[bool] = {
    let mut _0: &[bool];                 // return place in scope 0 at ui/const-ptr/allowed_slices.rs:29:16: 29:23
    let _1: &[bool];                     // in scope 0 at ui/const-ptr/allowed_slices.rs:29:35: 29:76
    let mut _2: *const bool;             // in scope 0 at ui/const-ptr/allowed_slices.rs:29:50: 29:72
    let mut _3: *const bool;             // in scope 0 at ui/const-ptr/allowed_slices.rs:29:50: 29:72
    let mut _4: *const u32;              // in scope 0 at ui/const-ptr/allowed_slices.rs:29:50: 29:67
    let mut _5: *const u32;              // in scope 0 at ui/const-ptr/allowed_slices.rs:29:50: 29:67
    let _6: &u32;                        // in scope 0 at ui/const-ptr/allowed_slices.rs:29:50: 29:55
    let _7: u32;                         // in scope 0 at ui/const-ptr/allowed_slices.rs:29:52: 29:54
    scope 1 {
        let mut _8: &u32;                // in scope 1 at ui/const-ptr/allowed_slices.rs:29:50: 29:55
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:29:35: 29:76
        StorageLive(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:29:50: 29:72
        StorageLive(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:29:50: 29:72
        StorageLive(_4);                 // scope 1 at ui/const-ptr/allowed_slices.rs:29:50: 29:67
        StorageLive(_5);                 // scope 1 at ui/const-ptr/allowed_slices.rs:29:50: 29:67
        StorageLive(_6);                 // scope 1 at ui/const-ptr/allowed_slices.rs:29:50: 29:55
        _8 = const _;                    // scope 1 at ui/const-ptr/allowed_slices.rs:29:50: 29:55
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:29:50: 29:55
                                         // + literal: Const { ty: &u32, val: Unevaluated(S6, [], Some(promoted[0])) }
        _6 = &(*_8);                     // scope 1 at ui/const-ptr/allowed_slices.rs:29:50: 29:55
        _5 = &raw const (*_6);           // scope 1 at ui/const-ptr/allowed_slices.rs:29:50: 29:55
        _4 = _5;                         // scope 1 at ui/const-ptr/allowed_slices.rs:29:50: 29:67
        _3 = move _4 as *const bool (PtrToPtr); // scope 1 at ui/const-ptr/allowed_slices.rs:29:50: 29:72
        _2 = _3;                         // scope 1 at ui/const-ptr/allowed_slices.rs:29:50: 29:72
        StorageDead(_4);                 // scope 1 at ui/const-ptr/allowed_slices.rs:29:71: 29:72
        ConstEvalCounter;                // scope 1 at ui/const-ptr/allowed_slices.rs:29:35: 29:76
        _1 = std::slice::from_raw_parts::<'_, bool>(move _2, const 4_usize) -> bb1; // scope 1 at ui/const-ptr/allowed_slices.rs:29:35: 29:76
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:29:35: 29:49
                                         // + literal: Const { ty: unsafe fn(*const bool, usize) -> &[bool] {std::slice::from_raw_parts::<'_, bool>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &(*_1);                     // scope 1 at ui/const-ptr/allowed_slices.rs:29:35: 29:76
        StorageDead(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:29:75: 29:76
        StorageDead(_6);                 // scope 0 at ui/const-ptr/allowed_slices.rs:29:77: 29:78
        StorageDead(_5);                 // scope 0 at ui/const-ptr/allowed_slices.rs:29:77: 29:78
        StorageDead(_3);                 // scope 0 at ui/const-ptr/allowed_slices.rs:29:77: 29:78
        StorageDead(_1);                 // scope 0 at ui/const-ptr/allowed_slices.rs:29:77: 29:78
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:29:1: 29:79
    }
}

promoted[0] in S6: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/const-ptr/allowed_slices.rs:29:50: 29:55
    let mut _1: u32;                     // in scope 0 at ui/const-ptr/allowed_slices.rs:29:52: 29:54

    bb0: {
        _1 = const _;                    // scope 0 at ui/const-ptr/allowed_slices.rs:29:52: 29:54
        _0 = &_1;                        // scope 0 at ui/const-ptr/allowed_slices.rs:29:50: 29:55
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:29:50: 29:55
    }
}

static S7: &[u16] = {
    let mut _0: &[u16];                  // return place in scope 0 at ui/const-ptr/allowed_slices.rs:34:16: 34:22
    let mut _2: *const u16;              // in scope 0 at ui/const-ptr/allowed_slices.rs:35:15: 35:51
    let mut _3: *const Struct;           // in scope 0 at ui/const-ptr/allowed_slices.rs:35:16: 35:36
    let _4: &Struct;                     // in scope 0 at ui/const-ptr/allowed_slices.rs:35:16: 35:19
    let _5: Struct;                      // in scope 0 at ui/const-ptr/allowed_slices.rs:35:17: 35:19
    let _6: &[u16];                      // in scope 0 at ui/const-ptr/allowed_slices.rs:37:5: 37:27
    let mut _7: *const u16;              // in scope 0 at ui/const-ptr/allowed_slices.rs:37:20: 37:23
    scope 1 {
        let _1: *const u16;              // in scope 1 at ui/const-ptr/allowed_slices.rs:35:9: 35:12
        let mut _8: &Struct;             // in scope 1 at ui/const-ptr/allowed_slices.rs:35:16: 35:19
        scope 2 {
            debug ptr => _1;             // in scope 2 at ui/const-ptr/allowed_slices.rs:35:9: 35:12
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:35:9: 35:12
        StorageLive(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:35:15: 35:51
        StorageLive(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:35:16: 35:36
        StorageLive(_4);                 // scope 1 at ui/const-ptr/allowed_slices.rs:35:16: 35:19
        _8 = const _;                    // scope 1 at ui/const-ptr/allowed_slices.rs:35:16: 35:19
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:35:16: 35:19
                                         // + literal: Const { ty: &Struct, val: Unevaluated(S7, [], Some(promoted[0])) }
        _4 = &(*_8);                     // scope 1 at ui/const-ptr/allowed_slices.rs:35:16: 35:19
        _3 = &raw const (*_4);           // scope 1 at ui/const-ptr/allowed_slices.rs:35:16: 35:19
        _2 = move _3 as *const u16 (PtrToPtr); // scope 1 at ui/const-ptr/allowed_slices.rs:35:15: 35:51
        StorageDead(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:35:50: 35:51
        ConstEvalCounter;                // scope 1 at ui/const-ptr/allowed_slices.rs:35:15: 35:63
        _1 = ptr::const_ptr::<impl *const u16>::byte_add(move _2, const 4_usize) -> bb1; // scope 1 at ui/const-ptr/allowed_slices.rs:35:15: 35:63
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:35:52: 35:60
                                         // + literal: Const { ty: unsafe fn(*const u16, usize) -> *const u16 {ptr::const_ptr::<impl *const u16>::byte_add}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:35:62: 35:63
        StorageDead(_4);                 // scope 1 at ui/const-ptr/allowed_slices.rs:35:63: 35:64
        StorageLive(_6);                 // scope 2 at ui/const-ptr/allowed_slices.rs:37:5: 37:27
        StorageLive(_7);                 // scope 2 at ui/const-ptr/allowed_slices.rs:37:20: 37:23
        _7 = _1;                         // scope 2 at ui/const-ptr/allowed_slices.rs:37:20: 37:23
        ConstEvalCounter;                // scope 2 at ui/const-ptr/allowed_slices.rs:37:5: 37:27
        _6 = std::slice::from_raw_parts::<'_, u16>(move _7, const 3_usize) -> bb2; // scope 2 at ui/const-ptr/allowed_slices.rs:37:5: 37:27
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:37:5: 37:19
                                         // + literal: Const { ty: unsafe fn(*const u16, usize) -> &[u16] {std::slice::from_raw_parts::<'_, u16>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = &(*_6);                     // scope 2 at ui/const-ptr/allowed_slices.rs:37:5: 37:27
        StorageDead(_7);                 // scope 2 at ui/const-ptr/allowed_slices.rs:37:26: 37:27
        StorageDead(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:38:1: 38:2
        StorageDead(_6);                 // scope 0 at ui/const-ptr/allowed_slices.rs:38:1: 38:2
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:34:1: 38:3
    }
}

promoted[0] in S7: &Struct = {
    let mut _0: &Struct;                 // return place in scope 0 at ui/const-ptr/allowed_slices.rs:35:16: 35:19
    let mut _1: Struct;                  // in scope 0 at ui/const-ptr/allowed_slices.rs:35:17: 35:19

    bb0: {
        _1 = const _;                    // scope 0 at ui/const-ptr/allowed_slices.rs:35:17: 35:19
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:35:17: 35:19
                                         // + literal: Const { ty: Struct, val: Unevaluated(D2, [], None) }
        _0 = &_1;                        // scope 0 at ui/const-ptr/allowed_slices.rs:35:16: 35:19
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:35:16: 35:19
    }
}

static S8: &[MaybeUninit<u16>] = {
    let mut _0: &[std::mem::MaybeUninit<u16>]; // return place in scope 0 at ui/const-ptr/allowed_slices.rs:39:16: 39:35
    let mut _2: *const Struct;           // in scope 0 at ui/const-ptr/allowed_slices.rs:40:15: 40:35
    let _3: &Struct;                     // in scope 0 at ui/const-ptr/allowed_slices.rs:40:15: 40:18
    let _4: Struct;                      // in scope 0 at ui/const-ptr/allowed_slices.rs:40:16: 40:18
    let _5: &[std::mem::MaybeUninit<u16>]; // in scope 0 at ui/const-ptr/allowed_slices.rs:42:5: 42:27
    let mut _6: *const std::mem::MaybeUninit<u16>; // in scope 0 at ui/const-ptr/allowed_slices.rs:42:20: 42:23
    scope 1 {
        let _1: *const std::mem::MaybeUninit<u16>; // in scope 1 at ui/const-ptr/allowed_slices.rs:40:9: 40:12
        let mut _7: &Struct;             // in scope 1 at ui/const-ptr/allowed_slices.rs:40:15: 40:18
        scope 2 {
            debug ptr => _1;             // in scope 2 at ui/const-ptr/allowed_slices.rs:40:9: 40:12
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:40:9: 40:12
        StorageLive(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:40:15: 40:35
        StorageLive(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:40:15: 40:18
        _7 = const _;                    // scope 1 at ui/const-ptr/allowed_slices.rs:40:15: 40:18
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:40:15: 40:18
                                         // + literal: Const { ty: &Struct, val: Unevaluated(S8, [], Some(promoted[0])) }
        _3 = &(*_7);                     // scope 1 at ui/const-ptr/allowed_slices.rs:40:15: 40:18
        _2 = &raw const (*_3);           // scope 1 at ui/const-ptr/allowed_slices.rs:40:15: 40:18
        _1 = move _2 as *const std::mem::MaybeUninit<u16> (PtrToPtr); // scope 1 at ui/const-ptr/allowed_slices.rs:40:15: 40:62
        StorageDead(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:40:61: 40:62
        StorageDead(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:40:62: 40:63
        StorageLive(_5);                 // scope 2 at ui/const-ptr/allowed_slices.rs:42:5: 42:27
        StorageLive(_6);                 // scope 2 at ui/const-ptr/allowed_slices.rs:42:20: 42:23
        _6 = _1;                         // scope 2 at ui/const-ptr/allowed_slices.rs:42:20: 42:23
        ConstEvalCounter;                // scope 2 at ui/const-ptr/allowed_slices.rs:42:5: 42:27
        _5 = std::slice::from_raw_parts::<'_, MaybeUninit<u16>>(move _6, const 6_usize) -> bb1; // scope 2 at ui/const-ptr/allowed_slices.rs:42:5: 42:27
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:42:5: 42:19
                                         // + literal: Const { ty: unsafe fn(*const MaybeUninit<u16>, usize) -> &[MaybeUninit<u16>] {std::slice::from_raw_parts::<'_, MaybeUninit<u16>>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &(*_5);                     // scope 2 at ui/const-ptr/allowed_slices.rs:42:5: 42:27
        StorageDead(_6);                 // scope 2 at ui/const-ptr/allowed_slices.rs:42:26: 42:27
        StorageDead(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:43:1: 43:2
        StorageDead(_5);                 // scope 0 at ui/const-ptr/allowed_slices.rs:43:1: 43:2
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:39:1: 43:3
    }
}

promoted[0] in S8: &Struct = {
    let mut _0: &Struct;                 // return place in scope 0 at ui/const-ptr/allowed_slices.rs:40:15: 40:18
    let mut _1: Struct;                  // in scope 0 at ui/const-ptr/allowed_slices.rs:40:16: 40:18

    bb0: {
        _1 = const _;                    // scope 0 at ui/const-ptr/allowed_slices.rs:40:16: 40:18
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:40:16: 40:18
                                         // + literal: Const { ty: Struct, val: Unevaluated(D2, [], None) }
        _0 = &_1;                        // scope 0 at ui/const-ptr/allowed_slices.rs:40:15: 40:18
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:40:15: 40:18
    }
}

static R0: &[u32] = {
    let mut _0: &[u32];                  // return place in scope 0 at ui/const-ptr/allowed_slices.rs:45:16: 45:22
    let _1: &[u32];                      // in scope 0 at ui/const-ptr/allowed_slices.rs:45:34: 45:72
    let mut _2: std::ops::Range<*const u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:45:49: 45:71
    let mut _3: *const u32;              // in scope 0 at ui/const-ptr/allowed_slices.rs:45:49: 45:59
    let mut _4: *const u32;              // in scope 0 at ui/const-ptr/allowed_slices.rs:45:61: 45:71
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:45:34: 45:72
        StorageLive(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:45:49: 45:71
        StorageLive(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:45:49: 45:59
        ConstEvalCounter;                // scope 1 at ui/const-ptr/allowed_slices.rs:45:49: 45:59
        _3 = dangling::<u32>() -> bb1;   // scope 1 at ui/const-ptr/allowed_slices.rs:45:49: 45:59
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:45:49: 45:57
                                         // + literal: Const { ty: fn() -> *const u32 {dangling::<u32>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageLive(_4);                 // scope 1 at ui/const-ptr/allowed_slices.rs:45:61: 45:71
        ConstEvalCounter;                // scope 1 at ui/const-ptr/allowed_slices.rs:45:61: 45:71
        _4 = dangling::<u32>() -> bb2;   // scope 1 at ui/const-ptr/allowed_slices.rs:45:61: 45:71
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:45:61: 45:69
                                         // + literal: Const { ty: fn() -> *const u32 {dangling::<u32>}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = std::ops::Range::<*const u32> { start: move _3, end: move _4 }; // scope 1 at ui/const-ptr/allowed_slices.rs:45:49: 45:71
        StorageDead(_4);                 // scope 1 at ui/const-ptr/allowed_slices.rs:45:70: 45:71
        StorageDead(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:45:70: 45:71
        ConstEvalCounter;                // scope 1 at ui/const-ptr/allowed_slices.rs:45:34: 45:72
        _1 = from_ptr_range::<'_, u32>(move _2) -> bb3; // scope 1 at ui/const-ptr/allowed_slices.rs:45:34: 45:72
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:45:34: 45:48
                                         // + literal: Const { ty: unsafe fn(std::ops::Range<*const u32>) -> &[u32] {from_ptr_range::<'_, u32>}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = &(*_1);                     // scope 1 at ui/const-ptr/allowed_slices.rs:45:34: 45:72
        StorageDead(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:45:71: 45:72
        StorageDead(_1);                 // scope 0 at ui/const-ptr/allowed_slices.rs:45:73: 45:74
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:45:1: 45:75
    }
}

static R2: &[u32] = {
    let mut _0: &[u32];                  // return place in scope 0 at ui/const-ptr/allowed_slices.rs:48:16: 48:22
    let _2: &u32;                        // in scope 0 at ui/const-ptr/allowed_slices.rs:49:15: 49:18
    let _3: u32;                         // in scope 0 at ui/const-ptr/allowed_slices.rs:49:16: 49:18
    let _4: &[u32];                      // in scope 0 at ui/const-ptr/allowed_slices.rs:50:5: 50:36
    let mut _5: std::ops::Range<*const u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:50:20: 50:35
    let mut _6: *const u32;              // in scope 0 at ui/const-ptr/allowed_slices.rs:50:20: 50:23
    let mut _7: *const u32;              // in scope 0 at ui/const-ptr/allowed_slices.rs:50:25: 50:35
    let mut _8: *const u32;              // in scope 0 at ui/const-ptr/allowed_slices.rs:50:25: 50:28
    scope 1 {
        let _1: *const u32;              // in scope 1 at ui/const-ptr/allowed_slices.rs:49:9: 49:12
        let mut _9: &u32;                // in scope 1 at ui/const-ptr/allowed_slices.rs:49:15: 49:18
        scope 2 {
            debug ptr => _1;             // in scope 2 at ui/const-ptr/allowed_slices.rs:49:9: 49:12
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:49:9: 49:12
        StorageLive(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:49:15: 49:18
        _9 = const _;                    // scope 1 at ui/const-ptr/allowed_slices.rs:49:15: 49:18
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:49:15: 49:18
                                         // + literal: Const { ty: &u32, val: Unevaluated(R2, [], Some(promoted[0])) }
        _2 = &(*_9);                     // scope 1 at ui/const-ptr/allowed_slices.rs:49:15: 49:18
        _1 = &raw const (*_2);           // scope 1 at ui/const-ptr/allowed_slices.rs:49:15: 49:18
        StorageDead(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:49:32: 49:33
        StorageLive(_4);                 // scope 2 at ui/const-ptr/allowed_slices.rs:50:5: 50:36
        StorageLive(_5);                 // scope 2 at ui/const-ptr/allowed_slices.rs:50:20: 50:35
        StorageLive(_6);                 // scope 2 at ui/const-ptr/allowed_slices.rs:50:20: 50:23
        _6 = _1;                         // scope 2 at ui/const-ptr/allowed_slices.rs:50:20: 50:23
        StorageLive(_7);                 // scope 2 at ui/const-ptr/allowed_slices.rs:50:25: 50:35
        StorageLive(_8);                 // scope 2 at ui/const-ptr/allowed_slices.rs:50:25: 50:28
        _8 = _1;                         // scope 2 at ui/const-ptr/allowed_slices.rs:50:25: 50:28
        ConstEvalCounter;                // scope 2 at ui/const-ptr/allowed_slices.rs:50:25: 50:35
        _7 = ptr::const_ptr::<impl *const u32>::add(move _8, const 1_usize) -> bb1; // scope 2 at ui/const-ptr/allowed_slices.rs:50:25: 50:35
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:50:29: 50:32
                                         // + literal: Const { ty: unsafe fn(*const u32, usize) -> *const u32 {ptr::const_ptr::<impl *const u32>::add}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_8);                 // scope 2 at ui/const-ptr/allowed_slices.rs:50:34: 50:35
        _5 = std::ops::Range::<*const u32> { start: move _6, end: move _7 }; // scope 2 at ui/const-ptr/allowed_slices.rs:50:20: 50:35
        StorageDead(_7);                 // scope 2 at ui/const-ptr/allowed_slices.rs:50:34: 50:35
        StorageDead(_6);                 // scope 2 at ui/const-ptr/allowed_slices.rs:50:34: 50:35
        ConstEvalCounter;                // scope 2 at ui/const-ptr/allowed_slices.rs:50:5: 50:36
        _4 = from_ptr_range::<'_, u32>(move _5) -> bb2; // scope 2 at ui/const-ptr/allowed_slices.rs:50:5: 50:36
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:50:5: 50:19
                                         // + literal: Const { ty: unsafe fn(std::ops::Range<*const u32>) -> &[u32] {from_ptr_range::<'_, u32>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = &(*_4);                     // scope 2 at ui/const-ptr/allowed_slices.rs:50:5: 50:36
        StorageDead(_5);                 // scope 2 at ui/const-ptr/allowed_slices.rs:50:35: 50:36
        StorageDead(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:51:1: 51:2
        StorageDead(_4);                 // scope 0 at ui/const-ptr/allowed_slices.rs:51:1: 51:2
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:48:1: 51:3
    }
}

promoted[0] in R2: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/const-ptr/allowed_slices.rs:49:15: 49:18
    let mut _1: u32;                     // in scope 0 at ui/const-ptr/allowed_slices.rs:49:16: 49:18

    bb0: {
        _1 = const _;                    // scope 0 at ui/const-ptr/allowed_slices.rs:49:16: 49:18
        _0 = &_1;                        // scope 0 at ui/const-ptr/allowed_slices.rs:49:15: 49:18
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:49:15: 49:18
    }
}

static R3: &[MaybeUninit<&u32>] = {
    let mut _0: &[std::mem::MaybeUninit<&u32>]; // return place in scope 0 at ui/const-ptr/allowed_slices.rs:52:16: 52:36
    let mut _2: *const std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:53:15: 53:46
    let _3: &std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:53:15: 53:18
    let _4: std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:53:16: 53:18
    let _5: &[std::mem::MaybeUninit<&u32>]; // in scope 0 at ui/const-ptr/allowed_slices.rs:54:5: 54:36
    let mut _6: std::ops::Range<*const std::mem::MaybeUninit<&u32>>; // in scope 0 at ui/const-ptr/allowed_slices.rs:54:20: 54:35
    let mut _7: *const std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:54:20: 54:23
    let mut _8: *const std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:54:25: 54:35
    let mut _9: *const std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:54:25: 54:28
    scope 1 {
        let _1: *const std::mem::MaybeUninit<&u32>; // in scope 1 at ui/const-ptr/allowed_slices.rs:53:9: 53:12
        let mut _10: &std::mem::MaybeUninit<&u32>; // in scope 1 at ui/const-ptr/allowed_slices.rs:53:15: 53:18
        scope 2 {
            debug ptr => _1;             // in scope 2 at ui/const-ptr/allowed_slices.rs:53:9: 53:12
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:53:9: 53:12
        StorageLive(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:53:15: 53:46
        StorageLive(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:53:15: 53:18
        _10 = const _;                   // scope 1 at ui/const-ptr/allowed_slices.rs:53:15: 53:18
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:53:15: 53:18
                                         // + literal: Const { ty: &MaybeUninit<&u32>, val: Unevaluated(R3, [], Some(promoted[0])) }
        _3 = &(*_10);                    // scope 1 at ui/const-ptr/allowed_slices.rs:53:15: 53:18
        _2 = &raw const (*_3);           // scope 1 at ui/const-ptr/allowed_slices.rs:53:15: 53:18
        _1 = _2;                         // scope 1 at ui/const-ptr/allowed_slices.rs:53:15: 53:46
        StorageDead(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:53:46: 53:47
        StorageDead(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:53:46: 53:47
        StorageLive(_5);                 // scope 2 at ui/const-ptr/allowed_slices.rs:54:5: 54:36
        StorageLive(_6);                 // scope 2 at ui/const-ptr/allowed_slices.rs:54:20: 54:35
        StorageLive(_7);                 // scope 2 at ui/const-ptr/allowed_slices.rs:54:20: 54:23
        _7 = _1;                         // scope 2 at ui/const-ptr/allowed_slices.rs:54:20: 54:23
        StorageLive(_8);                 // scope 2 at ui/const-ptr/allowed_slices.rs:54:25: 54:35
        StorageLive(_9);                 // scope 2 at ui/const-ptr/allowed_slices.rs:54:25: 54:28
        _9 = _1;                         // scope 2 at ui/const-ptr/allowed_slices.rs:54:25: 54:28
        ConstEvalCounter;                // scope 2 at ui/const-ptr/allowed_slices.rs:54:25: 54:35
        _8 = ptr::const_ptr::<impl *const MaybeUninit<&u32>>::add(move _9, const 1_usize) -> bb1; // scope 2 at ui/const-ptr/allowed_slices.rs:54:25: 54:35
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:54:29: 54:32
                                         // + literal: Const { ty: unsafe fn(*const MaybeUninit<&u32>, usize) -> *const MaybeUninit<&u32> {ptr::const_ptr::<impl *const MaybeUninit<&u32>>::add}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_9);                 // scope 2 at ui/const-ptr/allowed_slices.rs:54:34: 54:35
        _6 = std::ops::Range::<*const MaybeUninit<&u32>> { start: move _7, end: move _8 }; // scope 2 at ui/const-ptr/allowed_slices.rs:54:20: 54:35
        StorageDead(_8);                 // scope 2 at ui/const-ptr/allowed_slices.rs:54:34: 54:35
        StorageDead(_7);                 // scope 2 at ui/const-ptr/allowed_slices.rs:54:34: 54:35
        ConstEvalCounter;                // scope 2 at ui/const-ptr/allowed_slices.rs:54:5: 54:36
        _5 = from_ptr_range::<'_, MaybeUninit<&u32>>(move _6) -> bb2; // scope 2 at ui/const-ptr/allowed_slices.rs:54:5: 54:36
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:54:5: 54:19
                                         // + literal: Const { ty: unsafe fn(std::ops::Range<*const MaybeUninit<&u32>>) -> &[MaybeUninit<&u32>] {from_ptr_range::<'_, MaybeUninit<&u32>>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = &(*_5);                     // scope 2 at ui/const-ptr/allowed_slices.rs:54:5: 54:36
        StorageDead(_6);                 // scope 2 at ui/const-ptr/allowed_slices.rs:54:35: 54:36
        StorageDead(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:55:1: 55:2
        StorageDead(_5);                 // scope 0 at ui/const-ptr/allowed_slices.rs:55:1: 55:2
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:52:1: 55:3
    }
}

promoted[0] in R3: &MaybeUninit<&u32> = {
    let mut _0: &std::mem::MaybeUninit<&u32>; // return place in scope 0 at ui/const-ptr/allowed_slices.rs:53:15: 53:18
    let mut _1: std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:53:16: 53:18

    bb0: {
        _1 = const _;                    // scope 0 at ui/const-ptr/allowed_slices.rs:53:16: 53:18
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:53:16: 53:18
                                         // + literal: Const { ty: MaybeUninit<&u32>, val: Unevaluated(D1, [], None) }
        _0 = &_1;                        // scope 0 at ui/const-ptr/allowed_slices.rs:53:15: 53:18
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:53:15: 53:18
    }
}

static R4: &[u8] = {
    let mut _0: &[u8];                   // return place in scope 0 at ui/const-ptr/allowed_slices.rs:56:16: 56:21
    let mut _2: *const u32;              // in scope 0 at ui/const-ptr/allowed_slices.rs:57:15: 57:32
    let _3: &u32;                        // in scope 0 at ui/const-ptr/allowed_slices.rs:57:15: 57:18
    let _4: u32;                         // in scope 0 at ui/const-ptr/allowed_slices.rs:57:16: 57:18
    let _5: &[u8];                       // in scope 0 at ui/const-ptr/allowed_slices.rs:58:5: 58:36
    let mut _6: std::ops::Range<*const u8>; // in scope 0 at ui/const-ptr/allowed_slices.rs:58:20: 58:35
    let mut _7: *const u8;               // in scope 0 at ui/const-ptr/allowed_slices.rs:58:20: 58:23
    let mut _8: *const u8;               // in scope 0 at ui/const-ptr/allowed_slices.rs:58:25: 58:35
    let mut _9: *const u8;               // in scope 0 at ui/const-ptr/allowed_slices.rs:58:25: 58:28
    scope 1 {
        let _1: *const u8;               // in scope 1 at ui/const-ptr/allowed_slices.rs:57:9: 57:12
        let mut _10: &u32;               // in scope 1 at ui/const-ptr/allowed_slices.rs:57:15: 57:18
        scope 2 {
            debug ptr => _1;             // in scope 2 at ui/const-ptr/allowed_slices.rs:57:9: 57:12
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:57:9: 57:12
        StorageLive(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:57:15: 57:32
        StorageLive(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:57:15: 57:18
        _10 = const _;                   // scope 1 at ui/const-ptr/allowed_slices.rs:57:15: 57:18
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:57:15: 57:18
                                         // + literal: Const { ty: &u32, val: Unevaluated(R4, [], Some(promoted[0])) }
        _3 = &(*_10);                    // scope 1 at ui/const-ptr/allowed_slices.rs:57:15: 57:18
        _2 = &raw const (*_3);           // scope 1 at ui/const-ptr/allowed_slices.rs:57:15: 57:18
        _1 = move _2 as *const u8 (PtrToPtr); // scope 1 at ui/const-ptr/allowed_slices.rs:57:15: 57:45
        StorageDead(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:57:44: 57:45
        StorageDead(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:57:45: 57:46
        StorageLive(_5);                 // scope 2 at ui/const-ptr/allowed_slices.rs:58:5: 58:36
        StorageLive(_6);                 // scope 2 at ui/const-ptr/allowed_slices.rs:58:20: 58:35
        StorageLive(_7);                 // scope 2 at ui/const-ptr/allowed_slices.rs:58:20: 58:23
        _7 = _1;                         // scope 2 at ui/const-ptr/allowed_slices.rs:58:20: 58:23
        StorageLive(_8);                 // scope 2 at ui/const-ptr/allowed_slices.rs:58:25: 58:35
        StorageLive(_9);                 // scope 2 at ui/const-ptr/allowed_slices.rs:58:25: 58:28
        _9 = _1;                         // scope 2 at ui/const-ptr/allowed_slices.rs:58:25: 58:28
        ConstEvalCounter;                // scope 2 at ui/const-ptr/allowed_slices.rs:58:25: 58:35
        _8 = ptr::const_ptr::<impl *const u8>::add(move _9, const 3_usize) -> bb1; // scope 2 at ui/const-ptr/allowed_slices.rs:58:25: 58:35
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:58:29: 58:32
                                         // + literal: Const { ty: unsafe fn(*const u8, usize) -> *const u8 {ptr::const_ptr::<impl *const u8>::add}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_9);                 // scope 2 at ui/const-ptr/allowed_slices.rs:58:34: 58:35
        _6 = std::ops::Range::<*const u8> { start: move _7, end: move _8 }; // scope 2 at ui/const-ptr/allowed_slices.rs:58:20: 58:35
        StorageDead(_8);                 // scope 2 at ui/const-ptr/allowed_slices.rs:58:34: 58:35
        StorageDead(_7);                 // scope 2 at ui/const-ptr/allowed_slices.rs:58:34: 58:35
        ConstEvalCounter;                // scope 2 at ui/const-ptr/allowed_slices.rs:58:5: 58:36
        _5 = from_ptr_range::<'_, u8>(move _6) -> bb2; // scope 2 at ui/const-ptr/allowed_slices.rs:58:5: 58:36
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:58:5: 58:19
                                         // + literal: Const { ty: unsafe fn(std::ops::Range<*const u8>) -> &[u8] {from_ptr_range::<'_, u8>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = &(*_5);                     // scope 2 at ui/const-ptr/allowed_slices.rs:58:5: 58:36
        StorageDead(_6);                 // scope 2 at ui/const-ptr/allowed_slices.rs:58:35: 58:36
        StorageDead(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:59:1: 59:2
        StorageDead(_5);                 // scope 0 at ui/const-ptr/allowed_slices.rs:59:1: 59:2
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:56:1: 59:3
    }
}

promoted[0] in R4: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/const-ptr/allowed_slices.rs:57:15: 57:18
    let mut _1: u32;                     // in scope 0 at ui/const-ptr/allowed_slices.rs:57:16: 57:18

    bb0: {
        _1 = const _;                    // scope 0 at ui/const-ptr/allowed_slices.rs:57:16: 57:18
        _0 = &_1;                        // scope 0 at ui/const-ptr/allowed_slices.rs:57:15: 57:18
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:57:15: 57:18
    }
}

static R5: &[MaybeUninit<u8>] = {
    let mut _0: &[std::mem::MaybeUninit<u8>]; // return place in scope 0 at ui/const-ptr/allowed_slices.rs:60:16: 60:34
    let mut _2: *const std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:61:15: 61:46
    let mut _3: *const std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:61:15: 61:46
    let _4: &std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:61:15: 61:18
    let _5: std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:61:16: 61:18
    let _6: &[std::mem::MaybeUninit<u8>]; // in scope 0 at ui/const-ptr/allowed_slices.rs:62:5: 62:36
    let mut _7: std::ops::Range<*const std::mem::MaybeUninit<u8>>; // in scope 0 at ui/const-ptr/allowed_slices.rs:62:20: 62:35
    let mut _8: *const std::mem::MaybeUninit<u8>; // in scope 0 at ui/const-ptr/allowed_slices.rs:62:20: 62:23
    let mut _9: *const std::mem::MaybeUninit<u8>; // in scope 0 at ui/const-ptr/allowed_slices.rs:62:25: 62:35
    let mut _10: *const std::mem::MaybeUninit<u8>; // in scope 0 at ui/const-ptr/allowed_slices.rs:62:25: 62:28
    scope 1 {
        let _1: *const std::mem::MaybeUninit<u8>; // in scope 1 at ui/const-ptr/allowed_slices.rs:61:9: 61:12
        let mut _11: &std::mem::MaybeUninit<&u32>; // in scope 1 at ui/const-ptr/allowed_slices.rs:61:15: 61:18
        scope 2 {
            debug ptr => _1;             // in scope 2 at ui/const-ptr/allowed_slices.rs:61:9: 61:12
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:61:9: 61:12
        StorageLive(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:61:15: 61:46
        StorageLive(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:61:15: 61:46
        StorageLive(_4);                 // scope 1 at ui/const-ptr/allowed_slices.rs:61:15: 61:18
        _11 = const _;                   // scope 1 at ui/const-ptr/allowed_slices.rs:61:15: 61:18
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:61:15: 61:18
                                         // + literal: Const { ty: &MaybeUninit<&u32>, val: Unevaluated(R5, [], Some(promoted[0])) }
        _4 = &(*_11);                    // scope 1 at ui/const-ptr/allowed_slices.rs:61:15: 61:18
        _3 = &raw const (*_4);           // scope 1 at ui/const-ptr/allowed_slices.rs:61:15: 61:18
        _2 = _3;                         // scope 1 at ui/const-ptr/allowed_slices.rs:61:15: 61:46
        _1 = move _2 as *const std::mem::MaybeUninit<u8> (PtrToPtr); // scope 1 at ui/const-ptr/allowed_slices.rs:61:15: 61:72
        StorageDead(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:61:71: 61:72
        StorageDead(_4);                 // scope 1 at ui/const-ptr/allowed_slices.rs:61:72: 61:73
        StorageDead(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:61:72: 61:73
        StorageLive(_6);                 // scope 2 at ui/const-ptr/allowed_slices.rs:62:5: 62:36
        StorageLive(_7);                 // scope 2 at ui/const-ptr/allowed_slices.rs:62:20: 62:35
        StorageLive(_8);                 // scope 2 at ui/const-ptr/allowed_slices.rs:62:20: 62:23
        _8 = _1;                         // scope 2 at ui/const-ptr/allowed_slices.rs:62:20: 62:23
        StorageLive(_9);                 // scope 2 at ui/const-ptr/allowed_slices.rs:62:25: 62:35
        StorageLive(_10);                // scope 2 at ui/const-ptr/allowed_slices.rs:62:25: 62:28
        _10 = _1;                        // scope 2 at ui/const-ptr/allowed_slices.rs:62:25: 62:28
        ConstEvalCounter;                // scope 2 at ui/const-ptr/allowed_slices.rs:62:25: 62:35
        _9 = ptr::const_ptr::<impl *const MaybeUninit<u8>>::add(move _10, const 2_usize) -> bb1; // scope 2 at ui/const-ptr/allowed_slices.rs:62:25: 62:35
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:62:29: 62:32
                                         // + literal: Const { ty: unsafe fn(*const MaybeUninit<u8>, usize) -> *const MaybeUninit<u8> {ptr::const_ptr::<impl *const MaybeUninit<u8>>::add}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_10);                // scope 2 at ui/const-ptr/allowed_slices.rs:62:34: 62:35
        _7 = std::ops::Range::<*const MaybeUninit<u8>> { start: move _8, end: move _9 }; // scope 2 at ui/const-ptr/allowed_slices.rs:62:20: 62:35
        StorageDead(_9);                 // scope 2 at ui/const-ptr/allowed_slices.rs:62:34: 62:35
        StorageDead(_8);                 // scope 2 at ui/const-ptr/allowed_slices.rs:62:34: 62:35
        ConstEvalCounter;                // scope 2 at ui/const-ptr/allowed_slices.rs:62:5: 62:36
        _6 = from_ptr_range::<'_, MaybeUninit<u8>>(move _7) -> bb2; // scope 2 at ui/const-ptr/allowed_slices.rs:62:5: 62:36
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:62:5: 62:19
                                         // + literal: Const { ty: unsafe fn(std::ops::Range<*const MaybeUninit<u8>>) -> &[MaybeUninit<u8>] {from_ptr_range::<'_, MaybeUninit<u8>>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = &(*_6);                     // scope 2 at ui/const-ptr/allowed_slices.rs:62:5: 62:36
        StorageDead(_7);                 // scope 2 at ui/const-ptr/allowed_slices.rs:62:35: 62:36
        StorageDead(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:63:1: 63:2
        StorageDead(_6);                 // scope 0 at ui/const-ptr/allowed_slices.rs:63:1: 63:2
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:60:1: 63:3
    }
}

promoted[0] in R5: &MaybeUninit<&u32> = {
    let mut _0: &std::mem::MaybeUninit<&u32>; // return place in scope 0 at ui/const-ptr/allowed_slices.rs:61:15: 61:18
    let mut _1: std::mem::MaybeUninit<&u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:61:16: 61:18

    bb0: {
        _1 = const _;                    // scope 0 at ui/const-ptr/allowed_slices.rs:61:16: 61:18
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:61:16: 61:18
                                         // + literal: Const { ty: MaybeUninit<&u32>, val: Unevaluated(D1, [], None) }
        _0 = &_1;                        // scope 0 at ui/const-ptr/allowed_slices.rs:61:15: 61:18
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:61:15: 61:18
    }
}

static R6: &[bool] = {
    let mut _0: &[bool];                 // return place in scope 0 at ui/const-ptr/allowed_slices.rs:64:16: 64:23
    let mut _2: *const u32;              // in scope 0 at ui/const-ptr/allowed_slices.rs:65:15: 65:32
    let _3: &u32;                        // in scope 0 at ui/const-ptr/allowed_slices.rs:65:15: 65:18
    let _4: u32;                         // in scope 0 at ui/const-ptr/allowed_slices.rs:65:16: 65:18
    let _5: &[bool];                     // in scope 0 at ui/const-ptr/allowed_slices.rs:66:5: 66:36
    let mut _6: std::ops::Range<*const bool>; // in scope 0 at ui/const-ptr/allowed_slices.rs:66:20: 66:35
    let mut _7: *const bool;             // in scope 0 at ui/const-ptr/allowed_slices.rs:66:20: 66:23
    let mut _8: *const bool;             // in scope 0 at ui/const-ptr/allowed_slices.rs:66:25: 66:35
    let mut _9: *const bool;             // in scope 0 at ui/const-ptr/allowed_slices.rs:66:25: 66:28
    scope 1 {
        let _1: *const bool;             // in scope 1 at ui/const-ptr/allowed_slices.rs:65:9: 65:12
        let mut _10: &u32;               // in scope 1 at ui/const-ptr/allowed_slices.rs:65:15: 65:18
        scope 2 {
            debug ptr => _1;             // in scope 2 at ui/const-ptr/allowed_slices.rs:65:9: 65:12
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:65:9: 65:12
        StorageLive(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:65:15: 65:32
        StorageLive(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:65:15: 65:18
        _10 = const _;                   // scope 1 at ui/const-ptr/allowed_slices.rs:65:15: 65:18
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:65:15: 65:18
                                         // + literal: Const { ty: &u32, val: Unevaluated(R6, [], Some(promoted[0])) }
        _3 = &(*_10);                    // scope 1 at ui/const-ptr/allowed_slices.rs:65:15: 65:18
        _2 = &raw const (*_3);           // scope 1 at ui/const-ptr/allowed_slices.rs:65:15: 65:18
        _1 = move _2 as *const bool (PtrToPtr); // scope 1 at ui/const-ptr/allowed_slices.rs:65:15: 65:47
        StorageDead(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:65:46: 65:47
        StorageDead(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:65:47: 65:48
        StorageLive(_5);                 // scope 2 at ui/const-ptr/allowed_slices.rs:66:5: 66:36
        StorageLive(_6);                 // scope 2 at ui/const-ptr/allowed_slices.rs:66:20: 66:35
        StorageLive(_7);                 // scope 2 at ui/const-ptr/allowed_slices.rs:66:20: 66:23
        _7 = _1;                         // scope 2 at ui/const-ptr/allowed_slices.rs:66:20: 66:23
        StorageLive(_8);                 // scope 2 at ui/const-ptr/allowed_slices.rs:66:25: 66:35
        StorageLive(_9);                 // scope 2 at ui/const-ptr/allowed_slices.rs:66:25: 66:28
        _9 = _1;                         // scope 2 at ui/const-ptr/allowed_slices.rs:66:25: 66:28
        ConstEvalCounter;                // scope 2 at ui/const-ptr/allowed_slices.rs:66:25: 66:35
        _8 = ptr::const_ptr::<impl *const bool>::add(move _9, const 4_usize) -> bb1; // scope 2 at ui/const-ptr/allowed_slices.rs:66:25: 66:35
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:66:29: 66:32
                                         // + literal: Const { ty: unsafe fn(*const bool, usize) -> *const bool {ptr::const_ptr::<impl *const bool>::add}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_9);                 // scope 2 at ui/const-ptr/allowed_slices.rs:66:34: 66:35
        _6 = std::ops::Range::<*const bool> { start: move _7, end: move _8 }; // scope 2 at ui/const-ptr/allowed_slices.rs:66:20: 66:35
        StorageDead(_8);                 // scope 2 at ui/const-ptr/allowed_slices.rs:66:34: 66:35
        StorageDead(_7);                 // scope 2 at ui/const-ptr/allowed_slices.rs:66:34: 66:35
        ConstEvalCounter;                // scope 2 at ui/const-ptr/allowed_slices.rs:66:5: 66:36
        _5 = from_ptr_range::<'_, bool>(move _6) -> bb2; // scope 2 at ui/const-ptr/allowed_slices.rs:66:5: 66:36
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:66:5: 66:19
                                         // + literal: Const { ty: unsafe fn(std::ops::Range<*const bool>) -> &[bool] {from_ptr_range::<'_, bool>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = &(*_5);                     // scope 2 at ui/const-ptr/allowed_slices.rs:66:5: 66:36
        StorageDead(_6);                 // scope 2 at ui/const-ptr/allowed_slices.rs:66:35: 66:36
        StorageDead(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:67:1: 67:2
        StorageDead(_5);                 // scope 0 at ui/const-ptr/allowed_slices.rs:67:1: 67:2
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:64:1: 67:3
    }
}

promoted[0] in R6: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/const-ptr/allowed_slices.rs:65:15: 65:18
    let mut _1: u32;                     // in scope 0 at ui/const-ptr/allowed_slices.rs:65:16: 65:18

    bb0: {
        _1 = const _;                    // scope 0 at ui/const-ptr/allowed_slices.rs:65:16: 65:18
        _0 = &_1;                        // scope 0 at ui/const-ptr/allowed_slices.rs:65:15: 65:18
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:65:15: 65:18
    }
}

static R7: &[u16] = {
    let mut _0: &[u16];                  // return place in scope 0 at ui/const-ptr/allowed_slices.rs:68:16: 68:22
    let _2: Struct;                      // in scope 0 at ui/const-ptr/allowed_slices.rs:69:15: 69:17
    let mut _4: *const u32;              // in scope 0 at ui/const-ptr/allowed_slices.rs:70:13: 70:32
    let _5: &u32;                        // in scope 0 at ui/const-ptr/allowed_slices.rs:70:13: 70:18
    let mut _7: *const u8;               // in scope 0 at ui/const-ptr/allowed_slices.rs:71:13: 71:31
    let _8: &u8;                         // in scope 0 at ui/const-ptr/allowed_slices.rs:71:13: 71:18
    let _9: &[u16];                      // in scope 0 at ui/const-ptr/allowed_slices.rs:73:5: 73:25
    let mut _10: std::ops::Range<*const u16>; // in scope 0 at ui/const-ptr/allowed_slices.rs:73:20: 73:24
    let mut _11: *const u16;             // in scope 0 at ui/const-ptr/allowed_slices.rs:73:20: 73:21
    let mut _12: *const u16;             // in scope 0 at ui/const-ptr/allowed_slices.rs:73:23: 73:24
    scope 1 {
        let _1: &Struct;                 // in scope 1 at ui/const-ptr/allowed_slices.rs:69:9: 69:11
        let mut _13: &Struct;            // in scope 1 at ui/const-ptr/allowed_slices.rs:69:14: 69:17
        scope 2 {
            debug d2 => _1;              // in scope 2 at ui/const-ptr/allowed_slices.rs:69:9: 69:11
            let _3: *const u16;          // in scope 2 at ui/const-ptr/allowed_slices.rs:70:9: 70:10
            scope 3 {
                debug l => _3;           // in scope 3 at ui/const-ptr/allowed_slices.rs:70:9: 70:10
                let _6: *const u16;      // in scope 3 at ui/const-ptr/allowed_slices.rs:71:9: 71:10
                scope 4 {
                    debug r => _6;       // in scope 4 at ui/const-ptr/allowed_slices.rs:71:9: 71:10
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:69:9: 69:11
        _13 = const _;                   // scope 1 at ui/const-ptr/allowed_slices.rs:69:14: 69:17
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:69:14: 69:17
                                         // + literal: Const { ty: &Struct, val: Unevaluated(R7, [], Some(promoted[0])) }
        _1 = &(*_13);                    // scope 1 at ui/const-ptr/allowed_slices.rs:69:14: 69:17
        StorageLive(_3);                 // scope 2 at ui/const-ptr/allowed_slices.rs:70:9: 70:10
        StorageLive(_4);                 // scope 2 at ui/const-ptr/allowed_slices.rs:70:13: 70:32
        StorageLive(_5);                 // scope 2 at ui/const-ptr/allowed_slices.rs:70:13: 70:18
        _5 = &((*_1).1: u32);            // scope 2 at ui/const-ptr/allowed_slices.rs:70:13: 70:18
        _4 = &raw const (*_5);           // scope 2 at ui/const-ptr/allowed_slices.rs:70:13: 70:18
        _3 = move _4 as *const u16 (PtrToPtr); // scope 2 at ui/const-ptr/allowed_slices.rs:70:13: 70:46
        StorageDead(_4);                 // scope 2 at ui/const-ptr/allowed_slices.rs:70:45: 70:46
        StorageDead(_5);                 // scope 2 at ui/const-ptr/allowed_slices.rs:70:46: 70:47
        StorageLive(_6);                 // scope 3 at ui/const-ptr/allowed_slices.rs:71:9: 71:10
        StorageLive(_7);                 // scope 3 at ui/const-ptr/allowed_slices.rs:71:13: 71:31
        StorageLive(_8);                 // scope 3 at ui/const-ptr/allowed_slices.rs:71:13: 71:18
        _8 = &((*_1).3: u8);             // scope 3 at ui/const-ptr/allowed_slices.rs:71:13: 71:18
        _7 = &raw const (*_8);           // scope 3 at ui/const-ptr/allowed_slices.rs:71:13: 71:18
        _6 = move _7 as *const u16 (PtrToPtr); // scope 3 at ui/const-ptr/allowed_slices.rs:71:13: 71:45
        StorageDead(_7);                 // scope 3 at ui/const-ptr/allowed_slices.rs:71:44: 71:45
        StorageDead(_8);                 // scope 3 at ui/const-ptr/allowed_slices.rs:71:45: 71:46
        StorageLive(_9);                 // scope 4 at ui/const-ptr/allowed_slices.rs:73:5: 73:25
        StorageLive(_10);                // scope 4 at ui/const-ptr/allowed_slices.rs:73:20: 73:24
        StorageLive(_11);                // scope 4 at ui/const-ptr/allowed_slices.rs:73:20: 73:21
        _11 = _3;                        // scope 4 at ui/const-ptr/allowed_slices.rs:73:20: 73:21
        StorageLive(_12);                // scope 4 at ui/const-ptr/allowed_slices.rs:73:23: 73:24
        _12 = _6;                        // scope 4 at ui/const-ptr/allowed_slices.rs:73:23: 73:24
        _10 = std::ops::Range::<*const u16> { start: move _11, end: move _12 }; // scope 4 at ui/const-ptr/allowed_slices.rs:73:20: 73:24
        StorageDead(_12);                // scope 4 at ui/const-ptr/allowed_slices.rs:73:23: 73:24
        StorageDead(_11);                // scope 4 at ui/const-ptr/allowed_slices.rs:73:23: 73:24
        ConstEvalCounter;                // scope 4 at ui/const-ptr/allowed_slices.rs:73:5: 73:25
        _9 = from_ptr_range::<'_, u16>(move _10) -> bb1; // scope 4 at ui/const-ptr/allowed_slices.rs:73:5: 73:25
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:73:5: 73:19
                                         // + literal: Const { ty: unsafe fn(std::ops::Range<*const u16>) -> &[u16] {from_ptr_range::<'_, u16>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &(*_9);                     // scope 4 at ui/const-ptr/allowed_slices.rs:73:5: 73:25
        StorageDead(_10);                // scope 4 at ui/const-ptr/allowed_slices.rs:73:24: 73:25
        StorageDead(_6);                 // scope 3 at ui/const-ptr/allowed_slices.rs:74:1: 74:2
        StorageDead(_3);                 // scope 2 at ui/const-ptr/allowed_slices.rs:74:1: 74:2
        StorageDead(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:74:1: 74:2
        StorageDead(_9);                 // scope 0 at ui/const-ptr/allowed_slices.rs:74:1: 74:2
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:68:1: 74:3
    }
}

promoted[0] in R7: &Struct = {
    let mut _0: &Struct;                 // return place in scope 0 at ui/const-ptr/allowed_slices.rs:69:14: 69:17
    let mut _1: Struct;                  // in scope 0 at ui/const-ptr/allowed_slices.rs:69:15: 69:17

    bb0: {
        _1 = const _;                    // scope 0 at ui/const-ptr/allowed_slices.rs:69:15: 69:17
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:69:15: 69:17
                                         // + literal: Const { ty: Struct, val: Unevaluated(D2, [], None) }
        _0 = &_1;                        // scope 0 at ui/const-ptr/allowed_slices.rs:69:14: 69:17
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:69:14: 69:17
    }
}

static R8: &[MaybeUninit<u16>] = {
    let mut _0: &[std::mem::MaybeUninit<u16>]; // return place in scope 0 at ui/const-ptr/allowed_slices.rs:75:16: 75:35
    let _2: Struct;                      // in scope 0 at ui/const-ptr/allowed_slices.rs:76:15: 76:17
    let mut _4: *const Struct;           // in scope 0 at ui/const-ptr/allowed_slices.rs:77:13: 77:32
    let mut _6: *const u8;               // in scope 0 at ui/const-ptr/allowed_slices.rs:78:13: 78:31
    let _7: &u8;                         // in scope 0 at ui/const-ptr/allowed_slices.rs:78:13: 78:18
    let _8: &[std::mem::MaybeUninit<u16>]; // in scope 0 at ui/const-ptr/allowed_slices.rs:80:5: 80:25
    let mut _9: std::ops::Range<*const std::mem::MaybeUninit<u16>>; // in scope 0 at ui/const-ptr/allowed_slices.rs:80:20: 80:24
    let mut _10: *const std::mem::MaybeUninit<u16>; // in scope 0 at ui/const-ptr/allowed_slices.rs:80:20: 80:21
    let mut _11: *const std::mem::MaybeUninit<u16>; // in scope 0 at ui/const-ptr/allowed_slices.rs:80:23: 80:24
    scope 1 {
        let _1: &Struct;                 // in scope 1 at ui/const-ptr/allowed_slices.rs:76:9: 76:11
        let mut _12: &Struct;            // in scope 1 at ui/const-ptr/allowed_slices.rs:76:14: 76:17
        scope 2 {
            debug d2 => _1;              // in scope 2 at ui/const-ptr/allowed_slices.rs:76:9: 76:11
            let _3: *const std::mem::MaybeUninit<u16>; // in scope 2 at ui/const-ptr/allowed_slices.rs:77:9: 77:10
            scope 3 {
                debug l => _3;           // in scope 3 at ui/const-ptr/allowed_slices.rs:77:9: 77:10
                let _5: *const std::mem::MaybeUninit<u16>; // in scope 3 at ui/const-ptr/allowed_slices.rs:78:9: 78:10
                scope 4 {
                    debug r => _5;       // in scope 4 at ui/const-ptr/allowed_slices.rs:78:9: 78:10
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:76:9: 76:11
        _12 = const _;                   // scope 1 at ui/const-ptr/allowed_slices.rs:76:14: 76:17
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:76:14: 76:17
                                         // + literal: Const { ty: &Struct, val: Unevaluated(R8, [], Some(promoted[0])) }
        _1 = &(*_12);                    // scope 1 at ui/const-ptr/allowed_slices.rs:76:14: 76:17
        StorageLive(_3);                 // scope 2 at ui/const-ptr/allowed_slices.rs:77:9: 77:10
        StorageLive(_4);                 // scope 2 at ui/const-ptr/allowed_slices.rs:77:13: 77:32
        _4 = &raw const (*_1);           // scope 2 at ui/const-ptr/allowed_slices.rs:77:13: 77:15
        _3 = move _4 as *const std::mem::MaybeUninit<u16> (PtrToPtr); // scope 2 at ui/const-ptr/allowed_slices.rs:77:13: 77:59
        StorageDead(_4);                 // scope 2 at ui/const-ptr/allowed_slices.rs:77:58: 77:59
        StorageLive(_5);                 // scope 3 at ui/const-ptr/allowed_slices.rs:78:9: 78:10
        StorageLive(_6);                 // scope 3 at ui/const-ptr/allowed_slices.rs:78:13: 78:31
        StorageLive(_7);                 // scope 3 at ui/const-ptr/allowed_slices.rs:78:13: 78:18
        _7 = &((*_1).3: u8);             // scope 3 at ui/const-ptr/allowed_slices.rs:78:13: 78:18
        _6 = &raw const (*_7);           // scope 3 at ui/const-ptr/allowed_slices.rs:78:13: 78:18
        _5 = move _6 as *const std::mem::MaybeUninit<u16> (PtrToPtr); // scope 3 at ui/const-ptr/allowed_slices.rs:78:13: 78:58
        StorageDead(_6);                 // scope 3 at ui/const-ptr/allowed_slices.rs:78:57: 78:58
        StorageDead(_7);                 // scope 3 at ui/const-ptr/allowed_slices.rs:78:58: 78:59
        StorageLive(_8);                 // scope 4 at ui/const-ptr/allowed_slices.rs:80:5: 80:25
        StorageLive(_9);                 // scope 4 at ui/const-ptr/allowed_slices.rs:80:20: 80:24
        StorageLive(_10);                // scope 4 at ui/const-ptr/allowed_slices.rs:80:20: 80:21
        _10 = _3;                        // scope 4 at ui/const-ptr/allowed_slices.rs:80:20: 80:21
        StorageLive(_11);                // scope 4 at ui/const-ptr/allowed_slices.rs:80:23: 80:24
        _11 = _5;                        // scope 4 at ui/const-ptr/allowed_slices.rs:80:23: 80:24
        _9 = std::ops::Range::<*const MaybeUninit<u16>> { start: move _10, end: move _11 }; // scope 4 at ui/const-ptr/allowed_slices.rs:80:20: 80:24
        StorageDead(_11);                // scope 4 at ui/const-ptr/allowed_slices.rs:80:23: 80:24
        StorageDead(_10);                // scope 4 at ui/const-ptr/allowed_slices.rs:80:23: 80:24
        ConstEvalCounter;                // scope 4 at ui/const-ptr/allowed_slices.rs:80:5: 80:25
        _8 = from_ptr_range::<'_, MaybeUninit<u16>>(move _9) -> bb1; // scope 4 at ui/const-ptr/allowed_slices.rs:80:5: 80:25
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:80:5: 80:19
                                         // + literal: Const { ty: unsafe fn(std::ops::Range<*const MaybeUninit<u16>>) -> &[MaybeUninit<u16>] {from_ptr_range::<'_, MaybeUninit<u16>>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &(*_8);                     // scope 4 at ui/const-ptr/allowed_slices.rs:80:5: 80:25
        StorageDead(_9);                 // scope 4 at ui/const-ptr/allowed_slices.rs:80:24: 80:25
        StorageDead(_5);                 // scope 3 at ui/const-ptr/allowed_slices.rs:81:1: 81:2
        StorageDead(_3);                 // scope 2 at ui/const-ptr/allowed_slices.rs:81:1: 81:2
        StorageDead(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:81:1: 81:2
        StorageDead(_8);                 // scope 0 at ui/const-ptr/allowed_slices.rs:81:1: 81:2
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:75:1: 81:3
    }
}

promoted[0] in R8: &Struct = {
    let mut _0: &Struct;                 // return place in scope 0 at ui/const-ptr/allowed_slices.rs:76:14: 76:17
    let mut _1: Struct;                  // in scope 0 at ui/const-ptr/allowed_slices.rs:76:15: 76:17

    bb0: {
        _1 = const _;                    // scope 0 at ui/const-ptr/allowed_slices.rs:76:15: 76:17
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:76:15: 76:17
                                         // + literal: Const { ty: Struct, val: Unevaluated(D2, [], None) }
        _0 = &_1;                        // scope 0 at ui/const-ptr/allowed_slices.rs:76:14: 76:17
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:76:14: 76:17
    }
}

static R9: &[u32] = {
    let mut _0: &[u32];                  // return place in scope 0 at ui/const-ptr/allowed_slices.rs:84:16: 84:22
    let _1: &[u32];                      // in scope 0 at ui/const-ptr/allowed_slices.rs:84:34: 84:67
    let mut _2: std::ops::Range<*const u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:84:49: 84:66
    let mut _3: &[u32];                  // in scope 0 at ui/const-ptr/allowed_slices.rs:84:49: 84:66
    let _4: &&[u32];                     // in scope 0 at ui/const-ptr/allowed_slices.rs:84:49: 84:51
    let mut _5: &[u32];                  // in scope 0 at ui/const-ptr/allowed_slices.rs:84:49: 84:51
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:84:34: 84:67
        StorageLive(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:84:49: 84:66
        StorageLive(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:84:49: 84:66
        StorageLive(_4);                 // scope 1 at ui/const-ptr/allowed_slices.rs:84:49: 84:51
        _4 = const {alloc1: &&[u32]};    // scope 1 at ui/const-ptr/allowed_slices.rs:84:49: 84:51
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:84:49: 84:51
                                         // + literal: Const { ty: &&[u32], val: Value(Scalar(alloc1)) }
        _5 = deref_copy (*_4);           // scope 1 at ui/const-ptr/allowed_slices.rs:84:49: 84:66
        _3 = &(*_5);                     // scope 1 at ui/const-ptr/allowed_slices.rs:84:49: 84:66
        ConstEvalCounter;                // scope 1 at ui/const-ptr/allowed_slices.rs:84:49: 84:66
        _2 = core::slice::<impl [u32]>::as_ptr_range(move _3) -> bb1; // scope 1 at ui/const-ptr/allowed_slices.rs:84:49: 84:66
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:84:52: 84:64
                                         // + literal: Const { ty: for<'a> fn(&'a [u32]) -> std::ops::Range<*const u32> {core::slice::<impl [u32]>::as_ptr_range}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:84:65: 84:66
        ConstEvalCounter;                // scope 1 at ui/const-ptr/allowed_slices.rs:84:34: 84:67
        _1 = from_ptr_range::<'_, u32>(move _2) -> bb2; // scope 1 at ui/const-ptr/allowed_slices.rs:84:34: 84:67
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:84:34: 84:48
                                         // + literal: Const { ty: unsafe fn(std::ops::Range<*const u32>) -> &[u32] {from_ptr_range::<'_, u32>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = &(*_1);                     // scope 1 at ui/const-ptr/allowed_slices.rs:84:34: 84:67
        StorageDead(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:84:66: 84:67
        StorageDead(_4);                 // scope 0 at ui/const-ptr/allowed_slices.rs:84:68: 84:69
        StorageDead(_1);                 // scope 0 at ui/const-ptr/allowed_slices.rs:84:68: 84:69
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:84:1: 84:70
    }
}

alloc1 (static: R0, size: 16, align: 8) {
    04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
}

static R10: &[u32] = {
    let mut _0: &[u32];                  // return place in scope 0 at ui/const-ptr/allowed_slices.rs:85:17: 85:23
    let _1: &[u32];                      // in scope 0 at ui/const-ptr/allowed_slices.rs:85:35: 85:68
    let mut _2: std::ops::Range<*const u32>; // in scope 0 at ui/const-ptr/allowed_slices.rs:85:50: 85:67
    let mut _3: &[u32];                  // in scope 0 at ui/const-ptr/allowed_slices.rs:85:50: 85:67
    let _4: &&[u32];                     // in scope 0 at ui/const-ptr/allowed_slices.rs:85:50: 85:52
    let mut _5: &[u32];                  // in scope 0 at ui/const-ptr/allowed_slices.rs:85:50: 85:52
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/const-ptr/allowed_slices.rs:85:35: 85:68
        StorageLive(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:85:50: 85:67
        StorageLive(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:85:50: 85:67
        StorageLive(_4);                 // scope 1 at ui/const-ptr/allowed_slices.rs:85:50: 85:52
        _4 = const {alloc2: &&[u32]};    // scope 1 at ui/const-ptr/allowed_slices.rs:85:50: 85:52
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:85:50: 85:52
                                         // + literal: Const { ty: &&[u32], val: Value(Scalar(alloc2)) }
        _5 = deref_copy (*_4);           // scope 1 at ui/const-ptr/allowed_slices.rs:85:50: 85:67
        _3 = &(*_5);                     // scope 1 at ui/const-ptr/allowed_slices.rs:85:50: 85:67
        ConstEvalCounter;                // scope 1 at ui/const-ptr/allowed_slices.rs:85:50: 85:67
        _2 = core::slice::<impl [u32]>::as_ptr_range(move _3) -> bb1; // scope 1 at ui/const-ptr/allowed_slices.rs:85:50: 85:67
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:85:53: 85:65
                                         // + literal: Const { ty: for<'a> fn(&'a [u32]) -> std::ops::Range<*const u32> {core::slice::<impl [u32]>::as_ptr_range}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 1 at ui/const-ptr/allowed_slices.rs:85:66: 85:67
        ConstEvalCounter;                // scope 1 at ui/const-ptr/allowed_slices.rs:85:35: 85:68
        _1 = from_ptr_range::<'_, u32>(move _2) -> bb2; // scope 1 at ui/const-ptr/allowed_slices.rs:85:35: 85:68
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:85:35: 85:49
                                         // + literal: Const { ty: unsafe fn(std::ops::Range<*const u32>) -> &[u32] {from_ptr_range::<'_, u32>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = &(*_1);                     // scope 1 at ui/const-ptr/allowed_slices.rs:85:35: 85:68
        StorageDead(_2);                 // scope 1 at ui/const-ptr/allowed_slices.rs:85:67: 85:68
        StorageDead(_4);                 // scope 0 at ui/const-ptr/allowed_slices.rs:85:69: 85:70
        StorageDead(_1);                 // scope 0 at ui/const-ptr/allowed_slices.rs:85:69: 85:70
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:85:1: 85:71
    }
}

alloc2 (static: R2, size: 16, align: 8) {
    ╾───────alloc71───────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc71 (size: 4, align: 4) {
    01 00 01 00                                     │ ....
}

const D0: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/const-ptr/allowed_slices.rs:87:11: 87:14
    let mut _1: u32;                     // in scope 0 at ui/const-ptr/allowed_slices.rs:87:17: 87:26
    let mut _2: (u32, bool);             // in scope 0 at ui/const-ptr/allowed_slices.rs:87:17: 87:26

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-ptr/allowed_slices.rs:87:17: 87:26
        _2 = CheckedShl(const 1_u32, const 16_i32); // scope 0 at ui/const-ptr/allowed_slices.rs:87:17: 87:26
        assert(!move (_2.1: bool), "attempt to shift left by `{}`, which would overflow", const 16_i32) -> bb1; // scope 0 at ui/const-ptr/allowed_slices.rs:87:17: 87:26
    }

    bb1: {
        _1 = move (_2.0: u32);           // scope 0 at ui/const-ptr/allowed_slices.rs:87:17: 87:26
        _0 = BitOr(move _1, const 1_u32); // scope 0 at ui/const-ptr/allowed_slices.rs:87:17: 87:30
        StorageDead(_1);                 // scope 0 at ui/const-ptr/allowed_slices.rs:87:29: 87:30
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:87:1: 87:31
    }
}

const D1: MaybeUninit<&u32> = {
    let mut _0: std::mem::MaybeUninit<&u32>; // return place in scope 0 at ui/const-ptr/allowed_slices.rs:88:11: 88:28

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/const-ptr/allowed_slices.rs:88:31: 88:52
        _0 = MaybeUninit::<&u32>::uninit() -> bb1; // scope 0 at ui/const-ptr/allowed_slices.rs:88:31: 88:52
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:88:31: 88:50
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> MaybeUninit<&u32> {MaybeUninit::<&u32>::uninit}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:88:1: 88:53
    }
}

const D2: Struct = {
    let mut _0: Struct;                  // return place in scope 0 at ui/const-ptr/allowed_slices.rs:89:11: 89:17

    bb0: {
        _0 = Struct { a: const 1_u8, b: const 2_u32, c: const 3_u16, d: const 4_u8 }; // scope 0 at ui/const-ptr/allowed_slices.rs:89:20: 89:53
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:89:1: 89:54
    }
}

fn dangling() -> *const T {
    let mut _0: *const T;                // return place in scope 0 at ui/const-ptr/allowed_slices.rs:92:5: 92:43
    let mut _1: *mut T;                  // in scope 0 at ui/const-ptr/allowed_slices.rs:92:5: 92:38
    let mut _2: std::ptr::NonNull<T>;    // in scope 0 at ui/const-ptr/allowed_slices.rs:92:5: 92:29

    bb0: {
        _2 = NonNull::<T>::dangling() -> bb1; // scope 0 at ui/const-ptr/allowed_slices.rs:92:5: 92:29
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:92:5: 92:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> NonNull<T> {NonNull::<T>::dangling}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = NonNull::<T>::as_ptr(move _2) -> bb2; // scope 0 at ui/const-ptr/allowed_slices.rs:92:5: 92:38
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:92:30: 92:36
                                         // + literal: Const { ty: fn(NonNull<T>) -> *mut T {NonNull::<T>::as_ptr}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = move _1 as *const T (Pointer(MutToConstPointer)); // scope 0 at ui/const-ptr/allowed_slices.rs:92:5: 92:38
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:93:2: 93:2
    }
}

// MIR FOR CTFE
fn dangling() -> *const T {
    let mut _0: *const T;                // return place in scope 0 at ui/const-ptr/allowed_slices.rs:91:27: 91:35
    let mut _1: *const T;                // in scope 0 at ui/const-ptr/allowed_slices.rs:92:5: 92:43
    let mut _2: *mut T;                  // in scope 0 at ui/const-ptr/allowed_slices.rs:92:5: 92:38
    let mut _3: std::ptr::NonNull<T>;    // in scope 0 at ui/const-ptr/allowed_slices.rs:92:5: 92:29

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-ptr/allowed_slices.rs:92:5: 92:43
        StorageLive(_2);                 // scope 0 at ui/const-ptr/allowed_slices.rs:92:5: 92:38
        StorageLive(_3);                 // scope 0 at ui/const-ptr/allowed_slices.rs:92:5: 92:29
        ConstEvalCounter;                // scope 0 at ui/const-ptr/allowed_slices.rs:92:5: 92:29
        _3 = NonNull::<T>::dangling() -> bb1; // scope 0 at ui/const-ptr/allowed_slices.rs:92:5: 92:29
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:92:5: 92:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> NonNull<T> {NonNull::<T>::dangling}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 0 at ui/const-ptr/allowed_slices.rs:92:5: 92:38
        _2 = NonNull::<T>::as_ptr(move _3) -> bb2; // scope 0 at ui/const-ptr/allowed_slices.rs:92:5: 92:38
                                         // mir::Constant
                                         // + span: ui/const-ptr/allowed_slices.rs:92:30: 92:36
                                         // + literal: Const { ty: fn(NonNull<T>) -> *mut T {NonNull::<T>::as_ptr}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = move _2 as *const T (Pointer(MutToConstPointer)); // scope 0 at ui/const-ptr/allowed_slices.rs:92:5: 92:38
        StorageDead(_3);                 // scope 0 at ui/const-ptr/allowed_slices.rs:92:37: 92:38
        StorageDead(_2);                 // scope 0 at ui/const-ptr/allowed_slices.rs:92:37: 92:38
        _0 = _1;                         // scope 0 at ui/const-ptr/allowed_slices.rs:92:5: 92:43
        StorageDead(_1);                 // scope 0 at ui/const-ptr/allowed_slices.rs:93:1: 93:2
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:93:2: 93:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-ptr/allowed_slices.rs:105:11: 105:11

    bb0: {
        return;                          // scope 0 at ui/const-ptr/allowed_slices.rs:105:13: 105:13
    }
}
