// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/oom_unwind.rs:11:11: 11:11
    let _1: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/oom_unwind.rs:12:9: 12:14
    let mut _2: [closure@ui/oom_unwind.rs:12:30: 12:32]; // in scope 0 at ui/oom_unwind.rs:12:30: 19:6
    let mut _3: bool;                    // in scope 0 at ui/oom_unwind.rs:20:5: 20:28
    let mut _4: bool;                    // in scope 0 at ui/oom_unwind.rs:20:13: 20:27
    let mut _5: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/oom_unwind.rs:20:13: 20:27
    let mut _6: !;                       // in scope 0 at ui/oom_unwind.rs:20:5: 20:28
    scope 1 {
        debug panic => _1;               // in scope 1 at ui/oom_unwind.rs:12:9: 12:14
    }

    bb0: {
        _1 = catch_unwind::<[closure@ui/oom_unwind.rs:12:30: 12:32], ()>(move _2) -> bb1; // scope 0 at ui/oom_unwind.rs:12:17: 19:7
                                         // mir::Constant
                                         // + span: ui/oom_unwind.rs:12:17: 12:29
                                         // + literal: Const { ty: fn([closure@ui/oom_unwind.rs:12:30: 12:32]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/oom_unwind.rs:12:30: 12:32], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_1;                        // scope 1 at ui/oom_unwind.rs:20:13: 20:27
        _4 = Result::<(), Box<dyn Any + Send>>::is_err(move _5) -> [return: bb2, unwind: bb6]; // scope 1 at ui/oom_unwind.rs:20:13: 20:27
                                         // mir::Constant
                                         // + span: ui/oom_unwind.rs:20:19: 20:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Not(move _4);               // scope 1 at ui/oom_unwind.rs:20:5: 20:28
        switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 1 at ui/oom_unwind.rs:20:5: 20:28
    }

    bb3: {
        _6 = core::panicking::panic(const "assertion failed: panic.is_err()") -> bb6; // scope 1 at ui/oom_unwind.rs:20:5: 20:28
                                         // mir::Constant
                                         // + span: ui/oom_unwind.rs:20:5: 20:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/oom_unwind.rs:21:1: 21:2
    }

    bb5: {
        return;                          // scope 0 at ui/oom_unwind.rs:21:2: 21:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/oom_unwind.rs:21:1: 21:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/oom_unwind.rs:11:1: 21:2
    }
}

fn main::{closure#0}(_1: [closure@ui/oom_unwind.rs:12:30: 12:32]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/oom_unwind.rs:12:33: 12:33
    let mut _2: std::ops::Range<i32>;    // in scope 0 at ui/oom_unwind.rs:14:18: 14:23
    let mut _3: std::ops::Range<i32>;    // in scope 0 at ui/oom_unwind.rs:14:18: 14:23
    let mut _4: std::ops::Range<i32>;    // in scope 0 at ui/oom_unwind.rs:14:18: 14:23
    let mut _5: std::option::Option<i32>; // in scope 0 at ui/oom_unwind.rs:14:18: 14:23
    let mut _6: &mut std::ops::Range<i32>; // in scope 0 at ui/oom_unwind.rs:14:18: 14:23
    let mut _7: &mut std::ops::Range<i32>; // in scope 0 at ui/oom_unwind.rs:14:18: 14:23
    let mut _8: isize;                   // in scope 0 at ui/oom_unwind.rs:14:9: 18:10
    let _10: ();                         // in scope 0 at ui/oom_unwind.rs:17:13: 17:53
    let mut _11: std::vec::Vec<u8>;      // in scope 0 at ui/oom_unwind.rs:17:20: 17:52
    let mut _12: std::vec::Vec<u8>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:47:36: 47:69
    let mut _13: usize;                  // in scope 0 at ui/oom_unwind.rs:17:40: 17:50
    scope 1 {
        debug iter => _4;                // in scope 1 at ui/oom_unwind.rs:14:18: 14:23
        let _9: usize;                   // in scope 1 at ui/oom_unwind.rs:16:17: 16:27
        scope 2 {
            debug alloc_size => _9;      // in scope 2 at ui/oom_unwind.rs:16:17: 16:27
        }
    }

    bb0: {
        _3 = std::ops::Range::<i32> { start: const 0_i32, end: const 16_i32 }; // scope 0 at ui/oom_unwind.rs:14:18: 14:23
        _2 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _3) -> bb1; // scope 0 at ui/oom_unwind.rs:14:18: 14:23
                                         // mir::Constant
                                         // + span: ui/oom_unwind.rs:14:18: 14:23
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/oom_unwind.rs:14:18: 14:23
        goto -> bb2;                     // scope 1 at ui/oom_unwind.rs:14:9: 18:10
    }

    bb2: {
        _7 = &mut _4;                    // scope 1 at ui/oom_unwind.rs:14:18: 14:23
        _6 = &mut (*_7);                 // scope 1 at ui/oom_unwind.rs:14:18: 14:23
        _5 = <std::ops::Range<i32> as Iterator>::next(move _6) -> bb3; // scope 1 at ui/oom_unwind.rs:14:18: 14:23
                                         // mir::Constant
                                         // + span: ui/oom_unwind.rs:14:18: 14:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = discriminant(_5);           // scope 1 at ui/oom_unwind.rs:14:18: 14:23
        switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/oom_unwind.rs:14:18: 14:23
    }

    bb4: {
        _9 = const 1152921504875282432_usize; // scope 1 at ui/oom_unwind.rs:16:30: 16:63
        _13 = const 1152921504875282432_usize; // scope 2 at ui/oom_unwind.rs:17:40: 17:50
        _12 = from_elem::<u8>(const 0_u8, move _13) -> bb7; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:47:36: 47:69
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:47:36: 47:58
                                         // + literal: Const { ty: fn(u8, usize) -> Vec<u8> {from_elem::<u8>}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 1 at ui/oom_unwind.rs:14:18: 14:23
    }

    bb6: {
        return;                          // scope 0 at ui/oom_unwind.rs:19:6: 19:6
    }

    bb7: {
        _11 = std::hint::black_box::<Vec<u8>>(move _12) -> bb8; // scope 2 at ui/oom_unwind.rs:17:20: 17:52
                                         // mir::Constant
                                         // + span: ui/oom_unwind.rs:17:20: 17:29
                                         // + literal: Const { ty: fn(Vec<u8>) -> Vec<u8> {std::hint::black_box::<Vec<u8>>}, val: Value(<ZST>) }
    }

    bb8: {
        _10 = std::mem::forget::<Vec<u8>>(move _11) -> bb2; // scope 2 at ui/oom_unwind.rs:17:13: 17:53
                                         // mir::Constant
                                         // + span: ui/oom_unwind.rs:17:13: 17:19
                                         // + literal: Const { ty: fn(Vec<u8>) {std::mem::forget::<Vec<u8>>}, val: Value(<ZST>) }
    }
}
